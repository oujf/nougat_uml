format 76
"transition" // nougat_src::frameworks::base::core::java::android::transition
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/base/core/java/android/transition/"
  java_package "android.transition"
  classview 131127 "transition"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 158647 "TransitionManager"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class manages the set of transitions that fire when there is a
change of {@link Scene}. To use the manager, add scenes along with
transition objects with calls to {@link #setTransition(Scene, Transition)}
or {@link #setTransition(Scene, Scene, Transition)}. Setting specific
transitions for scene changes is not required; by default, a Scene change
will use {@link AutoTransition} to do something reasonable for most
situations. Specifying other transitions for particular scene changes is
only necessary if the application wants different transition behavior
in these situations.

<p>TransitionManagers can be declared in XML resource files inside the
<code>res/transition</code> directory. TransitionManager resources consist of
the <code>transitionManager</code>tag name, containing one or more
<code>transition</code> tags, each of which describe the relationship of
that transition to the from/to scene information in that tag.
For example, here is a resource file that declares several scene
transitions:</p>

{@sample development/samples/ApiDemos/res/transition/transitions_mgr.xml TransitionManager}

<p>For each of the <code>fromScene</code> and <code>toScene</code> attributes,
there is a reference to a standard XML layout file. This is equivalent to
creating a scene from a layout in code by calling
{@link Scene#getSceneForLayout(ViewGroup, int, Context)}. For the
<code>transition</code> attribute, there is a reference to a resource
file in the <code>res/transition</code> directory which describes that
transition.</p>

Information on XML resource descriptions for transitions can be found for
{@link android.R.styleable#Transition}, {@link android.R.styleable#TransitionSet},
{@link android.R.styleable#TransitionTarget}, {@link android.R.styleable#Fade},
and {@link android.R.styleable#TransitionManager}."
      classrelation 1991735 // LOG_TAG (<unidirectional association>)
	relation 1991735 --->
	  a role_name "LOG_TAG" init_value " \"TransitionManager\"" class_relation private
	    comment " TODO: how to handle enter/exit?
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1991735 // LOG_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1991863 // sDefaultTransition (<unidirectional association>)
	relation 1991863 --->
	  a role_name "sDefaultTransition" init_value " new AutoTransition()" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1991863 // sDefaultTransition (<unidirectional association>)
	  b parent class_ref 341303 // Transition
      end

      classrelation 1991991 // EMPTY_STRINGS (<unidirectional association>)
	relation 1991991 --->
	  a role_name "EMPTY_STRINGS" multiplicity "[]" init_value " new String[0]" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1991991 // EMPTY_STRINGS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1992119 // mSceneTransitions (<unidirectional association>)
	relation 1992119 --->
	  a role_name "mSceneTransitions" init_value " new ArrayMap<Scene, Transition>()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Scene, Transition> ${name}${value};
"
	    classrelation_ref 1992119 // mSceneTransitions (<unidirectional association>)
	  b parent class_ref 156343 // ArrayMap
      end

      classrelation 1992247 // mScenePairTransitions (<unidirectional association>)
	relation 1992247 --->
	  a role_name "mScenePairTransitions" init_value "
            new ArrayMap<Scene, ArrayMap<Scene, Transition>>()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Scene, ArrayMap<Scene, Transition>> ${name}${value};
"
	    classrelation_ref 1992247 // mScenePairTransitions (<unidirectional association>)
	  b parent class_ref 156343 // ArrayMap
      end

      attribute 2014647 "sRunningTransitions"
	class_attribute private explicit_type "WeakReference<ArrayMap<ViewGroup, ArrayList<Transition>>>"
	init_value "
            new ThreadLocal<WeakReference<ArrayMap<ViewGroup, ArrayList<Transition>>>>()"
	stereotype "ThreadLocal"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1992375 // sPendingTransitions (<unidirectional association>)
	relation 1992375 --->
	  stereotype "ArrayList"
	  a role_name "sPendingTransitions" init_value " new ArrayList<ViewGroup>()" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1992375 // sPendingTransitions (<unidirectional association>)
	  b parent class_ref 134711 // ViewGroup
      end

      operation 4686391 "setDefaultTransition"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transition" type class_ref 341303 // Transition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the transition to be used for any scene change for which no
other transition is explicitly set. The initial value is
an {@link AutoTransition} instance.

@param transition The default transition to be used for scene changes.

@hide pending later changes"
      end

      operation 4686519 "getDefaultTransition"
	class_operation public return_type class_ref 341303 // Transition
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current default transition. The initial value is an {@link
AutoTransition} instance.

@return The current default transition.
@see #setDefaultTransition(Transition)

@hide pending later changes"
      end

      operation 4686647 "setTransition"
	public explicit_return_type "void"
	nparams 2
	  param inout name "scene" type class_ref 158775 // Scene
	  param inout name "transition" type class_ref 341303 // Transition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a specific transition to occur when the given scene is entered.

@param scene The scene which, when applied, will cause the given
transition to run.
@param transition The transition that will play when the given scene is
entered. A value of null will result in the default behavior of
using the default transition instead."
      end

      operation 4686775 "setTransition"
	public explicit_return_type "void"
	nparams 3
	  param inout name "fromScene" type class_ref 158775 // Scene
	  param inout name "toScene" type class_ref 158775 // Scene
	  param inout name "transition" type class_ref 341303 // Transition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a specific transition to occur when the given pair of scenes is
exited/entered.

@param fromScene The scene being exited when the given transition will
be run
@param toScene The scene being entered when the given transition will
be run
@param transition The transition that will play when the given scene is
entered. A value of null will result in the default behavior of
using the default transition instead."
      end

      operation 4686903 "getTransition"
	private return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "scene" type class_ref 158775 // Scene
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Transition for the given scene being entered. The result
depends not only on the given scene, but also the scene which the
{@link Scene#getSceneRoot() sceneRoot} of the Scene is currently in.

@param scene The scene being entered
@return The Transition to be used for the given scene change. If no
Transition was specified for this scene change, the default transition
will be used instead."
      end

      operation 4687031 "changeScene"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "scene" type class_ref 158775 // Scene
	  param inout name "transition" type class_ref 341303 // Transition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is where all of the work of a transition/scene-change is
orchestrated. This method captures the start values for the given
transition, exits the current Scene, enters the new scene, captures
the end values for the transition, and finally plays the
resulting values-populated transition.

@param scene The scene being entered
@param transition The transition to play for this scene change"
      end

      operation 4687159 "getRunningTransitions"
	class_operation private return_type class_ref 156343 // ArrayMap
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ViewGroup, ArrayList<Transition>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4687287 "sceneChangeRunTransition"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "sceneRoot" type class_ref 134711 // ViewGroup
	  param in name "transition" type class_ref 341303 // Transition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 659383 "MultiListener"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1992503 // <realization>
	  relation 1992503 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1992503 // <realization>
	    b parent class_ref 268343 // OnPreDrawListener
	end

	classrelation 1992631 // <realization>
	  relation 1992631 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1992631 // <realization>
	    b parent class_ref 142519 // OnAttachStateChangeListener
	end

	classrelation 1992759 // mTransition (<unidirectional association>)
	  relation 1992759 --->
	    a role_name "mTransition" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1992759 // mTransition (<unidirectional association>)
	    b parent class_ref 341303 // Transition
	end

	classrelation 1992887 // mSceneRoot (<unidirectional association>)
	  relation 1992887 --->
	    a role_name "mSceneRoot" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1992887 // mSceneRoot (<unidirectional association>)
	    b parent class_ref 134711 // ViewGroup
	end

	operation 4687415 "MultiListener"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "transition" type class_ref 341303 // Transition
	    param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4687543 "removeListeners"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4687671 "onViewAttachedToWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4687799 "onViewDetachedFromWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4687927 "onPreDraw"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 4688055 "sceneChangeSetup"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "transition" type class_ref 341303 // Transition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4688183 "transitionTo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "scene" type class_ref 158775 // Scene
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Change to the given scene, using the
appropriate transition for this particular scene change
(as specified to the TransitionManager, or the default
if no such transition exists).

@param scene The Scene to change to"
      end

      operation 4688311 "go"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "scene" type class_ref 158775 // Scene
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to simply change to the given scene using
the default transition for TransitionManager.

@param scene The Scene to change to"
      end

      operation 4688439 "go"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "scene" type class_ref 158775 // Scene
	  param inout name "transition" type class_ref 341303 // Transition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to simply change to the given scene using
the given transition.

<p>Passing in <code>null</code> for the transition parameter will
result in the scene changing without any transition running, and is
equivalent to calling {@link Scene#exit()} on the scene root's
current scene, followed by {@link Scene#enter()} on the scene
specified by the <code>scene</code> parameter.</p>

@param scene The Scene to change to
@param transition The transition to use for this scene change. A
value of null causes the scene change to happen with no transition."
      end

      operation 4688567 "beginDelayedTransition"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "sceneRoot" type class_ref 134711 // ViewGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to animate, using the default transition,
to a new scene defined by all changes within the given scene root between
calling this method and the next rendering frame.
Equivalent to calling {@link #beginDelayedTransition(ViewGroup, Transition)}
with a value of <code>null</code> for the <code>transition</code> parameter.

@param sceneRoot The root of the View hierarchy to run the transition on."
      end

      operation 4688695 "beginDelayedTransition"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "transition" type class_ref 341303 // Transition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to animate to a new scene defined by all changes within
the given scene root between calling this method and the next rendering frame.
Calling this method causes TransitionManager to capture current values in the
scene root and then post a request to run a transition on the next frame.
At that time, the new values in the scene root will be captured and changes
will be animated. There is no need to create a Scene; it is implied by
changes which take place between calling this method and the next frame when
the transition begins.

<p>Calling this method several times before the next frame (for example, if
unrelated code also wants to make dynamic changes and run a transition on
the same scene root), only the first call will trigger capturing values
and exiting the current scene. Subsequent calls to the method with the
same scene root during the same frame will be ignored.</p>

<p>Passing in <code>null</code> for the transition parameter will
cause the TransitionManager to use its default transition.</p>

@param sceneRoot The root of the View hierarchy to run the transition on.
@param transition The transition to use for this change. A
value of null causes the TransitionManager to use the default transition."
      end

      operation 4688823 "endTransitions"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "sceneRoot" type class_ref 134711 // ViewGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ends all pending and ongoing transitions on the specified scene root.

@param sceneRoot The root of the View hierarchy to end transitions on."
      end
    end

    class 158775 "Scene"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A scene represents the collection of values that various properties in the
View hierarchy will have when the scene is applied. A Scene can be
configured to automatically run a Transition when it is applied, which will
animate the various property changes that take place during the
scene change."
      classrelation 1988919 // mContext (<unidirectional association>)
	relation 1988919 --->
	  a role_name "mContext" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1988919 // mContext (<unidirectional association>)
	  b parent class_ref 128567 // Context
      end

      attribute 2013751 "mLayoutId"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1989047 // mSceneRoot (<unidirectional association>)
	relation 1989047 --->
	  a role_name "mSceneRoot" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1989047 // mSceneRoot (<unidirectional association>)
	  b parent class_ref 134711 // ViewGroup
      end

      classrelation 1989175 // mLayout (<unidirectional association>)
	relation 1989175 --->
	  a role_name "mLayout" private
	    comment " alternative to layoutId"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1989175 // mLayout (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      attribute 2013879 "mEnterAction"
	package explicit_type "Runnable"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2014007 "mExitAction"
	package explicit_type "Runnable"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4681015 "getSceneForLayout"
	class_operation public return_type class_ref 158775 // Scene
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param in name "layoutId" explicit_type "int"
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Scene described by the resource file associated with the given
<code>layoutId</code> parameter. If such a Scene has already been created for
the given <code>sceneRoot</code>, that same Scene will be returned.
This caching of layoutId-based scenes enables sharing of common scenes
between those created in code and those referenced by {@link TransitionManager}
XML resource files.

@param sceneRoot The root of the hierarchy in which scene changes
and transitions will take place.
@param layoutId The id of a standard layout resource file.
@param context The context used in the process of inflating
the layout resource.
@return The scene for the given root and layout id"
      end

      operation 4681143 "Scene"
	public explicit_return_type ""
	nparams 1
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Scene with no information about how values will change
when this scene is applied. This constructor might be used when
a Scene is created with the intention of being dynamically configured,
through setting {@link #setEnterAction(Runnable)} and possibly
{@link #setExitAction(Runnable)}.

@param sceneRoot The root of the hierarchy in which scene changes
and transitions will take place."
      end

      operation 4681271 "Scene"
	private explicit_return_type ""
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param in name "layoutId" explicit_type "int"
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Scene which, when entered, will remove any
children from the sceneRoot container and will inflate and add
the hierarchy specified by the layoutId resource file.

<p>This method is hidden because layoutId-based scenes should be
created by the caching factory method {@link Scene#getCurrentScene(View)}.</p>

@param sceneRoot The root of the hierarchy in which scene changes
and transitions will take place.
@param layoutId The id of a resource file that defines the view
hierarchy of this scene.
@param context The context used in the process of inflating
the layout resource."
      end

      operation 4681399 "Scene"
	public explicit_return_type ""
	nparams 2
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "layout" type class_ref 134455 // View
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Scene which, when entered, will remove any
children from the sceneRoot container and add the layout
object as a new child of that container.

@param sceneRoot The root of the hierarchy in which scene changes
and transitions will take place.
@param layout The view hierarchy of this scene, added as a child
of sceneRoot when this scene is entered."
      end

      operation 4681527 "Scene"
	public explicit_return_type ""
	nparams 2
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "layout" type class_ref 134711 // ViewGroup
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "@deprecated use {@link #Scene(ViewGroup, View)}."
      end

      operation 4681655 "getSceneRoot"
	public return_type class_ref 134711 // ViewGroup
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the root of the scene, which is the root of the view hierarchy
affected by changes due to this scene, and which will be animated
when this scene is entered.

@return The root of the view hierarchy affected by this scene."
      end

      operation 4681783 "exit"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Exits this scene, if it is the current scene
on the scene's {@link #getSceneRoot() scene root}. The current scene is
set when {@link #enter() entering} a scene.
Exiting a scene runs the {@link #setExitAction(Runnable) exit action}
if there is one."
      end

      operation 4681911 "enter"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enters this scene, which entails changing all values that
are specified by this scene. These may be values associated
with a layout view group or layout resource file which will
now be added to the scene root, or it may be values changed by
an {@link #setEnterAction(Runnable)} enter action}, or a
combination of the these. No transition will be run when the
scene is entered. To get transition behavior in scene changes,
use one of the methods in {@link TransitionManager} instead."
      end

      operation 4682039 "setCurrentScene"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "view" type class_ref 134455 // View
	  param inout name "scene" type class_ref 158775 // Scene
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the scene that the given view is in. The current scene is set only
on the root view of a scene, not for every view in that hierarchy. This
information is used by Scene to determine whether there is a previous
scene which should be exited before the new scene is entered.

@param view The view on which the current scene is being set"
      end

      operation 4682167 "getCurrentScene"
	class_operation package return_type class_ref 158775 // Scene
	nparams 1
	  param inout name "view" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current {@link Scene} set on the given view. A scene is set on a view
only if that view is the scene root.

@return The current Scene set on this view. A value of null indicates that
no Scene is currently set."
      end

      operation 4682295 "setEnterAction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" explicit_type "Runnable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scenes that are not defined with layout resources or
hierarchies, or which need to perform additional steps
after those hierarchies are changed to, should set an enter
action, and possibly an exit action as well. An enter action
will cause Scene to call back into application code to do
anything else the application needs after transitions have
captured pre-change values and after any other scene changes
have been applied, such as the layout (if any) being added to
the view hierarchy. After this method is called, Transitions will
be played.

@param action The runnable whose {@link Runnable#run() run()} method will
be called when this scene is entered
@see #setExitAction(Runnable)
@see Scene#Scene(ViewGroup, int, Context)
@see Scene#Scene(ViewGroup, ViewGroup)"
      end

      operation 4682423 "setExitAction"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" explicit_type "Runnable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scenes that are not defined with layout resources or
hierarchies, or which need to perform additional steps
after those hierarchies are changed to, should set an enter
action, and possibly an exit action as well. An exit action
will cause Scene to call back into application code to do
anything the application needs to do after applicable transitions have
captured pre-change values, but before any other scene changes
have been applied, such as the new layout (if any) being added to
the view hierarchy. After this method is called, the next scene
will be entered, including a call to {@link #setEnterAction(Runnable)}
if an enter action is set.

@see #setEnterAction(Runnable)
@see Scene#Scene(ViewGroup, int, Context)
@see Scene#Scene(ViewGroup, ViewGroup)"
      end

      operation 4682551 "isCreatedFromLayoutResource"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this Scene was created by a layout resource file, determined
by the layoutId passed into
{@link #getSceneForLayout(android.view.ViewGroup, int, android.content.Context)}.
This is called by TransitionManager to determine whether it is safe for views from
this scene to be removed from their parents when the scene is exited, which is
used by {@link Fade} to fade these views out (the views must be removed from
their parent in order to add them to the overlay for fading purposes). If a
Scene is not based on a resource file, then the impact of removing views
arbitrarily is unknown and should be avoided."
      end
    end

    class 341303 "Transition"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A Transition holds information about animations that will be run on its
targets during a scene change. Subclasses of this abstract class may
choreograph several child transitions ({@link TransitionSet} or they may
perform custom animations themselves. Any Transition has two main jobs:
(1) capture property values, and (2) play animations based on changes to
captured property values. A custom transition knows what property values
on View objects are of interest to it, and also knows how to animate
changes to those values. For example, the {@link Fade} transition tracks
changes to visibility-related properties and is able to construct and run
animations that fade items in or out based on changes to those properties.

<p>Note: Transitions may not work correctly with either {@link SurfaceView}
or {@link TextureView}, due to the way that these views are displayed
on the screen. For SurfaceView, the problem is that the view is updated from
a non-UI thread, so changes to the view due to transitions (such as moving
and resizing the view) may be out of sync with the display inside those bounds.
TextureView is more compatible with transitions in general, but some
specific transitions (such as {@link Fade}) may not be compatible
with TextureView because they rely on {@link ViewOverlay} functionality,
which does not currently work with TextureView.</p>

<p>Transitions can be declared in XML resource files inside the <code>res/transition</code>
directory. Transition resources consist of a tag name for one of the Transition
subclasses along with attributes to define some of the attributes of that transition.
For example, here is a minimal resource file that declares a {@link ChangeBounds} transition:

{@sample development/samples/ApiDemos/res/transition/changebounds.xml ChangeBounds}

<p>This TransitionSet contains {@link android.transition.Explode} for visibility,
{@link android.transition.ChangeBounds}, {@link android.transition.ChangeTransform},
and {@link android.transition.ChangeClipBounds} and
{@link android.transition.ChangeImageTransform}:</p>

{@sample development/samples/ApiDemos/res/transition/explode_move_together.xml MultipleTransform}

<p>Custom transition classes may be instantiated with a <code>transition</code> tag:</p>
<pre>&lt;transition class=\"my.app.transition.CustomTransition\"/></pre>
<p>Custom transition classes loaded from XML should have a public constructor taking
a {@link android.content.Context} and {@link android.util.AttributeSet}.</p>

<p>Note that attributes for the transition are not required, just as they are
optional when declared in code; Transitions created from XML resources will use
the same defaults as their code-created equivalents. Here is a slightly more
elaborate example which declares a {@link TransitionSet} transition with
{@link ChangeBounds} and {@link Fade} child transitions:</p>

{@sample
development/samples/ApiDemos/res/transition/changebounds_fadeout_sequential.xml TransitionSet}

<p>In this example, the transitionOrdering attribute is used on the TransitionSet
object to change from the default {@link TransitionSet#ORDERING_TOGETHER} behavior
to be {@link TransitionSet#ORDERING_SEQUENTIAL} instead. Also, the {@link Fade}
transition uses a fadingMode of {@link Fade#OUT} instead of the default
out-in behavior. Finally, note the use of the <code>targets</code> sub-tag, which
takes a set of {@link android.R.styleable#TransitionTarget target} tags, each
of which lists a specific <code>targetId</code>, <code>targetClass</code>,
<code>targetName</code>, <code>excludeId</code>, <code>excludeClass</code>, or
<code>excludeName</code>, which this transition acts upon.
Use of targets is optional, but can be used to either limit the time spent checking
attributes on unchanging views, or limiting the types of animations run on specific views.
In this case, we know that only the <code>grayscaleContainer</code> will be
disappearing, so we choose to limit the {@link Fade} transition to only that view.</p>

Further information on XML resource descriptions for transitions can be found for
{@link android.R.styleable#Transition}, {@link android.R.styleable#TransitionSet},
{@link android.R.styleable#TransitionTarget}, {@link android.R.styleable#Fade},
{@link android.R.styleable#Slide}, and {@link android.R.styleable#ChangeTransform}.
"
      class 341687 "TransitionListenerAdapter"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 714423 // <realization>
	  relation 714423 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 714423 // <realization>
	    b parent class_ref 342327 // TransitionListener
	end

	operation 1758903 "onTransitionStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1759031 "onTransitionEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1759159 "onTransitionCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1759287 "onTransitionPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1759415 "onTransitionResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 710327 // <realization>
	relation 710327 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 710327 // <realization>
	  b parent class_ref 242231 // Cloneable
      end

      classrelation 710455 // LOG_TAG (<unidirectional association>)
	relation 710455 --->
	  a role_name "LOG_TAG" init_value " \"Transition\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 710455 // LOG_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 705847 "DBG"
	class_attribute const_attribute package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 705975 "MATCH_INSTANCE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "With {@link #setMatchOrder(int...)}, chooses to match by View instance.
"
      end

      attribute 706103 "MATCH_FIRST"
	class_attribute const_attribute private explicit_type "int"
	init_value " MATCH_INSTANCE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 706231 "MATCH_NAME"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "With {@link #setMatchOrder(int...)}, chooses to match by
{@link android.view.View#getTransitionName()}. Null names will not be matched.
"
      end

      attribute 706359 "MATCH_ID"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "With {@link #setMatchOrder(int...)}, chooses to match by
{@link android.view.View#getId()}. Negative IDs will not be matched.
"
      end

      attribute 706487 "MATCH_ITEM_ID"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "With {@link #setMatchOrder(int...)}, chooses to match by the {@link android.widget.Adapter}
item id. When {@link android.widget.Adapter#hasStableIds()} returns false, no match
will be made for items.
"
      end

      attribute 706615 "MATCH_LAST"
	class_attribute const_attribute private explicit_type "int"
	init_value " MATCH_ITEM_ID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 710583 // MATCH_INSTANCE_STR (<unidirectional association>)
	relation 710583 --->
	  a role_name "MATCH_INSTANCE_STR" init_value " \"instance\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 710583 // MATCH_INSTANCE_STR (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 710711 // MATCH_NAME_STR (<unidirectional association>)
	relation 710711 --->
	  a role_name "MATCH_NAME_STR" init_value " \"name\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 710711 // MATCH_NAME_STR (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 710839 // MATCH_VIEW_NAME_STR (<unidirectional association>)
	relation 710839 --->
	  a role_name "MATCH_VIEW_NAME_STR" init_value " \"viewName\"" class_relation const_relation private
	    comment " To be removed before L release 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 710839 // MATCH_VIEW_NAME_STR (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 710967 // MATCH_ID_STR (<unidirectional association>)
	relation 710967 --->
	  a role_name "MATCH_ID_STR" init_value " \"id\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 710967 // MATCH_ID_STR (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 711095 // MATCH_ITEM_ID_STR (<unidirectional association>)
	relation 711095 --->
	  a role_name "MATCH_ITEM_ID_STR" init_value " \"itemId\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 711095 // MATCH_ITEM_ID_STR (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 706743 "DEFAULT_MATCH_ORDER"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        MATCH_NAME,
        MATCH_INSTANCE,
        MATCH_ID,
        MATCH_ITEM_ID,
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 711223 // STRAIGHT_PATH_MOTION (<unidirectional association>)
	relation 711223 --->
	  a role_name "STRAIGHT_PATH_MOTION" init_value " new PathMotion() {
        @Override
        public Path getPath(float startX, float startY, float endX, float endY) {
            Path path = new Path();
            path.moveTo(startX, startY);
            path.lineTo(endX, endY);
            return path;
        }
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 711223 // STRAIGHT_PATH_MOTION (<unidirectional association>)
	  b parent class_ref 341815 // PathMotion
      end

      classrelation 711351 // mName (<unidirectional association>)
	relation 711351 --->
	  a role_name "mName" init_value " getClass().getName()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 711351 // mName (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 706871 "mStartDelay"
	package explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 706999 "mDuration"
	package explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 711479 // mInterpolator (<unidirectional association>)
	relation 711479 --->
	  a role_name "mInterpolator" init_value " null" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 711479 // mInterpolator (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      attribute 707127 "mTargetIds"
	package explicit_type "Integer"
	init_value " new ArrayList<Integer>()"
	stereotype "ArrayList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 711607 // mTargets (<unidirectional association>)
	relation 711607 --->
	  stereotype "ArrayList"
	  a role_name "mTargets" init_value " new ArrayList<View>()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 711607 // mTargets (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      classrelation 711735 // mTargetNames (<unidirectional association>)
	relation 711735 --->
	  stereotype "ArrayList"
	  a role_name "mTargetNames" init_value " null" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 711735 // mTargetNames (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 711863 // mTargetTypes (<unidirectional association>)
	relation 711863 --->
	  stereotype "ArrayList"
	  a role_name "mTargetTypes" init_value " null" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 711863 // mTargetTypes (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      attribute 707255 "mTargetIdExcludes"
	package explicit_type "Integer"
	init_value " null"
	stereotype "ArrayList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 711991 // mTargetExcludes (<unidirectional association>)
	relation 711991 --->
	  stereotype "ArrayList"
	  a role_name "mTargetExcludes" init_value " null" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 711991 // mTargetExcludes (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      classrelation 712119 // mTargetTypeExcludes (<unidirectional association>)
	relation 712119 --->
	  stereotype "ArrayList"
	  a role_name "mTargetTypeExcludes" init_value " null" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 712119 // mTargetTypeExcludes (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 712247 // mTargetNameExcludes (<unidirectional association>)
	relation 712247 --->
	  stereotype "ArrayList"
	  a role_name "mTargetNameExcludes" init_value " null" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 712247 // mTargetNameExcludes (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 707383 "mTargetIdChildExcludes"
	package explicit_type "Integer"
	init_value " null"
	stereotype "ArrayList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 712375 // mTargetChildExcludes (<unidirectional association>)
	relation 712375 --->
	  stereotype "ArrayList"
	  a role_name "mTargetChildExcludes" init_value " null" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 712375 // mTargetChildExcludes (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      classrelation 712503 // mTargetTypeChildExcludes (<unidirectional association>)
	relation 712503 --->
	  stereotype "ArrayList"
	  a role_name "mTargetTypeChildExcludes" init_value " null" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 712503 // mTargetTypeChildExcludes (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 712631 // mStartValues (<unidirectional association>)
	relation 712631 --->
	  a role_name "mStartValues" init_value " new TransitionValuesMaps()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 712631 // mStartValues (<unidirectional association>)
	  b parent class_ref 341943 // TransitionValuesMaps
      end

      classrelation 712759 // mEndValues (<unidirectional association>)
	relation 712759 --->
	  a role_name "mEndValues" init_value " new TransitionValuesMaps()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 712759 // mEndValues (<unidirectional association>)
	  b parent class_ref 341943 // TransitionValuesMaps
      end

      classrelation 712887 // mParent (<unidirectional association>)
	relation 712887 --->
	  a role_name "mParent" init_value " null" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 712887 // mParent (<unidirectional association>)
	  b parent class_ref 342071 // TransitionSet
      end

      attribute 707511 "mMatchOrder"
	package explicit_type "int"
	multiplicity "[]"
	init_value " DEFAULT_MATCH_ORDER"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 713015 // mStartValuesList (<unidirectional association>)
	relation 713015 --->
	  stereotype "ArrayList"
	  a role_name "mStartValuesList" package
	    comment " only valid after playTransition starts"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 713015 // mStartValuesList (<unidirectional association>)
	  b parent class_ref 342199 // TransitionValues
      end

      classrelation 713143 // mEndValuesList (<unidirectional association>)
	relation 713143 --->
	  stereotype "ArrayList"
	  a role_name "mEndValuesList" package
	    comment " only valid after playTransitions starts"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 713143 // mEndValuesList (<unidirectional association>)
	  b parent class_ref 342199 // TransitionValues
      end

      classrelation 713271 // sRunningAnimators (<unidirectional association>)
	relation 713271 --->
	  stereotype "ThreadLocal"
	  a role_name "sRunningAnimators" init_value "
            new ThreadLocal<ArrayMap<Animator, AnimationInfo>>()" class_relation private
	    comment " Per-animator information used for later canceling when future transitions overlap"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}<Animator, AnimationInfo>> ${name}${value};
"
	    classrelation_ref 713271 // sRunningAnimators (<unidirectional association>)
	  b parent class_ref 156343 // ArrayMap
      end

      classrelation 713399 // mSceneRoot (<unidirectional association>)
	relation 713399 --->
	  a role_name "mSceneRoot" init_value " null" package
	    comment " Scene Root is set at createAnimator() time in the cloned Transition
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 713399 // mSceneRoot (<unidirectional association>)
	  b parent class_ref 134711 // ViewGroup
      end

      attribute 707639 "mCanRemoveViews"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Whether removing views from their parent is possible. This is only for views
 in the start scene, which are no longer in the view hierarchy. This property
 is determined by whether the previous Scene was created from a layout
 resource, and thus the views from the exited scene are going away anyway
 and can be removed as necessary to achieve a particular effect, such as
 removing them from parents to add them to overlays."
      end

      classrelation 713527 // mCurrentAnimators (<unidirectional association>)
	relation 713527 --->
	  stereotype "ArrayList"
	  a role_name "mCurrentAnimators" init_value " new ArrayList<Animator>()" private
	    comment " Track all animators in use in case the transition gets canceled and needs to
 cancel running animators"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 713527 // mCurrentAnimators (<unidirectional association>)
	  b parent class_ref 314807 // Animator
      end

      attribute 707767 "mNumInstances"
	package explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of per-target instances of this Transition currently running. This count is
 determined by calls to start() and end()"
      end

      attribute 707895 "mPaused"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Whether this transition is currently paused, due to a call to pause()"
      end

      attribute 708023 "mEnded"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Whether this transition has ended. Used to avoid pause/resume on transitions
 that have completed"
      end

      class 342327 "TransitionListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1758263 "onTransitionStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notification about the start of the transition.

@param transition The started transition."
	end

	operation 1758391 "onTransitionEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notification about the end of the transition. Canceled transitions
will always notify listeners of both the cancellation and end
events. That is, {@link #onTransitionEnd(Transition)} is always called,
regardless of whether the transition was canceled or played
through to completion.

@param transition The transition which reached its end."
	end

	operation 1758519 "onTransitionCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notification about the cancellation of the transition.
Note that cancel may be called by a parent {@link TransitionSet} on
a child transition which has not yet started. This allows the child
transition to restore state on target objects which was set at
{@link #createAnimator(android.view.ViewGroup, TransitionValues, TransitionValues)
createAnimator()} time.

@param transition The transition which was canceled."
	end

	operation 1758647 "onTransitionPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notification when a transition is paused.
Note that createAnimator() may be called by a parent {@link TransitionSet} on
a child transition which has not yet started. This allows the child
transition to restore state on target objects which was set at
{@link #createAnimator(android.view.ViewGroup, TransitionValues, TransitionValues)
createAnimator()} time.

@param transition The transition which was paused."
	end

	operation 1758775 "onTransitionResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notification when a transition is resumed.
Note that resume() may be called by a parent {@link TransitionSet} on
a child transition which has not yet started. This allows the child
transition to restore state which may have changed in an earlier call
to {@link #onTransitionPause(Transition)}.

@param transition The transition which was resumed."
	end
      end

      classrelation 713655 // mListeners (<unidirectional association>)
	relation 713655 --->
	  stereotype "ArrayList"
	  a role_name "mListeners" init_value " null" package
	    comment " The set of listeners to be sent transition lifecycle events."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 713655 // mListeners (<unidirectional association>)
	  b parent class_ref 342327 // TransitionListener
      end

      classrelation 713783 // mAnimators (<unidirectional association>)
	relation 713783 --->
	  stereotype "ArrayList"
	  a role_name "mAnimators" init_value " new ArrayList<Animator>()" package
	    comment " The set of animators collected from calls to createAnimator(),
 to be run in runAnimators()"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 713783 // mAnimators (<unidirectional association>)
	  b parent class_ref 314807 // Animator
      end

      classrelation 713911 // mPropagation (<unidirectional association>)
	relation 713911 --->
	  a role_name "mPropagation" package
	    comment " The function for calculating the Animation start delay.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 713911 // mPropagation (<unidirectional association>)
	  b parent class_ref 342455 // TransitionPropagation
      end

      class 342583 "EpicenterCallback"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1759927 "onGetEpicenter"
	  abstract public return_type class_ref 135351 // Rect
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Implementers must override to return the epicenter of the Transition in screen
coordinates. Transitions like {@link android.transition.Explode} depend upon
an epicenter for the Transition. In Explode, Views move toward or away from the
center of the epicenter Rect along the vector between the epicenter and the center
of the View appearing and disappearing. Some Transitions, such as
{@link android.transition.Fade} pay no attention to the epicenter.

@param transition The transition for which the epicenter applies.
@return The Rect region of the epicenter of <code>transition</code> or null if
there is no epicenter."
	end
      end

      classrelation 714039 // mEpicenterCallback (<unidirectional association>)
	relation 714039 --->
	  a role_name "mEpicenterCallback" package
	    comment " The rectangular region for Transitions like Explode and TransitionPropagations
 like CircularPropagation
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 714039 // mEpicenterCallback (<unidirectional association>)
	  b parent class_ref 342583 // EpicenterCallback
      end

      classrelation 714167 // mNameOverrides (<unidirectional association>)
	relation 714167 --->
	  a role_name "mNameOverrides" package
	    comment " For Fragment shared element transitions, linking views explicitly by mismatching
 transitionNames.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String> ${name}${value};
"
	    classrelation_ref 714167 // mNameOverrides (<unidirectional association>)
	  b parent class_ref 156343 // ArrayMap
      end

      classrelation 714295 // mPathMotion (<unidirectional association>)
	relation 714295 --->
	  a role_name "mPathMotion" init_value " STRAIGHT_PATH_MOTION" package
	    comment " The function used to interpolate along two-dimensional points. Typically used
 for adding curves to x/y View motion.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 714295 // mPathMotion (<unidirectional association>)
	  b parent class_ref 341815 // PathMotion
      end

      operation 1747767 "Transition"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Transition object with no target objects. A transition with
no targets defaults to running on all target objects in the scene hierarchy
(if the transition is not contained in a TransitionSet), or all target
objects passed down from its parent (if it is in a TransitionSet)."
      end

      operation 1747895 "Transition"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform inflation from XML and apply a class-specific base style from a
theme attribute or style resource. This constructor of Transition allows
subclasses to use their own base style when they are inflating.

@param context The Context the transition is running in, through which it can
       access the current theme, resources, etc.
@param attrs The attributes of the XML tag that is inflating the transition."
      end

      operation 1748023 "parseMatchOrder"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "matchOrderString" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1748151 "setDuration"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the duration of this transition. By default, there is no duration
(indicated by a negative number), which means that the Animator created by
the transition will have its own specified duration. If the duration of a
Transition is set, that duration will override the Animator duration.

@param duration The length of the animation, in milliseconds.
@return This transition object.
@attr ref android.R.styleable#Transition_duration"
      end

      operation 1748279 "getDuration"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the duration set on this transition. If no duration has been set,
the returned value will be negative, indicating that resulting animators will
retain their own durations.

@return The duration set on this transition, in milliseconds, if one has been
set, otherwise returns a negative number."
      end

      operation 1748407 "setStartDelay"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param in name "startDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the startDelay of this transition. By default, there is no delay
(indicated by a negative number), which means that the Animator created by
the transition will have its own specified startDelay. If the delay of a
Transition is set, that delay will override the Animator delay.

@param startDelay The length of the delay, in milliseconds.
@return This transition object.
@attr ref android.R.styleable#Transition_startDelay"
      end

      operation 1748535 "getStartDelay"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the startDelay set on this transition. If no startDelay has been set,
the returned value will be negative, indicating that resulting animators will
retain their own startDelays.

@return The startDelay set on this transition, in milliseconds, if one has
been set, otherwise returns a negative number."
      end

      operation 1748663 "setInterpolator"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "interpolator" type class_ref 315319 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the interpolator of this transition. By default, the interpolator
is null, which means that the Animator created by the transition
will have its own specified interpolator. If the interpolator of a
Transition is set, that interpolator will override the Animator interpolator.

@param interpolator The time interpolator used by the transition
@return This transition object.
@attr ref android.R.styleable#Transition_interpolator"
      end

      operation 1748791 "getInterpolator"
	public return_type class_ref 315319 // TimeInterpolator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the interpolator set on this transition. If no interpolator has been set,
the returned value will be null, indicating that resulting animators will
retain their own interpolators.

@return The interpolator set on this transition, if one has been set, otherwise
returns null."
      end

      operation 1748919 "getTransitionProperties"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of property names used stored in the {@link TransitionValues}
object passed into {@link #captureStartValues(TransitionValues)} that
this transition cares about for the purposes of canceling overlapping animations.
When any transition is started on a given scene root, all transitions
currently running on that same scene root are checked to see whether the
properties on which they based their animations agree with the end values of
the same properties in the new transition. If the end values are not equal,
then the old animation is canceled since the new transition will start a new
animation to these new values. If the values are equal, the old animation is
allowed to continue and no new animation is started for that transition.

<p>A transition does not need to override this method. However, not doing so
will mean that the cancellation logic outlined in the previous paragraph
will be skipped for that transition, possibly leading to artifacts as
old transitions and new transitions on the same targets run in parallel,
animating views toward potentially different end values.</p>

@return An array of property names as described in the class documentation for
{@link TransitionValues}. The default implementation returns <code>null</code>."
      end

      operation 1749047 "createAnimator"
	public return_type class_ref 314807 // Animator
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method creates an animation that will be run for this transition
given the information in the startValues and endValues structures captured
earlier for the start and end scenes. Subclasses of Transition should override
this method. The method should only be called by the transition system; it is
not intended to be called from external classes.

<p>This method is called by the transition's parent (all the way up to the
topmost Transition in the hierarchy) with the sceneRoot and start/end
values that the transition may need to set up initial target values
and construct an appropriate animation. For example, if an overall
Transition is a {@link TransitionSet} consisting of several
child transitions in sequence, then some of the child transitions may
want to set initial values on target views prior to the overall
Transition commencing, to put them in an appropriate state for the
delay between that start and the child Transition start time. For
example, a transition that fades an item in may wish to set the starting
alpha value to 0, to avoid it blinking in prior to the transition
actually starting the animation. This is necessary because the scene
change that triggers the Transition will automatically set the end-scene
on all target views, so a Transition that wants to animate from a
different value should set that value prior to returning from this method.</p>

<p>Additionally, a Transition can perform logic to determine whether
the transition needs to run on the given target and start/end values.
For example, a transition that resizes objects on the screen may wish
to avoid running for views which are not present in either the start
or end scenes.</p>

<p>If there is an animator created and returned from this method, the
transition mechanism will apply any applicable duration, startDelay,
and interpolator to that animation and start it. A return value of
<code>null</code> indicates that no animation should run. The default
implementation returns null.</p>

<p>The method is called for every applicable target object, which is
stored in the {@link TransitionValues#view} field.</p>


@param sceneRoot The root of the transition hierarchy.
@param startValues The values for a specific target in the start scene.
@param endValues The values for the target in the end scene.
@return A Animator to be started at the appropriate time in the
overall transition for this scene change. A null value means no animation
should be run."
      end

      operation 1749175 "setMatchOrder"
	public explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "int...matches"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the order in which Transition matches View start and end values.
<p>
The default behavior is to match first by {@link android.view.View#getTransitionName()},
then by View instance, then by {@link android.view.View#getId()} and finally
by its item ID if it is in a direct child of ListView. The caller can
choose to have only some or all of the values of {@link #MATCH_INSTANCE},
{@link #MATCH_NAME}, {@link #MATCH_ITEM_ID}, and {@link #MATCH_ID}. Only
the match algorithms supplied will be used to determine whether Views are the
the same in both the start and end Scene. Views that do not match will be considered
as entering or leaving the Scene.
</p>
@param matches A list of zero or more of {@link #MATCH_INSTANCE},
               {@link #MATCH_NAME}, {@link #MATCH_ITEM_ID}, and {@link #MATCH_ID}.
               If none are provided, then the default match order will be set."
      end

      operation 1749303 "isValidMatch"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "match" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1749431 "alreadyContains"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "array" explicit_type "int"
	  param in name "searchIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1749559 "matchInstances"
	private explicit_return_type "void"
	nparams 2
	  param inout name "unmatchedStart" type class_ref 156343 // ArrayMap
	  param inout name "unmatchedEnd" type class_ref 156343 // ArrayMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<View, TransitionValues> ${p0}, ${t1}<View, TransitionValues> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Match start/end values by View instance. Adds matched values to mStartValuesList
and mEndValuesList and removes them from unmatchedStart and unmatchedEnd."
      end

      operation 1749687 "matchItemIds"
	private explicit_return_type "void"
	nparams 4
	  param inout name "unmatchedStart" type class_ref 156343 // ArrayMap
	  param inout name "unmatchedEnd" type class_ref 156343 // ArrayMap
	  param inout name "startItemIds" type class_ref 342711 // LongSparseArray
	  param inout name "endItemIds" type class_ref 342711 // LongSparseArray
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<View, TransitionValues> ${p0}, ${t1}<View, TransitionValues> ${p1}, ${t2}<View> ${p2}, ${t3}<View> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Match start/end values by Adapter item ID. Adds matched values to mStartValuesList
and mEndValuesList and removes them from unmatchedStart and unmatchedEnd, using
startItemIds and endItemIds as a guide for which Views have unique item IDs."
      end

      operation 1749815 "matchIds"
	private explicit_return_type "void"
	nparams 4
	  param inout name "unmatchedStart" type class_ref 156343 // ArrayMap
	  param inout name "unmatchedEnd" type class_ref 156343 // ArrayMap
	  param inout name "startIds" type class_ref 139575 // SparseArray
	  param inout name "endIds" type class_ref 139575 // SparseArray
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<View, TransitionValues> ${p0}, ${t1}<View, TransitionValues> ${p1}, ${t2}<View> ${p2}, ${t3}<View> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Match start/end values by Adapter view ID. Adds matched values to mStartValuesList
and mEndValuesList and removes them from unmatchedStart and unmatchedEnd, using
startIds and endIds as a guide for which Views have unique IDs."
      end

      operation 1749943 "matchNames"
	private explicit_return_type "void"
	nparams 4
	  param inout name "unmatchedStart" type class_ref 156343 // ArrayMap
	  param inout name "unmatchedEnd" type class_ref 156343 // ArrayMap
	  param inout name "startNames" type class_ref 156343 // ArrayMap
	  param inout name "endNames" type class_ref 156343 // ArrayMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<View, TransitionValues> ${p0}, ${t1}<View, TransitionValues> ${p1}, ${t2}<String, View> ${p2}, ${t3}<String, View> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Match start/end values by Adapter transitionName. Adds matched values to mStartValuesList
and mEndValuesList and removes them from unmatchedStart and unmatchedEnd, using
startNames and endNames as a guide for which Views have unique transitionNames."
      end

      operation 1750071 "addUnmatched"
	private explicit_return_type "void"
	nparams 2
	  param inout name "unmatchedStart" type class_ref 156343 // ArrayMap
	  param inout name "unmatchedEnd" type class_ref 156343 // ArrayMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<View, TransitionValues> ${p0}, ${t1}<View, TransitionValues> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all values from unmatchedStart and unmatchedEnd to mStartValuesList and mEndValuesList,
assuming that there is no match between values in the list."
      end

      operation 1750199 "matchStartAndEnd"
	private explicit_return_type "void"
	nparams 2
	  param inout name "startValues" type class_ref 341943 // TransitionValuesMaps
	  param inout name "endValues" type class_ref 341943 // TransitionValuesMaps
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1750327 "createAnimators"
	protected explicit_return_type "void"
	nparams 5
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 341943 // TransitionValuesMaps
	  param inout name "endValues" type class_ref 341943 // TransitionValuesMaps
	  param inout name "startValuesList" explicit_type "ArrayList<TransitionValues>"
	  param inout name "endValuesList" explicit_type "ArrayList<TransitionValues>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method, essentially a wrapper around all calls to createAnimator for all
possible target views, is called with the entire set of start/end
values. The implementation in Transition iterates through these lists
and calls {@link #createAnimator(ViewGroup, TransitionValues, TransitionValues)}
with each set of start/end values on this transition. The
TransitionSet subclass overrides this method and delegates it to
each of its children in succession.

@hide"
      end

      operation 1750455 "isValidTarget"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "target" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal utility method for checking whether a given view/id
is valid for this transition, where \"valid\" means that either
the Transition has no target/targetId list (the default, in which
cause the transition should act on all views in the hiearchy), or
the given view is in the target list or the view id is in the
targetId list. If the target parameter is null, then the target list
is not checked (this is in the case of ListView items, where the
views are ignored and only the ids are used)."
      end

      operation 1750583 "getRunningAnimators"
	class_operation private return_type class_ref 156343 // ArrayMap
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Animator, AnimationInfo> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1750711 "runAnimators"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is called internally once all animations have been set up by the
transition hierarchy.

@hide"
      end

      operation 1750839 "runAnimator"
	private explicit_return_type "void"
	nparams 2
	  param inout name "animator" type class_ref 314807 // Animator
	  param in name "runningAnimators" type class_ref 156343 // ArrayMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, final ${t1}<Animator, AnimationInfo> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1750967 "captureStartValues"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Captures the values in the start scene for the properties that this
transition monitors. These values are then passed as the startValues
structure in a later call to
{@link #createAnimator(ViewGroup, TransitionValues, TransitionValues)}.
The main concern for an implementation is what the
properties are that the transition cares about and what the values are
for all of those properties. The start and end values will be compared
later during the
{@link #createAnimator(android.view.ViewGroup, TransitionValues, TransitionValues)}
method to determine what, if any, animations, should be run.

<p>Subclasses must implement this method. The method should only be called by the
transition system; it is not intended to be called from external classes.</p>

@param transitionValues The holder for any values that the Transition
wishes to store. Values are stored in the <code>values</code> field
of this TransitionValues object and are keyed from
a String value. For example, to store a view's rotation value,
a transition might call
<code>transitionValues.values.put(\"appname:transitionname:rotation\",
view.getRotation())</code>. The target view will already be stored in
the transitionValues structure when this method is called.

@see #captureEndValues(TransitionValues)
@see #createAnimator(ViewGroup, TransitionValues, TransitionValues)"
      end

      operation 1751095 "captureEndValues"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Captures the values in the end scene for the properties that this
transition monitors. These values are then passed as the endValues
structure in a later call to
{@link #createAnimator(ViewGroup, TransitionValues, TransitionValues)}.
The main concern for an implementation is what the
properties are that the transition cares about and what the values are
for all of those properties. The start and end values will be compared
later during the
{@link #createAnimator(android.view.ViewGroup, TransitionValues, TransitionValues)}
method to determine what, if any, animations, should be run.

<p>Subclasses must implement this method. The method should only be called by the
transition system; it is not intended to be called from external classes.</p>

@param transitionValues The holder for any values that the Transition
wishes to store. Values are stored in the <code>values</code> field
of this TransitionValues object and are keyed from
a String value. For example, to store a view's rotation value,
a transition might call
<code>transitionValues.values.put(\"appname:transitionname:rotation\",
view.getRotation())</code>. The target view will already be stored in
the transitionValues structure when this method is called.

@see #captureStartValues(TransitionValues)
@see #createAnimator(ViewGroup, TransitionValues, TransitionValues)"
      end

      operation 1751223 "addTarget"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param in name "targetId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the id of a target view that this Transition is interested in
animating. By default, there are no targetIds, and a Transition will
listen for changes on every view in the hierarchy below the sceneRoot
of the Scene being transitioned into. Setting targetIds constrains
the Transition to only listen for, and act on, views with these IDs.
Views with different IDs, or no IDs whatsoever, will be ignored.

<p>Note that using ids to specify targets implies that ids should be unique
within the view hierarchy underneath the scene root.</p>

@see View#getId()
@param targetId The id of a target view, must be a positive number.
@return The Transition to which the targetId is added.
Returning the same object makes it easier to chain calls during
construction, such as
<code>transitionSet.addTransitions(new Fade()).addTarget(someId);</code>"
      end

      operation 1751351 "addTarget"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "targetName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the transitionName of a target view that this Transition is interested in
animating. By default, there are no targetNames, and a Transition will
listen for changes on every view in the hierarchy below the sceneRoot
of the Scene being transitioned into. Setting targetNames constrains
the Transition to only listen for, and act on, views with these transitionNames.
Views with different transitionNames, or no transitionName whatsoever, will be ignored.

<p>Note that transitionNames should be unique within the view hierarchy.</p>

@see android.view.View#getTransitionName()
@param targetName The transitionName of a target view, must be non-null.
@return The Transition to which the target transitionName is added.
Returning the same object makes it easier to chain calls during
construction, such as
<code>transitionSet.addTransitions(new Fade()).addTarget(someName);</code>"
      end

      operation 1751479 "addTarget"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "targetType" type class_ref 132791 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the Class of a target view that this Transition is interested in
animating. By default, there are no targetTypes, and a Transition will
listen for changes on every view in the hierarchy below the sceneRoot
of the Scene being transitioned into. Setting targetTypes constrains
the Transition to only listen for, and act on, views with these classes.
Views with different classes will be ignored.

<p>Note that any View that can be cast to targetType will be included, so
if targetType is <code>View.class</code>, all Views will be included.</p>

@see #addTarget(int)
@see #addTarget(android.view.View)
@see #excludeTarget(Class, boolean)
@see #excludeChildren(Class, boolean)

@param targetType The type to include when running this transition.
@return The Transition to which the target class was added.
Returning the same object makes it easier to chain calls during
construction, such as
<code>transitionSet.addTransitions(new Fade()).addTarget(ImageView.class);</code>"
      end

      operation 1751607 "removeTarget"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param in name "targetId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given targetId from the list of ids that this Transition
is interested in animating.

@param targetId The id of a target view, must be a positive number.
@return The Transition from which the targetId is removed.
Returning the same object makes it easier to chain calls during
construction, such as
<code>transitionSet.addTransitions(new Fade()).removeTargetId(someId);</code>"
      end

      operation 1751735 "removeTarget"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "targetName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given targetName from the list of transitionNames that this Transition
is interested in animating.

@param targetName The transitionName of a target view, must not be null.
@return The Transition from which the targetName is removed.
Returning the same object makes it easier to chain calls during
construction, such as
<code>transitionSet.addTransitions(new Fade()).removeTargetName(someName);</code>"
      end

      operation 1751863 "excludeTarget"
	public return_type class_ref 341303 // Transition
	nparams 2
	  param in name "targetId" explicit_type "int"
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether to add the given id to the list of target ids to exclude from this
transition. The <code>exclude</code> parameter specifies whether the target
should be added to or removed from the excluded list.

<p>Excluding targets is a general mechanism for allowing transitions to run on
a view hierarchy while skipping target views that should not be part of
the transition. For example, you may want to avoid animating children
of a specific ListView or Spinner. Views can be excluded either by their
id, or by their instance reference, or by the Class of that view
(eg, {@link Spinner}).</p>

@see #excludeChildren(int, boolean)
@see #excludeTarget(View, boolean)
@see #excludeTarget(Class, boolean)

@param targetId The id of a target to ignore when running this transition.
@param exclude Whether to add the target to or remove the target from the
current list of excluded targets.
@return This transition object."
      end

      operation 1751991 "excludeTarget"
	public return_type class_ref 341303 // Transition
	nparams 2
	  param inout name "targetName" type class_ref 129591 // String
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether to add the given transitionName to the list of target transitionNames to exclude
from this transition. The <code>exclude</code> parameter specifies whether the target
should be added to or removed from the excluded list.

<p>Excluding targets is a general mechanism for allowing transitions to run on
a view hierarchy while skipping target views that should not be part of
the transition. For example, you may want to avoid animating children
of a specific ListView or Spinner. Views can be excluded by their
id, their instance reference, their transitionName, or by the Class of that view
(eg, {@link Spinner}).</p>

@see #excludeTarget(View, boolean)
@see #excludeTarget(int, boolean)
@see #excludeTarget(Class, boolean)

@param targetName The name of a target to ignore when running this transition.
@param exclude Whether to add the target to or remove the target from the
current list of excluded targets.
@return This transition object."
      end

      operation 1752119 "excludeChildren"
	public return_type class_ref 341303 // Transition
	nparams 2
	  param in name "targetId" explicit_type "int"
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether to add the children of the given id to the list of targets to exclude
from this transition. The <code>exclude</code> parameter specifies whether
the children of the target should be added to or removed from the excluded list.
Excluding children in this way provides a simple mechanism for excluding all
children of specific targets, rather than individually excluding each
child individually.

<p>Excluding targets is a general mechanism for allowing transitions to run on
a view hierarchy while skipping target views that should not be part of
the transition. For example, you may want to avoid animating children
of a specific ListView or Spinner. Views can be excluded either by their
id, or by their instance reference, or by the Class of that view
(eg, {@link Spinner}).</p>

@see #excludeTarget(int, boolean)
@see #excludeChildren(View, boolean)
@see #excludeChildren(Class, boolean)

@param targetId The id of a target whose children should be ignored when running
this transition.
@param exclude Whether to add the target to or remove the target from the
current list of excluded-child targets.
@return This transition object."
      end

      operation 1752247 "excludeTarget"
	public return_type class_ref 341303 // Transition
	nparams 2
	  param inout name "target" type class_ref 134455 // View
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether to add the given target to the list of targets to exclude from this
transition. The <code>exclude</code> parameter specifies whether the target
should be added to or removed from the excluded list.

<p>Excluding targets is a general mechanism for allowing transitions to run on
a view hierarchy while skipping target views that should not be part of
the transition. For example, you may want to avoid animating children
of a specific ListView or Spinner. Views can be excluded either by their
id, or by their instance reference, or by the Class of that view
(eg, {@link Spinner}).</p>

@see #excludeChildren(View, boolean)
@see #excludeTarget(int, boolean)
@see #excludeTarget(Class, boolean)

@param target The target to ignore when running this transition.
@param exclude Whether to add the target to or remove the target from the
current list of excluded targets.
@return This transition object."
      end

      operation 1752375 "excludeChildren"
	public return_type class_ref 341303 // Transition
	nparams 2
	  param inout name "target" type class_ref 134455 // View
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether to add the children of given target to the list of target children
to exclude from this transition. The <code>exclude</code> parameter specifies
whether the target should be added to or removed from the excluded list.

<p>Excluding targets is a general mechanism for allowing transitions to run on
a view hierarchy while skipping target views that should not be part of
the transition. For example, you may want to avoid animating children
of a specific ListView or Spinner. Views can be excluded either by their
id, or by their instance reference, or by the Class of that view
(eg, {@link Spinner}).</p>

@see #excludeTarget(View, boolean)
@see #excludeChildren(int, boolean)
@see #excludeChildren(Class, boolean)

@param target The target to ignore when running this transition.
@param exclude Whether to add the target to or remove the target from the
current list of excluded targets.
@return This transition object."
      end

      operation 1752503 "excludeObject"
	class_operation private explicit_return_type "ArrayList<T>"
	nparams 3
	  param inout name "list" explicit_type "ArrayList<T>"
	  param inout name "target" explicit_type "T"
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility method to manage the boilerplate code that is the same whether we
are excluding targets or their children."
      end

      operation 1752631 "excludeTarget"
	public return_type class_ref 341303 // Transition
	nparams 2
	  param inout name "type" type class_ref 132791 // Class
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether to add the given type to the list of types to exclude from this
transition. The <code>exclude</code> parameter specifies whether the target
type should be added to or removed from the excluded list.

<p>Excluding targets is a general mechanism for allowing transitions to run on
a view hierarchy while skipping target views that should not be part of
the transition. For example, you may want to avoid animating children
of a specific ListView or Spinner. Views can be excluded either by their
id, or by their instance reference, or by the Class of that view
(eg, {@link Spinner}).</p>

@see #excludeChildren(Class, boolean)
@see #excludeTarget(int, boolean)
@see #excludeTarget(View, boolean)

@param type The type to ignore when running this transition.
@param exclude Whether to add the target type to or remove it from the
current list of excluded target types.
@return This transition object."
      end

      operation 1752759 "excludeChildren"
	public return_type class_ref 341303 // Transition
	nparams 2
	  param inout name "type" type class_ref 132791 // Class
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Whether to add the given type to the list of types whose children should
be excluded from this transition. The <code>exclude</code> parameter
specifies whether the target type should be added to or removed from
the excluded list.

<p>Excluding targets is a general mechanism for allowing transitions to run on
a view hierarchy while skipping target views that should not be part of
the transition. For example, you may want to avoid animating children
of a specific ListView or Spinner. Views can be excluded either by their
id, or by their instance reference, or by the Class of that view
(eg, {@link Spinner}).</p>

@see #excludeTarget(Class, boolean)
@see #excludeChildren(int, boolean)
@see #excludeChildren(View, boolean)

@param type The type to ignore when running this transition.
@param exclude Whether to add the target type to or remove it from the
current list of excluded target types.
@return This transition object."
      end

      operation 1752887 "addTarget"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "target" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the target view instances that this Transition is interested in
animating. By default, there are no targets, and a Transition will
listen for changes on every view in the hierarchy below the sceneRoot
of the Scene being transitioned into. Setting targets constrains
the Transition to only listen for, and act on, these views.
All other views will be ignored.

<p>The target list is like the {@link #addTarget(int) targetId}
list except this list specifies the actual View instances, not the ids
of the views. This is an important distinction when scene changes involve
view hierarchies which have been inflated separately; different views may
share the same id but not actually be the same instance. If the transition
should treat those views as the same, then {@link #addTarget(int)} should be used
instead of {@link #addTarget(View)}. If, on the other hand, scene changes involve
changes all within the same view hierarchy, among views which do not
necessarily have ids set on them, then the target list of views may be more
convenient.</p>

@see #addTarget(int)
@param target A View on which the Transition will act, must be non-null.
@return The Transition to which the target is added.
Returning the same object makes it easier to chain calls during
construction, such as
<code>transitionSet.addTransitions(new Fade()).addTarget(someView);</code>"
      end

      operation 1753015 "removeTarget"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "target" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given target from the list of targets that this Transition
is interested in animating.

@param target The target view, must be non-null.
@return Transition The Transition from which the target is removed.
Returning the same object makes it easier to chain calls during
construction, such as
<code>transitionSet.addTransitions(new Fade()).removeTarget(someView);</code>"
      end

      operation 1753143 "removeTarget"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "target" type class_ref 132791 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the given target from the list of targets that this Transition
is interested in animating.

@param target The type of the target view, must be non-null.
@return Transition The Transition from which the target is removed.
Returning the same object makes it easier to chain calls during
construction, such as
<code>transitionSet.addTransitions(new Fade()).removeTarget(someType);</code>"
      end

      operation 1753271 "getTargetIds"
	public explicit_return_type "List<Integer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of target IDs that this transition limits itself to
tracking and animating. If the list is null or empty for
{@link #getTargetIds()}, {@link #getTargets()}, {@link #getTargetNames()}, and
{@link #getTargetTypes()} then this transition is
not limited to specific views, and will handle changes to any views
in the hierarchy of a scene change.

@return the list of target IDs"
      end

      operation 1753399 "getTargets"
	public return_type class_ref 134455 // View
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of target views that this transition limits itself to
tracking and animating. If the list is null or empty for
{@link #getTargetIds()}, {@link #getTargets()}, {@link #getTargetNames()}, and
{@link #getTargetTypes()} then this transition is
not limited to specific views, and will handle changes to any views
in the hierarchy of a scene change.

@return the list of target views"
      end

      operation 1753527 "getTargetNames"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of target transitionNames that this transition limits itself to
tracking and animating. If the list is null or empty for
{@link #getTargetIds()}, {@link #getTargets()}, {@link #getTargetNames()}, and
{@link #getTargetTypes()} then this transition is
not limited to specific views, and will handle changes to any views
in the hierarchy of a scene change.

@return the list of target transitionNames"
      end

      operation 1753655 "getTargetViewNames"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "To be removed before L release.
@hide"
      end

      operation 1753783 "getTargetTypes"
	public return_type class_ref 132791 // Class
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of target transitionNames that this transition limits itself to
tracking and animating. If the list is null or empty for
{@link #getTargetIds()}, {@link #getTargets()}, {@link #getTargetNames()}, and
{@link #getTargetTypes()} then this transition is
not limited to specific views, and will handle changes to any views
in the hierarchy of a scene change.

@return the list of target Types"
      end

      operation 1753911 "captureValues"
	package explicit_return_type "void"
	nparams 2
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "start" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Recursive method that captures values for the given view and the
hierarchy underneath it.
@param sceneRoot The root of the view hierarchy being captured
@param start true if this capture is happening before the scene change,
false otherwise"
      end

      operation 1754039 "addViewValues"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "transitionValuesMaps" type class_ref 341943 // TransitionValuesMaps
	  param inout name "view" type class_ref 134455 // View
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1754167 "clearValues"
	package explicit_return_type "void"
	nparams 1
	  param inout name "start" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clear valuesMaps for specified start/end state

@param start true if the start values should be cleared, false otherwise"
      end

      operation 1754295 "captureHierarchy"
	private explicit_return_type "void"
	nparams 2
	  param inout name "view" type class_ref 134455 // View
	  param inout name "start" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Recursive method which captures values for an entire view hierarchy,
starting at some root view. Transitions without targetIDs will use this
method to capture values for all possible views.

@param view The view for which to capture values. Children of this View
will also be captured, recursively down to the leaf nodes.
@param start true if values are being captured in the start scene, false
otherwise."
      end

      operation 1754423 "getTransitionValues"
	public return_type class_ref 342199 // TransitionValues
	nparams 2
	  param inout name "view" type class_ref 134455 // View
	  param inout name "start" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method can be called by transitions to get the TransitionValues for
any particular view during the transition-playing process. This might be
necessary, for example, to query the before/after state of related views
for a given transition."
      end

      operation 1754551 "getMatchedTransitionValues"
	package return_type class_ref 342199 // TransitionValues
	nparams 2
	  param inout name "view" type class_ref 134455 // View
	  param inout name "viewInStart" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the matched start or end value for a given View. This is only valid
after playTransition starts. For example, it will be valid in
{@link #createAnimator(android.view.ViewGroup, TransitionValues, TransitionValues)}, but not
in {@link #captureStartValues(TransitionValues)}.

@param view The view to find the match for.
@param viewInStart Is View from the start values or end values.
@return The matching TransitionValues for view in either start or end values, depending
on viewInStart or null if there is no match for the given view."
      end

      operation 1754679 "pause"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sceneRoot" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pauses this transition, sending out calls to {@link
TransitionListener#onTransitionPause(Transition)} to all listeners
and pausing all running animators started by this transition.

@hide"
      end

      operation 1754807 "resume"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sceneRoot" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resumes this transition, sending out calls to {@link
TransitionListener#onTransitionPause(Transition)} to all listeners
and pausing all running animators started by this transition.

@hide"
      end

      operation 1754935 "playTransition"
	package explicit_return_type "void"
	nparams 1
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by TransitionManager to play the transition. This calls
createAnimators() to set things up and create all of the animations and then
runAnimations() to actually start the animations."
      end

      operation 1755063 "isTransitionRequired"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not the transition should create an Animator, based on the values
captured during {@link #captureStartValues(TransitionValues)} and
{@link #captureEndValues(TransitionValues)}. The default implementation compares the
property values returned from {@link #getTransitionProperties()}, or all property values if
{@code getTransitionProperties()} returns null. Subclasses may override this method to
provide logic more specific to the transition implementation.

@param startValues the values from captureStartValues, This may be {@code null} if the
                   View did not exist in the start state.
@param endValues the values from captureEndValues. This may be {@code null} if the View
                 did not exist in the end state."
      end

      operation 1755191 "isValueChanged"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param inout name "oldValues" type class_ref 342199 // TransitionValues
	  param inout name "newValues" type class_ref 342199 // TransitionValues
	  param inout name "key" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1755319 "animate"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "animator" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a utility method used by subclasses to handle standard parts of
setting up and running an Animator: it sets the {@link #getDuration()
duration} and the {@link #getStartDelay() startDelay}, starts the
animation, and, when the animator ends, calls {@link #end()}.

@param animator The Animator to be run during this transition.

@hide"
      end

      operation 1755447 "start"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called automatically by the transition and
TransitionSet classes prior to a Transition subclass starting;
subclasses should not need to call it directly.

@hide"
      end

      operation 1755575 "end"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called automatically by the Transition and
TransitionSet classes when a transition finishes, either because
a transition did nothing (returned a null Animator from
{@link Transition#createAnimator(ViewGroup, TransitionValues,
TransitionValues)}) or because the transition returned a valid
Animator and end() was called in the onAnimationEnd()
callback of the AnimatorListener.

@hide"
      end

      operation 1755703 "cancel"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method cancels a transition that is currently running.

@hide"
      end

      operation 1755831 "addListener"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "listener" type class_ref 342327 // TransitionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to the set of listeners that are sent events through the
life of an animation, such as start, repeat, and end.

@param listener the listener to be added to the current set of listeners
for this animation.
@return This transition object."
      end

      operation 1755959 "removeListener"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "listener" type class_ref 342327 // TransitionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener from the set listening to this animation.

@param listener the listener to be removed from the current set of
listeners for this transition.
@return This transition object."
      end

      operation 1756087 "setEpicenterCallback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "epicenterCallback" type class_ref 342583 // EpicenterCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the callback to use to find the epicenter of a Transition. A null value indicates
that there is no epicenter in the Transition and onGetEpicenter() will return null.
Transitions like {@link android.transition.Explode} use a point or Rect to orient
the direction of travel. This is called the epicenter of the Transition and is
typically centered on a touched View. The
{@link android.transition.Transition.EpicenterCallback} allows a Transition to
dynamically retrieve the epicenter during a Transition.
@param epicenterCallback The callback to use to find the epicenter of the Transition."
      end

      operation 1756215 "getEpicenterCallback"
	public return_type class_ref 342583 // EpicenterCallback
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the callback used to find the epicenter of the Transition.
Transitions like {@link android.transition.Explode} use a point or Rect to orient
the direction of travel. This is called the epicenter of the Transition and is
typically centered on a touched View. The
{@link android.transition.Transition.EpicenterCallback} allows a Transition to
dynamically retrieve the epicenter during a Transition.
@return the callback used to find the epicenter of the Transition."
      end

      operation 1756343 "getEpicenter"
	public return_type class_ref 135351 // Rect
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the epicenter as specified by the
{@link android.transition.Transition.EpicenterCallback} or null if no callback exists.
@return the epicenter as specified by the
{@link android.transition.Transition.EpicenterCallback} or null if no callback exists.
@see #setEpicenterCallback(android.transition.Transition.EpicenterCallback)"
      end

      operation 1756471 "setPathMotion"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pathMotion" type class_ref 341815 // PathMotion
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the algorithm used to calculate two-dimensional interpolation.
<p>
    Transitions such as {@link android.transition.ChangeBounds} move Views, typically
    in a straight path between the start and end positions. Applications that desire to
    have these motions move in a curve can change how Views interpolate in two dimensions
    by extending PathMotion and implementing
    {@link android.transition.PathMotion#getPath(float, float, float, float)}.
</p>
<p>
    When describing in XML, use a nested XML tag for the path motion. It can be one of
    the built-in tags <code>arcMotion</code> or <code>patternPathMotion</code> or it can
    be a custom PathMotion using <code>pathMotion</code> with the <code>class</code>
    attributed with the fully-described class name. For example:</p>
<pre>
{@code
<changeBounds>
    <pathMotion class=\"my.app.transition.MyPathMotion\"/>
</changeBounds>
}
</pre>
<p>or</p>
<pre>
{@code
<changeBounds>
  <arcMotion android:minimumHorizontalAngle=\"15\"
    android:minimumVerticalAngle=\"0\" android:maximumAngle=\"90\"/>
</changeBounds>
}
</pre>

@param pathMotion Algorithm object to use for determining how to interpolate in two
                  dimensions. If null, a straight-path algorithm will be used.
@see android.transition.ArcMotion
@see PatternPathMotion
@see android.transition.PathMotion"
      end

      operation 1756599 "getPathMotion"
	public return_type class_ref 341815 // PathMotion
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the algorithm object used to interpolate along two dimensions. This is typically
used to determine the View motion between two points.

<p>
    When describing in XML, use a nested XML tag for the path motion. It can be one of
    the built-in tags <code>arcMotion</code> or <code>patternPathMotion</code> or it can
    be a custom PathMotion using <code>pathMotion</code> with the <code>class</code>
    attributed with the fully-described class name. For example:</p>
<pre>{@code
<changeBounds>
    <pathMotion class=\"my.app.transition.MyPathMotion\"/>
</changeBounds>}
</pre>
<p>or</p>
<pre>{@code
<changeBounds>
  <arcMotion android:minimumHorizontalAngle=\"15\"
             android:minimumVerticalAngle=\"0\"
             android:maximumAngle=\"90\"/>
</changeBounds>}
</pre>

@return The algorithm object used to interpolate along two dimensions.
@see android.transition.ArcMotion
@see PatternPathMotion
@see android.transition.PathMotion"
      end

      operation 1756727 "setPropagation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionPropagation" type class_ref 342455 // TransitionPropagation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the method for determining Animator start delays.
When a Transition affects several Views like {@link android.transition.Explode} or
{@link android.transition.Slide}, there may be a desire to have a \"wave-front\" effect
such that the Animator start delay depends on position of the View. The
TransitionPropagation specifies how the start delays are calculated.
@param transitionPropagation The class used to determine the start delay of
                             Animators created by this Transition. A null value
                             indicates that no delay should be used."
      end

      operation 1756855 "getPropagation"
	public return_type class_ref 342455 // TransitionPropagation
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link android.transition.TransitionPropagation} used to calculate Animator start
delays.
When a Transition affects several Views like {@link android.transition.Explode} or
{@link android.transition.Slide}, there may be a desire to have a \"wave-front\" effect
such that the Animator start delay depends on position of the View. The
TransitionPropagation specifies how the start delays are calculated.
@return the {@link android.transition.TransitionPropagation} used to calculate Animator start
delays. This is null by default."
      end

      operation 1756983 "capturePropagationValues"
	package explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Captures TransitionPropagation values for the given view and the
hierarchy underneath it."
      end

      operation 1757111 "setSceneRoot"
	package return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757239 "setCanRemoveViews"
	package explicit_return_type "void"
	nparams 1
	  param inout name "canRemoveViews" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757367 "canRemoveViews"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757495 "setNameOverrides"
	public explicit_return_type "void"
	nparams 1
	  param inout name "overrides" type class_ref 156343 // ArrayMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the shared element names -- a mapping from a name at the start state to
a different name at the end state.
@hide"
      end

      operation 1757623 "getNameOverrides"
	public return_type class_ref 156343 // ArrayMap
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 1757751 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1757879 "clone"
	public return_type class_ref 341303 // Transition
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1758007 "getName"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this Transition. This name is used internally to distinguish
between different transitions to determine when interrupting transitions overlap.
For example, a ChangeBounds running on the same target view as another ChangeBounds
should determine whether the old transition is animating to different end values
and should be canceled in favor of the new transition.

<p>By default, a Transition's name is simply the value of {@link Class#getName()},
but subclasses are free to override and return something different.</p>

@return The name of this transition."
      end

      operation 1758135 "toString"
	package return_type class_ref 129591 // String
	nparams 1
	  param inout name "indent" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 342839 "AnimationInfo"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 714551 // view (<unidirectional association>)
	  relation 714551 --->
	    a role_name "view" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 714551 // view (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	classrelation 714679 // name (<unidirectional association>)
	  relation 714679 --->
	    a role_name "name" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 714679 // name (<unidirectional association>)
	    b parent class_ref 129591 // String
	end

	classrelation 714807 // values (<unidirectional association>)
	  relation 714807 --->
	    a role_name "values" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 714807 // values (<unidirectional association>)
	    b parent class_ref 342199 // TransitionValues
	end

	classrelation 714935 // windowId (<unidirectional association>)
	  relation 714935 --->
	    a role_name "windowId" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 714935 // windowId (<unidirectional association>)
	    b parent class_ref 148791 // WindowId
	end

	classrelation 715063 // transition (<unidirectional association>)
	  relation 715063 --->
	    a role_name "transition" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 715063 // transition (<unidirectional association>)
	    b parent class_ref 341303 // Transition
	end

	operation 1759543 "AnimationInfo"
	  package explicit_return_type ""
	  nparams 5
	    param inout name "view" type class_ref 134455 // View
	    param inout name "name" type class_ref 129591 // String
	    param inout name "transition" type class_ref 341303 // Transition
	    param inout name "windowId" type class_ref 148791 // WindowId
	    param inout name "values" type class_ref 342199 // TransitionValues
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 342967 "ArrayListManager"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1759671 "add"
	  class_operation package explicit_return_type "ArrayList<T>"
	  nparams 2
	    param inout name "list" explicit_type "ArrayList<T>"
	    param inout name "item" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Add the specified item to the list, returning the resulting list.
The returned list can either the be same list passed in or, if that
list was null, the new list that was created.

Note that the list holds unique items; if the item already exists in the
list, the list is not modified."
	end

	operation 1759799 "remove"
	  class_operation package explicit_return_type "ArrayList<T>"
	  nparams 2
	    param inout name "list" explicit_type "ArrayList<T>"
	    param inout name "item" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Remove the specified item from the list, returning the resulting list.
The returned list can either the be same list passed in or, if that
list becomes empty as a result of the remove(), the new list was created."
	end
      end
    end

    class 341815 "PathMotion"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This base class can be extended to provide motion along a Path to Transitions.

<p>
Transitions such as {@link android.transition.ChangeBounds} move Views, typically
in a straight path between the start and end positions. Applications that desire to
have these motions move in a curve can change how Views interpolate in two dimensions
by extending PathMotion and implementing {@link #getPath(float, float, float, float)}.
</p>
<p>This may be used in XML as an element inside a transition.</p>
<pre>
{@code
<changeBounds>
    <pathMotion class=\"my.app.transition.MyPathMotion\"/>
</changeBounds>
}
</pre>"
      operation 4653111 "PathMotion"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4653239 "PathMotion"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4653367 "getPath"
	abstract public return_type class_ref 272823 // Path
	nparams 4
	  param in name "startX" explicit_type "float"
	  param in name "startY" explicit_type "float"
	  param in name "endX" explicit_type "float"
	  param in name "endY" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provide a Path to interpolate between two points <code>(startX, startY)</code> and
<code>(endX, endY)</code>. This allows controlled curved motion along two dimensions.

@param startX The x coordinate of the starting point.
@param startY The y coordinate of the starting point.
@param endX   The x coordinate of the ending point.
@param endY   The y coordinate of the ending point.
@return A Path along which the points should be interpolated. The returned Path
must start at point <code>(startX, startY)</code>, typically using
{@link android.graphics.Path#moveTo(float, float)} and end at <code>(endX, endY)</code>."
      end
    end

    class 341943 "TransitionValuesMaps"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1993655 // viewValues (<unidirectional association>)
	relation 1993655 --->
	  a role_name "viewValues" init_value "
            new ArrayMap<View, TransitionValues>()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<View, TransitionValues> ${name}${value};
"
	    classrelation_ref 1993655 // viewValues (<unidirectional association>)
	  b parent class_ref 156343 // ArrayMap
      end

      classrelation 1993783 // idValues (<unidirectional association>)
	relation 1993783 --->
	  a role_name "idValues" init_value " new SparseArray<View>()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<View> ${name}${value};
"
	    classrelation_ref 1993783 // idValues (<unidirectional association>)
	  b parent class_ref 139575 // SparseArray
      end

      classrelation 1993911 // itemIdValues (<unidirectional association>)
	relation 1993911 --->
	  a role_name "itemIdValues" init_value " new LongSparseArray<View>()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<View> ${name}${value};
"
	    classrelation_ref 1993911 // itemIdValues (<unidirectional association>)
	  b parent class_ref 342711 // LongSparseArray
      end

      classrelation 1994039 // nameValues (<unidirectional association>)
	relation 1994039 --->
	  a role_name "nameValues" init_value " new ArrayMap<String, View>()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, View> ${name}${value};
"
	    classrelation_ref 1994039 // nameValues (<unidirectional association>)
	  b parent class_ref 156343 // ArrayMap
      end
    end

    class 342071 "TransitionSet"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A TransitionSet is a parent of child transitions (including other
TransitionSets). Using TransitionSets enables more complex
choreography of transitions, where some sets play {@link #ORDERING_TOGETHER} and
others play {@link #ORDERING_SEQUENTIAL}. For example, {@link AutoTransition}
uses a TransitionSet to sequentially play a Fade(Fade.OUT), followed by
a {@link ChangeBounds}, followed by a Fade(Fade.OUT) transition.

<p>A TransitionSet can be described in a resource file by using the
tag <code>transitionSet</code>, along with the standard
attributes of {@link android.R.styleable#TransitionSet} and
{@link android.R.styleable#Transition}. Child transitions of the
TransitionSet object can be loaded by adding those child tags inside the
enclosing <code>transitionSet</code> tag. For example, the following xml
describes a TransitionSet that plays a Fade and then a ChangeBounds
transition on the affected view targets:</p>
<pre>
    &lt;transitionSet xmlns:android=\"http://schemas.android.com/apk/res/android\"
            android:transitionOrdering=\"sequential\"&gt;
        &lt;fade/&gt;
        &lt;changeBounds/&gt;
    &lt;/transitionSet&gt;
</pre>"
      classrelation 1975607 // <generalisation>
	relation 1975607 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1975607 // <generalisation>
	  b parent class_ref 341303 // Transition
      end

      classrelation 1975735 // mTransitions (<unidirectional association>)
	relation 1975735 --->
	  stereotype "ArrayList"
	  a role_name "mTransitions" init_value " new ArrayList<Transition>()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1975735 // mTransitions (<unidirectional association>)
	  b parent class_ref 341303 // Transition
      end

      attribute 2006455 "mPlayTogether"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2006583 "mCurrentListeners"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2006711 "mStarted"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2006839 "ORDERING_TOGETHER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A flag used to indicate that the child transitions of this set
should all start at the same time.
"
      end

      attribute 2006967 "ORDERING_SEQUENTIAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A flag used to indicate that the child transitions of this set should
play in sequence; when one child transition ends, the next child
transition begins. Note that a transition does not end until all
instances of it (which are playing on all applicable targets of the
transition) end.
"
      end

      operation 4654775 "TransitionSet"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty transition set. Add child transitions to the
set by calling {@link #addTransition(Transition)} )}. By default,
child transitions will play {@link #ORDERING_TOGETHER together}."
      end

      operation 4654903 "TransitionSet"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4655031 "setOrdering"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param in name "ordering" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the play order of this set's child transitions.

@param ordering {@link #ORDERING_TOGETHER} to play this set's child
transitions together, {@link #ORDERING_SEQUENTIAL} to play the child
transitions in sequence.
@return This transitionSet object."
      end

      operation 4655159 "getOrdering"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ordering of this TransitionSet. By default, the value is
{@link #ORDERING_TOGETHER}.

@return {@link #ORDERING_TOGETHER} if child transitions will play at the same
time, {@link #ORDERING_SEQUENTIAL} if they will play in sequence.

@see #setOrdering(int)"
      end

      operation 4655287 "addTransition"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "transition" type class_ref 341303 // Transition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds child transition to this set. The order in which this child transition
is added relative to other child transitions that are added, in addition to
the {@link #getOrdering() ordering} property, determines the
order in which the transitions are started.

<p>If this transitionSet has a {@link #getDuration() duration} set on it, the
child transition will inherit that duration. Transitions are assumed to have
a maximum of one transitionSet parent.</p>

@param transition A non-null child transition to be added to this set.
@return This transitionSet object."
      end

      operation 4655415 "getTransitionCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of child transitions in the TransitionSet.

@return The number of child transitions in the TransitionSet.
@see #addTransition(Transition)
@see #getTransitionAt(int)"
      end

      operation 4655543 "getTransitionAt"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the child Transition at the specified position in the TransitionSet.

@param index The position of the Transition to retrieve.
@see #addTransition(Transition)
@see #getTransitionCount()"
      end

      operation 4655671 "setDuration"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param in name "duration" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Setting a non-negative duration on a TransitionSet causes all of the child
transitions (current and future) to inherit this duration.

@param duration The length of the animation, in milliseconds.
@return This transitionSet object."
      end

      operation 4655799 "setStartDelay"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param in name "startDelay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4655927 "setInterpolator"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "interpolator" type class_ref 315319 // TimeInterpolator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4656055 "addTarget"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "target" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4656183 "addTarget"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param in name "targetId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4656311 "addTarget"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "targetName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4656439 "addTarget"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "targetType" type class_ref 132791 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4656567 "addListener"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "listener" type class_ref 342327 // TransitionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4656695 "removeTarget"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param in name "targetId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4656823 "removeTarget"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "target" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4656951 "removeTarget"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "target" type class_ref 132791 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4657079 "removeTarget"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "target" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4657207 "excludeTarget"
	public return_type class_ref 341303 // Transition
	nparams 2
	  param inout name "target" type class_ref 134455 // View
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4657335 "excludeTarget"
	public return_type class_ref 341303 // Transition
	nparams 2
	  param inout name "targetName" type class_ref 129591 // String
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4657463 "excludeTarget"
	public return_type class_ref 341303 // Transition
	nparams 2
	  param in name "targetId" explicit_type "int"
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4657591 "excludeTarget"
	public return_type class_ref 341303 // Transition
	nparams 2
	  param inout name "type" type class_ref 132791 // Class
	  param inout name "exclude" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4657719 "removeListener"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "listener" type class_ref 342327 // TransitionListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4657847 "setPathMotion"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pathMotion" type class_ref 341815 // PathMotion
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4657975 "removeTransition"
	public return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "transition" type class_ref 341303 // Transition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified child transition from this set.

@param transition The transition to be removed.
@return This transitionSet object."
      end

      operation 4658103 "setupStartEndListeners"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets up listeners for each of the child transitions. This is used to
determine when this transition set is finished (all child transitions
must finish first)."
      end

      class 655415 "TransitionSetListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1975863 // <generalisation>
	  relation 1975863 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1975863 // <generalisation>
	    b parent class_ref 341687 // TransitionListenerAdapter
	end

	classrelation 1975991 // mTransitionSet (<unidirectional association>)
	  relation 1975991 --->
	    a role_name "mTransitionSet" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1975991 // mTransitionSet (<unidirectional association>)
	    b parent class_ref 342071 // TransitionSet
	end

	operation 4658231 "TransitionSetListener"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "transitionSet" type class_ref 342071 // TransitionSet
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4658359 "onTransitionStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4658487 "onTransitionEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 4658615 "createAnimators"
	protected explicit_return_type "void"
	nparams 5
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 341943 // TransitionValuesMaps
	  param inout name "endValues" type class_ref 341943 // TransitionValuesMaps
	  param inout name "startValuesList" explicit_type "ArrayList<TransitionValues>"
	  param inout name "endValuesList" explicit_type "ArrayList<TransitionValues>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@hide"
      end

      operation 4658743 "runAnimators"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@hide"
      end

      operation 4658871 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4658999 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4659127 "capturePropagationValues"
	package explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4659255 "pause"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sceneRoot" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " @hide "
      end

      operation 4659383 "resume"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sceneRoot" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " @hide "
      end

      operation 4659511 "cancel"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " @hide "
      end

      operation 4659639 "setSceneRoot"
	package return_type class_ref 342071 // TransitionSet
	nparams 1
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4659767 "setCanRemoveViews"
	package explicit_return_type "void"
	nparams 1
	  param inout name "canRemoveViews" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4659895 "setPropagation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "propagation" type class_ref 342455 // TransitionPropagation
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4660023 "setEpicenterCallback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "epicenterCallback" type class_ref 342583 // EpicenterCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4660151 "toString"
	package return_type class_ref 129591 // String
	nparams 1
	  param inout name "indent" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4660279 "clone"
	public return_type class_ref 342071 // TransitionSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 342199 "TransitionValues"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Data structure which holds cached values for the transition.
The view field is the target which all of the values pertain to.
The values field is a map which holds information for fields
according to names selected by the transitions. These names should
be unique to avoid clobbering values stored by other transitions,
such as the convention project:transition_name:property_name. For
example, the platform might store a property \"alpha\" in a transition
\"Fader\" as \"android:fader:alpha\".

<p>These values are cached during the
{@link Transition#captureStartValues(TransitionValues)}
capture} phases of a scene change, once when the start values are captured
and again when the end values are captured. These start/end values are then
passed into the transitions via the
for {@link Transition#createAnimator(ViewGroup, TransitionValues, TransitionValues)}
method.</p>"
      classrelation 1993271 // view (<unidirectional association>)
	relation 1993271 --->
	  a role_name "view" public
	    comment "
The View with these values

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1993271 // view (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      classrelation 1993399 // values (<unidirectional association>)
	relation 1993399 --->
	  stereotype "Map"
	  a role_name "values" init_value " new ArrayMap<String, Object>()" const_relation public
	    comment "The set of values tracked by transitions for this scene
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Object> ${name}${value};
"
	    classrelation_ref 1993399 // values (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1993527 // targetedTransitions (<unidirectional association>)
	relation 1993527 --->
	  stereotype "ArrayList"
	  a role_name "targetedTransitions" init_value " new ArrayList<Transition>()" const_relation package
	    comment "The Transitions that targeted this view.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1993527 // targetedTransitions (<unidirectional association>)
	  b parent class_ref 341303 // Transition
      end

      operation 4689719 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4689847 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4689975 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 342455 "TransitionPropagation"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Extend <code>TransitionPropagation</code> to customize start delays for Animators created
in {@link android.transition.Transition#createAnimator(ViewGroup,
TransitionValues, TransitionValues)}. A Transition such as {@link android.transition.Explode}
defaults to using {@link android.transition.CircularPropagation} and Views closer to the
epicenter will move out of the scene later and into the scene sooner than Views farther
from the epicenter, giving the appearance of inertia. With no TransitionPropagation, all
Views will react simultaneously to the start of the transition.

@see Transition#setPropagation(TransitionPropagation)
@see Transition#getEpicenter()"
      operation 4670263 "getStartDelay"
	abstract public explicit_return_type "long"
	nparams 4
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "transition" type class_ref 341303 // Transition
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by Transition to alter the Animator start delay. All start delays will be adjusted
such that the minimum becomes zero.
@param sceneRoot The root of the View hierarchy running the transition.
@param transition The transition that created the Animator
@param startValues The values for a specific target in the start scene.
@param endValues The values for the target in the end scene.
@return A start delay to use with the Animator created by <code>transition</code>. The
delay will be offset by the minimum delay of all <code>TransitionPropagation</code>s
used in the Transition so that the smallest delay will be 0. Returned values may be
negative."
      end

      operation 4670391 "captureValues"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Captures the values in the start or end scene for the properties that this
transition propagation monitors. These values are then passed as the startValues
or endValues structure in a later call to
{@link #getStartDelay(ViewGroup, Transition, TransitionValues, TransitionValues)}.
The main concern for an implementation is what the
properties are that the transition cares about and what the values are
for all of those properties. The start and end values will be compared
later during the
{@link #getStartDelay(ViewGroup, Transition, TransitionValues, TransitionValues)}.
method to determine the start delay.

<p>Subclasses must implement this method. The method should only be called by the
transition system; it is not intended to be called from external classes.</p>

@param transitionValues The holder for any values that the Transition
wishes to store. Values are stored in the <code>values</code> field
of this TransitionValues object and are keyed from
a String value. For example, to store a view's rotation value,
a transition might call
<code>transitionValues.values.put(\"appname:transitionname:rotation\",
view.getRotation())</code>. The target view will already be stored in
the transitionValues structure when this method is called."
      end

      operation 4670519 "getPropagationProperties"
	abstract public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of property names stored in the {@link TransitionValues}
object passed into {@link #captureValues(TransitionValues)} that
this transition propagation cares about for the purposes of preventing
duplicate capturing of property values.

<p>A <code>TransitionPropagation</code> must override this method to prevent
duplicate capturing of values and must contain at least one </p>

@return An array of property names as described in the class documentation for
{@link TransitionValues}."
      end
    end

    class 655159 "ArcMotion"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A PathMotion that generates a curved path along an arc on an imaginary circle containing
the two points. If the horizontal distance between the points is less than the vertical
distance, then the circle's center point will be horizontally aligned with the end point. If the
vertical distance is less than the horizontal distance then the circle's center point
will be vertically aligned with the end point.
<p>
When the two points are near horizontal or vertical, the curve of the motion will be
small as the center of the circle will be far from both points. To force curvature of
the path, {@link #setMinimumHorizontalAngle(float)} and
{@link #setMinimumVerticalAngle(float)} may be used to set the minimum angle of the
arc between two points.
</p>
<p>This may be used in XML as an element inside a transition.</p>
<pre>{@code
<changeBounds>
  <arcMotion android:minimumHorizontalAngle=\"15\"
             android:minimumVerticalAngle=\"0\"
             android:maximumAngle=\"90\"/>
</changeBounds>}
</pre>"
      classrelation 1975479 // <generalisation>
	relation 1975479 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1975479 // <generalisation>
	  b parent class_ref 341815 // PathMotion
      end

      attribute 2005303 "DEFAULT_MIN_ANGLE_DEGREES"
	class_attribute const_attribute private explicit_type "float"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2005431 "DEFAULT_MAX_ANGLE_DEGREES"
	class_attribute const_attribute private explicit_type "float"
	init_value " 70"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2005559 "DEFAULT_MAX_TANGENT"
	class_attribute const_attribute private explicit_type "float"
	init_value " (float)
            Math.tan(Math.toRadians(DEFAULT_MAX_ANGLE_DEGREES/2))"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2005687 "mMinimumHorizontalAngle"
	private explicit_type "float"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2005815 "mMinimumVerticalAngle"
	private explicit_type "float"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2005943 "mMaximumAngle"
	private explicit_type "float"
	init_value " DEFAULT_MAX_ANGLE_DEGREES"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2006071 "mMinimumHorizontalTangent"
	private explicit_type "float"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2006199 "mMinimumVerticalTangent"
	private explicit_type "float"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2006327 "mMaximumTangent"
	private explicit_type "float"
	init_value " DEFAULT_MAX_TANGENT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4653495 "ArcMotion"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4653623 "ArcMotion"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4653751 "setMinimumHorizontalAngle"
	public explicit_return_type "void"
	nparams 1
	  param in name "angleInDegrees" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minimum arc along the circle between two points aligned near horizontally.
When start and end points are close to horizontal, the calculated center point of the
circle will be far from both points, giving a near straight path between the points.
By setting a minimum angle, this forces the center point to be closer and give an
exaggerated curve to the path.
<p>The default value is 0.</p>

@param angleInDegrees The minimum angle of the arc on a circle describing the Path
                      between two nearly horizontally-separated points.
@attr ref android.R.styleable#ArcMotion_minimumHorizontalAngle"
      end

      operation 4653879 "getMinimumHorizontalAngle"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum arc along the circle between two points aligned near horizontally.
When start and end points are close to horizontal, the calculated center point of the
circle will be far from both points, giving a near straight path between the points.
By setting a minimum angle, this forces the center point to be closer and give an
exaggerated curve to the path.
<p>The default value is 0.</p>

@return  The minimum arc along the circle between two points aligned near horizontally.
@attr ref android.R.styleable#ArcMotion_minimumHorizontalAngle"
      end

      operation 4654007 "setMinimumVerticalAngle"
	public explicit_return_type "void"
	nparams 1
	  param in name "angleInDegrees" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minimum arc along the circle between two points aligned near vertically.
When start and end points are close to vertical, the calculated center point of the
circle will be far from both points, giving a near straight path between the points.
By setting a minimum angle, this forces the center point to be closer and give an
exaggerated curve to the path.
<p>The default value is 0.</p>

@param angleInDegrees The minimum angle of the arc on a circle describing the Path
                      between two nearly vertically-separated points.
@attr ref android.R.styleable#ArcMotion_minimumVerticalAngle"
      end

      operation 4654135 "getMinimumVerticalAngle"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum arc along the circle between two points aligned near vertically.
When start and end points are close to vertical, the calculated center point of the
circle will be far from both points, giving a near straight path between the points.
By setting a minimum angle, this forces the center point to be closer and give an
exaggerated curve to the path.
<p>The default value is 0.</p>

@return The minimum angle of the arc on a circle describing the Path
        between two nearly vertically-separated points.
@attr ref android.R.styleable#ArcMotion_minimumVerticalAngle"
      end

      operation 4654263 "setMaximumAngle"
	public explicit_return_type "void"
	nparams 1
	  param in name "angleInDegrees" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum arc along the circle between two points. When start and end points
have close to equal x and y differences, the curve between them is large. This forces
the curved path to have an arc of at most the given angle.
<p>The default value is 70 degrees.</p>

@param angleInDegrees The maximum angle of the arc on a circle describing the Path
                      between the start and end points.
@attr ref android.R.styleable#ArcMotion_maximumAngle"
      end

      operation 4654391 "getMaximumAngle"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum arc along the circle between two points. When start and end points
have close to equal x and y differences, the curve between them is large. This forces
the curved path to have an arc of at most the given angle.
<p>The default value is 70 degrees.</p>

@return The maximum angle of the arc on a circle describing the Path
        between the start and end points.
@attr ref android.R.styleable#ArcMotion_maximumAngle"
      end

      operation 4654519 "toTangent"
	class_operation private explicit_return_type "float"
	nparams 1
	  param in name "arcInDegrees" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4654647 "getPath"
	public return_type class_ref 272823 // Path
	nparams 4
	  param in name "startX" explicit_type "float"
	  param in name "startY" explicit_type "float"
	  param in name "endX" explicit_type "float"
	  param in name "endY" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 655287 "AutoTransition"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Utility class for creating a default transition that automatically fades,
moves, and resizes views during a scene change.

<p>An AutoTransition can be described in a resource file by using the
tag <code>autoTransition</code>, along with the other standard
attributes of {@link android.R.styleable#Transition}.</p>"
      classrelation 1976119 // <generalisation>
	relation 1976119 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1976119 // <generalisation>
	  b parent class_ref 342071 // TransitionSet
      end

      operation 4660407 "AutoTransition"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an AutoTransition object, which is a TransitionSet which
first fades out disappearing targets, then moves and resizes existing
targets, and finally fades in appearing targets.
"
      end

      operation 4660535 "AutoTransition"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4660663 "init"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 655543 "ChangeBounds"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This transition captures the layout bounds of target views before and after
the scene change and animates those changes during the transition.

<p>A ChangeBounds transition can be described in a resource file by using the
tag <code>changeBounds</code>, using its attributes of
{@link android.R.styleable#ChangeBounds} along with the other standard
attributes of {@link android.R.styleable#Transition}.</p>"
      classrelation 1976247 // <generalisation>
	relation 1976247 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1976247 // <generalisation>
	  b parent class_ref 341303 // Transition
      end

      classrelation 1976375 // PROPNAME_BOUNDS (<unidirectional association>)
	relation 1976375 --->
	  a role_name "PROPNAME_BOUNDS" init_value " \"android:changeBounds:bounds\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1976375 // PROPNAME_BOUNDS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1976503 // PROPNAME_CLIP (<unidirectional association>)
	relation 1976503 --->
	  a role_name "PROPNAME_CLIP" init_value " \"android:changeBounds:clip\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1976503 // PROPNAME_CLIP (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1976631 // PROPNAME_PARENT (<unidirectional association>)
	relation 1976631 --->
	  a role_name "PROPNAME_PARENT" init_value " \"android:changeBounds:parent\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1976631 // PROPNAME_PARENT (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1976759 // PROPNAME_WINDOW_X (<unidirectional association>)
	relation 1976759 --->
	  a role_name "PROPNAME_WINDOW_X" init_value " \"android:changeBounds:windowX\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1976759 // PROPNAME_WINDOW_X (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1976887 // PROPNAME_WINDOW_Y (<unidirectional association>)
	relation 1976887 --->
	  a role_name "PROPNAME_WINDOW_Y" init_value " \"android:changeBounds:windowY\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1976887 // PROPNAME_WINDOW_Y (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1977015 // sTransitionProperties (<unidirectional association>)
	relation 1977015 --->
	  a role_name "sTransitionProperties" multiplicity "[]" init_value " {
            PROPNAME_BOUNDS,
            PROPNAME_CLIP,
            PROPNAME_PARENT,
            PROPNAME_WINDOW_X,
            PROPNAME_WINDOW_Y
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1977015 // sTransitionProperties (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1977143 // DRAWABLE_ORIGIN_PROPERTY (<unidirectional association>)
	relation 1977143 --->
	  a role_name "DRAWABLE_ORIGIN_PROPERTY" init_value "
            new Property<Drawable, PointF>(PointF.class, \"boundsOrigin\") {
                private Rect mBounds = new Rect();

                @Override
                public void set(Drawable object, PointF value) {
                    object.copyBounds(mBounds);
                    mBounds.offsetTo(Math.round(value.x), Math.round(value.y));
                    object.setBounds(mBounds);
                }

                @Override
                public PointF get(Drawable object) {
                    object.copyBounds(mBounds);
                    return new PointF(mBounds.left, mBounds.top);
                }
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Drawable, PointF> ${name}${value};
"
	    classrelation_ref 1977143 // DRAWABLE_ORIGIN_PROPERTY (<unidirectional association>)
	  b parent class_ref 149559 // Property
      end

      class 655671 "ViewBounds"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2007479 "mLeft"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2007607 "mTop"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2007735 "mRight"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2007863 "mBottom"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2007991 "mIsTopLeftSet"
	  private explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2008119 "mIsBottomRightSet"
	  private explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1978167 // mView (<unidirectional association>)
	  relation 1978167 --->
	    a role_name "mView" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1978167 // mView (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	operation 4662199 "ViewBounds"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4662327 "setTopLeft"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "topLeft" type class_ref 152247 // PointF
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4662455 "setBottomRight"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "bottomRight" type class_ref 152247 // PointF
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4662583 "setLeftTopRightBottom"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1977271 // TOP_LEFT_PROPERTY (<unidirectional association>)
	relation 1977271 --->
	  a role_name "TOP_LEFT_PROPERTY" init_value "
            new Property<ViewBounds, PointF>(PointF.class, \"topLeft\") {
                @Override
                public void set(ViewBounds viewBounds, PointF topLeft) {
                    viewBounds.setTopLeft(topLeft);
                }

                @Override
                public PointF get(ViewBounds viewBounds) {
                    return null;
                }
            }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ViewBounds, PointF> ${name}${value};
"
	    classrelation_ref 1977271 // TOP_LEFT_PROPERTY (<unidirectional association>)
	  b parent class_ref 149559 // Property
      end

      classrelation 1977399 // BOTTOM_RIGHT_PROPERTY (<unidirectional association>)
	relation 1977399 --->
	  a role_name "BOTTOM_RIGHT_PROPERTY" init_value "
            new Property<ViewBounds, PointF>(PointF.class, \"bottomRight\") {
                @Override
                public void set(ViewBounds viewBounds, PointF bottomRight) {
                    viewBounds.setBottomRight(bottomRight);
                }

                @Override
                public PointF get(ViewBounds viewBounds) {
                    return null;
                }
            }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ViewBounds, PointF> ${name}${value};
"
	    classrelation_ref 1977399 // BOTTOM_RIGHT_PROPERTY (<unidirectional association>)
	  b parent class_ref 149559 // Property
      end

      classrelation 1977527 // BOTTOM_RIGHT_ONLY_PROPERTY (<unidirectional association>)
	relation 1977527 --->
	  a role_name "BOTTOM_RIGHT_ONLY_PROPERTY" init_value "
            new Property<View, PointF>(PointF.class, \"bottomRight\") {
                @Override
                public void set(View view, PointF bottomRight) {
                    int left = view.getLeft();
                    int top = view.getTop();
                    int right = Math.round(bottomRight.x);
                    int bottom = Math.round(bottomRight.y);
                    view.setLeftTopRightBottom(left, top, right, bottom);
                }

                @Override
                public PointF get(View view) {
                    return null;
                }
            }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<View, PointF> ${name}${value};
"
	    classrelation_ref 1977527 // BOTTOM_RIGHT_ONLY_PROPERTY (<unidirectional association>)
	  b parent class_ref 149559 // Property
      end

      classrelation 1977655 // TOP_LEFT_ONLY_PROPERTY (<unidirectional association>)
	relation 1977655 --->
	  a role_name "TOP_LEFT_ONLY_PROPERTY" init_value "
            new Property<View, PointF>(PointF.class, \"topLeft\") {
                @Override
                public void set(View view, PointF topLeft) {
                    int left = Math.round(topLeft.x);
                    int top = Math.round(topLeft.y);
                    int right = view.getRight();
                    int bottom = view.getBottom();
                    view.setLeftTopRightBottom(left, top, right, bottom);
                }

                @Override
                public PointF get(View view) {
                    return null;
                }
            }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<View, PointF> ${name}${value};
"
	    classrelation_ref 1977655 // TOP_LEFT_ONLY_PROPERTY (<unidirectional association>)
	  b parent class_ref 149559 // Property
      end

      classrelation 1977783 // POSITION_PROPERTY (<unidirectional association>)
	relation 1977783 --->
	  a role_name "POSITION_PROPERTY" init_value "
            new Property<View, PointF>(PointF.class, \"position\") {
                @Override
                public void set(View view, PointF topLeft) {
                    int left = Math.round(topLeft.x);
                    int top = Math.round(topLeft.y);
                    int right = left + view.getWidth();
                    int bottom = top + view.getHeight();
                    view.setLeftTopRightBottom(left, top, right, bottom);
                }

                @Override
                public PointF get(View view) {
                    return null;
                }
            }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<View, PointF> ${name}${value};
"
	    classrelation_ref 1977783 // POSITION_PROPERTY (<unidirectional association>)
	  b parent class_ref 149559 // Property
      end

      attribute 2007095 "tempLocation"
	package explicit_type "int"
	multiplicity "[]"
	init_value " new int[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2007223 "mResizeClip"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2007351 "mReparent"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1977911 // LOG_TAG (<unidirectional association>)
	relation 1977911 --->
	  a role_name "LOG_TAG" init_value " \"ChangeBounds\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1977911 // LOG_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1978039 // sRectEvaluator (<unidirectional association>)
	relation 1978039 --->
	  a role_name "sRectEvaluator" init_value " new RectEvaluator()" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1978039 // sRectEvaluator (<unidirectional association>)
	  b parent class_ref 321719 // RectEvaluator
      end

      operation 4660791 "ChangeBounds"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4660919 "ChangeBounds"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4661047 "getTransitionProperties"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4661175 "setResizeClip"
	public explicit_return_type "void"
	nparams 1
	  param inout name "resizeClip" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "When <code>resizeClip</code> is true, ChangeBounds resizes the view using the clipBounds
instead of changing the dimensions of the view during the animation. When
<code>resizeClip</code> is false, ChangeBounds resizes the View by changing its dimensions.

<p>When resizeClip is set to true, the clip bounds is modified by ChangeBounds. Therefore,
{@link android.transition.ChangeClipBounds} is not compatible with ChangeBounds
in this mode.</p>

@param resizeClip Used to indicate whether the view bounds should be modified or the
                  clip bounds should be modified by ChangeBounds.
@see android.view.View#setClipBounds(android.graphics.Rect)
@attr ref android.R.styleable#ChangeBounds_resizeClip"
      end

      operation 4661303 "getResizeClip"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true when the ChangeBounds will resize by changing the clip bounds during the
view animation or false when bounds are changed. The default value is false.

@return true when the ChangeBounds will resize by changing the clip bounds during the
view animation or false when bounds are changed. The default value is false.
@attr ref android.R.styleable#ChangeBounds_resizeClip"
      end

      operation 4661431 "setReparent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reparent" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Setting this flag tells ChangeBounds to track the before/after parent
of every view using this transition. The flag is not enabled by
default because it requires the parent instances to be the same
in the two scenes or else all parents must use ids to allow
the transition to determine which parents are the same.

@param reparent true if the transition should track the parent
container of target views and animate parent changes.
@deprecated Use {@link android.transition.ChangeTransform} to handle
transitions between different parents."
      end

      operation 4661559 "captureValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "values" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4661687 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4661815 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4661943 "parentMatches"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "startParent" type class_ref 134455 // View
	  param inout name "endParent" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4662071 "createAnimator"
	public return_type class_ref 314807 // Animator
	nparams 3
	  param in name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 655799 "ChangeClipBounds"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "ChangeClipBounds captures the {@link android.view.View#getClipBounds()} before and after the
scene change and animates those changes during the transition."
      classrelation 1978295 // <generalisation>
	relation 1978295 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1978295 // <generalisation>
	  b parent class_ref 341303 // Transition
      end

      classrelation 1978423 // TAG (<unidirectional association>)
	relation 1978423 --->
	  a role_name "TAG" init_value " \"ChangeTransform\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1978423 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1978551 // PROPNAME_CLIP (<unidirectional association>)
	relation 1978551 --->
	  a role_name "PROPNAME_CLIP" init_value " \"android:clipBounds:clip\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1978551 // PROPNAME_CLIP (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1978679 // PROPNAME_BOUNDS (<unidirectional association>)
	relation 1978679 --->
	  a role_name "PROPNAME_BOUNDS" init_value " \"android:clipBounds:bounds\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1978679 // PROPNAME_BOUNDS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1978807 // sTransitionProperties (<unidirectional association>)
	relation 1978807 --->
	  a role_name "sTransitionProperties" multiplicity "[]" init_value " {
            PROPNAME_CLIP,
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1978807 // sTransitionProperties (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      operation 4662711 "ChangeClipBounds"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4662839 "ChangeClipBounds"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4662967 "getTransitionProperties"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4663095 "captureValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "values" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4663223 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4663351 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4663479 "createAnimator"
	public return_type class_ref 314807 // Animator
	nparams 3
	  param in name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 655927 "ChangeImageTransform"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This Transition captures an ImageView's matrix before and after the
scene change and animates it during the transition.

<p>In combination with ChangeBounds, ChangeImageTransform allows ImageViews
that change size, shape, or {@link android.widget.ImageView.ScaleType} to animate contents
smoothly.</p>"
      classrelation 1978935 // <generalisation>
	relation 1978935 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1978935 // <generalisation>
	  b parent class_ref 341303 // Transition
      end

      classrelation 1979063 // TAG (<unidirectional association>)
	relation 1979063 --->
	  a role_name "TAG" init_value " \"ChangeImageTransform\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1979063 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1979191 // PROPNAME_MATRIX (<unidirectional association>)
	relation 1979191 --->
	  a role_name "PROPNAME_MATRIX" init_value " \"android:changeImageTransform:matrix\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1979191 // PROPNAME_MATRIX (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1979319 // PROPNAME_BOUNDS (<unidirectional association>)
	relation 1979319 --->
	  a role_name "PROPNAME_BOUNDS" init_value " \"android:changeImageTransform:bounds\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1979319 // PROPNAME_BOUNDS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1979447 // sTransitionProperties (<unidirectional association>)
	relation 1979447 --->
	  a role_name "sTransitionProperties" multiplicity "[]" init_value " {
            PROPNAME_MATRIX,
            PROPNAME_BOUNDS,
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1979447 // sTransitionProperties (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1979575 // NULL_MATRIX_EVALUATOR (<unidirectional association>)
	relation 1979575 --->
	  a role_name "NULL_MATRIX_EVALUATOR" init_value " new TypeEvaluator<Matrix>() {
        @Override
        public Matrix evaluate(float fraction, Matrix startValue, Matrix endValue) {
            return null;
        }
    }" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Matrix> ${name}${value};
"
	    classrelation_ref 1979575 // NULL_MATRIX_EVALUATOR (<unidirectional association>)
	  b parent class_ref 316087 // TypeEvaluator
      end

      classrelation 1979703 // ANIMATED_TRANSFORM_PROPERTY (<unidirectional association>)
	relation 1979703 --->
	  a role_name "ANIMATED_TRANSFORM_PROPERTY" init_value " new Property<ImageView, Matrix>(Matrix.class, \"animatedTransform\") {
        @Override
        public void set(ImageView object, Matrix value) {
            object.animateTransform(value);
        }

        @Override
        public Matrix get(ImageView object) {
            return null;
        }
    }" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ImageView, Matrix> ${name}${value};
"
	    classrelation_ref 1979703 // ANIMATED_TRANSFORM_PROPERTY (<unidirectional association>)
	  b parent class_ref 149559 // Property
      end

      operation 4663607 "ChangeImageTransform"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4663735 "ChangeImageTransform"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4663863 "captureValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4663991 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4664119 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4664247 "getTransitionProperties"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4664375 "createAnimator"
	public return_type class_ref 314807 // Animator
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Creates an Animator for ImageViews moving, changing dimensions, and/or changing
{@link android.widget.ImageView.ScaleType}.

@param sceneRoot   The root of the transition hierarchy.
@param startValues The values for a specific target in the start scene.
@param endValues   The values for the target in the end scene.
@return An Animator to move an ImageView or null if the View is not an ImageView,
the Drawable changed, the View is not VISIBLE, or there was no change."
      end

      operation 4664503 "createNullAnimator"
	private return_type class_ref 314551 // ObjectAnimator
	nparams 1
	  param inout name "imageView" type class_ref 267703 // ImageView
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4664631 "createMatrixAnimator"
	private return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param in name "imageView" type class_ref 267703 // ImageView
	  param inout name "startMatrix" type class_ref 141111 // Matrix
	  param in name "endMatrix" type class_ref 141111 // Matrix
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 656055 "ChangeScroll"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This transition captures the scroll properties of targets before and after
the scene change and animates any changes."
      classrelation 1979831 // <generalisation>
	relation 1979831 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1979831 // <generalisation>
	  b parent class_ref 341303 // Transition
      end

      classrelation 1979959 // PROPNAME_SCROLL_X (<unidirectional association>)
	relation 1979959 --->
	  a role_name "PROPNAME_SCROLL_X" init_value " \"android:changeScroll:x\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1979959 // PROPNAME_SCROLL_X (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1980087 // PROPNAME_SCROLL_Y (<unidirectional association>)
	relation 1980087 --->
	  a role_name "PROPNAME_SCROLL_Y" init_value " \"android:changeScroll:y\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1980087 // PROPNAME_SCROLL_Y (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      operation 4664759 "ChangeScroll"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4664887 "ChangeScroll"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4665015 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4665143 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4665271 "captureValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4665399 "createAnimator"
	public return_type class_ref 314807 // Animator
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 656183 "ChangeText"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This transition tracks changes to the text in TextView targets. If the text
changes between the start and end scenes, the transition ensures that the
starting text stays until the transition ends, at which point it changes
to the end text.  This is useful in situations where you want to resize a
text view to its new size before displaying the text that goes there.

@hide"
      classrelation 1980215 // <generalisation>
	relation 1980215 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1980215 // <generalisation>
	  b parent class_ref 341303 // Transition
      end

      classrelation 1980343 // LOG_TAG (<unidirectional association>)
	relation 1980343 --->
	  a role_name "LOG_TAG" init_value " \"TextChange\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1980343 // LOG_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1980471 // PROPNAME_TEXT (<unidirectional association>)
	relation 1980471 --->
	  a role_name "PROPNAME_TEXT" init_value " \"android:textchange:text\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1980471 // PROPNAME_TEXT (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1980599 // PROPNAME_TEXT_SELECTION_START (<unidirectional association>)
	relation 1980599 --->
	  a role_name "PROPNAME_TEXT_SELECTION_START" init_value "
            \"android:textchange:textSelectionStart\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1980599 // PROPNAME_TEXT_SELECTION_START (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1980727 // PROPNAME_TEXT_SELECTION_END (<unidirectional association>)
	relation 1980727 --->
	  a role_name "PROPNAME_TEXT_SELECTION_END" init_value "
            \"android:textchange:textSelectionEnd\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1980727 // PROPNAME_TEXT_SELECTION_END (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1980855 // PROPNAME_TEXT_COLOR (<unidirectional association>)
	relation 1980855 --->
	  a role_name "PROPNAME_TEXT_COLOR" init_value " \"android:textchange:textColor\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1980855 // PROPNAME_TEXT_COLOR (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 2008247 "mChangeBehavior"
	private explicit_type "int"
	init_value " CHANGE_BEHAVIOR_KEEP"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2008375 "CHANGE_BEHAVIOR_KEEP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag specifying that the text in affected/changing TextView targets will keep
their original text during the transition, setting it to the final text when
the transition ends. This is the default behavior.

@see #setChangeBehavior(int)
"
      end

      attribute 2008503 "CHANGE_BEHAVIOR_OUT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag specifying that the text changing animation should first fade
out the original text completely. The new text is set on the target
view at the end of the fade-out animation. This transition is typically
used with a later {@link #CHANGE_BEHAVIOR_IN} transition, allowing more
flexibility than the {@link #CHANGE_BEHAVIOR_OUT_IN} by allowing other
transitions to be run sequentially or in parallel with these fades.

@see #setChangeBehavior(int)
"
      end

      attribute 2008631 "CHANGE_BEHAVIOR_IN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag specifying that the text changing animation should fade in the
end text into the affected target view(s). This transition is typically
used in conjunction with an earlier {@link #CHANGE_BEHAVIOR_OUT}
transition, possibly with other transitions running as well, such as
a sequence to fade out, then resize the view, then fade in.

@see #setChangeBehavior(int)
"
      end

      attribute 2008759 "CHANGE_BEHAVIOR_OUT_IN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag specifying that the text changing animation should first fade
out the original text completely and then fade in the
new text.

@see #setChangeBehavior(int)
"
      end

      classrelation 1980983 // sTransitionProperties (<unidirectional association>)
	relation 1980983 --->
	  a role_name "sTransitionProperties" multiplicity "[]" init_value " {
            PROPNAME_TEXT,
            PROPNAME_TEXT_SELECTION_START,
            PROPNAME_TEXT_SELECTION_END
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1980983 // sTransitionProperties (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      operation 4665527 "setChangeBehavior"
	public return_type class_ref 656183 // ChangeText
	nparams 1
	  param in name "changeBehavior" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the type of changing animation that will be run, one of
{@link #CHANGE_BEHAVIOR_KEEP}, {@link #CHANGE_BEHAVIOR_OUT},
{@link #CHANGE_BEHAVIOR_IN}, and {@link #CHANGE_BEHAVIOR_OUT_IN}.

@param changeBehavior The type of fading animation to use when this
transition is run.
@return this textChange object."
      end

      operation 4665655 "getTransitionProperties"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4665783 "getChangeBehavior"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of changing animation that will be run.

@return either {@link #CHANGE_BEHAVIOR_KEEP}, {@link #CHANGE_BEHAVIOR_OUT},
{@link #CHANGE_BEHAVIOR_IN}, or {@link #CHANGE_BEHAVIOR_OUT_IN}."
      end

      operation 4665911 "captureValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4666039 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4666167 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4666295 "createAnimator"
	public return_type class_ref 314807 // Animator
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4666423 "setSelection"
	private explicit_return_type "void"
	nparams 3
	  param inout name "editText" type class_ref 370615 // EditText
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 656311 "ChangeTransform"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This Transition captures scale and rotation for Views before and after the
scene change and animates those changes during the transition.

A change in parent is handled as well by capturing the transforms from
the parent before and after the scene change and animating those during the
transition."
      classrelation 1981111 // <generalisation>
	relation 1981111 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1981111 // <generalisation>
	  b parent class_ref 341303 // Transition
      end

      classrelation 1981239 // TAG (<unidirectional association>)
	relation 1981239 --->
	  a role_name "TAG" init_value " \"ChangeTransform\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1981239 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1981367 // PROPNAME_MATRIX (<unidirectional association>)
	relation 1981367 --->
	  a role_name "PROPNAME_MATRIX" init_value " \"android:changeTransform:matrix\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1981367 // PROPNAME_MATRIX (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1981495 // PROPNAME_TRANSFORMS (<unidirectional association>)
	relation 1981495 --->
	  a role_name "PROPNAME_TRANSFORMS" init_value " \"android:changeTransform:transforms\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1981495 // PROPNAME_TRANSFORMS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1981623 // PROPNAME_PARENT (<unidirectional association>)
	relation 1981623 --->
	  a role_name "PROPNAME_PARENT" init_value " \"android:changeTransform:parent\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1981623 // PROPNAME_PARENT (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1981751 // PROPNAME_PARENT_MATRIX (<unidirectional association>)
	relation 1981751 --->
	  a role_name "PROPNAME_PARENT_MATRIX" init_value " \"android:changeTransform:parentMatrix\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1981751 // PROPNAME_PARENT_MATRIX (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1981879 // PROPNAME_INTERMEDIATE_PARENT_MATRIX (<unidirectional association>)
	relation 1981879 --->
	  a role_name "PROPNAME_INTERMEDIATE_PARENT_MATRIX" init_value "
            \"android:changeTransform:intermediateParentMatrix\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1981879 // PROPNAME_INTERMEDIATE_PARENT_MATRIX (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1982007 // PROPNAME_INTERMEDIATE_MATRIX (<unidirectional association>)
	relation 1982007 --->
	  a role_name "PROPNAME_INTERMEDIATE_MATRIX" init_value "
            \"android:changeTransform:intermediateMatrix\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1982007 // PROPNAME_INTERMEDIATE_MATRIX (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1982135 // sTransitionProperties (<unidirectional association>)
	relation 1982135 --->
	  a role_name "sTransitionProperties" multiplicity "[]" init_value " {
            PROPNAME_MATRIX,
            PROPNAME_TRANSFORMS,
            PROPNAME_PARENT_MATRIX,
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1982135 // sTransitionProperties (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      class 656439 "PathAnimatorMatrix"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1983159 // mMatrix (<unidirectional association>)
	  relation 1983159 --->
	    a role_name "mMatrix" init_value " new Matrix()" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1983159 // mMatrix (<unidirectional association>)
	    b parent class_ref 141111 // Matrix
	end

	classrelation 1983287 // mView (<unidirectional association>)
	  relation 1983287 --->
	    a role_name "mView" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1983287 // mView (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	attribute 2010167 "mValues"
	  const_attribute private explicit_type "float"
	  multiplicity "[]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2010295 "mTranslationX"
	  private explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2010423 "mTranslationY"
	  private explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 4669623 "PathAnimatorMatrix"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "view" type class_ref 134455 // View
	    param inout name "values" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4669751 "setValues"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "values" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4669879 "setTranslation"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "translation" type class_ref 152247 // PointF
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4670007 "setAnimationMatrix"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4670135 "getMatrix"
	  public return_type class_ref 141111 // Matrix
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1982263 // NON_TRANSLATIONS_PROPERTY (<unidirectional association>)
	relation 1982263 --->
	  a role_name "NON_TRANSLATIONS_PROPERTY" init_value "
            new Property<PathAnimatorMatrix, float[]>(float[].class, \"nonTranslations\") {
                @Override
                public float[] get(PathAnimatorMatrix object) {
                    return null;
                }

                @Override
                public void set(PathAnimatorMatrix object, float[] value) {
                    object.setValues(value);
                }
            }" class_relation const_relation private
	    comment "
This property sets the animation matrix properties that are not translations.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<PathAnimatorMatrix, float[]> ${name}${value};
"
	    classrelation_ref 1982263 // NON_TRANSLATIONS_PROPERTY (<unidirectional association>)
	  b parent class_ref 149559 // Property
      end

      classrelation 1982391 // TRANSLATIONS_PROPERTY (<unidirectional association>)
	relation 1982391 --->
	  a role_name "TRANSLATIONS_PROPERTY" init_value "
            new Property<PathAnimatorMatrix, PointF>(PointF.class, \"translations\") {
                @Override
                public PointF get(PathAnimatorMatrix object) {
                    return null;
                }

                @Override
                public void set(PathAnimatorMatrix object, PointF value) {
                    object.setTranslation(value);
                }
            }" class_relation const_relation private
	    comment "
This property sets the translation animation matrix properties.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<PathAnimatorMatrix, PointF> ${name}${value};
"
	    classrelation_ref 1982391 // TRANSLATIONS_PROPERTY (<unidirectional association>)
	  b parent class_ref 149559 // Property
      end

      attribute 2008887 "mUseOverlay"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2009015 "mReparent"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1982519 // mTempMatrix (<unidirectional association>)
	relation 1982519 --->
	  a role_name "mTempMatrix" init_value " new Matrix()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1982519 // mTempMatrix (<unidirectional association>)
	  b parent class_ref 141111 // Matrix
      end

      operation 4666551 "ChangeTransform"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4666679 "ChangeTransform"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4666807 "getReparentWithOverlay"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether changes to parent should use an overlay or not. When the parent
change doesn't use an overlay, it affects the transforms of the child. The
default value is <code>true</code>.

<p>Note: when Overlays are not used when a parent changes, a view can be clipped when
it moves outside the bounds of its parent. Setting
{@link android.view.ViewGroup#setClipChildren(boolean)} and
{@link android.view.ViewGroup#setClipToPadding(boolean)} can help. Also, when
Overlays are not used and the parent is animating its location, the position of the
child view will be relative to its parent's final position, so it may appear to \"jump\"
at the beginning.</p>

@return <code>true</code> when a changed parent should execute the transition
inside the scene root's overlay or <code>false</code> if a parent change only
affects the transform of the transitioning view.
@attr ref android.R.styleable#ChangeTransform_reparentWithOverlay"
      end

      operation 4666935 "setReparentWithOverlay"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reparentWithOverlay" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether changes to parent should use an overlay or not. When the parent
change doesn't use an overlay, it affects the transforms of the child. The
default value is <code>true</code>.

<p>Note: when Overlays are not used when a parent changes, a view can be clipped when
it moves outside the bounds of its parent. Setting
{@link android.view.ViewGroup#setClipChildren(boolean)} and
{@link android.view.ViewGroup#setClipToPadding(boolean)} can help. Also, when
Overlays are not used and the parent is animating its location, the position of the
child view will be relative to its parent's final position, so it may appear to \"jump\"
at the beginning.</p>

@return <code>true</code> when a changed parent should execute the transition
inside the scene root's overlay or <code>false</code> if a parent change only
affects the transform of the transitioning view.
@attr ref android.R.styleable#ChangeTransform_reparentWithOverlay"
      end

      operation 4667063 "getReparent"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether parent changes will be tracked by the ChangeTransform. If parent
changes are tracked, then the transform will adjust to the transforms of the
different parents. If they aren't tracked, only the transforms of the transitioning
view will be tracked. Default is true.

@return whether parent changes will be tracked by the ChangeTransform.
@attr ref android.R.styleable#ChangeTransform_reparent"
      end

      operation 4667191 "setReparent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "reparent" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether parent changes will be tracked by the ChangeTransform. If parent
changes are tracked, then the transform will adjust to the transforms of the
different parents. If they aren't tracked, only the transforms of the transitioning
view will be tracked. Default is true.

@param reparent Set to true to track parent changes or false to only track changes
                of the transitioning view without considering the parent change.
@attr ref android.R.styleable#ChangeTransform_reparent"
      end

      operation 4667319 "getTransitionProperties"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4667447 "captureValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4667575 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4667703 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4667831 "createAnimator"
	public return_type class_ref 314807 // Animator
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4667959 "createTransformAnimator"
	private return_type class_ref 314551 // ObjectAnimator
	nparams 3
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	  param in name "handleParentChange" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4668087 "parentsMatch"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "startParent" type class_ref 134711 // ViewGroup
	  param inout name "endParent" type class_ref 134711 // ViewGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4668215 "createGhostView"
	private explicit_return_type "void"
	nparams 3
	  param in name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4668343 "setMatricesForParent"
	private explicit_return_type "void"
	nparams 2
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4668471 "setIdentityTransforms"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4668599 "setTransforms"
	class_operation private explicit_return_type "void"
	nparams 9
	  param inout name "view" type class_ref 134455 // View
	  param in name "translationX" explicit_type "float"
	  param in name "translationY" explicit_type "float"
	  param in name "translationZ" explicit_type "float"
	  param in name "scaleX" explicit_type "float"
	  param in name "scaleY" explicit_type "float"
	  param in name "rotationX" explicit_type "float"
	  param in name "rotationY" explicit_type "float"
	  param in name "rotationZ" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 656567 "Transforms"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2009143 "translationX"
	  const_attribute public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2009271 "translationY"
	  const_attribute public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2009399 "translationZ"
	  const_attribute public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2009527 "scaleX"
	  const_attribute public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2009655 "scaleY"
	  const_attribute public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2009783 "rotationX"
	  const_attribute public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2009911 "rotationY"
	  const_attribute public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2010039 "rotationZ"
	  const_attribute public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 4668727 "Transforms"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4668855 "restore"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4668983 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "that" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 656695 "GhostListener"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1982647 // <generalisation>
	  relation 1982647 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1982647 // <generalisation>
	    b parent class_ref 341687 // TransitionListenerAdapter
	end

	classrelation 1982775 // mView (<unidirectional association>)
	  relation 1982775 --->
	    a role_name "mView" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1982775 // mView (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	classrelation 1982903 // mStartView (<unidirectional association>)
	  relation 1982903 --->
	    a role_name "mStartView" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1982903 // mStartView (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	classrelation 1983031 // mGhostView (<unidirectional association>)
	  relation 1983031 --->
	    a role_name "mGhostView" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1983031 // mGhostView (<unidirectional association>)
	    b parent class_ref 146103 // GhostView
	end

	operation 4669111 "GhostListener"
	  public explicit_return_type ""
	  nparams 3
	    param inout name "view" type class_ref 134455 // View
	    param inout name "startView" type class_ref 134455 // View
	    param inout name "ghostView" type class_ref 146103 // GhostView
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4669239 "onTransitionEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4669367 "onTransitionPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4669495 "onTransitionResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 656823 "CircularPropagation"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A propagation that varies with the distance to the epicenter of the Transition
or center of the scene if no epicenter exists. When a View is visible in the
start of the transition, Views farther from the epicenter will transition
sooner than Views closer to the epicenter. When a View is not in the start
of the transition or is not visible at the start of the transition, it will
transition sooner when closer to the epicenter and later when farther from
the epicenter. This is the default TransitionPropagation used with
{@link android.transition.Explode}."
      classrelation 1983927 // <generalisation>
	relation 1983927 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1983927 // <generalisation>
	  b parent class_ref 656951 // VisibilityPropagation
      end

      classrelation 1984055 // TAG (<unidirectional association>)
	relation 1984055 --->
	  a role_name "TAG" init_value " \"CircularPropagation\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1984055 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 2010551 "mPropagationSpeed"
	private explicit_type "float"
	init_value " 3.0f"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4671415 "setPropagationSpeed"
	public explicit_return_type "void"
	nparams 1
	  param in name "propagationSpeed" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the speed at which transition propagation happens, relative to the duration of the
Transition. A <code>propagationSpeed</code> of 1 means that a View centered farthest from
the epicenter and View centered at the epicenter will have a difference
in start delay of approximately the duration of the Transition. A speed of 2 means the
start delay difference will be approximately half of the duration of the transition. A
value of 0 is illegal, but negative values will invert the propagation.

@param propagationSpeed The speed at which propagation occurs, relative to the duration
                        of the transition. A speed of 4 means it works 4 times as fast
                        as the duration of the transition. May not be 0."
      end

      operation 4671543 "getStartDelay"
	public explicit_return_type "long"
	nparams 4
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "transition" type class_ref 341303 // Transition
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4671671 "distance"
	class_operation private explicit_return_type "double"
	nparams 4
	  param in name "x1" explicit_type "float"
	  param in name "y1" explicit_type "float"
	  param in name "x2" explicit_type "float"
	  param in name "y2" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 656951 "VisibilityPropagation"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base class for <code>TransitionPropagation</code>s that care about
View Visibility and the center position of the View."
      classrelation 1983415 // <generalisation>
	relation 1983415 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1983415 // <generalisation>
	  b parent class_ref 342455 // TransitionPropagation
      end

      classrelation 1983543 // PROPNAME_VISIBILITY (<unidirectional association>)
	relation 1983543 --->
	  a role_name "PROPNAME_VISIBILITY" init_value " \"android:visibilityPropagation:visibility\"" class_relation const_relation private
	    comment "
The property key used for {@link android.view.View#getVisibility()}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1983543 // PROPNAME_VISIBILITY (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1983671 // PROPNAME_VIEW_CENTER (<unidirectional association>)
	relation 1983671 --->
	  a role_name "PROPNAME_VIEW_CENTER" init_value " \"android:visibilityPropagation:center\"" class_relation const_relation private
	    comment "
The property key used for the center of the View in screen coordinates. This is an
int[2] with the index 0 taking the x coordinate and index 1 taking the y coordinate.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1983671 // PROPNAME_VIEW_CENTER (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1983799 // VISIBILITY_PROPAGATION_VALUES (<unidirectional association>)
	relation 1983799 --->
	  a role_name "VISIBILITY_PROPAGATION_VALUES" multiplicity "[]" init_value " {
            PROPNAME_VISIBILITY,
            PROPNAME_VIEW_CENTER,
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1983799 // VISIBILITY_PROPAGATION_VALUES (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      operation 4670647 "captureValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "values" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4670775 "getPropagationProperties"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4670903 "getViewVisibility"
	public explicit_return_type "int"
	nparams 1
	  param inout name "values" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@link android.view.View#getVisibility()} for the View at the time the values
were captured.
@param values The TransitionValues captured at the start or end of the Transition.
@return {@link android.view.View#getVisibility()} for the View at the time the values
were captured."
      end

      operation 4671031 "getViewX"
	public explicit_return_type "int"
	nparams 1
	  param inout name "values" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the View's center x coordinate, relative to the screen, at the time the values
were captured.
@param values The TransitionValues captured at the start or end of the Transition.
@return the View's center x coordinate, relative to the screen, at the time the values
were captured."
      end

      operation 4671159 "getViewY"
	public explicit_return_type "int"
	nparams 1
	  param inout name "values" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the View's center y coordinate, relative to the screen, at the time the values
were captured.
@param values The TransitionValues captured at the start or end of the Transition.
@return the View's center y coordinate, relative to the screen, at the time the values
were captured."
      end

      operation 4671287 "getViewCoordinate"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "values" type class_ref 342199 // TransitionValues
	  param in name "coordinateIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 657079 "Crossfade"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This transition captures bitmap representations of target views before and
after the scene change and fades between them.

<p>Note: This transition is not compatible with {@link TextureView}
or {@link SurfaceView}.</p>

@hide"
      classrelation 1984183 // <generalisation>
	relation 1984183 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1984183 // <generalisation>
	  b parent class_ref 341303 // Transition
      end

      classrelation 1984311 // LOG_TAG (<unidirectional association>)
	relation 1984311 --->
	  a role_name "LOG_TAG" init_value " \"Crossfade\"" class_relation const_relation private
	    comment " TODO: Add a hook that lets a Transition call user code to query whether it should run on
 a given target view. This would save bitmap comparisons in this transition, for example.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1984311 // LOG_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1984439 // PROPNAME_BITMAP (<unidirectional association>)
	relation 1984439 --->
	  a role_name "PROPNAME_BITMAP" init_value " \"android:crossfade:bitmap\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1984439 // PROPNAME_BITMAP (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1984567 // PROPNAME_DRAWABLE (<unidirectional association>)
	relation 1984567 --->
	  a role_name "PROPNAME_DRAWABLE" init_value " \"android:crossfade:drawable\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1984567 // PROPNAME_DRAWABLE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1984695 // PROPNAME_BOUNDS (<unidirectional association>)
	relation 1984695 --->
	  a role_name "PROPNAME_BOUNDS" init_value " \"android:crossfade:bounds\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1984695 // PROPNAME_BOUNDS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1984823 // sRectEvaluator (<unidirectional association>)
	relation 1984823 --->
	  a role_name "sRectEvaluator" init_value " new RectEvaluator()" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1984823 // sRectEvaluator (<unidirectional association>)
	  b parent class_ref 321719 // RectEvaluator
      end

      attribute 2010679 "mFadeBehavior"
	private explicit_type "int"
	init_value " FADE_BEHAVIOR_REVEAL"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2010807 "mResizeBehavior"
	private explicit_type "int"
	init_value " RESIZE_BEHAVIOR_SCALE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2010935 "FADE_BEHAVIOR_CROSSFADE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag specifying that the fading animation should cross-fade
between the old and new representation of all affected target
views. This means that the old representation will fade out
while the new one fades in. This effect may work well on views
without solid backgrounds, such as TextViews.

@see #setFadeBehavior(int)
"
      end

      attribute 2011063 "FADE_BEHAVIOR_REVEAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag specifying that the fading animation should reveal the
new representation of all affected target views. This means
that the old representation will fade out, gradually
revealing the new representation, which remains opaque
the whole time. This effect may work well on views
with solid backgrounds, such as ImageViews.

@see #setFadeBehavior(int)
"
      end

      attribute 2011191 "FADE_BEHAVIOR_OUT_IN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag specifying that the fading animation should first fade
out the original representation completely and then fade in the
new one. This effect may be more suitable than the other
fade behaviors for views with.

@see #setFadeBehavior(int)
"
      end

      attribute 2011319 "RESIZE_BEHAVIOR_NONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag specifying that the transition should not animate any
changes in size between the old and new target views.
This means that no scaling will take place as a result of
this transition

@see #setResizeBehavior(int)
"
      end

      attribute 2011447 "RESIZE_BEHAVIOR_SCALE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag specifying that the transition should animate any
changes in size between the old and new target views.
This means that the animation will scale the start/end
representations of affected views from the starting size
to the ending size over the course of the animation.
This effect may work well on images, but is not recommended
for text.

@see #setResizeBehavior(int)
"
      end

      operation 4671799 "setFadeBehavior"
	public return_type class_ref 657079 // Crossfade
	nparams 1
	  param in name "fadeBehavior" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TODO: Add fade/resize behaviors to xml resources

Sets the type of fading animation that will be run, one of
{@link #FADE_BEHAVIOR_CROSSFADE} and {@link #FADE_BEHAVIOR_REVEAL}.

@param fadeBehavior The type of fading animation to use when this
transition is run."
      end

      operation 4671927 "getFadeBehavior"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the fading behavior of the animation.

@return This crossfade object.
@see #setFadeBehavior(int)"
      end

      operation 4672055 "setResizeBehavior"
	public return_type class_ref 657079 // Crossfade
	nparams 1
	  param in name "resizeBehavior" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the type of resizing behavior that will be used during the
transition animation, one of {@link #RESIZE_BEHAVIOR_NONE} and
{@link #RESIZE_BEHAVIOR_SCALE}.

@param resizeBehavior The type of resizing behavior to use when this
transition is run."
      end

      operation 4672183 "getResizeBehavior"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the resizing behavior of the animation.

@return This crossfade object.
@see #setResizeBehavior(int)"
      end

      operation 4672311 "createAnimator"
	public return_type class_ref 314807 // Animator
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4672439 "captureValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4672567 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4672695 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 657207 "Explode"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This transition tracks changes to the visibility of target views in the
start and end scenes and moves views in or out from the edges of the
scene. Visibility is determined by both the
{@link View#setVisibility(int)} state of the view as well as whether it
is parented in the current view hierarchy. Disappearing Views are
limited as described in {@link Visibility#onDisappear(android.view.ViewGroup,
TransitionValues, int, TransitionValues, int)}.
<p>Views move away from the focal View or the center of the Scene if
no epicenter was provided.</p>"
      classrelation 1986487 // <generalisation>
	relation 1986487 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1986487 // <generalisation>
	  b parent class_ref 657335 // Visibility
      end

      classrelation 1986615 // sDecelerate (<unidirectional association>)
	relation 1986615 --->
	  a role_name "sDecelerate" init_value " new DecelerateInterpolator()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1986615 // sDecelerate (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 1986743 // sAccelerate (<unidirectional association>)
	relation 1986743 --->
	  a role_name "sAccelerate" init_value " new AccelerateInterpolator()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1986743 // sAccelerate (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 1986871 // TAG (<unidirectional association>)
	relation 1986871 --->
	  a role_name "TAG" init_value " \"Explode\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1986871 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1986999 // PROPNAME_SCREEN_BOUNDS (<unidirectional association>)
	relation 1986999 --->
	  a role_name "PROPNAME_SCREEN_BOUNDS" init_value " \"android:explode:screenBounds\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1986999 // PROPNAME_SCREEN_BOUNDS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 2013111 "mTempLoc"
	private explicit_type "int"
	multiplicity "[]"
	init_value " new int[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4676535 "Explode"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4676663 "Explode"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4676791 "captureValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4676919 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4677047 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4677175 "onAppear"
	public return_type class_ref 314807 // Animator
	nparams 4
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "view" type class_ref 134455 // View
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4677303 "onDisappear"
	public return_type class_ref 314807 // Animator
	nparams 4
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "view" type class_ref 134455 // View
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4677431 "calculateOut"
	private explicit_return_type "void"
	nparams 3
	  param inout name "sceneRoot" type class_ref 134455 // View
	  param inout name "bounds" type class_ref 135351 // Rect
	  param inout name "outVector" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4677559 "calculateMaxDistance"
	class_operation private explicit_return_type "double"
	nparams 3
	  param inout name "sceneRoot" type class_ref 134455 // View
	  param in name "focalX" explicit_type "int"
	  param in name "focalY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 657335 "Visibility"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This transition tracks changes to the visibility of target views in the
start and end scenes. Visibility is determined not just by the
{@link View#setVisibility(int)} state of views, but also whether
views exist in the current view hierarchy. The class is intended to be a
utility for subclasses such as {@link Fade}, which use this visibility
information to determine the specific animations to run when visibility
changes occur. Subclasses should implement one or both of the methods
{@link #onAppear(ViewGroup, TransitionValues, int, TransitionValues, int)},
{@link #onDisappear(ViewGroup, TransitionValues, int, TransitionValues, int)} or
{@link #onAppear(ViewGroup, View, TransitionValues, TransitionValues)},
{@link #onDisappear(ViewGroup, View, TransitionValues, TransitionValues)}."
      classrelation 1984951 // <generalisation>
	relation 1984951 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1984951 // <generalisation>
	  b parent class_ref 341303 // Transition
      end

      classrelation 1985079 // PROPNAME_VISIBILITY (<unidirectional association>)
	relation 1985079 --->
	  a role_name "PROPNAME_VISIBILITY" init_value " \"android:visibility:visibility\"" class_relation const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1985079 // PROPNAME_VISIBILITY (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1985207 // PROPNAME_PARENT (<unidirectional association>)
	relation 1985207 --->
	  a role_name "PROPNAME_PARENT" init_value " \"android:visibility:parent\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1985207 // PROPNAME_PARENT (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1985335 // PROPNAME_SCREEN_LOCATION (<unidirectional association>)
	relation 1985335 --->
	  a role_name "PROPNAME_SCREEN_LOCATION" init_value " \"android:visibility:screenLocation\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1985335 // PROPNAME_SCREEN_LOCATION (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      class 657463 "VisibilityMode"
	visibility package stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@Retention(RetentionPolicy.SOURCE)
@IntDef(flag=true, value={MODE_IN, MODE_OUT})
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 2011575 "MODE_IN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Mode used in {@link #setMode(int)} to make the transition
operate on targets that are appearing. Maybe be combined with
{@link #MODE_OUT} to target Visibility changes both in and out.
"
      end

      attribute 2011703 "MODE_OUT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Mode used in {@link #setMode(int)} to make the transition
operate on targets that are disappearing. Maybe be combined with
{@link #MODE_IN} to target Visibility changes both in and out.
"
      end

      classrelation 1985463 // sTransitionProperties (<unidirectional association>)
	relation 1985463 --->
	  a role_name "sTransitionProperties" multiplicity "[]" init_value " {
            PROPNAME_VISIBILITY,
            PROPNAME_PARENT,
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1985463 // sTransitionProperties (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      class 657591 "VisibilityInfo"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 2011831 "visibilityChange"
	  package explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2011959 "fadeIn"
	  package explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2012087 "startVisibility"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2012215 "endVisibility"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1985591 // startParent (<unidirectional association>)
	  relation 1985591 --->
	    a role_name "startParent" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1985591 // startParent (<unidirectional association>)
	    b parent class_ref 134711 // ViewGroup
	end

	classrelation 1985719 // endParent (<unidirectional association>)
	  relation 1985719 --->
	    a role_name "endParent" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1985719 // endParent (<unidirectional association>)
	    b parent class_ref 134711 // ViewGroup
	end
      end

      attribute 2012343 "mMode"
	private explicit_type "int"
	init_value " MODE_IN | MODE_OUT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2012471 "mSuppressLayout"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4672823 "Visibility"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4672951 "Visibility"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4673079 "setSuppressLayout"
	public explicit_return_type "void"
	nparams 1
	  param inout name "suppress" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This tells the Visibility transition to suppress layout during the transition and release
the suppression after the transition.
@hide"
      end

      operation 4673207 "setMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@VisibilityMode ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the transition to support appearing and/or disappearing Views, depending
on <code>mode</code>.

@param mode The behavior supported by this transition, a combination of
            {@link #MODE_IN} and {@link #MODE_OUT}.
@attr ref android.R.styleable#VisibilityTransition_transitionVisibilityMode"
      end

      operation 4673335 "getMode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@VisibilityMode
"
	
	
	
	comment "Returns whether appearing and/or disappearing Views are supported.

Returns whether appearing and/or disappearing Views are supported. A combination of
        {@link #MODE_IN} and {@link #MODE_OUT}.
@attr ref android.R.styleable#VisibilityTransition_transitionVisibilityMode"
      end

      operation 4673463 "getTransitionProperties"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4673591 "captureValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4673719 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4673847 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4673975 "isVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "values" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the view is 'visible' according to the given values
object. This is determined by testing the same properties in the values
object that are used to determine whether the object is appearing or
disappearing in the {@link
Transition#createAnimator(ViewGroup, TransitionValues, TransitionValues)}
method. This method can be called by, for example, subclasses that want
to know whether the object is visible in the same way that Visibility
determines it for the actual animation.

@param values The TransitionValues object that holds the information by
which visibility is determined.
@return True if the view reference by <code>values</code> is visible,
false otherwise."
      end

      operation 4674103 "getVisibilityChangeInfo"
	class_operation private return_type class_ref 657591 // VisibilityInfo
	nparams 2
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4674231 "createAnimator"
	public return_type class_ref 314807 // Animator
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4674359 "onAppear"
	public return_type class_ref 314807 // Animator
	nparams 5
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param in name "startVisibility" explicit_type "int"
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	  param in name "endVisibility" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation of this method calls
{@link #onAppear(ViewGroup, View, TransitionValues, TransitionValues)}.
Subclasses should override this method or
{@link #onAppear(ViewGroup, View, TransitionValues, TransitionValues)}.
if they need to create an Animator when targets appear.
The method should only be called by the Visibility class; it is
not intended to be called from external classes.

@param sceneRoot The root of the transition hierarchy
@param startValues The target values in the start scene
@param startVisibility The target visibility in the start scene
@param endValues The target values in the end scene
@param endVisibility The target visibility in the end scene
@return An Animator to be started at the appropriate time in the
overall transition for this scene change. A null value means no animation
should be run."
      end

      operation 4674487 "onAppear"
	public return_type class_ref 314807 // Animator
	nparams 4
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "view" type class_ref 134455 // View
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation of this method returns a null Animator. Subclasses should
override this method to make targets appear with the desired transition. The
method should only be called from
{@link #onAppear(ViewGroup, TransitionValues, int, TransitionValues, int)}.

@param sceneRoot The root of the transition hierarchy
@param view The View to make appear. This will be in the target scene's View hierarchy and
            will be VISIBLE.
@param startValues The target values in the start scene
@param endValues The target values in the end scene
@return An Animator to be started at the appropriate time in the
overall transition for this scene change. A null value means no animation
should be run."
      end

      operation 4674615 "onDisappear"
	public return_type class_ref 314807 // Animator
	nparams 5
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param in name "startVisibility" explicit_type "int"
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	  param in name "endVisibility" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subclasses should override this method or
{@link #onDisappear(ViewGroup, View, TransitionValues, TransitionValues)}
if they need to create an Animator when targets disappear.
The method should only be called by the Visibility class; it is
not intended to be called from external classes.
<p>
The default implementation of this method attempts to find a View to use to call
{@link #onDisappear(ViewGroup, View, TransitionValues, TransitionValues)},
based on the situation of the View in the View hierarchy. For example,
if a View was simply removed from its parent, then the View will be added
into a {@link android.view.ViewGroupOverlay} and passed as the <code>view</code>
parameter in {@link #onDisappear(ViewGroup, View, TransitionValues, TransitionValues)}.
If a visible View is changed to be {@link View#GONE} or {@link View#INVISIBLE},
then it can be used as the <code>view</code> and the visibility will be changed
to {@link View#VISIBLE} for the duration of the animation. However, if a View
is in a hierarchy which is also altering its visibility, the situation can be
more complicated. In general, if a view that is no longer in the hierarchy in
the end scene still has a parent (so its parent hierarchy was removed, but it
was not removed from its parent), then it will be left alone to avoid side-effects from
improperly removing it from its parent. The only exception to this is if
the previous {@link Scene} was {@link Scene#getSceneForLayout(ViewGroup, int,
android.content.Context) created from a layout resource file}, then it is considered
safe to un-parent the starting scene view in order to make it disappear.</p>

@param sceneRoot The root of the transition hierarchy
@param startValues The target values in the start scene
@param startVisibility The target visibility in the start scene
@param endValues The target values in the end scene
@param endVisibility The target visibility in the end scene
@return An Animator to be started at the appropriate time in the
overall transition for this scene change. A null value means no animation
should be run."
      end

      operation 4674743 "isTransitionRequired"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "newValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4674871 "onDisappear"
	public return_type class_ref 314807 // Animator
	nparams 4
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "view" type class_ref 134455 // View
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation of this method returns a null Animator. Subclasses should
override this method to make targets disappear with the desired transition. The
method should only be called from
{@link #onDisappear(ViewGroup, TransitionValues, int, TransitionValues, int)}.

@param sceneRoot The root of the transition hierarchy
@param view The View to make disappear. This will be in the target scene's View
            hierarchy or in an {@link android.view.ViewGroupOverlay} and will be
            VISIBLE.
@param startValues The target values in the start scene
@param endValues The target values in the end scene
@return An Animator to be started at the appropriate time in the
overall transition for this scene change. A null value means no animation
should be run."
      end

      class 657719 "DisappearListener"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1985847 // <generalisation>
	  relation 1985847 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1985847 // <generalisation>
	    b parent class_ref 341687 // TransitionListenerAdapter
	end

	classrelation 1985975 // <realization>
	  relation 1985975 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1985975 // <realization>
	    b parent class_ref 314935 // AnimatorListener
	end

	classrelation 1986103 // <realization>
	  relation 1986103 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1986103 // <realization>
	    b parent class_ref 315063 // AnimatorPauseListener
	end

	classrelation 1986231 // mView (<unidirectional association>)
	  relation 1986231 --->
	    a role_name "mView" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1986231 // mView (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	attribute 2012599 "mFinalVisibility"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1986359 // mParent (<unidirectional association>)
	  relation 1986359 --->
	    a role_name "mParent" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1986359 // mParent (<unidirectional association>)
	    b parent class_ref 134711 // ViewGroup
	end

	attribute 2012727 "mSuppressLayout"
	  const_attribute private explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2012855 "mLayoutSuppressed"
	  private explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2012983 "mCanceled"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 4674999 "DisappearListener"
	  public explicit_return_type ""
	  nparams 3
	    param inout name "view" type class_ref 134455 // View
	    param in name "finalVisibility" explicit_type "int"
	    param inout name "suppressLayout" explicit_type "boolean"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4675127 "onAnimationPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4675255 "onAnimationResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4675383 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4675511 "onAnimationRepeat"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4675639 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4675767 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4675895 "onTransitionEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4676023 "onTransitionPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4676151 "onTransitionResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4676279 "hideViewWhenNotCanceled"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4676407 "suppressLayout"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "suppress" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 657847 "Fade"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This transition tracks changes to the visibility of target views in the
start and end scenes and fades views in or out when they become visible
or non-visible. Visibility is determined by both the
{@link View#setVisibility(int)} state of the view as well as whether it
is parented in the current view hierarchy.

<p>The ability of this transition to fade out a particular view, and the
way that that fading operation takes place, is based on
the situation of the view in the view hierarchy. For example, if a view was
simply removed from its parent, then the view will be added into a {@link
android.view.ViewGroupOverlay} while fading. If a visible view is
changed to be {@link View#GONE} or {@link View#INVISIBLE}, then the
visibility will be changed to {@link View#VISIBLE} for the duration of
the animation. However, if a view is in a hierarchy which is also altering
its visibility, the situation can be more complicated. In general, if a
view that is no longer in the hierarchy in the end scene still has a
parent (so its parent hierarchy was removed, but it was not removed from
its parent), then it will be left alone to avoid side-effects from
improperly removing it from its parent. The only exception to this is if
the previous {@link Scene} was
{@link Scene#getSceneForLayout(android.view.ViewGroup, int, android.content.Context)
created from a layout resource file}, then it is considered safe to un-parent
the starting scene view in order to fade it out.</p>

<p>A Fade transition can be described in a resource file by using the
tag <code>fade</code>, along with the standard
attributes of {@link android.R.styleable#Fade} and
{@link android.R.styleable#Transition}.</p>"
      classrelation 1987127 // <generalisation>
	relation 1987127 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1987127 // <generalisation>
	  b parent class_ref 657335 // Visibility
      end

      classrelation 1987255 // PROPNAME_TRANSITION_ALPHA (<unidirectional association>)
	relation 1987255 --->
	  a role_name "PROPNAME_TRANSITION_ALPHA" init_value " \"android:fade:transitionAlpha\"" class_relation const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1987255 // PROPNAME_TRANSITION_ALPHA (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 2013239 "DBG"
	class_attribute private explicit_type "boolean"
	init_value " Transition.DBG && false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1987383 // LOG_TAG (<unidirectional association>)
	relation 1987383 --->
	  a role_name "LOG_TAG" init_value " \"Fade\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1987383 // LOG_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 2013367 "IN"
	class_attribute const_attribute public explicit_type "int"
	init_value " Visibility.MODE_IN"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Fading mode used in {@link #Fade(int)} to make the transition
operate on targets that are appearing. Maybe be combined with
{@link #OUT} to fade both in and out. Equivalent to
{@link Visibility#MODE_IN}.
"
      end

      attribute 2013495 "OUT"
	class_attribute const_attribute public explicit_type "int"
	init_value " Visibility.MODE_OUT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Fading mode used in {@link #Fade(int)} to make the transition
operate on targets that are disappearing. Maybe be combined with
{@link #IN} to fade both in and out. Equivalent to
{@link Visibility#MODE_OUT}.
"
      end

      operation 4677687 "Fade"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Fade transition that will fade targets in and out."
      end

      operation 4677815 "Fade"
	public explicit_return_type ""
	nparams 1
	  param in name "fadingMode" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Fade transition that will fade targets in
and/or out, according to the value of fadingMode.

@param fadingMode The behavior of this transition, a combination of
{@link #IN} and {@link #OUT}."
      end

      operation 4677943 "Fade"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4678071 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4678199 "createAnimation"
	private return_type class_ref 314807 // Animator
	nparams 3
	  param in name "view" type class_ref 134455 // View
	  param in name "startAlpha" explicit_type "float"
	  param in name "endAlpha" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility method to handle creating and running the Animator."
      end

      operation 4678327 "onAppear"
	public return_type class_ref 314807 // Animator
	nparams 4
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "view" type class_ref 134455 // View
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4678455 "onDisappear"
	public return_type class_ref 314807 // Animator
	nparams 4
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param in name "view" type class_ref 134455 // View
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, final ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4678583 "getStartAlpha"
	class_operation private explicit_return_type "float"
	nparams 2
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param in name "fallbackValue" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 657975 "FadeAnimatorListener"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1987511 // <generalisation>
	  relation 1987511 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1987511 // <generalisation>
	    b parent class_ref 316727 // AnimatorListenerAdapter
	end

	classrelation 1987639 // mView (<unidirectional association>)
	  relation 1987639 --->
	    a role_name "mView" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1987639 // mView (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	attribute 2013623 "mLayerTypeChanged"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 4678711 "FadeAnimatorListener"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4678839 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animator" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4678967 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animator" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 658103 "PatternPathMotion"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A PathMotion that takes a Path pattern and applies it to the separation between two points.
The starting point of the Path will be moved to the origin and the end point will be scaled
and rotated so that it matches with the target end point.
<p>This may be used in XML as an element inside a transition.</p>
<pre>{@code
<changeBounds>
    <patternPathMotion android:patternPathData=\"M0 0 L0 100 L100 100\"/>
</changeBounds>}
</pre>"
      classrelation 1987767 // <generalisation>
	relation 1987767 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1987767 // <generalisation>
	  b parent class_ref 341815 // PathMotion
      end

      classrelation 1987895 // mOriginalPatternPath (<unidirectional association>)
	relation 1987895 --->
	  a role_name "mOriginalPatternPath" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1987895 // mOriginalPatternPath (<unidirectional association>)
	  b parent class_ref 272823 // Path
      end

      classrelation 1988023 // mPatternPath (<unidirectional association>)
	relation 1988023 --->
	  a role_name "mPatternPath" init_value " new Path()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1988023 // mPatternPath (<unidirectional association>)
	  b parent class_ref 272823 // Path
      end

      classrelation 1988151 // mTempMatrix (<unidirectional association>)
	relation 1988151 --->
	  a role_name "mTempMatrix" init_value " new Matrix()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1988151 // mTempMatrix (<unidirectional association>)
	  b parent class_ref 141111 // Matrix
      end

      operation 4679095 "PatternPathMotion"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a PatternPathMotion with a straight-line pattern."
      end

      operation 4679223 "PatternPathMotion"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4679351 "PatternPathMotion"
	public explicit_return_type ""
	nparams 1
	  param inout name "patternPath" type class_ref 272823 // Path
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a PatternPathMotion with the Path defining a pattern of motion between two
coordinates. The pattern will be translated, rotated, and scaled to fit between the start
and end points. The pattern must not be empty and must have the end point differ from the
start point.

@param patternPath A Path to be used as a pattern for two-dimensional motion."
      end

      operation 4679479 "getPatternPath"
	public return_type class_ref 272823 // Path
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Path defining a pattern of motion between two coordinates.
The pattern will be translated, rotated, and scaled to fit between the start and end points.
The pattern must not be empty and must have the end point differ from the start point.

@return the Path defining a pattern of motion between two coordinates.
@attr ref android.R.styleable#PatternPathMotion_patternPathData"
      end

      operation 4679607 "setPatternPath"
	public explicit_return_type "void"
	nparams 1
	  param inout name "patternPath" type class_ref 272823 // Path
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the Path defining a pattern of motion between two coordinates.
The pattern will be translated, rotated, and scaled to fit between the start and end points.
The pattern must not be empty and must have the end point differ from the start point.

@param patternPath A Path to be used as a pattern for two-dimensional motion.
@attr ref android.R.styleable#PatternPathMotion_patternPathData"
      end

      operation 4679735 "getPath"
	public return_type class_ref 272823 // Path
	nparams 4
	  param in name "startX" explicit_type "float"
	  param in name "startY" explicit_type "float"
	  param in name "endX" explicit_type "float"
	  param in name "endY" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 658231 "Recolor"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This transition tracks changes during scene changes to the
{@link View#setBackground(android.graphics.drawable.Drawable) background}
property of its target views (when the background is a
{@link ColorDrawable}, as well as the
{@link TextView#setTextColor(android.content.res.ColorStateList)
color} of the text for target TextViews. If the color changes between
scenes, the color change is animated.

@hide"
      classrelation 1988279 // <generalisation>
	relation 1988279 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1988279 // <generalisation>
	  b parent class_ref 341303 // Transition
      end

      classrelation 1988407 // PROPNAME_BACKGROUND (<unidirectional association>)
	relation 1988407 --->
	  a role_name "PROPNAME_BACKGROUND" init_value " \"android:recolor:background\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1988407 // PROPNAME_BACKGROUND (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1988535 // PROPNAME_TEXT_COLOR (<unidirectional association>)
	relation 1988535 --->
	  a role_name "PROPNAME_TEXT_COLOR" init_value " \"android:recolor:textColor\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1988535 // PROPNAME_TEXT_COLOR (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      operation 4679863 "Recolor"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4679991 "Recolor"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4680119 "captureValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4680247 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4680375 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4680503 "createAnimator"
	public return_type class_ref 314807 // Animator
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 658359 "Rotate"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This transition captures the rotation property of targets before and after
the scene change and animates any changes.

@hide"
      classrelation 1988663 // <generalisation>
	relation 1988663 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1988663 // <generalisation>
	  b parent class_ref 341303 // Transition
      end

      classrelation 1988791 // PROPNAME_ROTATION (<unidirectional association>)
	relation 1988791 --->
	  a role_name "PROPNAME_ROTATION" init_value " \"android:rotate:rotation\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1988791 // PROPNAME_ROTATION (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      operation 4680631 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4680759 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4680887 "createAnimator"
	public return_type class_ref 314807 // Animator
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 658487 "SidePropagation"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <code>TransitionPropagation</code> that propagates based on the distance to the side
and, orthogonally, the distance to epicenter. If the transitioning View is visible in
the start of the transition, then it will transition sooner when closer to the side and
later when farther. If the view is not visible in the start of the transition, then
it will transition later when closer to the side and sooner when farther from the edge.
This is the default TransitionPropagation used with {@link android.transition.Slide}."
      classrelation 1989303 // <generalisation>
	relation 1989303 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1989303 // <generalisation>
	  b parent class_ref 656951 // VisibilityPropagation
      end

      classrelation 1989431 // TAG (<unidirectional association>)
	relation 1989431 --->
	  a role_name "TAG" init_value " \"SlidePropagation\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1989431 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 2014135 "mPropagationSpeed"
	private explicit_type "float"
	init_value " 3.0f"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2014263 "mSide"
	private explicit_type "int"
	init_value " Gravity.BOTTOM"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4682679 "setSide"
	public explicit_return_type "void"
	nparams 1
	  param in name "side" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@GravityFlag ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the side that is used to calculate the transition propagation. If the transitioning
View is visible in the start of the transition, then it will transition sooner when
closer to the side and later when farther. If the view is not visible in the start of
the transition, then it will transition later when closer to the side and sooner when
farther from the edge. The default is {@link Gravity#BOTTOM}.

@param side The side that is used to calculate the transition propagation. Must be one of
            {@link Gravity#LEFT}, {@link Gravity#TOP}, {@link Gravity#RIGHT},
            {@link Gravity#BOTTOM}, {@link Gravity#START}, or {@link Gravity#END}."
      end

      operation 4682807 "setPropagationSpeed"
	public explicit_return_type "void"
	nparams 1
	  param in name "propagationSpeed" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the speed at which transition propagation happens, relative to the duration of the
Transition. A <code>propagationSpeed</code> of 1 means that a View centered at the side
set in {@link #setSide(int)} and View centered at the opposite edge will have a difference
in start delay of approximately the duration of the Transition. A speed of 2 means the
start delay difference will be approximately half of the duration of the transition. A
value of 0 is illegal, but negative values will invert the propagation.

@param propagationSpeed The speed at which propagation occurs, relative to the duration
                        of the transition. A speed of 4 means it works 4 times as fast
                        as the duration of the transition. May not be 0."
      end

      operation 4682935 "getStartDelay"
	public explicit_return_type "long"
	nparams 4
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "transition" type class_ref 341303 // Transition
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4683063 "distance"
	private explicit_return_type "int"
	nparams 9
	  param inout name "sceneRoot" type class_ref 134455 // View
	  param in name "viewX" explicit_type "int"
	  param in name "viewY" explicit_type "int"
	  param in name "epicenterX" explicit_type "int"
	  param in name "epicenterY" explicit_type "int"
	  param in name "left" explicit_type "int"
	  param in name "top" explicit_type "int"
	  param in name "right" explicit_type "int"
	  param in name "bottom" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4683191 "getMaxDistance"
	private explicit_return_type "int"
	nparams 1
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 658615 "Slide"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This transition tracks changes to the visibility of target views in the
start and end scenes and moves views in or out from one of the edges of the
scene. Visibility is determined by both the
{@link View#setVisibility(int)} state of the view as well as whether it
is parented in the current view hierarchy. Disappearing Views are
limited as described in {@link Visibility#onDisappear(android.view.ViewGroup,
TransitionValues, int, TransitionValues, int)}."
      classrelation 1989559 // <generalisation>
	relation 1989559 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1989559 // <generalisation>
	  b parent class_ref 657335 // Visibility
      end

      classrelation 1989687 // TAG (<unidirectional association>)
	relation 1989687 --->
	  a role_name "TAG" init_value " \"Slide\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1989687 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1989815 // sDecelerate (<unidirectional association>)
	relation 1989815 --->
	  a role_name "sDecelerate" init_value " new DecelerateInterpolator()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1989815 // sDecelerate (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 1989943 // sAccelerate (<unidirectional association>)
	relation 1989943 --->
	  a role_name "sAccelerate" init_value " new AccelerateInterpolator()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1989943 // sAccelerate (<unidirectional association>)
	  b parent class_ref 315319 // TimeInterpolator
      end

      classrelation 1990071 // PROPNAME_SCREEN_POSITION (<unidirectional association>)
	relation 1990071 --->
	  a role_name "PROPNAME_SCREEN_POSITION" init_value " \"android:slide:screenPosition\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1990071 // PROPNAME_SCREEN_POSITION (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      class 658743 "CalculateSlide"
	visibility private stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 4683319 "getGoneX"
	  public explicit_return_type "float"
	  nparams 3
	    param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	    param inout name "view" type class_ref 134455 // View
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns the translation value for view when it goes out of the scene "
	end

	operation 4683447 "getGoneY"
	  public explicit_return_type "float"
	  nparams 3
	    param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	    param inout name "view" type class_ref 134455 // View
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns the translation value for view when it goes out of the scene "
	end
      end

      classrelation 1990199 // mSlideCalculator (<unidirectional association>)
	relation 1990199 --->
	  a role_name "mSlideCalculator" init_value " sCalculateBottom" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1990199 // mSlideCalculator (<unidirectional association>)
	  b parent class_ref 658743 // CalculateSlide
      end

      attribute 2014391 "mSlideEdge"
	private explicit_type "int"
	init_value " Gravity.BOTTOM"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@GravityFlag
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2014519 "mSlideFraction"
	private explicit_type "float"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 658871 "GravityFlag"
	visibility public stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@Retention(RetentionPolicy.SOURCE)
@IntDef({Gravity.LEFT, Gravity.TOP, Gravity.RIGHT, Gravity.BOTTOM, Gravity.START, Gravity.END})
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 658999 "CalculateSlideHorizontal"
	abstract visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1990327 // <realization>
	  relation 1990327 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1990327 // <realization>
	    b parent class_ref 658743 // CalculateSlide
	end

	operation 4683575 "getGoneY"
	  public explicit_return_type "float"
	  nparams 3
	    param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	    param inout name "view" type class_ref 134455 // View
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 659127 "CalculateSlideVertical"
	abstract visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1990455 // <realization>
	  relation 1990455 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1990455 // <realization>
	    b parent class_ref 658743 // CalculateSlide
	end

	operation 4683703 "getGoneX"
	  public explicit_return_type "float"
	  nparams 3
	    param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	    param inout name "view" type class_ref 134455 // View
	    param in name "fraction" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 1990583 // sCalculateLeft (<unidirectional association>)
	relation 1990583 --->
	  a role_name "sCalculateLeft" init_value " new CalculateSlideHorizontal() {
        @Override
        public float getGoneX(ViewGroup sceneRoot, View view, float fraction) {
            return view.getTranslationX() - sceneRoot.getWidth() * fraction;
        }
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1990583 // sCalculateLeft (<unidirectional association>)
	  b parent class_ref 658743 // CalculateSlide
      end

      classrelation 1990711 // sCalculateStart (<unidirectional association>)
	relation 1990711 --->
	  a role_name "sCalculateStart" init_value " new CalculateSlideHorizontal() {
        @Override
        public float getGoneX(ViewGroup sceneRoot, View view, float fraction) {
            final boolean isRtl = sceneRoot.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;
            final float x;
            if (isRtl) {
                x = view.getTranslationX() + sceneRoot.getWidth() * fraction;
            } else {
                x = view.getTranslationX() - sceneRoot.getWidth() * fraction;
            }
            return x;
        }
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1990711 // sCalculateStart (<unidirectional association>)
	  b parent class_ref 658743 // CalculateSlide
      end

      classrelation 1990839 // sCalculateTop (<unidirectional association>)
	relation 1990839 --->
	  a role_name "sCalculateTop" init_value " new CalculateSlideVertical() {
        @Override
        public float getGoneY(ViewGroup sceneRoot, View view, float fraction) {
            return view.getTranslationY() - sceneRoot.getHeight() * fraction;
        }
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1990839 // sCalculateTop (<unidirectional association>)
	  b parent class_ref 658743 // CalculateSlide
      end

      classrelation 1990967 // sCalculateRight (<unidirectional association>)
	relation 1990967 --->
	  a role_name "sCalculateRight" init_value " new CalculateSlideHorizontal() {
        @Override
        public float getGoneX(ViewGroup sceneRoot, View view, float fraction) {
            return view.getTranslationX() + sceneRoot.getWidth() * fraction;
        }
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1990967 // sCalculateRight (<unidirectional association>)
	  b parent class_ref 658743 // CalculateSlide
      end

      classrelation 1991095 // sCalculateEnd (<unidirectional association>)
	relation 1991095 --->
	  a role_name "sCalculateEnd" init_value " new CalculateSlideHorizontal() {
        @Override
        public float getGoneX(ViewGroup sceneRoot, View view, float fraction) {
            final boolean isRtl = sceneRoot.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL;
            final float x;
            if (isRtl) {
                x = view.getTranslationX() - sceneRoot.getWidth() * fraction;
            } else {
                x = view.getTranslationX() + sceneRoot.getWidth() * fraction;
            }
            return x;
        }
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1991095 // sCalculateEnd (<unidirectional association>)
	  b parent class_ref 658743 // CalculateSlide
      end

      classrelation 1991223 // sCalculateBottom (<unidirectional association>)
	relation 1991223 --->
	  a role_name "sCalculateBottom" init_value " new CalculateSlideVertical() {
        @Override
        public float getGoneY(ViewGroup sceneRoot, View view, float fraction) {
            return view.getTranslationY() + sceneRoot.getHeight() * fraction;
        }
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1991223 // sCalculateBottom (<unidirectional association>)
	  b parent class_ref 658743 // CalculateSlide
      end

      operation 4683831 "Slide"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor using the default {@link Gravity#BOTTOM}
slide edge direction."
      end

      operation 4683959 "Slide"
	public explicit_return_type ""
	nparams 1
	  param in name "slideEdge" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor using the provided slide edge direction."
      end

      operation 4684087 "Slide"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4684215 "captureValues"
	private explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4684343 "captureStartValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4684471 "captureEndValues"
	public explicit_return_type "void"
	nparams 1
	  param inout name "transitionValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4684599 "setSlideEdge"
	public explicit_return_type "void"
	nparams 1
	  param in name "slideEdge" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@GravityFlag ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Change the edge that Views appear and disappear from.

@param slideEdge The edge of the scene to use for Views appearing and disappearing. One of
                 {@link android.view.Gravity#LEFT}, {@link android.view.Gravity#TOP},
                 {@link android.view.Gravity#RIGHT}, {@link android.view.Gravity#BOTTOM},
                 {@link android.view.Gravity#START}, {@link android.view.Gravity#END}.
@attr ref android.R.styleable#Slide_slideEdge"
      end

      operation 4684727 "getSlideEdge"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@GravityFlag
"
	
	
	
	comment "Returns the edge that Views appear and disappear from.

@return the edge of the scene to use for Views appearing and disappearing. One of
        {@link android.view.Gravity#LEFT}, {@link android.view.Gravity#TOP},
        {@link android.view.Gravity#RIGHT}, {@link android.view.Gravity#BOTTOM},
        {@link android.view.Gravity#START}, {@link android.view.Gravity#END}.
@attr ref android.R.styleable#Slide_slideEdge"
      end

      operation 4684855 "onAppear"
	public return_type class_ref 314807 // Animator
	nparams 4
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "view" type class_ref 134455 // View
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4684983 "onDisappear"
	public return_type class_ref 314807 // Animator
	nparams 4
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "view" type class_ref 134455 // View
	  param inout name "startValues" type class_ref 342199 // TransitionValues
	  param inout name "endValues" type class_ref 342199 // TransitionValues
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4685111 "setSlideFraction"
	public explicit_return_type "void"
	nparams 1
	  param in name "slideFraction" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end
    end

    class 659255 "TransitionInflater"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class inflates scenes and transitions from resource files.

Information on XML resource descriptions for transitions can be found for
{@link android.R.styleable#Transition}, {@link android.R.styleable#TransitionSet},
{@link android.R.styleable#TransitionTarget}, {@link android.R.styleable#Fade},
and {@link android.R.styleable#TransitionManager}."
      classrelation 1991351 // sConstructorSignature (<unidirectional association>)
	relation 1991351 --->
	  a role_name "sConstructorSignature" multiplicity "[]" init_value " new Class[] {
            Context.class, AttributeSet.class}" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 1991351 // sConstructorSignature (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 1991479 // sConstructors (<unidirectional association>)
	relation 1991479 --->
	  a role_name "sConstructors" init_value "
            new ArrayMap<String, Constructor>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Constructor> ${name}${value};
"
	    classrelation_ref 1991479 // sConstructors (<unidirectional association>)
	  b parent class_ref 156343 // ArrayMap
      end

      classrelation 1991607 // mContext (<unidirectional association>)
	relation 1991607 --->
	  a role_name "mContext" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1991607 // mContext (<unidirectional association>)
	  b parent class_ref 128567 // Context
      end

      operation 4685239 "TransitionInflater"
	private explicit_return_type ""
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4685367 "from"
	class_operation public return_type class_ref 659255 // TransitionInflater
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the TransitionInflater from the given context."
      end

      operation 4685495 "inflateTransition"
	public return_type class_ref 341303 // Transition
	nparams 1
	  param in name "resource" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@TransitionRes ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads a {@link Transition} object from a resource

@param resource The resource id of the transition to load
@return The loaded Transition object
@throws android.content.res.Resources.NotFoundException when the
transition cannot be loaded"
      end

      operation 4685623 "inflateTransitionManager"
	public return_type class_ref 158647 // TransitionManager
	nparams 2
	  param in name "resource" explicit_type "int"
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@TransitionRes ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads a {@link TransitionManager} object from a resource

@param resource The resource id of the transition manager to load
@return The loaded TransitionManager object
@throws android.content.res.Resources.NotFoundException when the
transition manager cannot be loaded"
      end

      operation 4685751 "createTransitionFromXml"
	private return_type class_ref 341303 // Transition
	nparams 3
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param inout name "parent" type class_ref 341303 // Transition
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Transition loading"
      end

      operation 4685879 "createCustom"
	private return_type class_ref 132663 // Object
	nparams 3
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param inout name "expectedType" type class_ref 132791 // Class
	  param inout name "tag" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4686007 "getTargetIds"
	private explicit_return_type "void"
	nparams 3
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param inout name "transition" type class_ref 341303 // Transition
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4686135 "createTransitionManagerFromXml"
	private return_type class_ref 158647 // TransitionManager
	nparams 3
	  param inout name "parser" explicit_type "XmlPullParser"
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TransitionManager loading"
      end

      operation 4686263 "loadTransition"
	private explicit_return_type "void"
	nparams 3
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "transitionManager" type class_ref 158647 // TransitionManager
	nexceptions 1
	  exception class_ref 130231 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 659511 "TransitionUtils"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Static utility methods for Transitions.

@hide"
      attribute 2014775 "MAX_IMAGE_SIZE"
	class_attribute private explicit_type "int"
	init_value " (1024 * 1024)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4688951 "mergeAnimators"
	class_operation package return_type class_ref 314807 // Animator
	nparams 2
	  param inout name "animator1" type class_ref 314807 // Animator
	  param inout name "animator2" type class_ref 314807 // Animator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4689079 "mergeTransitions"
	class_operation public return_type class_ref 341303 // Transition
	nparams 1
	  param inout name "" explicit_type "Transition...transitions"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4689207 "copyViewImage"
	class_operation public return_type class_ref 134455 // View
	nparams 3
	  param inout name "sceneRoot" type class_ref 134711 // ViewGroup
	  param inout name "view" type class_ref 134455 // View
	  param inout name "parent" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a View using the bitmap copy of <code>view</code>. If <code>view</code> is large,
the copy will use a scaled bitmap of the given view.

@param sceneRoot The ViewGroup in which the view copy will be displayed.
@param view The view to create a copy of.
@param parent The parent of view."
      end

      operation 4689335 "createDrawableBitmap"
	class_operation public return_type class_ref 131127 // Bitmap
	nparams 1
	  param inout name "drawable" type class_ref 129719 // Drawable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a copy of bitmap of given drawable, return null if intrinsic size is zero"
      end

      operation 4689463 "createViewBitmap"
	class_operation public return_type class_ref 131127 // Bitmap
	nparams 3
	  param inout name "view" type class_ref 134455 // View
	  param inout name "matrix" type class_ref 141111 // Matrix
	  param inout name "bounds" type class_ref 150967 // RectF
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Bitmap of the given view, using the Matrix matrix to transform to the local
coordinates. <code>matrix</code> will be modified during the bitmap creation.

<p>If the bitmap is large, it will be scaled uniformly down to at most 1MB size.</p>
@param view The view to create a bitmap for.
@param matrix The matrix converting the view local coordinates to the coordinates that
              the bitmap will be displayed in. <code>matrix</code> will be modified before
              returning.
@param bounds The bounds of the bitmap in the destination coordinate system (where the
              view should be presented. Typically, this is matrix.mapRect(viewBounds);
@return A bitmap of the given view or null if bounds has no width or height."
      end

      class 659639 "MatrixEvaluator"
	visibility public 
	nactuals 1
	actual class class_ref 316087 // TypeEvaluator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1993015 // <realization>
	  relation 1993015 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1993015 // <realization>
	    b parent class_ref 316087 // TypeEvaluator
	end

	attribute 2014903 "mTempStartValues"
	  package explicit_type "float"
	  multiplicity "[]"
	  init_value " new float[9]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2015031 "mTempEndValues"
	  package explicit_type "float"
	  multiplicity "[]"
	  init_value " new float[9]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1993143 // mTempMatrix (<unidirectional association>)
	  relation 1993143 --->
	    a role_name "mTempMatrix" init_value " new Matrix()" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1993143 // mTempMatrix (<unidirectional association>)
	    b parent class_ref 141111 // Matrix
	end

	operation 4689591 "evaluate"
	  public return_type class_ref 141111 // Matrix
	  nparams 3
	    param in name "fraction" explicit_type "float"
	    param inout name "startValue" type class_ref 141111 // Matrix
	    param inout name "endValue" type class_ref 141111 // Matrix
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 659767 "TranslationAnimationCreator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is used by Slide and Explode to create an animator that goes from the start
position to the end position. It takes into account the canceled position so that it
will not blink out or shift suddenly when the transition is interrupted."
      operation 4690103 "createAnimation"
	class_operation package return_type class_ref 314807 // Animator
	nparams 10
	  param inout name "view" type class_ref 134455 // View
	  param inout name "values" type class_ref 342199 // TransitionValues
	  param in name "viewPosX" explicit_type "int"
	  param in name "viewPosY" explicit_type "int"
	  param in name "startX" explicit_type "float"
	  param in name "startY" explicit_type "float"
	  param in name "endX" explicit_type "float"
	  param in name "endY" explicit_type "float"
	  param inout name "interpolator" type class_ref 315319 // TimeInterpolator
	  param inout name "transition" type class_ref 341303 // Transition
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an animator that can be used for x and/or y translations. When interrupted,
it sets a tag to keep track of the position so that it may be continued from position.

@param view The view being moved. This may be in the overlay for onDisappear.
@param values The values containing the view in the view hierarchy.
@param viewPosX The x screen coordinate of view
@param viewPosY The y screen coordinate of view
@param startX The start translation x of view
@param startY The start translation y of view
@param endX The end translation x of view
@param endY The end translation y of view
@param interpolator The interpolator to use with this animator.
@return An animator that moves from (startX, startY) to (endX, endY) unless there was
a previous interruption, in which case it moves from the current position to (endX, endY)."
      end

      class 659895 "TransitionPositionListener"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1994167 // <generalisation>
	  relation 1994167 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1994167 // <generalisation>
	    b parent class_ref 316727 // AnimatorListenerAdapter
	end

	classrelation 1994295 // <realization>
	  relation 1994295 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1994295 // <realization>
	    b parent class_ref 342327 // TransitionListener
	end

	classrelation 1994423 // mViewInHierarchy (<unidirectional association>)
	  relation 1994423 --->
	    a role_name "mViewInHierarchy" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1994423 // mViewInHierarchy (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	classrelation 1994551 // mMovingView (<unidirectional association>)
	  relation 1994551 --->
	    a role_name "mMovingView" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1994551 // mMovingView (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	attribute 2015159 "mStartX"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2015287 "mStartY"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2015415 "mTransitionPosition"
	  private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2015543 "mPausedX"
	  private explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2015671 "mPausedY"
	  private explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2015799 "mTerminalX"
	  const_attribute private explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2015927 "mTerminalY"
	  const_attribute private explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 4690231 "TransitionPositionListener"
	  private explicit_return_type ""
	  nparams 6
	    param inout name "movingView" type class_ref 134455 // View
	    param inout name "viewInHierarchy" type class_ref 134455 // View
	    param in name "startX" explicit_type "int"
	    param in name "startY" explicit_type "int"
	    param in name "terminalX" explicit_type "float"
	    param in name "terminalY" explicit_type "float"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 4690359 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animation" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4690487 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animator" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4690615 "onAnimationPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animator" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4690743 "onAnimationResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "animator" type class_ref 314807 // Animator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4690871 "onTransitionStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4690999 "onTransitionEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4691127 "onTransitionCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4691255 "onTransitionPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 4691383 "onTransitionResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 875063 "AutoTransitionTest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@RunWith(AndroidJUnit4.class)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 6896823 "testFadeOutMoveFadeIn"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Test
@SmallTest
"
	
	
	
      end
    end

    class 875191 "FadeTransitionTest"
      visibility public 
      nactuals 1
      actual class class_ref 828087 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2670775 // <realization>
	relation 2670775 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2670775 // <realization>
	  b parent class_ref 828087 // ActivityInstrumentationTestCase2
      end

      classrelation 2670903 // mActivity (<unidirectional association>)
	relation 2670903 --->
	  a role_name "mActivity" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2670903 // mActivity (<unidirectional association>)
	  b parent class_ref 128183 // Activity
      end

      operation 6896951 "FadeTransitionTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6897079 "setUp"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 6897207 "testFadeOutAndIn"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6897335 "testFadeOutInterrupt"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6897463 "testFadeInInterrupt"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      class 875319 "TransitionLatch"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2671031 // <realization>
	  relation 2671031 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2671031 // <realization>
	    b parent class_ref 342327 // TransitionListener
	end

	attribute 2873271 "startLatch"
	  public explicit_type "CountDownLatch"
	  init_value " new CountDownLatch(1)"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2873399 "endLatch"
	  public explicit_type "CountDownLatch"
	  init_value " new CountDownLatch(1)"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2873527 "cancelLatch"
	  public explicit_type "CountDownLatch"
	  init_value " new CountDownLatch(1)"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2873655 "pauseLatch"
	  public explicit_type "CountDownLatch"
	  init_value " new CountDownLatch(1)"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2873783 "resumeLatch"
	  public explicit_type "CountDownLatch"
	  init_value " new CountDownLatch(1)"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6897719 "onTransitionStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6897847 "onTransitionEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6897975 "onTransitionCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6898103 "onTransitionPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6898231 "onTransitionResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 6897591 "setVisibilityInTransition"
	public return_type class_ref 875319 // TransitionLatch
	nparams 3
	  param in name "transition" type class_ref 341303 // Transition
	  param in name "viewId" explicit_type "int"
	  param in name "visibility" explicit_type "int"
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 875447 "FadeValueCheck"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2671159 // <generalisation>
	  relation 2671159 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2671159 // <generalisation>
	    b parent class_ref 341687 // TransitionListenerAdapter
	end

	attribute 2873911 "startTransitionAlpha"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2874039 "pauseTransitionAlpha"
	  public explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 2671287 // mView (<unidirectional association>)
	  relation 2671287 --->
	    a role_name "mView" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2671287 // mView (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	operation 6898359 "FadeValueCheck"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6898487 "onTransitionStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6898615 "onTransitionPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 875575 "SlideTransitionTest"
      visibility public 
      nactuals 1
      actual class class_ref 828087 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2671415 // <realization>
	relation 2671415 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2671415 // <realization>
	  b parent class_ref 828087 // ActivityInstrumentationTestCase2
      end

      classrelation 2671543 // mActivity (<unidirectional association>)
	relation 2671543 --->
	  a role_name "mActivity" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2671543 // mActivity (<unidirectional association>)
	  b parent class_ref 128183 // Activity
      end

      operation 6898743 "SlideTransitionTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6898871 "setUp"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 6898999 "testShortSlide"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      class 875703 "TransitionLatch"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2671671 // <realization>
	  relation 2671671 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2671671 // <realization>
	    b parent class_ref 342327 // TransitionListener
	end

	attribute 2874167 "startLatch"
	  public explicit_type "CountDownLatch"
	  init_value " new CountDownLatch(1)"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2874295 "endLatch"
	  public explicit_type "CountDownLatch"
	  init_value " new CountDownLatch(1)"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2874423 "cancelLatch"
	  public explicit_type "CountDownLatch"
	  init_value " new CountDownLatch(1)"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2874551 "pauseLatch"
	  public explicit_type "CountDownLatch"
	  init_value " new CountDownLatch(1)"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2874679 "resumeLatch"
	  public explicit_type "CountDownLatch"
	  init_value " new CountDownLatch(1)"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6899255 "onTransitionStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6899383 "onTransitionEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6899511 "onTransitionCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6899639 "onTransitionPause"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 6899767 "onTransitionResume"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "transition" type class_ref 341303 // Transition
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 6899127 "setVisibilityInTransition"
	public return_type class_ref 875703 // TransitionLatch
	nparams 3
	  param in name "transition" type class_ref 341303 // Transition
	  param in name "viewId" explicit_type "int"
	  param in name "visibility" explicit_type "int"
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 875831 "SlideTranslationValueRatchet"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 2671799 // <realization>
	  relation 2671799 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 2671799 // <realization>
	    b parent class_ref 268343 // OnPreDrawListener
	end

	classrelation 2671927 // mView (<unidirectional association>)
	  relation 2671927 --->
	    a role_name "mView" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 2671927 // mView (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	attribute 2874807 "mInitialized"
	  private explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2874935 "minX"
	  public explicit_type "float"
	  init_value " Float.NaN"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2875063 "minY"
	  public explicit_type "float"
	  init_value " Float.NaN"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2875191 "maxX"
	  public explicit_type "float"
	  init_value " Float.NaN"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2875319 "maxY"
	  public explicit_type "float"
	  init_value " Float.NaN"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 6899895 "SlideTranslationValueRatchet"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6900023 "reset"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6900151 "onPreDraw"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 875959 "TransitionTest"
      visibility public 
      nactuals 1
      actual class class_ref 828087 // ActivityInstrumentationTestCase2
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2672055 // <realization>
	relation 2672055 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2672055 // <realization>
	  b parent class_ref 828087 // ActivityInstrumentationTestCase2
      end

      classrelation 2672183 // mActivity (<unidirectional association>)
	relation 2672183 --->
	  a role_name "mActivity" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2672183 // mActivity (<unidirectional association>)
	  b parent class_ref 128183 // Activity
      end

      operation 6900279 "TransitionTest"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6900407 "setUp"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 6900535 "testClone"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 148151 "transition"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 246967 "Transition"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.TimeInterpolator;
import android.annotation.Nullable;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Path;
import android.graphics.Rect;
import android.util.ArrayMap;
import android.util.AttributeSet;
import android.util.Log;
import android.util.LongSparseArray;
import android.util.SparseArray;
import android.util.SparseLongArray;
import android.view.InflateException;
import android.view.SurfaceView;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewOverlay;
import android.view.WindowId;
import android.view.animation.AnimationUtils;
import android.widget.ListView;
import android.widget.Spinner;
import com.android.internal.R;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
${definition}"
      associated_classes
	class_ref 341303 // Transition
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 390071 "PathMotion"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.graphics.Path;
import android.util.AttributeSet;
${definition}"
      associated_classes
	class_ref 341815 // PathMotion
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 390199 "ArcMotion"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Path;
import android.util.AttributeSet;
import com.android.internal.R;
${definition}"
      associated_classes
	class_ref 655159 // ArcMotion
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 390327 "TransitionSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.internal.R;
import android.animation.TimeInterpolator;
import android.content.Context;
import android.content.res.TypedArray;
import android.util.AndroidRuntimeException;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 342071 // TransitionSet
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 390455 "AutoTransition"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.util.AttributeSet;
${definition}"
      associated_classes
	class_ref 655287 // AutoTransition
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 390583 "ChangeBounds"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.AnimatorSet;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.PointF;
import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.ObjectAnimator;
import android.animation.PropertyValuesHolder;
import android.animation.RectEvaluator;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Path;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.util.Property;
import android.view.View;
import android.view.ViewGroup;
import com.android.internal.R;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 655543 // ChangeBounds
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 390711 "ChangeClipBounds"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.ObjectAnimator;
import android.animation.RectEvaluator;
import android.content.Context;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
${definition}"
      associated_classes
	class_ref 655799 // ChangeClipBounds
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 390839 "ChangeImageTransform"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.ObjectAnimator;
import android.animation.TypeEvaluator;
import android.content.Context;
import android.graphics.Matrix;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.util.Property;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 655927 // ChangeImageTransform
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 390967 "ChangeScroll"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.ObjectAnimator;
import android.content.Context;
import android.transition.Transition;
import android.transition.TransitionValues;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
${definition}"
      associated_classes
	class_ref 656055 // ChangeScroll
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 391095 "ChangeText"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ValueAnimator;
import android.graphics.Color;
import android.util.Log;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.TextView;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 656183 // ChangeText
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 391223 "ChangeTransform"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.FloatArrayEvaluator;
import android.animation.ObjectAnimator;
import android.animation.PropertyValuesHolder;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Matrix;
import android.graphics.Path;
import android.graphics.PointF;
import android.util.AttributeSet;
import android.util.Property;
import android.view.GhostView;
import android.view.View;
import android.view.ViewGroup;
import com.android.internal.R;
${definition}"
      associated_classes
	class_ref 656311 // ChangeTransform
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 391351 "TransitionPropagation"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.view.ViewGroup;
${definition}"
      associated_classes
	class_ref 342455 // TransitionPropagation
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 391479 "VisibilityPropagation"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.view.View;
${definition}"
      associated_classes
	class_ref 656951 // VisibilityPropagation
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 391607 "CircularPropagation"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Rect;
import android.view.View;
import android.view.ViewGroup;
${definition}"
      associated_classes
	class_ref 656823 // CircularPropagation
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 391735 "Crossfade"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.animation.RectEvaluator;
import android.animation.ValueAnimator;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.util.Log;
import android.view.SurfaceView;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewOverlay;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 657079 // Crossfade
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 391863 "Visibility"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.Animator.AnimatorListener;
import android.animation.Animator.AnimatorPauseListener;
import android.annotation.IntDef;
import android.content.Context;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import com.android.internal.R;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
${definition}"
      associated_classes
	class_ref 657335 // Visibility
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 391991 "Explode"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.internal.R;
import android.animation.Animator;
import android.animation.TimeInterpolator;
import android.content.Context;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.DecelerateInterpolator;
${definition}"
      associated_classes
	class_ref 657207 // Explode
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 392119 "Fade"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.ObjectAnimator;
import android.content.Context;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import com.android.internal.R;
${definition}"
      associated_classes
	class_ref 657847 // Fade
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 392247 "PatternPathMotion"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.internal.R;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.Matrix;
import android.graphics.Path;
import android.graphics.PathMeasure;
import android.util.AttributeSet;
import android.util.PathParser;
${definition}"
      associated_classes
	class_ref 658103 // PatternPathMotion
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 392375 "Recolor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.ObjectAnimator;
import android.content.Context;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
${definition}"
      associated_classes
	class_ref 658231 // Recolor
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 392503 "Rotate"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.ObjectAnimator;
import android.view.View;
import android.view.ViewGroup;
${definition}"
      associated_classes
	class_ref 658359 // Rotate
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 392631 "Scene"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.util.SparseArray;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
${definition}"
      associated_classes
	class_ref 158775 // Scene
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 392759 "SidePropagation"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Rect;
import android.transition.Slide.GravityFlag;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
${definition}"
      associated_classes
	class_ref 658487 // SidePropagation
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 392887 "Slide"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.TimeInterpolator;
import android.annotation.IntDef;
import android.content.Context;
import android.content.res.TypedArray;
import android.util.AttributeSet;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.DecelerateInterpolator;
import com.android.internal.R;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
${definition}"
      associated_classes
	class_ref 658615 // Slide
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 393015 "TransitionInflater"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.TransitionRes;
import com.android.internal.R;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.util.ArrayMap;
import android.util.AttributeSet;
import android.util.Xml;
import android.view.InflateException;
import android.view.ViewGroup;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
${definition}"
      associated_classes
	class_ref 659255 // TransitionInflater
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 393143 "TransitionManager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.util.ArrayMap;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 158647 // TransitionManager
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 393271 "TransitionUtils"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.TypeEvaluator;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Matrix;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.Drawable;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
${definition}"
      associated_classes
	class_ref 659511 // TransitionUtils
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 393399 "TransitionValues"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.util.ArrayMap;
import android.view.View;
import android.view.ViewGroup;
import java.util.ArrayList;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 342199 // TransitionValues
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 393527 "TransitionValuesMaps"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.util.ArrayMap;
import android.util.LongSparseArray;
import android.util.SparseArray;
import android.view.View;
${definition}"
      associated_classes
	class_ref 341943 // TransitionValuesMaps
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 393655 "TranslationAnimationCreator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.internal.R;
import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.ObjectAnimator;
import android.animation.TimeInterpolator;
import android.graphics.Path;
import android.transition.Transition.TransitionListener;
import android.view.View;
${definition}"
      associated_classes
	class_ref 659767 // TranslationAnimationCreator
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 508983 "AutoTransitionTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.support.test.runner.AndroidJUnit4;
import android.test.suitebuilder.annotation.SmallTest;
import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
${definition}"
      associated_classes
	class_ref 875063 // AutoTransitionTest
      end
      comment "Copyright (C) 2016 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 509111 "FadeTransitionTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.AnimatorSetActivity;
import android.app.Activity;
import android.test.ActivityInstrumentationTestCase2;
import android.test.suitebuilder.annotation.SmallTest;
import android.transition.Transition.TransitionListener;
import android.transition.Transition.TransitionListenerAdapter;
import android.view.View;
import android.view.ViewGroup;
import com.android.frameworks.coretests.R;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import static android.support.test.espresso.Espresso.onView;
${definition}"
      associated_classes
	class_ref 875191 // FadeTransitionTest
      end
      comment "Copyright (C) 2016 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 509239 "SlideTransitionTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.AnimatorSetActivity;
import android.app.Activity;
import android.test.ActivityInstrumentationTestCase2;
import android.test.suitebuilder.annotation.SmallTest;
import android.view.Gravity;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import com.android.frameworks.coretests.R;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
${definition}"
      associated_classes
	class_ref 875575 // SlideTransitionTest
      end
      comment "Copyright (C) 2016 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License"
    end

    artifact 509367 "TransitionTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.animation.AnimatorSetActivity;
import android.app.Activity;
import android.graphics.Rect;
import android.test.ActivityInstrumentationTestCase2;
import android.transition.Transition.EpicenterCallback;
import android.util.ArrayMap;
import android.view.View;
import android.view.animation.AccelerateInterpolator;
import android.widget.TextView;
import com.android.frameworks.coretests.R;
${definition}"
      associated_classes
	class_ref 875959 // TransitionTest
      end
      comment "Copyright (C) 2016 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
