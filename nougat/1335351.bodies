class WifiTile
!!!30707895.java!!!	WifiTile(inout host : QSTile::Host)
        super(host);
        mController = host.getNetworkController();
        mWifiController = mController.getAccessPointController();
        mDetailAdapter = new WifiDetailAdapter();
!!!30708023.java!!!	newTileState() : QSTile::SignalState
        return new SignalState();
!!!30708151.java!!!	setListening(inout listening : boolean) : void
        if (listening) {
            mController.addSignalCallback(mSignalCallback);
        } else {
            mController.removeSignalCallback(mSignalCallback);
        }
!!!30708279.java!!!	setDetailListening(inout listening : boolean) : void
        if (listening) {
            mWifiController.addAccessPointCallback(mDetailAdapter);
        } else {
            mWifiController.removeAccessPointCallback(mDetailAdapter);
        }
!!!30708407.java!!!	getDetailAdapter() : QSTile::DetailAdapter
        return mDetailAdapter;
!!!30708535.java!!!	createTileView(inout context : Context) : QSIconView
        return new SignalTileView(context);
!!!30708663.java!!!	getLongClickIntent() : Intent
        return WIFI_SETTINGS;
!!!30708791.java!!!	handleSecondaryClick() : void
        // Secondary clicks are header clicks, just toggle.
        mState.copyTo(mStateBeforeClick);
        MetricsLogger.action(mContext, getMetricsCategory(), !mState.value);
        mController.setWifiEnabled(!mState.value);
!!!30708919.java!!!	handleClick() : void
        if (!mWifiController.canConfigWifi()) {
            mHost.startActivityDismissingKeyguard(new Intent(Settings.ACTION_WIFI_SETTINGS));
            return;
        }
        if (!mState.value) {
            mController.setWifiEnabled(true);
            mState.value = true;
        }
        showDetail(true);
!!!30709047.java!!!	getTileLabel() : CharSequence
        return mContext.getString(R.string.quick_settings_wifi_label);
!!!30709175.java!!!	handleUpdateState(inout state : QSTile::SignalState, inout arg : Object) : void
        if (DEBUG) Log.d(TAG, "handleUpdateState arg=" + arg);
        CallbackInfo cb = (CallbackInfo) arg;
        if (cb == null) {
            cb = mSignalCallback.mInfo;
        }

        boolean wifiConnected = cb.enabled && (cb.wifiSignalIconId > 0) && (cb.enabledDesc != null);
        boolean wifiNotConnected = (cb.wifiSignalIconId > 0) && (cb.enabledDesc == null);
        boolean enabledChanging = state.value != cb.enabled;
        if (enabledChanging) {
            mDetailAdapter.setItemsVisible(cb.enabled);
            fireToggleStateChanged(cb.enabled);
        }
        state.value = cb.enabled;
        state.connected = wifiConnected;
        state.activityIn = cb.enabled && cb.activityIn;
        state.activityOut = cb.enabled && cb.activityOut;
        state.filter = true;
        final StringBuffer minimalContentDescription = new StringBuffer();
        final StringBuffer expandedContentDescription = new StringBuffer();
        final Resources r = mContext.getResources();
        if (!state.value) {
            state.icon = ResourceIcon.get(R.drawable.ic_qs_wifi_disabled);
            state.label = r.getString(R.string.quick_settings_wifi_label);
        } else if (wifiConnected) {
            state.icon = ResourceIcon.get(cb.wifiSignalIconId);
            state.label = removeDoubleQuotes(cb.enabledDesc);
        } else if (wifiNotConnected) {
            state.icon = ResourceIcon.get(R.drawable.ic_qs_wifi_disconnected);
            state.label = r.getString(R.string.quick_settings_wifi_label);
        } else {
            state.icon = ResourceIcon.get(R.drawable.ic_qs_wifi_no_network);
            state.label = r.getString(R.string.quick_settings_wifi_label);
        }
        minimalContentDescription.append(
                mContext.getString(R.string.quick_settings_wifi_label)).append(",");
        if (state.value) {
            expandedContentDescription.append(
                    r.getString(R.string.quick_settings_wifi_on_label)).append(",");
            if (wifiConnected) {
                minimalContentDescription.append(cb.wifiSignalContentDescription).append(",");
                minimalContentDescription.append(removeDoubleQuotes(cb.enabledDesc));
                expandedContentDescription.append(cb.wifiSignalContentDescription).append(",");
                expandedContentDescription.append(removeDoubleQuotes(cb.enabledDesc));
            }
        } else {
            expandedContentDescription.append(
                    r.getString(R.string.quick_settings_wifi_off_label));
        }
        state.minimalContentDescription =  minimalContentDescription;
        expandedContentDescription.append(",").append(
                r.getString(R.string.accessibility_quick_settings_open_settings, getTileLabel()));
        state.contentDescription = expandedContentDescription;
        CharSequence wifiName = state.label;
        if (state.connected) {
            wifiName = r.getString(R.string.accessibility_wifi_name, state.label);
        }
        state.dualLabelContentDescription = wifiName;
        state.expandedAccessibilityClassName = Button.class.getName();
        state.minimalAccessibilityClassName = Switch.class.getName();
!!!30709303.java!!!	getMetricsCategory() : int
        return MetricsEvent.QS_WIFI;
!!!30709431.java!!!	shouldAnnouncementBeDelayed() : boolean
        return mStateBeforeClick.value == mState.value;
!!!30709559.java!!!	composeChangeAnnouncement() : String
        if (mState.value) {
            return mContext.getString(R.string.accessibility_quick_settings_wifi_changed_on);
        } else {
            return mContext.getString(R.string.accessibility_quick_settings_wifi_changed_off);
        }
!!!30709687.java!!!	isAvailable() : boolean
        return mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_WIFI);
!!!30709815.java!!!	removeDoubleQuotes(inout string : String) : String
        if (string == null) return null;
        final int length = string.length();
        if ((length > 1) && (string.charAt(0) == '"') && (string.charAt(length - 1) == '"')) {
            return string.substring(1, length - 1);
        }
        return string;
