class TaskKeyLruCache
!!!30769079.java!!!	TaskKeyLruCache(in cacheSize : int)
        this(cacheSize, null);
!!!30769207.java!!!	TaskKeyLruCache(in cacheSize : int, inout evictionCallback : TaskKeyLruCache::EvictionCallback)
        mEvictionCallback = evictionCallback;
        mCache = new LruCache<Integer, V>(cacheSize) {

            @Override
            protected void entryRemoved(boolean evicted, Integer taskId, V oldV, V newV) {
                if (mEvictionCallback != null) {
                    mEvictionCallback.onEntryEvicted(mKeys.get(taskId));
                }
                mKeys.remove(taskId);
            }
        };
!!!30769335.java!!!	get(inout key : Task::TaskKey) : V
        return mCache.get(key.id);
!!!30769463.java!!!	getAndInvalidateIfModified(inout key : Task::TaskKey) : V
        Task.TaskKey lastKey = mKeys.get(key.id);
        if (lastKey != null) {
            if ((lastKey.stackId != key.stackId) ||
                    (lastKey.lastActiveTime != key.lastActiveTime)) {
                // The task has updated (been made active since the last time it was put into the
                // LRU cache) or the stack id for the task has changed, invalidate that cache item
                remove(key);
                return null;
            }
        }
        // Either the task does not exist in the cache, or the last active time is the same as
        // the key specified, so return what is in the cache
        return mCache.get(key.id);
!!!30769591.java!!!	put(inout key : Task::TaskKey, inout value : V) : void
        if (key == null || value == null) {
            Log.e(TAG, "Unexpected null key or value: " + key + ", " + value);
            return;
        }
        mKeys.put(key.id, key);
        mCache.put(key.id, value);
!!!30769719.java!!!	remove(inout key : Task::TaskKey) : void
        // Remove the key after the cache value because we need it to make the callback
        mCache.remove(key.id);
        mKeys.remove(key.id);
!!!30769847.java!!!	evictAll() : void
        mCache.evictAll();
        mKeys.clear();
!!!30769975.java!!!	trimToSize(in cacheSize : int) : void
        mCache.trimToSize(cacheSize);
!!!30770103.java!!!	dump(inout prefix : String, inout writer : PrintWriter) : void
        String innerPrefix = prefix + "  ";

        writer.print(prefix); writer.print(TAG);
        writer.print(" numEntries="); writer.print(mKeys.size());
        writer.println();
        int keyCount = mKeys.size();
        for (int i = 0; i < keyCount; i++) {
            writer.print(innerPrefix); writer.println(mKeys.get(mKeys.keyAt(i)));
        }
