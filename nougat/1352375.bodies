class PipManager
!!!31424567.java!!!	initialize(inout context : Context) : void
        if (mInitialized) {
            return;
        }
        mInitialized = true;
        mContext = context;
        Resources res = context.getResources();
        mDefaultPipBounds = Rect.unflattenFromString(res.getString(
                com.android.internal.R.string.config_defaultPictureInPictureBounds));
        mSettingsPipBounds = Rect.unflattenFromString(res.getString(
                R.string.pip_settings_bounds));
        mMenuModePipBounds = Rect.unflattenFromString(res.getString(
                R.string.pip_menu_bounds));
        mRecentsPipBounds = Rect.unflattenFromString(res.getString(
                R.string.pip_recents_bounds));
        mRecentsFocusedPipBounds = Rect.unflattenFromString(res.getString(
                R.string.pip_recents_focused_bounds));
        mRecentsFocusChangedAnimationDurationMs = res.getInteger(
                R.integer.recents_tv_pip_focus_anim_duration);
        mPipBounds = mDefaultPipBounds;

        mActivityManager = ActivityManagerNative.getDefault();
        SystemServicesProxy.getInstance(context).registerTaskStackListener(mTaskStackListener);
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(Intent.ACTION_MEDIA_RESOURCE_GRANTED);
        mContext.registerReceiver(mBroadcastReceiver, intentFilter);
        mOnboardingShown = Prefs.getBoolean(
                mContext, TV_PICTURE_IN_PICTURE_ONBOARDING_SHOWN, false);

        mPipRecentsOverlayManager = new PipRecentsOverlayManager(context);
        mMediaSessionManager =
                (MediaSessionManager) mContext.getSystemService(Context.MEDIA_SESSION_SERVICE);
!!!31424695.java!!!	onConfigurationChanged() : void
        mPipRecentsOverlayManager.onConfigurationChanged(mContext);
!!!31424823.java!!!	showTvPictureInPictureMenu() : void
        if (mState == STATE_PIP_OVERLAY) {
            resizePinnedStack(STATE_PIP_MENU);
        }
!!!31424951.java!!!	closePip() : void
        closePipInternal(true);
!!!31425079.java!!!	closePipInternal(inout removePipStack : boolean) : void
        mState = STATE_NO_PIP;
        mPipTaskId = TASK_ID_NO_PIP;
        mPipMediaController = null;
        mMediaSessionManager.removeOnActiveSessionsChangedListener(mActiveMediaSessionListener);
        if (removePipStack) {
            try {
                mActivityManager.removeStack(PINNED_STACK_ID);
            } catch (RemoteException e) {
                Log.e(TAG, "removeStack failed", e);
            }
        }
        for (int i = mListeners.size() - 1; i >= 0; --i) {
            mListeners.get(i).onPipActivityClosed();
        }
        mHandler.removeCallbacks(mClosePipRunnable);
        updatePipVisibility(false);
!!!31425207.java!!!	movePipToFullscreen() : void
        mState = STATE_NO_PIP;
        mPipTaskId = TASK_ID_NO_PIP;
        for (int i = mListeners.size() - 1; i >= 0; --i) {
            mListeners.get(i).onMoveToFullscreen();
        }
        resizePinnedStack(mState);
!!!31425335.java!!!	showPipOverlay() : void
        if (DEBUG) Log.d(TAG, "showPipOverlay()");
        PipOverlayActivity.showPipOverlay(mContext);
!!!31425463.java!!!	suspendPipResizing(in reason : int) : void
        if (DEBUG) Log.d(TAG,
                "suspendPipResizing() reason=" + reason + " callers=" + Debug.getCallers(2));
        mSuspendPipResizingReason |= reason;
!!!31425591.java!!!	resumePipResizing(in reason : int) : void
        if ((mSuspendPipResizingReason & reason) == 0) {
            return;
        }
        if (DEBUG) Log.d(TAG,
                "resumePipResizing() reason=" + reason + " callers=" + Debug.getCallers(2));
        mSuspendPipResizingReason &= ~reason;
        mHandler.post(mResizePinnedStackRunnable);
!!!31425719.java!!!	resizePinnedStack(in state : int) : void
        if (DEBUG) Log.d(TAG, "resizePinnedStack() state=" + state);
        boolean wasRecentsShown =
                (mState == STATE_PIP_RECENTS || mState == STATE_PIP_RECENTS_FOCUSED);
        mState = state;
        for (int i = mListeners.size() - 1; i >= 0; --i) {
            mListeners.get(i).onPipResizeAboutToStart();
        }
        if (mSuspendPipResizingReason != 0) {
            if (DEBUG) Log.d(TAG,
                    "resizePinnedStack() deferring mSuspendPipResizingReason=" +
                            mSuspendPipResizingReason);
            return;
        }
        switch (mState) {
            case STATE_NO_PIP:
                mCurrentPipBounds = null;
                break;
            case STATE_PIP_MENU:
                mCurrentPipBounds = mMenuModePipBounds;
                break;
            case STATE_PIP_OVERLAY:
                mCurrentPipBounds = mPipBounds;
                break;
            case STATE_PIP_RECENTS:
                mCurrentPipBounds = mRecentsPipBounds;
                break;
            case STATE_PIP_RECENTS_FOCUSED:
                mCurrentPipBounds = mRecentsFocusedPipBounds;
                break;
            default:
                mCurrentPipBounds = mPipBounds;
                break;
        }
        try {
            int animationDurationMs = -1;
            if (wasRecentsShown
                    && (mState == STATE_PIP_RECENTS || mState == STATE_PIP_RECENTS_FOCUSED)) {
                animationDurationMs = mRecentsFocusChangedAnimationDurationMs;
            }
            mActivityManager.resizeStack(PINNED_STACK_ID, mCurrentPipBounds,
                    true, true, true, animationDurationMs);
        } catch (RemoteException e) {
            Log.e(TAG, "resizeStack failed", e);
        }
!!!31425847.java!!!	getPipBounds() : Rect
        return mPipBounds;
!!!31425975.java!!!	getRecentsFocusedPipBounds() : Rect
        return mRecentsFocusedPipBounds;
!!!31426103.java!!!	showPipMenu() : void
        if (DEBUG) Log.d(TAG, "showPipMenu()");
        if (mPipRecentsOverlayManager.isRecentsShown()) {
            if (DEBUG) Log.d(TAG, "Ignore showing PIP menu");
            return;
        }
        mState = STATE_PIP_MENU;
        for (int i = mListeners.size() - 1; i >= 0; --i) {
            mListeners.get(i).onShowPipMenu();
        }
        Intent intent = new Intent(mContext, PipMenuActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        mContext.startActivity(intent);
!!!31426231.java!!!	addListener(inout listener : PipManager::Listener) : void
        mListeners.add(listener);
!!!31426359.java!!!	removeListener(inout listener : PipManager::Listener) : void
        mListeners.remove(listener);
!!!31426487.java!!!	addMediaListener(inout listener : PipManager::MediaListener) : void
        mMediaListeners.add(listener);
!!!31426615.java!!!	removeMediaListener(inout listener : PipManager::MediaListener) : void
        mMediaListeners.remove(listener);
!!!31426743.java!!!	launchPipOnboardingActivityIfNeeded() : void
        if (DEBUG_FORCE_ONBOARDING || !mOnboardingShown) {
            mOnboardingShown = true;
            Prefs.putBoolean(mContext, TV_PICTURE_IN_PICTURE_ONBOARDING_SHOWN, true);

            Intent intent = new Intent(mContext, PipOnboardingActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            mContext.startActivity(intent);
        }
!!!31426871.java!!!	isPipShown() : boolean
        return mState != STATE_NO_PIP;
!!!31426999.java!!!	handleMediaResourceGranted(inout packageNames : String) : void
        if (mState == STATE_NO_PIP) {
            mLastPackagesResourceGranted = packageNames;
        } else {
            boolean requestedFromLastPackages = false;
            if (mLastPackagesResourceGranted != null) {
                for (String packageName : mLastPackagesResourceGranted) {
                    for (String newPackageName : packageNames) {
                        if (TextUtils.equals(newPackageName, packageName)) {
                            requestedFromLastPackages = true;
                            break;
                        }
                    }
                }
            }
            mLastPackagesResourceGranted = packageNames;
            if (!requestedFromLastPackages) {
                closePip();
            }
        }
!!!31427127.java!!!	updateMediaController(inout controllers : List<MediaController>) : void
        MediaController mediaController = null;
        if (controllers != null && mState != STATE_NO_PIP && mPipComponentName != null) {
            for (int i = controllers.size() - 1; i >= 0; i--) {
                MediaController controller = controllers.get(i);
                // We assumes that an app with PIPable activity
                // keeps the single instance of media controller especially when PIP is on.
                if (controller.getPackageName().equals(mPipComponentName.getPackageName())) {
                    mediaController = controller;
                    break;
                }
            }
        }
        if (mPipMediaController != mediaController) {
            mPipMediaController = mediaController;
            for (int i = mMediaListeners.size() - 1; i >= 0; i--) {
                mMediaListeners.get(i).onMediaControllerChanged();
            }
            if (mPipMediaController == null) {
                mHandler.postDelayed(mClosePipRunnable,
                        CLOSE_PIP_WHEN_MEDIA_SESSION_GONE_TIMEOUT_MS);
            } else {
                mHandler.removeCallbacks(mClosePipRunnable);
            }
        }
!!!31427255.java!!!	getMediaController() : MediaController
        return mPipMediaController;
!!!31427383.java!!!	getPlaybackState() : int
        if (mPipMediaController == null || mPipMediaController.getPlaybackState() == null) {
            return PLAYBACK_STATE_UNAVAILABLE;
        }
        int state = mPipMediaController.getPlaybackState().getState();
        boolean isPlaying = (state == PlaybackState.STATE_BUFFERING
                || state == PlaybackState.STATE_CONNECTING
                || state == PlaybackState.STATE_PLAYING
                || state == PlaybackState.STATE_FAST_FORWARDING
                || state == PlaybackState.STATE_REWINDING
                || state == PlaybackState.STATE_SKIPPING_TO_PREVIOUS
                || state == PlaybackState.STATE_SKIPPING_TO_NEXT);
        long actions = mPipMediaController.getPlaybackState().getActions();
        if (!isPlaying && ((actions & PlaybackState.ACTION_PLAY) != 0)) {
            return PLAYBACK_STATE_PAUSED;
        } else if (isPlaying && ((actions & PlaybackState.ACTION_PAUSE) != 0)) {
            return PLAYBACK_STATE_PLAYING;
        }
        return PLAYBACK_STATE_UNAVAILABLE;
!!!31427511.java!!!	isSettingsShown(inout topActivity : ComponentName) : boolean
        for (Pair<String, String> componentName : sSettingsPackageAndClassNamePairList) {
            String packageName = componentName.first;
            if (topActivity.getPackageName().equals(componentName.first)) {
                String className = componentName.second;
                if (className == null || topActivity.getClassName().equals(className)) {
                    return true;
                }
            }
        }
        return false;
!!!31428407.java!!!	getInstance() : PipManager
        if (sPipManager == null) {
            sPipManager = new PipManager();
        }
        return sPipManager;
!!!31428535.java!!!	getPipRecentsOverlayManager() : PipRecentsOverlayManager
        return mPipRecentsOverlayManager;
!!!31428663.java!!!	updatePipVisibility(inout visible : boolean) : void
        TvStatusBar statusBar = ((SystemUIApplication) mContext).getComponent(TvStatusBar.class);
        if (statusBar != null) {
            statusBar.updatePipVisibility(visible);
        }
