class RecentsTvTransitionHelper
!!!30784055.java!!!	RecentsTvTransitionHelper(inout context : Context, inout handler : Handler)
        mContext = context;
        mHandler = handler;
!!!30784183.java!!!	launchTaskFromRecents(in stack : TaskStack, in task : Task, in stackView : TaskStackHorizontalGridView, in taskView : TaskCardView, in bounds : Rect, in destinationStack : int) : void
        final ActivityOptions opts = ActivityOptions.makeBasic();
        if (bounds != null) {
            opts.setLaunchBounds(bounds.isEmpty() ? null : bounds);
        }

        final ActivityOptions.OnAnimationStartedListener animStartedListener;
        if (task.thumbnail != null && task.thumbnail.getWidth() > 0 &&
                task.thumbnail.getHeight() > 0) {
            animStartedListener = new ActivityOptions.OnAnimationStartedListener() {
                @Override
                public void onAnimationStarted() {
                    // If we are launching into another task, cancel the previous task's
                    // window transition
                    EventBus.getDefault().send(new CancelEnterRecentsWindowAnimationEvent(task));
                    EventBus.getDefault().send(new ExitRecentsWindowFirstAnimationFrameEvent());
                }
            };
        } else {
            // This is only the case if the task is not on screen (scrolled offscreen for example)
            animStartedListener = new ActivityOptions.OnAnimationStartedListener() {
                @Override
                public void onAnimationStarted() {
                    EventBus.getDefault().send(new ExitRecentsWindowFirstAnimationFrameEvent());
                }
            };
        }

        if (taskView == null) {
            // If there is no task view, then we do not need to worry about animating out occluding
            // task views, and we can launch immediately
            startTaskActivity(stack, task, taskView, opts, animStartedListener);
        } else {
            LaunchTvTaskStartedEvent launchStartedEvent = new LaunchTvTaskStartedEvent(taskView);
            EventBus.getDefault().send(launchStartedEvent);
            startTaskActivity(stack, task, taskView, opts, animStartedListener);
        }
!!!30784311.java!!!	startTaskActivity(inout stack : TaskStack, inout task : Task, inout taskView : TaskCardView, inout opts : ActivityOptions, in animStartedListener : ActivityOptions::OnAnimationStartedListener) : void
        SystemServicesProxy ssp = Recents.getSystemServices();
        if (ssp.startActivityFromRecents(mContext, task.key, task.title, opts)) {
            // Keep track of the index of the task launch
            int taskIndexFromFront = 0;
            int taskIndex = stack.indexOfStackTask(task);
            if (taskIndex > -1) {
                taskIndexFromFront = stack.getTaskCount() - taskIndex - 1;
            }
            EventBus.getDefault().send(new LaunchTaskSucceededEvent(taskIndexFromFront));
        } else {
            // Keep track of failed launches
            EventBus.getDefault().send(new LaunchTaskFailedEvent());
        }

        Rect taskRect = taskView.getFocusedThumbnailRect();
        // Check both the rect and the thumbnail for null. The rect can be null if the user
        // decides to disallow animations, so automatic scrolling does not happen properly.

        // The thumbnail can be null if the app was partially launched on TV. In this case
        // we do not override the transition.
        if (taskRect == null || task.thumbnail == null) {
            return;
        }

        IRemoteCallback.Stub callback = null;
        if (animStartedListener != null) {
            callback = new IRemoteCallback.Stub() {
                @Override
                public void sendResult(Bundle data) throws RemoteException {
                    mHandler.post(new Runnable() {
                        @Override
                        public void run() {
                            if (animStartedListener != null) {
                                animStartedListener.onAnimationStarted();
                            }
                        }
                    });
                }
            };
        }
        try {
            Bitmap thumbnail = Bitmap.createScaledBitmap(task.thumbnail, taskRect.width(),
                    taskRect.height(), false);
            WindowManagerGlobal.getWindowManagerService()
                    .overridePendingAppTransitionAspectScaledThumb(thumbnail, taskRect.left,
                            taskRect.top, taskRect.width(), taskRect.height(), callback, true);
        } catch (RemoteException e) {
            Log.w(TAG, "Failed to override transition: " + e);
        }
