class TaskStackViewScroller
!!!30841015.java!!!	TaskStackViewScroller(inout context : Context, inout cb : TaskStackViewScroller::TaskStackViewScrollerCallbacks, inout layoutAlgorithm : TaskStackLayoutAlgorithm)
        mContext = context;
        mCb = cb;
        mScroller = new OverScroller(context);
        mLayoutAlgorithm = layoutAlgorithm;
!!!30841143.java!!!	reset() : void
        mStackScrollP = 0f;
        mLastDeltaP = 0f;
!!!30841271.java!!!	resetDeltaScroll() : void
        mLastDeltaP = 0f;
!!!30841399.java!!!	getStackScroll() : float
        return mStackScrollP;
!!!30841527.java!!!	setStackScroll(in s : float) : void
        setStackScroll(s, AnimationProps.IMMEDIATE);
!!!30841655.java!!!	setDeltaStackScroll(in downP : float, in deltaP : float) : float
        float targetScroll = downP + deltaP;
        float newScroll = mLayoutAlgorithm.updateFocusStateOnScroll(downP + mLastDeltaP, targetScroll,
                mStackScrollP);
        setStackScroll(newScroll, AnimationProps.IMMEDIATE);
        mLastDeltaP = deltaP;
        return newScroll - targetScroll;
!!!30841783.java!!!	setStackScroll(in newScroll : float, inout animation : AnimationProps) : void
        float prevScroll = mStackScrollP;
        mStackScrollP = newScroll;
        if (mCb != null) {
            mCb.onStackScrollChanged(prevScroll, mStackScrollP, animation);
        }
!!!30841911.java!!!	setStackScrollToInitialState() : boolean
        float prevScroll = mStackScrollP;
        setStackScroll(mLayoutAlgorithm.mInitialScrollP);
        return Float.compare(prevScroll, mStackScrollP) != 0;
!!!30842039.java!!!	fling(in downScrollP : float, in downY : int, in y : int, in velY : int, in minY : int, in maxY : int, in overscroll : int) : void
        if (DEBUG) {
            Log.d(TAG, "fling: " + downScrollP + ", downY: " + downY + ", y: " + y +
                    ", velY: " + velY + ", minY: " + minY + ", maxY: " + maxY);
        }
        mFlingDownScrollP = downScrollP;
        mFlingDownY = downY;
        mScroller.fling(0, y, 0, velY, 0, 0, minY, maxY, 0, overscroll);
!!!30842167.java!!!	boundScroll() : boolean
        float curScroll = getStackScroll();
        float newScroll = getBoundedStackScroll(curScroll);
        if (Float.compare(newScroll, curScroll) != 0) {
            setStackScroll(newScroll);
            return true;
        }
        return false;
!!!30842295.java!!!	getBoundedStackScroll(in scroll : float) : float
        return Utilities.clamp(scroll, mLayoutAlgorithm.mMinScrollP, mLayoutAlgorithm.mMaxScrollP);
!!!30842423.java!!!	getScrollAmountOutOfBounds(in scroll : float) : float
        if (scroll < mLayoutAlgorithm.mMinScrollP) {
            return Math.abs(scroll - mLayoutAlgorithm.mMinScrollP);
        } else if (scroll > mLayoutAlgorithm.mMaxScrollP) {
            return Math.abs(scroll - mLayoutAlgorithm.mMaxScrollP);
        }
        return 0f;
!!!30842551.java!!!	isScrollOutOfBounds() : boolean
        return Float.compare(getScrollAmountOutOfBounds(mStackScrollP), 0f) != 0;
!!!30842679.java!!!	animateBoundScroll() : ObjectAnimator
        // TODO: Take duration for snap back
        float curScroll = getStackScroll();
        float newScroll = getBoundedStackScroll(curScroll);
        if (Float.compare(newScroll, curScroll) != 0) {
            // Start a new scroll animation
            animateScroll(newScroll, null /* postScrollRunnable */);
        }
        return mScrollAnimator;
!!!30842807.java!!!	animateScroll(in newScroll : float, in postRunnable : Runnable) : void
        int duration = mContext.getResources().getInteger(
                R.integer.recents_animate_task_stack_scroll_duration);
        animateScroll(newScroll, duration, postRunnable);
!!!30842935.java!!!	animateScroll(in newScroll : float, in duration : int, in postRunnable : Runnable) : void
        // Finish any current scrolling animations
        if (mScrollAnimator != null && mScrollAnimator.isRunning()) {
            setStackScroll(mFinalAnimatedScroll);
            mScroller.forceFinished(true);
        }
        stopScroller();
        stopBoundScrollAnimation();

        if (Float.compare(mStackScrollP, newScroll) != 0) {
            mFinalAnimatedScroll = newScroll;
            mScrollAnimator = ObjectAnimator.ofFloat(this, STACK_SCROLL, getStackScroll(), newScroll);
            mScrollAnimator.setDuration(duration);
            mScrollAnimator.setInterpolator(Interpolators.LINEAR_OUT_SLOW_IN);
            mScrollAnimator.addListener(new AnimatorListenerAdapter() {
                @Override
                public void onAnimationEnd(Animator animation) {
                    if (postRunnable != null) {
                        postRunnable.run();
                    }
                    mScrollAnimator.removeAllListeners();
                }
            });
            mScrollAnimator.start();
        } else {
            if (postRunnable != null) {
                postRunnable.run();
            }
        }
!!!30843063.java!!!	stopBoundScrollAnimation() : void
        Utilities.cancelAnimationWithoutCallbacks(mScrollAnimator);
!!!30843191.java!!!	computeScroll() : boolean
        if (mScroller.computeScrollOffset()) {
            float deltaP = mLayoutAlgorithm.getDeltaPForY(mFlingDownY, mScroller.getCurrY());
            mFlingDownScrollP += setDeltaStackScroll(mFlingDownScrollP, deltaP);
            if (DEBUG) {
                Log.d(TAG, "computeScroll: " + (mFlingDownScrollP + deltaP));
            }
            return true;
        }
        return false;
!!!30843319.java!!!	isScrolling() : boolean
        return !mScroller.isFinished();
!!!30843447.java!!!	stopScroller() : void
        if (!mScroller.isFinished()) {
            mScroller.abortAnimation();
        }
!!!30843575.java!!!	dump(inout prefix : String, inout writer : PrintWriter) : void
        writer.print(prefix); writer.print(TAG);
        writer.print(" stackScroll:"); writer.print(mStackScrollP);
        writer.println();
