class ShortcutKeyDispatcher
!!!30878775.java!!!	registerShortcutKey(in shortcutCode : long) : void
        try {
            mWindowManagerService.registerShortcutKey(shortcutCode, mShortcutKeyServiceProxy);
        } catch (RemoteException e) {
            // Do nothing
        }
!!!30878903.java!!!	onShortcutKeyPressed(in shortcutCode : long) : void
        int orientation = mContext.getResources().getConfiguration().orientation;
        if ((shortcutCode == SC_DOCK_LEFT || shortcutCode == SC_DOCK_RIGHT)
                && orientation == Configuration.ORIENTATION_LANDSCAPE) {
            handleDockKey(shortcutCode);
        }
!!!30879031.java!!!	start() : void
        registerShortcutKey(SC_DOCK_LEFT);
        registerShortcutKey(SC_DOCK_RIGHT);
!!!30879159.java!!!	handleDockKey(in shortcutCode : long) : void
        try {
            int dockSide = mWindowManagerService.getDockedStackSide();
            if (dockSide == WindowManager.DOCKED_INVALID) {
                // If there is no window docked, we dock the top-most window.
                Recents recents = getComponent(Recents.class);
                int dockMode = (shortcutCode == SC_DOCK_LEFT)
                        ? ActivityManager.DOCKED_STACK_CREATE_MODE_TOP_OR_LEFT
                        : ActivityManager.DOCKED_STACK_CREATE_MODE_BOTTOM_OR_RIGHT;
                recents.dockTopTask(NavigationBarGestureHelper.DRAG_MODE_NONE, dockMode, null,
                        MetricsEvent.WINDOW_DOCK_SHORTCUTS);
            } else {
                // If there is already a docked window, we respond by resizing the docking pane.
                DividerView dividerView = getComponent(Divider.class).getView();
                DividerSnapAlgorithm snapAlgorithm = dividerView.getSnapAlgorithm();
                int dividerPosition = dividerView.getCurrentPosition();
                DividerSnapAlgorithm.SnapTarget currentTarget =
                        snapAlgorithm.calculateNonDismissingSnapTarget(dividerPosition);
                int increment = (shortcutCode == SC_DOCK_LEFT) ? -1 : 1;
                DividerSnapAlgorithm.SnapTarget target = snapAlgorithm.cycleNonDismissTarget(
                        currentTarget, increment);
                dividerView.startDragging(true /* animate */, false /* touching */);
                dividerView.stopDragging(target.position, 0f, true /* avoidDismissStart */,
                        true /* logMetrics */);
            }
        } catch (RemoteException e) {
            Log.e(TAG, "handleDockKey() failed.");
        }
