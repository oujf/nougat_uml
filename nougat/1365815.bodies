class NotificationGroupManager
!!!31135415.java!!!	setOnGroupChangeListener(inout listener : NotificationGroupManager::OnGroupChangeListener) : void
        mListener = listener;
!!!31135543.java!!!	isGroupExpanded(inout sbn : StatusBarNotification) : boolean
        NotificationGroup group = mGroupMap.get(getGroupKey(sbn));
        if (group == null) {
            return false;
        }
        return group.expanded;
!!!31135671.java!!!	setGroupExpanded(inout sbn : StatusBarNotification, inout expanded : boolean) : void
        NotificationGroup group = mGroupMap.get(getGroupKey(sbn));
        if (group == null) {
            return;
        }
        setGroupExpanded(group, expanded);
!!!31135799.java!!!	setGroupExpanded(inout group : NotificationGroupManager::NotificationGroup, inout expanded : boolean) : void
        group.expanded = expanded;
        if (group.summary != null) {
            mListener.onGroupExpansionChanged(group.summary.row, expanded);
        }
!!!31135927.java!!!	onEntryRemoved(inout removed : NotificationData::Entry) : void
        onEntryRemovedInternal(removed, removed.notification);
        mIsolatedEntries.remove(removed.key);
!!!31136055.java!!!	onEntryRemovedInternal(inout removed : NotificationData::Entry, in sbn : StatusBarNotification) : void
        String groupKey = getGroupKey(sbn);
        final NotificationGroup group = mGroupMap.get(groupKey);
        if (group == null) {
            // When an app posts 2 different notifications as summary of the same group, then a
            // cancellation of the first notification removes this group.
            // This situation is not supported and we will not allow such notifications anymore in
            // the close future. See b/23676310 for reference.
            return;
        }
        if (isGroupChild(sbn)) {
            group.children.remove(removed);
        } else {
            group.summary = null;
        }
        updateSuppression(group);
        if (group.children.isEmpty()) {
            if (group.summary == null) {
                mGroupMap.remove(groupKey);
            }
        }
!!!31136183.java!!!	onEntryAdded(in added : NotificationData::Entry) : void
        final StatusBarNotification sbn = added.notification;
        boolean isGroupChild = isGroupChild(sbn);
        String groupKey = getGroupKey(sbn);
        NotificationGroup group = mGroupMap.get(groupKey);
        if (group == null) {
            group = new NotificationGroup();
            mGroupMap.put(groupKey, group);
        }
        if (isGroupChild) {
            group.children.add(added);
            updateSuppression(group);
        } else {
            group.summary = added;
            group.expanded = added.row.areChildrenExpanded();
            updateSuppression(group);
            if (!group.children.isEmpty()) {
                HashSet<NotificationData.Entry> childrenCopy =
                        (HashSet<NotificationData.Entry>) group.children.clone();
                for (NotificationData.Entry child : childrenCopy) {
                    onEntryBecomingChild(child);
                }
                mListener.onGroupCreatedFromChildren(group);
            }
        }
!!!31136311.java!!!	onEntryBecomingChild(inout entry : NotificationData::Entry) : void
        if (entry.row.isHeadsUp()) {
            onHeadsUpStateChanged(entry, true);
        }
!!!31136439.java!!!	onEntryBundlingUpdated(in updated : NotificationData::Entry, in overrideGroupKey : String) : void
        final StatusBarNotification oldSbn = updated.notification.clone();
        if (!Objects.equals(oldSbn.getOverrideGroupKey(), overrideGroupKey)) {
            updated.notification.setOverrideGroupKey(overrideGroupKey);
            onEntryUpdated(updated, oldSbn);
        }
!!!31136567.java!!!	updateSuppression(inout group : NotificationGroupManager::NotificationGroup) : void
        if (group == null) {
            return;
        }
        boolean prevSuppressed = group.suppressed;
        group.suppressed = group.summary != null && !group.expanded
                && (group.children.size() == 1
                || (group.children.size() == 0
                        && group.summary.notification.getNotification().isGroupSummary()
                        && hasIsolatedChildren(group)));
        if (prevSuppressed != group.suppressed) {
            if (group.suppressed) {
                handleSuppressedSummaryHeadsUpped(group.summary);
            }
            mListener.onGroupsChanged();
        }
!!!31136695.java!!!	hasIsolatedChildren(inout group : NotificationGroupManager::NotificationGroup) : boolean
        return getNumberOfIsolatedChildren(group.summary.notification.getGroupKey()) != 0;
!!!31136823.java!!!	getNumberOfIsolatedChildren(inout groupKey : String) : int
        int count = 0;
        for (StatusBarNotification sbn : mIsolatedEntries.values()) {
            if (sbn.getGroupKey().equals(groupKey) && isIsolated(sbn)) {
                count++;
            }
        }
        return count;
!!!31136951.java!!!	getIsolatedChild(inout groupKey : String) : NotificationData::Entry
        for (StatusBarNotification sbn : mIsolatedEntries.values()) {
            if (sbn.getGroupKey().equals(groupKey) && isIsolated(sbn)) {
                return mGroupMap.get(sbn.getKey()).summary;
            }
        }
        return null;
!!!31137079.java!!!	onEntryUpdated(inout entry : NotificationData::Entry, inout oldNotification : StatusBarNotification) : void
        if (mGroupMap.get(getGroupKey(oldNotification)) != null) {
            onEntryRemovedInternal(entry, oldNotification);
        }
        onEntryAdded(entry);
        if (isIsolated(entry.notification)) {
            mIsolatedEntries.put(entry.key, entry.notification);
            String oldKey = oldNotification.getGroupKey();
            String newKey = entry.notification.getGroupKey();
            if (!oldKey.equals(newKey)) {
                updateSuppression(mGroupMap.get(oldKey));
                updateSuppression(mGroupMap.get(newKey));
            }
        } else if (!isGroupChild(oldNotification) && isGroupChild(entry.notification)) {
            onEntryBecomingChild(entry);
        }
!!!31137207.java!!!	isSummaryOfSuppressedGroup(inout sbn : StatusBarNotification) : boolean
        return isGroupSuppressed(getGroupKey(sbn)) && sbn.getNotification().isGroupSummary();
!!!31137335.java!!!	isOnlyChild(inout sbn : StatusBarNotification) : boolean
        return !sbn.getNotification().isGroupSummary()
                && getTotalNumberOfChildren(sbn) == 1;
!!!31137463.java!!!	isOnlyChildInGroup(inout sbn : StatusBarNotification) : boolean
        if (!isOnlyChild(sbn)) {
            return false;
        }
        ExpandableNotificationRow logicalGroupSummary = getLogicalGroupSummary(sbn);
        return logicalGroupSummary != null
                && !logicalGroupSummary.getStatusBarNotification().equals(sbn);
!!!31137591.java!!!	getTotalNumberOfChildren(inout sbn : StatusBarNotification) : int
        int isolatedChildren = getNumberOfIsolatedChildren(sbn.getGroupKey());
        NotificationGroup group = mGroupMap.get(sbn.getGroupKey());
        int realChildren = group != null ? group.children.size() : 0;
        return isolatedChildren + realChildren;
!!!31137719.java!!!	isGroupSuppressed(inout groupKey : String) : boolean
        NotificationGroup group = mGroupMap.get(groupKey);
        return group != null && group.suppressed;
!!!31137847.java!!!	setStatusBarState(in newState : int) : void
        if (mBarState == newState) {
            return;
        }
        mBarState = newState;
        if (mBarState == StatusBarState.KEYGUARD) {
            collapseAllGroups();
        }
!!!31137975.java!!!	collapseAllGroups() : void
        // Because notifications can become isolated when the group becomes suppressed it can
        // lead to concurrent modifications while looping. We need to make a copy.
        ArrayList<NotificationGroup> groupCopy = new ArrayList<>(mGroupMap.values());
        int size = groupCopy.size();
        for (int i = 0; i < size; i++) {
            NotificationGroup group =  groupCopy.get(i);
            if (group.expanded) {
                setGroupExpanded(group, false);
            }
            updateSuppression(group);
        }
!!!31138103.java!!!	isChildInGroupWithSummary(inout sbn : StatusBarNotification) : boolean
        if (!isGroupChild(sbn)) {
            return false;
        }
        NotificationGroup group = mGroupMap.get(getGroupKey(sbn));
        if (group == null || group.summary == null || group.suppressed) {
            return false;
        }
        if (group.children.isEmpty()) {
            // If the suppression of a group changes because the last child was removed, this can
            // still be called temporarily because the child hasn't been fully removed yet. Let's
            // make sure we still return false in that case.
            return false;
        }
        return true;
!!!31138231.java!!!	isSummaryOfGroup(inout sbn : StatusBarNotification) : boolean
        if (!isGroupSummary(sbn)) {
            return false;
        }
        NotificationGroup group = mGroupMap.get(getGroupKey(sbn));
        if (group == null) {
            return false;
        }
        return !group.children.isEmpty();
!!!31138359.java!!!	getGroupSummary(inout sbn : StatusBarNotification) : ExpandableNotificationRow
        return getGroupSummary(getGroupKey(sbn));
!!!31138487.java!!!	getLogicalGroupSummary(inout sbn : StatusBarNotification) : ExpandableNotificationRow
        return getGroupSummary(sbn.getGroupKey());
!!!31138615.java!!!	getGroupSummary(inout groupKey : String) : ExpandableNotificationRow
        NotificationGroup group = mGroupMap.get(groupKey);
        return group == null ? null
                : group.summary == null ? null
                        : group.summary.row;
!!!31138743.java!!!	toggleGroupExpansion(inout sbn : StatusBarNotification) : boolean
        NotificationGroup group = mGroupMap.get(getGroupKey(sbn));
        if (group == null) {
            return false;
        }
        setGroupExpanded(group, !group.expanded);
        return group.expanded;
!!!31138871.java!!!	isIsolated(inout sbn : StatusBarNotification) : boolean
        return mIsolatedEntries.containsKey(sbn.getKey());
!!!31138999.java!!!	isGroupSummary(inout sbn : StatusBarNotification) : boolean
        if (isIsolated(sbn)) {
            return true;
        }
        return sbn.getNotification().isGroupSummary();
!!!31139127.java!!!	isGroupChild(inout sbn : StatusBarNotification) : boolean
        if (isIsolated(sbn)) {
            return false;
        }
        return sbn.isGroup() && !sbn.getNotification().isGroupSummary();
!!!31139255.java!!!	getGroupKey(inout sbn : StatusBarNotification) : String
        if (isIsolated(sbn)) {
            return sbn.getKey();
        }
        return sbn.getGroupKey();
!!!31139767.java!!!	onHeadsUpStateChanged(inout entry : NotificationData::Entry, inout isHeadsUp : boolean) : void
        final StatusBarNotification sbn = entry.notification;
        if (entry.row.isHeadsUp()) {
            if (shouldIsolate(sbn)) {
                // We will be isolated now, so lets update the groups
                onEntryRemovedInternal(entry, entry.notification);

                mIsolatedEntries.put(sbn.getKey(), sbn);

                onEntryAdded(entry);
                // We also need to update the suppression of the old group, because this call comes
                // even before the groupManager knows about the notification at all.
                // When the notification gets added afterwards it is already isolated and therefore
                // it doesn't lead to an update.
                updateSuppression(mGroupMap.get(entry.notification.getGroupKey()));
                mListener.onGroupsChanged();
            } else {
                handleSuppressedSummaryHeadsUpped(entry);
            }
        } else {
            if (mIsolatedEntries.containsKey(sbn.getKey())) {
                // not isolated anymore, we need to update the groups
                onEntryRemovedInternal(entry, entry.notification);
                mIsolatedEntries.remove(sbn.getKey());
                onEntryAdded(entry);
                mListener.onGroupsChanged();
            }
        }
!!!31139895.java!!!	handleSuppressedSummaryHeadsUpped(inout entry : NotificationData::Entry) : void
        StatusBarNotification sbn = entry.notification;
        if (!isGroupSuppressed(sbn.getGroupKey())
                || !sbn.getNotification().isGroupSummary()
                || !entry.row.isHeadsUp()) {
            return;
        }
        // The parent of a suppressed group got huned, lets hun the child!
        NotificationGroup notificationGroup = mGroupMap.get(sbn.getGroupKey());
        if (notificationGroup != null) {
            Iterator<NotificationData.Entry> iterator = notificationGroup.children.iterator();
            NotificationData.Entry child = iterator.hasNext() ? iterator.next() : null;
            if (child == null) {
                child = getIsolatedChild(sbn.getGroupKey());
            }
            if (child != null) {
                if (mHeadsUpManager.isHeadsUp(child.key)) {
                    mHeadsUpManager.updateNotification(child, true);
                } else {
                    mHeadsUpManager.showNotification(child);
                }
            }
        }
        mHeadsUpManager.releaseImmediately(entry.key);
!!!31140023.java!!!	shouldIsolate(inout sbn : StatusBarNotification) : boolean
        NotificationGroup notificationGroup = mGroupMap.get(sbn.getGroupKey());
        return (sbn.isGroup() && !sbn.getNotification().isGroupSummary())
                && (sbn.getNotification().fullScreenIntent != null
                        || notificationGroup == null
                        || !notificationGroup.expanded
                        || isGroupNotFullyVisible(notificationGroup));
!!!31140151.java!!!	isGroupNotFullyVisible(inout notificationGroup : NotificationGroupManager::NotificationGroup) : boolean
        return notificationGroup.summary == null
                || notificationGroup.summary.row.getClipTopAmount() > 0
                || notificationGroup.summary.row.getTranslationY() < 0;
!!!31140279.java!!!	setHeadsUpManager(inout headsUpManager : HeadsUpManager) : void
        mHeadsUpManager = headsUpManager;
!!!31140407.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        pw.println("GroupManager state:");
        pw.println("  number of groups: " +  mGroupMap.size());
        for (Map.Entry<String, NotificationGroup>  entry : mGroupMap.entrySet()) {
            pw.println("\n    key: " + entry.getKey()); pw.println(entry.getValue());
        }
        pw.println("\n    isolated entries: " +  mIsolatedEntries.size());
        for (Map.Entry<String, StatusBarNotification> entry : mIsolatedEntries.entrySet()) {
            pw.print("      "); pw.print(entry.getKey());
            pw.print(", "); pw.println(entry.getValue());
        }
