class KeyEvent
!!!185655.java!!!	getMaxKeyCode() : int
        return LAST_KEYCODE;
!!!185783.java!!!	getDeadChar(in accent : int, in c : int) : int
        return KeyCharacterMap.getDeadChar(accent, c);
!!!186807.java!!!	KeyEvent(in action : int, in code : int)
        mAction = action;
        mKeyCode = code;
        mRepeatCount = 0;
        mDeviceId = KeyCharacterMap.VIRTUAL_KEYBOARD;
!!!186935.java!!!	KeyEvent(in downTime : long, in eventTime : long, in action : int, in code : int, in repeat : int)
        mDownTime = downTime;
        mEventTime = eventTime;
        mAction = action;
        mKeyCode = code;
        mRepeatCount = repeat;
        mDeviceId = KeyCharacterMap.VIRTUAL_KEYBOARD;
!!!187063.java!!!	KeyEvent(in downTime : long, in eventTime : long, in action : int, in code : int, in repeat : int, in metaState : int)
        mDownTime = downTime;
        mEventTime = eventTime;
        mAction = action;
        mKeyCode = code;
        mRepeatCount = repeat;
        mMetaState = metaState;
        mDeviceId = KeyCharacterMap.VIRTUAL_KEYBOARD;
!!!187191.java!!!	KeyEvent(in downTime : long, in eventTime : long, in action : int, in code : int, in repeat : int, in metaState : int, in deviceId : int, in scancode : int)
        mDownTime = downTime;
        mEventTime = eventTime;
        mAction = action;
        mKeyCode = code;
        mRepeatCount = repeat;
        mMetaState = metaState;
        mDeviceId = deviceId;
        mScanCode = scancode;
!!!187319.java!!!	KeyEvent(in downTime : long, in eventTime : long, in action : int, in code : int, in repeat : int, in metaState : int, in deviceId : int, in scancode : int, in flags : int)
        mDownTime = downTime;
        mEventTime = eventTime;
        mAction = action;
        mKeyCode = code;
        mRepeatCount = repeat;
        mMetaState = metaState;
        mDeviceId = deviceId;
        mScanCode = scancode;
        mFlags = flags;
!!!187447.java!!!	KeyEvent(in downTime : long, in eventTime : long, in action : int, in code : int, in repeat : int, in metaState : int, in deviceId : int, in scancode : int, in flags : int, in source : int)
        mDownTime = downTime;
        mEventTime = eventTime;
        mAction = action;
        mKeyCode = code;
        mRepeatCount = repeat;
        mMetaState = metaState;
        mDeviceId = deviceId;
        mScanCode = scancode;
        mFlags = flags;
        mSource = source;
!!!187575.java!!!	KeyEvent(in time : long, inout characters : String, in deviceId : int, in flags : int)
        mDownTime = time;
        mEventTime = time;
        mCharacters = characters;
        mAction = ACTION_MULTIPLE;
        mKeyCode = KEYCODE_UNKNOWN;
        mRepeatCount = 0;
        mDeviceId = deviceId;
        mFlags = flags;
        mSource = InputDevice.SOURCE_KEYBOARD;
!!!187703.java!!!	KeyEvent(inout origEvent : KeyEvent)
        mDownTime = origEvent.mDownTime;
        mEventTime = origEvent.mEventTime;
        mAction = origEvent.mAction;
        mKeyCode = origEvent.mKeyCode;
        mRepeatCount = origEvent.mRepeatCount;
        mMetaState = origEvent.mMetaState;
        mDeviceId = origEvent.mDeviceId;
        mSource = origEvent.mSource;
        mScanCode = origEvent.mScanCode;
        mFlags = origEvent.mFlags;
        mCharacters = origEvent.mCharacters;
!!!187831.java!!!	KeyEvent(inout origEvent : KeyEvent, in eventTime : long, in newRepeat : int)
        mDownTime = origEvent.mDownTime;
        mEventTime = eventTime;
        mAction = origEvent.mAction;
        mKeyCode = origEvent.mKeyCode;
        mRepeatCount = newRepeat;
        mMetaState = origEvent.mMetaState;
        mDeviceId = origEvent.mDeviceId;
        mSource = origEvent.mSource;
        mScanCode = origEvent.mScanCode;
        mFlags = origEvent.mFlags;
        mCharacters = origEvent.mCharacters;
!!!187959.java!!!	obtain() : KeyEvent
        final KeyEvent ev;
        synchronized (gRecyclerLock) {
            ev = gRecyclerTop;
            if (ev == null) {
                return new KeyEvent();
            }
            gRecyclerTop = ev.mNext;
            gRecyclerUsed -= 1;
        }
        ev.mNext = null;
        ev.prepareForReuse();
        return ev;
!!!188087.java!!!	obtain(in downTime : long, in eventTime : long, in action : int, in code : int, in repeat : int, in metaState : int, in deviceId : int, in scancode : int, in flags : int, in source : int, inout characters : String) : KeyEvent
        KeyEvent ev = obtain();
        ev.mDownTime = downTime;
        ev.mEventTime = eventTime;
        ev.mAction = action;
        ev.mKeyCode = code;
        ev.mRepeatCount = repeat;
        ev.mMetaState = metaState;
        ev.mDeviceId = deviceId;
        ev.mScanCode = scancode;
        ev.mFlags = flags;
        ev.mSource = source;
        ev.mCharacters = characters;
        return ev;
!!!188215.java!!!	obtain(inout other : KeyEvent) : KeyEvent
        KeyEvent ev = obtain();
        ev.mDownTime = other.mDownTime;
        ev.mEventTime = other.mEventTime;
        ev.mAction = other.mAction;
        ev.mKeyCode = other.mKeyCode;
        ev.mRepeatCount = other.mRepeatCount;
        ev.mMetaState = other.mMetaState;
        ev.mDeviceId = other.mDeviceId;
        ev.mScanCode = other.mScanCode;
        ev.mFlags = other.mFlags;
        ev.mSource = other.mSource;
        ev.mCharacters = other.mCharacters;
        return ev;
!!!188343.java!!!	copy() : KeyEvent
        return obtain(this);
!!!188471.java!!!	recycle() : void
        super.recycle();
        mCharacters = null;

        synchronized (gRecyclerLock) {
            if (gRecyclerUsed < MAX_RECYCLED) {
                gRecyclerUsed++;
                mNext = gRecyclerTop;
                gRecyclerTop = this;
            }
        }
!!!188599.java!!!	recycleIfNeededAfterDispatch() : void
        // Do nothing.
!!!188727.java!!!	changeTimeRepeat(inout event : KeyEvent, in eventTime : long, in newRepeat : int) : KeyEvent
        return new KeyEvent(event, eventTime, newRepeat);
!!!188855.java!!!	changeTimeRepeat(inout event : KeyEvent, in eventTime : long, in newRepeat : int, in newFlags : int) : KeyEvent
        KeyEvent ret = new KeyEvent(event);
        ret.mEventTime = eventTime;
        ret.mRepeatCount = newRepeat;
        ret.mFlags = newFlags;
        return ret;
!!!188983.java!!!	KeyEvent(inout origEvent : KeyEvent, in action : int)
        mDownTime = origEvent.mDownTime;
        mEventTime = origEvent.mEventTime;
        mAction = action;
        mKeyCode = origEvent.mKeyCode;
        mRepeatCount = origEvent.mRepeatCount;
        mMetaState = origEvent.mMetaState;
        mDeviceId = origEvent.mDeviceId;
        mSource = origEvent.mSource;
        mScanCode = origEvent.mScanCode;
        mFlags = origEvent.mFlags;
        // Don't copy mCharacters, since one way or the other we'll lose it
        // when changing the action.
!!!189111.java!!!	changeAction(inout event : KeyEvent, in action : int) : KeyEvent
        return new KeyEvent(event, action);
!!!189239.java!!!	changeFlags(inout event : KeyEvent, in flags : int) : KeyEvent
        event = new KeyEvent(event);
        event.mFlags = flags;
        return event;
!!!189367.java!!!	isTainted() : boolean
        return (mFlags & FLAG_TAINTED) != 0;
!!!189495.java!!!	setTainted(inout tainted : boolean) : void
        mFlags = tainted ? mFlags | FLAG_TAINTED : mFlags & ~FLAG_TAINTED;
!!!189623.java!!!	isDown() : boolean
        return mAction == ACTION_DOWN;
!!!189751.java!!!	isSystem() : boolean
        return isSystemKey(mKeyCode);
!!!189879.java!!!	isWakeKey() : boolean
        return isWakeKey(mKeyCode);
!!!190007.java!!!	isGamepadButton(in keyCode : int) : boolean
        switch (keyCode) {
            case KeyEvent.KEYCODE_BUTTON_A:
            case KeyEvent.KEYCODE_BUTTON_B:
            case KeyEvent.KEYCODE_BUTTON_C:
            case KeyEvent.KEYCODE_BUTTON_X:
            case KeyEvent.KEYCODE_BUTTON_Y:
            case KeyEvent.KEYCODE_BUTTON_Z:
            case KeyEvent.KEYCODE_BUTTON_L1:
            case KeyEvent.KEYCODE_BUTTON_R1:
            case KeyEvent.KEYCODE_BUTTON_L2:
            case KeyEvent.KEYCODE_BUTTON_R2:
            case KeyEvent.KEYCODE_BUTTON_THUMBL:
            case KeyEvent.KEYCODE_BUTTON_THUMBR:
            case KeyEvent.KEYCODE_BUTTON_START:
            case KeyEvent.KEYCODE_BUTTON_SELECT:
            case KeyEvent.KEYCODE_BUTTON_MODE:
            case KeyEvent.KEYCODE_BUTTON_1:
            case KeyEvent.KEYCODE_BUTTON_2:
            case KeyEvent.KEYCODE_BUTTON_3:
            case KeyEvent.KEYCODE_BUTTON_4:
            case KeyEvent.KEYCODE_BUTTON_5:
            case KeyEvent.KEYCODE_BUTTON_6:
            case KeyEvent.KEYCODE_BUTTON_7:
            case KeyEvent.KEYCODE_BUTTON_8:
            case KeyEvent.KEYCODE_BUTTON_9:
            case KeyEvent.KEYCODE_BUTTON_10:
            case KeyEvent.KEYCODE_BUTTON_11:
            case KeyEvent.KEYCODE_BUTTON_12:
            case KeyEvent.KEYCODE_BUTTON_13:
            case KeyEvent.KEYCODE_BUTTON_14:
            case KeyEvent.KEYCODE_BUTTON_15:
            case KeyEvent.KEYCODE_BUTTON_16:
                return true;
            default:
                return false;
        }
!!!190135.java!!!	isConfirmKey(in keyCode : int) : boolean
        switch (keyCode) {
            case KeyEvent.KEYCODE_DPAD_CENTER:
            case KeyEvent.KEYCODE_ENTER:
            case KeyEvent.KEYCODE_SPACE:
            case KeyEvent.KEYCODE_NUMPAD_ENTER:
                return true;
            default:
                return false;
        }
!!!190263.java!!!	isMediaKey(in keyCode : int) : boolean
        switch (keyCode) {
            case KeyEvent.KEYCODE_MEDIA_PLAY:
            case KeyEvent.KEYCODE_MEDIA_PAUSE:
            case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
            case KeyEvent.KEYCODE_MUTE:
            case KeyEvent.KEYCODE_HEADSETHOOK:
            case KeyEvent.KEYCODE_MEDIA_STOP:
            case KeyEvent.KEYCODE_MEDIA_NEXT:
            case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
            case KeyEvent.KEYCODE_MEDIA_REWIND:
            case KeyEvent.KEYCODE_MEDIA_RECORD:
            case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
                return true;
        }
        return false;
!!!190391.java!!!	isSystemKey(in keyCode : int) : boolean
        switch (keyCode) {
            case KeyEvent.KEYCODE_MENU:
            case KeyEvent.KEYCODE_SOFT_RIGHT:
            case KeyEvent.KEYCODE_HOME:
            case KeyEvent.KEYCODE_BACK:
            case KeyEvent.KEYCODE_CALL:
            case KeyEvent.KEYCODE_ENDCALL:
            case KeyEvent.KEYCODE_VOLUME_UP:
            case KeyEvent.KEYCODE_VOLUME_DOWN:
            case KeyEvent.KEYCODE_VOLUME_MUTE:
            case KeyEvent.KEYCODE_MUTE:
            case KeyEvent.KEYCODE_POWER:
            case KeyEvent.KEYCODE_HEADSETHOOK:
            case KeyEvent.KEYCODE_MEDIA_PLAY:
            case KeyEvent.KEYCODE_MEDIA_PAUSE:
            case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
            case KeyEvent.KEYCODE_MEDIA_STOP:
            case KeyEvent.KEYCODE_MEDIA_NEXT:
            case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
            case KeyEvent.KEYCODE_MEDIA_REWIND:
            case KeyEvent.KEYCODE_MEDIA_RECORD:
            case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
            case KeyEvent.KEYCODE_CAMERA:
            case KeyEvent.KEYCODE_FOCUS:
            case KeyEvent.KEYCODE_SEARCH:
            case KeyEvent.KEYCODE_BRIGHTNESS_DOWN:
            case KeyEvent.KEYCODE_BRIGHTNESS_UP:
            case KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK:
                return true;
        }

        return false;
!!!190519.java!!!	isWakeKey(in keyCode : int) : boolean
        switch (keyCode) {
            case KeyEvent.KEYCODE_BACK:
            case KeyEvent.KEYCODE_MENU:
            case KeyEvent.KEYCODE_WAKEUP:
            case KeyEvent.KEYCODE_PAIRING:
            case KeyEvent.KEYCODE_STEM_1:
            case KeyEvent.KEYCODE_STEM_2:
            case KeyEvent.KEYCODE_STEM_3:
                return true;
        }
        return false;
!!!190647.java!!!	isMetaKey(in keyCode : int) : boolean
        return keyCode == KeyEvent.KEYCODE_META_LEFT || keyCode == KeyEvent.KEYCODE_META_RIGHT;
!!!190775.java!!!	isAltKey(in keyCode : int) : boolean
        return keyCode == KeyEvent.KEYCODE_ALT_LEFT || keyCode == KeyEvent.KEYCODE_ALT_RIGHT;
!!!190903.java!!!	getDeviceId() : int
        return mDeviceId;
!!!191031.java!!!	getSource() : int
        return mSource;
!!!191159.java!!!	setSource(in source : int) : void
        mSource = source;
!!!191287.java!!!	getMetaState() : int
        return mMetaState;
!!!191415.java!!!	getModifiers() : int
        return normalizeMetaState(mMetaState) & META_MODIFIER_MASK;
!!!191543.java!!!	getFlags() : int
        return mFlags;
!!!191671.java!!!	getModifierMetaStateMask() : int
        return META_MODIFIER_MASK;
!!!191799.java!!!	isModifierKey(in keyCode : int) : boolean
        switch (keyCode) {
            case KEYCODE_SHIFT_LEFT:
            case KEYCODE_SHIFT_RIGHT:
            case KEYCODE_ALT_LEFT:
            case KEYCODE_ALT_RIGHT:
            case KEYCODE_CTRL_LEFT:
            case KEYCODE_CTRL_RIGHT:
            case KEYCODE_META_LEFT:
            case KEYCODE_META_RIGHT:
            case KEYCODE_SYM:
            case KEYCODE_NUM:
            case KEYCODE_FUNCTION:
                return true;
            default:
                return false;
        }
!!!191927.java!!!	normalizeMetaState(in metaState : int) : int
        if ((metaState & (META_SHIFT_LEFT_ON | META_SHIFT_RIGHT_ON)) != 0) {
            metaState |= META_SHIFT_ON;
        }
        if ((metaState & (META_ALT_LEFT_ON | META_ALT_RIGHT_ON)) != 0) {
            metaState |= META_ALT_ON;
        }
        if ((metaState & (META_CTRL_LEFT_ON | META_CTRL_RIGHT_ON)) != 0) {
            metaState |= META_CTRL_ON;
        }
        if ((metaState & (META_META_LEFT_ON | META_META_RIGHT_ON)) != 0) {
            metaState |= META_META_ON;
        }
        if ((metaState & MetaKeyKeyListener.META_CAP_LOCKED) != 0) {
            metaState |= META_CAPS_LOCK_ON;
        }
        if ((metaState & MetaKeyKeyListener.META_ALT_LOCKED) != 0) {
            metaState |= META_ALT_ON;
        }
        if ((metaState & MetaKeyKeyListener.META_SYM_LOCKED) != 0) {
            metaState |= META_SYM_ON;
        }
        return metaState & META_ALL_MASK;
!!!192055.java!!!	metaStateHasNoModifiers(in metaState : int) : boolean
        return (normalizeMetaState(metaState) & META_MODIFIER_MASK) == 0;
!!!192183.java!!!	metaStateHasModifiers(in metaState : int, in modifiers : int) : boolean
        // Note: For forward compatibility, we allow the parameter to contain meta states
        //       that we do not recognize but we explicitly disallow meta states that
        //       are not valid modifiers.
        if ((modifiers & META_INVALID_MODIFIER_MASK) != 0) {
            throw new IllegalArgumentException("modifiers must not contain "
                    + "META_CAPS_LOCK_ON, META_NUM_LOCK_ON, META_SCROLL_LOCK_ON, "
                    + "META_CAP_LOCKED, META_ALT_LOCKED, META_SYM_LOCKED, "
                    + "or META_SELECTING");
        }

        metaState = normalizeMetaState(metaState) & META_MODIFIER_MASK;
        metaState = metaStateFilterDirectionalModifiers(metaState, modifiers,
                META_SHIFT_ON, META_SHIFT_LEFT_ON, META_SHIFT_RIGHT_ON);
        metaState = metaStateFilterDirectionalModifiers(metaState, modifiers,
                META_ALT_ON, META_ALT_LEFT_ON, META_ALT_RIGHT_ON);
        metaState = metaStateFilterDirectionalModifiers(metaState, modifiers,
                META_CTRL_ON, META_CTRL_LEFT_ON, META_CTRL_RIGHT_ON);
        metaState = metaStateFilterDirectionalModifiers(metaState, modifiers,
                META_META_ON, META_META_LEFT_ON, META_META_RIGHT_ON);
        return metaState == modifiers;
!!!192311.java!!!	metaStateFilterDirectionalModifiers(in metaState : int, in modifiers : int, in basic : int, in left : int, in right : int) : int
        final boolean wantBasic = (modifiers & basic) != 0;
        final int directional = left | right;
        final boolean wantLeftOrRight = (modifiers & directional) != 0;

        if (wantBasic) {
            if (wantLeftOrRight) {
                throw new IllegalArgumentException("modifiers must not contain "
                        + metaStateToString(basic) + " combined with "
                        + metaStateToString(left) + " or " + metaStateToString(right));
            }
            return metaState & ~directional;
        } else if (wantLeftOrRight) {
            return metaState & ~basic;
        } else {
            return metaState;
        }
!!!192439.java!!!	hasNoModifiers() : boolean
        return metaStateHasNoModifiers(mMetaState);
!!!192567.java!!!	hasModifiers(in modifiers : int) : boolean
        return metaStateHasModifiers(mMetaState, modifiers);
!!!192695.java!!!	isAltPressed() : boolean
        return (mMetaState & META_ALT_ON) != 0;
!!!192823.java!!!	isShiftPressed() : boolean
        return (mMetaState & META_SHIFT_ON) != 0;
!!!192951.java!!!	isSymPressed() : boolean
        return (mMetaState & META_SYM_ON) != 0;
!!!193079.java!!!	isCtrlPressed() : boolean
        return (mMetaState & META_CTRL_ON) != 0;
!!!193207.java!!!	isMetaPressed() : boolean
        return (mMetaState & META_META_ON) != 0;
!!!193335.java!!!	isFunctionPressed() : boolean
        return (mMetaState & META_FUNCTION_ON) != 0;
!!!193463.java!!!	isCapsLockOn() : boolean
        return (mMetaState & META_CAPS_LOCK_ON) != 0;
!!!193591.java!!!	isNumLockOn() : boolean
        return (mMetaState & META_NUM_LOCK_ON) != 0;
!!!193719.java!!!	isScrollLockOn() : boolean
        return (mMetaState & META_SCROLL_LOCK_ON) != 0;
!!!193847.java!!!	getAction() : int
        return mAction;
!!!193975.java!!!	isCanceled() : boolean
        return (mFlags&FLAG_CANCELED) != 0;
!!!194103.java!!!	cancel() : void
        mFlags |= FLAG_CANCELED;
!!!194231.java!!!	startTracking() : void
        mFlags |= FLAG_START_TRACKING;
!!!194359.java!!!	isTracking() : boolean
        return (mFlags&FLAG_TRACKING) != 0;
!!!194487.java!!!	isLongPress() : boolean
        return (mFlags&FLAG_LONG_PRESS) != 0;
!!!194615.java!!!	getKeyCode() : int
        return mKeyCode;
!!!194743.java!!!	getCharacters() : String
        return mCharacters;
!!!194871.java!!!	getScanCode() : int
        return mScanCode;
!!!194999.java!!!	getRepeatCount() : int
        return mRepeatCount;
!!!195127.java!!!	getDownTime() : long
        return mDownTime;
!!!195255.java!!!	getEventTime() : long
        return mEventTime;
!!!195383.java!!!	getEventTimeNano() : long
        return mEventTime * 1000000L;
!!!195511.java!!!	getKeyboardDevice() : int
        return mDeviceId;
!!!195639.java!!!	getKeyCharacterMap() : KeyCharacterMap
        return KeyCharacterMap.load(mDeviceId);
!!!195767.java!!!	getDisplayLabel() : char
        return getKeyCharacterMap().getDisplayLabel(mKeyCode);
!!!195895.java!!!	getUnicodeChar() : int
        return getUnicodeChar(mMetaState);
!!!196023.java!!!	getUnicodeChar(in metaState : int) : int
        return getKeyCharacterMap().get(mKeyCode, metaState);
!!!196151.java!!!	getKeyData(inout results : KeyCharacterMap::KeyData) : boolean
        return getKeyCharacterMap().getKeyData(mKeyCode, results);
!!!196279.java!!!	getMatch(inout chars : char) : char
        return getMatch(chars, 0);
!!!196407.java!!!	getMatch(inout chars : char, in metaState : int) : char
        return getKeyCharacterMap().getMatch(mKeyCode, chars, metaState);
!!!196535.java!!!	getNumber() : char
        return getKeyCharacterMap().getNumber(mKeyCode);
!!!196663.java!!!	isPrintingKey() : boolean
        return getKeyCharacterMap().isPrintingKey(mKeyCode);
!!!196791.java!!!	dispatch(inout receiver : KeyEvent::Callback) : boolean
        return dispatch(receiver, null, null);
!!!196919.java!!!	dispatch(inout receiver : KeyEvent::Callback, inout state : KeyEvent::DispatcherState, inout target : Object) : boolean
        switch (mAction) {
            case ACTION_DOWN: {
                mFlags &= ~FLAG_START_TRACKING;
                if (DEBUG) Log.v(TAG, "Key down to " + target + " in " + state
                        + ": " + this);
                boolean res = receiver.onKeyDown(mKeyCode, this);
                if (state != null) {
                    if (res && mRepeatCount == 0 && (mFlags&FLAG_START_TRACKING) != 0) {
                        if (DEBUG) Log.v(TAG, "  Start tracking!");
                        state.startTracking(this, target);
                    } else if (isLongPress() && state.isTracking(this)) {
                        try {
                            if (receiver.onKeyLongPress(mKeyCode, this)) {
                                if (DEBUG) Log.v(TAG, "  Clear from long press!");
                                state.performedLongPress(this);
                                res = true;
                            }
                        } catch (AbstractMethodError e) {
                        }
                    }
                }
                return res;
            }
            case ACTION_UP:
                if (DEBUG) Log.v(TAG, "Key up to " + target + " in " + state
                        + ": " + this);
                if (state != null) {
                    state.handleUpEvent(this);
                }
                return receiver.onKeyUp(mKeyCode, this);
            case ACTION_MULTIPLE:
                final int count = mRepeatCount;
                final int code = mKeyCode;
                if (receiver.onKeyMultiple(code, count, this)) {
                    return true;
                }
                if (code != KeyEvent.KEYCODE_UNKNOWN) {
                    mAction = ACTION_DOWN;
                    mRepeatCount = 0;
                    boolean handled = receiver.onKeyDown(code, this);
                    if (handled) {
                        mAction = ACTION_UP;
                        receiver.onKeyUp(code, this);
                    }
                    mAction = ACTION_MULTIPLE;
                    mRepeatCount = count;
                    return handled;
                }
                return false;
        }
        return false;
!!!197815.java!!!	toString() : String
        StringBuilder msg = new StringBuilder();
        msg.append("KeyEvent { action=").append(actionToString(mAction));
        msg.append(", keyCode=").append(keyCodeToString(mKeyCode));
        msg.append(", scanCode=").append(mScanCode);
        if (mCharacters != null) {
            msg.append(", characters=\"").append(mCharacters).append("\"");
        }
        msg.append(", metaState=").append(metaStateToString(mMetaState));
        msg.append(", flags=0x").append(Integer.toHexString(mFlags));
        msg.append(", repeatCount=").append(mRepeatCount);
        msg.append(", eventTime=").append(mEventTime);
        msg.append(", downTime=").append(mDownTime);
        msg.append(", deviceId=").append(mDeviceId);
        msg.append(", source=0x").append(Integer.toHexString(mSource));
        msg.append(" }");
        return msg.toString();
!!!197943.java!!!	actionToString(in action : int) : String
        switch (action) {
            case ACTION_DOWN:
                return "ACTION_DOWN";
            case ACTION_UP:
                return "ACTION_UP";
            case ACTION_MULTIPLE:
                return "ACTION_MULTIPLE";
            default:
                return Integer.toString(action);
        }
!!!198071.java!!!	keyCodeToString(in keyCode : int) : String
        String symbolicName = nativeKeyCodeToString(keyCode);
        return symbolicName != null ? LABEL_PREFIX + symbolicName : Integer.toString(keyCode);
!!!198199.java!!!	keyCodeFromString(inout symbolicName : String) : int
        if (symbolicName.startsWith(LABEL_PREFIX)) {
            symbolicName = symbolicName.substring(LABEL_PREFIX.length());
            int keyCode = nativeKeyCodeFromString(symbolicName);
            if (keyCode > 0) {
                return keyCode;
            }
        }
        try {
            return Integer.parseInt(symbolicName, 10);
        } catch (NumberFormatException ex) {
            return KEYCODE_UNKNOWN;
        }
!!!198327.java!!!	metaStateToString(in metaState : int) : String
        if (metaState == 0) {
            return "0";
        }
        StringBuilder result = null;
        int i = 0;
        while (metaState != 0) {
            final boolean isSet = (metaState & 1) != 0;
            metaState >>>= 1; // unsigned shift!
            if (isSet) {
                final String name = META_SYMBOLIC_NAMES[i];
                if (result == null) {
                    if (metaState == 0) {
                        return name;
                    }
                    result = new StringBuilder(name);
                } else {
                    result.append('|');
                    result.append(name);
                }
            }
            i += 1;
        }
        return result.toString();
!!!198455.java!!!	createFromParcelBody(inout in : Parcel) : KeyEvent
        return new KeyEvent(in);
!!!198583.java!!!	KeyEvent(inout in : Parcel)
        mDeviceId = in.readInt();
        mSource = in.readInt();
        mAction = in.readInt();
        mKeyCode = in.readInt();
        mRepeatCount = in.readInt();
        mMetaState = in.readInt();
        mScanCode = in.readInt();
        mFlags = in.readInt();
        mDownTime = in.readLong();
        mEventTime = in.readLong();
!!!198711.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeInt(PARCEL_TOKEN_KEY_EVENT);

        out.writeInt(mDeviceId);
        out.writeInt(mSource);
        out.writeInt(mAction);
        out.writeInt(mKeyCode);
        out.writeInt(mRepeatCount);
        out.writeInt(mMetaState);
        out.writeInt(mScanCode);
        out.writeInt(mFlags);
        out.writeLong(mDownTime);
        out.writeLong(mEventTime);
