class HeaderTransformState
!!!31064375.java!!!	initFrom(inout view : View) : void
        super.initFrom(view);
        if (view instanceof NotificationHeaderView) {
            NotificationHeaderView header = (NotificationHeaderView) view;
            mExpandButton = header.getExpandButton();
            mWorkProfileState = TransformState.obtain();
            mWorkProfileIcon = header.getWorkProfileIcon();
            mWorkProfileState.initFrom(mWorkProfileIcon);
        }
!!!31064503.java!!!	transformViewTo(inout otherState : TransformState, in transformationAmount : float) : boolean
        // if the transforming notification has a header, we have ensured that it looks the same
        // but the expand button, so lets fade just that one and transform the work profile icon.
        if (!(mTransformedView instanceof NotificationHeaderView)) {
            return false;
        }
        NotificationHeaderView header = (NotificationHeaderView) mTransformedView;
        int childCount = header.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View headerChild = header.getChildAt(i);
            if (headerChild.getVisibility() == View.GONE) {
                continue;
            }
            if (headerChild != mExpandButton) {
                headerChild.setVisibility(View.INVISIBLE);
            } else {
                CrossFadeHelper.fadeOut(mExpandButton, transformationAmount);
            }
        }
        return true;
!!!31064631.java!!!	transformViewFrom(inout otherState : TransformState, in transformationAmount : float) : void
        // if the transforming notification has a header, we have ensured that it looks the same
        // but the expand button, so lets fade just that one and transform the work profile icon.
        if (!(mTransformedView instanceof NotificationHeaderView)) {
            return;
        }
        NotificationHeaderView header = (NotificationHeaderView) mTransformedView;
        header.setVisibility(View.VISIBLE);
        header.setAlpha(1.0f);
        int childCount = header.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View headerChild = header.getChildAt(i);
            if (headerChild.getVisibility() == View.GONE) {
                continue;
            }
            if (headerChild == mExpandButton) {
                CrossFadeHelper.fadeIn(mExpandButton, transformationAmount);
            } else {
                headerChild.setVisibility(View.VISIBLE);
                if (headerChild == mWorkProfileIcon) {
                    mWorkProfileState.transformViewFullyFrom(
                            ((HeaderTransformState) otherState).mWorkProfileState,
                            transformationAmount);
                }
            }
        }
        return;
!!!31064759.java!!!	obtain() : HeaderTransformState
        HeaderTransformState instance = sInstancePool.acquire();
        if (instance != null) {
            return instance;
        }
        return new HeaderTransformState();
!!!31064887.java!!!	recycle() : void
        super.recycle();
        sInstancePool.release(this);
!!!31065015.java!!!	reset() : void
        super.reset();
        mExpandButton = null;
        mWorkProfileState = null;
        if (mWorkProfileState != null) {
            mWorkProfileState.recycle();
            mWorkProfileState = null;
        }
!!!31065143.java!!!	setVisible(inout visible : boolean, inout force : boolean) : void
        super.setVisible(visible, force);
        if (!(mTransformedView instanceof NotificationHeaderView)) {
            return;
        }
        NotificationHeaderView header = (NotificationHeaderView) mTransformedView;
        int childCount = header.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View headerChild = header.getChildAt(i);
            if (!force && headerChild.getVisibility() == View.GONE) {
                continue;
            }
            headerChild.animate().cancel();
            if (headerChild.getVisibility() != View.GONE) {
                headerChild.setVisibility(visible ? View.VISIBLE : View.INVISIBLE);
            }
            if (headerChild == mExpandButton) {
                headerChild.setAlpha(visible ? 1.0f : 0.0f);
            }
            if (headerChild == mWorkProfileIcon) {
                headerChild.setTranslationX(0);
                headerChild.setTranslationY(0);
            }
        }
!!!31065271.java!!!	prepareFadeIn() : void
        super.prepareFadeIn();
        if (!(mTransformedView instanceof NotificationHeaderView)) {
            return;
        }
        NotificationHeaderView header = (NotificationHeaderView) mTransformedView;
        int childCount = header.getChildCount();
        for (int i = 0; i < childCount; i++) {
            View headerChild = header.getChildAt(i);
            if (headerChild.getVisibility() == View.GONE) {
                continue;
            }
            headerChild.animate().cancel();
            headerChild.setVisibility(View.VISIBLE);
            headerChild.setAlpha(1.0f);
            if (headerChild == mWorkProfileIcon) {
                headerChild.setTranslationX(0);
                headerChild.setTranslationY(0);
            }
        }
