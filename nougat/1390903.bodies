class SignalController
!!!31292599.java!!!	SignalController(inout tag : String, inout context : Context, in type : int, inout callbackHandler : CallbackHandler, inout networkController : NetworkControllerImpl)
        mTag = TAG + "." + tag;
        mNetworkController = networkController;
        mTransportType = type;
        mContext = context;
        mCallbackHandler = callbackHandler;
        mCurrentState = cleanState();
        mLastState = cleanState();
        if (RECORD_HISTORY) {
            mHistory = new State[HISTORY_SIZE];
            for (int i = 0; i < HISTORY_SIZE; i++) {
                mHistory[i] = cleanState();
            }
        }
!!!31292727.java!!!	getState() : T
        return mCurrentState;
!!!31292855.java!!!	updateConnectivity(inout connectedTransports : BitSet, inout validatedTransports : BitSet) : void
        mCurrentState.inetCondition = validatedTransports.get(mTransportType) ? 1 : 0;
        notifyListenersIfNecessary();
!!!31292983.java!!!	resetLastState() : void
        mCurrentState.copyFrom(mLastState);
!!!31293111.java!!!	isDirty() : boolean
        if (!mLastState.equals(mCurrentState)) {
            if (DEBUG) {
                Log.d(mTag, "Change in state from: " + mLastState + "\n"
                        + "\tto: " + mCurrentState);
            }
            return true;
        }
        return false;
!!!31293239.java!!!	saveLastState() : void
        if (RECORD_HISTORY) {
            recordLastState();
        }
        // Updates the current time.
        mCurrentState.time = System.currentTimeMillis();
        mLastState.copyFrom(mCurrentState);
!!!31293367.java!!!	getQsCurrentIconId() : int
        if (mCurrentState.connected) {
            return getIcons().mQsIcons[mCurrentState.inetCondition][mCurrentState.level];
        } else if (mCurrentState.enabled) {
            return getIcons().mQsDiscState;
        } else {
            return getIcons().mQsNullState;
        }
!!!31293495.java!!!	getCurrentIconId() : int
        if (mCurrentState.connected) {
            return getIcons().mSbIcons[mCurrentState.inetCondition][mCurrentState.level];
        } else if (mCurrentState.enabled) {
            return getIcons().mSbDiscState;
        } else {
            return getIcons().mSbNullState;
        }
!!!31293623.java!!!	getContentDescription() : int
        if (mCurrentState.connected) {
            return getIcons().mContentDesc[mCurrentState.level];
        } else {
            return getIcons().mDiscContentDesc;
        }
!!!31293751.java!!!	notifyListenersIfNecessary() : void
        if (isDirty()) {
            saveLastState();
            notifyListeners();
        }
!!!31293879.java!!!	getStringIfExists(in resId : int) : String
        return resId != 0 ? mContext.getString(resId) : "";
!!!31294007.java!!!	getIcons() : I
        return (I) mCurrentState.iconGroup;
!!!31294135.java!!!	recordLastState() : void
        mHistory[mHistoryIndex++ & (HISTORY_SIZE - 1)].copyFrom(mLastState);
!!!31294263.java!!!	dump(inout pw : PrintWriter) : void
        pw.println("  - " + mTag + " -----");
        pw.println("  Current State: " + mCurrentState);
        if (RECORD_HISTORY) {
            // Count up the states that actually contain time stamps, and only display those.
            int size = 0;
            for (int i = 0; i < HISTORY_SIZE; i++) {
                if (mHistory[i].time != 0) size++;
            }
            // Print out the previous states in ordered number.
            for (int i = mHistoryIndex + HISTORY_SIZE - 1;
                    i >= mHistoryIndex + HISTORY_SIZE - size; i--) {
                pw.println("  Previous State(" + (mHistoryIndex + HISTORY_SIZE - i) + "): "
                        + mHistory[i & (HISTORY_SIZE - 1)]);
            }
        }
!!!31294391.java!!!	notifyListeners() : void
        notifyListeners(mCallbackHandler);
