class KeyButtonRipple
!!!31298487.java!!!	KeyButtonRipple(inout ctx : Context, inout targetView : View)
        mMaxWidth =  ctx.getResources().getDimensionPixelSize(R.dimen.key_button_ripple_max_width);
        mTargetView = targetView;
!!!31298615.java!!!	getRipplePaint() : Paint
        if (mRipplePaint == null) {
            mRipplePaint = new Paint();
            mRipplePaint.setAntiAlias(true);
            mRipplePaint.setColor(0xffffffff);
        }
        return mRipplePaint;
!!!31298743.java!!!	drawSoftware(inout canvas : Canvas) : void
        if (mGlowAlpha > 0f) {
            final Paint p = getRipplePaint();
            p.setAlpha((int)(mGlowAlpha * 255f));

            final float w = getBounds().width();
            final float h = getBounds().height();
            final boolean horizontal = w > h;
            final float diameter = getRippleSize() * mGlowScale;
            final float radius = diameter * .5f;
            final float cx = w * .5f;
            final float cy = h * .5f;
            final float rx = horizontal ? radius : cx;
            final float ry = horizontal ? cy : radius;
            final float corner = horizontal ? cy : cx;

            canvas.drawRoundRect(cx - rx, cy - ry,
                    cx + rx, cy + ry,
                    corner, corner, p);
        }
!!!31298871.java!!!	draw(inout canvas : Canvas) : void
        mSupportHardware = canvas.isHardwareAccelerated();
        if (mSupportHardware) {
            drawHardware((DisplayListCanvas) canvas);
        } else {
            drawSoftware(canvas);
        }
!!!31298999.java!!!	setAlpha(in alpha : int) : void
        // Not supported.
!!!31299127.java!!!	setColorFilter(inout colorFilter : ColorFilter) : void
        // Not supported.
!!!31299255.java!!!	getOpacity() : int
        return PixelFormat.TRANSLUCENT;
!!!31299383.java!!!	isHorizontal() : boolean
        return getBounds().width() > getBounds().height();
!!!31299511.java!!!	drawHardware(inout c : DisplayListCanvas) : void
        if (mDrawingHardwareGlow) {
            c.drawRoundRect(mLeftProp, mTopProp, mRightProp, mBottomProp, mRxProp, mRyProp,
                    mPaintProp);
        }
!!!31299639.java!!!	getGlowAlpha() : float
        return mGlowAlpha;
!!!31299767.java!!!	setGlowAlpha(in x : float) : void
        mGlowAlpha = x;
        invalidateSelf();
!!!31299895.java!!!	getGlowScale() : float
        return mGlowScale;
!!!31300023.java!!!	setGlowScale(in x : float) : void
        mGlowScale = x;
        invalidateSelf();
!!!31300151.java!!!	onStateChange(inout state : int) : boolean
        boolean pressed = false;
        for (int i = 0; i < state.length; i++) {
            if (state[i] == android.R.attr.state_pressed) {
                pressed = true;
                break;
            }
        }
        if (pressed != mPressed) {
            setPressed(pressed);
            mPressed = pressed;
            return true;
        } else {
            return false;
        }
!!!31300279.java!!!	jumpToCurrentState() : void
        cancelAnimations();
!!!31300407.java!!!	isStateful() : boolean
        return true;
!!!31300535.java!!!	setPressed(inout pressed : boolean) : void
        if (mSupportHardware) {
            setPressedHardware(pressed);
        } else {
            setPressedSoftware(pressed);
        }
!!!31300663.java!!!	cancelAnimations() : void
        mTmpArray.addAll(mRunningAnimations);
        int size = mTmpArray.size();
        for (int i = 0; i < size; i++) {
            Animator a = mTmpArray.get(i);
            a.cancel();
        }
        mTmpArray.clear();
        mRunningAnimations.clear();
!!!31300791.java!!!	setPressedSoftware(inout pressed : boolean) : void
        if (pressed) {
            enterSoftware();
        } else {
            exitSoftware();
        }
!!!31300919.java!!!	enterSoftware() : void
        cancelAnimations();
        mGlowAlpha = GLOW_MAX_ALPHA;
        ObjectAnimator scaleAnimator = ObjectAnimator.ofFloat(this, "glowScale",
                0f, GLOW_MAX_SCALE_FACTOR);
        scaleAnimator.setInterpolator(mInterpolator);
        scaleAnimator.setDuration(ANIMATION_DURATION_SCALE);
        scaleAnimator.addListener(mAnimatorListener);
        scaleAnimator.start();
        mRunningAnimations.add(scaleAnimator);
!!!31301047.java!!!	exitSoftware() : void
        ObjectAnimator alphaAnimator = ObjectAnimator.ofFloat(this, "glowAlpha", mGlowAlpha, 0f);
        alphaAnimator.setInterpolator(Interpolators.ALPHA_OUT);
        alphaAnimator.setDuration(ANIMATION_DURATION_FADE);
        alphaAnimator.addListener(mAnimatorListener);
        alphaAnimator.start();
        mRunningAnimations.add(alphaAnimator);
!!!31301175.java!!!	setPressedHardware(inout pressed : boolean) : void
        if (pressed) {
            enterHardware();
        } else {
            exitHardware();
        }
!!!31301303.java!!!	setExtendStart(inout prop : CanvasProperty) : void
        if (isHorizontal()) {
            mLeftProp = prop;
        } else {
            mTopProp = prop;
        }
!!!31301431.java!!!	getExtendStart() : CanvasProperty
        return isHorizontal() ? mLeftProp : mTopProp;
!!!31301559.java!!!	setExtendEnd(inout prop : CanvasProperty) : void
        if (isHorizontal()) {
            mRightProp = prop;
        } else {
            mBottomProp = prop;
        }
!!!31301687.java!!!	getExtendEnd() : CanvasProperty
        return isHorizontal() ? mRightProp : mBottomProp;
!!!31301815.java!!!	getExtendSize() : int
        return isHorizontal() ? getBounds().width() : getBounds().height();
!!!31301943.java!!!	getRippleSize() : int
        int size = isHorizontal() ? getBounds().width() : getBounds().height();
        return Math.min(size, mMaxWidth);
!!!31302071.java!!!	enterHardware() : void
        cancelAnimations();
        mDrawingHardwareGlow = true;
        setExtendStart(CanvasProperty.createFloat(getExtendSize() / 2));
        final RenderNodeAnimator startAnim = new RenderNodeAnimator(getExtendStart(),
                getExtendSize()/2 - GLOW_MAX_SCALE_FACTOR * getRippleSize()/2);
        startAnim.setDuration(ANIMATION_DURATION_SCALE);
        startAnim.setInterpolator(mInterpolator);
        startAnim.addListener(mAnimatorListener);
        startAnim.setTarget(mTargetView);

        setExtendEnd(CanvasProperty.createFloat(getExtendSize() / 2));
        final RenderNodeAnimator endAnim = new RenderNodeAnimator(getExtendEnd(),
                getExtendSize()/2 + GLOW_MAX_SCALE_FACTOR * getRippleSize()/2);
        endAnim.setDuration(ANIMATION_DURATION_SCALE);
        endAnim.setInterpolator(mInterpolator);
        endAnim.addListener(mAnimatorListener);
        endAnim.setTarget(mTargetView);

        if (isHorizontal()) {
            mTopProp = CanvasProperty.createFloat(0f);
            mBottomProp = CanvasProperty.createFloat(getBounds().height());
            mRxProp = CanvasProperty.createFloat(getBounds().height()/2);
            mRyProp = CanvasProperty.createFloat(getBounds().height()/2);
        } else {
            mLeftProp = CanvasProperty.createFloat(0f);
            mRightProp = CanvasProperty.createFloat(getBounds().width());
            mRxProp = CanvasProperty.createFloat(getBounds().width()/2);
            mRyProp = CanvasProperty.createFloat(getBounds().width()/2);
        }

        mGlowScale = GLOW_MAX_SCALE_FACTOR;
        mGlowAlpha = GLOW_MAX_ALPHA;
        mRipplePaint = getRipplePaint();
        mRipplePaint.setAlpha((int) (mGlowAlpha * 255));
        mPaintProp = CanvasProperty.createPaint(mRipplePaint);

        startAnim.start();
        endAnim.start();
        mRunningAnimations.add(startAnim);
        mRunningAnimations.add(endAnim);

        invalidateSelf();
!!!31302199.java!!!	exitHardware() : void
        mPaintProp = CanvasProperty.createPaint(getRipplePaint());
        final RenderNodeAnimator opacityAnim = new RenderNodeAnimator(mPaintProp,
                RenderNodeAnimator.PAINT_ALPHA, 0);
        opacityAnim.setDuration(ANIMATION_DURATION_FADE);
        opacityAnim.setInterpolator(Interpolators.ALPHA_OUT);
        opacityAnim.addListener(mAnimatorListener);
        opacityAnim.setTarget(mTargetView);

        opacityAnim.start();
        mRunningAnimations.add(opacityAnim);

        invalidateSelf();
