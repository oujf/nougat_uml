class RemoteEditText
!!!31341495.java!!!	RemoteEditText(inout context : Context, inout attrs : AttributeSet)
            super(context, attrs);
            mBackground = getBackground();
!!!31341623.java!!!	defocusIfNeeded() : void
            if (mRemoteInputView != null && mRemoteInputView.mEntry.row.isChangingPosition()) {
                return;
            }
            if (isFocusable() && isEnabled()) {
                setInnerFocusable(false);
                if (mRemoteInputView != null) {
                    mRemoteInputView.onDefocus();
                }
                mShowImeOnInputConnection = false;
            }
!!!31341751.java!!!	onVisibilityChanged(inout changedView : View, in visibility : int) : void
            super.onVisibilityChanged(changedView, visibility);

            if (!isShown()) {
                defocusIfNeeded();
            }
!!!31341879.java!!!	onFocusChanged(inout focused : boolean, in direction : int, inout previouslyFocusedRect : Rect) : void
            super.onFocusChanged(focused, direction, previouslyFocusedRect);
            if (!focused) {
                defocusIfNeeded();
            }
!!!31342007.java!!!	getFocusedRect(inout r : Rect) : void
            super.getFocusedRect(r);
            r.top = mScrollY;
            r.bottom = mScrollY + (mBottom - mTop);
!!!31342135.java!!!	requestRectangleOnScreen(inout rectangle : Rect) : boolean
            return mRemoteInputView.requestScrollTo();
!!!31342263.java!!!	onKeyPreIme(in keyCode : int, inout event : KeyEvent) : boolean
            if (keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
                defocusIfNeeded();
                final InputMethodManager imm = InputMethodManager.getInstance();
                imm.hideSoftInputFromWindow(getWindowToken(), 0);
                return true;
            }
            return super.onKeyPreIme(keyCode, event);
!!!31342391.java!!!	onCheckIsTextEditor() : boolean
            // Stop being editable while we're being removed. During removal, we get reattached,
            // and editable views get their spellchecking state re-evaluated which is too costly
            // during the removal animation.
            boolean flyingOut = mRemoteInputView != null && mRemoteInputView.mRemoved;
            return !flyingOut && super.onCheckIsTextEditor();
!!!31342519.java!!!	onCreateInputConnection(inout outAttrs : EditorInfo) : InputConnection
            final InputConnection inputConnection = super.onCreateInputConnection(outAttrs);

            if (mShowImeOnInputConnection && inputConnection != null) {
                final InputMethodManager imm = InputMethodManager.getInstance();
                if (imm != null) {
                    // onCreateInputConnection is called by InputMethodManager in the middle of
                    // setting up the connection to the IME; wait with requesting the IME until that
                    // work has completed.
                    post(new Runnable() {
                        @Override
                        public void run() {
                            imm.viewClicked(RemoteEditText.this);
                            imm.showSoftInput(RemoteEditText.this, 0);
                        }
                    });
                }
            }

            return inputConnection;
!!!31342647.java!!!	onCommitCompletion(inout text : CompletionInfo) : void
            clearComposingText();
            setText(text.getText());
            setSelection(getText().length());
!!!31342775.java!!!	setInnerFocusable(inout focusable : boolean) : void
            setFocusableInTouchMode(focusable);
            setFocusable(focusable);
            setCursorVisible(focusable);

            if (focusable) {
                requestFocus();
                setBackground(mBackground);
            } else {
                setBackground(null);
            }

