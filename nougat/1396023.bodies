class PiecewiseLinearIndentationFunctor
!!!31366839.java!!!	PiecewiseLinearIndentationFunctor(in maxItemsInStack : int, in peekSize : int, in distanceToPeekStart : int, in linearPart : float)
        super(maxItemsInStack, peekSize, distanceToPeekStart);
        mBaseValues = new ArrayList<Float>(maxItemsInStack+1);
        initBaseValues();
        mLinearPart = linearPart;
!!!31366967.java!!!	initBaseValues() : void
        int sumOfSquares = getSumOfSquares(mMaxItemsInStack-1);
        int totalWeight = 0;
        mBaseValues.add(0.0f);
        for (int i = 0; i < mMaxItemsInStack - 1; i++) {
            totalWeight += (mMaxItemsInStack - i - 1) * (mMaxItemsInStack - i - 1);
            mBaseValues.add((float) totalWeight / sumOfSquares);
        }
!!!31367095.java!!!	getSumOfSquares(in n : int) : int
        return n * (n + 1) * (2 * n + 1) / 6;
!!!31367223.java!!!	getValue(in itemsBefore : float) : float
        if (mStackStartsAtPeek) {
            // We directly start at the stack, so no initial interpolation.
            itemsBefore++;
        }
        if (itemsBefore < 0) {
            return 0;
        } else if (itemsBefore >= mMaxItemsInStack) {
            return mTotalTransitionDistance;
        }
        int below = (int) itemsBefore;
        float partialIn = itemsBefore - below;

        if (below == 0) {
            return mDistanceToPeekStart * partialIn;
        } else {
            float result = mDistanceToPeekStart;
            float progress = mBaseValues.get(below - 1) * (1 - partialIn)
                    + mBaseValues.get(below) * partialIn;
            result += (progress * (1 - mLinearPart)
                    + (itemsBefore - 1) / (mMaxItemsInStack - 1)  * mLinearPart) * mPeekSize;
            return result;
        }
