class NightModeFragment
!!!31412151.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        mNightModeController = new NightModeController(getContext());
        mUiModeManager = getContext().getSystemService(UiModeManager.class);
!!!31412279.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        final View view = LayoutInflater.from(getContext()).inflate(
                R.layout.night_mode_settings, container, false);
        ((ViewGroup) view).addView(super.onCreateView(inflater, container, savedInstanceState));
        return view;
!!!31412407.java!!!	onCreatePreferences(inout savedInstanceState : Bundle, inout rootKey : String) : void
        final Context context = getPreferenceManager().getContext();

        addPreferencesFromResource(R.xml.night_mode);
        mAutoSwitch = (SwitchPreference) findPreference(KEY_AUTO);
        mAutoSwitch.setOnPreferenceChangeListener(this);
        mAdjustTint = (SwitchPreference) findPreference(KEY_ADJUST_TINT);
        mAdjustTint.setOnPreferenceChangeListener(this);
        mAdjustBrightness = (SwitchPreference) findPreference(KEY_ADJUST_BRIGHTNESS);
        mAdjustBrightness.setOnPreferenceChangeListener(this);
!!!31412535.java!!!	onViewCreated(inout view : View, inout savedInstanceState : Bundle) : void
        super.onViewCreated(view, savedInstanceState);
        View switchBar = view.findViewById(R.id.switch_bar);
        mSwitch = (Switch) switchBar.findViewById(android.R.id.switch_widget);
        mSwitch.setChecked(mNightModeController.isEnabled());
        switchBar.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                boolean newState = !mNightModeController.isEnabled();
                MetricsLogger.action(getContext(), MetricsEvent.ACTION_TUNER_NIGHT_MODE, newState);
                mNightModeController.setNightMode(newState);
                mSwitch.setChecked(newState);
            }
        });
!!!31412663.java!!!	onResume() : void
        super.onResume();
        MetricsLogger.visibility(getContext(), MetricsEvent.TUNER_NIGHT_MODE, true);
        mNightModeController.addListener(this);
        TunerService.get(getContext()).addTunable(this, Secure.BRIGHTNESS_USE_TWILIGHT,
                NightModeController.NIGHT_MODE_ADJUST_TINT);
        calculateDisabled();
!!!31412791.java!!!	onPause() : void
        super.onPause();
        MetricsLogger.visibility(getContext(), MetricsEvent.TUNER_NIGHT_MODE, false);
        mNightModeController.removeListener(this);
        TunerService.get(getContext()).removeTunable(this);
!!!31412919.java!!!	onPreferenceChange(inout preference : Preference, inout newValue : Object) : boolean
        final Boolean value = (Boolean) newValue;
        if (mAutoSwitch == preference) {
            MetricsLogger.action(getContext(), MetricsEvent.ACTION_TUNER_NIGHT_MODE_AUTO, value);
            mNightModeController.setAuto(value);
        } else if (mAdjustTint == preference) {
            MetricsLogger.action(getContext(),
                    MetricsEvent.ACTION_TUNER_NIGHT_MODE_ADJUST_TINT, value);
            mNightModeController.setAdjustTint(value);
            postCalculateDisabled();
        } else if (mAdjustBrightness == preference) {
            MetricsLogger.action(getContext(),
                    MetricsEvent.ACTION_TUNER_NIGHT_MODE_ADJUST_BRIGHTNESS, value);
            TunerService.get(getContext()).setValue(Secure.BRIGHTNESS_USE_TWILIGHT,
                    value ? 1 : 0);
            postCalculateDisabled();
        } else {
            return false;
        }
        return true;
!!!31413047.java!!!	postCalculateDisabled() : void
        // Post this because its the easiest way to wait for all state to be calculated.
        getView().post(new Runnable() {
            @Override
            public void run() {
                calculateDisabled();
            }
        });
!!!31413175.java!!!	calculateDisabled() : void
        int enabledCount = (mAdjustTint.isChecked() ? 1 : 0)
                + (mAdjustBrightness.isChecked() ? 1 : 0);
        if (enabledCount == 1) {
            if (mAdjustTint.isChecked()) {
                mAdjustTint.setEnabled(false);
            } else {
                mAdjustBrightness.setEnabled(false);
            }
        } else {
            mAdjustTint.setEnabled(true);
            mAdjustBrightness.setEnabled(true);
        }
!!!31413303.java!!!	onTuningChanged(inout key : String, inout newValue : String) : void
        if (Secure.BRIGHTNESS_USE_TWILIGHT.equals(key)) {
            mAdjustBrightness.setChecked(newValue != null && Integer.parseInt(newValue) != 0);
        } else if (NightModeController.NIGHT_MODE_ADJUST_TINT.equals(key)) {
            // Default on.
            mAdjustTint.setChecked(newValue == null || Integer.parseInt(newValue) != 0);
        }
!!!31413431.java!!!	onNightModeChanged() : void
        mSwitch.setChecked(mNightModeController.isEnabled());
!!!31413559.java!!!	onTwilightAutoChanged() : void
        mAutoSwitch.setChecked(mNightModeController.isAuto());
