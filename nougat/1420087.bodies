class UploadedTexture
!!!31556663.java!!!	UploadedTexture()
        this(false);
!!!31556791.java!!!	UploadedTexture(inout hasBorder : boolean)
        super(null, 0, STATE_UNLOADED);
        if (hasBorder) {
            setBorder(true);
            mBorder = 1;
        }
!!!31556919.java!!!	setIsUploading(inout uploading : boolean) : void
        mIsUploading = uploading;
!!!31557047.java!!!	isUploading() : boolean
        return mIsUploading;
!!!31557559.java!!!	setThrottled(inout throttled : boolean) : void
        mThrottled = throttled;
!!!31557687.java!!!	getBorderLine(inout vertical : boolean, inout config : Bitmap::Config, in length : int) : Bitmap
        BorderKey key = sBorderKey;
        key.vertical = vertical;
        key.config = config;
        key.length = length;
        Bitmap bitmap = sBorderLines.get(key);
        if (bitmap == null) {
            bitmap = vertical
                    ? Bitmap.createBitmap(1, length, config)
                    : Bitmap.createBitmap(length, 1, config);
            sBorderLines.put(key.clone(), bitmap);
        }
        return bitmap;
!!!31557815.java!!!	getBitmap() : Bitmap
        if (mBitmap == null) {
            mBitmap = onGetBitmap();
            int w = mBitmap.getWidth() + mBorder * 2;
            int h = mBitmap.getHeight() + mBorder * 2;
            if (mWidth == UNSPECIFIED) {
                setSize(w, h);
            }
        }
        return mBitmap;
!!!31557943.java!!!	freeBitmap() : void
        Assert.assertTrue(mBitmap != null);
        onFreeBitmap(mBitmap);
        mBitmap = null;
!!!31558071.java!!!	getWidth() : int
        if (mWidth == UNSPECIFIED) getBitmap();
        return mWidth;
!!!31558199.java!!!	getHeight() : int
        if (mWidth == UNSPECIFIED) getBitmap();
        return mHeight;
!!!31558583.java!!!	invalidateContent() : void
        if (mBitmap != null) freeBitmap();
        mContentValid = false;
        mWidth = UNSPECIFIED;
        mHeight = UNSPECIFIED;
!!!31558711.java!!!	isContentValid() : boolean
        return isLoaded() && mContentValid;
!!!31558839.java!!!	updateContent(inout canvas : GLCanvas) : void
        if (!isLoaded()) {
            if (mThrottled && ++sUploadedCount > UPLOAD_LIMIT) {
                return;
            }
            uploadToCanvas(canvas);
        } else if (!mContentValid) {
            Bitmap bitmap = getBitmap();
            int format = GLUtils.getInternalFormat(bitmap);
            int type = GLUtils.getType(bitmap);
            canvas.texSubImage2D(this, mBorder, mBorder, bitmap, format, type);
            freeBitmap();
            mContentValid = true;
        }
!!!31558967.java!!!	resetUploadLimit() : void
        sUploadedCount = 0;
!!!31559095.java!!!	uploadLimitReached() : boolean
        return sUploadedCount > UPLOAD_LIMIT;
!!!31559223.java!!!	uploadToCanvas(inout canvas : GLCanvas) : void

        Bitmap bitmap = getBitmap();
        if (bitmap != null) {
            try {
                int bWidth = bitmap.getWidth();
                int bHeight = bitmap.getHeight();
                int width = bWidth + mBorder * 2;
                int height = bHeight + mBorder * 2;
                int texWidth = getTextureWidth();
                int texHeight = getTextureHeight();

                Assert.assertTrue(bWidth <= texWidth && bHeight <= texHeight);

                // Upload the bitmap to a new texture.
                mId = canvas.getGLId().generateTexture();
                canvas.setTextureParameters(this);

                if (bWidth == texWidth && bHeight == texHeight) {
                    canvas.initializeTexture(this, bitmap);
                } else {
                    int format = GLUtils.getInternalFormat(bitmap);
                    int type = GLUtils.getType(bitmap);
                    Config config = bitmap.getConfig();

                    canvas.initializeTextureSize(this, format, type);
                    canvas.texSubImage2D(this, mBorder, mBorder, bitmap, format, type);

                    if (mBorder > 0) {
                        // Left border
                        Bitmap line = getBorderLine(true, config, texHeight);
                        canvas.texSubImage2D(this, 0, 0, line, format, type);

                        // Top border
                        line = getBorderLine(false, config, texWidth);
                        canvas.texSubImage2D(this, 0, 0, line, format, type);
                    }

                    // Right border
                    if (mBorder + bWidth < texWidth) {
                        Bitmap line = getBorderLine(true, config, texHeight);
                        canvas.texSubImage2D(this, mBorder + bWidth, 0, line, format, type);
                    }

                    // Bottom border
                    if (mBorder + bHeight < texHeight) {
                        Bitmap line = getBorderLine(false, config, texWidth);
                        canvas.texSubImage2D(this, 0, mBorder + bHeight, line, format, type);
                    }
                }
            } finally {
                freeBitmap();
            }
            // Update texture state.
            setAssociatedCanvas(canvas);
            mState = STATE_LOADED;
            mContentValid = true;
        } else {
            mState = STATE_ERROR;
            throw new RuntimeException("Texture load fail, no bitmap");
        }
!!!31559351.java!!!	onBind(inout canvas : GLCanvas) : boolean
        updateContent(canvas);
        return isContentValid();
!!!31559479.java!!!	getTarget() : int
        return GL11.GL_TEXTURE_2D;
!!!31559607.java!!!	setOpaque(inout isOpaque : boolean) : void
        mOpaque = isOpaque;
!!!31559735.java!!!	isOpaque() : boolean
        return mOpaque;
!!!31559863.java!!!	recycle() : void
        super.recycle();
        if (mBitmap != null) freeBitmap();
