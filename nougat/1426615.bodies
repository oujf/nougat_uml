class BaseObj
!!!31614391.java!!!	BaseObj(in id : long, inout rs : RenderScript)
        rs.validate();
        mRS = rs;
        mID = id;
        mDestroyed = false;
!!!31614519.java!!!	setID(in id : long) : void
        if (mID != 0) {
            throw new RSRuntimeException("Internal Error, reset of object ID.");
        }
        mID = id;
!!!31614647.java!!!	getID(inout rs : RenderScript) : long
        mRS.validate();
        if (mDestroyed) {
            throw new RSInvalidStateException("using a destroyed object.");
        }
        if (mID == 0) {
            throw new RSRuntimeException("Internal error: Object id 0.");
        }
        if ((rs != null) && (rs != mRS)) {
            throw new RSInvalidStateException("using object with mismatched context.");
        }
        return mID;
!!!31614775.java!!!	checkValid() : void
        if (mID == 0) {
            throw new RSIllegalArgumentException("Invalid object.");
        }
!!!31614903.java!!!	setName(inout name : String) : void
        if (name == null) {
            throw new RSIllegalArgumentException(
                "setName requires a string of non-zero length.");
        }
        if(name.length() < 1) {
            throw new RSIllegalArgumentException(
                "setName does not accept a zero length string.");
        }
        if(mName != null) {
            throw new RSIllegalArgumentException(
                "setName object already has a name.");
        }

        try {
            byte[] bytes = name.getBytes("UTF-8");
            mRS.nAssignName(mID, bytes);
            mName = name;
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
!!!31615031.java!!!	getName() : String
        return mName;
!!!31615159.java!!!	helpDestroy() : void
        boolean shouldDestroy = false;
        synchronized(this) {
            if (!mDestroyed) {
                shouldDestroy = true;
                mDestroyed = true;
            }
        }

        if (shouldDestroy) {
            guard.close();
            // must include nObjDestroy in the critical section
            ReentrantReadWriteLock.ReadLock rlock = mRS.mRWLock.readLock();
            rlock.lock();
            // AllocationAdapters are BaseObjs with an ID of 0 but should not be passed to nObjDestroy
            if(mRS.isAlive() && mID != 0) {
                mRS.nObjDestroy(mID);
            }
            rlock.unlock();
            mRS = null;
            mID = 0;
        }
!!!31615287.java!!!	finalize() : void
        try {
            if (guard != null) {
                guard.warnIfOpen();
            }
            helpDestroy();
        } finally {
            super.finalize();
        }
!!!31615415.java!!!	destroy() : void
        if(mDestroyed) {
            throw new RSInvalidStateException("Object already destroyed.");
        }
        helpDestroy();
!!!31615543.java!!!	updateFromNative() : void
        mRS.validate();
        mName = mRS.nGetName(getID(mRS));
!!!31615671.java!!!	hashCode() : int
        return (int)((mID & 0xfffffff) ^ (mID >> 32));
!!!31615799.java!!!	equals(inout obj : Object) : boolean
        // Early-out check to see if both BaseObjs are actually the same
        if (this == obj)
            return true;

        if (obj == null) {
            return false;
        }

        if (getClass() != obj.getClass()) {
            return false;
        }

        BaseObj b = (BaseObj) obj;
        return mID == b.mID;
