class Type
!!!31849527.java!!!	getElement() : Element
        return mElement;
!!!31849655.java!!!	getX() : int
        return mDimX;
!!!31849783.java!!!	getY() : int
        return mDimY;
!!!31849911.java!!!	getZ() : int
        return mDimZ;
!!!31850039.java!!!	getYuv() : int
        return mDimYuv;
!!!31850167.java!!!	hasMipmaps() : boolean
        return mDimMipmaps;
!!!31850295.java!!!	hasFaces() : boolean
        return mDimFaces;
!!!31850423.java!!!	getCount() : int
        return mElementCount;
!!!31850551.java!!!	getArray(in arrayNum : int) : int
        if ((arrayNum < 0) || (arrayNum >= mMaxArrays)) {
            throw new RSIllegalArgumentException("Array dimension out of range.");
        }

        if (mArrays == null || arrayNum >= mArrays.length) {
            // Dimension in range but no array for that dimension allocated
            return 0;
        }

        return mArrays[arrayNum];
!!!31850679.java!!!	getArrayCount() : int
        if (mArrays != null) return mArrays.length;
        return 0;
!!!31850807.java!!!	calcElementCount() : void
        boolean hasLod = hasMipmaps();
        int x = getX();
        int y = getY();
        int z = getZ();
        int faces = 1;
        if (hasFaces()) {
            faces = 6;
        }
        if (x == 0) {
            x = 1;
        }
        if (y == 0) {
            y = 1;
        }
        if (z == 0) {
            z = 1;
        }

        int count = x * y * z * faces;

        while (hasLod && ((x > 1) || (y > 1) || (z > 1))) {
            if(x > 1) {
                x >>= 1;
            }
            if(y > 1) {
                y >>= 1;
            }
            if(z > 1) {
                z >>= 1;
            }

            count += x * y * z * faces;
        }

        if (mArrays != null) {
            for (int ct = 0; ct < mArrays.length; ct++) {
                count *= mArrays[ct];
            }
        }

        mElementCount = count;
!!!31850935.java!!!	Type(in id : long, inout rs : RenderScript)
        super(id, rs);
        guard.open("destroy");
!!!31851063.java!!!	updateFromNative() : void
        // We have 6 integer/long to obtain mDimX; mDimY; mDimZ;
        // mDimLOD; mDimFaces; mElement;
        long[] dataBuffer = new long[6];
        mRS.nTypeGetNativeData(getID(mRS), dataBuffer);

        mDimX = (int)dataBuffer[0];
        mDimY = (int)dataBuffer[1];
        mDimZ = (int)dataBuffer[2];
        mDimMipmaps = dataBuffer[3] == 1 ? true : false;
        mDimFaces = dataBuffer[4] == 1 ? true : false;

        long elementID = dataBuffer[5];
        if(elementID != 0) {
            mElement = new Element(elementID, mRS);
            mElement.updateFromNative();
        }
        calcElementCount();
!!!31851191.java!!!	createX(inout rs : RenderScript, inout e : Element, in dimX : int) : Type
        if (dimX < 1) {
            throw new RSInvalidStateException("Dimension must be >= 1.");
        }

        long id = rs.nTypeCreate(e.getID(rs), dimX, 0, 0, false, false, 0);
        Type t = new Type(id, rs);
        t.mElement = e;
        t.mDimX = dimX;
        t.calcElementCount();
        return t;
!!!31851319.java!!!	createXY(inout rs : RenderScript, inout e : Element, in dimX : int, in dimY : int) : Type
        if ((dimX < 1) || (dimY < 1)) {
            throw new RSInvalidStateException("Dimension must be >= 1.");
        }

        long id = rs.nTypeCreate(e.getID(rs), dimX, dimY, 0, false, false, 0);
        Type t = new Type(id, rs);
        t.mElement = e;
        t.mDimX = dimX;
        t.mDimY = dimY;
        t.calcElementCount();
        return t;
!!!31851447.java!!!	createXYZ(inout rs : RenderScript, inout e : Element, in dimX : int, in dimY : int, in dimZ : int) : Type
        if ((dimX < 1) || (dimY < 1) || (dimZ < 1)) {
            throw new RSInvalidStateException("Dimension must be >= 1.");
        }

        long id = rs.nTypeCreate(e.getID(rs), dimX, dimY, dimZ, false, false, 0);
        Type t = new Type(id, rs);
        t.mElement = e;
        t.mDimX = dimX;
        t.mDimY = dimY;
        t.mDimZ = dimZ;
        t.calcElementCount();
        return t;
