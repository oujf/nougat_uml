class Builder2
!!!31802679.java!!!	Builder2(inout rs : RenderScript)
            mRS = rs;
            mClosures = new ArrayList<Closure>();
            mInputs = new ArrayList<Input>();
!!!31802807.java!!!	addKernelInternal(inout k : Script::KernelID, inout returnType : Type, inout args : Object, inout globalBindings : Map<Script.FieldID, Object>) : ScriptGroup::Closure
            Closure c = new Closure(mRS, k, returnType, args, globalBindings);
            mClosures.add(c);
            return c;
!!!31802935.java!!!	addInvokeInternal(inout invoke : Script::InvokeID, inout args : Object, inout globalBindings : Map<Script.FieldID, Object>) : ScriptGroup::Closure
            Closure c = new Closure(mRS, invoke, args, globalBindings);
            mClosures.add(c);
            return c;
!!!31803063.java!!!	addInput() : ScriptGroup::Input
            Input unbound = new Input();
            mInputs.add(unbound);
            return unbound;
!!!31803191.java!!!	addKernel(inout k : Script::KernelID, inout returnType : Type, inout  : Object...argsAndBindings) : ScriptGroup::Closure
            ArrayList<Object> args = new ArrayList<Object>();
            Map<Script.FieldID, Object> bindingMap = new HashMap<Script.FieldID, Object>();
            if (!seperateArgsAndBindings(argsAndBindings, args, bindingMap)) {
                return null;
            }
            return addKernelInternal(k, returnType, args.toArray(), bindingMap);
!!!31803319.java!!!	addInvoke(inout invoke : Script::InvokeID, inout  : Object...argsAndBindings) : ScriptGroup::Closure
            ArrayList<Object> args = new ArrayList<Object>();
            Map<Script.FieldID, Object> bindingMap = new HashMap<Script.FieldID, Object>();
            if (!seperateArgsAndBindings(argsAndBindings, args, bindingMap)) {
                return null;
            }
            return addInvokeInternal(invoke, args.toArray(), bindingMap);
!!!31803447.java!!!	create(inout name : String, inout  : Future...outputs) : ScriptGroup
            if (name == null || name.isEmpty() || name.length() > 100 ||
                !name.equals(name.replaceAll("[^a-zA-Z0-9-]", "_"))) {
                throw new RSIllegalArgumentException("invalid script group name");
            }
            ScriptGroup ret = new ScriptGroup(mRS, name, mClosures, mInputs, outputs);
            mClosures = new ArrayList<Closure>();
            mInputs = new ArrayList<Input>();
            return ret;
!!!31803575.java!!!	seperateArgsAndBindings(inout argsAndBindings : Object, inout args : ArrayList<Object>, inout bindingMap : Map<Script.FieldID, Object>) : boolean
            int i;
            for (i = 0; i < argsAndBindings.length; i++) {
                if (argsAndBindings[i] instanceof Binding) {
                    break;
                }
                args.add(argsAndBindings[i]);
            }

            for (; i < argsAndBindings.length; i++) {
                if (!(argsAndBindings[i] instanceof Binding)) {
                    return false;
                }
                Binding b = (Binding)argsAndBindings[i];
                bindingMap.put(b.getField(), b.getValue());
            }

            return true;
