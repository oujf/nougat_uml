class ScriptIntrinsicHistogram
!!!31831351.java!!!	ScriptIntrinsicHistogram(in id : long, inout rs : RenderScript)
        super(id, rs);
!!!31831479.java!!!	create(inout rs : RenderScript, inout e : Element) : ScriptIntrinsicHistogram
        if ((!e.isCompatible(Element.U8_4(rs))) &&
            (!e.isCompatible(Element.U8_3(rs))) &&
            (!e.isCompatible(Element.U8_2(rs))) &&
            (!e.isCompatible(Element.U8(rs)))) {
            throw new RSIllegalArgumentException("Unsuported element type.");
        }
        long id = rs.nScriptIntrinsicCreate(9, e.getID(rs));
        ScriptIntrinsicHistogram sib = new ScriptIntrinsicHistogram(id, rs);
        return sib;
!!!31831607.java!!!	forEach(inout ain : Allocation) : void
        forEach(ain, null);
!!!31831735.java!!!	forEach(inout ain : Allocation, inout opt : Script::LaunchOptions) : void
        if (ain.getType().getElement().getVectorSize() <
            mOut.getType().getElement().getVectorSize()) {

            throw new RSIllegalArgumentException(
                "Input vector size must be >= output vector size.");
        }
        if (!ain.getType().getElement().isCompatible(Element.U8(mRS)) &&
            !ain.getType().getElement().isCompatible(Element.U8_2(mRS)) &&
            !ain.getType().getElement().isCompatible(Element.U8_3(mRS)) &&
            !ain.getType().getElement().isCompatible(Element.U8_4(mRS))) {
            throw new RSIllegalArgumentException("Input type must be U8, U8_1, U8_2 or U8_4.");
        }

        forEach(0, ain, null, null, opt);
!!!31831863.java!!!	setDotCoefficients(in r : float, in g : float, in b : float, in a : float) : void
        if ((r < 0.f) || (g < 0.f) || (b < 0.f) || (a < 0.f)) {
            throw new RSIllegalArgumentException("Coefficient may not be negative.");
        }
        if ((r + g + b + a) > 1.f) {
            throw new RSIllegalArgumentException("Sum of coefficients must be 1.0 or less.");
        }

        FieldPacker fp = new FieldPacker(16);
        fp.addF32(r);
        fp.addF32(g);
        fp.addF32(b);
        fp.addF32(a);
        setVar(0, fp);
!!!31831991.java!!!	setOutput(inout aout : Allocation) : void
        mOut = aout;
        if (mOut.getType().getElement() != Element.U32(mRS) &&
            mOut.getType().getElement() != Element.U32_2(mRS) &&
            mOut.getType().getElement() != Element.U32_3(mRS) &&
            mOut.getType().getElement() != Element.U32_4(mRS) &&
            mOut.getType().getElement() != Element.I32(mRS) &&
            mOut.getType().getElement() != Element.I32_2(mRS) &&
            mOut.getType().getElement() != Element.I32_3(mRS) &&
            mOut.getType().getElement() != Element.I32_4(mRS)) {

            throw new RSIllegalArgumentException("Output type must be U32 or I32.");
        }
        if ((mOut.getType().getX() != 256) ||
            (mOut.getType().getY() != 0) ||
            mOut.getType().hasMipmaps() ||
            (mOut.getType().getYuv() != 0)) {

            throw new RSIllegalArgumentException("Output must be 1D, 256 elements.");
        }
        setVar(1, aout);
!!!31832119.java!!!	forEach_Dot(inout ain : Allocation) : void
        forEach_Dot(ain, null);
!!!31832247.java!!!	forEach_Dot(inout ain : Allocation, inout opt : Script::LaunchOptions) : void
        if (mOut.getType().getElement().getVectorSize() != 1) {
            throw new RSIllegalArgumentException("Output vector size must be one.");
        }
        if (!ain.getType().getElement().isCompatible(Element.U8(mRS)) &&
            !ain.getType().getElement().isCompatible(Element.U8_2(mRS)) &&
            !ain.getType().getElement().isCompatible(Element.U8_3(mRS)) &&
            !ain.getType().getElement().isCompatible(Element.U8_4(mRS))) {
            throw new RSIllegalArgumentException("Input type must be U8, U8_1, U8_2 or U8_4.");
        }

        forEach(1, ain, null, null, opt);
!!!31832375.java!!!	getKernelID_Separate() : Script::KernelID
        return createKernelID(0, 3, null, null);
!!!31832503.java!!!	getFieldID_Input() : Script::FieldID
        return createFieldID(1, null);
