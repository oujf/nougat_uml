class MotionEventInjector
!!!31919287.java!!!	MotionEventInjector(inout looper : Looper)
        mHandler = new Handler(looper, new Callback());
!!!31919415.java!!!	injectEvents(inout events : List<MotionEvent>, inout serviceInterface : IAccessibilityServiceClient, in sequence : int) : void
        SomeArgs args = SomeArgs.obtain();
        args.arg1 = events;
        args.arg2 = serviceInterface;
        args.argi1 = sequence;
        mHandler.sendMessage(mHandler.obtainMessage(MESSAGE_INJECT_EVENTS, args));
!!!31919543.java!!!	onMotionEvent(inout event : MotionEvent, inout rawEvent : MotionEvent, in policyFlags : int) : void
        cancelAnyPendingInjectedEvents();
        sendMotionEventToNext(event, rawEvent, policyFlags);
!!!31919671.java!!!	onKeyEvent(inout event : KeyEvent, in policyFlags : int) : void
        if (mNext != null) {
            mNext.onKeyEvent(event, policyFlags);
        }
!!!31919799.java!!!	onAccessibilityEvent(inout event : AccessibilityEvent) : void
        if (mNext != null) {
            mNext.onAccessibilityEvent(event);
        }
!!!31919927.java!!!	setNext(inout next : EventStreamTransformation) : void
        mNext = next;
!!!31920055.java!!!	clearEvents(in inputSource : int) : void
        /*
         * Reset state for motion events passing through so we won't send a cancel event for
         * them.
         */
        if (!mHandler.hasMessages(MESSAGE_SEND_MOTION_EVENT)) {
            mOpenGesturesInProgress.put(inputSource, false);
        }
!!!31920183.java!!!	onDestroy() : void
        cancelAnyPendingInjectedEvents();
        mIsDestroyed = true;
!!!31920311.java!!!	injectEventsMainThread(inout events : List<MotionEvent>, inout serviceInterface : IAccessibilityServiceClient, in sequence : int) : void
        if (mIsDestroyed) {
            try {
                serviceInterface.onPerformGestureResult(sequence, false);
            } catch (RemoteException re) {
                Slog.e(LOG_TAG, "Error sending status with mIsDestroyed to " + serviceInterface,
                        re);
            }
            return;
        }
        cancelAnyPendingInjectedEvents();
        mSourceOfInjectedGesture = events.get(0).getSource();
        cancelAnyGestureInProgress(mSourceOfInjectedGesture);
        mServiceInterfaceForCurrentGesture = serviceInterface;
        mSequenceForCurrentGesture = sequence;
        if (mNext == null) {
            notifyService(false);
            return;
        }

        long startTime = SystemClock.uptimeMillis();
        for (int i = 0; i < events.size(); i++) {
            MotionEvent event = events.get(i);
            int numPointers = event.getPointerCount();
            if (numPointers > mPointerCoords.length) {
                mPointerCoords = new MotionEvent.PointerCoords[numPointers];
                mPointerProperties = new MotionEvent.PointerProperties[numPointers];
            }
            for (int j = 0; j < numPointers; j++) {
                if (mPointerCoords[j] == null) {
                    mPointerCoords[j] = new MotionEvent.PointerCoords();
                    mPointerProperties[j] = new MotionEvent.PointerProperties();
                }
                event.getPointerCoords(j, mPointerCoords[j]);
                event.getPointerProperties(j, mPointerProperties[j]);
            }

            /*
             * MotionEvent doesn't have a setEventTime() method (it carries around history data,
             * which could become inconsistent), so we need to obtain a new one.
             */
            MotionEvent offsetEvent = MotionEvent.obtain(startTime + event.getDownTime(),
                    startTime + event.getEventTime(), event.getAction(), numPointers,
                    mPointerProperties, mPointerCoords, event.getMetaState(),
                    event.getButtonState(), event.getXPrecision(), event.getYPrecision(),
                    event.getDeviceId(), event.getEdgeFlags(), event.getSource(),
                    event.getFlags());
            Message message = mHandler.obtainMessage(MESSAGE_SEND_MOTION_EVENT, offsetEvent);
            mHandler.sendMessageDelayed(message, event.getEventTime());
        }
!!!31920439.java!!!	sendMotionEventToNext(inout event : MotionEvent, inout rawEvent : MotionEvent, in policyFlags : int) : void
        if (mNext != null) {
            mNext.onMotionEvent(event, rawEvent, policyFlags);
            if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
                mOpenGesturesInProgress.put(event.getSource(), true);
            }
            if ((event.getActionMasked() == MotionEvent.ACTION_UP)
                    || (event.getActionMasked() == MotionEvent.ACTION_CANCEL)) {
                mOpenGesturesInProgress.put(event.getSource(), false);
            }
        }
!!!31920567.java!!!	cancelAnyGestureInProgress(in source : int) : void
        if ((mNext != null) && mOpenGesturesInProgress.get(source, false)) {
            long now = SystemClock.uptimeMillis();
            MotionEvent cancelEvent =
                    MotionEvent.obtain(now, now, MotionEvent.ACTION_CANCEL, 0.0f, 0.0f, 0);
            sendMotionEventToNext(cancelEvent, cancelEvent,
                    WindowManagerPolicy.FLAG_PASS_TO_USER);
        }
!!!31920695.java!!!	cancelAnyPendingInjectedEvents() : void
        if (mHandler.hasMessages(MESSAGE_SEND_MOTION_EVENT)) {
            cancelAnyGestureInProgress(mSourceOfInjectedGesture);
            mHandler.removeMessages(MESSAGE_SEND_MOTION_EVENT);
            notifyService(false);
        }

!!!31920823.java!!!	notifyService(inout success : boolean) : void
        try {
            mServiceInterfaceForCurrentGesture.onPerformGestureResult(
                    mSequenceForCurrentGesture, success);
        } catch (RemoteException re) {
            Slog.e(LOG_TAG, "Error sending motion event injection status to "
                    + mServiceInterfaceForCurrentGesture, re);
        }
