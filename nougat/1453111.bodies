class SecurityPolicy
!!!31951031.java!!!	isEnabledGroupProfile(in profileId : int) : boolean
            final int parentId = UserHandle.getCallingUserId();
            return isParentOrProfile(parentId, profileId) && isProfileEnabled(profileId);
!!!31951159.java!!!	getEnabledGroupProfileIds(in userId : int) : int
            final int parentId = getGroupParent(userId);

            final long identity = Binder.clearCallingIdentity();
            try {
                return mUserManager.getEnabledProfileIds(parentId);
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
!!!31951287.java!!!	enforceServiceExistsAndRequiresBindRemoteViewsPermission(inout componentName : ComponentName, in userId : int) : void
            final long identity = Binder.clearCallingIdentity();
            try {
                ServiceInfo serviceInfo = mPackageManager.getServiceInfo(componentName,
                        PackageManager.GET_PERMISSIONS, userId);
                if (serviceInfo == null) {
                    throw new SecurityException("Service " + componentName
                            + " not installed for user " + userId);
                }
                if (!android.Manifest.permission.BIND_REMOTEVIEWS.equals(serviceInfo.permission)) {
                    throw new SecurityException("Service " + componentName
                            + " in user " + userId + "does not require "
                            + android.Manifest.permission.BIND_REMOTEVIEWS);
                }
            } catch (RemoteException re) {
                // Local call - shouldn't happen.
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
!!!31951415.java!!!	enforceModifyAppWidgetBindPermissions(inout packageName : String) : void
            mContext.enforceCallingPermission(
                    android.Manifest.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS,
                    "hasBindAppWidgetPermission packageName=" + packageName);
!!!31951543.java!!!	enforceCallFromPackage(inout packageName : String) : void
            mAppOpsManager.checkPackage(Binder.getCallingUid(), packageName);
!!!31951671.java!!!	hasCallerBindPermissionOrBindWhiteListedLocked(inout packageName : String) : boolean
            try {
                mContext.enforceCallingOrSelfPermission(
                        android.Manifest.permission.BIND_APPWIDGET, null);
            } catch (SecurityException se) {
                if (!isCallerBindAppWidgetWhiteListedLocked(packageName)) {
                    return false;
                }
            }
            return true;
!!!31951799.java!!!	isCallerBindAppWidgetWhiteListedLocked(inout packageName : String) : boolean
            final int userId = UserHandle.getCallingUserId();
            final int packageUid = getUidForPackage(packageName, userId);
            if (packageUid < 0) {
                throw new IllegalArgumentException("No package " + packageName
                        + " for user " + userId);
            }
            synchronized (mLock) {
                ensureGroupStateLoadedLocked(userId);

                Pair<Integer, String> packageId = Pair.create(userId, packageName);
                if (mPackagesWithBindWidgetPermission.contains(packageId)) {
                    return true;
                }
            }

            return false;
!!!31951927.java!!!	canAccessAppWidget(inout widget : AppWidgetServiceImpl::Widget, in uid : int, inout packageName : String) : boolean
            if (isHostInPackageForUid(widget.host, uid, packageName)) {
                // Apps hosting the AppWidget have access to it.
                return true;
            }
            if (isProviderInPackageForUid(widget.provider, uid, packageName)) {
                // Apps providing the AppWidget have access to it.
                return true;
            }
            if (isHostAccessingProvider(widget.host, widget.provider, uid, packageName)) {
                // Apps hosting the AppWidget get to bind to a remote view service in the provider.
                return true;
            }
            final int userId = UserHandle.getUserId(uid);
            if ((widget.host.getUserId() == userId || (widget.provider != null
                    && widget.provider.getUserId() == userId))
                && mContext.checkCallingPermission(android.Manifest.permission.BIND_APPWIDGET)
                    == PackageManager.PERMISSION_GRANTED) {
                // Apps that run in the same user as either the host or the provider and
                // have the bind widget permission have access to the widget.
                return true;
            }
            return false;
!!!31952055.java!!!	isParentOrProfile(in parentId : int, in profileId : int) : boolean
            if (parentId == profileId) {
                return true;
            }
            return getProfileParent(profileId) == parentId;
!!!31952183.java!!!	isProviderInCallerOrInProfileAndWhitelListed(inout packageName : String, in profileId : int) : boolean
            final int callerId = UserHandle.getCallingUserId();
            if (profileId == callerId) {
                return true;
            }
            final int parentId = getProfileParent(profileId);
            if (parentId != callerId) {
                return false;
            }
            return isProviderWhiteListed(packageName, profileId);
!!!31952311.java!!!	isProviderWhiteListed(inout packageName : String, in profileId : int) : boolean
            // If the policy manager is not available on the device we deny it all.
            if (mDevicePolicyManagerInternal == null) {
                return false;
            }

            List<String> crossProfilePackages = mDevicePolicyManagerInternal
                    .getCrossProfileWidgetProviders(profileId);

            return crossProfilePackages.contains(packageName);
!!!31952439.java!!!	getProfileParent(in profileId : int) : int
            final long identity = Binder.clearCallingIdentity();
            try {
                UserInfo parent = mUserManager.getProfileParent(profileId);
                if (parent != null) {
                    return parent.getUserHandle().getIdentifier();
                }
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
            return UNKNOWN_USER_ID;
!!!31952567.java!!!	getGroupParent(in profileId : int) : int
            final int parentId = mSecurityPolicy.getProfileParent(profileId);
            return (parentId != UNKNOWN_USER_ID) ? parentId : profileId;
!!!31952695.java!!!	isHostInPackageForUid(inout host : AppWidgetServiceImpl::Host, in uid : int, inout packageName : String) : boolean
            return host.id.uid == uid && host.id.packageName.equals(packageName);
!!!31952823.java!!!	isProviderInPackageForUid(inout provider : AppWidgetServiceImpl::Provider, in uid : int, inout packageName : String) : boolean
            // Packages providing the AppWidget have access to it.
            return provider != null && provider.id.uid == uid
                    && provider.id.componentName.getPackageName().equals(packageName);
!!!31952951.java!!!	isHostAccessingProvider(inout host : AppWidgetServiceImpl::Host, inout provider : AppWidgetServiceImpl::Provider, in uid : int, inout packageName : String) : boolean
            // The host creates a package context to bind to remote views service in the provider.
            return host.id.uid == uid && provider != null
                    && provider.id.componentName.getPackageName().equals(packageName);
!!!31953079.java!!!	isProfileEnabled(in profileId : int) : boolean
            final long identity = Binder.clearCallingIdentity();
            try {
                UserInfo userInfo = mUserManager.getUserInfo(profileId);
                if (userInfo == null || !userInfo.isEnabled()) {
                    return false;
                }
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
            return true;
