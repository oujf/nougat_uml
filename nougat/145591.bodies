class Paint
!!!4452023.java!!!	Paint()
        this(0);
!!!4452151.java!!!	Paint(in flags : int)
        mNativePaint = nInit();
        NoImagePreloadHolder.sRegistry.registerNativeAllocation(this, mNativePaint);
        setFlags(flags | HIDDEN_DEFAULT_PAINT_FLAGS);
        // TODO: Turning off hinting has undesirable side effects, we need to
        //       revisit hinting once we add support for subpixel positioning
        // setHinting(DisplayMetrics.DENSITY_DEVICE >= DisplayMetrics.DENSITY_TV
        //        ? HINTING_OFF : HINTING_ON);
        mCompatScaling = mInvCompatScaling = 1;
        setTextLocales(LocaleList.getAdjustedDefault());
!!!4452279.java!!!	Paint(inout paint : Paint)
        mNativePaint = nInitWithPaint(paint.getNativeInstance());
        NoImagePreloadHolder.sRegistry.registerNativeAllocation(this, mNativePaint);
        setClassVariablesFrom(paint);
!!!4452407.java!!!	reset() : void
        nReset(mNativePaint);
        setFlags(HIDDEN_DEFAULT_PAINT_FLAGS);

        // TODO: Turning off hinting has undesirable side effects, we need to
        //       revisit hinting once we add support for subpixel positioning
        // setHinting(DisplayMetrics.DENSITY_DEVICE >= DisplayMetrics.DENSITY_TV
        //        ? HINTING_OFF : HINTING_ON);

        mColorFilter = null;
        mMaskFilter = null;
        mPathEffect = null;
        mRasterizer = null;
        mShader = null;
        mNativeShader = 0;
        mTypeface = null;
        mNativeTypeface = 0;
        mXfermode = null;

        mHasCompatScaling = false;
        mCompatScaling = 1;
        mInvCompatScaling = 1;

        mBidiFlags = BIDI_DEFAULT_LTR;
        setTextLocales(LocaleList.getAdjustedDefault());
        setElegantTextHeight(false);
        mFontFeatureSettings = null;
!!!4452535.java!!!	set(inout src : Paint) : void
        if (this != src) {
            // copy over the native settings
            nSet(mNativePaint, src.mNativePaint);
            setClassVariablesFrom(src);
        }
!!!4452663.java!!!	setClassVariablesFrom(inout paint : Paint) : void
        mColorFilter = paint.mColorFilter;
        mMaskFilter = paint.mMaskFilter;
        mPathEffect = paint.mPathEffect;
        mRasterizer = paint.mRasterizer;
        mShader = paint.mShader;
        mNativeShader = paint.mNativeShader;
        mTypeface = paint.mTypeface;
        mNativeTypeface = paint.mNativeTypeface;
        mXfermode = paint.mXfermode;

        mHasCompatScaling = paint.mHasCompatScaling;
        mCompatScaling = paint.mCompatScaling;
        mInvCompatScaling = paint.mInvCompatScaling;

        mBidiFlags = paint.mBidiFlags;
        mLocales = paint.mLocales;
        mFontFeatureSettings = paint.mFontFeatureSettings;
!!!4452791.java!!!	setCompatibilityScaling(in factor : float) : void
        if (factor == 1.0) {
            mHasCompatScaling = false;
            mCompatScaling = mInvCompatScaling = 1.0f;
        } else {
            mHasCompatScaling = true;
            mCompatScaling = factor;
            mInvCompatScaling = 1.0f/factor;
        }
!!!4452919.java!!!	getNativeInstance() : long
        long newNativeShader = mShader == null ? 0 : mShader.getNativeInstance();
        if (newNativeShader != mNativeShader) {
            mNativeShader = newNativeShader;
            nSetShader(mNativePaint, mNativeShader);
        }
        return mNativePaint;
!!!4453047.java!!!	getBidiFlags() : int
        return mBidiFlags;
!!!4453175.java!!!	setBidiFlags(in flags : int) : void
        // only flag value is the 3-bit BIDI control setting
        flags &= BIDI_FLAG_MASK;
        if (flags > BIDI_MAX_FLAG_VALUE) {
            throw new IllegalArgumentException("unknown bidi flag: " + flags);
        }
        mBidiFlags = flags;
!!!4453303.java!!!	getFlags() : int
        return nGetFlags(mNativePaint);
!!!4453559.java!!!	setFlags(in flags : int) : void
        nSetFlags(mNativePaint, flags);
!!!4453815.java!!!	getHinting() : int
        return nGetHinting(mNativePaint);
!!!4454071.java!!!	setHinting(in mode : int) : void
        nSetHinting(mNativePaint, mode);
!!!4454327.java!!!	isAntiAlias() : boolean
        return (getFlags() & ANTI_ALIAS_FLAG) != 0;
!!!4454455.java!!!	setAntiAlias(inout aa : boolean) : void
        nSetAntiAlias(mNativePaint, aa);
!!!4454711.java!!!	isDither() : boolean
        return (getFlags() & DITHER_FLAG) != 0;
!!!4454839.java!!!	setDither(inout dither : boolean) : void
        nSetDither(mNativePaint, dither);
!!!4455095.java!!!	isLinearText() : boolean
        return (getFlags() & LINEAR_TEXT_FLAG) != 0;
!!!4455223.java!!!	setLinearText(inout linearText : boolean) : void
        nSetLinearText(mNativePaint, linearText);
!!!4455479.java!!!	isSubpixelText() : boolean
        return (getFlags() & SUBPIXEL_TEXT_FLAG) != 0;
!!!4455607.java!!!	setSubpixelText(inout subpixelText : boolean) : void
        nSetSubpixelText(mNativePaint, subpixelText);
!!!4455863.java!!!	isUnderlineText() : boolean
        return (getFlags() & UNDERLINE_TEXT_FLAG) != 0;
!!!4455991.java!!!	setUnderlineText(inout underlineText : boolean) : void
        nSetUnderlineText(mNativePaint, underlineText);
!!!4456247.java!!!	isStrikeThruText() : boolean
        return (getFlags() & STRIKE_THRU_TEXT_FLAG) != 0;
!!!4456375.java!!!	setStrikeThruText(inout strikeThruText : boolean) : void
        nSetStrikeThruText(mNativePaint, strikeThruText);
!!!4456631.java!!!	isFakeBoldText() : boolean
        return (getFlags() & FAKE_BOLD_TEXT_FLAG) != 0;
!!!4456759.java!!!	setFakeBoldText(inout fakeBoldText : boolean) : void
        nSetFakeBoldText(mNativePaint, fakeBoldText);
!!!4457015.java!!!	isFilterBitmap() : boolean
        return (getFlags() & FILTER_BITMAP_FLAG) != 0;
!!!4457143.java!!!	setFilterBitmap(inout filter : boolean) : void
        nSetFilterBitmap(mNativePaint, filter);
!!!4457399.java!!!	getStyle() : Paint::Style
        return sStyleArray[nGetStyle(mNativePaint)];
!!!4457527.java!!!	setStyle(inout style : Paint::Style) : void
        nSetStyle(mNativePaint, style.nativeInt);
!!!4457655.java!!!	getColor() : int
        return nGetColor(mNativePaint);
!!!4457911.java!!!	setColor(in color : int) : void
        nSetColor(mNativePaint, color);
!!!4458167.java!!!	getAlpha() : int
        return nGetAlpha(mNativePaint);
!!!4458423.java!!!	setAlpha(in a : int) : void
        nSetAlpha(mNativePaint, a);
!!!4458679.java!!!	setARGB(in a : int, in r : int, in g : int, in b : int) : void
        setColor((a << 24) | (r << 16) | (g << 8) | b);
!!!4458807.java!!!	getStrokeWidth() : float
        return nGetStrokeWidth(mNativePaint);
!!!4459063.java!!!	setStrokeWidth(in width : float) : void
        nSetStrokeWidth(mNativePaint, width);
!!!4459319.java!!!	getStrokeMiter() : float
        return nGetStrokeMiter(mNativePaint);
!!!4459575.java!!!	setStrokeMiter(in miter : float) : void
        nSetStrokeMiter(mNativePaint, miter);
!!!4459831.java!!!	getStrokeCap() : Paint::Cap
        return sCapArray[nGetStrokeCap(mNativePaint)];
!!!4459959.java!!!	setStrokeCap(inout cap : Paint::Cap) : void
        nSetStrokeCap(mNativePaint, cap.nativeInt);
!!!4460087.java!!!	getStrokeJoin() : Paint::Join
        return sJoinArray[nGetStrokeJoin(mNativePaint)];
!!!4460215.java!!!	setStrokeJoin(inout join : Paint::Join) : void
        nSetStrokeJoin(mNativePaint, join.nativeInt);
!!!4460343.java!!!	getFillPath(inout src : Path, inout dst : Path) : boolean
        return nGetFillPath(mNativePaint, src.ni(), dst.ni());
!!!4460471.java!!!	getShader() : Shader
        return mShader;
!!!4460599.java!!!	setShader(inout shader : Shader) : Shader
        // If mShader changes, cached value of native shader aren't valid, since
        // old shader's pointer may be reused by another shader allocation later
        if (mShader != shader) {
            mNativeShader = -1;
        }
        // Defer setting the shader natively until getNativeInstance() is called
        mShader = shader;
        return shader;
!!!4460727.java!!!	getColorFilter() : ColorFilter
        return mColorFilter;
!!!4460855.java!!!	setColorFilter(inout filter : ColorFilter) : ColorFilter
        long filterNative = 0;
        if (filter != null)
            filterNative = filter.native_instance;
        nSetColorFilter(mNativePaint, filterNative);
        mColorFilter = filter;
        return filter;
!!!4460983.java!!!	getXfermode() : Xfermode
        return mXfermode;
!!!4461111.java!!!	setXfermode(inout xfermode : Xfermode) : Xfermode
        long xfermodeNative = 0;
        if (xfermode != null)
            xfermodeNative = xfermode.native_instance;
        nSetXfermode(mNativePaint, xfermodeNative);
        mXfermode = xfermode;
        return xfermode;
!!!4461239.java!!!	getPathEffect() : PathEffect
        return mPathEffect;
!!!4461367.java!!!	setPathEffect(inout effect : PathEffect) : PathEffect
        long effectNative = 0;
        if (effect != null) {
            effectNative = effect.native_instance;
        }
        nSetPathEffect(mNativePaint, effectNative);
        mPathEffect = effect;
        return effect;
!!!4461495.java!!!	getMaskFilter() : MaskFilter
        return mMaskFilter;
!!!4461623.java!!!	setMaskFilter(inout maskfilter : MaskFilter) : MaskFilter
        long maskfilterNative = 0;
        if (maskfilter != null) {
            maskfilterNative = maskfilter.native_instance;
        }
        nSetMaskFilter(mNativePaint, maskfilterNative);
        mMaskFilter = maskfilter;
        return maskfilter;
!!!4461751.java!!!	getTypeface() : Typeface
        return mTypeface;
!!!4461879.java!!!	setTypeface(inout typeface : Typeface) : Typeface
        long typefaceNative = 0;
        if (typeface != null) {
            typefaceNative = typeface.native_instance;
        }
        nSetTypeface(mNativePaint, typefaceNative);
        mTypeface = typeface;
        mNativeTypeface = typefaceNative;
        return typeface;
!!!4462007.java!!!	getRasterizer() : Rasterizer
        return mRasterizer;
!!!4462135.java!!!	setRasterizer(inout rasterizer : Rasterizer) : Rasterizer
        long rasterizerNative = 0;
        if (rasterizer != null) {
            rasterizerNative = rasterizer.native_instance;
        }
        nSetRasterizer(mNativePaint, rasterizerNative);
        mRasterizer = rasterizer;
        return rasterizer;
!!!4462263.java!!!	setShadowLayer(in radius : float, in dx : float, in dy : float, in shadowColor : int) : void
      nSetShadowLayer(mNativePaint, radius, dx, dy, shadowColor);
!!!4462391.java!!!	clearShadowLayer() : void
        setShadowLayer(0, 0, 0, 0);
!!!4462519.java!!!	hasShadowLayer() : boolean
        return nHasShadowLayer(mNativePaint);
!!!4462647.java!!!	getTextAlign() : Paint::Align
        return sAlignArray[nGetTextAlign(mNativePaint)];
!!!4462775.java!!!	setTextAlign(inout align : Paint::Align) : void
        nSetTextAlign(mNativePaint, align.nativeInt);
!!!4462903.java!!!	getTextLocale() : Locale
        return mLocales.get(0);
!!!4463031.java!!!	getTextLocales() : LocaleList
        return mLocales;
!!!4463159.java!!!	setTextLocale(inout locale : Locale) : void
        if (locale == null) {
            throw new IllegalArgumentException("locale cannot be null");
        }
        if (mLocales != null && mLocales.size() == 1 && locale.equals(mLocales.get(0))) {
            return;
        }
        mLocales = new LocaleList(locale);
        syncTextLocalesWithMinikin();
!!!4463287.java!!!	setTextLocales(inout locales : LocaleList) : void
        if (locales == null || locales.isEmpty()) {
            throw new IllegalArgumentException("locales cannot be null or empty");
        }
        if (locales.equals(mLocales)) return;
        mLocales = locales;
        syncTextLocalesWithMinikin();
!!!4463415.java!!!	syncTextLocalesWithMinikin() : void
        final String languageTags = mLocales.toLanguageTags();
        final Integer minikinLangListId;
        synchronized (sCacheLock) {
            minikinLangListId = sMinikinLangListIdCache.get(languageTags);
            if (minikinLangListId == null) {
                final int newID = nSetTextLocales(mNativePaint, languageTags);
                sMinikinLangListIdCache.put(languageTags, newID);
                return;
            }
        }
        nSetTextLocalesByMinikinLangListId(mNativePaint, minikinLangListId.intValue());
!!!4463543.java!!!	isElegantTextHeight() : boolean
        return nIsElegantTextHeight(mNativePaint);
!!!4463799.java!!!	setElegantTextHeight(inout elegant : boolean) : void
        nSetElegantTextHeight(mNativePaint, elegant);
!!!4464055.java!!!	getTextSize() : float
        return nGetTextSize(mNativePaint);
!!!4464311.java!!!	setTextSize(in textSize : float) : void
        nSetTextSize(mNativePaint, textSize);
!!!4464567.java!!!	getTextScaleX() : float
        return nGetTextScaleX(mNativePaint);
!!!4464823.java!!!	setTextScaleX(in scaleX : float) : void
        nSetTextScaleX(mNativePaint, scaleX);
!!!4465079.java!!!	getTextSkewX() : float
        return nGetTextSkewX(mNativePaint);
!!!4465335.java!!!	setTextSkewX(in skewX : float) : void
        nSetTextSkewX(mNativePaint, skewX);
!!!4465591.java!!!	getLetterSpacing() : float
        return nGetLetterSpacing(mNativePaint);
!!!4465719.java!!!	setLetterSpacing(in letterSpacing : float) : void
        nSetLetterSpacing(mNativePaint, letterSpacing);
!!!4465847.java!!!	getFontFeatureSettings() : String
        return mFontFeatureSettings;
!!!4465975.java!!!	setFontFeatureSettings(inout settings : String) : void
        if (settings != null && settings.equals("")) {
            settings = null;
        }
        if ((settings == null && mFontFeatureSettings == null)
                || (settings != null && settings.equals(mFontFeatureSettings))) {
            return;
        }
        mFontFeatureSettings = settings;
        nSetFontFeatureSettings(mNativePaint, settings);
!!!4466103.java!!!	getHyphenEdit() : int
        return nGetHyphenEdit(mNativePaint);
!!!4466231.java!!!	setHyphenEdit(in hyphen : int) : void
        nSetHyphenEdit(mNativePaint, hyphen);
!!!4466359.java!!!	ascent() : float
        return nAscent(mNativePaint, mNativeTypeface);
!!!4466615.java!!!	descent() : float
        return nDescent(mNativePaint, mNativeTypeface);
!!!4466871.java!!!	getFontMetrics(inout metrics : Paint::FontMetrics) : float
        return nGetFontMetrics(mNativePaint, mNativeTypeface, metrics);
!!!4467127.java!!!	getFontMetrics() : Paint::FontMetrics
        FontMetrics fm = new FontMetrics();
        getFontMetrics(fm);
        return fm;
!!!4467383.java!!!	getFontMetricsInt(inout fmi : Paint::FontMetricsInt) : int
        return nGetFontMetricsInt(mNativePaint, mNativeTypeface, fmi);
!!!4467639.java!!!	getFontMetricsInt() : Paint::FontMetricsInt
        FontMetricsInt fm = new FontMetricsInt();
        getFontMetricsInt(fm);
        return fm;
!!!4467767.java!!!	getFontSpacing() : float
        return getFontMetrics(null);
!!!4467895.java!!!	measureText(inout text : char, in index : int, in count : int) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((index | count) < 0 || index + count > text.length) {
            throw new ArrayIndexOutOfBoundsException();
        }

        if (text.length == 0 || count == 0) {
            return 0f;
        }
        if (!mHasCompatScaling) {
            return (float) Math.ceil(nGetTextAdvances(mNativePaint, mNativeTypeface, text,
                    index, count, index, count, mBidiFlags, null, 0));
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize * mCompatScaling);
        float w = nGetTextAdvances(mNativePaint, mNativeTypeface, text, index, count, index,
                count, mBidiFlags, null, 0);
        setTextSize(oldSize);
        return (float) Math.ceil(w*mInvCompatScaling);
!!!4468023.java!!!	measureText(inout text : String, in start : int, in end : int) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (text.length() == 0 || start == end) {
            return 0f;
        }
        if (!mHasCompatScaling) {
            return (float) Math.ceil(nGetTextAdvances(mNativePaint, mNativeTypeface, text,
                    start, end, start, end, mBidiFlags, null, 0));
        }
        final float oldSize = getTextSize();
        setTextSize(oldSize * mCompatScaling);
        float w = nGetTextAdvances(mNativePaint, mNativeTypeface, text, start, end, start,
                end, mBidiFlags, null, 0);
        setTextSize(oldSize);
        return (float) Math.ceil(w * mInvCompatScaling);
!!!4468151.java!!!	measureText(inout text : String) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        return measureText(text, 0, text.length());
!!!4468279.java!!!	measureText(inout text : CharSequence, in start : int, in end : int) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (text.length() == 0 || start == end) {
            return 0f;
        }
        if (text instanceof String) {
            return measureText((String)text, start, end);
        }
        if (text instanceof SpannedString ||
            text instanceof SpannableString) {
            return measureText(text.toString(), start, end);
        }
        if (text instanceof GraphicsOperations) {
            return ((GraphicsOperations)text).measureText(start, end, this);
        }

        char[] buf = TemporaryBuffer.obtain(end - start);
        TextUtils.getChars(text, start, end, buf, 0);
        float result = measureText(buf, 0, end - start);
        TemporaryBuffer.recycle(buf);
        return result;
!!!4468407.java!!!	breakText(inout text : char, in index : int, in count : int, in maxWidth : float, inout measuredWidth : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if (index < 0 || text.length - index < Math.abs(count)) {
            throw new ArrayIndexOutOfBoundsException();
        }

        if (text.length == 0 || count == 0) {
            return 0;
        }
        if (!mHasCompatScaling) {
            return nBreakText(mNativePaint, mNativeTypeface, text, index, count, maxWidth,
                    mBidiFlags, measuredWidth);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize * mCompatScaling);
        int res = nBreakText(mNativePaint, mNativeTypeface, text, index, count,
                maxWidth * mCompatScaling, mBidiFlags, measuredWidth);
        setTextSize(oldSize);
        if (measuredWidth != null) measuredWidth[0] *= mInvCompatScaling;
        return res;
!!!4468663.java!!!	breakText(inout text : CharSequence, in start : int, in end : int, inout measureForwards : boolean, in maxWidth : float, inout measuredWidth : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (text.length() == 0 || start == end) {
            return 0;
        }
        if (start == 0 && text instanceof String && end == text.length()) {
            return breakText((String) text, measureForwards, maxWidth,
                             measuredWidth);
        }

        char[] buf = TemporaryBuffer.obtain(end - start);
        int result;

        TextUtils.getChars(text, start, end, buf, 0);

        if (measureForwards) {
            result = breakText(buf, 0, end - start, maxWidth, measuredWidth);
        } else {
            result = breakText(buf, 0, -(end - start), maxWidth, measuredWidth);
        }

        TemporaryBuffer.recycle(buf);
        return result;
!!!4468791.java!!!	breakText(inout text : String, inout measureForwards : boolean, in maxWidth : float, inout measuredWidth : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }

        if (text.length() == 0) {
            return 0;
        }
        if (!mHasCompatScaling) {
            return nBreakText(mNativePaint, mNativeTypeface, text, measureForwards,
                    maxWidth, mBidiFlags, measuredWidth);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize*mCompatScaling);
        int res = nBreakText(mNativePaint, mNativeTypeface, text, measureForwards,
                maxWidth*mCompatScaling, mBidiFlags, measuredWidth);
        setTextSize(oldSize);
        if (measuredWidth != null) measuredWidth[0] *= mInvCompatScaling;
        return res;
!!!4469047.java!!!	getTextWidths(inout text : char, in index : int, in count : int, inout widths : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((index | count) < 0 || index + count > text.length
                || count > widths.length) {
            throw new ArrayIndexOutOfBoundsException();
        }

        if (text.length == 0 || count == 0) {
            return 0;
        }
        if (!mHasCompatScaling) {
            nGetTextAdvances(mNativePaint, mNativeTypeface, text, index, count, index, count,
                    mBidiFlags, widths, 0);
            return count;
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize * mCompatScaling);
        nGetTextAdvances(mNativePaint, mNativeTypeface, text, index, count, index, count,
                mBidiFlags, widths, 0);
        setTextSize(oldSize);
        for (int i = 0; i < count; i++) {
            widths[i] *= mInvCompatScaling;
        }
        return count;
!!!4469175.java!!!	getTextWidths(inout text : CharSequence, in start : int, in end : int, inout widths : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }
        if (end - start > widths.length) {
            throw new ArrayIndexOutOfBoundsException();
        }

        if (text.length() == 0 || start == end) {
            return 0;
        }
        if (text instanceof String) {
            return getTextWidths((String) text, start, end, widths);
        }
        if (text instanceof SpannedString ||
            text instanceof SpannableString) {
            return getTextWidths(text.toString(), start, end, widths);
        }
        if (text instanceof GraphicsOperations) {
            return ((GraphicsOperations) text).getTextWidths(start, end,
                                                                 widths, this);
        }

        char[] buf = TemporaryBuffer.obtain(end - start);
        TextUtils.getChars(text, start, end, buf, 0);
        int result = getTextWidths(buf, 0, end - start, widths);
        TemporaryBuffer.recycle(buf);
        return result;
!!!4469303.java!!!	getTextWidths(inout text : String, in start : int, in end : int, inout widths : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }
        if (end - start > widths.length) {
            throw new ArrayIndexOutOfBoundsException();
        }

        if (text.length() == 0 || start == end) {
            return 0;
        }
        if (!mHasCompatScaling) {
            nGetTextAdvances(mNativePaint, mNativeTypeface, text, start, end, start, end,
                    mBidiFlags, widths, 0);
            return end - start;
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize * mCompatScaling);
        nGetTextAdvances(mNativePaint, mNativeTypeface, text, start, end, start, end,
                mBidiFlags, widths, 0);
        setTextSize(oldSize);
        for (int i = 0; i < end - start; i++) {
            widths[i] *= mInvCompatScaling;
        }
        return end - start;
!!!4469431.java!!!	getTextWidths(inout text : String, inout widths : float) : int
        return getTextWidths(text, 0, text.length(), widths);
!!!4469559.java!!!	getTextRunAdvances(inout chars : char, in index : int, in count : int, in contextIndex : int, in contextCount : int, inout isRtl : boolean, inout advances : float, in advancesIndex : int) : float

        if (chars == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((index | count | contextIndex | contextCount | advancesIndex
                | (index - contextIndex) | (contextCount - count)
                | ((contextIndex + contextCount) - (index + count))
                | (chars.length - (contextIndex + contextCount))
                | (advances == null ? 0 :
                    (advances.length - (advancesIndex + count)))) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (chars.length == 0 || count == 0){
            return 0f;
        }
        if (!mHasCompatScaling) {
            return nGetTextAdvances(mNativePaint, mNativeTypeface, chars, index, count,
                    contextIndex, contextCount, isRtl ? BIDI_FORCE_RTL : BIDI_FORCE_LTR, advances,
                    advancesIndex);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize * mCompatScaling);
        float res = nGetTextAdvances(mNativePaint, mNativeTypeface, chars, index, count,
                contextIndex, contextCount, isRtl ? BIDI_FORCE_RTL : BIDI_FORCE_LTR, advances,
                advancesIndex);
        setTextSize(oldSize);

        if (advances != null) {
            for (int i = advancesIndex, e = i + count; i < e; i++) {
                advances[i] *= mInvCompatScaling;
            }
        }
        return res * mInvCompatScaling; // assume errors are not significant
!!!4469687.java!!!	getTextRunAdvances(inout text : CharSequence, in start : int, in end : int, in contextStart : int, in contextEnd : int, inout isRtl : boolean, inout advances : float, in advancesIndex : int) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | contextStart | contextEnd | advancesIndex | (end - start)
                | (start - contextStart) | (contextEnd - end)
                | (text.length() - contextEnd)
                | (advances == null ? 0 :
                    (advances.length - advancesIndex - (end - start)))) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (text instanceof String) {
            return getTextRunAdvances((String) text, start, end,
                    contextStart, contextEnd, isRtl, advances, advancesIndex);
        }
        if (text instanceof SpannedString ||
            text instanceof SpannableString) {
            return getTextRunAdvances(text.toString(), start, end,
                    contextStart, contextEnd, isRtl, advances, advancesIndex);
        }
        if (text instanceof GraphicsOperations) {
            return ((GraphicsOperations) text).getTextRunAdvances(start, end,
                    contextStart, contextEnd, isRtl, advances, advancesIndex, this);
        }
        if (text.length() == 0 || end == start) {
            return 0f;
        }

        int contextLen = contextEnd - contextStart;
        int len = end - start;
        char[] buf = TemporaryBuffer.obtain(contextLen);
        TextUtils.getChars(text, contextStart, contextEnd, buf, 0);
        float result = getTextRunAdvances(buf, start - contextStart, len,
                0, contextLen, isRtl, advances, advancesIndex);
        TemporaryBuffer.recycle(buf);
        return result;
!!!4469815.java!!!	getTextRunAdvances(inout text : String, in start : int, in end : int, in contextStart : int, in contextEnd : int, inout isRtl : boolean, inout advances : float, in advancesIndex : int) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((start | end | contextStart | contextEnd | advancesIndex | (end - start)
                | (start - contextStart) | (contextEnd - end)
                | (text.length() - contextEnd)
                | (advances == null ? 0 :
                    (advances.length - advancesIndex - (end - start)))) < 0) {
            throw new IndexOutOfBoundsException();
        }

        if (text.length() == 0 || start == end) {
            return 0f;
        }

        if (!mHasCompatScaling) {
            return nGetTextAdvances(mNativePaint, mNativeTypeface, text, start, end,
                    contextStart, contextEnd, isRtl ? BIDI_FORCE_RTL : BIDI_FORCE_LTR, advances,
                    advancesIndex);
        }

        final float oldSize = getTextSize();
        setTextSize(oldSize * mCompatScaling);
        float totalAdvance = nGetTextAdvances(mNativePaint, mNativeTypeface, text, start,
                end, contextStart, contextEnd, isRtl ? BIDI_FORCE_RTL : BIDI_FORCE_LTR, advances,
                advancesIndex);
        setTextSize(oldSize);

        if (advances != null) {
            for (int i = advancesIndex, e = i + (end - start); i < e; i++) {
                advances[i] *= mInvCompatScaling;
            }
        }
        return totalAdvance * mInvCompatScaling; // assume errors are insignificant
!!!4469943.java!!!	getTextRunCursor(inout text : char, in contextStart : int, in contextLength : int, in dir : int, in offset : int, in cursorOpt : int) : int
        int contextEnd = contextStart + contextLength;
        if (((contextStart | contextEnd | offset | (contextEnd - contextStart)
                | (offset - contextStart) | (contextEnd - offset)
                | (text.length - contextEnd) | cursorOpt) < 0)
                || cursorOpt > CURSOR_OPT_MAX_VALUE) {
            throw new IndexOutOfBoundsException();
        }

        return nGetTextRunCursor(mNativePaint, text,
                contextStart, contextLength, dir, offset, cursorOpt);
!!!4470071.java!!!	getTextRunCursor(inout text : CharSequence, in contextStart : int, in contextEnd : int, in dir : int, in offset : int, in cursorOpt : int) : int

        if (text instanceof String || text instanceof SpannedString ||
                text instanceof SpannableString) {
            return getTextRunCursor(text.toString(), contextStart, contextEnd,
                    dir, offset, cursorOpt);
        }
        if (text instanceof GraphicsOperations) {
            return ((GraphicsOperations) text).getTextRunCursor(
                    contextStart, contextEnd, dir, offset, cursorOpt, this);
        }

        int contextLen = contextEnd - contextStart;
        char[] buf = TemporaryBuffer.obtain(contextLen);
        TextUtils.getChars(text, contextStart, contextEnd, buf, 0);
        int relPos = getTextRunCursor(buf, 0, contextLen, dir, offset - contextStart, cursorOpt);
        TemporaryBuffer.recycle(buf);
        return (relPos == -1) ? -1 : relPos + contextStart;
!!!4470199.java!!!	getTextRunCursor(inout text : String, in contextStart : int, in contextEnd : int, in dir : int, in offset : int, in cursorOpt : int) : int
        if (((contextStart | contextEnd | offset | (contextEnd - contextStart)
                | (offset - contextStart) | (contextEnd - offset)
                | (text.length() - contextEnd) | cursorOpt) < 0)
                || cursorOpt > CURSOR_OPT_MAX_VALUE) {
            throw new IndexOutOfBoundsException();
        }

        return nGetTextRunCursor(mNativePaint, text,
                contextStart, contextEnd, dir, offset, cursorOpt);
!!!4470327.java!!!	getTextPath(inout text : char, in index : int, in count : int, in x : float, in y : float, inout path : Path) : void
        if ((index | count) < 0 || index + count > text.length) {
            throw new ArrayIndexOutOfBoundsException();
        }
        nGetTextPath(mNativePaint, mNativeTypeface, mBidiFlags, text, index, count, x, y,
                path.ni());
!!!4470455.java!!!	getTextPath(inout text : String, in start : int, in end : int, in x : float, in y : float, inout path : Path) : void
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }
        nGetTextPath(mNativePaint, mNativeTypeface, mBidiFlags, text, start, end, x, y,
                path.ni());
!!!4470583.java!!!	getTextBounds(inout text : String, in start : int, in end : int, inout bounds : Rect) : void
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }
        if (bounds == null) {
            throw new NullPointerException("need bounds Rect");
        }
        nGetStringBounds(mNativePaint, mNativeTypeface, text, start, end, mBidiFlags, bounds);
!!!4470711.java!!!	getTextBounds(inout text : char, in index : int, in count : int, inout bounds : Rect) : void
        if ((index | count) < 0 || index + count > text.length) {
            throw new ArrayIndexOutOfBoundsException();
        }
        if (bounds == null) {
            throw new NullPointerException("need bounds Rect");
        }
        nGetCharArrayBounds(mNativePaint, mNativeTypeface, text, index, count, mBidiFlags,
            bounds);
!!!4470839.java!!!	hasGlyph(inout string : String) : boolean
        return nHasGlyph(mNativePaint, mNativeTypeface, mBidiFlags, string);
!!!4470967.java!!!	getRunAdvance(inout text : char, in start : int, in end : int, in contextStart : int, in contextEnd : int, inout isRtl : boolean, in offset : int) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((contextStart | start | offset | end | contextEnd
                | start - contextStart | offset - start | end - offset
                | contextEnd - end | text.length - contextEnd) < 0) {
            throw new IndexOutOfBoundsException();
        }
        if (end == start) {
            return 0.0f;
        }
        // TODO: take mCompatScaling into account (or eliminate compat scaling)?
        return nGetRunAdvance(mNativePaint, mNativeTypeface, text, start, end,
                contextStart, contextEnd, isRtl, offset);
!!!4471095.java!!!	getRunAdvance(inout text : CharSequence, in start : int, in end : int, in contextStart : int, in contextEnd : int, inout isRtl : boolean, in offset : int) : float
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((contextStart | start | offset | end | contextEnd
                | start - contextStart | offset - start | end - offset
                | contextEnd - end | text.length() - contextEnd) < 0) {
            throw new IndexOutOfBoundsException();
        }
        if (end == start) {
            return 0.0f;
        }
        // TODO performance: specialized alternatives to avoid buffer copy, if win is significant
        char[] buf = TemporaryBuffer.obtain(contextEnd - contextStart);
        TextUtils.getChars(text, contextStart, contextEnd, buf, 0);
        float result = getRunAdvance(buf, start - contextStart, end - contextStart, 0,
                contextEnd - contextStart, isRtl, offset - contextStart);
        TemporaryBuffer.recycle(buf);
        return result;
!!!4471223.java!!!	getOffsetForAdvance(inout text : char, in start : int, in end : int, in contextStart : int, in contextEnd : int, inout isRtl : boolean, in advance : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((contextStart | start | end | contextEnd
                | start - contextStart | end - start | contextEnd - end
                | text.length - contextEnd) < 0) {
            throw new IndexOutOfBoundsException();
        }
        // TODO: take mCompatScaling into account (or eliminate compat scaling)?
        return nGetOffsetForAdvance(mNativePaint, mNativeTypeface, text, start, end,
                contextStart, contextEnd, isRtl, advance);
!!!4471351.java!!!	getOffsetForAdvance(inout text : CharSequence, in start : int, in end : int, in contextStart : int, in contextEnd : int, inout isRtl : boolean, in advance : float) : int
        if (text == null) {
            throw new IllegalArgumentException("text cannot be null");
        }
        if ((contextStart | start | end | contextEnd
                | start - contextStart | end - start | contextEnd - end
                | text.length() - contextEnd) < 0) {
            throw new IndexOutOfBoundsException();
        }
        // TODO performance: specialized alternatives to avoid buffer copy, if win is significant
        char[] buf = TemporaryBuffer.obtain(contextEnd - contextStart);
        TextUtils.getChars(text, contextStart, contextEnd, buf, 0);
        int result = getOffsetForAdvance(buf, start - contextStart, end - contextStart, 0,
                contextEnd - contextStart, isRtl, advance) + contextStart;
        TemporaryBuffer.recycle(buf);
        return result;
