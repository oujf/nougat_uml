class ThreadedRenderer
!!!4990903.java!!!	disable(inout system : boolean) : void
        sRendererDisabled = true;
        if (system) {
            sSystemRendererDisabled = true;
        }
!!!4991031.java!!!	enableForegroundTrimming() : void
        sTrimForeground = true;
!!!4991159.java!!!	isAvailable() : boolean
        return DisplayListCanvas.isAvailable();
!!!4991287.java!!!	setupDiskCache(inout cacheDir : File) : void
        ThreadedRenderer.setupShadersDiskCache(new File(cacheDir, CACHE_PATH_SHADERS).getAbsolutePath());
!!!4991415.java!!!	create(inout context : Context, inout translucent : boolean) : ThreadedRenderer
        ThreadedRenderer renderer = null;
        if (DisplayListCanvas.isAvailable()) {
            renderer = new ThreadedRenderer(context, translucent);
        }
        return renderer;
!!!4991543.java!!!	trimMemory(in level : int) : void
        nTrimMemory(level);
!!!4991671.java!!!	overrideProperty(inout name : String, inout value : String) : void
        if (name == null || value == null) {
            throw new IllegalArgumentException("name and value must be non-null");
        }
        nOverrideProperty(name, value);
!!!4991799.java!!!	dumpProfileData(inout data : byte, inout fd : FileDescriptor) : void
        nDumpProfileData(data, fd);
!!!4991927.java!!!	ThreadedRenderer(inout context : Context, inout translucent : boolean)
        final TypedArray a = context.obtainStyledAttributes(null, R.styleable.Lighting, 0, 0);
        mLightY = a.getDimension(R.styleable.Lighting_lightY, 0);
        mLightZ = a.getDimension(R.styleable.Lighting_lightZ, 0);
        mLightRadius = a.getDimension(R.styleable.Lighting_lightRadius, 0);
        mAmbientShadowAlpha =
                (int) (255 * a.getFloat(R.styleable.Lighting_ambientShadowAlpha, 0) + 0.5f);
        mSpotShadowAlpha = (int) (255 * a.getFloat(R.styleable.Lighting_spotShadowAlpha, 0) + 0.5f);
        a.recycle();

        long rootNodePtr = nCreateRootRenderNode();
        mRootNode = RenderNode.adopt(rootNodePtr);
        mRootNode.setClipToBounds(false);
        mNativeProxy = nCreateProxy(translucent, rootNodePtr);

        ProcessInitializer.sInstance.init(context, mNativeProxy);

        loadSystemProperties();
!!!4992055.java!!!	destroy() : void
        mInitialized = false;
        updateEnabledState(null);
        nDestroy(mNativeProxy, mRootNode.mNativeRenderNode);
!!!4992183.java!!!	isEnabled() : boolean
        return mEnabled;
!!!4992311.java!!!	setEnabled(inout enabled : boolean) : void
        mEnabled = enabled;
!!!4992439.java!!!	isRequested() : boolean
        return mRequested;
!!!4992567.java!!!	setRequested(inout requested : boolean) : void
        mRequested = requested;
!!!4992695.java!!!	updateEnabledState(inout surface : Surface) : void
        if (surface == null || !surface.isValid()) {
            setEnabled(false);
        } else {
            setEnabled(mInitialized);
        }
!!!4992823.java!!!	initialize(inout surface : Surface) : boolean
        boolean status = !mInitialized;
        mInitialized = true;
        updateEnabledState(surface);
        nInitialize(mNativeProxy, surface);
        return status;
!!!4992951.java!!!	initializeIfNeeded(in width : int, in height : int, inout attachInfo : View::AttachInfo, inout surface : Surface, inout surfaceInsets : Rect) : boolean
        if (isRequested()) {
            // We lost the gl context, so recreate it.
            if (!isEnabled()) {
                if (initialize(surface)) {
                    setup(width, height, attachInfo, surfaceInsets);
                    return true;
                }
            }
        }
        return false;
!!!4993079.java!!!	updateSurface(inout surface : Surface) : void
        updateEnabledState(surface);
        nUpdateSurface(mNativeProxy, surface);
!!!4993207.java!!!	pauseSurface(inout surface : Surface) : boolean
        return nPauseSurface(mNativeProxy, surface);
!!!4993335.java!!!	setStopped(inout stopped : boolean) : void
        nSetStopped(mNativeProxy, stopped);
!!!4993463.java!!!	destroyHardwareResources(inout view : View) : void
        destroyResources(view);
        nDestroyHardwareResources(mNativeProxy);
!!!4993591.java!!!	destroyResources(inout view : View) : void
        view.destroyHardwareResources();

        if (view instanceof ViewGroup) {
            ViewGroup group = (ViewGroup) view;

            int count = group.getChildCount();
            for (int i = 0; i < count; i++) {
                destroyResources(group.getChildAt(i));
            }
        }
!!!4993719.java!!!	invalidate(inout surface : Surface) : void
        updateSurface(surface);
!!!4993847.java!!!	detachSurfaceTexture(in hardwareLayer : long) : void
        nDetachSurfaceTexture(mNativeProxy, hardwareLayer);
!!!4993975.java!!!	setup(in width : int, in height : int, inout attachInfo : View::AttachInfo, inout surfaceInsets : Rect) : void
        mWidth = width;
        mHeight = height;

        if (surfaceInsets != null && (surfaceInsets.left != 0 || surfaceInsets.right != 0
                || surfaceInsets.top != 0 || surfaceInsets.bottom != 0)) {
            mHasInsets = true;
            mInsetLeft = surfaceInsets.left;
            mInsetTop = surfaceInsets.top;
            mSurfaceWidth = width + mInsetLeft + surfaceInsets.right;
            mSurfaceHeight = height + mInsetTop + surfaceInsets.bottom;

            // If the surface has insets, it can't be opaque.
            setOpaque(false);
        } else {
            mHasInsets = false;
            mInsetLeft = 0;
            mInsetTop = 0;
            mSurfaceWidth = width;
            mSurfaceHeight = height;
        }

        mRootNode.setLeftTopRightBottom(-mInsetLeft, -mInsetTop, mSurfaceWidth, mSurfaceHeight);
        nSetup(mNativeProxy, mSurfaceWidth, mSurfaceHeight, mLightRadius,
                mAmbientShadowAlpha, mSpotShadowAlpha);

        setLightCenter(attachInfo);
!!!4994103.java!!!	setLightCenter(inout attachInfo : View::AttachInfo) : void
        // Adjust light position for window offsets.
        final Point displaySize = attachInfo.mPoint;
        attachInfo.mDisplay.getRealSize(displaySize);
        final float lightX = displaySize.x / 2f - attachInfo.mWindowLeft;
        final float lightY = mLightY - attachInfo.mWindowTop;

        nSetLightCenter(mNativeProxy, lightX, lightY, mLightZ);
!!!4994231.java!!!	setOpaque(inout opaque : boolean) : void
        nSetOpaque(mNativeProxy, opaque && !mHasInsets);
!!!4994359.java!!!	getWidth() : int
        return mWidth;
!!!4994487.java!!!	getHeight() : int
        return mHeight;
!!!4994615.java!!!	dumpGfxInfo(inout pw : PrintWriter, inout fd : FileDescriptor, inout args : String) : void
        pw.flush();
        int flags = 0;
        for (int i = 0; i < args.length; i++) {
            switch (args[i]) {
                case "framestats":
                    flags |= FLAG_DUMP_FRAMESTATS;
                    break;
                case "reset":
                    flags |= FLAG_DUMP_RESET;
                    break;
            }
        }
        nDumpProfileInfo(mNativeProxy, fd, flags);
!!!4994743.java!!!	loadSystemProperties() : boolean
        boolean changed = nLoadSystemProperties(mNativeProxy);
        if (changed) {
            invalidateRoot();
        }
        return changed;
!!!4994871.java!!!	updateViewTreeDisplayList(inout view : View) : void
        view.mPrivateFlags |= View.PFLAG_DRAWN;
        view.mRecreateDisplayList = (view.mPrivateFlags & View.PFLAG_INVALIDATED)
                == View.PFLAG_INVALIDATED;
        view.mPrivateFlags &= ~View.PFLAG_INVALIDATED;
        view.updateDisplayListIfDirty();
        view.mRecreateDisplayList = false;
!!!4994999.java!!!	updateRootDisplayList(inout view : View, inout callbacks : ThreadedRenderer::HardwareDrawCallbacks) : void
        Trace.traceBegin(Trace.TRACE_TAG_VIEW, "Record View#draw()");
        updateViewTreeDisplayList(view);

        if (mRootNodeNeedsUpdate || !mRootNode.isValid()) {
            DisplayListCanvas canvas = mRootNode.start(mSurfaceWidth, mSurfaceHeight);
            try {
                final int saveCount = canvas.save();
                canvas.translate(mInsetLeft, mInsetTop);
                callbacks.onHardwarePreDraw(canvas);

                canvas.insertReorderBarrier();
                canvas.drawRenderNode(view.updateDisplayListIfDirty());
                canvas.insertInorderBarrier();

                callbacks.onHardwarePostDraw(canvas);
                canvas.restoreToCount(saveCount);
                mRootNodeNeedsUpdate = false;
            } finally {
                mRootNode.end(canvas);
            }
        }
        Trace.traceEnd(Trace.TRACE_TAG_VIEW);
!!!4995127.java!!!	addRenderNode(inout node : RenderNode, inout placeFront : boolean) : void
        nAddRenderNode(mNativeProxy, node.mNativeRenderNode, placeFront);
!!!4995255.java!!!	removeRenderNode(inout node : RenderNode) : void
        nRemoveRenderNode(mNativeProxy, node.mNativeRenderNode);
!!!4995383.java!!!	drawRenderNode(inout node : RenderNode) : void
        nDrawRenderNode(mNativeProxy, node.mNativeRenderNode);
!!!4995511.java!!!	setContentDrawBounds(in left : int, in top : int, in right : int, in bottom : int) : void
        nSetContentDrawBounds(mNativeProxy, left, top, right, bottom);
!!!4995895.java!!!	invalidateRoot() : void
        mRootNodeNeedsUpdate = true;
!!!4996023.java!!!	draw(inout view : View, inout attachInfo : View::AttachInfo, inout callbacks : ThreadedRenderer::HardwareDrawCallbacks) : void
        attachInfo.mIgnoreDirtyState = true;

        final Choreographer choreographer = attachInfo.mViewRootImpl.mChoreographer;
        choreographer.mFrameInfo.markDrawStart();

        updateRootDisplayList(view, callbacks);

        attachInfo.mIgnoreDirtyState = false;

        // register animating rendernodes which started animating prior to renderer
        // creation, which is typical for animators started prior to first draw
        if (attachInfo.mPendingAnimatingRenderNodes != null) {
            final int count = attachInfo.mPendingAnimatingRenderNodes.size();
            for (int i = 0; i < count; i++) {
                registerAnimatingRenderNode(
                        attachInfo.mPendingAnimatingRenderNodes.get(i));
            }
            attachInfo.mPendingAnimatingRenderNodes.clear();
            // We don't need this anymore as subsequent calls to
            // ViewRootImpl#attachRenderNodeAnimator will go directly to us.
            attachInfo.mPendingAnimatingRenderNodes = null;
        }

        final long[] frameInfo = choreographer.mFrameInfo.mFrameInfo;
        int syncResult = nSyncAndDrawFrame(mNativeProxy, frameInfo, frameInfo.length);
        if ((syncResult & SYNC_LOST_SURFACE_REWARD_IF_FOUND) != 0) {
            setEnabled(false);
            attachInfo.mViewRootImpl.mSurface.release();
            // Invalidate since we failed to draw. This should fetch a Surface
            // if it is still needed or do nothing if we are no longer drawing
            attachInfo.mViewRootImpl.invalidate();
        }
        if ((syncResult & SYNC_INVALIDATE_REQUIRED) != 0) {
            attachInfo.mViewRootImpl.invalidate();
        }
!!!4996151.java!!!	invokeFunctor(in functor : long, inout waitForCompletion : boolean) : void
        nInvokeFunctor(functor, waitForCompletion);
!!!4996279.java!!!	createTextureLayer() : HardwareLayer
        long layer = nCreateTextureLayer(mNativeProxy);
        return HardwareLayer.adoptTextureLayer(this, layer);
!!!4996407.java!!!	buildLayer(inout node : RenderNode) : void
        nBuildLayer(mNativeProxy, node.getNativeDisplayList());
!!!4996535.java!!!	copyLayerInto(in layer : HardwareLayer, in bitmap : Bitmap) : boolean
        return nCopyLayerInto(mNativeProxy,
                layer.getDeferredLayerUpdater(), bitmap);
!!!4996663.java!!!	pushLayerUpdate(inout layer : HardwareLayer) : void
        nPushLayerUpdate(mNativeProxy, layer.getDeferredLayerUpdater());
!!!4996791.java!!!	onLayerDestroyed(inout layer : HardwareLayer) : void
        nCancelLayerUpdate(mNativeProxy, layer.getDeferredLayerUpdater());
!!!4996919.java!!!	setName(inout name : String) : void
        nSetName(mNativeProxy, name);
!!!4997047.java!!!	fence() : void
        nFence(mNativeProxy);
!!!4997175.java!!!	stopDrawing() : void
        nStopDrawing(mNativeProxy);
!!!4997303.java!!!	notifyFramePending() : void
        nNotifyFramePending(mNativeProxy);
!!!4997431.java!!!	registerAnimatingRenderNode(inout animator : RenderNode) : void
        nRegisterAnimatingRenderNode(mRootNode.mNativeRenderNode, animator.mNativeRenderNode);
!!!4997559.java!!!	serializeDisplayListTree() : void
        nSerializeDisplayListTree(mNativeProxy);
!!!4997687.java!!!	copySurfaceInto(inout surface : Surface, inout bitmap : Bitmap) : int
        return nCopySurfaceInto(surface, bitmap);
!!!4997815.java!!!	finalize() : void
        try {
            nDeleteProxy(mNativeProxy);
            mNativeProxy = 0;
        } finally {
            super.finalize();
        }
!!!4998455.java!!!	addFrameMetricsObserver(inout observer : FrameMetricsObserver) : void
        long nativeObserver = nAddFrameMetricsObserver(mNativeProxy, observer);
        observer.mNative = new VirtualRefBasePtr(nativeObserver);
!!!4998583.java!!!	removeFrameMetricsObserver(inout observer : FrameMetricsObserver) : void
        nRemoveFrameMetricsObserver(mNativeProxy, observer.mNative.get());
        observer.mNative = null;
