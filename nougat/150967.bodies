class RectF
!!!27821111.java!!!	RectF(in left : float, in top : float, in right : float, in bottom : float)
        this.left = left;
        this.top = top;
        this.right = right;
        this.bottom = bottom;
!!!27821239.java!!!	RectF(inout r : RectF)
        if (r == null) {
            left = top = right = bottom = 0.0f;
        } else {
            left = r.left;
            top = r.top;
            right = r.right;
            bottom = r.bottom;
        }
!!!27821367.java!!!	RectF(inout r : Rect)
        if (r == null) {
            left = top = right = bottom = 0.0f;
        } else {
            left = r.left;
            top = r.top;
            right = r.right;
            bottom = r.bottom;
        }
!!!27821495.java!!!	equals(inout o : Object) : boolean
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        RectF r = (RectF) o;
        return left == r.left && top == r.top && right == r.right && bottom == r.bottom;
!!!27821623.java!!!	hashCode() : int
        int result = (left != +0.0f ? Float.floatToIntBits(left) : 0);
        result = 31 * result + (top != +0.0f ? Float.floatToIntBits(top) : 0);
        result = 31 * result + (right != +0.0f ? Float.floatToIntBits(right) : 0);
        result = 31 * result + (bottom != +0.0f ? Float.floatToIntBits(bottom) : 0);
        return result;
!!!27821751.java!!!	toString() : String
        return "RectF(" + left + ", " + top + ", "
                      + right + ", " + bottom + ")";
!!!27821879.java!!!	toShortString() : String
        return toShortString(new StringBuilder(32));
!!!27822007.java!!!	toShortString(inout sb : StringBuilder) : String
        sb.setLength(0);
        sb.append('['); sb.append(left); sb.append(',');
        sb.append(top); sb.append("]["); sb.append(right);
        sb.append(','); sb.append(bottom); sb.append(']');
        return sb.toString();
!!!27822135.java!!!	printShortString(inout pw : PrintWriter) : void
        pw.print('['); pw.print(left); pw.print(',');
        pw.print(top); pw.print("]["); pw.print(right);
        pw.print(','); pw.print(bottom); pw.print(']');
!!!27822263.java!!!	isEmpty() : boolean
        return left >= right || top >= bottom;
!!!27822391.java!!!	width() : float
        return right - left;
!!!27822519.java!!!	height() : float
        return bottom - top;
!!!27822647.java!!!	centerX() : float
        return (left + right) * 0.5f;
!!!27822775.java!!!	centerY() : float
        return (top + bottom) * 0.5f;
!!!27822903.java!!!	setEmpty() : void
        left = right = top = bottom = 0;
!!!27823031.java!!!	set(in left : float, in top : float, in right : float, in bottom : float) : void
        this.left   = left;
        this.top    = top;
        this.right  = right;
        this.bottom = bottom;
!!!27823159.java!!!	set(inout src : RectF) : void
        this.left   = src.left;
        this.top    = src.top;
        this.right  = src.right;
        this.bottom = src.bottom;
!!!27823287.java!!!	set(inout src : Rect) : void
        this.left   = src.left;
        this.top    = src.top;
        this.right  = src.right;
        this.bottom = src.bottom;
!!!27823415.java!!!	offset(in dx : float, in dy : float) : void
        left    += dx;
        top     += dy;
        right   += dx;
        bottom  += dy;
!!!27823543.java!!!	offsetTo(in newLeft : float, in newTop : float) : void
        right += newLeft - left;
        bottom += newTop - top;
        left = newLeft;
        top = newTop;
!!!27823671.java!!!	inset(in dx : float, in dy : float) : void
        left    += dx;
        top     += dy;
        right   -= dx;
        bottom  -= dy;
!!!27823799.java!!!	contains(in x : float, in y : float) : boolean
        return left < right && top < bottom  // check for empty first
                && x >= left && x < right && y >= top && y < bottom;
!!!27823927.java!!!	contains(in left : float, in top : float, in right : float, in bottom : float) : boolean
                // check for empty first
        return this.left < this.right && this.top < this.bottom
                // now check for containment
                && this.left <= left && this.top <= top
                && this.right >= right && this.bottom >= bottom;
!!!27824055.java!!!	contains(inout r : RectF) : boolean
                // check for empty first
        return this.left < this.right && this.top < this.bottom
                // now check for containment
                && left <= r.left && top <= r.top
                && right >= r.right && bottom >= r.bottom;
!!!27824183.java!!!	intersect(in left : float, in top : float, in right : float, in bottom : float) : boolean
        if (this.left < right && left < this.right
                && this.top < bottom && top < this.bottom) {
            if (this.left < left) {
                this.left = left;
            }
            if (this.top < top) {
                this.top = top;
            }
            if (this.right > right) {
                this.right = right;
            }
            if (this.bottom > bottom) {
                this.bottom = bottom;
            }
            return true;
        }
        return false;
!!!27824311.java!!!	intersect(inout r : RectF) : boolean
        return intersect(r.left, r.top, r.right, r.bottom);
!!!27824439.java!!!	setIntersect(inout a : RectF, inout b : RectF) : boolean
        if (a.left < b.right && b.left < a.right
                && a.top < b.bottom && b.top < a.bottom) {
            left = Math.max(a.left, b.left);
            top = Math.max(a.top, b.top);
            right = Math.min(a.right, b.right);
            bottom = Math.min(a.bottom, b.bottom);
            return true;
        }
        return false;
!!!27824567.java!!!	intersects(in left : float, in top : float, in right : float, in bottom : float) : boolean
        return this.left < right && left < this.right
                && this.top < bottom && top < this.bottom;
!!!27824695.java!!!	intersects(inout a : RectF, inout b : RectF) : boolean
        return a.left < b.right && b.left < a.right
                && a.top < b.bottom && b.top < a.bottom;
!!!27824823.java!!!	round(inout dst : Rect) : void
        dst.set(FastMath.round(left), FastMath.round(top),
                FastMath.round(right), FastMath.round(bottom));
!!!27824951.java!!!	roundOut(inout dst : Rect) : void
        dst.set((int) Math.floor(left), (int) Math.floor(top),
                (int) Math.ceil(right), (int) Math.ceil(bottom));
!!!27825079.java!!!	union(in left : float, in top : float, in right : float, in bottom : float) : void
        if ((left < right) && (top < bottom)) {
            if ((this.left < this.right) && (this.top < this.bottom)) {
                if (this.left > left)
                    this.left = left;
                if (this.top > top)
                    this.top = top;
                if (this.right < right)
                    this.right = right;
                if (this.bottom < bottom)
                    this.bottom = bottom;
            } else {
                this.left = left;
                this.top = top;
                this.right = right;
                this.bottom = bottom;
            }
        }
!!!27825207.java!!!	union(inout r : RectF) : void
        union(r.left, r.top, r.right, r.bottom);
!!!27825335.java!!!	union(in x : float, in y : float) : void
        if (x < left) {
            left = x;
        } else if (x > right) {
            right = x;
        }
        if (y < top) {
            top = y;
        } else if (y > bottom) {
            bottom = y;
        }
!!!27825463.java!!!	sort() : void
        if (left > right) {
            float temp = left;
            left = right;
            right = temp;
        }
        if (top > bottom) {
            float temp = top;
            top = bottom;
            bottom = temp;
        }
!!!27825591.java!!!	describeContents() : int
        return 0;
!!!27825719.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeFloat(left);
        out.writeFloat(top);
        out.writeFloat(right);
        out.writeFloat(bottom);
!!!27825847.java!!!	readFromParcel(inout in : Parcel) : void
        left = in.readFloat();
        top = in.readFloat();
        right = in.readFloat();
        bottom = in.readFloat();
