class LaunchingTaskPositioner
!!!32529719.java!!!	setDisplay(inout display : Display) : void
        Point size = new Point();
        display.getSize(size);
        mDisplayWidth = size.x;
        mDisplayHeight = size.y;
!!!32529847.java!!!	configure(inout stackBounds : Rect) : void
        if (stackBounds == null) {
            mAvailableRect.set(0, 0, mDisplayWidth, mDisplayHeight);
        } else {
            mAvailableRect.set(stackBounds);
        }
        int width = mAvailableRect.width();
        int height = mAvailableRect.height();
        mDefaultFreeformStartX = mAvailableRect.left + width / MARGIN_SIZE_DENOMINATOR;
        mDefaultFreeformStartY = mAvailableRect.top + height / MARGIN_SIZE_DENOMINATOR;
        mDefaultFreeformWidth = width / WINDOW_SIZE_DENOMINATOR;
        mDefaultFreeformHeight = height / WINDOW_SIZE_DENOMINATOR;
        mDefaultFreeformStepHorizontal = Math.max(width / STEP_DENOMINATOR, MINIMAL_STEP);
        mDefaultFreeformStepVertical = Math.max(height / STEP_DENOMINATOR, MINIMAL_STEP);
        mDefaultStartBoundsConfigurationSet = true;
!!!32529975.java!!!	updateDefaultBounds(inout task : TaskRecord, inout tasks : ArrayList<TaskRecord>, inout windowLayout : ActivityInfo::WindowLayout) : void
        if (!mDefaultStartBoundsConfigurationSet) {
            return;
        }
        if (windowLayout == null) {
            positionCenter(task, tasks, mDefaultFreeformWidth, mDefaultFreeformHeight);
            return;
        }
        int width = getFinalWidth(windowLayout);
        int height = getFinalHeight(windowLayout);
        int verticalGravity = windowLayout.gravity & Gravity.VERTICAL_GRAVITY_MASK;
        int horizontalGravity = windowLayout.gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
        if (verticalGravity == Gravity.TOP) {
            if (horizontalGravity == Gravity.RIGHT) {
                positionTopRight(task, tasks, width, height);
            } else {
                positionTopLeft(task, tasks, width, height);
            }
        } else if (verticalGravity == Gravity.BOTTOM) {
            if (horizontalGravity == Gravity.RIGHT) {
                positionBottomRight(task, tasks, width, height);
            } else {
                positionBottomLeft(task, tasks, width, height);
            }
        } else {
            // Some fancy gravity setting that we don't support yet. We just put the activity in the
            // center.
            Slog.w(TAG, "Received unsupported gravity: " + windowLayout.gravity
                    + ", positioning in the center instead.");
            positionCenter(task, tasks, width, height);
        }
!!!32530103.java!!!	getFinalWidth(inout windowLayout : ActivityInfo::WindowLayout) : int
        int width = mDefaultFreeformWidth;
        if (windowLayout.width > 0) {
            width = windowLayout.width;
        }
        if (windowLayout.widthFraction > 0) {
            width = (int) (mAvailableRect.width() * windowLayout.widthFraction);
        }
        return width;
!!!32530231.java!!!	getFinalHeight(inout windowLayout : ActivityInfo::WindowLayout) : int
        int height = mDefaultFreeformHeight;
        if (windowLayout.height > 0) {
            height = windowLayout.height;
        }
        if (windowLayout.heightFraction > 0) {
            height = (int) (mAvailableRect.height() * windowLayout.heightFraction);
        }
        return height;
!!!32530359.java!!!	positionBottomLeft(inout task : TaskRecord, inout tasks : ArrayList<TaskRecord>, in width : int, in height : int) : void
        mTmpProposal.set(mAvailableRect.left, mAvailableRect.bottom - height,
                mAvailableRect.left + width, mAvailableRect.bottom);
        position(task, tasks, mTmpProposal, !ALLOW_RESTART, SHIFT_POLICY_HORIZONTAL_RIGHT);
!!!32530487.java!!!	positionBottomRight(inout task : TaskRecord, inout tasks : ArrayList<TaskRecord>, in width : int, in height : int) : void
        mTmpProposal.set(mAvailableRect.right - width, mAvailableRect.bottom - height,
                mAvailableRect.right, mAvailableRect.bottom);
        position(task, tasks, mTmpProposal, !ALLOW_RESTART, SHIFT_POLICY_HORIZONTAL_LEFT);
!!!32530615.java!!!	positionTopLeft(inout task : TaskRecord, inout tasks : ArrayList<TaskRecord>, in width : int, in height : int) : void
        mTmpProposal.set(mAvailableRect.left, mAvailableRect.top,
                mAvailableRect.left + width, mAvailableRect.top + height);
        position(task, tasks, mTmpProposal, !ALLOW_RESTART, SHIFT_POLICY_HORIZONTAL_RIGHT);
!!!32530743.java!!!	positionTopRight(inout task : TaskRecord, inout tasks : ArrayList<TaskRecord>, in width : int, in height : int) : void
        mTmpProposal.set(mAvailableRect.right - width, mAvailableRect.top,
                mAvailableRect.right, mAvailableRect.top + height);
        position(task, tasks, mTmpProposal, !ALLOW_RESTART, SHIFT_POLICY_HORIZONTAL_LEFT);
!!!32530871.java!!!	positionCenter(inout task : TaskRecord, inout tasks : ArrayList<TaskRecord>, in width : int, in height : int) : void
        mTmpProposal.set(mDefaultFreeformStartX, mDefaultFreeformStartY,
                mDefaultFreeformStartX + width, mDefaultFreeformStartY + height);
        position(task, tasks, mTmpProposal, ALLOW_RESTART, SHIFT_POLICY_DIAGONAL_DOWN);
!!!32530999.java!!!	position(inout task : TaskRecord, inout tasks : ArrayList<TaskRecord>, inout proposal : Rect, inout allowRestart : boolean, in shiftPolicy : int) : void
        mTmpOriginal.set(proposal);
        boolean restarted = false;
        while (boundsConflict(proposal, tasks)) {
            // Unfortunately there is already a task at that spot, so we need to look for some
            // other place.
            shiftStartingPoint(proposal, shiftPolicy);
            if (shiftedToFar(proposal, shiftPolicy)) {
                // We don't want the task to go outside of the stack, because it won't look
                // nice. Depending on the starting point we either restart, or immediately give up.
                if (!allowRestart) {
                    proposal.set(mTmpOriginal);
                    break;
                }
                // We must have started not from the top. Let's restart from there because there
                // might be some space there.
                proposal.set(mAvailableRect.left, mAvailableRect.top,
                        mAvailableRect.left + proposal.width(),
                        mAvailableRect.top + proposal.height());
                restarted = true;
            }
            if (restarted && (proposal.left > mDefaultFreeformStartX
                    || proposal.top > mDefaultFreeformStartY)) {
                // If we restarted and crossed the initial position, let's not struggle anymore.
                // The user already must have ton of tasks visible, we can just smack the new
                // one in the center.
                proposal.set(mTmpOriginal);
                break;
            }
        }
        task.updateOverrideConfiguration(proposal);
!!!32531127.java!!!	shiftedToFar(inout start : Rect, in shiftPolicy : int) : boolean
        switch (shiftPolicy) {
            case SHIFT_POLICY_HORIZONTAL_LEFT:
                return start.left < mAvailableRect.left;
            case SHIFT_POLICY_HORIZONTAL_RIGHT:
                return start.right > mAvailableRect.right;
            default: // SHIFT_POLICY_DIAGONAL_DOWN
                return start.right > mAvailableRect.right || start.bottom > mAvailableRect.bottom;
        }
!!!32531255.java!!!	shiftStartingPoint(inout posposal : Rect, in shiftPolicy : int) : void
        switch (shiftPolicy) {
            case SHIFT_POLICY_HORIZONTAL_LEFT:
                posposal.offset(-mDefaultFreeformStepHorizontal, 0);
                break;
            case SHIFT_POLICY_HORIZONTAL_RIGHT:
                posposal.offset(mDefaultFreeformStepHorizontal, 0);
                break;
            default: // SHIFT_POLICY_DIAGONAL_DOWN:
                posposal.offset(mDefaultFreeformStepHorizontal, mDefaultFreeformStepVertical);
                break;
        }
!!!32531383.java!!!	boundsConflict(inout proposal : Rect, inout tasks : ArrayList<TaskRecord>) : boolean
        for (int i = tasks.size() - 1; i >= 0; i--) {
            TaskRecord task = tasks.get(i);
            if (!task.mActivities.isEmpty() && task.mBounds != null) {
                Rect bounds = task.mBounds;
                if (closeLeftTopCorner(proposal, bounds) || closeRightTopCorner(proposal, bounds)
                        || closeLeftBottomCorner(proposal, bounds)
                        || closeRightBottomCorner(proposal, bounds)) {
                    return true;
                }
            }
        }
        return false;
!!!32531511.java!!!	closeLeftTopCorner(inout first : Rect, inout second : Rect) : boolean
        return Math.abs(first.left - second.left) < BOUNDS_CONFLICT_MIN_DISTANCE
                && Math.abs(first.top - second.top) < BOUNDS_CONFLICT_MIN_DISTANCE;
!!!32531639.java!!!	closeRightTopCorner(inout first : Rect, inout second : Rect) : boolean
        return Math.abs(first.right - second.right) < BOUNDS_CONFLICT_MIN_DISTANCE
                && Math.abs(first.top - second.top) < BOUNDS_CONFLICT_MIN_DISTANCE;
!!!32531767.java!!!	closeLeftBottomCorner(inout first : Rect, inout second : Rect) : boolean
        return Math.abs(first.left - second.left) < BOUNDS_CONFLICT_MIN_DISTANCE
                && Math.abs(first.bottom - second.bottom) < BOUNDS_CONFLICT_MIN_DISTANCE;
!!!32531895.java!!!	closeRightBottomCorner(inout first : Rect, inout second : Rect) : boolean
        return Math.abs(first.right - second.right) < BOUNDS_CONFLICT_MIN_DISTANCE
                && Math.abs(first.bottom - second.bottom) < BOUNDS_CONFLICT_MIN_DISTANCE;
!!!32532023.java!!!	reset() : void
        mDefaultStartBoundsConfigurationSet = false;
