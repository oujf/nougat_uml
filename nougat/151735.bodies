class ViewConfiguration
!!!5007927.java!!!	ViewConfiguration()
        mEdgeSlop = EDGE_SLOP;
        mFadingEdgeLength = FADING_EDGE_LENGTH;
        mMinimumFlingVelocity = MINIMUM_FLING_VELOCITY;
        mMaximumFlingVelocity = MAXIMUM_FLING_VELOCITY;
        mScrollbarSize = SCROLL_BAR_SIZE;
        mTouchSlop = TOUCH_SLOP;
        mDoubleTapTouchSlop = DOUBLE_TAP_TOUCH_SLOP;
        mPagingTouchSlop = PAGING_TOUCH_SLOP;
        mDoubleTapSlop = DOUBLE_TAP_SLOP;
        mWindowTouchSlop = WINDOW_TOUCH_SLOP;
        //noinspection deprecation
        mMaximumDrawingCacheSize = MAXIMUM_DRAWING_CACHE_SIZE;
        mOverscrollDistance = OVERSCROLL_DISTANCE;
        mOverflingDistance = OVERFLING_DISTANCE;
        mFadingMarqueeEnabled = true;
        mGlobalActionsKeyTimeout = GLOBAL_ACTIONS_KEY_TIMEOUT;
!!!5008055.java!!!	ViewConfiguration(inout context : Context)
        final Resources res = context.getResources();
        final DisplayMetrics metrics = res.getDisplayMetrics();
        final Configuration config = res.getConfiguration();
        final float density = metrics.density;
        final float sizeAndDensity;
        if (config.isLayoutSizeAtLeast(Configuration.SCREENLAYOUT_SIZE_XLARGE)) {
            sizeAndDensity = density * 1.5f;
        } else {
            sizeAndDensity = density;
        }

        mEdgeSlop = (int) (sizeAndDensity * EDGE_SLOP + 0.5f);
        mFadingEdgeLength = (int) (sizeAndDensity * FADING_EDGE_LENGTH + 0.5f);
        mScrollbarSize = (int) (density * SCROLL_BAR_SIZE + 0.5f);
        mDoubleTapSlop = (int) (sizeAndDensity * DOUBLE_TAP_SLOP + 0.5f);
        mWindowTouchSlop = (int) (sizeAndDensity * WINDOW_TOUCH_SLOP + 0.5f);

        // Size of the screen in bytes, in ARGB_8888 format
        final WindowManager win = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);
        final Display display = win.getDefaultDisplay();
        final Point size = new Point();
        display.getRealSize(size);
        mMaximumDrawingCacheSize = 4 * size.x * size.y;

        mOverscrollDistance = (int) (sizeAndDensity * OVERSCROLL_DISTANCE + 0.5f);
        mOverflingDistance = (int) (sizeAndDensity * OVERFLING_DISTANCE + 0.5f);

        if (!sHasPermanentMenuKeySet) {
            final int configVal = res.getInteger(
                    com.android.internal.R.integer.config_overrideHasPermanentMenuKey);

            switch (configVal) {
                default:
                case HAS_PERMANENT_MENU_KEY_AUTODETECT: {
                    IWindowManager wm = WindowManagerGlobal.getWindowManagerService();
                    try {
                        sHasPermanentMenuKey = !wm.hasNavigationBar();
                        sHasPermanentMenuKeySet = true;
                    } catch (RemoteException ex) {
                        sHasPermanentMenuKey = false;
                    }
                }
                break;

                case HAS_PERMANENT_MENU_KEY_TRUE:
                    sHasPermanentMenuKey = true;
                    sHasPermanentMenuKeySet = true;
                    break;

                case HAS_PERMANENT_MENU_KEY_FALSE:
                    sHasPermanentMenuKey = false;
                    sHasPermanentMenuKeySet = true;
                    break;
            }
        }

        mFadingMarqueeEnabled = res.getBoolean(
                com.android.internal.R.bool.config_ui_enableFadingMarquee);
        mTouchSlop = res.getDimensionPixelSize(
                com.android.internal.R.dimen.config_viewConfigurationTouchSlop);
        mPagingTouchSlop = mTouchSlop * 2;

        mDoubleTapTouchSlop = mTouchSlop;

        mMinimumFlingVelocity = res.getDimensionPixelSize(
                com.android.internal.R.dimen.config_viewMinFlingVelocity);
        mMaximumFlingVelocity = res.getDimensionPixelSize(
                com.android.internal.R.dimen.config_viewMaxFlingVelocity);
        mGlobalActionsKeyTimeout = res.getInteger(
                com.android.internal.R.integer.config_globalActionsKeyTimeout);
!!!5008183.java!!!	get(inout context : Context) : ViewConfiguration
        final DisplayMetrics metrics = context.getResources().getDisplayMetrics();
        final int density = (int) (100.0f * metrics.density);

        ViewConfiguration configuration = sConfigurations.get(density);
        if (configuration == null) {
            configuration = new ViewConfiguration(context);
            sConfigurations.put(density, configuration);
        }

        return configuration;
!!!5008311.java!!!	getScrollBarSize() : int
        return SCROLL_BAR_SIZE;
!!!5008439.java!!!	getScaledScrollBarSize() : int
        return mScrollbarSize;
!!!5008567.java!!!	getScrollBarFadeDuration() : int
        return SCROLL_BAR_FADE_DURATION;
!!!5008695.java!!!	getScrollDefaultDelay() : int
        return SCROLL_BAR_DEFAULT_DELAY;
!!!5008823.java!!!	getFadingEdgeLength() : int
        return FADING_EDGE_LENGTH;
!!!5008951.java!!!	getScaledFadingEdgeLength() : int
        return mFadingEdgeLength;
!!!5009079.java!!!	getPressedStateDuration() : int
        return PRESSED_STATE_DURATION;
!!!5009207.java!!!	getLongPressTimeout() : int
        return AppGlobals.getIntCoreSetting(Settings.Secure.LONG_PRESS_TIMEOUT,
                DEFAULT_LONG_PRESS_TIMEOUT);
!!!5009335.java!!!	getKeyRepeatTimeout() : int
        return getLongPressTimeout();
!!!5009463.java!!!	getKeyRepeatDelay() : int
        return KEY_REPEAT_DELAY;
!!!5009591.java!!!	getTapTimeout() : int
        return TAP_TIMEOUT;
!!!5009719.java!!!	getJumpTapTimeout() : int
        return JUMP_TAP_TIMEOUT;
!!!5009847.java!!!	getDoubleTapTimeout() : int
        return DOUBLE_TAP_TIMEOUT;
!!!5009975.java!!!	getDoubleTapMinTime() : int
        return DOUBLE_TAP_MIN_TIME;
!!!5010103.java!!!	getHoverTapTimeout() : int
        return HOVER_TAP_TIMEOUT;
!!!5010231.java!!!	getHoverTapSlop() : int
        return HOVER_TAP_SLOP;
!!!5010359.java!!!	getEdgeSlop() : int
        return EDGE_SLOP;
!!!5010487.java!!!	getScaledEdgeSlop() : int
        return mEdgeSlop;
!!!5010615.java!!!	getTouchSlop() : int
        return TOUCH_SLOP;
!!!5010743.java!!!	getScaledTouchSlop() : int
        return mTouchSlop;
!!!5010871.java!!!	getScaledDoubleTapTouchSlop() : int
        return mDoubleTapTouchSlop;
!!!5010999.java!!!	getScaledPagingTouchSlop() : int
        return mPagingTouchSlop;
!!!5011127.java!!!	getDoubleTapSlop() : int
        return DOUBLE_TAP_SLOP;
!!!5011255.java!!!	getScaledDoubleTapSlop() : int
        return mDoubleTapSlop;
!!!5011383.java!!!	getSendRecurringAccessibilityEventsInterval() : long
        return SEND_RECURRING_ACCESSIBILITY_EVENTS_INTERVAL_MILLIS;
!!!5011511.java!!!	getWindowTouchSlop() : int
        return WINDOW_TOUCH_SLOP;
!!!5011639.java!!!	getScaledWindowTouchSlop() : int
        return mWindowTouchSlop;
!!!5011767.java!!!	getMinimumFlingVelocity() : int
        return MINIMUM_FLING_VELOCITY;
!!!5011895.java!!!	getScaledMinimumFlingVelocity() : int
        return mMinimumFlingVelocity;
!!!5012023.java!!!	getMaximumFlingVelocity() : int
        return MAXIMUM_FLING_VELOCITY;
!!!5012151.java!!!	getScaledMaximumFlingVelocity() : int
        return mMaximumFlingVelocity;
!!!5012279.java!!!	getMaximumDrawingCacheSize() : int
        //noinspection deprecation
        return MAXIMUM_DRAWING_CACHE_SIZE;
!!!5012407.java!!!	getScaledMaximumDrawingCacheSize() : int
        return mMaximumDrawingCacheSize;
!!!5012535.java!!!	getScaledOverscrollDistance() : int
        return mOverscrollDistance;
!!!5012663.java!!!	getScaledOverflingDistance() : int
        return mOverflingDistance;
!!!5012791.java!!!	getZoomControlsTimeout() : long
        return ZOOM_CONTROLS_TIMEOUT;
!!!5012919.java!!!	getGlobalActionKeyTimeout() : long
        return GLOBAL_ACTIONS_KEY_TIMEOUT;
!!!5013047.java!!!	getDeviceGlobalActionKeyTimeout() : long
        return mGlobalActionsKeyTimeout;
!!!5013175.java!!!	getScrollFriction() : float
        return SCROLL_FRICTION;
!!!5013303.java!!!	getDefaultActionModeHideDuration() : long
        return ACTION_MODE_HIDE_DURATION_DEFAULT;
!!!5013431.java!!!	hasPermanentMenuKey() : boolean
        return sHasPermanentMenuKey;
!!!5013559.java!!!	isFadingMarqueeEnabled() : boolean
        return mFadingMarqueeEnabled;
