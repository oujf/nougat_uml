class MyThread
!!!32528311.java!!!	MyThread()
            super("InstrumentationReporter");
            if (DEBUG) Slog.d(TAG, "Starting InstrumentationReporter: " + this);
!!!32528439.java!!!	run() : void
            Process.setThreadPriority(Process.THREAD_PRIORITY_DEFAULT);
            boolean waited = false;
            while (true) {
                ArrayList<Report> reports;
                synchronized (mLock) {
                    reports = mPendingReports;
                    mPendingReports = null;
                    if (reports == null || reports.isEmpty()) {
                        if (!waited) {
                            // Sleep for a little bit, to avoid thrashing through threads.
                            try {
                                mLock.wait(10000); // 10 seconds
                            } catch (InterruptedException e) {
                            }
                            waited = true;
                            continue;
                        } else {
                            mThread = null;
                            if (DEBUG) Slog.d(TAG, "Exiting InstrumentationReporter: " + this);
                            return;
                        }
                    }
                }

                waited = false;

                for (int i=0; i<reports.size(); i++) {
                    final Report rep = reports.get(i);
                    try {
                        if (rep.mType == REPORT_TYPE_STATUS) {
                            if (DEBUG) Slog.d(TAG, "Dispatch status to " + rep.mWatcher
                                    + ": " + rep.mName.flattenToShortString()
                                    + " code=" + rep.mResultCode + " result=" + rep.mResults);
                            rep.mWatcher.instrumentationStatus(rep.mName, rep.mResultCode,
                                    rep.mResults);
                        } else {
                            if (DEBUG) Slog.d(TAG, "Dispatch finished to " + rep.mWatcher
                                    + ": " + rep.mName.flattenToShortString()
                                    + " code=" + rep.mResultCode + " result=" + rep.mResults);
                            rep.mWatcher.instrumentationFinished(rep.mName, rep.mResultCode,
                                    rep.mResults);
                        }
                    } catch (RemoteException e) {
                        Slog.i(TAG, "Failure reporting to instrumentation watcher: comp="
                                + rep.mName + " results=" + rep.mResults);
                    }
                }
            }
