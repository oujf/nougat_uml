class WifiP2pDevice
!!!35724343.java!!!	WifiP2pDevice(inout string : String)
        String[] tokens = string.split("[ \n]");
        Matcher match;

        if (tokens.length < 1) {
            throw new IllegalArgumentException("Malformed supplicant event");
        }

        switch (tokens.length) {
            case 1:
                /* Just a device address */
                deviceAddress = string;
                return;
            case 2:
                match = twoTokenPattern.matcher(string);
                if (!match.find()) {
                    throw new IllegalArgumentException("Malformed supplicant event");
                }
                deviceAddress = match.group(2);
                return;
            case 3:
                match = threeTokenPattern.matcher(string);
                if (!match.find()) {
                    throw new IllegalArgumentException("Malformed supplicant event");
                }
                deviceAddress = match.group(1);
                return;
            default:
                match = detailedDevicePattern.matcher(string);
                if (!match.find()) {
                    throw new IllegalArgumentException("Malformed supplicant event");
                }

                deviceAddress = match.group(3);
                primaryDeviceType = match.group(4);
                deviceName = match.group(5);
                wpsConfigMethodsSupported = parseHex(match.group(6));
                deviceCapability = parseHex(match.group(7));
                groupCapability = parseHex(match.group(8));
                if (match.group(9) != null) {
                    String str = match.group(10);
                    wfdInfo = new WifiP2pWfdInfo(parseHex(str.substring(0,4)),
                            parseHex(str.substring(4,8)),
                            parseHex(str.substring(8,12)));
                }
                break;
        }

        if (tokens[0].startsWith("P2P-DEVICE-FOUND")) {
            status = AVAILABLE;
        }
!!!35724471.java!!!	wpsPbcSupported() : boolean
        return (wpsConfigMethodsSupported & WPS_CONFIG_PUSHBUTTON) != 0;
!!!35724599.java!!!	wpsKeypadSupported() : boolean
        return (wpsConfigMethodsSupported & WPS_CONFIG_KEYPAD) != 0;
!!!35724727.java!!!	wpsDisplaySupported() : boolean
        return (wpsConfigMethodsSupported & WPS_CONFIG_DISPLAY) != 0;
!!!35724855.java!!!	isServiceDiscoveryCapable() : boolean
        return (deviceCapability & DEVICE_CAPAB_SERVICE_DISCOVERY) != 0;
!!!35724983.java!!!	isInvitationCapable() : boolean
        return (deviceCapability & DEVICE_CAPAB_INVITATION_PROCEDURE) != 0;
!!!35725111.java!!!	isDeviceLimit() : boolean
        return (deviceCapability & DEVICE_CAPAB_DEVICE_LIMIT) != 0;
!!!35725239.java!!!	isGroupOwner() : boolean
        return (groupCapability & GROUP_CAPAB_GROUP_OWNER) != 0;
!!!35725367.java!!!	isGroupLimit() : boolean
        return (groupCapability & GROUP_CAPAB_GROUP_LIMIT) != 0;
!!!35725495.java!!!	update(inout device : WifiP2pDevice) : void
        updateSupplicantDetails(device);
        status = device.status;
!!!35725623.java!!!	updateSupplicantDetails(inout device : WifiP2pDevice) : void
        if (device == null) {
            throw new IllegalArgumentException("device is null");
        }
        if (device.deviceAddress == null) {
            throw new IllegalArgumentException("deviceAddress is null");
        }
        if (!deviceAddress.equals(device.deviceAddress)) {
            throw new IllegalArgumentException("deviceAddress does not match");
        }
        deviceName = device.deviceName;
        primaryDeviceType = device.primaryDeviceType;
        secondaryDeviceType = device.secondaryDeviceType;
        wpsConfigMethodsSupported = device.wpsConfigMethodsSupported;
        deviceCapability = device.deviceCapability;
        groupCapability = device.groupCapability;
        wfdInfo = device.wfdInfo;
!!!35725751.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) return true;
        if (!(obj instanceof WifiP2pDevice)) return false;

        WifiP2pDevice other = (WifiP2pDevice) obj;
        if (other == null || other.deviceAddress == null) {
            return (deviceAddress == null);
        }
        return other.deviceAddress.equals(deviceAddress);
!!!35725879.java!!!	toString() : String
        StringBuffer sbuf = new StringBuffer();
        sbuf.append("Device: ").append(deviceName);
        sbuf.append("\n deviceAddress: ").append(deviceAddress);
        sbuf.append("\n primary type: ").append(primaryDeviceType);
        sbuf.append("\n secondary type: ").append(secondaryDeviceType);
        sbuf.append("\n wps: ").append(wpsConfigMethodsSupported);
        sbuf.append("\n grpcapab: ").append(groupCapability);
        sbuf.append("\n devcapab: ").append(deviceCapability);
        sbuf.append("\n status: ").append(status);
        sbuf.append("\n wfdInfo: ").append(wfdInfo);
        return sbuf.toString();
!!!35726007.java!!!	describeContents() : int
        return 0;
!!!35726135.java!!!	WifiP2pDevice(inout source : WifiP2pDevice)
        if (source != null) {
            deviceName = source.deviceName;
            deviceAddress = source.deviceAddress;
            primaryDeviceType = source.primaryDeviceType;
            secondaryDeviceType = source.secondaryDeviceType;
            wpsConfigMethodsSupported = source.wpsConfigMethodsSupported;
            deviceCapability = source.deviceCapability;
            groupCapability = source.groupCapability;
            status = source.status;
            wfdInfo = new WifiP2pWfdInfo(source.wfdInfo);
        }
!!!35726263.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeString(deviceName);
        dest.writeString(deviceAddress);
        dest.writeString(primaryDeviceType);
        dest.writeString(secondaryDeviceType);
        dest.writeInt(wpsConfigMethodsSupported);
        dest.writeInt(deviceCapability);
        dest.writeInt(groupCapability);
        dest.writeInt(status);
        if (wfdInfo != null) {
            dest.writeInt(1);
            wfdInfo.writeToParcel(dest, flags);
        } else {
            dest.writeInt(0);
        }
!!!35726391.java!!!	parseHex(inout hexString : String) : int
        int num = 0;
        if (hexString.startsWith("0x") || hexString.startsWith("0X")) {
            hexString = hexString.substring(2);
        }

        try {
            num = Integer.parseInt(hexString, 16);
        } catch(NumberFormatException e) {
            Log.e(TAG, "Failed to parse hex string " + hexString);
        }
        return num;
