class ActiveSourceHandler
!!!32807863.java!!!	create(inout source : HdmiCecLocalDeviceTv, inout callback : IHdmiControlCallback) : ActiveSourceHandler
        if (source == null) {
            Slog.e(TAG, "Wrong arguments");
            return null;
        }
        return new ActiveSourceHandler(source, callback);
!!!32807991.java!!!	ActiveSourceHandler(inout source : HdmiCecLocalDeviceTv, inout callback : IHdmiControlCallback)
        mSource = source;
        mService = mSource.getService();
        mCallback = callback;
!!!32808119.java!!!	process(inout newActive : HdmiCecLocalDevice::ActiveSource, in deviceType : int) : void
        // Seq #17
        HdmiCecLocalDeviceTv tv = mSource;
        HdmiDeviceInfo device = mService.getDeviceInfo(newActive.logicalAddress);
        if (device == null) {
            tv.startNewDeviceAction(newActive, deviceType);
        }

        if (!tv.isProhibitMode()) {
            ActiveSource old = ActiveSource.of(tv.getActiveSource());
            tv.updateActiveSource(newActive);
            boolean notifyInputChange = (mCallback == null);
            if (!old.equals(newActive)) {
                tv.setPrevPortId(tv.getActivePortId());
            }
            tv.updateActiveInput(newActive.physicalAddress, notifyInputChange);
            invokeCallback(HdmiControlManager.RESULT_SUCCESS);
        } else {
            // TV is in a mode that should keep its current source/input from
            // being changed for its operation. Reclaim the active source
            // or switch the port back to the one used for the current mode.
            ActiveSource current = tv.getActiveSource();
            if (current.logicalAddress == getSourceAddress()) {
                HdmiCecMessage activeSourceCommand = HdmiCecMessageBuilder.buildActiveSource(
                        current.logicalAddress, current.physicalAddress);
                mService.sendCecCommand(activeSourceCommand);
                tv.updateActiveSource(current);
                invokeCallback(HdmiControlManager.RESULT_SUCCESS);
            } else {
                tv.startRoutingControl(newActive.physicalAddress, current.physicalAddress, true,
                        mCallback);
            }
        }
!!!32808247.java!!!	getSourceAddress() : int
        return mSource.getDeviceInfo().getLogicalAddress();
!!!32808375.java!!!	invokeCallback(in result : int) : void
        if (mCallback == null) {
            return;
        }
        try {
            mCallback.onComplete(result);
        } catch (RemoteException e) {
            Slog.e(TAG, "Callback failed:" + e);
        }
