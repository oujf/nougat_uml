class HdmiCecLocalDevice
!!!32828727.java!!!	HdmiCecLocalDevice(inout service : HdmiControlService, in deviceType : int)
        mService = service;
        mDeviceType = deviceType;
        mAddress = Constants.ADDR_UNREGISTERED;
        mLock = service.getServiceLock();
!!!32828855.java!!!	create(inout service : HdmiControlService, in deviceType : int) : HdmiCecLocalDevice
        switch (deviceType) {
        case HdmiDeviceInfo.DEVICE_TV:
            return new HdmiCecLocalDeviceTv(service);
        case HdmiDeviceInfo.DEVICE_PLAYBACK:
            return new HdmiCecLocalDevicePlayback(service);
        default:
            return null;
        }
!!!32828983.java!!!	init() : void
        assertRunOnServiceThread();
        mPreferredAddress = getPreferredAddress();
        mPendingActionClearedCallback = null;
!!!32829495.java!!!	isInputReady(in deviceId : int) : boolean
        return true;
!!!32829623.java!!!	canGoToStandby() : boolean
        return true;
!!!32829751.java!!!	dispatchMessage(inout message : HdmiCecMessage) : boolean
        assertRunOnServiceThread();
        int dest = message.getDestination();
        if (dest != mAddress && dest != Constants.ADDR_BROADCAST) {
            return false;
        }
        // Cache incoming message. Note that it caches only white-listed one.
        mCecMessageCache.cacheMessage(message);
        return onMessage(message);
!!!32829879.java!!!	onMessage(inout message : HdmiCecMessage) : boolean
        assertRunOnServiceThread();
        if (dispatchMessageToAction(message)) {
            return true;
        }
        switch (message.getOpcode()) {
            case Constants.MESSAGE_ACTIVE_SOURCE:
                return handleActiveSource(message);
            case Constants.MESSAGE_INACTIVE_SOURCE:
                return handleInactiveSource(message);
            case Constants.MESSAGE_REQUEST_ACTIVE_SOURCE:
                return handleRequestActiveSource(message);
            case Constants.MESSAGE_GET_MENU_LANGUAGE:
                return handleGetMenuLanguage(message);
            case Constants.MESSAGE_SET_MENU_LANGUAGE:
                return handleSetMenuLanguage(message);
            case Constants.MESSAGE_GIVE_PHYSICAL_ADDRESS:
                return handleGivePhysicalAddress();
            case Constants.MESSAGE_GIVE_OSD_NAME:
                return handleGiveOsdName(message);
            case Constants.MESSAGE_GIVE_DEVICE_VENDOR_ID:
                return handleGiveDeviceVendorId();
            case Constants.MESSAGE_GET_CEC_VERSION:
                return handleGetCecVersion(message);
            case Constants.MESSAGE_REPORT_PHYSICAL_ADDRESS:
                return handleReportPhysicalAddress(message);
            case Constants.MESSAGE_ROUTING_CHANGE:
                return handleRoutingChange(message);
            case Constants.MESSAGE_ROUTING_INFORMATION:
                return handleRoutingInformation(message);
            case Constants.MESSAGE_INITIATE_ARC:
                return handleInitiateArc(message);
            case Constants.MESSAGE_TERMINATE_ARC:
                return handleTerminateArc(message);
            case Constants.MESSAGE_SET_SYSTEM_AUDIO_MODE:
                return handleSetSystemAudioMode(message);
            case Constants.MESSAGE_SYSTEM_AUDIO_MODE_STATUS:
                return handleSystemAudioModeStatus(message);
            case Constants.MESSAGE_REPORT_AUDIO_STATUS:
                return handleReportAudioStatus(message);
            case Constants.MESSAGE_STANDBY:
                return handleStandby(message);
            case Constants.MESSAGE_TEXT_VIEW_ON:
                return handleTextViewOn(message);
            case Constants.MESSAGE_IMAGE_VIEW_ON:
                return handleImageViewOn(message);
            case Constants.MESSAGE_USER_CONTROL_PRESSED:
                return handleUserControlPressed(message);
            case Constants.MESSAGE_USER_CONTROL_RELEASED:
                return handleUserControlReleased();
            case Constants.MESSAGE_SET_STREAM_PATH:
                return handleSetStreamPath(message);
            case Constants.MESSAGE_GIVE_DEVICE_POWER_STATUS:
                return handleGiveDevicePowerStatus(message);
            case Constants.MESSAGE_MENU_REQUEST:
                return handleMenuRequest(message);
            case Constants.MESSAGE_MENU_STATUS:
                return handleMenuStatus(message);
            case Constants.MESSAGE_VENDOR_COMMAND:
                return handleVendorCommand(message);
            case Constants.MESSAGE_VENDOR_COMMAND_WITH_ID:
                return handleVendorCommandWithId(message);
            case Constants.MESSAGE_SET_OSD_NAME:
                return handleSetOsdName(message);
            case Constants.MESSAGE_RECORD_TV_SCREEN:
                return handleRecordTvScreen(message);
            case Constants.MESSAGE_TIMER_CLEARED_STATUS:
                return handleTimerClearedStatus(message);
            case Constants.MESSAGE_REPORT_POWER_STATUS:
                return handleReportPowerStatus(message);
            case Constants.MESSAGE_TIMER_STATUS:
                return handleTimerStatus(message);
            case Constants.MESSAGE_RECORD_STATUS:
                return handleRecordStatus(message);
            default:
                return false;
        }
!!!32830007.java!!!	dispatchMessageToAction(inout message : HdmiCecMessage) : boolean
        assertRunOnServiceThread();
        boolean processed = false;
        // Use copied action list in that processCommand may remove itself.
        for (HdmiCecFeatureAction action : new ArrayList<>(mActions)) {
            // Iterates all actions to check whether incoming message is consumed.
            boolean result = action.processCommand(message);
            processed = processed || result;
        }
        return processed;
!!!32830135.java!!!	handleGivePhysicalAddress() : boolean
        assertRunOnServiceThread();

        int physicalAddress = mService.getPhysicalAddress();
        HdmiCecMessage cecMessage = HdmiCecMessageBuilder.buildReportPhysicalAddressCommand(
                mAddress, physicalAddress, mDeviceType);
        mService.sendCecCommand(cecMessage);
        return true;
!!!32830263.java!!!	handleGiveDeviceVendorId() : boolean
        assertRunOnServiceThread();
        int vendorId = mService.getVendorId();
        HdmiCecMessage cecMessage = HdmiCecMessageBuilder.buildDeviceVendorIdCommand(
                mAddress, vendorId);
        mService.sendCecCommand(cecMessage);
        return true;
!!!32830391.java!!!	handleGetCecVersion(inout message : HdmiCecMessage) : boolean
        assertRunOnServiceThread();
        int version = mService.getCecVersion();
        HdmiCecMessage cecMessage = HdmiCecMessageBuilder.buildCecVersion(message.getDestination(),
                message.getSource(), version);
        mService.sendCecCommand(cecMessage);
        return true;
!!!32830519.java!!!	handleActiveSource(inout message : HdmiCecMessage) : boolean
        return false;
!!!32830647.java!!!	handleInactiveSource(inout message : HdmiCecMessage) : boolean
        return false;
!!!32830775.java!!!	handleRequestActiveSource(inout message : HdmiCecMessage) : boolean
        return false;
!!!32830903.java!!!	handleGetMenuLanguage(inout message : HdmiCecMessage) : boolean
        assertRunOnServiceThread();
        Slog.w(TAG, "Only TV can handle <Get Menu Language>:" + message.toString());
        // 'return false' will cause to reply with <Feature Abort>.
        return false;
!!!32831031.java!!!	handleSetMenuLanguage(inout message : HdmiCecMessage) : boolean
        assertRunOnServiceThread();
        Slog.w(TAG, "Only Playback device can handle <Set Menu Language>:" + message.toString());
        // 'return false' will cause to reply with <Feature Abort>.
        return false;
!!!32831159.java!!!	handleGiveOsdName(inout message : HdmiCecMessage) : boolean
        assertRunOnServiceThread();
        // Note that since this method is called after logical address allocation is done,
        // mDeviceInfo should not be null.
        HdmiCecMessage cecMessage = HdmiCecMessageBuilder.buildSetOsdNameCommand(
                mAddress, message.getSource(), mDeviceInfo.getDisplayName());
        if (cecMessage != null) {
            mService.sendCecCommand(cecMessage);
        } else {
            Slog.w(TAG, "Failed to build <Get Osd Name>:" + mDeviceInfo.getDisplayName());
        }
        return true;
!!!32831287.java!!!	handleRoutingChange(inout message : HdmiCecMessage) : boolean
        return false;
!!!32831415.java!!!	handleRoutingInformation(inout message : HdmiCecMessage) : boolean
        return false;
!!!32831543.java!!!	handleReportPhysicalAddress(inout message : HdmiCecMessage) : boolean
        return false;
!!!32831671.java!!!	handleSystemAudioModeStatus(inout message : HdmiCecMessage) : boolean
        return false;
!!!32831799.java!!!	handleSetSystemAudioMode(inout message : HdmiCecMessage) : boolean
        return false;
!!!32831927.java!!!	handleTerminateArc(inout message : HdmiCecMessage) : boolean
        return false;
!!!32832055.java!!!	handleInitiateArc(inout message : HdmiCecMessage) : boolean
        return false;
!!!32832183.java!!!	handleReportAudioStatus(inout message : HdmiCecMessage) : boolean
        return false;
!!!32832311.java!!!	handleStandby(inout message : HdmiCecMessage) : boolean
        assertRunOnServiceThread();
        // Seq #12
        if (mService.isControlEnabled() && !mService.isProhibitMode()
                && mService.isPowerOnOrTransient()) {
            mService.standby();
            return true;
        }
        return false;
!!!32832439.java!!!	handleUserControlPressed(inout message : HdmiCecMessage) : boolean
        assertRunOnServiceThread();
        mHandler.removeMessages(MSG_USER_CONTROL_RELEASE_TIMEOUT);
        if (mService.isPowerOnOrTransient() && isPowerOffOrToggleCommand(message)) {
            mService.standby();
            return true;
        } else if (mService.isPowerStandbyOrTransient() && isPowerOnOrToggleCommand(message)) {
            mService.wakeUp();
            return true;
        }

        final long downTime = SystemClock.uptimeMillis();
        final byte[] params = message.getParams();
        final int keycode = HdmiCecKeycode.cecKeycodeAndParamsToAndroidKey(params);
        int keyRepeatCount = 0;
        if (mLastKeycode != HdmiCecKeycode.UNSUPPORTED_KEYCODE) {
            if (keycode == mLastKeycode) {
                keyRepeatCount = mLastKeyRepeatCount + 1;
            } else {
                injectKeyEvent(downTime, KeyEvent.ACTION_UP, mLastKeycode, 0);
            }
        }
        mLastKeycode = keycode;
        mLastKeyRepeatCount = keyRepeatCount;

        if (keycode != HdmiCecKeycode.UNSUPPORTED_KEYCODE) {
            injectKeyEvent(downTime, KeyEvent.ACTION_DOWN, keycode, keyRepeatCount);
            mHandler.sendMessageDelayed(Message.obtain(mHandler, MSG_USER_CONTROL_RELEASE_TIMEOUT),
                    FOLLOWER_SAFETY_TIMEOUT);
            return true;
        }
        return false;
!!!32832567.java!!!	handleUserControlReleased() : boolean
        assertRunOnServiceThread();
        mHandler.removeMessages(MSG_USER_CONTROL_RELEASE_TIMEOUT);
        mLastKeyRepeatCount = 0;
        if (mLastKeycode != HdmiCecKeycode.UNSUPPORTED_KEYCODE) {
            final long upTime = SystemClock.uptimeMillis();
            injectKeyEvent(upTime, KeyEvent.ACTION_UP, mLastKeycode, 0);
            mLastKeycode = HdmiCecKeycode.UNSUPPORTED_KEYCODE;
            return true;
        }
        return false;
!!!32832695.java!!!	injectKeyEvent(in time : long, in action : int, in keycode : int, in repeat : int) : void
        KeyEvent keyEvent = KeyEvent.obtain(time, time, action, keycode,
                repeat, 0, KeyCharacterMap.VIRTUAL_KEYBOARD, 0, KeyEvent.FLAG_FROM_SYSTEM,
                InputDevice.SOURCE_HDMI, null);
        InputManager.getInstance().injectInputEvent(keyEvent,
                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
        keyEvent.recycle();
!!!32832823.java!!!	isPowerOnOrToggleCommand(inout message : HdmiCecMessage) : boolean
        byte[] params = message.getParams();
        return message.getOpcode() == Constants.MESSAGE_USER_CONTROL_PRESSED
                && (params[0] == HdmiCecKeycode.CEC_KEYCODE_POWER
                        || params[0] == HdmiCecKeycode.CEC_KEYCODE_POWER_ON_FUNCTION
                        || params[0] == HdmiCecKeycode.CEC_KEYCODE_POWER_TOGGLE_FUNCTION);
!!!32832951.java!!!	isPowerOffOrToggleCommand(inout message : HdmiCecMessage) : boolean
        byte[] params = message.getParams();
        return message.getOpcode() == Constants.MESSAGE_USER_CONTROL_PRESSED
                && (params[0] == HdmiCecKeycode.CEC_KEYCODE_POWER
                        || params[0] == HdmiCecKeycode.CEC_KEYCODE_POWER_OFF_FUNCTION
                        || params[0] == HdmiCecKeycode.CEC_KEYCODE_POWER_TOGGLE_FUNCTION);
!!!32833079.java!!!	handleTextViewOn(inout message : HdmiCecMessage) : boolean
        return false;
!!!32833207.java!!!	handleImageViewOn(inout message : HdmiCecMessage) : boolean
        return false;
!!!32833335.java!!!	handleSetStreamPath(inout message : HdmiCecMessage) : boolean
        return false;
!!!32833463.java!!!	handleGiveDevicePowerStatus(inout message : HdmiCecMessage) : boolean
        mService.sendCecCommand(HdmiCecMessageBuilder.buildReportPowerStatus(
                mAddress, message.getSource(), mService.getPowerStatus()));
        return true;
!!!32833591.java!!!	handleMenuRequest(inout message : HdmiCecMessage) : boolean
        // Always report menu active to receive Remote Control.
        mService.sendCecCommand(HdmiCecMessageBuilder.buildReportMenuStatus(
                mAddress, message.getSource(), Constants.MENU_STATE_ACTIVATED));
        return true;
!!!32833719.java!!!	handleMenuStatus(inout message : HdmiCecMessage) : boolean
        return false;
!!!32833847.java!!!	handleVendorCommand(inout message : HdmiCecMessage) : boolean
        if (!mService.invokeVendorCommandListenersOnReceived(mDeviceType, message.getSource(),
                message.getDestination(), message.getParams(), false)) {
            // Vendor command listener may not have been registered yet. Respond with
            // <Feature Abort> [NOT_IN_CORRECT_MODE] so that the sender can try again later.
            mService.maySendFeatureAbortCommand(message, Constants.ABORT_NOT_IN_CORRECT_MODE);
        }
        return true;
!!!32833975.java!!!	handleVendorCommandWithId(inout message : HdmiCecMessage) : boolean
        byte[] params = message.getParams();
        int vendorId = HdmiUtils.threeBytesToInt(params);
        if (vendorId == mService.getVendorId()) {
            if (!mService.invokeVendorCommandListenersOnReceived(mDeviceType, message.getSource(),
                    message.getDestination(), params, true)) {
                mService.maySendFeatureAbortCommand(message, Constants.ABORT_NOT_IN_CORRECT_MODE);
            }
        } else if (message.getDestination() != Constants.ADDR_BROADCAST &&
                message.getSource() != Constants.ADDR_UNREGISTERED) {
            Slog.v(TAG, "Wrong direct vendor command. Replying with <Feature Abort>");
            mService.maySendFeatureAbortCommand(message, Constants.ABORT_UNRECOGNIZED_OPCODE);
        } else {
            Slog.v(TAG, "Wrong broadcast vendor command. Ignoring");
        }
        return true;
!!!32834103.java!!!	sendStandby(in deviceId : int) : void
        // Do nothing.
!!!32834231.java!!!	handleSetOsdName(inout message : HdmiCecMessage) : boolean
        // The default behavior of <Set Osd Name> is doing nothing.
        return true;
!!!32834359.java!!!	handleRecordTvScreen(inout message : HdmiCecMessage) : boolean
        // The default behavior of <Record TV Screen> is replying <Feature Abort> with
        // "Cannot provide source".
        mService.maySendFeatureAbortCommand(message, Constants.ABORT_CANNOT_PROVIDE_SOURCE);
        return true;
!!!32834487.java!!!	handleTimerClearedStatus(inout message : HdmiCecMessage) : boolean
        return false;
!!!32834615.java!!!	handleReportPowerStatus(inout message : HdmiCecMessage) : boolean
        return false;
!!!32834743.java!!!	handleTimerStatus(inout message : HdmiCecMessage) : boolean
        return false;
!!!32834871.java!!!	handleRecordStatus(inout message : HdmiCecMessage) : boolean
        return false;
!!!32834999.java!!!	handleAddressAllocated(in logicalAddress : int, in reason : int) : void
        assertRunOnServiceThread();
        mAddress = mPreferredAddress = logicalAddress;
        onAddressAllocated(logicalAddress, reason);
        setPreferredAddress(logicalAddress);
!!!32835127.java!!!	getType() : int
        return mDeviceType;
!!!32835255.java!!!	getDeviceInfo() : HdmiDeviceInfo
        assertRunOnServiceThread();
        return mDeviceInfo;
!!!32835383.java!!!	setDeviceInfo(inout info : HdmiDeviceInfo) : void
        assertRunOnServiceThread();
        mDeviceInfo = info;
!!!32835511.java!!!	isAddressOf(in addr : int) : boolean
        assertRunOnServiceThread();
        return addr == mAddress;
!!!32835639.java!!!	clearAddress() : void
        assertRunOnServiceThread();
        mAddress = Constants.ADDR_UNREGISTERED;
!!!32835767.java!!!	addAndStartAction(in action : HdmiCecFeatureAction) : void
        assertRunOnServiceThread();
        mActions.add(action);
        if (mService.isPowerStandby() || !mService.isAddressAllocated()) {
            Slog.i(TAG, "Not ready to start action. Queued for deferred start:" + action);
            return;
        }
        action.start();
!!!32835895.java!!!	startQueuedActions() : void
        assertRunOnServiceThread();
        for (HdmiCecFeatureAction action : mActions) {
            if (!action.started()) {
                Slog.i(TAG, "Starting queued action:" + action);
                action.start();
            }
        }
!!!32836023.java!!!	hasAction(in clazz : Class) : boolean
        assertRunOnServiceThread();
        for (HdmiCecFeatureAction action : mActions) {
            if (action.getClass().equals(clazz)) {
                return true;
            }
        }
        return false;
!!!32836151.java!!!	getActions(in clazz : Class) : List<T>
        assertRunOnServiceThread();
        List<T> actions = Collections.<T>emptyList();
        for (HdmiCecFeatureAction action : mActions) {
            if (action.getClass().equals(clazz)) {
                if (actions.isEmpty()) {
                    actions = new ArrayList<T>();
                }
                actions.add((T) action);
            }
        }
        return actions;
!!!32836279.java!!!	removeAction(in action : HdmiCecFeatureAction) : void
        assertRunOnServiceThread();
        action.finish(false);
        mActions.remove(action);
        checkIfPendingActionsCleared();
!!!32836407.java!!!	removeAction(in clazz : Class) : void
        assertRunOnServiceThread();
        removeActionExcept(clazz, null);
!!!32836535.java!!!	removeActionExcept(in clazz : Class, in exception : HdmiCecFeatureAction) : void
        assertRunOnServiceThread();
        Iterator<HdmiCecFeatureAction> iter = mActions.iterator();
        while (iter.hasNext()) {
            HdmiCecFeatureAction action = iter.next();
            if (action != exception && action.getClass().equals(clazz)) {
                action.finish(false);
                iter.remove();
            }
        }
        checkIfPendingActionsCleared();
!!!32836663.java!!!	checkIfPendingActionsCleared() : void
        if (mActions.isEmpty() && mPendingActionClearedCallback != null) {
            PendingActionClearedCallback callback = mPendingActionClearedCallback;
            // To prevent from calling the callback again during handling the callback itself.
            mPendingActionClearedCallback = null;
            callback.onCleared(this);
        }
!!!32836791.java!!!	assertRunOnServiceThread() : void
        if (Looper.myLooper() != mService.getServiceLooper()) {
            throw new IllegalStateException("Should run on service thread.");
        }
!!!32837175.java!!!	getService() : HdmiControlService
        return mService;
!!!32837303.java!!!	isConnectedToArcPort(in path : int) : boolean
        assertRunOnServiceThread();
        return mService.isConnectedToArcPort(path);
!!!32837431.java!!!	getActiveSource() : HdmiCecLocalDevice::ActiveSource
        synchronized (mLock) {
            return mActiveSource;
        }
!!!32837559.java!!!	setActiveSource(inout newActive : HdmiCecLocalDevice::ActiveSource) : void
        setActiveSource(newActive.logicalAddress, newActive.physicalAddress);
!!!32837687.java!!!	setActiveSource(inout info : HdmiDeviceInfo) : void
        setActiveSource(info.getLogicalAddress(), info.getPhysicalAddress());
!!!32837815.java!!!	setActiveSource(in logicalAddress : int, in physicalAddress : int) : void
        synchronized (mLock) {
            mActiveSource.logicalAddress = logicalAddress;
            mActiveSource.physicalAddress = physicalAddress;
        }
        mService.setLastInputForMhl(Constants.INVALID_PORT_ID);
!!!32837943.java!!!	getActivePath() : int
        synchronized (mLock) {
            return mActiveRoutingPath;
        }
!!!32838071.java!!!	setActivePath(in path : int) : void
        synchronized (mLock) {
            mActiveRoutingPath = path;
        }
        mService.setActivePortId(pathToPortId(path));
!!!32838199.java!!!	getActivePortId() : int
        synchronized (mLock) {
            return mService.pathToPortId(mActiveRoutingPath);
        }
!!!32838327.java!!!	setActivePortId(in portId : int) : void
        // We update active routing path instead, since we get the active port id from
        // the active routing path.
        setActivePath(mService.portIdToPath(portId));
!!!32838455.java!!!	getCecMessageCache() : HdmiCecMessageCache
        assertRunOnServiceThread();
        return mCecMessageCache;
!!!32838583.java!!!	pathToPortId(in newPath : int) : int
        assertRunOnServiceThread();
        return mService.pathToPortId(newPath);
!!!32838839.java!!!	disableDevice(inout initiatedByCec : boolean, in originalCallback : HdmiCecLocalDevice::PendingActionClearedCallback) : void
        mPendingActionClearedCallback = new PendingActionClearedCallback() {
            @Override
            public void onCleared(HdmiCecLocalDevice device) {
                mHandler.removeMessages(MSG_DISABLE_DEVICE_TIMEOUT);
                originalCallback.onCleared(device);
            }
        };
        mHandler.sendMessageDelayed(Message.obtain(mHandler, MSG_DISABLE_DEVICE_TIMEOUT),
                DEVICE_CLEANUP_TIMEOUT);
!!!32838967.java!!!	handleDisableDeviceTimeout() : void
        assertRunOnServiceThread();

        // If all actions are not cleared in DEVICE_CLEANUP_TIMEOUT, enforce to finish them.
        // onCleard will be called at the last action's finish method.
        Iterator<HdmiCecFeatureAction> iter = mActions.iterator();
        while (iter.hasNext()) {
            HdmiCecFeatureAction action = iter.next();
            action.finish(false);
            iter.remove();
        }
        if (mPendingActionClearedCallback != null) {
            mPendingActionClearedCallback.onCleared(this);
        }
!!!32839095.java!!!	sendKeyEvent(in keyCode : int, inout isPressed : boolean) : void
        Slog.w(TAG, "sendKeyEvent not implemented");
!!!32839223.java!!!	sendUserControlPressedAndReleased(in targetAddress : int, in cecKeycode : int) : void
        mService.sendCecCommand(HdmiCecMessageBuilder.buildUserControlPressed(
                mAddress, targetAddress, cecKeycode));
        mService.sendCecCommand(HdmiCecMessageBuilder.buildUserControlReleased(
                mAddress, targetAddress));
!!!32839351.java!!!	dump(in pw : IndentingPrintWriter) : void
        pw.println("mDeviceType: " + mDeviceType);
        pw.println("mAddress: " + mAddress);
        pw.println("mPreferredAddress: " + mPreferredAddress);
        pw.println("mDeviceInfo: " + mDeviceInfo);
        pw.println("mActiveSource: " + mActiveSource);
        pw.println(String.format("mActiveRoutingPath: 0x%04x", mActiveRoutingPath));
