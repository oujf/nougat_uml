class HdmiCecFeatureAction
!!!32809527.java!!!	HdmiCecFeatureAction(inout source : HdmiCecLocalDevice)
        mSource = source;
        mService = mSource.getService();
        mActionTimer = createActionTimer(mService.getServiceLooper());
!!!32809655.java!!!	setActionTimer(inout actionTimer : HdmiCecFeatureAction::ActionTimer) : void
        mActionTimer = actionTimer;
!!!32810935.java!!!	createActionTimer(inout looper : Looper) : HdmiCecFeatureAction::ActionTimer
        return new ActionTimerHandler(looper);
!!!32811063.java!!!	addTimer(in state : int, in delayMillis : int) : void
        mActionTimer.sendTimerMessage(state, delayMillis);
!!!32811191.java!!!	started() : boolean
        return mState != STATE_NONE;
!!!32811319.java!!!	sendCommand(inout cmd : HdmiCecMessage) : void
        mService.sendCecCommand(cmd);
!!!32811447.java!!!	sendCommand(inout cmd : HdmiCecMessage, inout callback : HdmiControlService::SendMessageCallback) : void
        mService.sendCecCommand(cmd, callback);
!!!32811575.java!!!	addAndStartAction(inout action : HdmiCecFeatureAction) : void
        mSource.addAndStartAction(action);
!!!32811703.java!!!	getActions(in clazz : Class) : List<T>
        return mSource.getActions(clazz);
!!!32811831.java!!!	getCecMessageCache() : HdmiCecMessageCache
        return mSource.getCecMessageCache();
!!!32811959.java!!!	removeAction(inout action : HdmiCecFeatureAction) : void
        mSource.removeAction(action);
!!!32812087.java!!!	removeAction(in clazz : Class) : void
        mSource.removeActionExcept(clazz, null);
!!!32812215.java!!!	removeActionExcept(in clazz : Class, in exception : HdmiCecFeatureAction) : void
        mSource.removeActionExcept(clazz, exception);
!!!32812343.java!!!	pollDevices(inout callback : HdmiControlService::DevicePollingCallback, in pickStrategy : int, in retryCount : int) : void
        mService.pollDevices(callback, getSourceAddress(), pickStrategy, retryCount);
!!!32812471.java!!!	clear() : void
        mState = STATE_NONE;
        // Clear all timers.
        mActionTimer.clearTimerMessage();
!!!32812599.java!!!	finish() : void
        finish(true);
!!!32812727.java!!!	finish(inout removeSelf : boolean) : void
        clear();
        if (removeSelf) {
            removeAction(this);
        }
        if (mOnFinishedCallbacks != null) {
            for (Pair<HdmiCecFeatureAction, Runnable> actionCallbackPair: mOnFinishedCallbacks) {
                if (actionCallbackPair.first.mState != STATE_NONE) {
                    actionCallbackPair.second.run();
                }
            }
            mOnFinishedCallbacks = null;
        }
!!!32812855.java!!!	localDevice() : HdmiCecLocalDevice
        return mSource;
!!!32812983.java!!!	playback() : HdmiCecLocalDevicePlayback
        return (HdmiCecLocalDevicePlayback) mSource;
!!!32813111.java!!!	tv() : HdmiCecLocalDeviceTv
        return (HdmiCecLocalDeviceTv) mSource;
!!!32813239.java!!!	getSourceAddress() : int
        return mSource.getDeviceInfo().getLogicalAddress();
!!!32813367.java!!!	getSourcePath() : int
        return mSource.getDeviceInfo().getPhysicalAddress();
!!!32813495.java!!!	sendUserControlPressedAndReleased(in targetAddress : int, in uiCommand : int) : void
        mSource.sendUserControlPressedAndReleased(targetAddress, uiCommand);
!!!32813623.java!!!	addOnFinishedCallback(inout action : HdmiCecFeatureAction, inout runnable : Runnable) : void
        if (mOnFinishedCallbacks == null) {
            mOnFinishedCallbacks = new ArrayList<>();
        }
        mOnFinishedCallbacks.add(Pair.create(action, runnable));
