class Dialog
!!!1779895.java!!!	Dialog(inout context : Context)
        this(context, 0, true);
!!!1780023.java!!!	Dialog(inout context : Context, in themeResId : int)
        this(context, themeResId, true);
!!!1780151.java!!!	Dialog(inout context : Context, in themeResId : int, inout createContextThemeWrapper : boolean)
        if (createContextThemeWrapper) {
            if (themeResId == 0) {
                final TypedValue outValue = new TypedValue();
                context.getTheme().resolveAttribute(R.attr.dialogTheme, outValue, true);
                themeResId = outValue.resourceId;
            }
            mContext = new ContextThemeWrapper(context, themeResId);
        } else {
            mContext = context;
        }

        mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);

        final Window w = new PhoneWindow(mContext);
        mWindow = w;
        w.setCallback(this);
        w.setOnWindowDismissedCallback(this);
        w.setWindowManager(mWindowManager, null, null);
        w.setGravity(Gravity.CENTER);

        mListenersHandler = new ListenersHandler(this);
!!!1780279.java!!!	Dialog(inout context : Context, inout cancelable : boolean, inout cancelCallback : Message)
        this(context);
        mCancelable = cancelable;
        mCancelMessage = cancelCallback;
!!!1780407.java!!!	Dialog(inout context : Context, inout cancelable : boolean, inout cancelListener : DialogInterface::OnCancelListener)
        this(context);
        mCancelable = cancelable;
        setOnCancelListener(cancelListener);
!!!1780535.java!!!	getContext() : Context
        return mContext;
!!!1780663.java!!!	getActionBar() : ActionBar
        return mActionBar;
!!!1780791.java!!!	setOwnerActivity(inout activity : Activity) : void
        mOwnerActivity = activity;
        
        getWindow().setVolumeControlStream(mOwnerActivity.getVolumeControlStream());
!!!1780919.java!!!	getOwnerActivity() : Activity
        return mOwnerActivity;
!!!1781047.java!!!	isShowing() : boolean
        return mShowing;
!!!1781175.java!!!	create() : void
        if (!mCreated) {
            dispatchOnCreate(null);
        }
!!!1781303.java!!!	show() : void
        if (mShowing) {
            if (mDecor != null) {
                if (mWindow.hasFeature(Window.FEATURE_ACTION_BAR)) {
                    mWindow.invalidatePanelMenu(Window.FEATURE_ACTION_BAR);
                }
                mDecor.setVisibility(View.VISIBLE);
            }
            return;
        }

        mCanceled = false;
        
        if (!mCreated) {
            dispatchOnCreate(null);
        }

        onStart();
        mDecor = mWindow.getDecorView();

        if (mActionBar == null && mWindow.hasFeature(Window.FEATURE_ACTION_BAR)) {
            final ApplicationInfo info = mContext.getApplicationInfo();
            mWindow.setDefaultIcon(info.icon);
            mWindow.setDefaultLogo(info.logo);
            mActionBar = new WindowDecorActionBar(this);
        }

        WindowManager.LayoutParams l = mWindow.getAttributes();
        if ((l.softInputMode
                & WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION) == 0) {
            WindowManager.LayoutParams nl = new WindowManager.LayoutParams();
            nl.copyFrom(l);
            nl.softInputMode |=
                    WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION;
            l = nl;
        }

        mWindowManager.addView(mDecor, l);
        mShowing = true;

        sendShowMessage();
!!!1781431.java!!!	hide() : void
        if (mDecor != null) {
            mDecor.setVisibility(View.GONE);
        }
!!!1781559.java!!!	dismiss() : void
        if (Looper.myLooper() == mHandler.getLooper()) {
            dismissDialog();
        } else {
            mHandler.post(mDismissAction);
        }
!!!1781687.java!!!	dismissDialog() : void
        if (mDecor == null || !mShowing) {
            return;
        }

        if (mWindow.isDestroyed()) {
            Log.e(TAG, "Tried to dismissDialog() but the Dialog's window was already destroyed!");
            return;
        }

        try {
            mWindowManager.removeViewImmediate(mDecor);
        } finally {
            if (mActionMode != null) {
                mActionMode.finish();
            }
            mDecor = null;
            mWindow.closeAllPanels();
            onStop();
            mShowing = false;

            sendDismissMessage();
        }
!!!1781815.java!!!	sendDismissMessage() : void
        if (mDismissMessage != null) {
            // Obtain a new message so this dialog can be re-used
            Message.obtain(mDismissMessage).sendToTarget();
        }
!!!1781943.java!!!	sendShowMessage() : void
        if (mShowMessage != null) {
            // Obtain a new message so this dialog can be re-used
            Message.obtain(mShowMessage).sendToTarget();
        }
!!!1782071.java!!!	dispatchOnCreate(inout savedInstanceState : Bundle) : void
        if (!mCreated) {
            onCreate(savedInstanceState);
            mCreated = true;
        }
!!!1782327.java!!!	onStart() : void
        if (mActionBar != null) mActionBar.setShowHideAnimationEnabled(true);
!!!1782455.java!!!	onStop() : void
        if (mActionBar != null) mActionBar.setShowHideAnimationEnabled(false);
!!!1782583.java!!!	onSaveInstanceState() : Bundle
        Bundle bundle = new Bundle();
        bundle.putBoolean(DIALOG_SHOWING_TAG, mShowing);
        if (mCreated) {
            bundle.putBundle(DIALOG_HIERARCHY_TAG, mWindow.saveHierarchyState());
        }
        return bundle;
!!!1782711.java!!!	onRestoreInstanceState(inout savedInstanceState : Bundle) : void
        final Bundle dialogHierarchyState = savedInstanceState.getBundle(DIALOG_HIERARCHY_TAG);
        if (dialogHierarchyState == null) {
            // dialog has never been shown, or onCreated, nothing to restore.
            return;
        }
        dispatchOnCreate(savedInstanceState);
        mWindow.restoreHierarchyState(dialogHierarchyState);
        if (savedInstanceState.getBoolean(DIALOG_SHOWING_TAG)) {
            show();
        }
!!!1782839.java!!!	getWindow() : Window
        return mWindow;
!!!1782967.java!!!	getCurrentFocus() : View
        return mWindow != null ? mWindow.getCurrentFocus() : null;
!!!1783095.java!!!	findViewById(in id : int) : View
        return mWindow.findViewById(id);
!!!1783223.java!!!	setContentView(in layoutResID : int) : void
        mWindow.setContentView(layoutResID);
!!!1783351.java!!!	setContentView(inout view : View) : void
        mWindow.setContentView(view);
!!!1783479.java!!!	setContentView(inout view : View, inout params : ViewGroup::LayoutParams) : void
        mWindow.setContentView(view, params);
!!!1783607.java!!!	addContentView(inout view : View, inout params : ViewGroup::LayoutParams) : void
        mWindow.addContentView(view, params);
!!!1783735.java!!!	setTitle(inout title : CharSequence) : void
        mWindow.setTitle(title);
        mWindow.getAttributes().setTitle(title);
!!!1783863.java!!!	setTitle(in titleId : int) : void
        setTitle(mContext.getText(titleId));
!!!1783991.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            event.startTracking();
            return true;
        }

        return false;
!!!1784119.java!!!	onKeyLongPress(in keyCode : int, inout event : KeyEvent) : boolean
        return false;
!!!1784247.java!!!	onKeyUp(in keyCode : int, inout event : KeyEvent) : boolean
        if (keyCode == KeyEvent.KEYCODE_BACK && event.isTracking()
                && !event.isCanceled()) {
            onBackPressed();
            return true;
        }
        return false;
!!!1784375.java!!!	onKeyMultiple(in keyCode : int, in repeatCount : int, inout event : KeyEvent) : boolean
        return false;
!!!1784503.java!!!	onBackPressed() : void
        if (mCancelable) {
            cancel();
        }
!!!1784631.java!!!	onKeyShortcut(in keyCode : int, inout event : KeyEvent) : boolean
        return false;
!!!1784759.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        if (mCancelable && mShowing && mWindow.shouldCloseOnTouch(mContext, event)) {
            cancel();
            return true;
        }
        
        return false;
!!!1784887.java!!!	onTrackballEvent(inout event : MotionEvent) : boolean
        return false;
!!!1785015.java!!!	onGenericMotionEvent(inout event : MotionEvent) : boolean
        return false;
!!!1785143.java!!!	onWindowAttributesChanged(inout params : WindowManager::LayoutParams) : void
        if (mDecor != null) {
            mWindowManager.updateViewLayout(mDecor, params);
        }
!!!1785783.java!!!	onWindowDismissed(inout finishTask : boolean) : void
        dismiss();
!!!1785911.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        if ((mOnKeyListener != null) && (mOnKeyListener.onKey(this, event.getKeyCode(), event))) {
            return true;
        }
        if (mWindow.superDispatchKeyEvent(event)) {
            return true;
        }
        return event.dispatch(this, mDecor != null
                ? mDecor.getKeyDispatcherState() : null, this);
!!!1786039.java!!!	dispatchKeyShortcutEvent(inout event : KeyEvent) : boolean
        if (mWindow.superDispatchKeyShortcutEvent(event)) {
            return true;
        }
        return onKeyShortcut(event.getKeyCode(), event);
!!!1786167.java!!!	dispatchTouchEvent(inout ev : MotionEvent) : boolean
        if (mWindow.superDispatchTouchEvent(ev)) {
            return true;
        }
        return onTouchEvent(ev);
!!!1786295.java!!!	dispatchTrackballEvent(inout ev : MotionEvent) : boolean
        if (mWindow.superDispatchTrackballEvent(ev)) {
            return true;
        }
        return onTrackballEvent(ev);
!!!1786423.java!!!	dispatchGenericMotionEvent(inout ev : MotionEvent) : boolean
        if (mWindow.superDispatchGenericMotionEvent(ev)) {
            return true;
        }
        return onGenericMotionEvent(ev);
!!!1786551.java!!!	dispatchPopulateAccessibilityEvent(inout event : AccessibilityEvent) : boolean
        event.setClassName(getClass().getName());
        event.setPackageName(mContext.getPackageName());

        LayoutParams params = getWindow().getAttributes();
        boolean isFullScreen = (params.width == LayoutParams.MATCH_PARENT) &&
            (params.height == LayoutParams.MATCH_PARENT);
        event.setFullScreen(isFullScreen);

        return false;
!!!1786679.java!!!	onCreatePanelView(in featureId : int) : View
        return null;
!!!1786807.java!!!	onCreatePanelMenu(in featureId : int, inout menu : Menu) : boolean
        if (featureId == Window.FEATURE_OPTIONS_PANEL) {
            return onCreateOptionsMenu(menu);
        }
        
        return false;
!!!1786935.java!!!	onPreparePanel(in featureId : int, inout view : View, inout menu : Menu) : boolean
        if (featureId == Window.FEATURE_OPTIONS_PANEL && menu != null) {
            return onPrepareOptionsMenu(menu) && menu.hasVisibleItems();
        }
        return true;
!!!1787063.java!!!	onMenuOpened(in featureId : int, inout menu : Menu) : boolean
        if (featureId == Window.FEATURE_ACTION_BAR) {
            mActionBar.dispatchMenuVisibilityChanged(true);
        }
        return true;
!!!1787191.java!!!	onMenuItemSelected(in featureId : int, inout item : MenuItem) : boolean
        return false;
!!!1787319.java!!!	onPanelClosed(in featureId : int, inout menu : Menu) : void
        if (featureId == Window.FEATURE_ACTION_BAR) {
            mActionBar.dispatchMenuVisibilityChanged(false);
        }
!!!1787447.java!!!	onCreateOptionsMenu(inout menu : Menu) : boolean
        return true;
!!!1787575.java!!!	onPrepareOptionsMenu(inout menu : Menu) : boolean
        return true;
!!!1787703.java!!!	onOptionsItemSelected(inout item : MenuItem) : boolean
        return false;
!!!1787959.java!!!	openOptionsMenu() : void
        if (mWindow.hasFeature(Window.FEATURE_OPTIONS_PANEL)) {
            mWindow.openPanel(Window.FEATURE_OPTIONS_PANEL, null);
        }
!!!1788087.java!!!	closeOptionsMenu() : void
        if (mWindow.hasFeature(Window.FEATURE_OPTIONS_PANEL)) {
            mWindow.closePanel(Window.FEATURE_OPTIONS_PANEL);
        }
!!!1788215.java!!!	invalidateOptionsMenu() : void
        if (mWindow.hasFeature(Window.FEATURE_OPTIONS_PANEL)) {
            mWindow.invalidatePanelMenu(Window.FEATURE_OPTIONS_PANEL);
        }
!!!1788471.java!!!	registerForContextMenu(inout view : View) : void
        view.setOnCreateContextMenuListener(this);
!!!1788599.java!!!	unregisterForContextMenu(inout view : View) : void
        view.setOnCreateContextMenuListener(null);
!!!1788727.java!!!	openContextMenu(inout view : View) : void
        view.showContextMenu();
!!!1788855.java!!!	onContextItemSelected(inout item : MenuItem) : boolean
        return false;
!!!1789111.java!!!	onSearchRequested(inout searchEvent : SearchEvent) : boolean
        mSearchEvent = searchEvent;
        return onSearchRequested();
!!!1789239.java!!!	onSearchRequested() : boolean
        final SearchManager searchManager = (SearchManager) mContext
                .getSystemService(Context.SEARCH_SERVICE);

        // associate search with owner activity
        final ComponentName appName = getAssociatedActivity();
        if (appName != null && searchManager.getSearchableInfo(appName) != null) {
            searchManager.startSearch(null, false, appName, null, false);
            dismiss();
            return true;
        } else {
            return false;
        }
!!!1789367.java!!!	getSearchEvent() : SearchEvent
        return mSearchEvent;
!!!1789495.java!!!	onWindowStartingActionMode(inout callback : ActionMode::Callback) : ActionMode
        if (mActionBar != null && mActionModeTypeStarting == ActionMode.TYPE_PRIMARY) {
            return mActionBar.startActionMode(callback);
        }
        return null;
!!!1789623.java!!!	onWindowStartingActionMode(inout callback : ActionMode::Callback, in type : int) : ActionMode
        try {
            mActionModeTypeStarting = type;
            return onWindowStartingActionMode(callback);
        } finally {
            mActionModeTypeStarting = ActionMode.TYPE_PRIMARY;
        }
!!!1789751.java!!!	onActionModeStarted(inout mode : ActionMode) : void
        mActionMode = mode;
!!!1789879.java!!!	onActionModeFinished(inout mode : ActionMode) : void
        if (mode == mActionMode) {
            mActionMode = null;
        }
!!!1790007.java!!!	getAssociatedActivity() : ComponentName
        Activity activity = mOwnerActivity;
        Context context = getContext();
        while (activity == null && context != null) {
            if (context instanceof Activity) {
                activity = (Activity) context;  // found it!
            } else {
                context = (context instanceof ContextWrapper) ?
                        ((ContextWrapper) context).getBaseContext() : // unwrap one level
                        null;                                         // done
            }
        }
        return activity == null ? null : activity.getComponentName();
!!!1790135.java!!!	takeKeyEvents(inout get : boolean) : void
        mWindow.takeKeyEvents(get);
!!!1790263.java!!!	requestWindowFeature(in featureId : int) : boolean
        return getWindow().requestFeature(featureId);
!!!1790391.java!!!	setFeatureDrawableResource(in featureId : int, in resId : int) : void
        getWindow().setFeatureDrawableResource(featureId, resId);
!!!1790519.java!!!	setFeatureDrawableUri(in featureId : int, inout uri : Uri) : void
        getWindow().setFeatureDrawableUri(featureId, uri);
!!!1790647.java!!!	setFeatureDrawable(in featureId : int, inout drawable : Drawable) : void
        getWindow().setFeatureDrawable(featureId, drawable);
!!!1790775.java!!!	setFeatureDrawableAlpha(in featureId : int, in alpha : int) : void
        getWindow().setFeatureDrawableAlpha(featureId, alpha);
!!!1790903.java!!!	getLayoutInflater() : LayoutInflater
        return getWindow().getLayoutInflater();
!!!1791031.java!!!	setCancelable(inout flag : boolean) : void
        mCancelable = flag;
!!!1791159.java!!!	setCanceledOnTouchOutside(inout cancel : boolean) : void
        if (cancel && !mCancelable) {
            mCancelable = true;
        }
        
        mWindow.setCloseOnTouchOutside(cancel);
!!!1791287.java!!!	cancel() : void
        if (!mCanceled && mCancelMessage != null) {
            mCanceled = true;
            // Obtain a new message so this dialog can be re-used
            Message.obtain(mCancelMessage).sendToTarget();
        }
        dismiss();
!!!1791415.java!!!	setOnCancelListener(inout listener : DialogInterface::OnCancelListener) : void
        if (mCancelAndDismissTaken != null) {
            throw new IllegalStateException(
                    "OnCancelListener is already taken by "
                    + mCancelAndDismissTaken + " and can not be replaced.");
        }
        if (listener != null) {
            mCancelMessage = mListenersHandler.obtainMessage(CANCEL, listener);
        } else {
            mCancelMessage = null;
        }
!!!1791543.java!!!	setCancelMessage(inout msg : Message) : void
        mCancelMessage = msg;
!!!1791671.java!!!	setOnDismissListener(inout listener : DialogInterface::OnDismissListener) : void
        if (mCancelAndDismissTaken != null) {
            throw new IllegalStateException(
                    "OnDismissListener is already taken by "
                    + mCancelAndDismissTaken + " and can not be replaced.");
        }
        if (listener != null) {
            mDismissMessage = mListenersHandler.obtainMessage(DISMISS, listener);
        } else {
            mDismissMessage = null;
        }
!!!1791799.java!!!	setOnShowListener(inout listener : DialogInterface::OnShowListener) : void
        if (listener != null) {
            mShowMessage = mListenersHandler.obtainMessage(SHOW, listener);
        } else {
            mShowMessage = null;
        }
!!!1791927.java!!!	setDismissMessage(inout msg : Message) : void
        mDismissMessage = msg;
!!!1792055.java!!!	takeCancelAndDismissListeners(inout msg : String, inout cancel : DialogInterface::OnCancelListener, inout dismiss : DialogInterface::OnDismissListener) : boolean
        if (mCancelAndDismissTaken != null) {
            mCancelAndDismissTaken = null;
        } else if (mCancelMessage != null || mDismissMessage != null) {
            return false;
        }
        
        setOnCancelListener(cancel);
        setOnDismissListener(dismiss);
        mCancelAndDismissTaken = msg;
        
        return true;
!!!1792183.java!!!	setVolumeControlStream(in streamType : int) : void
        getWindow().setVolumeControlStream(streamType);
!!!1792311.java!!!	getVolumeControlStream() : int
        return getWindow().getVolumeControlStream();
!!!1792439.java!!!	setOnKeyListener(inout onKeyListener : DialogInterface::OnKeyListener) : void
        mOnKeyListener = onKeyListener;
