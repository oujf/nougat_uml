class JobStore
!!!32937783.java!!!	initAndGet(inout jobManagerService : JobSchedulerService) : JobStore
        synchronized (sSingletonLock) {
            if (sSingleton == null) {
                sSingleton = new JobStore(jobManagerService.getContext(),
                        jobManagerService.getLock(), Environment.getDataDirectory());
            }
            return sSingleton;
        }
!!!32937911.java!!!	initAndGetForTesting(inout context : Context, inout dataDir : File) : JobStore
        JobStore jobStoreUnderTest = new JobStore(context, new Object(), dataDir);
        jobStoreUnderTest.clear();
        return jobStoreUnderTest;
!!!32938039.java!!!	JobStore(inout context : Context, inout lock : Object, inout dataDir : File)
        mLock = lock;
        mContext = context;
        mDirtyOperations = 0;

        File systemDir = new File(dataDir, "system");
        File jobDir = new File(systemDir, "job");
        jobDir.mkdirs();
        mJobsFile = new AtomicFile(new File(jobDir, "jobs.xml"));

        mJobSet = new JobSet();

        readJobMapFromDisk(mJobSet);
!!!32938167.java!!!	add(inout jobStatus : JobStatus) : boolean
        boolean replaced = mJobSet.remove(jobStatus);
        mJobSet.add(jobStatus);
        if (jobStatus.isPersisted()) {
            maybeWriteStatusToDiskAsync();
        }
        if (DEBUG) {
            Slog.d(TAG, "Added job status to store: " + jobStatus);
        }
        return replaced;
!!!32938295.java!!!	containsJob(inout jobStatus : JobStatus) : boolean
        return mJobSet.contains(jobStatus);
!!!32938423.java!!!	size() : int
        return mJobSet.size();
!!!32938551.java!!!	countJobsForUid(in uid : int) : int
        return mJobSet.countJobsForUid(uid);
!!!32938679.java!!!	remove(inout jobStatus : JobStatus, inout writeBack : boolean) : boolean
        boolean removed = mJobSet.remove(jobStatus);
        if (!removed) {
            if (DEBUG) {
                Slog.d(TAG, "Couldn't remove job: didn't exist: " + jobStatus);
            }
            return false;
        }
        if (writeBack && jobStatus.isPersisted()) {
            maybeWriteStatusToDiskAsync();
        }
        return removed;
!!!32938807.java!!!	clear() : void
        mJobSet.clear();
        maybeWriteStatusToDiskAsync();
!!!32938935.java!!!	getJobsByUser(in userHandle : int) : JobStatus
        return mJobSet.getJobsByUser(userHandle);
!!!32939063.java!!!	getJobsByUid(in uid : int) : JobStatus
        return mJobSet.getJobsByUid(uid);
!!!32939191.java!!!	getJobByUidAndJobId(in uid : int, in jobId : int) : JobStatus
        return mJobSet.get(uid, jobId);
!!!32939319.java!!!	forEachJob(inout functor : JobStore::JobStatusFunctor) : void
        mJobSet.forEachJob(functor);
!!!32939447.java!!!	forEachJob(in uid : int, inout functor : JobStore::JobStatusFunctor) : void
        mJobSet.forEachJob(uid, functor);
!!!32939703.java!!!	maybeWriteStatusToDiskAsync() : void
        mDirtyOperations++;
        if (mDirtyOperations >= MAX_OPS_BEFORE_WRITE) {
            if (DEBUG) {
                Slog.v(TAG, "Writing jobs to disk.");
            }
            mIoHandler.post(new WriteJobsMapToDiskRunnable());
        }
!!!32939831.java!!!	readJobMapFromDisk(inout jobSet : JobStore::JobSet) : void
        new ReadJobMapFromDiskRunnable(jobSet).run();
