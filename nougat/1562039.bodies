class BatteryController
!!!32953527.java!!!	get(inout taskManagerService : JobSchedulerService) : BatteryController
        synchronized (sCreationLock) {
            if (sController == null) {
                sController = new BatteryController(taskManagerService,
                        taskManagerService.getContext(), taskManagerService.getLock());
            }
        }
        return sController;
!!!32953655.java!!!	getTracker() : BatteryController::ChargingTracker
        return mChargeTracker;
!!!32953783.java!!!	getForTesting(inout stateChangedListener : StateChangedListener, inout context : Context) : BatteryController
        return new BatteryController(stateChangedListener, context, new Object());
!!!32953911.java!!!	BatteryController(inout stateChangedListener : StateChangedListener, inout context : Context, inout lock : Object)
        super(stateChangedListener, context, lock);
        mChargeTracker = new ChargingTracker();
        mChargeTracker.startTracking();
!!!32954039.java!!!	maybeStartTrackingJobLocked(inout taskStatus : JobStatus, inout lastJob : JobStatus) : void
        final boolean isOnStablePower = mChargeTracker.isOnStablePower();
        if (taskStatus.hasChargingConstraint()) {
            mTrackedTasks.add(taskStatus);
            taskStatus.setChargingConstraintSatisfied(isOnStablePower);
        }
!!!32954167.java!!!	maybeStopTrackingJobLocked(inout taskStatus : JobStatus, inout incomingJob : JobStatus, inout forUpdate : boolean) : void
        if (taskStatus.hasChargingConstraint()) {
            mTrackedTasks.remove(taskStatus);
        }
!!!32954295.java!!!	maybeReportNewChargingState() : void
        final boolean stablePower = mChargeTracker.isOnStablePower();
        if (DEBUG) {
            Slog.d(TAG, "maybeReportNewChargingState: " + stablePower);
        }
        boolean reportChange = false;
        synchronized (mLock) {
            for (JobStatus ts : mTrackedTasks) {
                boolean previous = ts.setChargingConstraintSatisfied(stablePower);
                if (previous != stablePower) {
                    reportChange = true;
                }
            }
        }
        // Let the scheduler know that state has changed. This may or may not result in an
        // execution.
        if (reportChange) {
            mStateChangedListener.onControllerStateChanged();
        }
        // Also tell the scheduler that any ready jobs should be flushed.
        if (stablePower) {
            mStateChangedListener.onRunJobNow(null);
        }
!!!32955063.java!!!	dumpControllerStateLocked(inout pw : PrintWriter, in filterUid : int) : void
        pw.print("Battery: stable power = ");
        pw.println(mChargeTracker.isOnStablePower());
        pw.print("Tracking ");
        pw.print(mTrackedTasks.size());
        pw.println(":");
        for (int i = 0; i < mTrackedTasks.size(); i++) {
            final JobStatus js = mTrackedTasks.get(i);
            if (!js.shouldDump(filterUid)) {
                continue;
            }
            pw.print("  #");
            js.printUniqueId(pw);
            pw.print(" from ");
            UserHandle.formatUid(pw, js.getSourceUid());
            pw.println();
        }
