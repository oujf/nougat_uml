class FusedProxy
!!!32985911.java!!!	FusedProxy(inout context : Context, inout handler : Handler, inout locationHardware : IFusedLocationHardware, in overlaySwitchResId : int, in defaultServicePackageNameResId : int, in initialPackageNameResId : int)
        mLocationHardware = new FusedLocationHardwareSecure(
                locationHardware,
                context,
                Manifest.permission.LOCATION_HARDWARE);
        Runnable newServiceWork = new Runnable() {
            @Override
            public void run() {
                bindProvider(mLocationHardware);
            }
        };

        // prepare the connection to the provider
        mServiceWatcher = new ServiceWatcher(
                context,
                TAG,
                "com.android.location.service.FusedProvider",
                overlaySwitchResId,
                defaultServicePackageNameResId,
                initialPackageNameResId,
                newServiceWork,
                handler);
!!!32986039.java!!!	createAndBind(inout context : Context, inout handler : Handler, inout locationHardware : IFusedLocationHardware, in overlaySwitchResId : int, in defaultServicePackageNameResId : int, in initialPackageNameResId : int) : FusedProxy
        FusedProxy fusedProxy = new FusedProxy(
                context,
                handler,
                locationHardware,
                overlaySwitchResId,
                defaultServicePackageNameResId,
                initialPackageNameResId);

        // try to bind the Fused provider
        if (!fusedProxy.mServiceWatcher.start()) {
            return null;
        }

        return fusedProxy;
!!!32986167.java!!!	bindProvider(inout locationHardware : IFusedLocationHardware) : void
        IFusedProvider provider = IFusedProvider.Stub.asInterface(mServiceWatcher.getBinder());

        if (provider == null) {
            Log.e(TAG, "No instance of FusedProvider found on FusedLocationHardware connected.");
            return;
        }

        try {
            provider.onFusedLocationHardwareChange(locationHardware);
        } catch (RemoteException e) {
            Log.e(TAG, e.toString());
        }
