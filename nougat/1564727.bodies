class GeofenceState
!!!32990519.java!!!	GeofenceState(inout fence : Geofence, in expireAt : long, in allowedResolutionLevel : int, in uid : int, inout packageName : String, inout intent : PendingIntent)
        mState = STATE_UNKNOWN;
        mDistanceToCenter = Double.MAX_VALUE;

        mFence = fence;
        mExpireAt = expireAt;
        mAllowedResolutionLevel = allowedResolutionLevel;
        mUid = uid;
        mPackageName = packageName;
        mIntent = intent;

        mLocation = new Location("");
        mLocation.setLatitude(fence.getLatitude());
        mLocation.setLongitude(fence.getLongitude());
!!!32990647.java!!!	processLocation(inout location : Location) : int
        mDistanceToCenter = mLocation.distanceTo(location);

        int prevState = mState;
        //TODO: inside/outside detection could be made more rigorous
        boolean inside = mDistanceToCenter <= Math.max(mFence.getRadius(), location.getAccuracy());
        if (inside) {
            mState = STATE_INSIDE;
            if (prevState != STATE_INSIDE) {
                return FLAG_ENTER; // return enter if previously exited or unknown
            }
        } else {
            mState = STATE_OUTSIDE;
            if (prevState == STATE_INSIDE) {
                return FLAG_EXIT; // return exit only if previously entered
            }
        }
        return 0;
!!!32990775.java!!!	getDistanceToBoundary() : double
        if (Double.compare(mDistanceToCenter, Double.MAX_VALUE) == 0) {
            return Double.MAX_VALUE;
        } else {
            return Math.abs(mFence.getRadius() - mDistanceToCenter);
        }
!!!32990903.java!!!	toString() : String
        String state;
        switch (mState) {
            case STATE_INSIDE:
                state = "IN";
                break;
            case STATE_OUTSIDE:
                state = "OUT";
                break;
            default:
                state = "?";
        }
        return String.format("%s d=%.0f %s", mFence.toString(), mDistanceToCenter, state);
