class ActivityManager
!!!1587895.java!!!	isProcStateBackground(in procState : int) : boolean
        return procState >= PROCESS_STATE_BACKUP;
!!!1588023.java!!!	ActivityManager(inout context : Context, inout handler : Handler)
        mContext = context;
        mHandler = handler;
!!!1591223.java!!!	getFrontActivityScreenCompatMode() : int
        try {
            return ActivityManagerNative.getDefault().getFrontActivityScreenCompatMode();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1591351.java!!!	setFrontActivityScreenCompatMode(in mode : int) : void
        try {
            ActivityManagerNative.getDefault().setFrontActivityScreenCompatMode(mode);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1591479.java!!!	getPackageScreenCompatMode(inout packageName : String) : int
        try {
            return ActivityManagerNative.getDefault().getPackageScreenCompatMode(packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1591607.java!!!	setPackageScreenCompatMode(inout packageName : String, in mode : int) : void
        try {
            ActivityManagerNative.getDefault().setPackageScreenCompatMode(packageName, mode);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1591735.java!!!	getPackageAskScreenCompat(inout packageName : String) : boolean
        try {
            return ActivityManagerNative.getDefault().getPackageAskScreenCompat(packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1591863.java!!!	setPackageAskScreenCompat(inout packageName : String, inout ask : boolean) : void
        try {
            ActivityManagerNative.getDefault().setPackageAskScreenCompat(packageName, ask);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1591991.java!!!	getMemoryClass() : int
        return staticGetMemoryClass();
!!!1592119.java!!!	staticGetMemoryClass() : int
        // Really brain dead right now -- just take this from the configured
        // vm heap size, and assume it is in megabytes and thus ends with "m".
        String vmHeapSize = SystemProperties.get("dalvik.vm.heapgrowthlimit", "");
        if (vmHeapSize != null && !"".equals(vmHeapSize)) {
            return Integer.parseInt(vmHeapSize.substring(0, vmHeapSize.length()-1));
        }
        return staticGetLargeMemoryClass();
!!!1592247.java!!!	getLargeMemoryClass() : int
        return staticGetLargeMemoryClass();
!!!1592375.java!!!	staticGetLargeMemoryClass() : int
        // Really brain dead right now -- just take this from the configured
        // vm heap size, and assume it is in megabytes and thus ends with "m".
        String vmHeapSize = SystemProperties.get("dalvik.vm.heapsize", "16m");
        return Integer.parseInt(vmHeapSize.substring(0, vmHeapSize.length() - 1));
!!!1592503.java!!!	isLowRamDevice() : boolean
        return isLowRamDeviceStatic();
!!!1592631.java!!!	isLowRamDeviceStatic() : boolean
        return "true".equals(SystemProperties.get("ro.config.low_ram", "false"));
!!!1592759.java!!!	isHighEndGfx() : boolean
        return !isLowRamDeviceStatic() &&
                !Resources.getSystem().getBoolean(com.android.internal.R.bool.config_avoidGfxAccel);
!!!1592887.java!!!	getMaxRecentTasksStatic() : int
        if (gMaxRecentTasks < 0) {
            return gMaxRecentTasks = isLowRamDeviceStatic() ? 36 : 48;
        }
        return gMaxRecentTasks;
!!!1593015.java!!!	getDefaultAppRecentsLimitStatic() : int
        return getMaxRecentTasksStatic() / 6;
!!!1593143.java!!!	getMaxAppRecentsLimitStatic() : int
        return getMaxRecentTasksStatic() / 2;
!!!1593271.java!!!	supportsMultiWindow() : boolean
        return !isLowRamDeviceStatic()
                && Resources.getSystem().getBoolean(
                    com.android.internal.R.bool.config_supportsMultiWindow);
!!!1597367.java!!!	getRecentTasks(in maxNum : int, in flags : int) : ActivityManager::RecentTaskInfo
        try {
            return ActivityManagerNative.getDefault().getRecentTasks(maxNum,
                    flags, UserHandle.myUserId()).getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1597495.java!!!	getRecentTasksForUser(in maxNum : int, in flags : int, in userId : int) : ActivityManager::RecentTaskInfo
        try {
            return ActivityManagerNative.getDefault().getRecentTasks(maxNum,
                    flags, userId).getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1598263.java!!!	getAppTasks() : ActivityManager::AppTask
        ArrayList<AppTask> tasks = new ArrayList<AppTask>();
        List<IAppTask> appTasks;
        try {
            appTasks = ActivityManagerNative.getDefault().getAppTasks(mContext.getPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
        int numAppTasks = appTasks.size();
        for (int i = 0; i < numAppTasks; i++) {
            tasks.add(new AppTask(appTasks.get(i)));
        }
        return tasks;
!!!1598391.java!!!	getAppTaskThumbnailSize() : Size
        synchronized (this) {
            ensureAppTaskThumbnailSizeLocked();
            return new Size(mAppTaskThumbnailSize.x, mAppTaskThumbnailSize.y);
        }
!!!1598519.java!!!	ensureAppTaskThumbnailSizeLocked() : void
        if (mAppTaskThumbnailSize == null) {
            try {
                mAppTaskThumbnailSize = ActivityManagerNative.getDefault().getAppTaskThumbnailSize();
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!1598647.java!!!	addAppTask(inout activity : Activity, inout intent : Intent, inout description : ActivityManager::TaskDescription, inout thumbnail : Bitmap) : int
        Point size;
        synchronized (this) {
            ensureAppTaskThumbnailSizeLocked();
            size = mAppTaskThumbnailSize;
        }
        final int tw = thumbnail.getWidth();
        final int th = thumbnail.getHeight();
        if (tw != size.x || th != size.y) {
            Bitmap bm = Bitmap.createBitmap(size.x, size.y, thumbnail.getConfig());

            // Use ScaleType.CENTER_CROP, except we leave the top edge at the top.
            float scale;
            float dx = 0, dy = 0;
            if (tw * size.x > size.y * th) {
                scale = (float) size.x / (float) th;
                dx = (size.y - tw * scale) * 0.5f;
            } else {
                scale = (float) size.y / (float) tw;
                dy = (size.x - th * scale) * 0.5f;
            }
            Matrix matrix = new Matrix();
            matrix.setScale(scale, scale);
            matrix.postTranslate((int) (dx + 0.5f), 0);

            Canvas canvas = new Canvas(bm);
            canvas.drawBitmap(thumbnail, matrix, null);
            canvas.setBitmap(null);

            thumbnail = bm;
        }
        if (description == null) {
            description = new TaskDescription();
        }
        try {
            return ActivityManagerNative.getDefault().addAppTask(activity.getActivityToken(),
                    intent, description, thumbnail);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1598775.java!!!	getRunningTasks(in maxNum : int) : ActivityManager::RunningTaskInfo
        try {
            return ActivityManagerNative.getDefault().getTasks(maxNum, 0);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1598903.java!!!	removeTask(in taskId : int) : boolean
        try {
            return ActivityManagerNative.getDefault().removeTask(taskId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1600823.java!!!	getTaskThumbnail(in id : int) : ActivityManager::TaskThumbnail
        try {
            return ActivityManagerNative.getDefault().getTaskThumbnail(id);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1600951.java!!!	isInHomeStack(in taskId : int) : boolean
        try {
            return ActivityManagerNative.getDefault().isInHomeStack(taskId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1601079.java!!!	moveTaskToFront(in taskId : int, in flags : int) : void
        moveTaskToFront(taskId, flags, null);
!!!1601207.java!!!	moveTaskToFront(in taskId : int, in flags : int, inout options : Bundle) : void
        try {
            ActivityManagerNative.getDefault().moveTaskToFront(taskId, flags, options);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1601975.java!!!	getRunningServices(in maxNum : int) : ActivityManager::RunningServiceInfo
        try {
            return ActivityManagerNative.getDefault()
                    .getServices(maxNum, 0);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1602103.java!!!	getRunningServiceControlPanel(inout service : ComponentName) : PendingIntent
        try {
            return ActivityManagerNative.getDefault()
                    .getRunningServiceControlPanel(service);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1602871.java!!!	getMemoryInfo(inout outInfo : ActivityManager::MemoryInfo) : void
        try {
            ActivityManagerNative.getDefault().getMemoryInfo(outInfo);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1603895.java!!!	clearApplicationUserData(inout packageName : String, inout observer : IPackageDataObserver) : boolean
        try {
            return ActivityManagerNative.getDefault().clearApplicationUserData(packageName,
                    observer, UserHandle.myUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1604023.java!!!	clearApplicationUserData() : boolean
        return clearApplicationUserData(mContext.getPackageName(), null);
!!!1604151.java!!!	getGrantedUriPermissions(inout packageName : String) : ParceledListSlice
        try {
            return ActivityManagerNative.getDefault().getGrantedUriPermissions(packageName,
                    UserHandle.myUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1604279.java!!!	clearGrantedUriPermissions(inout packageName : String) : void
        try {
            ActivityManagerNative.getDefault().clearGrantedUriPermissions(packageName,
                    UserHandle.myUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1605047.java!!!	getProcessesInErrorState() : ActivityManager::ProcessErrorStateInfo
        try {
            return ActivityManagerNative.getDefault().getProcessesInErrorState();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1606071.java!!!	getRunningExternalApplications() : ApplicationInfo
        try {
            return ActivityManagerNative.getDefault().getRunningExternalApplications();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1606199.java!!!	setProcessMemoryTrimLevel(inout process : String, in userId : int, in level : int) : boolean
        try {
            return ActivityManagerNative.getDefault().setProcessMemoryTrimLevel(process, userId,
                    level);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1606327.java!!!	getRunningAppProcesses() : ActivityManager::RunningAppProcessInfo
        try {
            return ActivityManagerNative.getDefault().getRunningAppProcesses();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1606455.java!!!	getPackageImportance(inout packageName : String) : int
        try {
            int procState = ActivityManagerNative.getDefault().getPackageProcessState(packageName,
                    mContext.getOpPackageName());
            return RunningAppProcessInfo.procStateToImportance(procState);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1606583.java!!!	getMyMemoryState(inout outState : ActivityManager::RunningAppProcessInfo) : void
        try {
            ActivityManagerNative.getDefault().getMyMemoryState(outState);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1606711.java!!!	getProcessMemoryInfo(inout pids : int) : Debug::MemoryInfo
        try {
            return ActivityManagerNative.getDefault().getProcessMemoryInfo(pids);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1606839.java!!!	restartPackage(inout packageName : String) : void
        killBackgroundProcesses(packageName);
!!!1606967.java!!!	killBackgroundProcesses(inout packageName : String) : void
        try {
            ActivityManagerNative.getDefault().killBackgroundProcesses(packageName,
                    UserHandle.myUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1607095.java!!!	killUid(in uid : int, inout reason : String) : void
        try {
            ActivityManagerNative.getDefault().killUid(UserHandle.getAppId(uid),
                    UserHandle.getUserId(uid), reason);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1607223.java!!!	forceStopPackageAsUser(inout packageName : String, in userId : int) : void
        try {
            ActivityManagerNative.getDefault().forceStopPackage(packageName, userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1607351.java!!!	forceStopPackage(inout packageName : String) : void
        forceStopPackageAsUser(packageName, UserHandle.myUserId());
!!!1607479.java!!!	getDeviceConfigurationInfo() : ConfigurationInfo
        try {
            return ActivityManagerNative.getDefault().getDeviceConfigurationInfo();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1607607.java!!!	getLauncherLargeIconDensity() : int
        final Resources res = mContext.getResources();
        final int density = res.getDisplayMetrics().densityDpi;
        final int sw = res.getConfiguration().smallestScreenWidthDp;

        if (sw < 600) {
            // Smaller than approx 7" tablets, use the regular icon size.
            return density;
        }

        switch (density) {
            case DisplayMetrics.DENSITY_LOW:
                return DisplayMetrics.DENSITY_MEDIUM;
            case DisplayMetrics.DENSITY_MEDIUM:
                return DisplayMetrics.DENSITY_HIGH;
            case DisplayMetrics.DENSITY_TV:
                return DisplayMetrics.DENSITY_XHIGH;
            case DisplayMetrics.DENSITY_HIGH:
                return DisplayMetrics.DENSITY_XHIGH;
            case DisplayMetrics.DENSITY_XHIGH:
                return DisplayMetrics.DENSITY_XXHIGH;
            case DisplayMetrics.DENSITY_XXHIGH:
                return DisplayMetrics.DENSITY_XHIGH * 2;
            default:
                // The density is some abnormal value.  Return some other
                // abnormal value that is a reasonable scaling of it.
                return (int)((density*1.5f)+.5f);
        }
!!!1607735.java!!!	getLauncherLargeIconSize() : int
        return getLauncherLargeIconSizeInner(mContext);
!!!1607863.java!!!	getLauncherLargeIconSizeInner(inout context : Context) : int
        final Resources res = context.getResources();
        final int size = res.getDimensionPixelSize(android.R.dimen.app_icon_size);
        final int sw = res.getConfiguration().smallestScreenWidthDp;

        if (sw < 600) {
            // Smaller than approx 7" tablets, use the regular icon size.
            return size;
        }

        final int density = res.getDisplayMetrics().densityDpi;

        switch (density) {
            case DisplayMetrics.DENSITY_LOW:
                return (size * DisplayMetrics.DENSITY_MEDIUM) / DisplayMetrics.DENSITY_LOW;
            case DisplayMetrics.DENSITY_MEDIUM:
                return (size * DisplayMetrics.DENSITY_HIGH) / DisplayMetrics.DENSITY_MEDIUM;
            case DisplayMetrics.DENSITY_TV:
                return (size * DisplayMetrics.DENSITY_XHIGH) / DisplayMetrics.DENSITY_HIGH;
            case DisplayMetrics.DENSITY_HIGH:
                return (size * DisplayMetrics.DENSITY_XHIGH) / DisplayMetrics.DENSITY_HIGH;
            case DisplayMetrics.DENSITY_XHIGH:
                return (size * DisplayMetrics.DENSITY_XXHIGH) / DisplayMetrics.DENSITY_XHIGH;
            case DisplayMetrics.DENSITY_XXHIGH:
                return (size * DisplayMetrics.DENSITY_XHIGH*2) / DisplayMetrics.DENSITY_XXHIGH;
            default:
                // The density is some abnormal value.  Return some other
                // abnormal value that is a reasonable scaling of it.
                return (int)((size*1.5f) + .5f);
        }
!!!1607991.java!!!	isUserAMonkey() : boolean
        try {
            return ActivityManagerNative.getDefault().isUserAMonkey();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1608119.java!!!	isRunningInTestHarness() : boolean
        return SystemProperties.getBoolean("ro.test_harness", false);
!!!1608247.java!!!	checkComponentPermission(inout permission : String, in uid : int, in owningUid : int, inout exported : boolean) : int
        // Root, system server get to do everything.
        final int appId = UserHandle.getAppId(uid);
        if (appId == Process.ROOT_UID || appId == Process.SYSTEM_UID) {
            return PackageManager.PERMISSION_GRANTED;
        }
        // Isolated processes don't get any permissions.
        if (UserHandle.isIsolated(uid)) {
            return PackageManager.PERMISSION_DENIED;
        }
        // If there is a uid that owns whatever is being accessed, it has
        // blanket access to it regardless of the permissions it requires.
        if (owningUid >= 0 && UserHandle.isSameApp(uid, owningUid)) {
            return PackageManager.PERMISSION_GRANTED;
        }
        // If the target is not exported, then nobody else can get to it.
        if (!exported) {
            /*
            RuntimeException here = new RuntimeException("here");
            here.fillInStackTrace();
            Slog.w(TAG, "Permission denied: checkComponentPermission() owningUid=" + owningUid,
                    here);
            */
            return PackageManager.PERMISSION_DENIED;
        }
        if (permission == null) {
            return PackageManager.PERMISSION_GRANTED;
        }
        try {
            return AppGlobals.getPackageManager()
                    .checkUidPermission(permission, uid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1608375.java!!!	checkUidPermission(inout permission : String, in uid : int) : int
        try {
            return AppGlobals.getPackageManager()
                    .checkUidPermission(permission, uid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1608503.java!!!	handleIncomingUser(in callingPid : int, in callingUid : int, in userId : int, inout allowAll : boolean, inout requireFull : boolean, inout name : String, inout callerPackage : String) : int
        if (UserHandle.getUserId(callingUid) == userId) {
            return userId;
        }
        try {
            return ActivityManagerNative.getDefault().handleIncomingUser(callingPid,
                    callingUid, userId, allowAll, requireFull, name, callerPackage);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1608631.java!!!	getCurrentUser() : int
        UserInfo ui;
        try {
            ui = ActivityManagerNative.getDefault().getCurrentUser();
            return ui != null ? ui.id : 0;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1608759.java!!!	switchUser(in userid : int) : boolean
        try {
            return ActivityManagerNative.getDefault().switchUser(userid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1608887.java!!!	logoutCurrentUser() : void
        int currentUser = ActivityManager.getCurrentUser();
        if (currentUser != UserHandle.USER_SYSTEM) {
            try {
                ActivityManagerNative.getDefault().switchUser(UserHandle.USER_SYSTEM);
                ActivityManagerNative.getDefault().stopUser(currentUser, /* force= */ false, null);
            } catch (RemoteException e) {
                e.rethrowFromSystemServer();
            }
        }
!!!1609015.java!!!	isUserRunning(in userId : int) : boolean
        try {
            return ActivityManagerNative.getDefault().isUserRunning(userId, 0);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1609143.java!!!	isVrModePackageEnabled(inout component : ComponentName) : boolean
        try {
            return ActivityManagerNative.getDefault().isVrModePackageEnabled(component);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1609271.java!!!	dumpPackageState(inout fd : FileDescriptor, inout packageName : String) : void
        dumpPackageStateStatic(fd, packageName);
!!!1609399.java!!!	dumpPackageStateStatic(inout fd : FileDescriptor, inout packageName : String) : void
        FileOutputStream fout = new FileOutputStream(fd);
        PrintWriter pw = new FastPrintWriter(fout);
        dumpService(pw, fd, "package", new String[] { packageName });
        pw.println();
        dumpService(pw, fd, Context.ACTIVITY_SERVICE, new String[] {
                "-a", "package", packageName });
        pw.println();
        dumpService(pw, fd, "meminfo", new String[] { "--local", "--package", packageName });
        pw.println();
        dumpService(pw, fd, ProcessStats.SERVICE_NAME, new String[] { packageName });
        pw.println();
        dumpService(pw, fd, "usagestats", new String[] { "--packages", packageName });
        pw.println();
        dumpService(pw, fd, BatteryStats.SERVICE_NAME, new String[] { packageName });
        pw.flush();
!!!1609527.java!!!	dumpService(inout pw : PrintWriter, inout fd : FileDescriptor, inout name : String, inout args : String) : void
        pw.print("DUMP OF SERVICE "); pw.print(name); pw.println(":");
        IBinder service = ServiceManager.checkService(name);
        if (service == null) {
            pw.println("  (Service not found)");
            return;
        }
        TransferPipe tp = null;
        try {
            pw.flush();
            tp = new TransferPipe();
            tp.setBufferPrefix("  ");
            service.dumpAsync(tp.getWriteFd().getFileDescriptor(), args);
            tp.go(fd, 10000);
        } catch (Throwable e) {
            if (tp != null) {
                tp.kill();
            }
            pw.println("Failure dumping service:");
            e.printStackTrace(pw);
        }
!!!1609655.java!!!	setWatchHeapLimit(in pssSize : long) : void
        try {
            ActivityManagerNative.getDefault().setDumpHeapDebugLimit(null, 0, pssSize,
                    mContext.getPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1609783.java!!!	clearWatchHeapLimit() : void
        try {
            ActivityManagerNative.getDefault().setDumpHeapDebugLimit(null, 0, 0, null);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1609911.java!!!	startLockTaskMode(in taskId : int) : void
        try {
            ActivityManagerNative.getDefault().startLockTaskMode(taskId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1610039.java!!!	stopLockTaskMode() : void
        try {
            ActivityManagerNative.getDefault().stopLockTaskMode();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1610167.java!!!	isInLockTaskMode() : boolean
        return getLockTaskModeState() != LOCK_TASK_MODE_NONE;
!!!1610295.java!!!	getLockTaskModeState() : int
        try {
            return ActivityManagerNative.getDefault().getLockTaskModeState();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
