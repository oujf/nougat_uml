class NetworkStatsObservers
!!!33106231.java!!!	register(inout inputRequest : DataUsageRequest, inout messenger : Messenger, inout binder : IBinder, in callingUid : int, in accessLevel : int) : DataUsageRequest
        DataUsageRequest request = buildRequest(inputRequest);
        RequestInfo requestInfo = buildRequestInfo(request, messenger, binder, callingUid,
                accessLevel);

        if (LOGV) Slog.v(TAG, "Registering observer for " + request);
        getHandler().sendMessage(mHandler.obtainMessage(MSG_REGISTER, requestInfo));
        return request;
!!!33106359.java!!!	unregister(inout request : DataUsageRequest, in callingUid : int) : void
        getHandler().sendMessage(mHandler.obtainMessage(MSG_UNREGISTER, callingUid, 0 /* ignore */,
                request));
!!!33106487.java!!!	updateStats(inout xtSnapshot : NetworkStats, inout uidSnapshot : NetworkStats, inout activeIfaces : ArrayMap, inout activeUidIfaces : ArrayMap, inout vpnArray : VpnInfo, in currentTime : long) : void
        StatsContext statsContext = new StatsContext(xtSnapshot, uidSnapshot, activeIfaces,
                activeUidIfaces, vpnArray, currentTime);
        getHandler().sendMessage(mHandler.obtainMessage(MSG_UPDATE_STATS, statsContext));
!!!33106615.java!!!	getHandler() : Handler
        if (mHandler == null) {
            synchronized (this) {
                if (mHandler == null) {
                    if (LOGV) Slog.v(TAG, "Creating handler");
                    mHandler = new Handler(getHandlerLooperLocked(), mHandlerCallback);
                }
            }
        }
        return mHandler;
!!!33106743.java!!!	getHandlerLooperLocked() : Looper
        HandlerThread handlerThread = new HandlerThread(TAG);
        handlerThread.start();
        return handlerThread.getLooper();
!!!33106871.java!!!	handleRegister(inout requestInfo : NetworkStatsObservers::RequestInfo) : void
        mDataUsageRequests.put(requestInfo.mRequest.requestId, requestInfo);
!!!33106999.java!!!	handleUnregister(inout request : DataUsageRequest, in callingUid : int) : void
        RequestInfo requestInfo;
        requestInfo = mDataUsageRequests.get(request.requestId);
        if (requestInfo == null) {
            if (LOGV) Slog.v(TAG, "Trying to unregister unknown request " + request);
            return;
        }
        if (Process.SYSTEM_UID != callingUid && requestInfo.mCallingUid != callingUid) {
            Slog.w(TAG, "Caller uid " + callingUid + " is not owner of " + request);
            return;
        }

        if (LOGV) Slog.v(TAG, "Unregistering " + request);
        mDataUsageRequests.remove(request.requestId);
        requestInfo.unlinkDeathRecipient();
        requestInfo.callCallback(NetworkStatsManager.CALLBACK_RELEASED);
!!!33107127.java!!!	handleUpdateStats(inout statsContext : NetworkStatsObservers::StatsContext) : void
        if (mDataUsageRequests.size() == 0) {
            return;
        }

        for (int i = 0; i < mDataUsageRequests.size(); i++) {
            RequestInfo requestInfo = mDataUsageRequests.valueAt(i);
            requestInfo.updateStats(statsContext);
        }
!!!33107255.java!!!	buildRequest(inout request : DataUsageRequest) : DataUsageRequest
        // Cap the minimum threshold to a safe default to avoid too many callbacks
        long thresholdInBytes = Math.max(MIN_THRESHOLD_BYTES, request.thresholdInBytes);
        if (thresholdInBytes < request.thresholdInBytes) {
            Slog.w(TAG, "Threshold was too low for " + request
                    + ". Overriding to a safer default of " + thresholdInBytes + " bytes");
        }
        return new DataUsageRequest(mNextDataUsageRequestId.incrementAndGet(),
                request.template, thresholdInBytes);
!!!33107383.java!!!	buildRequestInfo(inout request : DataUsageRequest, inout messenger : Messenger, inout binder : IBinder, in callingUid : int, in accessLevel : int) : NetworkStatsObservers::RequestInfo
        if (accessLevel <= NetworkStatsAccess.Level.USER) {
            return new UserUsageRequestInfo(this, request, messenger, binder, callingUid,
                    accessLevel);
        } else {
            // Safety check in case a new access level is added and we forgot to update this
            checkArgument(accessLevel >= NetworkStatsAccess.Level.DEVICESUMMARY);
            return new NetworkUsageRequestInfo(this, request, messenger, binder, callingUid,
                    accessLevel);
        }
