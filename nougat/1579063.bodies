class NotificationRecord
!!!33163319.java!!!	NotificationRecord(inout context : Context, inout sbn : StatusBarNotification)
        this.sbn = sbn;
        mOriginalFlags = sbn.getNotification().flags;
        mRankingTimeMs = calculateRankingTimeMs(0L);
        mCreationTimeMs = sbn.getPostTime();
        mUpdateTimeMs = mCreationTimeMs;
        mContext = context;
        stats = new NotificationUsageStats.SingleNotificationStats();
        mImportance = defaultImportance();
!!!33163447.java!!!	defaultImportance() : int
        final Notification n = sbn.getNotification();
        int importance = IMPORTANCE_DEFAULT;

        // Migrate notification flags to scores
        if (0 != (n.flags & Notification.FLAG_HIGH_PRIORITY)) {
            n.priority = Notification.PRIORITY_MAX;
        }

        switch (n.priority) {
            case Notification.PRIORITY_MIN:
                importance = IMPORTANCE_MIN;
                break;
            case Notification.PRIORITY_LOW:
                importance = IMPORTANCE_LOW;
                break;
            case Notification.PRIORITY_DEFAULT:
                importance = IMPORTANCE_DEFAULT;
                break;
            case Notification.PRIORITY_HIGH:
                importance = IMPORTANCE_HIGH;
                break;
            case Notification.PRIORITY_MAX:
                importance = IMPORTANCE_MAX;
                break;
        }
        stats.requestedImportance = importance;

        boolean isNoisy = (n.defaults & Notification.DEFAULT_SOUND) != 0
                || (n.defaults & Notification.DEFAULT_VIBRATE) != 0
                || n.sound != null
                || n.vibrate != null;
        stats.isNoisy = isNoisy;

        if (!isNoisy && importance > IMPORTANCE_LOW) {
            importance = IMPORTANCE_LOW;
        }

        if (isNoisy) {
            if (importance < IMPORTANCE_DEFAULT) {
                importance = IMPORTANCE_DEFAULT;
            }
        }

        if (n.fullScreenIntent != null) {
            importance = IMPORTANCE_MAX;
        }

        stats.naturalImportance = importance;
        return importance;
!!!33163575.java!!!	copyRankingInformation(inout previous : NotificationRecord) : void
        mContactAffinity = previous.mContactAffinity;
        mRecentlyIntrusive = previous.mRecentlyIntrusive;
        mPackagePriority = previous.mPackagePriority;
        mPackageVisibility = previous.mPackageVisibility;
        mIntercept = previous.mIntercept;
        mRankingTimeMs = calculateRankingTimeMs(previous.getRankingTimeMs());
        mCreationTimeMs = previous.mCreationTimeMs;
        mVisibleSinceMs = previous.mVisibleSinceMs;
        if (previous.sbn.getOverrideGroupKey() != null && !sbn.isAppGroup()) {
            sbn.setOverrideGroupKey(previous.sbn.getOverrideGroupKey());
        }
        // Don't copy importance information or mGlobalSortKey, recompute them.
!!!33163703.java!!!	getNotification() : Notification
 return sbn.getNotification();
!!!33163831.java!!!	getFlags() : int
 return sbn.getNotification().flags;
!!!33163959.java!!!	getUser() : UserHandle
 return sbn.getUser();
!!!33164087.java!!!	getKey() : String
 return sbn.getKey();
!!!33164215.java!!!	getUserId() : int
 return sbn.getUserId();
!!!33164343.java!!!	dump(inout pw : PrintWriter, inout prefix : String, inout baseContext : Context, inout redact : boolean) : void
        final Notification notification = sbn.getNotification();
        final Icon icon = notification.getSmallIcon();
        String iconStr = String.valueOf(icon);
        if (icon != null && icon.getType() == Icon.TYPE_RESOURCE) {
            iconStr += " / " + idDebugString(baseContext, icon.getResPackage(), icon.getResId());
        }
        pw.println(prefix + this);
        pw.println(prefix + "  uid=" + sbn.getUid() + " userId=" + sbn.getUserId());
        pw.println(prefix + "  icon=" + iconStr);
        pw.println(prefix + "  pri=" + notification.priority);
        pw.println(prefix + "  key=" + sbn.getKey());
        pw.println(prefix + "  seen=" + mIsSeen);
        pw.println(prefix + "  groupKey=" + getGroupKey());
        pw.println(prefix + "  contentIntent=" + notification.contentIntent);
        pw.println(prefix + "  deleteIntent=" + notification.deleteIntent);
        pw.println(prefix + "  tickerText=" + notification.tickerText);
        pw.println(prefix + "  contentView=" + notification.contentView);
        pw.println(prefix + String.format("  defaults=0x%08x flags=0x%08x",
                notification.defaults, notification.flags));
        pw.println(prefix + "  sound=" + notification.sound);
        pw.println(prefix + "  audioStreamType=" + notification.audioStreamType);
        pw.println(prefix + "  audioAttributes=" + notification.audioAttributes);
        pw.println(prefix + String.format("  color=0x%08x", notification.color));
        pw.println(prefix + "  vibrate=" + Arrays.toString(notification.vibrate));
        pw.println(prefix + String.format("  led=0x%08x onMs=%d offMs=%d",
                notification.ledARGB, notification.ledOnMS, notification.ledOffMS));
        if (notification.actions != null && notification.actions.length > 0) {
            pw.println(prefix + "  actions={");
            final int N = notification.actions.length;
            for (int i=0; i<N; i++) {
                final Notification.Action action = notification.actions[i];
                if (action != null) {
                    pw.println(String.format("%s    [%d] \"%s\" -> %s",
                            prefix,
                            i,
                            action.title,
                            action.actionIntent == null ? "null" : action.actionIntent.toString()
                    ));
                }
            }
            pw.println(prefix + "  }");
        }
        if (notification.extras != null && notification.extras.size() > 0) {
            pw.println(prefix + "  extras={");
            for (String key : notification.extras.keySet()) {
                pw.print(prefix + "    " + key + "=");
                Object val = notification.extras.get(key);
                if (val == null) {
                    pw.println("null");
                } else {
                    pw.print(val.getClass().getSimpleName());
                    if (redact && (val instanceof CharSequence || val instanceof String)) {
                        // redact contents from bugreports
                    } else if (val instanceof Bitmap) {
                        pw.print(String.format(" (%dx%d)",
                                ((Bitmap) val).getWidth(),
                                ((Bitmap) val).getHeight()));
                    } else if (val.getClass().isArray()) {
                        final int N = Array.getLength(val);
                        pw.print(" (" + N + ")");
                        if (!redact) {
                            for (int j=0; j<N; j++) {
                                pw.println();
                                pw.print(String.format("%s      [%d] %s",
                                        prefix, j, String.valueOf(Array.get(val, j))));
                            }
                        }
                    } else {
                        pw.print(" (" + String.valueOf(val) + ")");
                    }
                    pw.println();
                }
            }
            pw.println(prefix + "  }");
        }
        pw.println(prefix + "  stats=" + stats.toString());
        pw.println(prefix + "  mContactAffinity=" + mContactAffinity);
        pw.println(prefix + "  mRecentlyIntrusive=" + mRecentlyIntrusive);
        pw.println(prefix + "  mPackagePriority=" + mPackagePriority);
        pw.println(prefix + "  mPackageVisibility=" + mPackageVisibility);
        pw.println(prefix + "  mUserImportance="
                + NotificationListenerService.Ranking.importanceToString(mUserImportance));
        pw.println(prefix + "  mImportance="
                + NotificationListenerService.Ranking.importanceToString(mImportance));
        pw.println(prefix + "  mImportanceExplanation=" + mImportanceExplanation);
        pw.println(prefix + "  mIntercept=" + mIntercept);
        pw.println(prefix + "  mGlobalSortKey=" + mGlobalSortKey);
        pw.println(prefix + "  mRankingTimeMs=" + mRankingTimeMs);
        pw.println(prefix + "  mCreationTimeMs=" + mCreationTimeMs);
        pw.println(prefix + "  mVisibleSinceMs=" + mVisibleSinceMs);
        pw.println(prefix + "  mUpdateTimeMs=" + mUpdateTimeMs);
        pw.println(prefix + "  mSuppressedVisualEffects= " + mSuppressedVisualEffects);
!!!33164471.java!!!	idDebugString(inout baseContext : Context, inout packageName : String, in id : int) : String
        Context c;

        if (packageName != null) {
            try {
                c = baseContext.createPackageContext(packageName, 0);
            } catch (NameNotFoundException e) {
                c = baseContext;
            }
        } else {
            c = baseContext;
        }

        Resources r = c.getResources();
        try {
            return r.getResourceName(id);
        } catch (Resources.NotFoundException e) {
            return "<name unknown>";
        }
!!!33164599.java!!!	toString() : String
        return String.format(
                "NotificationRecord(0x%08x: pkg=%s user=%s id=%d tag=%s importance=%d key=%s: %s)",
                System.identityHashCode(this),
                this.sbn.getPackageName(), this.sbn.getUser(), this.sbn.getId(),
                this.sbn.getTag(), this.mImportance, this.sbn.getKey(),
                this.sbn.getNotification());
!!!33164727.java!!!	setContactAffinity(in contactAffinity : float) : void
        mContactAffinity = contactAffinity;
        if (mImportance < IMPORTANCE_DEFAULT &&
                mContactAffinity > ValidateNotificationPeople.VALID_CONTACT) {
            setImportance(IMPORTANCE_DEFAULT, getPeopleExplanation());
        }
!!!33164855.java!!!	getContactAffinity() : float
        return mContactAffinity;
!!!33164983.java!!!	setRecentlyIntrusive(inout recentlyIntrusive : boolean) : void
        mRecentlyIntrusive = recentlyIntrusive;
!!!33165111.java!!!	isRecentlyIntrusive() : boolean
        return mRecentlyIntrusive;
!!!33165239.java!!!	setPackagePriority(in packagePriority : int) : void
        mPackagePriority = packagePriority;
!!!33165367.java!!!	getPackagePriority() : int
        return mPackagePriority;
!!!33165495.java!!!	setPackageVisibilityOverride(in packageVisibility : int) : void
        mPackageVisibility = packageVisibility;
!!!33165623.java!!!	getPackageVisibilityOverride() : int
        return mPackageVisibility;
!!!33165751.java!!!	setUserImportance(in importance : int) : void
        mUserImportance = importance;
        applyUserImportance();
!!!33165879.java!!!	getUserExplanation() : String
        if (mUserExplanation == null) {
            mUserExplanation =
                    mContext.getString(com.android.internal.R.string.importance_from_user);
        }
        return mUserExplanation;
!!!33166007.java!!!	getPeopleExplanation() : String
        if (mPeopleExplanation == null) {
            mPeopleExplanation =
                    mContext.getString(com.android.internal.R.string.importance_from_person);
        }
        return mPeopleExplanation;
!!!33166135.java!!!	applyUserImportance() : void
        if (mUserImportance != NotificationListenerService.Ranking.IMPORTANCE_UNSPECIFIED) {
            mImportance = mUserImportance;
            mImportanceExplanation = getUserExplanation();
        }
!!!33166263.java!!!	getUserImportance() : int
        return mUserImportance;
!!!33166391.java!!!	setImportance(in importance : int, inout explanation : CharSequence) : void
        if (importance != NotificationListenerService.Ranking.IMPORTANCE_UNSPECIFIED) {
            mImportance = importance;
            mImportanceExplanation = explanation;
        }
        applyUserImportance();
!!!33166519.java!!!	getImportance() : int
        return mImportance;
!!!33166647.java!!!	getImportanceExplanation() : CharSequence
        return mImportanceExplanation;
!!!33166775.java!!!	setIntercepted(inout intercept : boolean) : boolean
        mIntercept = intercept;
        return mIntercept;
!!!33166903.java!!!	isIntercepted() : boolean
        return mIntercept;
!!!33167031.java!!!	setSuppressedVisualEffects(in effects : int) : void
        mSuppressedVisualEffects = effects;
!!!33167159.java!!!	getSuppressedVisualEffects() : int
        return mSuppressedVisualEffects;
!!!33167287.java!!!	isCategory(inout category : String) : boolean
        return Objects.equals(getNotification().category, category);
!!!33167415.java!!!	isAudioStream(in stream : int) : boolean
        return getNotification().audioStreamType == stream;
!!!33167543.java!!!	isAudioAttributesUsage(in usage : int) : boolean
        final AudioAttributes attributes = getNotification().audioAttributes;
        return attributes != null && attributes.getUsage() == usage;
!!!33167671.java!!!	getRankingTimeMs() : long
        return mRankingTimeMs;
!!!33167799.java!!!	getFreshnessMs(in now : long) : int
        return (int) (now - mUpdateTimeMs);
!!!33167927.java!!!	getLifespanMs(in now : long) : int
        return (int) (now - mCreationTimeMs);
!!!33168055.java!!!	getExposureMs(in now : long) : int
        return mVisibleSinceMs == 0 ? 0 : (int) (now - mVisibleSinceMs);
!!!33168183.java!!!	setVisibility(inout visible : boolean, in rank : int) : void
        final long now = System.currentTimeMillis();
        mVisibleSinceMs = visible ? now : mVisibleSinceMs;
        stats.onVisibilityChanged(visible);
        EventLogTags.writeNotificationVisibility(getKey(), visible ? 1 : 0,
                (int) (now - mCreationTimeMs),
                (int) (now - mUpdateTimeMs),
                0, // exposure time
                rank);
!!!33168311.java!!!	calculateRankingTimeMs(in previousRankingTimeMs : long) : long
        Notification n = getNotification();
        // Take developer provided 'when', unless it's in the future.
        if (n.when != 0 && n.when <= sbn.getPostTime()) {
            return n.when;
        }
        // If we've ranked a previous instance with a timestamp, inherit it. This case is
        // important in order to have ranking stability for updating notifications.
        if (previousRankingTimeMs > 0) {
            return previousRankingTimeMs;
        }
        return sbn.getPostTime();
!!!33168439.java!!!	setGlobalSortKey(inout globalSortKey : String) : void
        mGlobalSortKey = globalSortKey;
!!!33168567.java!!!	getGlobalSortKey() : String
        return mGlobalSortKey;
!!!33168695.java!!!	isSeen() : boolean
        return mIsSeen;
!!!33168823.java!!!	setSeen() : void
        mIsSeen = true;
!!!33168951.java!!!	setAuthoritativeRank(in authoritativeRank : int) : void
        mAuthoritativeRank = authoritativeRank;
!!!33169079.java!!!	getAuthoritativeRank() : int
        return mAuthoritativeRank;
!!!33169207.java!!!	getGroupKey() : String
        return sbn.getGroupKey();
!!!33169335.java!!!	isImportanceFromUser() : boolean
        return mImportance == mUserImportance;
