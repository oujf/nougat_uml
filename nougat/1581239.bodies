class NotificationRankers
!!!33157943.java!!!	NotificationRankers()
            super(getContext(), mHandler, mNotificationList, mUserProfiles);
!!!33158071.java!!!	getConfig() : ManagedServices::Config
            Config c = new Config();
            c.caption = "notification ranker service";
            c.serviceInterface = NotificationRankerService.SERVICE_INTERFACE;
            c.secureSettingName = null;
            c.bindPermission = Manifest.permission.BIND_NOTIFICATION_RANKER_SERVICE;
            c.settingsAction = Settings.ACTION_MANAGE_DEFAULT_APPS_SETTINGS;
            c.clientLabel = R.string.notification_ranker_binding_label;
            return c;
!!!33158199.java!!!	asInterface(inout binder : IBinder) : IInterface
            return INotificationListener.Stub.asInterface(binder);
!!!33158327.java!!!	checkType(inout service : IInterface) : boolean
            return service instanceof INotificationListener;
!!!33158455.java!!!	onServiceAdded(inout info : ManagedServices::ManagedServiceInfo) : void
            mListeners.registerGuestService(info);
!!!33158583.java!!!	onServiceRemovedLocked(inout removed : ManagedServices::ManagedServiceInfo) : void
            mListeners.unregisterService(removed.service, removed.userid);
!!!33158711.java!!!	onNotificationEnqueued(in r : NotificationRecord) : void
            final StatusBarNotification sbn = r.sbn;
            TrimCache trimCache = new TrimCache(sbn);

            // mServices is the list inside ManagedServices of all the rankers,
            // There should be only one, but it's a list, so while we enforce
            // singularity elsewhere, we keep it general here, to avoid surprises.
            for (final ManagedServiceInfo info : NotificationRankers.this.mServices) {
                boolean sbnVisible = isVisibleToListener(sbn, info);
                if (!sbnVisible) {
                    continue;
                }

                final int importance = r.getImportance();
                final boolean fromUser = r.isImportanceFromUser();
                final StatusBarNotification sbnToPost =  trimCache.ForListener(info);
                mHandler.post(new Runnable() {
                    @Override
                    public void run() {
                        notifyEnqueued(info, sbnToPost, importance, fromUser);
                    }
                });
            }
!!!33158839.java!!!	notifyEnqueued(in info : ManagedServices::ManagedServiceInfo, in sbn : StatusBarNotification, in importance : int, inout fromUser : boolean) : void
            final INotificationListener ranker = (INotificationListener) info.service;
            StatusBarNotificationHolder sbnHolder = new StatusBarNotificationHolder(sbn);
            try {
                ranker.onNotificationEnqueued(sbnHolder, importance, fromUser);
            } catch (RemoteException ex) {
                Log.e(TAG, "unable to notify ranker (enqueued): " + ranker, ex);
            }
!!!33158967.java!!!	isEnabled() : boolean
            return !mServices.isEmpty();
!!!33159095.java!!!	onUserSwitched(in user : int) : void
            synchronized (mNotificationList) {
                int i = mServices.size()-1;
                while (i --> 0) {
                    final ManagedServiceInfo info = mServices.get(i);
                    unregisterService(info.service, info.userid);
                }
            }
            registerRanker();
!!!33159223.java!!!	onPackagesChanged(inout queryReplace : boolean, inout pkgList : String) : void
            if (DEBUG) Slog.d(TAG, "onPackagesChanged queryReplace=" + queryReplace
                    + " pkgList=" + (pkgList == null ? null : Arrays.asList(pkgList)));
            if (mRankerServicePackageName == null) {
                return;
            }

            if (pkgList != null && (pkgList.length > 0)) {
                for (String pkgName : pkgList) {
                    if (mRankerServicePackageName.equals(pkgName)) {
                        registerRanker();
                    }
                }
            }
!!!33159351.java!!!	registerRanker() : void
            // Find the updatable ranker and register it.
            if (mRankerServicePackageName == null) {
                Slog.w(TAG, "could not start ranker service: no package specified!");
                return;
            }
            Set<ComponentName> rankerComponents = queryPackageForServices(
                    mRankerServicePackageName, UserHandle.USER_SYSTEM);
            Iterator<ComponentName> iterator = rankerComponents.iterator();
            if (iterator.hasNext()) {
                ComponentName rankerComponent = iterator.next();
                if (iterator.hasNext()) {
                    Slog.e(TAG, "found multiple ranker services:" + rankerComponents);
                } else {
                    registerSystemService(rankerComponent, UserHandle.USER_SYSTEM);
                }
            } else {
                Slog.w(TAG, "could not start ranker service: none found");
            }
