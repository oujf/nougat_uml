class MyPackageMonitor
!!!33240119.java!!!	onPackageAdded(inout packageName : String, in uid : int) : void
                UserHandle user = new UserHandle(getChangingUserId());
                final int n = mListeners.beginBroadcast();
                for (int i = 0; i < n; i++) {
                    IOnAppsChangedListener listener = mListeners.getBroadcastItem(i);
                    BroadcastCookie cookie = (BroadcastCookie) mListeners.getBroadcastCookie(i);
                    if (!isEnabledProfileOf(user, cookie.user, "onPackageAdded")) continue;
                    try {
                        listener.onPackageAdded(user, packageName);
                    } catch (RemoteException re) {
                        Slog.d(TAG, "Callback failed ", re);
                    }
                }
                mListeners.finishBroadcast();

                super.onPackageAdded(packageName, uid);
!!!33240247.java!!!	onPackageRemoved(inout packageName : String, in uid : int) : void
                UserHandle user = new UserHandle(getChangingUserId());
                final int n = mListeners.beginBroadcast();
                for (int i = 0; i < n; i++) {
                    IOnAppsChangedListener listener = mListeners.getBroadcastItem(i);
                    BroadcastCookie cookie = (BroadcastCookie) mListeners.getBroadcastCookie(i);
                    if (!isEnabledProfileOf(user, cookie.user, "onPackageRemoved")) continue;
                    try {
                        listener.onPackageRemoved(user, packageName);
                    } catch (RemoteException re) {
                        Slog.d(TAG, "Callback failed ", re);
                    }
                }
                mListeners.finishBroadcast();

                super.onPackageRemoved(packageName, uid);
!!!33240375.java!!!	onPackageModified(inout packageName : String) : void
                UserHandle user = new UserHandle(getChangingUserId());
                final int n = mListeners.beginBroadcast();
                for (int i = 0; i < n; i++) {
                    IOnAppsChangedListener listener = mListeners.getBroadcastItem(i);
                    BroadcastCookie cookie = (BroadcastCookie) mListeners.getBroadcastCookie(i);
                    if (!isEnabledProfileOf(user, cookie.user, "onPackageModified")) continue;
                    try {
                        listener.onPackageChanged(user, packageName);
                    } catch (RemoteException re) {
                        Slog.d(TAG, "Callback failed ", re);
                    }
                }
                mListeners.finishBroadcast();

                super.onPackageModified(packageName);
!!!33240503.java!!!	onPackagesAvailable(inout packages : String) : void
                UserHandle user = new UserHandle(getChangingUserId());
                final int n = mListeners.beginBroadcast();
                for (int i = 0; i < n; i++) {
                    IOnAppsChangedListener listener = mListeners.getBroadcastItem(i);
                    BroadcastCookie cookie = (BroadcastCookie) mListeners.getBroadcastCookie(i);
                    if (!isEnabledProfileOf(user, cookie.user, "onPackagesAvailable")) continue;
                    try {
                        listener.onPackagesAvailable(user, packages, isReplacing());
                    } catch (RemoteException re) {
                        Slog.d(TAG, "Callback failed ", re);
                    }
                }
                mListeners.finishBroadcast();

                super.onPackagesAvailable(packages);
!!!33240631.java!!!	onPackagesUnavailable(inout packages : String) : void
                UserHandle user = new UserHandle(getChangingUserId());
                final int n = mListeners.beginBroadcast();
                for (int i = 0; i < n; i++) {
                    IOnAppsChangedListener listener = mListeners.getBroadcastItem(i);
                    BroadcastCookie cookie = (BroadcastCookie) mListeners.getBroadcastCookie(i);
                    if (!isEnabledProfileOf(user, cookie.user, "onPackagesUnavailable")) continue;
                    try {
                        listener.onPackagesUnavailable(user, packages, isReplacing());
                    } catch (RemoteException re) {
                        Slog.d(TAG, "Callback failed ", re);
                    }
                }
                mListeners.finishBroadcast();

                super.onPackagesUnavailable(packages);
!!!33240759.java!!!	onPackagesSuspended(inout packages : String) : void
                UserHandle user = new UserHandle(getChangingUserId());
                final int n = mListeners.beginBroadcast();
                for (int i = 0; i < n; i++) {
                    IOnAppsChangedListener listener = mListeners.getBroadcastItem(i);
                    BroadcastCookie cookie = (BroadcastCookie) mListeners.getBroadcastCookie(i);
                    if (!isEnabledProfileOf(user, cookie.user, "onPackagesSuspended")) continue;
                    try {
                        listener.onPackagesSuspended(user, packages);
                    } catch (RemoteException re) {
                        Slog.d(TAG, "Callback failed ", re);
                    }
                }
                mListeners.finishBroadcast();

                super.onPackagesSuspended(packages);
!!!33240887.java!!!	onPackagesUnsuspended(inout packages : String) : void
                UserHandle user = new UserHandle(getChangingUserId());
                final int n = mListeners.beginBroadcast();
                for (int i = 0; i < n; i++) {
                    IOnAppsChangedListener listener = mListeners.getBroadcastItem(i);
                    BroadcastCookie cookie = (BroadcastCookie) mListeners.getBroadcastCookie(i);
                    if (!isEnabledProfileOf(user, cookie.user, "onPackagesUnsuspended")) continue;
                    try {
                        listener.onPackagesUnsuspended(user, packages);
                    } catch (RemoteException re) {
                        Slog.d(TAG, "Callback failed ", re);
                    }
                }
                mListeners.finishBroadcast();

                super.onPackagesUnsuspended(packages);
!!!33241015.java!!!	onShortcutChanged(inout packageName : String, in userId : int) : void
                if (!ShortcutService.FEATURE_ENABLED) {
                    return;
                }
                postToPackageMonitorHandler(() -> onShortcutChangedInner(packageName, userId));
!!!33241143.java!!!	onShortcutChangedInner(inout packageName : String, in userId : int) : void
                final UserHandle user = UserHandle.of(userId);

                final int n = mListeners.beginBroadcast();
                for (int i = 0; i < n; i++) {
                    IOnAppsChangedListener listener = mListeners.getBroadcastItem(i);
                    BroadcastCookie cookie = (BroadcastCookie) mListeners.getBroadcastCookie(i);
                    if (!isEnabledProfileOf(user, cookie.user, "onShortcutChanged")) continue;

                    final int launcherUserId = cookie.user.getIdentifier();

                    // Make sure the caller has the permission.
                    if (!mShortcutServiceInternal.hasShortcutHostPermission(
                            launcherUserId, cookie.packageName)) {
                        continue;
                    }
                    // Each launcher has a different set of pinned shortcuts, so we need to do a
                    // query in here.
                    // (As of now, only one launcher has the permission at a time, so it's bit
                    // moot, but we may change the permission model eventually.)
                    final List<ShortcutInfo> list =
                            mShortcutServiceInternal.getShortcuts(launcherUserId,
                                    cookie.packageName,
                                    /* changedSince= */ 0, packageName, /* shortcutIds=*/ null,
                                    /* component= */ null,
                                    ShortcutQuery.FLAG_GET_KEY_FIELDS_ONLY
                                    | ShortcutQuery.FLAG_GET_PINNED
                                    | ShortcutQuery.FLAG_GET_DYNAMIC
                                    , userId);
                    try {
                        listener.onShortcutChanged(user, packageName,
                                new ParceledListSlice<>(list));
                    } catch (RemoteException re) {
                        Slog.d(TAG, "Callback failed ", re);
                    }
                }
                mListeners.finishBroadcast();
