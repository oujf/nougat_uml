class ActivityOptions
!!!1684919.java!!!	makeCustomAnimation(inout context : Context, in enterResId : int, in exitResId : int) : ActivityOptions
        return makeCustomAnimation(context, enterResId, exitResId, null, null);
!!!1685047.java!!!	makeCustomAnimation(inout context : Context, in enterResId : int, in exitResId : int, inout handler : Handler, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = context.getPackageName();
        opts.mAnimationType = ANIM_CUSTOM;
        opts.mCustomEnterResId = enterResId;
        opts.mCustomExitResId = exitResId;
        opts.setOnAnimationStartedListener(handler, listener);
        return opts;
!!!1685175.java!!!	makeCustomInPlaceAnimation(inout context : Context, in animId : int) : ActivityOptions
        if (animId == 0) {
            throw new RuntimeException("You must specify a valid animation.");
        }

        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = context.getPackageName();
        opts.mAnimationType = ANIM_CUSTOM_IN_PLACE;
        opts.mCustomInPlaceResId = animId;
        return opts;
!!!1685303.java!!!	setOnAnimationStartedListener(in handler : Handler, in listener : ActivityOptions::OnAnimationStartedListener) : void
        if (listener != null) {
            mAnimationStartedListener = new IRemoteCallback.Stub() {
                @Override
                public void sendResult(Bundle data) throws RemoteException {
                    handler.post(new Runnable() {
                        @Override public void run() {
                            listener.onAnimationStarted();
                        }
                    });
                }
            };
        }
!!!1685559.java!!!	setOnAnimationFinishedListener(in handler : Handler, in listener : ActivityOptions::OnAnimationFinishedListener) : void
        if (listener != null) {
            mAnimationFinishedListener = new IRemoteCallback.Stub() {
                @Override
                public void sendResult(Bundle data) throws RemoteException {
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            listener.onAnimationFinished();
                        }
                    });
                }
            };
        }
!!!1685815.java!!!	makeScaleUpAnimation(inout source : View, in startX : int, in startY : int, in width : int, in height : int) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = ANIM_SCALE_UP;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.mWidth = width;
        opts.mHeight = height;
        return opts;
!!!1685943.java!!!	makeClipRevealAnimation(inout source : View, in startX : int, in startY : int, in width : int, in height : int) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mAnimationType = ANIM_CLIP_REVEAL;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.mWidth = width;
        opts.mHeight = height;
        return opts;
!!!1686071.java!!!	makeThumbnailScaleUpAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int) : ActivityOptions
        return makeThumbnailScaleUpAnimation(source, thumbnail, startX, startY, null);
!!!1686199.java!!!	makeThumbnailScaleUpAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        return makeThumbnailAnimation(source, thumbnail, startX, startY, listener, true);
!!!1686327.java!!!	makeThumbnailScaleDownAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        return makeThumbnailAnimation(source, thumbnail, startX, startY, listener, false);
!!!1686455.java!!!	makeThumbnailAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, inout listener : ActivityOptions::OnAnimationStartedListener, inout scaleUp : boolean) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = scaleUp ? ANIM_THUMBNAIL_SCALE_UP : ANIM_THUMBNAIL_SCALE_DOWN;
        opts.mThumbnail = thumbnail;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.setOnAnimationStartedListener(source.getHandler(), listener);
        return opts;
!!!1686583.java!!!	makeThumbnailAspectScaleUpAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, in targetWidth : int, in targetHeight : int, inout handler : Handler, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        return makeAspectScaledThumbnailAnimation(source, thumbnail, startX, startY,
                targetWidth, targetHeight, handler, listener, true);
!!!1686711.java!!!	makeThumbnailAspectScaleDownAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, in targetWidth : int, in targetHeight : int, inout handler : Handler, inout listener : ActivityOptions::OnAnimationStartedListener) : ActivityOptions
        return makeAspectScaledThumbnailAnimation(source, thumbnail, startX, startY,
                targetWidth, targetHeight, handler, listener, false);
!!!1686839.java!!!	makeAspectScaledThumbnailAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, in targetWidth : int, in targetHeight : int, inout handler : Handler, inout listener : ActivityOptions::OnAnimationStartedListener, inout scaleUp : boolean) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = scaleUp ? ANIM_THUMBNAIL_ASPECT_SCALE_UP :
                ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
        opts.mThumbnail = thumbnail;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.mWidth = targetWidth;
        opts.mHeight = targetHeight;
        opts.setOnAnimationStartedListener(handler, listener);
        return opts;
!!!1686967.java!!!	makeThumbnailAspectScaleDownAnimation(inout source : View, inout specs : AppTransitionAnimationSpec, inout handler : Handler, inout onAnimationStartedListener : ActivityOptions::OnAnimationStartedListener, inout onAnimationFinishedListener : ActivityOptions::OnAnimationFinishedListener) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = ANIM_THUMBNAIL_ASPECT_SCALE_DOWN;
        opts.mAnimSpecs = specs;
        opts.setOnAnimationStartedListener(handler, onAnimationStartedListener);
        opts.setOnAnimationFinishedListener(handler, onAnimationFinishedListener);
        return opts;
!!!1687095.java!!!	makeSceneTransitionAnimation(inout activity : Activity, inout sharedElement : View, inout sharedElementName : String) : ActivityOptions
        return makeSceneTransitionAnimation(activity, Pair.create(sharedElement, sharedElementName));
!!!1687223.java!!!	makeSceneTransitionAnimation(inout activity : Activity, inout sharedElements : Pair<View, String>...) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        if (!activity.getWindow().hasFeature(Window.FEATURE_ACTIVITY_TRANSITIONS)) {
            opts.mAnimationType = ANIM_DEFAULT;
            return opts;
        }
        opts.mAnimationType = ANIM_SCENE_TRANSITION;

        ArrayList<String> names = new ArrayList<String>();
        ArrayList<View> views = new ArrayList<View>();

        if (sharedElements != null) {
            for (int i = 0; i < sharedElements.length; i++) {
                Pair<View, String> sharedElement = sharedElements[i];
                String sharedElementName = sharedElement.second;
                if (sharedElementName == null) {
                    throw new IllegalArgumentException("Shared element name must not be null");
                }
                names.add(sharedElementName);
                View view = sharedElement.first;
                if (view == null) {
                    throw new IllegalArgumentException("Shared element must not be null");
                }
                views.add(sharedElement.first);
            }
        }

        ExitTransitionCoordinator exit = new ExitTransitionCoordinator(activity, names, names,
                views, false);
        opts.mTransitionReceiver = exit;
        opts.mSharedElementNames = names;
        opts.mIsReturning = false;
        opts.mExitCoordinatorIndex =
                activity.mActivityTransitionState.addExitTransitionCoordinator(exit);
        return opts;
!!!1687351.java!!!	makeSceneTransitionAnimation(inout activity : Activity, inout exitCoordinator : ExitTransitionCoordinator, inout sharedElementNames : ArrayList<String>, in resultCode : int, inout resultData : Intent) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mAnimationType = ANIM_SCENE_TRANSITION;
        opts.mSharedElementNames = sharedElementNames;
        opts.mTransitionReceiver = exitCoordinator;
        opts.mIsReturning = true;
        opts.mResultCode = resultCode;
        opts.mResultData = resultData;
        opts.mExitCoordinatorIndex =
                activity.mActivityTransitionState.addExitTransitionCoordinator(exitCoordinator);
        return opts;
!!!1687479.java!!!	makeTaskLaunchBehind() : ActivityOptions
        final ActivityOptions opts = new ActivityOptions();
        opts.mAnimationType = ANIM_LAUNCH_TASK_BEHIND;
        return opts;
!!!1687607.java!!!	makeBasic() : ActivityOptions
        final ActivityOptions opts = new ActivityOptions();
        return opts;
!!!1687735.java!!!	getLaunchTaskBehind() : boolean
        return mAnimationType == ANIM_LAUNCH_TASK_BEHIND;
!!!1687991.java!!!	ActivityOptions(inout opts : Bundle)
        // If the remote side sent us bad parcelables, they won't get the
        // results they want, which is their loss.
        opts.setDefusable(true);

        mPackageName = opts.getString(KEY_PACKAGE_NAME);
        try {
            mUsageTimeReport = opts.getParcelable(KEY_USAGE_TIME_REPORT);
        } catch (RuntimeException e) {
            Slog.w(TAG, e);
        }
        mLaunchBounds = opts.getParcelable(KEY_LAUNCH_BOUNDS);
        mAnimationType = opts.getInt(KEY_ANIM_TYPE);
        switch (mAnimationType) {
            case ANIM_CUSTOM:
                mCustomEnterResId = opts.getInt(KEY_ANIM_ENTER_RES_ID, 0);
                mCustomExitResId = opts.getInt(KEY_ANIM_EXIT_RES_ID, 0);
                mAnimationStartedListener = IRemoteCallback.Stub.asInterface(
                        opts.getBinder(KEY_ANIM_START_LISTENER));
                break;

            case ANIM_CUSTOM_IN_PLACE:
                mCustomInPlaceResId = opts.getInt(KEY_ANIM_IN_PLACE_RES_ID, 0);
                break;

            case ANIM_SCALE_UP:
            case ANIM_CLIP_REVEAL:
                mStartX = opts.getInt(KEY_ANIM_START_X, 0);
                mStartY = opts.getInt(KEY_ANIM_START_Y, 0);
                mWidth = opts.getInt(KEY_ANIM_WIDTH, 0);
                mHeight = opts.getInt(KEY_ANIM_HEIGHT, 0);
                break;

            case ANIM_THUMBNAIL_SCALE_UP:
            case ANIM_THUMBNAIL_SCALE_DOWN:
            case ANIM_THUMBNAIL_ASPECT_SCALE_UP:
            case ANIM_THUMBNAIL_ASPECT_SCALE_DOWN:
                mThumbnail = (Bitmap) opts.getParcelable(KEY_ANIM_THUMBNAIL);
                mStartX = opts.getInt(KEY_ANIM_START_X, 0);
                mStartY = opts.getInt(KEY_ANIM_START_Y, 0);
                mWidth = opts.getInt(KEY_ANIM_WIDTH, 0);
                mHeight = opts.getInt(KEY_ANIM_HEIGHT, 0);
                mAnimationStartedListener = IRemoteCallback.Stub.asInterface(
                        opts.getBinder(KEY_ANIM_START_LISTENER));
                break;

            case ANIM_SCENE_TRANSITION:
                mTransitionReceiver = opts.getParcelable(KEY_TRANSITION_COMPLETE_LISTENER);
                mIsReturning = opts.getBoolean(KEY_TRANSITION_IS_RETURNING, false);
                mSharedElementNames = opts.getStringArrayList(KEY_TRANSITION_SHARED_ELEMENTS);
                mResultData = opts.getParcelable(KEY_RESULT_DATA);
                mResultCode = opts.getInt(KEY_RESULT_CODE);
                mExitCoordinatorIndex = opts.getInt(KEY_EXIT_COORDINATOR_INDEX);
                break;
        }
        mLaunchStackId = opts.getInt(KEY_LAUNCH_STACK_ID, INVALID_STACK_ID);
        mLaunchTaskId = opts.getInt(KEY_LAUNCH_TASK_ID, -1);
        mTaskOverlay = opts.getBoolean(KEY_TASK_OVERLAY, false);
        mDockCreateMode = opts.getInt(KEY_DOCK_CREATE_MODE, DOCKED_STACK_CREATE_MODE_TOP_OR_LEFT);
        if (opts.containsKey(KEY_ANIM_SPECS)) {
            Parcelable[] specs = opts.getParcelableArray(KEY_ANIM_SPECS);
            mAnimSpecs = new AppTransitionAnimationSpec[specs.length];
            for (int i = specs.length - 1; i >= 0; i--) {
                mAnimSpecs[i] = (AppTransitionAnimationSpec) specs[i];
            }
        }
        if (opts.containsKey(KEY_ANIMATION_FINISHED_LISTENER)) {
            mAnimationFinishedListener = IRemoteCallback.Stub.asInterface(
                    opts.getBinder(KEY_ANIMATION_FINISHED_LISTENER));
        }
!!!1688119.java!!!	setLaunchBounds(inout screenSpacePixelRect : Rect) : ActivityOptions
        mLaunchBounds = screenSpacePixelRect != null ? new Rect(screenSpacePixelRect) : null;
        return this;
!!!1688247.java!!!	getPackageName() : String
        return mPackageName;
!!!1688375.java!!!	getLaunchBounds() : Rect
        return mLaunchBounds;
!!!1688503.java!!!	getAnimationType() : int
        return mAnimationType;
!!!1688631.java!!!	getCustomEnterResId() : int
        return mCustomEnterResId;
!!!1688759.java!!!	getCustomExitResId() : int
        return mCustomExitResId;
!!!1688887.java!!!	getCustomInPlaceResId() : int
        return mCustomInPlaceResId;
!!!1689015.java!!!	getThumbnail() : Bitmap
        return mThumbnail;
!!!1689143.java!!!	getStartX() : int
        return mStartX;
!!!1689271.java!!!	getStartY() : int
        return mStartY;
!!!1689399.java!!!	getWidth() : int
        return mWidth;
!!!1689527.java!!!	getHeight() : int
        return mHeight;
!!!1689655.java!!!	getOnAnimationStartListener() : IRemoteCallback
        return mAnimationStartedListener;
!!!1689783.java!!!	getAnimationFinishedListener() : IRemoteCallback
        return mAnimationFinishedListener;
!!!1689911.java!!!	getExitCoordinatorKey() : int
 return mExitCoordinatorIndex;
!!!1690039.java!!!	abort() : void
        if (mAnimationStartedListener != null) {
            try {
                mAnimationStartedListener.sendResult(null);
            } catch (RemoteException e) {
            }
        }
!!!1690167.java!!!	isReturning() : boolean
        return mIsReturning;
!!!1690295.java!!!	getSharedElementNames() : String
        return mSharedElementNames;
!!!1690423.java!!!	getResultReceiver() : ResultReceiver
 return mTransitionReceiver;
!!!1690551.java!!!	getResultCode() : int
 return mResultCode;
!!!1690679.java!!!	getResultData() : Intent
 return mResultData;
!!!1690807.java!!!	getUsageTimeReport() : PendingIntent
        return mUsageTimeReport;
!!!1690935.java!!!	getAnimSpecs() : AppTransitionAnimationSpec
 return mAnimSpecs;
!!!1691063.java!!!	fromBundle(inout bOptions : Bundle) : ActivityOptions
        return bOptions != null ? new ActivityOptions(bOptions) : null;
!!!1691191.java!!!	abort(inout options : ActivityOptions) : void
        if (options != null) {
            options.abort();
        }
!!!1691319.java!!!	getLaunchStackId() : int
        return mLaunchStackId;
!!!1691447.java!!!	setLaunchStackId(in launchStackId : int) : void
        mLaunchStackId = launchStackId;
!!!1691575.java!!!	setLaunchTaskId(in taskId : int) : void
        mLaunchTaskId = taskId;
!!!1691703.java!!!	getLaunchTaskId() : int
        return mLaunchTaskId;
!!!1691831.java!!!	setTaskOverlay(inout taskOverlay : boolean) : void
        mTaskOverlay = taskOverlay;
!!!1691959.java!!!	getTaskOverlay() : boolean
        return mTaskOverlay;
!!!1692087.java!!!	getDockCreateMode() : int
        return mDockCreateMode;
!!!1692215.java!!!	setDockCreateMode(in dockCreateMode : int) : void
        mDockCreateMode = dockCreateMode;
!!!1692343.java!!!	update(inout otherOptions : ActivityOptions) : void
        if (otherOptions.mPackageName != null) {
            mPackageName = otherOptions.mPackageName;
        }
        mUsageTimeReport = otherOptions.mUsageTimeReport;
        mTransitionReceiver = null;
        mSharedElementNames = null;
        mIsReturning = false;
        mResultData = null;
        mResultCode = 0;
        mExitCoordinatorIndex = 0;
        mAnimationType = otherOptions.mAnimationType;
        switch (otherOptions.mAnimationType) {
            case ANIM_CUSTOM:
                mCustomEnterResId = otherOptions.mCustomEnterResId;
                mCustomExitResId = otherOptions.mCustomExitResId;
                mThumbnail = null;
                if (mAnimationStartedListener != null) {
                    try {
                        mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = otherOptions.mAnimationStartedListener;
                break;
            case ANIM_CUSTOM_IN_PLACE:
                mCustomInPlaceResId = otherOptions.mCustomInPlaceResId;
                break;
            case ANIM_SCALE_UP:
                mStartX = otherOptions.mStartX;
                mStartY = otherOptions.mStartY;
                mWidth = otherOptions.mWidth;
                mHeight = otherOptions.mHeight;
                if (mAnimationStartedListener != null) {
                    try {
                        mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = null;
                break;
            case ANIM_THUMBNAIL_SCALE_UP:
            case ANIM_THUMBNAIL_SCALE_DOWN:
            case ANIM_THUMBNAIL_ASPECT_SCALE_UP:
            case ANIM_THUMBNAIL_ASPECT_SCALE_DOWN:
                mThumbnail = otherOptions.mThumbnail;
                mStartX = otherOptions.mStartX;
                mStartY = otherOptions.mStartY;
                mWidth = otherOptions.mWidth;
                mHeight = otherOptions.mHeight;
                if (mAnimationStartedListener != null) {
                    try {
                        mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = otherOptions.mAnimationStartedListener;
                break;
            case ANIM_SCENE_TRANSITION:
                mTransitionReceiver = otherOptions.mTransitionReceiver;
                mSharedElementNames = otherOptions.mSharedElementNames;
                mIsReturning = otherOptions.mIsReturning;
                mThumbnail = null;
                mAnimationStartedListener = null;
                mResultData = otherOptions.mResultData;
                mResultCode = otherOptions.mResultCode;
                mExitCoordinatorIndex = otherOptions.mExitCoordinatorIndex;
                break;
        }
        mAnimSpecs = otherOptions.mAnimSpecs;
        mAnimationFinishedListener = otherOptions.mAnimationFinishedListener;
!!!1692471.java!!!	toBundle() : Bundle
        if (mAnimationType == ANIM_DEFAULT) {
            return null;
        }
        Bundle b = new Bundle();
        if (mPackageName != null) {
            b.putString(KEY_PACKAGE_NAME, mPackageName);
        }
        if (mLaunchBounds != null) {
            b.putParcelable(KEY_LAUNCH_BOUNDS, mLaunchBounds);
        }
        b.putInt(KEY_ANIM_TYPE, mAnimationType);
        if (mUsageTimeReport != null) {
            b.putParcelable(KEY_USAGE_TIME_REPORT, mUsageTimeReport);
        }
        switch (mAnimationType) {
            case ANIM_CUSTOM:
                b.putInt(KEY_ANIM_ENTER_RES_ID, mCustomEnterResId);
                b.putInt(KEY_ANIM_EXIT_RES_ID, mCustomExitResId);
                b.putBinder(KEY_ANIM_START_LISTENER, mAnimationStartedListener
                        != null ? mAnimationStartedListener.asBinder() : null);
                break;
            case ANIM_CUSTOM_IN_PLACE:
                b.putInt(KEY_ANIM_IN_PLACE_RES_ID, mCustomInPlaceResId);
                break;
            case ANIM_SCALE_UP:
            case ANIM_CLIP_REVEAL:
                b.putInt(KEY_ANIM_START_X, mStartX);
                b.putInt(KEY_ANIM_START_Y, mStartY);
                b.putInt(KEY_ANIM_WIDTH, mWidth);
                b.putInt(KEY_ANIM_HEIGHT, mHeight);
                break;
            case ANIM_THUMBNAIL_SCALE_UP:
            case ANIM_THUMBNAIL_SCALE_DOWN:
            case ANIM_THUMBNAIL_ASPECT_SCALE_UP:
            case ANIM_THUMBNAIL_ASPECT_SCALE_DOWN:
                b.putParcelable(KEY_ANIM_THUMBNAIL, mThumbnail);
                b.putInt(KEY_ANIM_START_X, mStartX);
                b.putInt(KEY_ANIM_START_Y, mStartY);
                b.putInt(KEY_ANIM_WIDTH, mWidth);
                b.putInt(KEY_ANIM_HEIGHT, mHeight);
                b.putBinder(KEY_ANIM_START_LISTENER, mAnimationStartedListener
                        != null ? mAnimationStartedListener.asBinder() : null);
                break;
            case ANIM_SCENE_TRANSITION:
                if (mTransitionReceiver != null) {
                    b.putParcelable(KEY_TRANSITION_COMPLETE_LISTENER, mTransitionReceiver);
                }
                b.putBoolean(KEY_TRANSITION_IS_RETURNING, mIsReturning);
                b.putStringArrayList(KEY_TRANSITION_SHARED_ELEMENTS, mSharedElementNames);
                b.putParcelable(KEY_RESULT_DATA, mResultData);
                b.putInt(KEY_RESULT_CODE, mResultCode);
                b.putInt(KEY_EXIT_COORDINATOR_INDEX, mExitCoordinatorIndex);
                break;
        }
        b.putInt(KEY_LAUNCH_STACK_ID, mLaunchStackId);
        b.putInt(KEY_LAUNCH_TASK_ID, mLaunchTaskId);
        b.putBoolean(KEY_TASK_OVERLAY, mTaskOverlay);
        b.putInt(KEY_DOCK_CREATE_MODE, mDockCreateMode);
        if (mAnimSpecs != null) {
            b.putParcelableArray(KEY_ANIM_SPECS, mAnimSpecs);
        }
        if (mAnimationFinishedListener != null) {
            b.putBinder(KEY_ANIMATION_FINISHED_LISTENER, mAnimationFinishedListener.asBinder());
        }

        return b;
!!!1692599.java!!!	requestUsageTimeReport(inout receiver : PendingIntent) : void
        mUsageTimeReport = receiver;
!!!1692727.java!!!	forTargetActivity() : ActivityOptions
        if (mAnimationType == ANIM_SCENE_TRANSITION) {
            final ActivityOptions result = new ActivityOptions();
            result.update(this);
            return result;
        }

        return null;
!!!1692855.java!!!	toString() : String
        return "ActivityOptions(" + hashCode() + "), mPackageName=" + mPackageName
                + ", mAnimationType=" + mAnimationType + ", mStartX=" + mStartX + ", mStartY="
                + mStartY + ", mWidth=" + mWidth + ", mHeight=" + mHeight;
