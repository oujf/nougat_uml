format 76
"admin" // nougat_src::frameworks::base::core::java::android::app::admin
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/base/core/java/android/app/admin/"
  java_package "android.app.admin"
  classview 154935 "admin"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 398263 "DeviceAdminInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is used to specify meta information of a device administrator
component."
      classrelation 901943 // <realization>
	relation 901943 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 901943 // <realization>
	  b parent class_ref 137399 // Parcelable
      end

      classrelation 902071 // TAG (<unidirectional association>)
	relation 902071 --->
	  a role_name "TAG" init_value " \"DeviceAdminInfo\"" class_relation const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 902071 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 894519 "USES_POLICY_DEVICE_OWNER"
	class_attribute const_attribute public explicit_type "int"
	init_value " -2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: device owner meta-policy
for an admin that is designated as owner of the device.

@hide
"
      end

      attribute 894647 "USES_POLICY_PROFILE_OWNER"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: profile owner meta-policy
for admins that have been installed as owner of some user profile.

@hide
"
      end

      attribute 894775 "USES_POLICY_LIMIT_PASSWORD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: limit the passwords
that the user can select, via {@link DevicePolicyManager#setPasswordQuality}
and {@link DevicePolicyManager#setPasswordMinimumLength}.

<p>To control this policy, the device admin must have a \"limit-password\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 894903 "USES_POLICY_WATCH_LOGIN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: able to watch login
attempts from the user, via {@link DeviceAdminReceiver#ACTION_PASSWORD_FAILED},
{@link DeviceAdminReceiver#ACTION_PASSWORD_SUCCEEDED}, and
{@link DevicePolicyManager#getCurrentFailedPasswordAttempts}.

<p>To control this policy, the device admin must have a \"watch-login\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 895031 "USES_POLICY_RESET_PASSWORD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: able to reset the
user's password via
{@link DevicePolicyManager#resetPassword}.

<p>To control this policy, the device admin must have a \"reset-password\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 895159 "USES_POLICY_FORCE_LOCK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: able to force the device
to lock via{@link DevicePolicyManager#lockNow} or limit the
maximum lock timeout for the device via
{@link DevicePolicyManager#setMaximumTimeToLock}.

<p>To control this policy, the device admin must have a \"force-lock\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 895287 "USES_POLICY_WIPE_DATA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: able to factory
reset the device, erasing all of the user's data, via
{@link DevicePolicyManager#wipeData}.

<p>To control this policy, the device admin must have a \"wipe-data\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 895415 "USES_POLICY_SETS_GLOBAL_PROXY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: able to specify the
device Global Proxy, via {@link DevicePolicyManager#setGlobalProxy}.

<p>To control this policy, the device admin must have a \"set-global-proxy\"
tag in the \"uses-policies\" section of its meta-data.
@hide
"
      end

      attribute 895543 "USES_POLICY_EXPIRE_PASSWORD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: force the user to
change their password after an administrator-defined time limit.

<p>To control this policy, the device admin must have an \"expire-password\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 895671 "USES_ENCRYPTED_STORAGE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: require encryption of stored data.

<p>To control this policy, the device admin must have a \"encrypted-storage\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 895799 "USES_POLICY_DISABLE_CAMERA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: disables use of all device cameras.

<p>To control this policy, the device admin must have a \"disable-camera\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      attribute 895927 "USES_POLICY_DISABLE_KEYGUARD_FEATURES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 9"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A type of policy that this device admin can use: disables use of keyguard features.

<p>To control this policy, the device admin must have a \"disable-keyguard-features\"
tag in the \"uses-policies\" section of its meta-data.
"
      end

      class 398391 "PolicyInfo"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 896055 "ident"
	  const_attribute public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 902199 // tag (<unidirectional association>)
	  relation 902199 --->
	    a role_name "tag" const_relation public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 902199 // tag (<unidirectional association>)
	    b parent class_ref 129591 // String
	end

	attribute 896183 "label"
	  const_attribute public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 896311 "description"
	  const_attribute public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 896439 "labelForSecondaryUsers"
	  const_attribute public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 896567 "descriptionForSecondaryUsers"
	  const_attribute public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 2342071 "PolicyInfo"
	  public explicit_return_type ""
	  nparams 4
	    param in name "ident" explicit_type "int"
	    param inout name "tag" type class_ref 129591 // String
	    param in name "label" explicit_type "int"
	    param in name "description" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2342199 "PolicyInfo"
	  public explicit_return_type ""
	  nparams 6
	    param in name "ident" explicit_type "int"
	    param inout name "tag" type class_ref 129591 // String
	    param in name "label" explicit_type "int"
	    param in name "description" explicit_type "int"
	    param in name "labelForSecondaryUsers" explicit_type "int"
	    param in name "descriptionForSecondaryUsers" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 902327 // sPoliciesDisplayOrder (<unidirectional association>)
	relation 902327 --->
	  stereotype "ArrayList"
	  a role_name "sPoliciesDisplayOrder" init_value " new ArrayList<PolicyInfo>()" class_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 902327 // sPoliciesDisplayOrder (<unidirectional association>)
	  b parent class_ref 398391 // PolicyInfo
      end

      classrelation 902455 // sKnownPolicies (<unidirectional association>)
	relation 902455 --->
	  stereotype "HashMap"
	  a role_name "sKnownPolicies" init_value " new HashMap<String, Integer>()" class_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Integer> ${name}${value};
"
	    classrelation_ref 902455 // sKnownPolicies (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 902583 // sRevKnownPolicies (<unidirectional association>)
	relation 902583 --->
	  a role_name "sRevKnownPolicies" init_value " new SparseArray<PolicyInfo>()" class_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<PolicyInfo> ${name}${value};
"
	    classrelation_ref 902583 // sRevKnownPolicies (<unidirectional association>)
	  b parent class_ref 139575 // SparseArray
      end

      extra_member 130487 "initialization"
	
	cpp "" ""
	java "  static {
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_WIPE_DATA, \"wipe-data\",
                com.android.internal.R.string.policylab_wipeData,
                com.android.internal.R.string.policydesc_wipeData,
                com.android.internal.R.string.policylab_wipeData_secondaryUser,
                com.android.internal.R.string.policydesc_wipeData_secondaryUser
                ));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_RESET_PASSWORD, \"reset-password\",
                com.android.internal.R.string.policylab_resetPassword,
                com.android.internal.R.string.policydesc_resetPassword));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_LIMIT_PASSWORD, \"limit-password\",
                com.android.internal.R.string.policylab_limitPassword,
                com.android.internal.R.string.policydesc_limitPassword));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_WATCH_LOGIN, \"watch-login\",
                com.android.internal.R.string.policylab_watchLogin,
                com.android.internal.R.string.policydesc_watchLogin,
                com.android.internal.R.string.policylab_watchLogin,
                com.android.internal.R.string.policydesc_watchLogin_secondaryUser
        ));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_FORCE_LOCK, \"force-lock\",
                com.android.internal.R.string.policylab_forceLock,
                com.android.internal.R.string.policydesc_forceLock));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_SETS_GLOBAL_PROXY, \"set-global-proxy\",
                com.android.internal.R.string.policylab_setGlobalProxy,
                com.android.internal.R.string.policydesc_setGlobalProxy));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_EXPIRE_PASSWORD, \"expire-password\",
                com.android.internal.R.string.policylab_expirePassword,
                com.android.internal.R.string.policydesc_expirePassword));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_ENCRYPTED_STORAGE, \"encrypted-storage\",
                com.android.internal.R.string.policylab_encryptedStorage,
                com.android.internal.R.string.policydesc_encryptedStorage));
        sPoliciesDisplayOrder.add(new PolicyInfo(USES_POLICY_DISABLE_CAMERA, \"disable-camera\",
                com.android.internal.R.string.policylab_disableCamera,
                com.android.internal.R.string.policydesc_disableCamera));
        sPoliciesDisplayOrder.add(new PolicyInfo(
                USES_POLICY_DISABLE_KEYGUARD_FEATURES, \"disable-keyguard-features\",
                com.android.internal.R.string.policylab_disableKeyguardFeatures,
                com.android.internal.R.string.policydesc_disableKeyguardFeatures));

        for (int i=0; i<sPoliciesDisplayOrder.size(); i++) {
            PolicyInfo pi = sPoliciesDisplayOrder.get(i);
            sRevKnownPolicies.put(pi.ident, pi);
            sKnownPolicies.put(pi.tag, pi.ident);
        }
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 902711 // mActivityInfo (<unidirectional association>)
	relation 902711 --->
	  a role_name "mActivityInfo" const_relation package
	    comment "
The BroadcastReceiver that implements this device admin component.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 902711 // mActivityInfo (<unidirectional association>)
	  b parent class_ref 155575 // ActivityInfo
      end

      attribute 896695 "mVisible"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Whether this should be visible to the user.
"
      end

      attribute 896823 "mUsesPolicies"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The policies this administrator needs access to.
"
      end

      operation 2342327 "DeviceAdminInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "resolveInfo" type class_ref 306231 // ResolveInfo
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param context The Context in which we are parsing the device admin.
@param resolveInfo The ResolveInfo returned from the package manager about
this device admin's component."
      end

      operation 2342455 "DeviceAdminInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "activityInfo" type class_ref 155575 // ActivityInfo
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param context The Context in which we are parsing the device admin.
@param activityInfo The ActivityInfo returned from the package manager about
this device admin's component.

@hide"
      end

      operation 2342583 "DeviceAdminInfo"
	package explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 137527 // Parcel
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2342711 "getPackageName"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the .apk package that implements this device admin."
      end

      operation 2342839 "getReceiverName"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the class name of the receiver component that implements
this device admin."
      end

      operation 2342967 "getActivityInfo"
	public return_type class_ref 155575 // ActivityInfo
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the raw information about the receiver implementing this
device admin.  Do not modify the returned object."
      end

      operation 2343095 "getComponent"
	public return_type class_ref 132279 // ComponentName
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	
	comment "Return the component of the receiver that implements this device admin."
      end

      operation 2343223 "loadLabel"
	public explicit_return_type "CharSequence"
	nparams 1
	  param inout name "pm" type class_ref 129079 // PackageManager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the user-displayed label for this device admin.

@param pm Supply a PackageManager used to load the device admin's
resources."
      end

      operation 2343351 "loadDescription"
	public explicit_return_type "CharSequence"
	nparams 1
	  param inout name "pm" type class_ref 129079 // PackageManager
	nexceptions 1
	  exception class_ref 130231 // NotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load user-visible description associated with this device admin.

@param pm Supply a PackageManager used to load the device admin's
resources."
      end

      operation 2343479 "loadIcon"
	public return_type class_ref 129719 // Drawable
	nparams 1
	  param inout name "pm" type class_ref 129079 // PackageManager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the user-displayed icon for this device admin.

@param pm Supply a PackageManager used to load the device admin's
resources."
      end

      operation 2343607 "isVisible"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this device admin would like to be visible to the
user, even when it is not enabled."
      end

      operation 2343735 "usesPolicy"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "policyIdent" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the device admin has requested that it be able to use
the given policy control.  The possible policy identifier inputs are:
{@link #USES_POLICY_LIMIT_PASSWORD}, {@link #USES_POLICY_WATCH_LOGIN},
{@link #USES_POLICY_RESET_PASSWORD}, {@link #USES_POLICY_FORCE_LOCK},
{@link #USES_POLICY_WIPE_DATA},
{@link #USES_POLICY_EXPIRE_PASSWORD}, {@link #USES_ENCRYPTED_STORAGE},
{@link #USES_POLICY_DISABLE_CAMERA}."
      end

      operation 2343863 "getTagForPolicy"
	public return_type class_ref 129591 // String
	nparams 1
	  param in name "policyIdent" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the XML tag name for the given policy identifier.  Valid identifiers
are as per {@link #usesPolicy(int)}.  If the given identifier is not
known, null is returned."
      end

      operation 2343991 "getUsedPolicies"
	public return_type class_ref 398391 // PolicyInfo
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 2344119 "writePoliciesToXml"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "XmlSerializer"
	nexceptions 3
	  explicit_exception "IllegalArgumentException"
	  explicit_exception "IllegalStateException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 2344247 "readPoliciesFromXml"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parser" explicit_type "XmlPullParser"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 2344375 "dump"
	public explicit_return_type "void"
	nparams 2
	  param inout name "pw" type class_ref 287415 // Printer
	  param inout name "prefix" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2344503 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2344631 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 137527 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 902839 // CREATOR (<unidirectional association>)
	relation 902839 --->
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<DeviceAdminInfo>() {
        public DeviceAdminInfo createFromParcel(Parcel source) {
            return new DeviceAdminInfo(source);
        }

        public DeviceAdminInfo[] newArray(int size) {
            return new DeviceAdminInfo[size];
        }
    }" class_relation const_relation public
	    comment "
Used to make this class parcelable.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<DeviceAdminInfo> ${name}${value};
"
	    classrelation_ref 902839 // CREATOR (<unidirectional association>)
	  b parent class_ref 137655 // Creator
      end

      operation 2344759 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 398519 "DeviceAdminReceiver"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base class for implementing a device administration component.  This
class provides a convenience for interpreting the raw intent actions
that are sent by the system.

<p>The callback methods, like the base
{@link BroadcastReceiver#onReceive(Context, Intent) BroadcastReceiver.onReceive()}
method, happen on the main thread of the process.  Thus long running
operations must be done on another thread.  Note that because a receiver
is done once returning from its receive function, such long-running operations
should probably be done in a {@link Service}.

<p>When publishing your DeviceAdmin subclass as a receiver, it must
handle {@link #ACTION_DEVICE_ADMIN_ENABLED} and require the
{@link android.Manifest.permission#BIND_DEVICE_ADMIN} permission.  A typical
manifest entry would look like:</p>

{@sample development/samples/ApiDemos/AndroidManifest.xml device_admin_declaration}

<p>The meta-data referenced here provides addition information specific
to the device administrator, as parsed by the {@link DeviceAdminInfo} class.
A typical file would be:</p>

{@sample development/samples/ApiDemos/res/xml/device_admin_sample.xml meta_data}

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about device administration, read the
<a href=\"{@docRoot}guide/topics/admin/device-admin.html\">Device Administration</a>
developer guide.</p>
</div>"
      classrelation 902967 // <generalisation>
	relation 902967 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 902967 // <generalisation>
	  b parent class_ref 131895 // BroadcastReceiver
      end

      classrelation 903095 // TAG (<unidirectional association>)
	relation 903095 --->
	  a role_name "TAG" init_value " \"DevicePolicy\"" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 903095 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 896951 "localLOGV"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 903223 // ACTION_DEVICE_ADMIN_ENABLED (<unidirectional association>)
	relation 903223 --->
	  a role_name "ACTION_DEVICE_ADMIN_ENABLED" init_value " \"android.app.action.DEVICE_ADMIN_ENABLED\"" class_relation const_relation public
	    comment "
This is the primary action that a device administrator must implement to be
allowed to manage a device.  This will be set to the receiver
when the user enables it for administration.  You will generally
handle this in {@link DeviceAdminReceiver#onEnabled(Context, Intent)}.  To be
supported, the receiver must also require the
{@link android.Manifest.permission#BIND_DEVICE_ADMIN} permission so
that other applications can not abuse it.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 903223 // ACTION_DEVICE_ADMIN_ENABLED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 903351 // ACTION_DEVICE_ADMIN_DISABLE_REQUESTED (<unidirectional association>)
	relation 903351 --->
	  a role_name "ACTION_DEVICE_ADMIN_DISABLE_REQUESTED" init_value " \"android.app.action.DEVICE_ADMIN_DISABLE_REQUESTED\"" class_relation const_relation public
	    comment "
Action sent to a device administrator when the user has requested to
disable it, but before this has actually been done.  This gives you
a chance to supply a message to the user about the impact of
disabling your admin, by setting the extra field
{@link #EXTRA_DISABLE_WARNING} in the result Intent.  If not set,
no warning will be displayed.  If set, the given text will be shown
to the user before they disable your admin.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 903351 // ACTION_DEVICE_ADMIN_DISABLE_REQUESTED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 903479 // EXTRA_DISABLE_WARNING (<unidirectional association>)
	relation 903479 --->
	  a role_name "EXTRA_DISABLE_WARNING" init_value " \"android.app.extra.DISABLE_WARNING\"" class_relation const_relation public
	    comment "
A CharSequence that can be shown to the user informing them of the
impact of disabling your admin.

@see #ACTION_DEVICE_ADMIN_DISABLE_REQUESTED

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 903479 // EXTRA_DISABLE_WARNING (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 903607 // ACTION_DEVICE_ADMIN_DISABLED (<unidirectional association>)
	relation 903607 --->
	  a role_name "ACTION_DEVICE_ADMIN_DISABLED" init_value " \"android.app.action.DEVICE_ADMIN_DISABLED\"" class_relation const_relation public
	    comment "
Action sent to a device administrator when the user has disabled
it.  Upon return, the application no longer has access to the
protected device policy manager APIs.  You will generally
handle this in {@link DeviceAdminReceiver#onDisabled(Context, Intent)}.  Note
that this action will be
sent the receiver regardless of whether it is explicitly listed in
its intent filter.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 903607 // ACTION_DEVICE_ADMIN_DISABLED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 903735 // ACTION_PASSWORD_CHANGED (<unidirectional association>)
	relation 903735 --->
	  a role_name "ACTION_PASSWORD_CHANGED" init_value " \"android.app.action.ACTION_PASSWORD_CHANGED\"" class_relation const_relation public
	    comment "
Action sent to a device administrator when the user has changed the password of their device
or profile challenge.  You can at this point check the characteristics
of the new password with {@link DevicePolicyManager#isActivePasswordSufficient()
DevicePolicyManager.isActivePasswordSufficient()}.
You will generally
handle this in {@link DeviceAdminReceiver#onPasswordChanged}.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to receive
this broadcast.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 903735 // ACTION_PASSWORD_CHANGED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 903863 // ACTION_PASSWORD_FAILED (<unidirectional association>)
	relation 903863 --->
	  a role_name "ACTION_PASSWORD_FAILED" init_value " \"android.app.action.ACTION_PASSWORD_FAILED\"" class_relation const_relation public
	    comment "
Action sent to a device administrator when the user has entered an incorrect device
or profile challenge password.  You can at this point check the
number of failed password attempts there have been with
{@link DevicePolicyManager#getCurrentFailedPasswordAttempts
DevicePolicyManager.getCurrentFailedPasswordAttempts()}.  You will generally
handle this in {@link DeviceAdminReceiver#onPasswordFailed}.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} to receive
this broadcast.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 903863 // ACTION_PASSWORD_FAILED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 903991 // ACTION_PASSWORD_SUCCEEDED (<unidirectional association>)
	relation 903991 --->
	  a role_name "ACTION_PASSWORD_SUCCEEDED" init_value " \"android.app.action.ACTION_PASSWORD_SUCCEEDED\"" class_relation const_relation public
	    comment "
Action sent to a device administrator when the user has successfully entered their device
or profile challenge password, after failing one or more times.  You will generally
handle this in {@link DeviceAdminReceiver#onPasswordSucceeded}.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} to receive
this broadcast.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 903991 // ACTION_PASSWORD_SUCCEEDED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 904119 // ACTION_PASSWORD_EXPIRING (<unidirectional association>)
	relation 904119 --->
	  a role_name "ACTION_PASSWORD_EXPIRING" init_value " \"android.app.action.ACTION_PASSWORD_EXPIRING\"" class_relation const_relation public
	    comment "
Action periodically sent to a device administrator when the device or profile challenge
password is expiring.  You will generally
handle this in {@link DeviceAdminReceiver#onPasswordExpiring}.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_EXPIRE_PASSWORD} to receive
this broadcast.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 904119 // ACTION_PASSWORD_EXPIRING (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 904247 // ACTION_LOCK_TASK_ENTERING (<unidirectional association>)
	relation 904247 --->
	  a role_name "ACTION_LOCK_TASK_ENTERING" init_value " \"android.app.action.LOCK_TASK_ENTERING\"" class_relation const_relation public
	    comment "
Action sent to a device administrator to notify that the device is entering
lock task mode.  The extra {@link #EXTRA_LOCK_TASK_PACKAGE}
will describe the package using lock task mode.

<p>The calling device admin must be the device owner or profile
owner to receive this broadcast.

@see DevicePolicyManager#isLockTaskPermitted(String)

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 904247 // ACTION_LOCK_TASK_ENTERING (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 904375 // ACTION_LOCK_TASK_EXITING (<unidirectional association>)
	relation 904375 --->
	  a role_name "ACTION_LOCK_TASK_EXITING" init_value " \"android.app.action.LOCK_TASK_EXITING\"" class_relation const_relation public
	    comment "
Action sent to a device administrator to notify that the device is exiting
lock task mode.

<p>The calling device admin must be the device owner or profile
owner to receive this broadcast.

@see DevicePolicyManager#isLockTaskPermitted(String)

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 904375 // ACTION_LOCK_TASK_EXITING (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 904503 // EXTRA_LOCK_TASK_PACKAGE (<unidirectional association>)
	relation 904503 --->
	  a role_name "EXTRA_LOCK_TASK_PACKAGE" init_value "
            \"android.app.extra.LOCK_TASK_PACKAGE\"" class_relation const_relation public
	    comment "
A string containing the name of the package entering lock task mode.

@see #ACTION_LOCK_TASK_ENTERING

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 904503 // EXTRA_LOCK_TASK_PACKAGE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 904631 // ACTION_PROFILE_PROVISIONING_COMPLETE (<unidirectional association>)
	relation 904631 --->
	  a role_name "ACTION_PROFILE_PROVISIONING_COMPLETE" init_value "
            \"android.app.action.PROFILE_PROVISIONING_COMPLETE\"" class_relation const_relation public
	    comment "
Broadcast Action: This broadcast is sent to indicate that provisioning of a managed profile
or managed device has completed successfully.

<p>The broadcast is limited to the profile that will be managed by the application that
requested provisioning. In the device owner case the profile is the primary user.
The broadcast will also be limited to the {@link DeviceAdminReceiver} component
specified in the original intent or NFC bump that started the provisioning process
(see {@link DevicePolicyManager#ACTION_PROVISION_MANAGED_PROFILE
DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE}).

<p>A device admin application which listens to this intent can find out if the device was
provisioned for the device owner or profile owner case by calling respectively
{@link android.app.admin.DevicePolicyManager#isDeviceOwnerApp} and
{@link android.app.admin.DevicePolicyManager#isProfileOwnerApp}. You will generally handle
this in {@link DeviceAdminReceiver#onProfileProvisioningComplete}.

<p>Input: Nothing.</p>
<p>Output: Nothing</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 904631 // ACTION_PROFILE_PROVISIONING_COMPLETE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 904759 // ACTION_BUGREPORT_SHARING_DECLINED (<unidirectional association>)
	relation 904759 --->
	  a role_name "ACTION_BUGREPORT_SHARING_DECLINED" init_value "
            \"android.app.action.BUGREPORT_SHARING_DECLINED\"" class_relation const_relation public
	    comment "
Action sent to a device administrator to notify that the device user
has declined sharing a bugreport.

<p>The calling device admin must be the device owner to receive this broadcast.
@see DevicePolicyManager#requestBugreport
@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 904759 // ACTION_BUGREPORT_SHARING_DECLINED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 904887 // ACTION_BUGREPORT_FAILED (<unidirectional association>)
	relation 904887 --->
	  a role_name "ACTION_BUGREPORT_FAILED" init_value " \"android.app.action.BUGREPORT_FAILED\"" class_relation const_relation public
	    comment "
Action sent to a device administrator to notify that the collection of a bugreport
has failed.

<p>The calling device admin must be the device owner to receive this broadcast.
@see DevicePolicyManager#requestBugreport
@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 904887 // ACTION_BUGREPORT_FAILED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 905015 // ACTION_BUGREPORT_SHARE (<unidirectional association>)
	relation 905015 --->
	  a role_name "ACTION_BUGREPORT_SHARE" init_value "
            \"android.app.action.BUGREPORT_SHARE\"" class_relation const_relation public
	    comment "
Action sent to a device administrator to share the bugreport.

<p>The calling device admin must be the device owner to receive this broadcast.
@see DevicePolicyManager#requestBugreport
@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 905015 // ACTION_BUGREPORT_SHARE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 905143 // ACTION_SECURITY_LOGS_AVAILABLE (<unidirectional association>)
	relation 905143 --->
	  a role_name "ACTION_SECURITY_LOGS_AVAILABLE" init_value " \"android.app.action.SECURITY_LOGS_AVAILABLE\"" class_relation const_relation public
	    comment "
Broadcast action: notify that a new batch of security logs is ready to be collected.
@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 905143 // ACTION_SECURITY_LOGS_AVAILABLE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 905271 // EXTRA_BUGREPORT_HASH (<unidirectional association>)
	relation 905271 --->
	  a role_name "EXTRA_BUGREPORT_HASH" init_value " \"android.app.extra.BUGREPORT_HASH\"" class_relation const_relation public
	    comment "
A string containing the SHA-256 hash of the bugreport file.

@see #ACTION_BUGREPORT_SHARE
@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 905271 // EXTRA_BUGREPORT_HASH (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 905399 // EXTRA_BUGREPORT_FAILURE_REASON (<unidirectional association>)
	relation 905399 --->
	  a role_name "EXTRA_BUGREPORT_FAILURE_REASON" init_value "
            \"android.app.extra.BUGREPORT_FAILURE_REASON\"" class_relation const_relation public
	    comment "
An {@code int} failure code representing the reason of the bugreport failure. One of
{@link #BUGREPORT_FAILURE_FAILED_COMPLETING}
or {@link #BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE}

@see #ACTION_BUGREPORT_FAILED
@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 905399 // EXTRA_BUGREPORT_FAILURE_REASON (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      class 398647 "BugreportFailureCode"
	visibility public stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@Retention(RetentionPolicy.SOURCE)
@IntDef({
        BUGREPORT_FAILURE_FAILED_COMPLETING,
        BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE
    })
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 897079 "BUGREPORT_FAILURE_FAILED_COMPLETING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bugreport completion process failed.

<p>If this error code is received, the requesting of bugreport can be retried.
@see DevicePolicyManager#requestBugreport
"
      end

      attribute 897207 "BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bugreport has been created, but is no longer available for collection.

<p>This error likely occurs because the user of the device hasn't consented to share
the bugreport for a long period after its creation.

<p>If this error code is received, the requesting of bugreport can be retried.
@see DevicePolicyManager#requestBugreport
"
      end

      classrelation 905527 // ACTION_CHOOSE_PRIVATE_KEY_ALIAS (<unidirectional association>)
	relation 905527 --->
	  a role_name "ACTION_CHOOSE_PRIVATE_KEY_ALIAS" init_value " \"android.app.action.CHOOSE_PRIVATE_KEY_ALIAS\"" class_relation const_relation public
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 905527 // ACTION_CHOOSE_PRIVATE_KEY_ALIAS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 905655 // EXTRA_CHOOSE_PRIVATE_KEY_SENDER_UID (<unidirectional association>)
	relation 905655 --->
	  a role_name "EXTRA_CHOOSE_PRIVATE_KEY_SENDER_UID" init_value " \"android.app.extra.CHOOSE_PRIVATE_KEY_SENDER_UID\"" class_relation const_relation public
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 905655 // EXTRA_CHOOSE_PRIVATE_KEY_SENDER_UID (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 905783 // EXTRA_CHOOSE_PRIVATE_KEY_URI (<unidirectional association>)
	relation 905783 --->
	  a role_name "EXTRA_CHOOSE_PRIVATE_KEY_URI" init_value " \"android.app.extra.CHOOSE_PRIVATE_KEY_URI\"" class_relation const_relation public
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 905783 // EXTRA_CHOOSE_PRIVATE_KEY_URI (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 905911 // EXTRA_CHOOSE_PRIVATE_KEY_ALIAS (<unidirectional association>)
	relation 905911 --->
	  a role_name "EXTRA_CHOOSE_PRIVATE_KEY_ALIAS" init_value " \"android.app.extra.CHOOSE_PRIVATE_KEY_ALIAS\"" class_relation const_relation public
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 905911 // EXTRA_CHOOSE_PRIVATE_KEY_ALIAS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 906039 // EXTRA_CHOOSE_PRIVATE_KEY_RESPONSE (<unidirectional association>)
	relation 906039 --->
	  a role_name "EXTRA_CHOOSE_PRIVATE_KEY_RESPONSE" init_value " \"android.app.extra.CHOOSE_PRIVATE_KEY_RESPONSE\"" class_relation const_relation public
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 906039 // EXTRA_CHOOSE_PRIVATE_KEY_RESPONSE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 906167 // ACTION_NOTIFY_PENDING_SYSTEM_UPDATE (<unidirectional association>)
	relation 906167 --->
	  a role_name "ACTION_NOTIFY_PENDING_SYSTEM_UPDATE" init_value " \"android.app.action.NOTIFY_PENDING_SYSTEM_UPDATE\"" class_relation const_relation public
	    comment "
Broadcast action: notify device owner that there is a pending system update.
@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 906167 // ACTION_NOTIFY_PENDING_SYSTEM_UPDATE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 906295 // EXTRA_SYSTEM_UPDATE_RECEIVED_TIME (<unidirectional association>)
	relation 906295 --->
	  a role_name "EXTRA_SYSTEM_UPDATE_RECEIVED_TIME" init_value " \"android.app.extra.SYSTEM_UPDATE_RECEIVED_TIME\"" class_relation const_relation public
	    comment "
A long type extra for {@link #onSystemUpdatePending} recording the system time as given by
{@link System#currentTimeMillis()} when the current pending system update is first available.
@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 906295 // EXTRA_SYSTEM_UPDATE_RECEIVED_TIME (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 906423 // DEVICE_ADMIN_META_DATA (<unidirectional association>)
	relation 906423 --->
	  a role_name "DEVICE_ADMIN_META_DATA" init_value " \"android.app.device_admin\"" class_relation const_relation public
	    comment "
Name under which a DevicePolicy component publishes information
about itself.  This meta-data must reference an XML resource containing
a device-admin tag.

  TO DO: describe syntax.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 906423 // DEVICE_ADMIN_META_DATA (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 906551 // mManager (<unidirectional association>)
	relation 906551 --->
	  a role_name "mManager" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 906551 // mManager (<unidirectional association>)
	  b parent class_ref 398775 // DevicePolicyManager
      end

      classrelation 906679 // mWho (<unidirectional association>)
	relation 906679 --->
	  a role_name "mWho" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 906679 // mWho (<unidirectional association>)
	  b parent class_ref 132279 // ComponentName
      end

      operation 2344887 "getManager"
	public return_type class_ref 398775 // DevicePolicyManager
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the DevicePolicyManager interface for this administrator to work
with the system."
      end

      operation 2345015 "getWho"
	public return_type class_ref 132279 // ComponentName
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the ComponentName describing who this device administrator is, for
use in {@link DevicePolicyManager} APIs that require the administrator to
identify itself."
      end

      operation 2345143 "onEnabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called after the administrator is first enabled, as a result of
receiving {@link #ACTION_DEVICE_ADMIN_ENABLED}.  At this point you
can use {@link DevicePolicyManager} to set your desired policies.

<p> If the admin is activated by a device owner, then the intent
may contain private extras that are relevant to user setup.
{@see DevicePolicyManager#createAndManageUser(ComponentName, String, ComponentName,
     PersistableBundle, int)}

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 2345271 "onDisableRequested"
	public explicit_return_type "CharSequence"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the user has asked to disable the administrator, as a result of
receiving {@link #ACTION_DEVICE_ADMIN_DISABLE_REQUESTED}, giving you
a chance to present a warning message to them.  The message is returned
as the result; if null is returned (the default implementation), no
message will be displayed.
@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}.
@return Return the warning message to display to the user before
being disabled; if null is returned, no message is displayed."
      end

      operation 2345399 "onDisabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called prior to the administrator being disabled, as a result of
receiving {@link #ACTION_DEVICE_ADMIN_DISABLED}.  Upon return, you
can no longer use the protected parts of the {@link DevicePolicyManager}
API.
@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 2345527 "onPasswordChanged"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called after the user has changed their device or profile challenge password, as a result of
receiving {@link #ACTION_PASSWORD_CHANGED}.  At this point you
can use {@link DevicePolicyManager#getPasswordQuality(android.content.ComponentName)}
to retrieve the active password characteristics.
@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 2345655 "onPasswordFailed"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called after the user has failed at entering their device or profile challenge password,
as a result of receiving {@link #ACTION_PASSWORD_FAILED}.  At this point you can use
{@link DevicePolicyManager#getCurrentFailedPasswordAttempts()} to retrieve the number of
failed password attempts.
@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 2345783 "onPasswordSucceeded"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called after the user has succeeded at entering their device or profile challenge password,
as a result of receiving {@link #ACTION_PASSWORD_SUCCEEDED}.  This will
only be received the first time they succeed after having previously
failed.
@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 2345911 "onPasswordExpiring"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called periodically when the device or profile challenge password is about to expire
or has expired.  It will typically be called at these times: on device boot, once per day
before the password expires, and at the time when the password expires.

<p>If the password is not updated by the user, this method will continue to be called
once per day until the password is changed or the device admin disables password expiration.

<p>The admin will typically post a notification requesting the user to change their password
in response to this call. The actual password expiration time can be obtained by calling
{@link DevicePolicyManager#getPasswordExpiration(ComponentName) }

<p>The admin should be sure to take down any notifications it posted in response to this call
when it receives {@link DeviceAdminReceiver#onPasswordChanged(Context, Intent) }.

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 2346039 "onProfileProvisioningComplete"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when provisioning of a managed profile or managed device has completed successfully.

<p> As a prerequisite for the execution of this callback the {@link DeviceAdminReceiver} has
to declare an intent filter for {@link #ACTION_PROFILE_PROVISIONING_COMPLETE}.
Its component must also be specified in the {@link DevicePolicyManager#EXTRA_DEVICE_ADMIN}
of the {@link DevicePolicyManager#ACTION_PROVISION_MANAGED_PROFILE} intent that started the
managed provisioning.

<p>When provisioning of a managed profile is complete, the managed profile is hidden until
the profile owner calls {DevicePolicyManager#setProfileEnabled(ComponentName admin)}.
Typically a profile owner will enable the profile when it has finished any additional setup
such as adding an account by using the {@link AccountManager} and calling apis to bring the
profile into the desired state.

<p> Note that provisioning completes without waiting for any server interactions, so the
profile owner needs to wait for data to be available if required (e.g. android device ids or
other data that is set as a result of server interactions).

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 2346167 "onReadyForUserInitialization"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
@SystemApi
"
	
	
	
	comment "Called during provisioning of a managed device to allow the device initializer to perform
user setup steps.

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}.
@deprecated Do not use"
      end

      operation 2346295 "onLockTaskModeEntering"
	public explicit_return_type "void"
	nparams 3
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	  param inout name "pkg" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a device is entering lock task mode.

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}.
@param pkg If entering, the authorized package using lock task mode, otherwise null."
      end

      operation 2346423 "onLockTaskModeExiting"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a device is exiting lock task mode.

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}."
      end

      operation 2346551 "onChoosePrivateKeyAlias"
	public return_type class_ref 129591 // String
	nparams 5
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	  param in name "uid" explicit_type "int"
	  param inout name "uri" type class_ref 133047 // Uri
	  param inout name "alias" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows this receiver to select the alias for a private key and certificate pair for
authentication. If this method returns null, the default {@link android.app.Activity} will be
shown that lets the user pick a private key and certificate pair.

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}.
@param uid The uid asking for the private key and certificate pair.
@param uri The URI to authenticate, may be null.
@param alias The alias preselected by the client, or null.
@return The private key alias to return and grant access to.
@see KeyChain#choosePrivateKeyAlias"
      end

      operation 2346679 "onSystemUpdatePending"
	public explicit_return_type "void"
	nparams 3
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	  param in name "receivedTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows the receiver to be notified when information about a pending system update is
available from the system update service. The same pending system update can trigger multiple
calls to this method, so it is necessary to examine the incoming parameters for details about
the update.
<p>
This callback is only applicable to device owners.

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}.
@param receivedTime The time as given by {@link System#currentTimeMillis()} indicating when
       the current pending update was first available. -1 if no pending update is available."
      end

      operation 2346807 "onBugreportSharingDeclined"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when sharing a bugreport has been cancelled by the user of the device.

<p>This callback is only applicable to device owners.

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}.
@see DevicePolicyManager#requestBugreport"
      end

      operation 2346935 "onBugreportShared"
	public explicit_return_type "void"
	nparams 3
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	  param inout name "bugreportHash" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the bugreport has been shared with the device administrator app.

<p>This callback is only applicable to device owners.

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}. Contains the URI of
the bugreport file (with MIME type \"application/vnd.android.bugreport\"), that can be accessed
by calling {@link Intent#getData()}
@param bugreportHash SHA-256 hash of the bugreport file.
@see DevicePolicyManager#requestBugreport"
      end

      operation 2347063 "onBugreportFailed"
	public explicit_return_type "void"
	nparams 3
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	  param in name "failureCode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, @BugreportFailureCode ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the bugreport collection flow has failed.

<p>This callback is only applicable to device owners.

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}.
@param failureCode int containing failure code. One of
{@link #BUGREPORT_FAILURE_FAILED_COMPLETING}
or {@link #BUGREPORT_FAILURE_FILE_NO_LONGER_AVAILABLE}
@see DevicePolicyManager#requestBugreport"
      end

      operation 2347191 "onSecurityLogsAvailable"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a new batch of security logs can be retrieved.

<p>This callback is only applicable to device owners.

@param context The running context as per {@link #onReceive}.
@param intent The received intent as per {@link #onReceive}.
@see DevicePolicyManager#retrieveSecurityLogs(ComponentName)"
      end

      operation 2347319 "onReceive"
	public explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Intercept standard device administrator broadcasts.  Implementations
should not override this method; it is better to implement the
convenience callbacks for each action."
      end
    end

    class 398775 "DevicePolicyManager"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Public interface for managing policies enforced on a device. Most clients of this class must be
registered with the system as a <a href=\"{@docRoot}guide/topics/admin/device-admin.html\">device
administrator</a>. Additionally, a device administrator may be registered as either a profile or
device owner. A given method is accessible to all device administrators unless the documentation
for that method specifies that it is restricted to either device or profile owners. Any
application calling an api may only pass as an argument a device administrator component it
owns. Otherwise, a {@link SecurityException} will be thrown.
<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>
For more information about managing policies for device administration, read the <a href=
\"{@docRoot}guide/topics/admin/device-admin.html\">Device Administration</a> developer
guide. </div>"
      classrelation 906807 // TAG (<unidirectional association>)
	relation 906807 --->
	  a role_name "TAG" init_value " \"DevicePolicyManager\"" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 906807 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 906935 // mContext (<unidirectional association>)
	relation 906935 --->
	  a role_name "mContext" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 906935 // mContext (<unidirectional association>)
	  b parent class_ref 128567 // Context
      end

      attribute 897335 "mService"
	const_attribute private explicit_type "IDevicePolicyManager"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 897463 "mParentInstance"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 2347447 "DevicePolicyManager"
	private explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "parentInstance" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2347575 "DevicePolicyManager"
	protected explicit_return_type ""
	nparams 3
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "service" explicit_type "IDevicePolicyManager"
	  param inout name "parentInstance" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@VisibleForTesting
"
	
	
	
	comment " @hide "
      end

      operation 2347703 "create"
	class_operation public return_type class_ref 398775 // DevicePolicyManager
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 2347831 "myUserId"
	protected explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@VisibleForTesting
"
	
	
	
	comment " @hide test will override it. "
      end

      classrelation 907063 // ACTION_PROVISION_MANAGED_PROFILE (<unidirectional association>)
	relation 907063 --->
	  a role_name "ACTION_PROVISION_MANAGED_PROFILE" init_value " \"android.app.action.PROVISION_MANAGED_PROFILE\"" class_relation const_relation public
	    comment "
Activity action: Starts the provisioning flow which sets up a managed profile.

<p>A managed profile allows data separation for example for the usage of a
device as a personal and corporate device. The user which provisioning is started from and
the managed profile share a launcher.

<p>This intent will typically be sent by a mobile device management application (MDM).
Provisioning adds a managed profile and sets the MDM as the profile owner who has full
control over the profile.

<p>It is possible to check if provisioning is allowed or not by querying the method
{@link #isProvisioningAllowed(String)}.

<p>In version {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this intent must contain the
extra {@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME}.
As of {@link android.os.Build.VERSION_CODES#M}, it should contain the extra
{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME} instead, although specifying only
{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME} is still supported.

<p>The intent may also contain the following extras:
<ul>
<li>{@link #EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE}, optional </li>
<li>{@link #EXTRA_PROVISIONING_SKIP_ENCRYPTION}, optional, supported from
{@link android.os.Build.VERSION_CODES#N}</li>
<li>{@link #EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_LOGO_URI}, optional</li>
<li>{@link #EXTRA_PROVISIONING_MAIN_COLOR}, optional</li>
</ul>

<p>When managed provisioning has completed, broadcasts are sent to the application specified
in the provisioning intent. The
{@link DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE} broadcast is sent in the
managed profile and the {@link #ACTION_MANAGED_PROFILE_PROVISIONED} broadcast is sent in
the primary profile.

<p>If provisioning fails, the managedProfile is removed so the device returns to its
previous state.

<p>If launched with {@link android.app.Activity#startActivityForResult(Intent, int)} a
result code of {@link android.app.Activity#RESULT_OK} implies that the synchronous part of
the provisioning flow was successful, although this doesn't guarantee the full flow will
succeed. Conversely a result code of {@link android.app.Activity#RESULT_CANCELED} implies
that the user backed-out of provisioning, or some precondition for provisioning wasn't met.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 907063 // ACTION_PROVISION_MANAGED_PROFILE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 907191 // ACTION_PROVISION_MANAGED_USER (<unidirectional association>)
	relation 907191 --->
	  a role_name "ACTION_PROVISION_MANAGED_USER" init_value " \"android.app.action.PROVISION_MANAGED_USER\"" class_relation const_relation public
	    comment "
Activity action: Starts the provisioning flow which sets up a managed user.

<p>This intent will typically be sent by a mobile device management application (MDM).
Provisioning configures the user as managed user and sets the MDM as the profile
owner who has full control over the user. Provisioning can only happen before user setup has
been completed. Use {@link #isProvisioningAllowed(String)} to check if provisioning is
allowed.

<p>The intent contains the following extras:
<ul>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME}</li>
<li>{@link #EXTRA_PROVISIONING_SKIP_ENCRYPTION}, optional</li>
<li>{@link #EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_LOGO_URI}, optional</li>
<li>{@link #EXTRA_PROVISIONING_MAIN_COLOR}, optional</li>
</ul>

<p>If provisioning fails, the device returns to its previous state.

<p>If launched with {@link android.app.Activity#startActivityForResult(Intent, int)} a
result code of {@link android.app.Activity#RESULT_OK} implies that the synchronous part of
the provisioning flow was successful, although this doesn't guarantee the full flow will
succeed. Conversely a result code of {@link android.app.Activity#RESULT_CANCELED} implies
that the user backed-out of provisioning, or some precondition for provisioning wasn't met.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 907191 // ACTION_PROVISION_MANAGED_USER (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 907319 // ACTION_PROVISION_MANAGED_DEVICE (<unidirectional association>)
	relation 907319 --->
	  a role_name "ACTION_PROVISION_MANAGED_DEVICE" init_value " \"android.app.action.PROVISION_MANAGED_DEVICE\"" class_relation const_relation public
	    comment "
Activity action: Starts the provisioning flow which sets up a managed device.
Must be started with {@link android.app.Activity#startActivityForResult(Intent, int)}.

<p> During device owner provisioning a device admin app is set as the owner of the device.
A device owner has full control over the device. The device owner can not be modified by the
user.

<p> A typical use case would be a device that is owned by a company, but used by either an
employee or client.

<p> An intent with this action can be sent only on an unprovisioned device.
It is possible to check if provisioning is allowed or not by querying the method
{@link #isProvisioningAllowed(String)}.

<p>The intent contains the following extras:
<ul>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME}</li>
<li>{@link #EXTRA_PROVISIONING_SKIP_ENCRYPTION}, optional</li>
<li>{@link #EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED}, optional</li>
<li>{@link #EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_LOGO_URI}, optional</li>
<li>{@link #EXTRA_PROVISIONING_MAIN_COLOR}, optional</li>
</ul>

<p>When device owner provisioning has completed, an intent of the type
{@link DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE} is broadcast to the
device owner.

<p>If provisioning fails, the device is factory reset.

<p>A result code of {@link android.app.Activity#RESULT_OK} implies that the synchronous part
of the provisioning flow was successful, although this doesn't guarantee the full flow will
succeed. Conversely a result code of {@link android.app.Activity#RESULT_CANCELED} implies
that the user backed-out of provisioning, or some precondition for provisioning wasn't met.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 907319 // ACTION_PROVISION_MANAGED_DEVICE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 907447 // ACTION_PROVISION_MANAGED_DEVICE_FROM_TRUSTED_SOURCE (<unidirectional association>)
	relation 907447 --->
	  a role_name "ACTION_PROVISION_MANAGED_DEVICE_FROM_TRUSTED_SOURCE" init_value "
            \"android.app.action.PROVISION_MANAGED_DEVICE_FROM_TRUSTED_SOURCE\"" class_relation const_relation public
	    comment "
Activity action: Starts the provisioning flow which sets up a managed device.

<p>During device owner provisioning, a device admin app is downloaded and set as the owner of
the device. A device owner has full control over the device. The device owner can not be
modified by the user and the only way of resetting the device is via factory reset.

<p>A typical use case would be a device that is owned by a company, but used by either an
employee or client.

<p>The provisioning message should be sent to an unprovisioned device.

<p>Unlike {@link #ACTION_PROVISION_MANAGED_DEVICE}, the provisioning message can only be sent
by a privileged app with the permission
{@link android.Manifest.permission#DISPATCH_PROVISIONING_MESSAGE}.

<p>The provisioning intent contains the following properties:
<ul>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME}</li>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION}, optional</li>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER}, optional</li>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM}, optional</li>
<li>{@link #EXTRA_PROVISIONING_LOCAL_TIME} (convert to String), optional</li>
<li>{@link #EXTRA_PROVISIONING_TIME_ZONE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_LOCALE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_SSID}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_HIDDEN} (convert to String), optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_SECURITY_TYPE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PASSWORD}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PROXY_HOST}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PROXY_PORT} (convert to String), optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PROXY_BYPASS}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PAC_URL}, optional</li>
<li>{@link #EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE}, optional</li></ul>

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
@SystemApi
"
	    classrelation_ref 907447 // ACTION_PROVISION_MANAGED_DEVICE_FROM_TRUSTED_SOURCE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 907575 // ACTION_PROVISION_MANAGED_SHAREABLE_DEVICE (<unidirectional association>)
	relation 907575 --->
	  a role_name "ACTION_PROVISION_MANAGED_SHAREABLE_DEVICE" init_value " \"android.app.action.PROVISION_MANAGED_SHAREABLE_DEVICE\"" class_relation const_relation public
	    comment "
Activity action: Starts the provisioning flow which sets up a managed device.
Must be started with {@link android.app.Activity#startActivityForResult(Intent, int)}.

<p>NOTE: This is only supported on split system user devices, and puts the device into a
management state that is distinct from that reached by
{@link #ACTION_PROVISION_MANAGED_DEVICE} - specifically the device owner runs on the system
user, and only has control over device-wide policies, not individual users and their data.
The primary benefit is that multiple non-system users are supported when provisioning using
this form of device management.

<p>During device owner provisioning a device admin app is set as the owner of the device.
A device owner has full control over the device. The device owner can not be modified by the
user.

<p>A typical use case would be a device that is owned by a company, but used by either an
employee or client.

<p>An intent with this action can be sent only on an unprovisioned device.
It is possible to check if provisioning is allowed or not by querying the method
{@link #isProvisioningAllowed(String)}.

<p>The intent contains the following extras:
<ul>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME}</li>
<li>{@link #EXTRA_PROVISIONING_SKIP_ENCRYPTION}, optional</li>
<li>{@link #EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED}, optional</li>
<li>{@link #EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_LOGO_URI}, optional</li>
<li>{@link #EXTRA_PROVISIONING_MAIN_COLOR}, optional</li>
</ul>

<p>When device owner provisioning has completed, an intent of the type
{@link DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE} is broadcast to the
device owner.

<p>If provisioning fails, the device is factory reset.

<p>A result code of {@link android.app.Activity#RESULT_OK} implies that the synchronous part
of the provisioning flow was successful, although this doesn't guarantee the full flow will
succeed. Conversely a result code of {@link android.app.Activity#RESULT_CANCELED} implies
that the user backed-out of provisioning, or some precondition for provisioning wasn't met.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 907575 // ACTION_PROVISION_MANAGED_SHAREABLE_DEVICE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 907703 // ACTION_PROVISION_FINALIZATION (<unidirectional association>)
	relation 907703 --->
	  a role_name "ACTION_PROVISION_FINALIZATION" init_value " \"android.app.action.PROVISION_FINALIZATION\"" class_relation const_relation public
	    comment "
Activity action: Finalizes management provisioning, should be used after user-setup
has been completed and {@link #getUserProvisioningState()} returns one of:
<ul>
<li>{@link #STATE_USER_SETUP_INCOMPLETE}</li>
<li>{@link #STATE_USER_SETUP_COMPLETE}</li>
<li>{@link #STATE_USER_PROFILE_COMPLETE}</li>
</ul>

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SystemApi
@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 907703 // ACTION_PROVISION_FINALIZATION (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 907831 // ACTION_BUGREPORT_SHARING_ACCEPTED (<unidirectional association>)
	relation 907831 --->
	  a role_name "ACTION_BUGREPORT_SHARING_ACCEPTED" init_value "
            \"com.android.server.action.BUGREPORT_SHARING_ACCEPTED\"" class_relation const_relation public
	    comment "
Action: Bugreport sharing with device owner has been accepted by the user.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 907831 // ACTION_BUGREPORT_SHARING_ACCEPTED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 907959 // ACTION_BUGREPORT_SHARING_DECLINED (<unidirectional association>)
	relation 907959 --->
	  a role_name "ACTION_BUGREPORT_SHARING_DECLINED" init_value "
            \"com.android.server.action.BUGREPORT_SHARING_DECLINED\"" class_relation const_relation public
	    comment "
Action: Bugreport sharing with device owner has been declined by the user.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 907959 // ACTION_BUGREPORT_SHARING_DECLINED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 908087 // ACTION_REMOTE_BUGREPORT_DISPATCH (<unidirectional association>)
	relation 908087 --->
	  a role_name "ACTION_REMOTE_BUGREPORT_DISPATCH" init_value "
            \"android.intent.action.REMOTE_BUGREPORT_DISPATCH\"" class_relation const_relation public
	    comment "
Action: Bugreport has been collected and is dispatched to {@link DevicePolicyManagerService}.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 908087 // ACTION_REMOTE_BUGREPORT_DISPATCH (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 908215 // EXTRA_REMOTE_BUGREPORT_HASH (<unidirectional association>)
	relation 908215 --->
	  a role_name "EXTRA_REMOTE_BUGREPORT_HASH" init_value "
            \"android.intent.extra.REMOTE_BUGREPORT_HASH\"" class_relation const_relation public
	    comment "
Extra for shared bugreport's SHA-256 hash.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 908215 // EXTRA_REMOTE_BUGREPORT_HASH (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 908343 // EXTRA_BUGREPORT_NOTIFICATION_TYPE (<unidirectional association>)
	relation 908343 --->
	  a role_name "EXTRA_BUGREPORT_NOTIFICATION_TYPE" init_value "
            \"android.app.extra.bugreport_notification_type\"" class_relation const_relation public
	    comment "
Extra for remote bugreport notification shown type.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 908343 // EXTRA_BUGREPORT_NOTIFICATION_TYPE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 897591 "NOTIFICATION_BUGREPORT_STARTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Notification type for a started remote bugreport flow.

@hide
"
      end

      attribute 897719 "NOTIFICATION_BUGREPORT_ACCEPTED_NOT_FINISHED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Notification type for a bugreport that has already been accepted to be shared, but is still
being taken.

@hide
"
      end

      attribute 897847 "NOTIFICATION_BUGREPORT_FINISHED_NOT_ACCEPTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Notification type for a bugreport that has been taken and can be shared or declined.

@hide
"
      end

      classrelation 908471 // EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE (<unidirectional association>)
	relation 908471 --->
	  a role_name "EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE" init_value "
            \"android.app.extra.PROVISIONING_ADMIN_EXTRAS_BUNDLE\"" class_relation const_relation public
	    comment "
A {@link android.os.Parcelable} extra of type {@link android.os.PersistableBundle} that
allows a mobile device management application or NFC programmer application which starts
managed provisioning to pass data to the management application instance after provisioning.
<p>
If used with {@link #ACTION_PROVISION_MANAGED_PROFILE} it can be used by the application that
sends the intent to pass data to itself on the newly created profile.
If used with {@link #ACTION_PROVISION_MANAGED_DEVICE} it allows passing data to the same
instance of the app on the primary user.
Starting from {@link android.os.Build.VERSION_CODES#M}, if used with
{@link #MIME_TYPE_PROVISIONING_NFC} as part of NFC managed device provisioning, the NFC
message should contain a stringified {@link java.util.Properties} instance, whose string
properties will be converted into a {@link android.os.PersistableBundle} and passed to the
management application after provisioning.

<p>
In both cases the application receives the data in
{@link DeviceAdminReceiver#onProfileProvisioningComplete} via an intent with the action
{@link DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE}. The bundle is not changed
during the managed provisioning.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 908471 // EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 908599 // EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME (<unidirectional association>)
	relation 908599 --->
	  a role_name "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME" init_value " \"android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME\"" class_relation const_relation public
	    comment "
A String extra holding the package name of the mobile device management application that
will be set as the profile owner or device owner.

<p>If an application starts provisioning directly via an intent with action
{@link #ACTION_PROVISION_MANAGED_PROFILE} this package has to match the package name of the
application that started provisioning. The package will be set as profile owner in that case.

<p>This package is set as device owner when device owner provisioning is started by an NFC
message containing an NFC record with MIME type {@link #MIME_TYPE_PROVISIONING_NFC}.

<p> When this extra is set, the application must have exactly one device admin receiver.
This receiver will be set as the profile or device owner and active admin.

@see DeviceAdminReceiver
@deprecated Use {@link #EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME}. This extra is still
supported, but only if there is only one device admin receiver in the package that requires
the permission {@link android.Manifest.permission#BIND_DEVICE_ADMIN}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Deprecated
"
	    classrelation_ref 908599 // EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 908727 // EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME (<unidirectional association>)
	relation 908727 --->
	  a role_name "EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME" init_value " \"android.app.extra.PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME\"" class_relation const_relation public
	    comment "
A ComponentName extra indicating the device admin receiver of the mobile device management
application that will be set as the profile owner or device owner and active admin.

<p>If an application starts provisioning directly via an intent with action
{@link #ACTION_PROVISION_MANAGED_PROFILE} or
{@link #ACTION_PROVISION_MANAGED_DEVICE} the package name of this
component has to match the package name of the application that started provisioning.

<p>This component is set as device owner and active admin when device owner provisioning is
started by an intent with action {@link #ACTION_PROVISION_MANAGED_DEVICE} or by an NFC
message containing an NFC record with MIME type
{@link #MIME_TYPE_PROVISIONING_NFC}. For the NFC record, the component name must be
flattened to a string, via {@link ComponentName#flattenToShortString()}.

@see DeviceAdminReceiver

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 908727 // EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 908855 // EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE (<unidirectional association>)
	relation 908855 --->
	  a role_name "EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE" init_value " \"android.app.extra.PROVISIONING_ACCOUNT_TO_MIGRATE\"" class_relation const_relation public
	    comment "
An {@link android.accounts.Account} extra holding the account to migrate during managed
profile provisioning. If the account supplied is present in the primary user, it will be
copied, along with its credentials to the managed profile and removed from the primary user.

Use with {@link #ACTION_PROVISION_MANAGED_PROFILE}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 908855 // EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 908983 // EXTRA_PROVISIONING_EMAIL_ADDRESS (<unidirectional association>)
	relation 908983 --->
	  a role_name "EXTRA_PROVISIONING_EMAIL_ADDRESS" init_value " \"android.app.extra.PROVISIONING_EMAIL_ADDRESS\"" class_relation const_relation public
	    comment "
A String extra that, holds the email address of the account which a managed profile is
created for. Used with {@link #ACTION_PROVISION_MANAGED_PROFILE} and
{@link DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE}.

<p> This extra is part of the {@link #EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE}.

<p> If the {@link #ACTION_PROVISION_MANAGED_PROFILE} intent that starts managed provisioning
contains this extra, it is forwarded in the
{@link DeviceAdminReceiver#ACTION_PROFILE_PROVISIONING_COMPLETE} intent to the mobile
device management application that was set as the profile owner during provisioning.
It is usually used to avoid that the user has to enter their email address twice.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 908983 // EXTRA_PROVISIONING_EMAIL_ADDRESS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 909111 // EXTRA_PROVISIONING_MAIN_COLOR (<unidirectional association>)
	relation 909111 --->
	  a role_name "EXTRA_PROVISIONING_MAIN_COLOR" init_value "
             \"android.app.extra.PROVISIONING_MAIN_COLOR\"" class_relation const_relation public
	    comment "
A integer extra indicating the predominant color to show during the provisioning.
Refer to {@link android.graphics.Color} for how the color is represented.

<p>Use with {@link #ACTION_PROVISION_MANAGED_PROFILE} or
{@link #ACTION_PROVISION_MANAGED_DEVICE}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 909111 // EXTRA_PROVISIONING_MAIN_COLOR (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 909239 // EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED (<unidirectional association>)
	relation 909239 --->
	  a role_name "EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED" init_value "
            \"android.app.extra.PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED\"" class_relation const_relation public
	    comment "
A Boolean extra that can be used by the mobile device management application to skip the
disabling of system apps during provisioning when set to {@code true}.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} or an intent with action
{@link #ACTION_PROVISION_MANAGED_DEVICE} that starts device owner provisioning.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 909239 // EXTRA_PROVISIONING_LEAVE_ALL_SYSTEM_APPS_ENABLED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 909367 // EXTRA_PROVISIONING_TIME_ZONE (<unidirectional association>)
	relation 909367 --->
	  a role_name "EXTRA_PROVISIONING_TIME_ZONE" init_value " \"android.app.extra.PROVISIONING_TIME_ZONE\"" class_relation const_relation public
	    comment "
A String extra holding the time zone {@link android.app.AlarmManager} that the device
will be set to.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 909367 // EXTRA_PROVISIONING_TIME_ZONE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 909495 // EXTRA_PROVISIONING_LOCAL_TIME (<unidirectional association>)
	relation 909495 --->
	  a role_name "EXTRA_PROVISIONING_LOCAL_TIME" init_value " \"android.app.extra.PROVISIONING_LOCAL_TIME\"" class_relation const_relation public
	    comment "
A Long extra holding the wall clock time (in milliseconds) to be set on the device's
{@link android.app.AlarmManager}.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 909495 // EXTRA_PROVISIONING_LOCAL_TIME (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 909623 // EXTRA_PROVISIONING_LOCALE (<unidirectional association>)
	relation 909623 --->
	  a role_name "EXTRA_PROVISIONING_LOCALE" init_value " \"android.app.extra.PROVISIONING_LOCALE\"" class_relation const_relation public
	    comment "
A String extra holding the {@link java.util.Locale} that the device will be set to.
Format: xx_yy, where xx is the language code, and yy the country code.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 909623 // EXTRA_PROVISIONING_LOCALE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 909751 // EXTRA_PROVISIONING_WIFI_SSID (<unidirectional association>)
	relation 909751 --->
	  a role_name "EXTRA_PROVISIONING_WIFI_SSID" init_value " \"android.app.extra.PROVISIONING_WIFI_SSID\"" class_relation const_relation public
	    comment "
A String extra holding the ssid of the wifi network that should be used during nfc device
owner provisioning for downloading the mobile device management application.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 909751 // EXTRA_PROVISIONING_WIFI_SSID (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 909879 // EXTRA_PROVISIONING_WIFI_HIDDEN (<unidirectional association>)
	relation 909879 --->
	  a role_name "EXTRA_PROVISIONING_WIFI_HIDDEN" init_value " \"android.app.extra.PROVISIONING_WIFI_HIDDEN\"" class_relation const_relation public
	    comment "
A boolean extra indicating whether the wifi network in {@link #EXTRA_PROVISIONING_WIFI_SSID}
is hidden or not.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 909879 // EXTRA_PROVISIONING_WIFI_HIDDEN (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 910007 // EXTRA_PROVISIONING_WIFI_SECURITY_TYPE (<unidirectional association>)
	relation 910007 --->
	  a role_name "EXTRA_PROVISIONING_WIFI_SECURITY_TYPE" init_value " \"android.app.extra.PROVISIONING_WIFI_SECURITY_TYPE\"" class_relation const_relation public
	    comment "
A String extra indicating the security type of the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID} and could be one of {@code NONE}, {@code WPA} or
{@code WEP}.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 910007 // EXTRA_PROVISIONING_WIFI_SECURITY_TYPE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 910135 // EXTRA_PROVISIONING_WIFI_PASSWORD (<unidirectional association>)
	relation 910135 --->
	  a role_name "EXTRA_PROVISIONING_WIFI_PASSWORD" init_value " \"android.app.extra.PROVISIONING_WIFI_PASSWORD\"" class_relation const_relation public
	    comment "
A String extra holding the password of the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID}.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 910135 // EXTRA_PROVISIONING_WIFI_PASSWORD (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 910263 // EXTRA_PROVISIONING_WIFI_PROXY_HOST (<unidirectional association>)
	relation 910263 --->
	  a role_name "EXTRA_PROVISIONING_WIFI_PROXY_HOST" init_value " \"android.app.extra.PROVISIONING_WIFI_PROXY_HOST\"" class_relation const_relation public
	    comment "
A String extra holding the proxy host for the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID}.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 910263 // EXTRA_PROVISIONING_WIFI_PROXY_HOST (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 910391 // EXTRA_PROVISIONING_WIFI_PROXY_PORT (<unidirectional association>)
	relation 910391 --->
	  a role_name "EXTRA_PROVISIONING_WIFI_PROXY_PORT" init_value " \"android.app.extra.PROVISIONING_WIFI_PROXY_PORT\"" class_relation const_relation public
	    comment "
An int extra holding the proxy port for the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID}.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 910391 // EXTRA_PROVISIONING_WIFI_PROXY_PORT (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 910519 // EXTRA_PROVISIONING_WIFI_PROXY_BYPASS (<unidirectional association>)
	relation 910519 --->
	  a role_name "EXTRA_PROVISIONING_WIFI_PROXY_BYPASS" init_value " \"android.app.extra.PROVISIONING_WIFI_PROXY_BYPASS\"" class_relation const_relation public
	    comment "
A String extra holding the proxy bypass for the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID}.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 910519 // EXTRA_PROVISIONING_WIFI_PROXY_BYPASS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 910647 // EXTRA_PROVISIONING_WIFI_PAC_URL (<unidirectional association>)
	relation 910647 --->
	  a role_name "EXTRA_PROVISIONING_WIFI_PAC_URL" init_value " \"android.app.extra.PROVISIONING_WIFI_PAC_URL\"" class_relation const_relation public
	    comment "
A String extra holding the proxy auto-config (PAC) URL for the wifi network in
{@link #EXTRA_PROVISIONING_WIFI_SSID}.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 910647 // EXTRA_PROVISIONING_WIFI_PAC_URL (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 910775 // EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION (<unidirectional association>)
	relation 910775 --->
	  a role_name "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION" init_value " \"android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION\"" class_relation const_relation public
	    comment "
A String extra holding a url that specifies the download location of the device admin
package. When not provided it is assumed that the device admin package is already installed.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 910775 // EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 910903 // EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE (<unidirectional association>)
	relation 910903 --->
	  a role_name "EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE" init_value " \"android.app.extra.PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE\"" class_relation const_relation public
	    comment "
An int extra holding a minimum required version code for the device admin package. If the
device admin is already installed on the device, it will only be re-downloaded from
{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION} if the version of the
installed package is less than this version code.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 910903 // EXTRA_PROVISIONING_DEVICE_ADMIN_MINIMUM_VERSION_CODE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 911031 // EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER (<unidirectional association>)
	relation 911031 --->
	  a role_name "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER" init_value " \"android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER\"" class_relation const_relation public
	    comment "
A String extra holding a http cookie header which should be used in the http request to the
url specified in {@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION}.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 911031 // EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 911159 // EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM (<unidirectional association>)
	relation 911159 --->
	  a role_name "EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM" init_value " \"android.app.extra.PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM\"" class_relation const_relation public
	    comment "
A String extra holding the URL-safe base64 encoded SHA-256 or SHA-1 hash (see notes below) of
the file at download location specified in
{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION}.

<p>Either this extra or {@link #EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM} must be
present. The provided checksum must match the checksum of the file at the download
location. If the checksum doesn't match an error will be shown to the user and the user will
be asked to factory reset the device.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

<p><strong>Note:</strong> for devices running {@link android.os.Build.VERSION_CODES#LOLLIPOP}
and {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1} only SHA-1 hash is supported.
Starting from {@link android.os.Build.VERSION_CODES#M}, this parameter accepts SHA-256 in
addition to SHA-1. Support for SHA-1 is likely to be removed in future OS releases.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 911159 // EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 911287 // EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM (<unidirectional association>)
	relation 911287 --->
	  a role_name "EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM" init_value " \"android.app.extra.PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM\"" class_relation const_relation public
	    comment "
A String extra holding the URL-safe base64 encoded SHA-256 checksum of any signature of the
android package archive at the download location specified in {@link
#EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION}.

<p>The signatures of an android package archive can be obtained using
{@link android.content.pm.PackageManager#getPackageArchiveInfo} with flag
{@link android.content.pm.PackageManager#GET_SIGNATURES}.

<p>Either this extra or {@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM} must be
present. The provided checksum must match the checksum of any signature of the file at
the download location. If the checksum does not match an error will be shown to the user and
the user will be asked to factory reset the device.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} that starts device owner
provisioning via an NFC bump.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 911287 // EXTRA_PROVISIONING_DEVICE_ADMIN_SIGNATURE_CHECKSUM (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 911415 // ACTION_MANAGED_PROFILE_PROVISIONED (<unidirectional association>)
	relation 911415 --->
	  a role_name "ACTION_MANAGED_PROFILE_PROVISIONED" init_value " \"android.app.action.MANAGED_PROFILE_PROVISIONED\"" class_relation const_relation public
	    comment "
Broadcast Action: This broadcast is sent to indicate that provisioning of a managed profile
has completed successfully.

<p>The broadcast is limited to the primary profile, to the app specified in the provisioning
intent with action {@link #ACTION_PROVISION_MANAGED_PROFILE}.

<p>This intent will contain the extra {@link #EXTRA_PROVISIONING_ACCOUNT_TO_MIGRATE} which
corresponds to the account requested to be migrated at provisioning time, if any.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 911415 // ACTION_MANAGED_PROFILE_PROVISIONED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 911543 // EXTRA_PROVISIONING_SKIP_ENCRYPTION (<unidirectional association>)
	relation 911543 --->
	  a role_name "EXTRA_PROVISIONING_SKIP_ENCRYPTION" init_value "
             \"android.app.extra.PROVISIONING_SKIP_ENCRYPTION\"" class_relation const_relation public
	    comment "
A boolean extra indicating whether device encryption can be skipped as part of device owner
or managed profile provisioning.

<p>Use in an NFC record with {@link #MIME_TYPE_PROVISIONING_NFC} or an intent with action
{@link #ACTION_PROVISION_MANAGED_DEVICE} that starts device owner provisioning.

<p>From {@link android.os.Build.VERSION_CODES#N} onwards, this is also supported for an
intent with action {@link #ACTION_PROVISION_MANAGED_PROFILE}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 911543 // EXTRA_PROVISIONING_SKIP_ENCRYPTION (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 911671 // EXTRA_PROVISIONING_LOGO_URI (<unidirectional association>)
	relation 911671 --->
	  a role_name "EXTRA_PROVISIONING_LOGO_URI" init_value "
            \"android.app.extra.PROVISIONING_LOGO_URI\"" class_relation const_relation public
	    comment "
A {@link Uri} extra pointing to a logo image. This image will be shown during the
provisioning. If this extra is not passed, a default image will be shown.
<h5>The following URI schemes are accepted:</h5>
<ul>
<li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li>
<li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE})</li>
</ul>

<p> It is the responsability of the caller to provide an image with a reasonable
pixed density for the device.

<p> If a content: URI is passed, the intent should have the flag
{@link Intent#FLAG_GRANT_READ_URI_PERMISSION} and the uri should be added to the
{@link android.content.ClipData} of the intent too.

<p>Use in an intent with action {@link #ACTION_PROVISION_MANAGED_PROFILE} or
{@link #ACTION_PROVISION_MANAGED_DEVICE}

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 911671 // EXTRA_PROVISIONING_LOGO_URI (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 911799 // EXTRA_PROVISIONING_SKIP_USER_SETUP (<unidirectional association>)
	relation 911799 --->
	  a role_name "EXTRA_PROVISIONING_SKIP_USER_SETUP" init_value "
            \"android.app.extra.PROVISIONING_SKIP_USER_SETUP\"" class_relation const_relation public
	    comment "
A boolean extra indicating if user setup should be skipped, for when provisioning is started
during setup-wizard.

<p>If unspecified, defaults to {@code true} to match the behavior in
{@link android.os.Build.VERSION_CODES#M} and earlier.

<p>Use in an intent with action {@link #ACTION_PROVISION_MANAGED_DEVICE} or
{@link #ACTION_PROVISION_MANAGED_USER}.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 911799 // EXTRA_PROVISIONING_SKIP_USER_SETUP (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 911927 // MIME_TYPE_PROVISIONING_NFC (<unidirectional association>)
	relation 911927 --->
	  a role_name "MIME_TYPE_PROVISIONING_NFC" init_value " \"application/com.android.managedprovisioning\"" class_relation const_relation public
	    comment "
This MIME type is used for starting the device owner provisioning.

<p>During device owner provisioning a device admin app is set as the owner of the device.
A device owner has full control over the device. The device owner can not be modified by the
user and the only way of resetting the device is if the device owner app calls a factory
reset.

<p> A typical use case would be a device that is owned by a company, but used by either an
employee or client.

<p> The NFC message must be sent to an unprovisioned device.

<p>The NFC record must contain a serialized {@link java.util.Properties} object which
contains the following properties:
<ul>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME}</li>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_LOCATION}, optional</li>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_DOWNLOAD_COOKIE_HEADER}, optional</li>
<li>{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_CHECKSUM}, optional</li>
<li>{@link #EXTRA_PROVISIONING_LOCAL_TIME} (convert to String), optional</li>
<li>{@link #EXTRA_PROVISIONING_TIME_ZONE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_LOCALE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_SSID}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_HIDDEN} (convert to String), optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_SECURITY_TYPE}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PASSWORD}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PROXY_HOST}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PROXY_PORT} (convert to String), optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PROXY_BYPASS}, optional</li>
<li>{@link #EXTRA_PROVISIONING_WIFI_PAC_URL}, optional</li>
<li>{@link #EXTRA_PROVISIONING_ADMIN_EXTRAS_BUNDLE}, optional, supported from
{@link android.os.Build.VERSION_CODES#M} </li></ul>

<p>
As of {@link android.os.Build.VERSION_CODES#M}, the properties should contain
{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME} instead of
{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME}, (although specifying only
{@link #EXTRA_PROVISIONING_DEVICE_ADMIN_PACKAGE_NAME} is still supported).

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 911927 // MIME_TYPE_PROVISIONING_NFC (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 912055 // ACTION_ADD_DEVICE_ADMIN (<unidirectional association>)
	relation 912055 --->
	  a role_name "ACTION_ADD_DEVICE_ADMIN" init_value " \"android.app.action.ADD_DEVICE_ADMIN\"" class_relation const_relation public
	    comment "
Activity action: ask the user to add a new device administrator to the system.
The desired policy is the ComponentName of the policy in the
{@link #EXTRA_DEVICE_ADMIN} extra field.  This will invoke a UI to
bring the user through adding the device administrator to the system (or
allowing them to reject it).

<p>You can optionally include the {@link #EXTRA_ADD_EXPLANATION}
field to provide the user with additional explanation (in addition
to your component's description) about what is being added.

<p>If your administrator is already active, this will ordinarily return immediately (without
user intervention).  However, if your administrator has been updated and is requesting
additional uses-policy flags, the user will be presented with the new list.  New policies
will not be available to the updated administrator until the user has accepted the new list.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 912055 // ACTION_ADD_DEVICE_ADMIN (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 912183 // ACTION_SET_PROFILE_OWNER (<unidirectional association>)
	relation 912183 --->
	  a role_name "ACTION_SET_PROFILE_OWNER" init_value " \"android.app.action.SET_PROFILE_OWNER\"" class_relation const_relation public
	    comment "
@hide
Activity action: ask the user to add a new device administrator as the profile owner
for this user. Only system apps can launch this intent.

<p>The ComponentName of the profile owner admin is passed in the {@link #EXTRA_DEVICE_ADMIN}
extra field. This will invoke a UI to bring the user through adding the profile owner admin
to remotely control restrictions on the user.

<p>The intent must be invoked via {@link Activity#startActivityForResult} to receive the
result of whether or not the user approved the action. If approved, the result will
be {@link Activity#RESULT_OK} and the component will be set as an active admin as well
as a profile owner.

<p>You can optionally include the {@link #EXTRA_ADD_EXPLANATION}
field to provide the user with additional explanation (in addition
to your component's description) about what is being added.

<p>If there is already a profile owner active or the caller is not a system app, the
operation will return a failure result.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SystemApi
"
	    classrelation_ref 912183 // ACTION_SET_PROFILE_OWNER (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 912311 // EXTRA_PROFILE_OWNER_NAME (<unidirectional association>)
	relation 912311 --->
	  a role_name "EXTRA_PROFILE_OWNER_NAME" init_value " \"android.app.extra.PROFILE_OWNER_NAME\"" class_relation const_relation public
	    comment "
@hide
Name of the profile owner admin that controls the user.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SystemApi
"
	    classrelation_ref 912311 // EXTRA_PROFILE_OWNER_NAME (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 912439 // ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED (<unidirectional association>)
	relation 912439 --->
	  a role_name "ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED" init_value " \"android.app.action.DEVICE_POLICY_MANAGER_STATE_CHANGED\"" class_relation const_relation public
	    comment "
Broadcast action: send when any policy admin changes a policy.
This is generally used to find out when a new policy is in effect.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 912439 // ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 912567 // ACTION_DEVICE_OWNER_CHANGED (<unidirectional association>)
	relation 912567 --->
	  a role_name "ACTION_DEVICE_OWNER_CHANGED" init_value " \"android.app.action.DEVICE_OWNER_CHANGED\"" class_relation const_relation public
	    comment "
Broadcast action: sent when the device owner is set or changed.

This broadcast is sent only to the primary user.
@see #ACTION_PROVISION_MANAGED_DEVICE

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 912567 // ACTION_DEVICE_OWNER_CHANGED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 912695 // EXTRA_DEVICE_ADMIN (<unidirectional association>)
	relation 912695 --->
	  a role_name "EXTRA_DEVICE_ADMIN" init_value " \"android.app.extra.DEVICE_ADMIN\"" class_relation const_relation public
	    comment "
The ComponentName of the administrator component.

@see #ACTION_ADD_DEVICE_ADMIN

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 912695 // EXTRA_DEVICE_ADMIN (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 912823 // EXTRA_ADD_EXPLANATION (<unidirectional association>)
	relation 912823 --->
	  a role_name "EXTRA_ADD_EXPLANATION" init_value " \"android.app.extra.ADD_EXPLANATION\"" class_relation const_relation public
	    comment "
An optional CharSequence providing additional explanation for why the
admin is being added.

@see #ACTION_ADD_DEVICE_ADMIN

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 912823 // EXTRA_ADD_EXPLANATION (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 912951 // ACTION_SET_NEW_PASSWORD (<unidirectional association>)
	relation 912951 --->
	  a role_name "ACTION_SET_NEW_PASSWORD" init_value " \"android.app.action.SET_NEW_PASSWORD\"" class_relation const_relation public
	    comment "
Activity action: have the user enter a new password. This activity should
be launched after using {@link #setPasswordQuality(ComponentName, int)},
or {@link #setPasswordMinimumLength(ComponentName, int)} to have the user
enter a new password that meets the current requirements. You can use
{@link #isActivePasswordSufficient()} to determine whether you need to
have the user select a new password in order to meet the current
constraints. Upon being resumed from this activity, you can check the new
password characteristics to see if they are sufficient.

If the intent is launched from within a managed profile with a profile
owner built against {@link android.os.Build.VERSION_CODES#M} or before,
this will trigger entering a new password for the parent of the profile.
For all other cases it will trigger entering a new password for the user
or profile it is launched from.

@see #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 912951 // ACTION_SET_NEW_PASSWORD (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 913079 // ACTION_SET_NEW_PARENT_PROFILE_PASSWORD (<unidirectional association>)
	relation 913079 --->
	  a role_name "ACTION_SET_NEW_PARENT_PROFILE_PASSWORD" init_value " \"android.app.action.SET_NEW_PARENT_PROFILE_PASSWORD\"" class_relation const_relation public
	    comment "
Activity action: have the user enter a new password for the parent profile.
If the intent is launched from within a managed profile, this will trigger
entering a new password for the parent of the profile. In all other cases
the behaviour is identical to {@link #ACTION_SET_NEW_PASSWORD}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 913079 // ACTION_SET_NEW_PARENT_PROFILE_PASSWORD (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 897975 "FLAG_PARENT_CAN_ACCESS_MANAGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag used by {@link #addCrossProfileIntentFilter} to allow activities in
the parent profile to access intents sent from the managed profile.
That is, when an app in the managed profile calls
{@link Activity#startActivity(Intent)}, the intent can be resolved by a
matching activity in the parent profile.
"
      end

      attribute 898103 "FLAG_MANAGED_CAN_ACCESS_PARENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag used by {@link #addCrossProfileIntentFilter} to allow activities in
the managed profile to access intents sent from the parent profile.
That is, when an app in the parent profile calls
{@link Activity#startActivity(Intent)}, the intent can be resolved by a
matching activity in the managed profile.
"
      end

      classrelation 913207 // ACTION_SYSTEM_UPDATE_POLICY_CHANGED (<unidirectional association>)
	relation 913207 --->
	  a role_name "ACTION_SYSTEM_UPDATE_POLICY_CHANGED" init_value " \"android.app.action.SYSTEM_UPDATE_POLICY_CHANGED\"" class_relation const_relation public
	    comment "
Broadcast action: notify that a new local system update policy has been set by the device
owner. The new policy can be retrieved by {@link #getSystemUpdatePolicy()}.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 913207 // ACTION_SYSTEM_UPDATE_POLICY_CHANGED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 898231 "PERMISSION_POLICY_PROMPT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Permission policy to prompt user for new permission requests for runtime permissions.
Already granted or denied permissions are not affected by this.
"
      end

      attribute 898359 "PERMISSION_POLICY_AUTO_GRANT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Permission policy to always grant new permission requests for runtime permissions.
Already granted or denied permissions are not affected by this.
"
      end

      attribute 898487 "PERMISSION_POLICY_AUTO_DENY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Permission policy to always deny new permission requests for runtime permissions.
Already granted or denied permissions are not affected by this.
"
      end

      attribute 898615 "PERMISSION_GRANT_STATE_DEFAULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Runtime permission state: The user can manage the permission
through the UI.
"
      end

      attribute 898743 "PERMISSION_GRANT_STATE_GRANTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Runtime permission state: The permission is granted to the app
and the user cannot manage the permission through the UI.
"
      end

      attribute 898871 "PERMISSION_GRANT_STATE_DENIED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Runtime permission state: The permission is denied to the app
and the user cannot manage the permission through the UI.
"
      end

      attribute 898999 "STATE_USER_UNMANAGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "No management for current user in-effect. This is the default.
@hide
"
      end

      attribute 899127 "STATE_USER_SETUP_INCOMPLETE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Management partially setup, user setup needs to be completed.
@hide
"
      end

      attribute 899255 "STATE_USER_SETUP_COMPLETE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Management partially setup, user setup completed.
@hide
"
      end

      attribute 899383 "STATE_USER_SETUP_FINALIZED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Management setup and active on current user.
@hide
"
      end

      attribute 899511 "STATE_USER_PROFILE_COMPLETE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Management partially setup on a managed profile.
@hide
"
      end

      class 398903 "UserProvisioningState"
	visibility public stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef({STATE_USER_UNMANAGED, STATE_USER_SETUP_INCOMPLETE, STATE_USER_SETUP_COMPLETE,
            STATE_USER_SETUP_FINALIZED, STATE_USER_PROFILE_COMPLETE})
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 2347959 "isAdminActive"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the given administrator component is currently active (enabled) in the system.

@param admin The administrator component to check for.
@return {@code true} if {@code admin} is currently enabled in the system, {@code false}
        otherwise"
      end

      operation 2348087 "isAdminActiveAsUser"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see #isAdminActive(ComponentName)
@hide"
      end

      operation 2348215 "isRemovingAdmin"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the given administrator component is currently being removed
for the user.
@hide"
      end

      operation 2348343 "getActiveAdmins"
	public return_type class_ref 132279 // ComponentName
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a list of all currently active device administrators' component
names.  If there are no administrators {@code null} may be
returned."
      end

      operation 2348471 "getActiveAdminsAsUser"
	public return_type class_ref 132279 // ComponentName
	nparams 1
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see #getActiveAdmins()
@hide"
      end

      operation 2348599 "packageHasActiveAdmins"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by package administration code to determine if a package can be stopped
or uninstalled.
@hide"
      end

      operation 2348727 "packageHasActiveAdmins"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "packageName" type class_ref 129591 // String
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used by package administration code to determine if a package can be stopped
or uninstalled.
@hide"
      end

      operation 2348855 "removeActiveAdmin"
	public explicit_return_type "void"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a current administration component.  This can only be called
by the application that owns the administration component; if you
try to remove someone else's component, a security exception will be
thrown.

<p>Note that the operation is not synchronous and the admin might still be active (as
indicated by {@link #getActiveAdmins()}) by the time this method returns.

@param admin The administration compononent to remove.
@throws SecurityException if the caller is not in the owner application of {@code admin}."
      end

      operation 2348983 "hasGrantedPolicy"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "usesPolicy" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if an administrator has been granted a particular device policy. This can be
used to check whether the administrator was activated under an earlier set of policies, but
requires additional policies after an upgrade.

@param admin Which {@link DeviceAdminReceiver} this request is associated with. Must be an
           active administrator, or an exception will be thrown.
@param usesPolicy Which uses-policy to check, as defined in {@link DeviceAdminInfo}.
@throws SecurityException if {@code admin} is not an active administrator."
      end

      operation 2349111 "isSeparateProfileChallengeAllowed"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the Profile Challenge is available to use for the given profile user.

@hide"
      end

      attribute 899639 "PASSWORD_QUALITY_UNSPECIFIED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the policy has no requirements
for the password.  Note that quality constants are ordered so that higher
values are more restrictive.
"
      end

      attribute 899767 "PASSWORD_QUALITY_BIOMETRIC_WEAK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the policy allows for low-security biometric
recognition technology.  This implies technologies that can recognize the identity of
an individual to about a 3 digit PIN (false detection is less than 1 in 1,000).
Note that quality constants are ordered so that higher values are more restrictive.
"
      end

      attribute 899895 "PASSWORD_QUALITY_SOMETHING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the policy requires some kind
of password or pattern, but doesn't care what it is. Note that quality constants
are ordered so that higher values are more restrictive.
"
      end

      attribute 900023 "PASSWORD_QUALITY_NUMERIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x20000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the user must have entered a
password containing at least numeric characters.  Note that quality
constants are ordered so that higher values are more restrictive.
"
      end

      attribute 900151 "PASSWORD_QUALITY_NUMERIC_COMPLEX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x30000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the user must have entered a
password containing at least numeric characters with no repeating (4444)
or ordered (1234, 4321, 2468) sequences.  Note that quality
constants are ordered so that higher values are more restrictive.
"
      end

      attribute 900279 "PASSWORD_QUALITY_ALPHABETIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x40000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the user must have entered a
password containing at least alphabetic (or other symbol) characters.
Note that quality constants are ordered so that higher values are more
restrictive.
"
      end

      attribute 900407 "PASSWORD_QUALITY_ALPHANUMERIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x50000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the user must have entered a
password containing at least <em>both></em> numeric <em>and</em>
alphabetic (or other symbol) characters.  Note that quality constants are
ordered so that higher values are more restrictive.
"
      end

      attribute 900535 "PASSWORD_QUALITY_COMPLEX"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x60000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the user must have entered a
password containing at least a letter, a numerical digit and a special
symbol, by default. With this password quality, passwords can be
restricted to contain various sets of characters, like at least an
uppercase letter, etc. These are specified using various methods,
like {@link #setPasswordMinimumLowerCase(ComponentName, int)}. Note
that quality constants are ordered so that higher values are more
restrictive.
"
      end

      attribute 900663 "PASSWORD_QUALITY_MANAGED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x80000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for {@link #setPasswordQuality}: the user is not allowed to
modify password. In case this password quality is set, the password is
managed by a profile owner. The profile owner can set any password,
as if {@link #PASSWORD_QUALITY_UNSPECIFIED} is used. Note
that quality constants are ordered so that higher values are more
restrictive. The value of {@link #PASSWORD_QUALITY_MANAGED} is
the highest.
@hide
"
      end

      operation 2349239 "setPasswordQuality"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "quality" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the password restrictions it
is imposing. After setting this, the user will not be able to enter a new password that is
not at least as restrictive as what has been set. Note that the current password will remain
until the user has set a new one, so the change does not take place immediately. To prompt
the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} or
{@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after calling this method.
<p>
Quality constants are ordered so that higher values are more restrictive; thus the highest
requested quality constant (between the policy set here, the user's preference, and any other
considerations) is the one that is in effect.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param quality The new desired quality. One of {@link #PASSWORD_QUALITY_UNSPECIFIED},
           {@link #PASSWORD_QUALITY_SOMETHING}, {@link #PASSWORD_QUALITY_NUMERIC},
           {@link #PASSWORD_QUALITY_NUMERIC_COMPLEX}, {@link #PASSWORD_QUALITY_ALPHABETIC},
           {@link #PASSWORD_QUALITY_ALPHANUMERIC} or {@link #PASSWORD_QUALITY_COMPLEX}.
@throws SecurityException if {@code admin} is not an active administrator or if {@code admin}
            does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}"
      end

      operation 2349367 "getPasswordQuality"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current minimum password quality for a particular admin or all admins that set
retrictions on this user and its participating profiles. Restrictions on profiles that have
a separate challenge are not taken into account.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

@param admin The name of the admin component to check, or {@code null} to aggregate
all admins."
      end

      operation 2349495 "getPasswordQuality"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2349623 "setPasswordMinimumLength"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the minimum allowed password
length. After setting this, the user will not be able to enter a new password that is not at
least as restrictive as what has been set. Note that the current password will remain until
the user has set a new one, so the change does not take place immediately. To prompt the user
for a new password, use {@link #ACTION_SET_NEW_PASSWORD} or
{@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after setting this value. This constraint is
only imposed if the administrator has also requested either {@link #PASSWORD_QUALITY_NUMERIC}
, {@link #PASSWORD_QUALITY_NUMERIC_COMPLEX}, {@link #PASSWORD_QUALITY_ALPHABETIC},
{@link #PASSWORD_QUALITY_ALPHANUMERIC}, or {@link #PASSWORD_QUALITY_COMPLEX} with
{@link #setPasswordQuality}.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param length The new desired minimum password length. A value of 0 means there is no
           restriction.
@throws SecurityException if {@code admin} is not an active administrator or {@code admin}
            does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}"
      end

      operation 2349751 "getPasswordMinimumLength"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current minimum password length for a particular admin or all admins that set
retrictions on this user and its participating profiles. Restrictions on profiles that have
a separate challenge are not taken into account.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

user and its profiles or a particular one.
@param admin The name of the admin component to check, or {@code null} to aggregate
all admins."
      end

      operation 2349879 "getPasswordMinimumLength"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2350007 "setPasswordMinimumUpperCase"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the minimum number of upper
case letters required in the password. After setting this, the user will not be able to enter
a new password that is not at least as restrictive as what has been set. Note that the
current password will remain until the user has set a new one, so the change does not take
place immediately. To prompt the user for a new password, use
{@link #ACTION_SET_NEW_PASSWORD} or {@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after
setting this value. This constraint is only imposed if the administrator has also requested
{@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The default value is 0.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param length The new desired minimum number of upper case letters required in the password.
           A value of 0 means there is no restriction.
@throws SecurityException if {@code admin} is not an active administrator or {@code admin}
            does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}"
      end

      operation 2350135 "getPasswordMinimumUpperCase"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of upper case letters required in the password
for a particular admin or all admins that set retrictions on this user and
its participating profiles. Restrictions on profiles that have a separate challenge
are not taken into account.
This is the same value as set by
{@link #setPasswordMinimumUpperCase(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

@param admin The name of the admin component to check, or {@code null} to
           aggregate all admins.
@return The minimum number of upper case letters required in the
        password."
      end

      operation 2350263 "getPasswordMinimumUpperCase"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2350391 "setPasswordMinimumLowerCase"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the minimum number of lower
case letters required in the password. After setting this, the user will not be able to enter
a new password that is not at least as restrictive as what has been set. Note that the
current password will remain until the user has set a new one, so the change does not take
place immediately. To prompt the user for a new password, use
{@link #ACTION_SET_NEW_PASSWORD} or {@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after
setting this value. This constraint is only imposed if the administrator has also requested
{@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The default value is 0.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param length The new desired minimum number of lower case letters required in the password.
           A value of 0 means there is no restriction.
@throws SecurityException if {@code admin} is not an active administrator or {@code admin}
            does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}"
      end

      operation 2350519 "getPasswordMinimumLowerCase"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of lower case letters required in the password
for a particular admin or all admins that set retrictions on this user
and its participating profiles. Restrictions on profiles that have
a separate challenge are not taken into account.
This is the same value as set by
{@link #setPasswordMinimumLowerCase(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

@param admin The name of the admin component to check, or {@code null} to
           aggregate all admins.
@return The minimum number of lower case letters required in the
        password."
      end

      operation 2350647 "getPasswordMinimumLowerCase"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2350775 "setPasswordMinimumLetters"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the minimum number of
letters required in the password. After setting this, the user will not be able to enter a
new password that is not at least as restrictive as what has been set. Note that the current
password will remain until the user has set a new one, so the change does not take place
immediately. To prompt the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} or
{@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after setting this value. This constraint is
only imposed if the administrator has also requested {@link #PASSWORD_QUALITY_COMPLEX} with
{@link #setPasswordQuality}. The default value is 1.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param length The new desired minimum number of letters required in the password. A value of
           0 means there is no restriction.
@throws SecurityException if {@code admin} is not an active administrator or {@code admin}
            does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}"
      end

      operation 2350903 "getPasswordMinimumLetters"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of letters required in the password
for a particular admin or all admins that set retrictions on this user
and its participating profiles. Restrictions on profiles that have
a separate challenge are not taken into account.
This is the same value as set by
{@link #setPasswordMinimumLetters(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

@param admin The name of the admin component to check, or {@code null} to
           aggregate all admins.
@return The minimum number of letters required in the password."
      end

      operation 2351031 "getPasswordMinimumLetters"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2351159 "setPasswordMinimumNumeric"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the minimum number of
numerical digits required in the password. After setting this, the user will not be able to
enter a new password that is not at least as restrictive as what has been set. Note that the
current password will remain until the user has set a new one, so the change does not take
place immediately. To prompt the user for a new password, use
{@link #ACTION_SET_NEW_PASSWORD} or {@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after
setting this value. This constraint is only imposed if the administrator has also requested
{@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The default value is 1.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param length The new desired minimum number of numerical digits required in the password. A
           value of 0 means there is no restriction.
@throws SecurityException if {@code admin} is not an active administrator or {@code admin}
            does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}"
      end

      operation 2351287 "getPasswordMinimumNumeric"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of numerical digits required in the password
for a particular admin or all admins that set retrictions on this user
and its participating profiles. Restrictions on profiles that have
a separate challenge are not taken into account.
This is the same value as set by
{@link #setPasswordMinimumNumeric(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

@param admin The name of the admin component to check, or {@code null} to
           aggregate all admins.
@return The minimum number of numerical digits required in the password."
      end

      operation 2351415 "getPasswordMinimumNumeric"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2351543 "setPasswordMinimumSymbols"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the minimum number of
symbols required in the password. After setting this, the user will not be able to enter a
new password that is not at least as restrictive as what has been set. Note that the current
password will remain until the user has set a new one, so the change does not take place
immediately. To prompt the user for a new password, use {@link #ACTION_SET_NEW_PASSWORD} or
{@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after setting this value. This constraint is
only imposed if the administrator has also requested {@link #PASSWORD_QUALITY_COMPLEX} with
{@link #setPasswordQuality}. The default value is 1.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param length The new desired minimum number of symbols required in the password. A value of
           0 means there is no restriction.
@throws SecurityException if {@code admin} is not an active administrator or {@code admin}
            does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}"
      end

      operation 2351671 "getPasswordMinimumSymbols"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of symbols required in the password
for a particular admin or all admins that set retrictions on this user
and its participating profiles. Restrictions on profiles that have
a separate challenge are not taken into account. This is the same value as
set by {@link #setPasswordMinimumSymbols(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

@param admin The name of the admin component to check, or {@code null} to
           aggregate all admins.
@return The minimum number of symbols required in the password."
      end

      operation 2351799 "getPasswordMinimumSymbols"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2351927 "setPasswordMinimumNonLetter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the minimum number of
non-letter characters (numerical digits or symbols) required in the password. After setting
this, the user will not be able to enter a new password that is not at least as restrictive
as what has been set. Note that the current password will remain until the user has set a new
one, so the change does not take place immediately. To prompt the user for a new password,
use {@link #ACTION_SET_NEW_PASSWORD} or {@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after
setting this value. This constraint is only imposed if the administrator has also requested
{@link #PASSWORD_QUALITY_COMPLEX} with {@link #setPasswordQuality}. The default value is 0.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param length The new desired minimum number of letters required in the password. A value of
           0 means there is no restriction.
@throws SecurityException if {@code admin} is not an active administrator or {@code admin}
            does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}"
      end

      operation 2352055 "getPasswordMinimumNonLetter"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current number of non-letter characters required in the password
for a particular admin or all admins that set retrictions on this user
and its participating profiles. Restrictions on profiles that have
a separate challenge are not taken into account.
This is the same value as set by
{@link #setPasswordMinimumNonLetter(ComponentName, int)}
and only applies when the password quality is
{@link #PASSWORD_QUALITY_COMPLEX}.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

@param admin The name of the admin component to check, or {@code null} to
           aggregate all admins.
@return The minimum number of letters required in the password."
      end

      operation 2352183 "getPasswordMinimumNonLetter"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2352311 "setPasswordHistoryLength"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the length of the password
history. After setting this, the user will not be able to enter a new password that is the
same as any password in the history. Note that the current password will remain until the
user has set a new one, so the change does not take place immediately. To prompt the user for
a new password, use {@link #ACTION_SET_NEW_PASSWORD} or
{@link #ACTION_SET_NEW_PARENT_PROFILE_PASSWORD} after setting this value. This constraint is
only imposed if the administrator has also requested either {@link #PASSWORD_QUALITY_NUMERIC}
, {@link #PASSWORD_QUALITY_NUMERIC_COMPLEX} {@link #PASSWORD_QUALITY_ALPHABETIC}, or
{@link #PASSWORD_QUALITY_ALPHANUMERIC} with {@link #setPasswordQuality}.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param length The new desired length of password history. A value of 0 means there is no
           restriction.
@throws SecurityException if {@code admin} is not an active administrator or {@code admin}
            does not use {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}"
      end

      operation 2352439 "setPasswordExpirationTimeout"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "timeout" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device admin to set the password expiration timeout. Calling this method will
restart the countdown for password expiration for the given admin, as will changing the
device password (for all admins).
<p>
The provided timeout is the time delta in ms and will be added to the current time. For
example, to have the password expire 5 days from now, timeout would be 5 * 86400 * 1000 =
432000000 ms for timeout.
<p>
To disable password expiration, a value of 0 may be used for timeout.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_EXPIRE_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.
<p>
Note that setting the password will automatically reset the expiration time for all active
admins. Active admins do not need to explicitly call this method in that case.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param timeout The limit (in ms) that a password can remain in effect. A value of 0 means
           there is no restriction (unlimited).
@throws SecurityException if {@code admin} is not an active administrator or {@code admin}
            does not use {@link DeviceAdminInfo#USES_POLICY_EXPIRE_PASSWORD}"
      end

      operation 2352567 "getPasswordExpirationTimeout"
	public explicit_return_type "long"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the password expiration timeout for the given admin. The expiration timeout is the
recurring expiration timeout provided in the call to
{@link #setPasswordExpirationTimeout(ComponentName, long)} for the given admin or the
aggregate of all participating policy administrators if {@code admin} is null. Admins that
have set restrictions on profiles that have a separate challenge are not taken into account.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

@param admin The name of the admin component to check, or {@code null} to aggregate all admins.
@return The timeout for the given admin or the minimum of all timeouts"
      end

      operation 2352695 "getPasswordExpiration"
	public explicit_return_type "long"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the current password expiration time for a particular admin or all admins that set
retrictions on this user and its participating profiles. Restrictions on profiles that have
a separate challenge are not taken into account. If admin is {@code null}, then a composite
of all expiration times is returned - which will be the minimum of all of them.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
the password expiration for the parent profile.

@param admin The name of the admin component to check, or {@code null} to aggregate all admins.
@return The password expiration time, in milliseconds since epoch."
      end

      operation 2352823 "getPasswordHistoryLength"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current password history length for a particular admin or all admins that
set retrictions on this user and its participating profiles. Restrictions on profiles that
have a separate challenge are not taken into account.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

@param admin The name of the admin component to check, or {@code null} to aggregate
all admins.
@return The length of the password history"
      end

      operation 2352951 "getPasswordHistoryLength"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2353079 "getPasswordMaximumLength"
	public explicit_return_type "int"
	nparams 1
	  param in name "quality" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the maximum password length that the device supports for a
particular password quality.
@param quality The quality being interrogated.
@return Returns the maximum length that the user can enter."
      end

      operation 2353207 "isActivePasswordSufficient"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether the current password the user has set is sufficient to meet the policy
requirements (e.g. quality, minimum length) that have been requested by the admins of this
user and its participating profiles. Restrictions on profiles that have a separate challenge
are not taken into account.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to determine if the password set on
the parent profile is sufficient.

@return Returns true if the password meets the current requirements, else false.
@throws SecurityException if the calling application does not own an active administrator
            that uses {@link DeviceAdminInfo#USES_POLICY_LIMIT_PASSWORD}"
      end

      operation 2353335 "isProfileActivePasswordSufficientForParent"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether the current profile password the user has set is sufficient
to meet the policy requirements (e.g. quality, minimum length) that have been
requested by the admins of the parent user and its profiles.

@param userHandle the userId of the profile to check the password for.
@return Returns true if the password would meet the current requirements, else false.
@throws SecurityException if {@code userHandle} is not a managed profile.
@hide"
      end

      operation 2353463 "getCurrentFailedPasswordAttempts"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the number of times the user has failed at entering a password since that last
successful password entry.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to retrieve the number of failed
password attemts for the parent user.
<p>
The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN}
to be able to call this method; if it has not, a security exception will be thrown.

@return The number of times user has entered an incorrect password since the last correct
        password entry.
@throws SecurityException if the calling application does not own an active administrator
            that uses {@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN}"
      end

      operation 2353591 "getCurrentFailedPasswordAttempts"
	public explicit_return_type "int"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the number of times the given user has failed at entering a
password since that last successful password entry.

<p>The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} to be able to call this method; if it has
not and it is not the system uid, a security exception will be thrown.

@hide"
      end

      operation 2353719 "getDoNotAskCredentialsOnBoot"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries whether {@link #RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT} flag is set.

@return true if RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT flag is set.
@hide"
      end

      operation 2353847 "setMaximumFailedPasswordsForWipe"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "num" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Setting this to a value greater than zero enables a built-in policy that will perform a
device or profile wipe after too many incorrect device-unlock passwords have been entered.
This built-in policy combines watching for failed passwords and wiping the device, and
requires that you request both {@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} and
{@link DeviceAdminInfo#USES_POLICY_WIPE_DATA}}.
<p>
To implement any other policy (e.g. wiping data for a particular application only, erasing or
revoking credentials, or reporting the failure to a server), you should implement
{@link DeviceAdminReceiver#onPasswordFailed(Context, android.content.Intent)} instead. Do not
use this API, because if the maximum count is reached, the device or profile will be wiped
immediately, and your callback will not be invoked.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set a value on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param num The number of failed password attempts at which point the device or profile will
           be wiped.
@throws SecurityException if {@code admin} is not an active administrator or does not use
            both {@link DeviceAdminInfo#USES_POLICY_WATCH_LOGIN} and
            {@link DeviceAdminInfo#USES_POLICY_WIPE_DATA}."
      end

      operation 2353975 "getMaximumFailedPasswordsForWipe"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current maximum number of login attempts that are allowed before the device
or profile is wiped, for a particular admin or all admins that set retrictions on this user
and its participating profiles. Restrictions on profiles that have a separate challenge are
not taken into account.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
the value for the parent profile.

@param admin The name of the admin component to check, or {@code null} to aggregate
all admins."
      end

      operation 2354103 "getMaximumFailedPasswordsForWipe"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2354231 "getProfileWithMinimumFailedPasswordsForWipe"
	public explicit_return_type "int"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the profile with the smallest maximum failed passwords for wipe,
for the given user. So for primary user, it might return the primary or
a managed profile. For a secondary user, it would be the same as the
user passed in.
@hide Used only by Keyguard"
      end

      attribute 900791 "RESET_PASSWORD_REQUIRE_ENTRY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #resetPassword}: don't allow other admins to change
the password again until the user has entered it.
"
      end

      attribute 900919 "RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #resetPassword}: don't ask for user credentials on device boot.
If the flag is set, the device can be booted without asking for user password.
The absence of this flag does not change the current boot requirements. This flag
can be set by the device owner only. If the app is not the device owner, the flag
is ignored. Once the flag is set, it cannot be reverted back without resetting the
device to factory defaults.
"
      end

      operation 2354359 "resetPassword"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "password" type class_ref 129591 // String
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force a new device unlock password (the password needed to access the entire device, not for
individual accounts) on the user. This takes effect immediately.
<p>
<em>Note: This API has been limited as of {@link android.os.Build.VERSION_CODES#N} for
device admins that are not device owner and not profile owner.
The password can now only be changed if there is currently no password set.  Device owner
and profile owner can still do this when user is unlocked and does not have a managed
profile.</em>
<p>
The given password must be sufficient for the current password quality and length constraints
as returned by {@link #getPasswordQuality(ComponentName)} and
{@link #getPasswordMinimumLength(ComponentName)}; if it does not meet these constraints, then
it will be rejected and false returned. Note that the password may be a stronger quality
(containing alphanumeric characters when the requested quality is only numeric), in which
case the currently active quality will be increased to match.
<p>
Calling with a null or empty password will clear any existing PIN, pattern or password if the
current password constraints allow it. <em>Note: This will not work in
{@link android.os.Build.VERSION_CODES#N} and later for managed profiles, or for device admins
that are not device owner or profile owner.  Once set, the password cannot be changed to null
or empty except by these admins.</em>
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_RESET_PASSWORD} to be able to call this method; if it has
not, a security exception will be thrown.

@param password The new password for the user. Null or empty clears the password.
@param flags May be 0 or combination of {@link #RESET_PASSWORD_REQUIRE_ENTRY} and
           {@link #RESET_PASSWORD_DO_NOT_ASK_CREDENTIALS_ON_BOOT}.
@return Returns true if the password was applied, or false if it is not acceptable for the
        current constraints or if the user has not been decrypted yet.
@throws SecurityException if the calling application does not own an active administrator
            that uses {@link DeviceAdminInfo#USES_POLICY_RESET_PASSWORD}
@throws IllegalStateException if the calling user is locked or has a managed profile."
      end

      operation 2354487 "setMaximumTimeToLock"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "timeMs" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the maximum time for user
activity until the device will lock. This limits the length that the user can set. It takes
effect immediately.
<p>
The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_FORCE_LOCK}
to be able to call this method; if it has not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param timeMs The new desired maximum time to lock in milliseconds. A value of 0 means there
           is no restriction.
@throws SecurityException if {@code admin} is not an active administrator or it does not use
            {@link DeviceAdminInfo#USES_POLICY_FORCE_LOCK}"
      end

      operation 2354615 "getMaximumTimeToLock"
	public explicit_return_type "long"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current maximum time to unlock for a particular admin or all admins that set
retrictions on this user and its participating profiles. Restrictions on profiles that have
a separate challenge are not taken into account.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

@param admin The name of the admin component to check, or {@code null} to aggregate
all admins.
@return time in milliseconds for the given admin or the minimum value (strictest) of
all admins if admin is null. Returns 0 if there are no restrictions."
      end

      operation 2354743 "getMaximumTimeToLock"
	public explicit_return_type "long"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2354871 "getMaximumTimeToLockForUserAndProfiles"
	public explicit_return_type "long"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns maximum time to lock that applied by all profiles in this user. We do this because we
do not have a separate timeout to lock for work challenge only.

@hide"
      end

      operation 2354999 "lockNow"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make the device lock immediately, as if the lock screen timeout has expired at the point of
this call.
<p>
The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_FORCE_LOCK}
to be able to call this method; if it has not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to lock the parent profile.

@throws SecurityException if the calling application does not own an active administrator
            that uses {@link DeviceAdminInfo#USES_POLICY_FORCE_LOCK}"
      end

      attribute 901047 "WIPE_EXTERNAL_STORAGE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #wipeData(int)}: also erase the device's external
storage (such as SD cards).
"
      end

      attribute 901175 "WIPE_RESET_PROTECTION_DATA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #wipeData(int)}: also erase the factory reset protection
data.

<p>This flag may only be set by device owner admins; if it is set by
other admins a {@link SecurityException} will be thrown.
"
      end

      operation 2355127 "wipeData"
	public explicit_return_type "void"
	nparams 1
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ask the user data be wiped. Wiping the primary user will cause the device to reboot, erasing
all user data while next booting up.
<p>
The calling device admin must have requested {@link DeviceAdminInfo#USES_POLICY_WIPE_DATA} to
be able to call this method; if it has not, a security exception will be thrown.

@param flags Bit mask of additional options: currently supported flags are
           {@link #WIPE_EXTERNAL_STORAGE} and {@link #WIPE_RESET_PROTECTION_DATA}.
@throws SecurityException if the calling application does not own an active administrator
            that uses {@link DeviceAdminInfo#USES_POLICY_WIPE_DATA}"
      end

      operation 2355255 "setGlobalProxy"
	public return_type class_ref 132279 // ComponentName
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "proxySpec" explicit_type "Proxy"
	  param inout name "exclusionList" explicit_type "List<String>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to set the
global proxy and exclusion list.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_SETS_GLOBAL_PROXY} to be able to call
this method; if it has not, a security exception will be thrown.
Only the first device admin can set the proxy. If a second admin attempts
to set the proxy, the {@link ComponentName} of the admin originally setting the
proxy will be returned. If successful in setting the proxy, {@code null} will
be returned.
The method can be called repeatedly by the device admin alrady setting the
proxy to update the proxy and exclusion list.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param proxySpec the global proxy desired. Must be an HTTP Proxy.
           Pass Proxy.NO_PROXY to reset the proxy.
@param exclusionList a list of domains to be excluded from the global proxy.
@return {@code null} if the proxy was successfully set, or otherwise a {@link ComponentName}
           of the device admin that sets the proxy.
@hide"
      end

      operation 2355383 "setRecommendedGlobalProxy"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "proxyInfo" type class_ref 399031 // ProxyInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a network-independent global HTTP proxy. This is not normally what you want for typical
HTTP proxies - they are generally network dependent. However if you're doing something
unusual like general internal filtering this may be useful. On a private network where the
proxy is not accessible, you may break HTTP using this.
<p>
This method requires the caller to be the device owner.
<p>
This proxy is only a recommendation and it is possible that some apps will ignore it.

@see ProxyInfo
@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param proxyInfo The a {@link ProxyInfo} object defining the new global HTTP proxy. A
           {@code null} value will clear the global HTTP proxy.
@throws SecurityException if {@code admin} is not the device owner."
      end

      operation 2355511 "getGlobalProxyAdmin"
	public return_type class_ref 132279 // ComponentName
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the component name setting the global proxy.
@return ComponentName object of the device admin that set the global proxy, or {@code null}
        if no admin has set the proxy.
@hide"
      end

      attribute 901303 "ENCRYPTION_STATUS_UNSUPPORTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Result code for {@link #setStorageEncryption} and {@link #getStorageEncryptionStatus}:
indicating that encryption is not supported.
"
      end

      attribute 901431 "ENCRYPTION_STATUS_INACTIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Result code for {@link #setStorageEncryption} and {@link #getStorageEncryptionStatus}:
indicating that encryption is supported, but is not currently active.
"
      end

      attribute 901559 "ENCRYPTION_STATUS_ACTIVATING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Result code for {@link #getStorageEncryptionStatus}:
indicating that encryption is not currently active, but is currently
being activated.  This is only reported by devices that support
encryption of data and only when the storage is currently
undergoing a process of becoming encrypted.  A device that must reboot and/or wipe data
to become encrypted will never return this value.
"
      end

      attribute 901687 "ENCRYPTION_STATUS_ACTIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Result code for {@link #setStorageEncryption} and {@link #getStorageEncryptionStatus}:
indicating that encryption is active.
"
      end

      attribute 901815 "ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Result code for {@link #getStorageEncryptionStatus}:
indicating that encryption is active, but an encryption key has not
been set by the user.
"
      end

      attribute 901943 "ENCRYPTION_STATUS_ACTIVE_PER_USER"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Result code for {@link #getStorageEncryptionStatus}:
indicating that encryption is active and the encryption key is tied to the user.
"
      end

      classrelation 913335 // ACTION_START_ENCRYPTION (<unidirectional association>)
	relation 913335 --->
	  a role_name "ACTION_START_ENCRYPTION" init_value " \"android.app.action.START_ENCRYPTION\"" class_relation const_relation public
	    comment "
Activity action: begin the process of encrypting data on the device.  This activity should
be launched after using {@link #setStorageEncryption} to request encryption be activated.
After resuming from this activity, use {@link #getStorageEncryption}
to check encryption status.  However, on some devices this activity may never return, as
it may trigger a reboot and in some cases a complete data wipe of the device.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 913335 // ACTION_START_ENCRYPTION (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 902071 "KEYGUARD_DISABLE_FEATURES_NONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Widgets are enabled in keyguard
"
      end

      attribute 902199 "KEYGUARD_DISABLE_WIDGETS_ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Disable all keyguard widgets. Has no effect.
"
      end

      attribute 902327 "KEYGUARD_DISABLE_SECURE_CAMERA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Disable the camera on secure keyguard screens (e.g. PIN/Pattern/Password)
"
      end

      attribute 902455 "KEYGUARD_DISABLE_SECURE_NOTIFICATIONS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Disable showing all notifications on secure keyguard screens (e.g. PIN/Pattern/Password)
"
      end

      attribute 902583 "KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Only allow redacted notifications on secure keyguard screens (e.g. PIN/Pattern/Password)
"
      end

      attribute 902711 "KEYGUARD_DISABLE_TRUST_AGENTS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Ignore trust agent state on secure keyguard screens
(e.g. PIN/Pattern/Password).
"
      end

      attribute 902839 "KEYGUARD_DISABLE_FINGERPRINT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Disable fingerprint sensor on keyguard secure screens (e.g. PIN/Pattern/Password).
"
      end

      attribute 902967 "KEYGUARD_DISABLE_REMOTE_INPUT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 6"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Disable text entry into notifications on secure keyguard screens (e.g. PIN/Pattern/Password).
"
      end

      attribute 903095 "KEYGUARD_DISABLE_FEATURES_ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x7fffffff"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Disable all current and future keyguard customizations.
"
      end

      operation 2355639 "setStorageEncryption"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "encrypt" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to request that the storage system
be encrypted.
<p>
When multiple device administrators attempt to control device encryption, the most secure,
supported setting will always be used. If any device administrator requests device
encryption, it will be enabled; Conversely, if a device administrator attempts to disable
device encryption while another device administrator has enabled it, the call to disable will
fail (most commonly returning {@link #ENCRYPTION_STATUS_ACTIVE}).
<p>
This policy controls encryption of the secure (application data) storage area. Data written
to other storage areas may or may not be encrypted, and this policy does not require or
control the encryption of any other storage areas. There is one exception: If
{@link android.os.Environment#isExternalStorageEmulated()} is {@code true}, then the
directory returned by {@link android.os.Environment#getExternalStorageDirectory()} must be
written to disk within the encrypted storage area.
<p>
Important Note: On some devices, it is possible to encrypt storage without requiring the user
to create a device PIN or Password. In this case, the storage is encrypted, but the
encryption key may not be fully secured. For maximum security, the administrator should also
require (and check for) a pattern, PIN, or password.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param encrypt true to request encryption, false to release any previous request
@return the new request status (for all active admins) - will be one of
        {@link #ENCRYPTION_STATUS_UNSUPPORTED}, {@link #ENCRYPTION_STATUS_INACTIVE}, or
        {@link #ENCRYPTION_STATUS_ACTIVE}. This is the value of the requests; Use
        {@link #getStorageEncryptionStatus()} to query the actual device state.
@throws SecurityException if {@code admin} is not an active administrator or does not use
            {@link DeviceAdminInfo#USES_ENCRYPTED_STORAGE}"
      end

      operation 2355767 "getStorageEncryption"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to
determine the requested setting for secure storage.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.  If null,
this will return the requested encryption setting as an aggregate of all active
administrators.
@return true if the admin(s) are requesting encryption, false if not."
      end

      operation 2355895 "getStorageEncryptionStatus"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to
determine the current encryption status of the device.

Depending on the returned status code, the caller may proceed in different
ways.  If the result is {@link #ENCRYPTION_STATUS_UNSUPPORTED}, the
storage system does not support encryption.  If the
result is {@link #ENCRYPTION_STATUS_INACTIVE}, use {@link
#ACTION_START_ENCRYPTION} to begin the process of encrypting or decrypting the
storage.  If the result is {@link #ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY}, the
storage system has enabled encryption but no password is set so further action
may be required.  If the result is {@link #ENCRYPTION_STATUS_ACTIVATING} or
{@link #ENCRYPTION_STATUS_ACTIVE}, no further action is required.

@return current status of encryption. The value will be one of
{@link #ENCRYPTION_STATUS_UNSUPPORTED}, {@link #ENCRYPTION_STATUS_INACTIVE},
{@link #ENCRYPTION_STATUS_ACTIVATING}, {@link #ENCRYPTION_STATUS_ACTIVE_DEFAULT_KEY},
or {@link #ENCRYPTION_STATUS_ACTIVE}."
      end

      operation 2356023 "getStorageEncryptionStatus"
	public explicit_return_type "int"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2356151 "approveCaCert"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "alias" type class_ref 129591 // String
	  param in name "userHandle" explicit_type "int"
	  param inout name "approval" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark a CA certificate as approved by the device user. This means that they have been notified
of the installation, were made aware of the risks, viewed the certificate and still wanted to
keep the certificate on the device.

Calling with {@param approval} as {@code true} will cancel any ongoing warnings related to
this certificate.

@hide"
      end

      operation 2356279 "isCaCertApproved"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "alias" type class_ref 129591 // String
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check whether a CA certificate has been approved by the device user.

@hide"
      end

      operation 2356407 "installCaCert"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "certBuffer" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Installs the given certificate as a user CA.

@param admin Which {@link DeviceAdminReceiver} this request is associated with, or
             {@code null} if calling from a delegated certificate installer.
@param certBuffer encoded form of the certificate to install.

@return false if the certBuffer cannot be parsed or installation is
        interrupted, true otherwise.
@throws SecurityException if {@code admin} is not {@code null} and not a device or profile
        owner."
      end

      operation 2356535 "uninstallCaCert"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "certBuffer" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Uninstalls the given certificate from trusted user CAs, if present.

@param admin Which {@link DeviceAdminReceiver} this request is associated with, or
             {@code null} if calling from a delegated certificate installer.
@param certBuffer encoded form of the certificate to remove.
@throws SecurityException if {@code admin} is not {@code null} and not a device or profile
        owner."
      end

      operation 2356663 "getInstalledCaCerts"
	public explicit_return_type "List<byte[]>"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all CA certificates that are currently trusted, excluding system CA certificates.
If a user has installed any certificates by other means than device policy these will be
included too.

@param admin Which {@link DeviceAdminReceiver} this request is associated with, or
             {@code null} if calling from a delegated certificate installer.
@return a List of byte[] arrays, each encoding one user CA certificate.
@throws SecurityException if {@code admin} is not {@code null} and not a device or profile
        owner."
      end

      operation 2356791 "uninstallAllUserCaCerts"
	public explicit_return_type "void"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Uninstalls all custom trusted CA certificates from the profile. Certificates installed by
means other than device policy will also be removed, except for system CA certificates.

@param admin Which {@link DeviceAdminReceiver} this request is associated with, or
             {@code null} if calling from a delegated certificate installer.
@throws SecurityException if {@code admin} is not {@code null} and not a device or profile
        owner."
      end

      operation 2356919 "hasCaCertInstalled"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "certBuffer" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this certificate is installed as a trusted CA.

@param admin Which {@link DeviceAdminReceiver} this request is associated with, or
             {@code null} if calling from a delegated certificate installer.
@param certBuffer encoded form of the certificate to look up.
@throws SecurityException if {@code admin} is not {@code null} and not a device or profile
        owner."
      end

      operation 2357047 "installKeyPair"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "privKey" explicit_type "PrivateKey"
	  param inout name "cert" explicit_type "Certificate"
	  param inout name "alias" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, @NonNull ${t1} ${p1}, @NonNull ${t2} ${p2}, @NonNull ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device or profile owner, or delegated certificate installer, to install a
certificate and corresponding private key. All apps within the profile will be able to access
the certificate and use the private key, given direct user approval.

<p>Access to the installed credentials will not be granted to the caller of this API without
direct user approval. This is for security - should a certificate installer become
compromised, certificates it had already installed will be protected.

<p>If the installer must have access to the credentials, call
{@link #installKeyPair(ComponentName, PrivateKey, Certificate[], String, boolean)} instead.

@param admin Which {@link DeviceAdminReceiver} this request is associated with, or
           {@code null} if calling from a delegated certificate installer.
@param privKey The private key to install.
@param cert The certificate to install.
@param alias The private key alias under which to install the certificate. If a certificate
with that alias already exists, it will be overwritten.
@return {@code true} if the keys were installed, {@code false} otherwise.
@throws SecurityException if {@code admin} is not {@code null} and not a device or profile
        owner."
      end

      operation 2357175 "installKeyPair"
	public explicit_return_type "boolean"
	nparams 5
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "privKey" explicit_type "PrivateKey"
	  param inout name "certs" explicit_type "Certificate"
	  param inout name "alias" type class_ref 129591 // String
	  param inout name "requestAccess" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, @NonNull ${t1} ${p1}, @NonNull ${t2}[] ${p2}, @NonNull ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device or profile owner, or delegated certificate installer, to install a
certificate chain and corresponding private key for the leaf certificate. All apps within the
profile will be able to access the certificate chain and use the private key, given direct
user approval.

<p>The caller of this API may grant itself access to the certificate and private key
immediately, without user approval. It is a best practice not to request this unless strictly
necessary since it opens up additional security vulnerabilities.

@param admin Which {@link DeviceAdminReceiver} this request is associated with, or
       {@code null} if calling from a delegated certificate installer.
@param privKey The private key to install.
@param certs The certificate chain to install. The chain should start with the leaf
       certificate and include the chain of trust in order. This will be returned by
       {@link android.security.KeyChain#getCertificateChain}.
@param alias The private key alias under which to install the certificate. If a certificate
       with that alias already exists, it will be overwritten.
@param requestAccess {@code true} to request that the calling app be granted access to the
       credentials immediately. Otherwise, access to the credentials will be gated by user
       approval.
@return {@code true} if the keys were installed, {@code false} otherwise.
@throws SecurityException if {@code admin} is not {@code null} and not a device or profile
        owner.
@see android.security.KeyChain#getCertificateChain"
      end

      operation 2357303 "removeKeyPair"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "alias" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, @NonNull ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device or profile owner, or delegated certificate installer, to remove a
certificate and private key pair installed under a given alias.

@param admin Which {@link DeviceAdminReceiver} this request is associated with, or
       {@code null} if calling from a delegated certificate installer.
@param alias The private key alias under which the certificate is installed.
@return {@code true} if the private key alias no longer exists, {@code false} otherwise.
@throws SecurityException if {@code admin} is not {@code null} and not a device or profile
        owner."
      end

      operation 2357431 "getCaCertAlias"
	class_operation private return_type class_ref 129591 // String
	nparams 1
	  param inout name "certBuffer" explicit_type "byte"
	nexceptions 1
	  explicit_exception "CertificateException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the alias of a given CA certificate in the certificate store, or {@code null} if it
doesn't exist."
      end

      operation 2357559 "setCertInstallerPackage"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "installerPackage" type class_ref 129591 // String
	nexceptions 1
	  explicit_exception "SecurityException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner or device owner to grant access to privileged certificate
manipulation APIs to a third-party certificate installer app. Granted APIs include
{@link #getInstalledCaCerts}, {@link #hasCaCertInstalled}, {@link #installCaCert},
{@link #uninstallCaCert}, {@link #uninstallAllUserCaCerts} and {@link #installKeyPair}.
<p>
Delegated certificate installer is a per-user state. The delegated access is persistent until
it is later cleared by calling this method with a null value or uninstallling the certificate
installer.
<p>
<b>Note:</b>Starting from {@link android.os.Build.VERSION_CODES#N}, if the caller
application's target SDK version is {@link android.os.Build.VERSION_CODES#N} or newer, the
supplied certificate installer package must be installed when calling this API, otherwise an
{@link IllegalArgumentException} will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param installerPackage The package name of the certificate installer which will be given
           access. If {@code null} is given the current package will be cleared.
@throws SecurityException if {@code admin} is not a device or a profile owner."
      end

      operation 2357687 "getCertInstallerPackage"
	public return_type class_ref 129591 // String
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	nexceptions 1
	  explicit_exception "SecurityException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner or device owner to retrieve the certificate installer for the user.
null if none is set.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return The package name of the current delegated certificate installer, or {@code null} if
        none is set.
@throws SecurityException if {@code admin} is not a device or a profile owner."
      end

      operation 2357815 "setAlwaysOnVpnPackage"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "vpnPackage" type class_ref 129591 // String
	nexceptions 2
	  exception class_ref 133303 // NameNotFoundException
	  explicit_exception "UnsupportedOperationException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device or profile owner to configure an always-on VPN connection through a
specific application for the current user.

@deprecated this version only exists for compability with previous developer preview builds.
            TODO: delete once there are no longer any live references.
@hide"
      end

      operation 2357943 "setAlwaysOnVpnPackage"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "vpnPackage" type class_ref 129591 // String
	  param inout name "lockdownEnabled" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 133303 // NameNotFoundException
	  explicit_exception "UnsupportedOperationException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device or profile owner to configure an always-on VPN connection through a
specific application for the current user. This connection is automatically granted and
persisted after a reboot.
<p>
The designated package should declare a {@link android.net.VpnService} in its manifest
guarded by {@link android.Manifest.permission#BIND_VPN_SERVICE}, otherwise the call will
fail.

@param vpnPackage The package name for an installed VPN app on the device, or {@code null} to
       remove an existing always-on VPN configuration.
@param lockdownEnabled {@code true} to disallow networking when the VPN is not connected or
       {@code false} otherwise. This carries the risk that any failure of the VPN provider
       could break networking for all apps. This has no effect when clearing.
@throws SecurityException if {@code admin} is not a device or a profile owner.
@throws NameNotFoundException if {@code vpnPackage} is not installed.
@throws UnsupportedOperationException if {@code vpnPackage} exists but does not support being
        set as always-on, or if always-on VPN is not available."
      end

      operation 2358071 "getAlwaysOnVpnPackage"
	public return_type class_ref 129591 // String
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device or profile owner to read the name of the package administering an
always-on VPN connection for the current user. If there is no such package, or the always-on
VPN is provided by the system instead of by an application, {@code null} will be returned.

@return Package name of VPN controller responsible for always-on VPN, or {@code null} if none
        is set.
@throws SecurityException if {@code admin} is not a device or a profile owner."
      end

      operation 2358199 "setCameraDisabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to disable all cameras on the
device, for this user. After setting this, no applications running as this user will be able
to access any cameras on the device.
<p>
If the caller is device owner, then the restriction will be applied to all users.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA} to be able to call this method; if it has
not, a security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param disabled Whether or not the camera should be disabled.
@throws SecurityException if {@code admin} is not an active administrator or does not use
            {@link DeviceAdminInfo#USES_POLICY_DISABLE_CAMERA}."
      end

      operation 2358327 "getCameraDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not the device's cameras have been disabled for this user,
either by the calling admin, if specified, or all admins.
@param admin The name of the admin component to check, or {@code null} to check whether any admins
have disabled the camera"
      end

      operation 2358455 "getCameraDisabled"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2358583 "requestBugreport"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to request a bugreport.
<p>
There must be only one user on the device, managed by the device owner. Otherwise a
{@link SecurityException} will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return {@code true} if the bugreport collection started successfully, or {@code false} if it
        wasn't triggered because a previous bugreport operation is still active (either the
        bugreport is still running or waiting for the user to share or decline)
@throws SecurityException if {@code admin} is not a device owner, or if there are users other
            than the one managed by the device owner."
      end

      operation 2358711 "getGuestUserDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not creating a guest user has been disabled for the device

@hide"
      end

      operation 2358839 "setScreenCaptureDisabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device/profile owner to set whether the screen capture is disabled. Disabling
screen capture also prevents the content from being shown on display devices that do not have
a secure video output. See {@link android.view.Display#FLAG_SECURE} for more details about
secure surfaces and secure displays.
<p>
The calling device admin must be a device or profile owner. If it is not, a security
exception will be thrown.
<p>
From version {@link android.os.Build.VERSION_CODES#M} disabling screen capture also blocks
assist requests for all activities of the relevant user.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param disabled Whether screen capture is disabled or not.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2358967 "getScreenCaptureDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not screen capture has been disabled by the calling
admin, if specified, or all admins.
@param admin The name of the admin component to check, or {@code null} to check whether any admins
have disabled screen capture."
      end

      operation 2359095 "getScreenCaptureDisabled"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2359223 "setAutoTimeRequired"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "required" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to set whether auto time is required. If auto time is required the
user cannot set the date and time, but has to use network date and time.
<p>
Note: if auto time is required the user can still manually set the time zone.
<p>
The calling device admin must be a device owner. If it is not, a security exception will be
thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param required Whether auto time is set required or not.
@throws SecurityException if {@code admin} is not a device owner."
      end

      operation 2359351 "getAutoTimeRequired"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if auto time is required."
      end

      operation 2359479 "setForceEphemeralUsers"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "forceEphemeralUsers" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to set whether all users created on the device should be ephemeral.
<p>
The system user is exempt from this policy - it is never ephemeral.
<p>
The calling device admin must be the device owner. If it is not, a security exception will be
thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param forceEphemeralUsers If true, all the existing users will be deleted and all
           subsequently created users will be ephemeral.
@throws SecurityException if {@code admin} is not a device owner.
@hide"
      end

      operation 2359607 "getForceEphemeralUsers"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if all users are created ephemeral.
@throws SecurityException if {@code admin} is not a device owner.
@hide"
      end

      operation 2359735 "setKeyguardDisabledFeatures"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "which" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by an application that is administering the device to disable keyguard customizations,
such as widgets. After setting this, keyguard features will be disabled according to the
provided feature list.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_DISABLE_KEYGUARD_FEATURES} to be able to call this method;
if it has not, a security exception will be thrown.
<p>
Calling this from a managed profile before version {@link android.os.Build.VERSION_CODES#M}
will throw a security exception. From version {@link android.os.Build.VERSION_CODES#M} the
profile owner of a managed profile can set:
<ul>
<li>{@link #KEYGUARD_DISABLE_TRUST_AGENTS}, which affects the parent user, but only if there
is no separate challenge set on the managed profile.
<li>{@link #KEYGUARD_DISABLE_FINGERPRINT} which affects the managed profile challenge if
there is one, or the parent user otherwise.
<li>{@link #KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS} which affects notifications generated
by applications in the managed profile.
</ul>
{@link #KEYGUARD_DISABLE_TRUST_AGENTS} and {@link #KEYGUARD_DISABLE_FINGERPRINT} can also be
set on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set restrictions on the parent
profile.
<p>
Requests to disable other features on a managed profile will be ignored.
<p>
The admin can check which features have been disabled by calling
{@link #getKeyguardDisabledFeatures(ComponentName)}

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param which {@link #KEYGUARD_DISABLE_FEATURES_NONE} (default),
           {@link #KEYGUARD_DISABLE_WIDGETS_ALL}, {@link #KEYGUARD_DISABLE_SECURE_CAMERA},
           {@link #KEYGUARD_DISABLE_SECURE_NOTIFICATIONS},
           {@link #KEYGUARD_DISABLE_TRUST_AGENTS},
           {@link #KEYGUARD_DISABLE_UNREDACTED_NOTIFICATIONS},
           {@link #KEYGUARD_DISABLE_FINGERPRINT}, {@link #KEYGUARD_DISABLE_FEATURES_ALL}
@throws SecurityException if {@code admin} is not an active administrator or does not user
            {@link DeviceAdminInfo#USES_POLICY_DISABLE_KEYGUARD_FEATURES}"
      end

      operation 2359863 "getKeyguardDisabledFeatures"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not features have been disabled in keyguard either by the calling
admin, if specified, or all admins that set retrictions on this user and its participating
profiles. Restrictions on profiles that have a separate challenge are not taken into account.

<p>This method can be called on the {@link DevicePolicyManager} instance
returned by {@link #getParentProfileInstance(ComponentName)} in order to retrieve
restrictions on the parent profile.

@param admin The name of the admin component to check, or {@code null} to check whether any
admins have disabled features in keyguard.
@return bitfield of flags. See {@link #setKeyguardDisabledFeatures(ComponentName, int)}
for a list."
      end

      operation 2359991 "getKeyguardDisabledFeatures"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2360119 "setActiveAdmin"
	public explicit_return_type "void"
	nparams 3
	  param inout name "policyReceiver" type class_ref 132279 // ComponentName
	  param inout name "refreshing" explicit_type "boolean"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2360247 "setActiveAdmin"
	public explicit_return_type "void"
	nparams 2
	  param inout name "policyReceiver" type class_ref 132279 // ComponentName
	  param inout name "refreshing" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2360375 "getRemoveWarning"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "result" type class_ref 399159 // RemoteCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2360503 "setActivePasswordState"
	public explicit_return_type "void"
	nparams 9
	  param in name "quality" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "letters" explicit_type "int"
	  param in name "uppercase" explicit_type "int"
	  param in name "lowercase" explicit_type "int"
	  param in name "numbers" explicit_type "int"
	  param in name "symbols" explicit_type "int"
	  param in name "nonletter" explicit_type "int"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2360631 "reportFailedPasswordAttempt"
	public explicit_return_type "void"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2360759 "reportSuccessfulPasswordAttempt"
	public explicit_return_type "void"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2360887 "reportFailedFingerprintAttempt"
	public explicit_return_type "void"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2361015 "reportSuccessfulFingerprintAttempt"
	public explicit_return_type "void"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2361143 "reportKeyguardDismissed"
	public explicit_return_type "void"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Should be called when keyguard has been dismissed.
@hide"
      end

      operation 2361271 "reportKeyguardSecured"
	public explicit_return_type "void"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Should be called when keyguard view has been shown to the user.
@hide"
      end

      operation 2361399 "setDeviceOwner"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "who" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Sets the given package as the device owner.
Same as {@link #setDeviceOwner(ComponentName, String)} but without setting a device owner name.
@param who the component name to be registered as device owner.
@return whether the package was successfully registered as the device owner.
@throws IllegalArgumentException if the package name is null or invalid
@throws IllegalStateException If the preconditions mentioned are not met."
      end

      operation 2361527 "setDeviceOwner"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "who" type class_ref 132279 // ComponentName
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2361655 "setDeviceOwner"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "who" type class_ref 132279 // ComponentName
	  param inout name "ownerName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2361783 "setDeviceOwner"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "who" type class_ref 132279 // ComponentName
	  param inout name "ownerName" type class_ref 129591 // String
	  param in name "userId" explicit_type "int"
	nexceptions 2
	  explicit_exception "IllegalArgumentException"
	  explicit_exception "IllegalStateException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Sets the given package as the device owner. The package must already be installed. There
must not already be a device owner.
Only apps with the MANAGE_PROFILE_AND_DEVICE_OWNERS permission and the shell uid can call
this method.
Calling this after the setup phase of the primary user has completed is allowed only if
the caller is the shell uid, and there are no additional users and no accounts.
@param who the component name to be registered as device owner.
@param ownerName the human readable name of the institution that owns this device.
@param userId ID of the user on which the device owner runs.
@return whether the package was successfully registered as the device owner.
@throws IllegalArgumentException if the package name is null or invalid
@throws IllegalStateException If the preconditions mentioned are not met."
      end

      operation 2361911 "isDeviceOwnerApp"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to determine if a particular package has been registered as a Device Owner app.
A device owner app is a special device admin that cannot be deactivated by the user, once
activated as a device admin. It also cannot be uninstalled. To check whether a particular
package is currently registered as the device owner app, pass in the package name from
{@link Context#getPackageName()} to this method.<p/>This is useful for device
admin apps that want to check whether they are also registered as the device owner app. The
exact mechanism by which a device admin app is registered as a device owner app is defined by
the setup process.
@param packageName the package name of the app, to compare with the registered device owner
app, if any.
@return whether or not the package is registered as the device owner app."
      end

      operation 2362039 "isDeviceOwnerAppOnCallingUser"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if a package is registered as device owner, only when it's running on the
calling user.

<p>Same as {@link #isDeviceOwnerApp}, but bundled code should use it for clarity.
@hide"
      end

      operation 2362167 "isDeviceOwnerAppOnAnyUser"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if a package is registered as device owner, even if it's running on a different
user.

<p>Requires the MANAGE_USERS permission.

@hide"
      end

      operation 2362295 "getDeviceOwnerComponentOnCallingUser"
	public return_type class_ref 132279 // ComponentName
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return device owner component name, only when it's running on the calling user.

@hide"
      end

      operation 2362423 "getDeviceOwnerComponentOnAnyUser"
	public return_type class_ref 132279 // ComponentName
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return device owner component name, even if it's running on a different user.

<p>Requires the MANAGE_USERS permission.

@hide"
      end

      operation 2362551 "isDeviceOwnerAppOnAnyUserInner"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "packageName" type class_ref 129591 // String
	  param inout name "callingUserOnly" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2362679 "getDeviceOwnerComponentInner"
	private return_type class_ref 132279 // ComponentName
	nparams 1
	  param inout name "callingUserOnly" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2362807 "getDeviceOwnerUserId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return ID of the user who runs device owner, or {@link UserHandle#USER_NULL} if there's
no device owner.

<p>Requires the MANAGE_USERS permission.

@hide"
      end

      operation 2362935 "clearDeviceOwnerApp"
	public explicit_return_type "void"
	nparams 1
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the current device owner. The caller must be the device owner. This function should be
used cautiously as once it is called it cannot be undone. The device owner can only be set as
a part of device setup before setup completes.

@param packageName The package name of the device owner.
@throws SecurityException if the caller is not in {@code packageName} or {@code packageName}
            does not own the current device owner component."
      end

      operation 2363063 "getDeviceOwner"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Returns the device owner package name, only if it's running on the calling user.

<p>Bundled components should use {@code getDeviceOwnerComponentOnCallingUser()} for clarity.

@hide"
      end

      operation 2363191 "isDeviceManaged"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if the device is managed by any device owner.

<p>Requires the MANAGE_USERS permission.

@hide"
      end

      operation 2363319 "getDeviceOwnerNameOnAnyUser"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Returns the device owner name.  Note this method *will* return the device owner
name when it's running on a different user.

<p>Requires the MANAGE_USERS permission.

@hide"
      end

      operation 2363447 "getDeviceInitializerApp"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
@SystemApi
"
	
	
	
	comment "@hide
@deprecated Do not use
@removed"
      end

      operation 2363575 "getDeviceInitializerComponent"
	public return_type class_ref 132279 // ComponentName
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
@SystemApi
"
	
	
	
	comment "@hide
@deprecated Do not use
@removed"
      end

      operation 2363703 "setActiveProfileOwner"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "ownerName" type class_ref 129591 // String
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Deprecated ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "@hide
@deprecated Use #ACTION_SET_PROFILE_OWNER
Sets the given component as an active admin and registers the package as the profile
owner for this user. The package must already be installed and there shouldn't be
an existing profile owner registered for this user. Also, this method must be called
before the user setup has been completed.
<p>
This method can only be called by system apps that hold MANAGE_USERS permission and
MANAGE_DEVICE_ADMINS permission.
@param admin The component to register as an active admin and profile owner.
@param ownerName The user-visible name of the entity that is managing this user.
@return whether the admin was successfully registered as the profile owner.
@throws IllegalArgumentException if packageName is null, the package isn't installed, or
        the user has already been set up."
      end

      operation 2363831 "clearProfileOwner"
	public explicit_return_type "void"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears the active profile owner and removes all user restrictions. The caller must be from
the same package as the active profile owner for this user, otherwise a SecurityException
will be thrown.
<p>
This doesn't work for managed profile owners.

@param admin The component to remove as the profile owner.
@throws SecurityException if {@code admin} is not an active profile owner."
      end

      operation 2363959 "hasUserSetupCompleted"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Checks whether the user was already setup."
      end

      operation 2364087 "setProfileOwner"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "ownerName" type class_ref 129591 // String
	  param in name "userHandle" explicit_type "int"
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Deprecated ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Sets the given component as the profile owner of the given user profile. The package must
already be installed. There must not already be a profile owner for this user.
Only apps with the MANAGE_PROFILE_AND_DEVICE_OWNERS permission and the shell uid can call
this method.
Calling this after the setup phase of the specified user has completed is allowed only if:
- the caller is SYSTEM_UID.
- or the caller is the shell uid, and there are no accounts on the specified user.
@param admin the component name to be registered as profile owner.
@param ownerName the human readable name of the organisation associated with this DPM.
@param userHandle the userId to set the profile owner for.
@return whether the component was successfully registered as the profile owner.
@throws IllegalArgumentException if admin is null, the package isn't installed, or the
preconditions mentioned are not met."
      end

      operation 2364215 "setDeviceOwnerLockScreenInfo"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "info" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the device owner information to be shown on the lock screen.
<p>
If the device owner information is {@code null} or empty then the device owner info is
cleared and the user owner info is shown on the lock screen if it is set.
<p>
If the device owner information contains only whitespaces then the message on the lock screen
will be blank and the user will not be allowed to change it.
<p>
If the device owner information needs to be localized, it is the responsibility of the
{@link DeviceAdminReceiver} to listen to the {@link Intent#ACTION_LOCALE_CHANGED} broadcast
and set a new version of this string accordingly.

@param admin The name of the admin component to check.
@param info Device owner information which will be displayed instead of the user owner info.
@throws SecurityException if {@code admin} is not a device owner."
      end

      operation 2364343 "getDeviceOwnerLockScreenInfo"
	public explicit_return_type "CharSequence"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The device owner information. If it is not set returns {@code null}."
      end

      operation 2364471 "setPackagesSuspended"
	public return_type class_ref 129591 // String
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageNames" type class_ref 129591 // String
	  param inout name "suspended" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}@NonNull ${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device or profile owners to suspend packages for this user.
<p>
A suspended package will not be able to start activities. Its notifications will be hidden,
it will not show up in recents, will not be able to show toasts or dialogs or ring the
device.
<p>
The package must already be installed. If the package is uninstalled while suspended the
package will no longer be suspended. The admin can block this by using
{@link #setUninstallBlocked}.

@param admin The name of the admin component to check.
@param packageNames The package names to suspend or unsuspend.
@param suspended If set to {@code true} than the packages will be suspended, if set to
           {@code false} the packages will be unsuspended.
@return an array of package names for which the suspended status is not set as requested in
        this method.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2364599 "isPackageSuspended"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	nexceptions 1
	  exception class_ref 133303 // NameNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device or profile owners to determine if a package is suspended.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The name of the package to retrieve the suspended status of.
@return {@code true} if the package is suspended or {@code false} if the package is not
        suspended, could not be found or an error occurred.
@throws SecurityException if {@code admin} is not a device or profile owner.
@throws NameNotFoundException if the package could not be found."
      end

      operation 2364727 "setProfileEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the enabled state of the profile. A profile should be enabled only once it is ready to
be used. Only the profile owner can call this.

@see #isProfileOwnerApp
@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@throws SecurityException if {@code admin} is not a profile owner."
      end

      operation 2364855 "setProfileName"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "profileName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name of the profile. In the device owner case it sets the name of the user which it
is called from. Only a profile owner or device owner can call this. If this is never called
by the profile or device owner, the name will be set to default values.

@see #isProfileOwnerApp
@see #isDeviceOwnerApp
@param admin Which {@link DeviceAdminReceiver} this request is associate with.
@param profileName The name of the profile.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2364983 "isProfileOwnerApp"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to determine if a particular package is registered as the profile owner for the
user. A profile owner is a special device admin that has additional privileges
within the profile.

@param packageName The package name of the app to compare with the registered profile owner.
@return Whether or not the package is registered as the profile owner."
      end

      operation 2365111 "getProfileOwner"
	public return_type class_ref 132279 // ComponentName
	nparams 0
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "@hide
@return the packageName of the owner of the given user profile or {@code null} if no profile
owner has been set for that user.
@throws IllegalArgumentException if the userId is invalid."
      end

      operation 2365239 "getProfileOwnerAsUser"
	public return_type class_ref 132279 // ComponentName
	nparams 1
	  param in name "userId" explicit_type "int"
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see #getProfileOwner()
@hide"
      end

      operation 2365367 "getProfileOwnerName"
	public return_type class_ref 129591 // String
	nparams 0
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
@return the human readable name of the organisation associated with this DPM or {@code null}
        if one is not set.
@throws IllegalArgumentException if the userId is invalid."
      end

      operation 2365495 "getProfileOwnerNameAsUser"
	public return_type class_ref 129591 // String
	nparams 1
	  param in name "userId" explicit_type "int"
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "@hide
@param userId The user for whom to fetch the profile owner name, if any.
@return the human readable name of the organisation associated with this profile owner or
        null if one is not set.
@throws IllegalArgumentException if the userId is invalid."
      end

      operation 2365623 "addPersistentPreferredActivity"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "filter" type class_ref 132151 // IntentFilter
	  param inout name "activity" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, @NonNull ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner or device owner to add a default intent handler activity for
intents that match a certain intent filter. This activity will remain the default intent
handler even if the set of potential event handlers for the intent filter changes and if the
intent preferences are reset.
<p>
The default disambiguation mechanism takes over if the activity is not installed (anymore).
When the activity is (re)installed, it is automatically reset as default intent handler for
the filter.
<p>
The calling device admin must be a profile owner or device owner. If it is not, a security
exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param filter The IntentFilter for which a default handler is added.
@param activity The Activity that is added as default intent handler.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2365751 "clearPackagePersistentPreferredActivities"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner or device owner to remove all persistent intent handler preferences
associated with the given package that were set by {@link #addPersistentPreferredActivity}.
<p>
The calling device admin must be a profile owner. If it is not, a security exception will be
thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The name of the package for which preferences are removed.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2365879 "setApplicationRestrictionsManagingPackage"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	nexceptions 1
	  exception class_ref 133303 // NameNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner or device owner to grant permission to a package to manage
application restrictions for the calling user via {@link #setApplicationRestrictions} and
{@link #getApplicationRestrictions}.
<p>
This permission is persistent until it is later cleared by calling this method with a
{@code null} value or uninstalling the managing package.
<p>
The supplied application restriction managing package must be installed when calling this
API, otherwise an {@link NameNotFoundException} will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The package name which will be given access to application restrictions
           APIs. If {@code null} is given the current package will be cleared.
@throws SecurityException if {@code admin} is not a device or profile owner.
@throws NameNotFoundException if {@code packageName} is not found"
      end

      operation 2366007 "getApplicationRestrictionsManagingPackage"
	public return_type class_ref 129591 // String
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner or device owner to retrieve the application restrictions managing
package for the current user, or {@code null} if none is set.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return The package name allowed to manage application restrictions on the current user, or
        {@code null} if none is set.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2366135 "isCallerApplicationRestrictionsManagingPackage"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by any application to find out whether it has been granted permission via
{@link #setApplicationRestrictionsManagingPackage} to manage application restrictions
for the calling user.

<p>This is done by comparing the calling Linux uid with the uid of the package specified by
that method."
      end

      operation 2366263 "setApplicationRestrictions"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	  param inout name "settings" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the application restrictions for a given target application running in the calling user.
<p>
The caller must be a profile or device owner on that user, or the package allowed to manage
application restrictions via {@link #setApplicationRestrictionsManagingPackage}; otherwise a
security exception will be thrown.
<p>
The provided {@link Bundle} consists of key-value pairs, where the types of values may be:
<ul>
<li>{@code boolean}
<li>{@code int}
<li>{@code String} or {@code String[]}
<li>From {@link android.os.Build.VERSION_CODES#M}, {@code Bundle} or {@code Bundle[]}
</ul>
<p>
If the restrictions are not available yet, but may be applied in the near future, the caller
can notify the target application of that by adding
{@link UserManager#KEY_RESTRICTIONS_PENDING} to the settings parameter.
<p>
The application restrictions are only made visible to the target application via
{@link UserManager#getApplicationRestrictions(String)}, in addition to the profile or device
owner, and the application restrictions managing package via
{@link #getApplicationRestrictions}.

@param admin Which {@link DeviceAdminReceiver} this request is associated with, or
           {@code null} if called by the application restrictions managing package.
@param packageName The name of the package to update restricted settings for.
@param settings A {@link Bundle} to be parsed by the receiving application, conveying a new
           set of active restrictions.
@throws SecurityException if {@code admin} is not a device or profile owner.
@see #setApplicationRestrictionsManagingPackage
@see UserManager#KEY_RESTRICTIONS_PENDING"
      end

      operation 2366391 "setTrustAgentConfiguration"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "target" type class_ref 132279 // ComponentName
	  param inout name "configuration" type class_ref 158007 // PersistableBundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a list of configuration features to enable for a TrustAgent component. This is meant to
be used in conjunction with {@link #KEYGUARD_DISABLE_TRUST_AGENTS}, which disables all trust
agents but those enabled by this function call. If flag
{@link #KEYGUARD_DISABLE_TRUST_AGENTS} is not set, then this call has no effect.
<p>
The calling device admin must have requested
{@link DeviceAdminInfo#USES_POLICY_DISABLE_KEYGUARD_FEATURES} to be able to call this method;
if not, a security exception will be thrown.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to set the configuration for
the parent profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param target Component name of the agent to be enabled.
@param configuration TrustAgent-specific feature bundle. If null for any admin, agent will be
           strictly disabled according to the state of the
           {@link #KEYGUARD_DISABLE_TRUST_AGENTS} flag.
           <p>
           If {@link #KEYGUARD_DISABLE_TRUST_AGENTS} is set and options is not null for all
           admins, then it's up to the TrustAgent itself to aggregate the values from all
           device admins.
           <p>
           Consult documentation for the specific TrustAgent to determine legal options
           parameters.
@throws SecurityException if {@code admin} is not an active administrator or does not use
            {@link DeviceAdminInfo#USES_POLICY_DISABLE_KEYGUARD_FEATURES}"
      end

      operation 2366519 "getTrustAgentConfiguration"
	public return_type class_ref 158007 // PersistableBundle
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "agent" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}@Nullable ${t0} ${p0}, @NonNull ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets configuration for the given trust agent based on aggregating all calls to
{@link #setTrustAgentConfiguration(ComponentName, ComponentName, PersistableBundle)} for
all device admins.
<p>
This method can be called on the {@link DevicePolicyManager} instance returned by
{@link #getParentProfileInstance(ComponentName)} in order to retrieve the configuration set
on the parent profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with. If null,
this function returns a list of configurations for all admins that declare
{@link #KEYGUARD_DISABLE_TRUST_AGENTS}. If any admin declares
{@link #KEYGUARD_DISABLE_TRUST_AGENTS} but doesn't call
{@link #setTrustAgentConfiguration(ComponentName, ComponentName, PersistableBundle)}
for this {@param agent} or calls it with a null configuration, null is returned.
@param agent Which component to get enabled features for.
@return configuration for the given trust agent."
      end

      operation 2366647 "getTrustAgentConfiguration"
	public return_type class_ref 158007 // PersistableBundle
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "agent" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}@Nullable ${t0} ${p0}, @NonNull ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide per-user version "
      end

      operation 2366775 "setCrossProfileCallerIdDisabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to set whether caller-Id information from the
managed profile will be shown in the parent profile, for incoming calls.
<p>
The calling device admin must be a profile owner. If it is not, a security exception will be
thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param disabled If true caller-Id information in the managed profile is not displayed.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2366903 "getCrossProfileCallerIdDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to determine whether or not caller-Id
information has been disabled.
<p>
The calling device admin must be a profile owner. If it is not, a security exception will be
thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2367031 "getCrossProfileCallerIdDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "userHandle" type class_ref 131383 // UserHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not caller-Id information has been disabled.

@param userHandle The user for whom to check the caller-id permission
@hide"
      end

      operation 2367159 "setCrossProfileContactsSearchDisabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to set whether contacts search from the
managed profile will be shown in the parent profile, for incoming calls.
<p>
The calling device admin must be a profile owner. If it is not, a security exception will be
thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param disabled If true contacts search in the managed profile is not displayed.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2367287 "getCrossProfileContactsSearchDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to determine whether or not contacts search
has been disabled.
<p>
The calling device admin must be a profile owner. If it is not, a security exception will be
thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2367415 "getCrossProfileContactsSearchDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "userHandle" type class_ref 131383 // UserHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not contacts search has been disabled.

@param userHandle The user for whom to check the contacts search permission
@hide"
      end

      operation 2367543 "startManagedQuickContact"
	public explicit_return_type "void"
	nparams 5
	  param inout name "actualLookupKey" type class_ref 129591 // String
	  param in name "actualContactId" explicit_type "long"
	  param inout name "isContactIdIgnored" explicit_type "boolean"
	  param in name "directoryId" explicit_type "long"
	  param inout name "originalIntent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Start Quick Contact on the managed profile for the user, if the policy allows.

@hide"
      end

      operation 2367671 "startManagedQuickContact"
	public explicit_return_type "void"
	nparams 3
	  param inout name "actualLookupKey" type class_ref 129591 // String
	  param in name "actualContactId" explicit_type "long"
	  param inout name "originalIntent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Start Quick Contact on the managed profile for the user, if the policy allows.
@hide"
      end

      operation 2367799 "setBluetoothContactSharingDisabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to set whether bluetooth devices can access
enterprise contacts.
<p>
The calling device admin must be a profile owner. If it is not, a security exception will be
thrown.
<p>
This API works on managed profile only.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param disabled If true, bluetooth devices cannot access enterprise contacts.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2367927 "getBluetoothContactSharingDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to determine whether or not Bluetooth devices
cannot access enterprise contacts.
<p>
The calling device admin must be a profile owner. If it is not, a security exception will be
thrown.
<p>
This API works on managed profile only.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2368055 "getBluetoothContactSharingDisabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "userHandle" type class_ref 131383 // UserHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not Bluetooth devices cannot access contacts.
<p>
This API works on managed profile UserHandle only.

@param userHandle The user for whom to check the caller-id permission
@hide"
      end

      operation 2368183 "addCrossProfileIntentFilter"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "filter" type class_ref 132151 // IntentFilter
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the profile owner of a managed profile so that some intents sent in the managed
profile can also be resolved in the parent, or vice versa. Only activity intents are
supported.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param filter The {@link IntentFilter} the intent has to match to be also resolved in the
           other profile
@param flags {@link DevicePolicyManager#FLAG_MANAGED_CAN_ACCESS_PARENT} and
           {@link DevicePolicyManager#FLAG_PARENT_CAN_ACCESS_MANAGED} are supported.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2368311 "clearCrossProfileIntentFilters"
	public explicit_return_type "void"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to remove the cross-profile intent filters
that go from the managed profile to the parent, or from the parent to the managed profile.
Only removes those that have been set by the profile owner.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2368439 "setPermittedAccessibilityServices"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageNames" explicit_type "List<String>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile or device owner to set the permitted accessibility services. When set by
a device owner or profile owner the restriction applies to all profiles of the user the
device owner or profile owner is an admin for. By default the user can use any accessiblity
service. When zero or more packages have been added, accessiblity services that are not in
the list and not part of the system can not be enabled by the user.
<p>
Calling with a null value for the list disables the restriction so that all services can be
used, calling with an empty list only allows the builtin system's services.
<p>
System accesibility services are always available to the user the list can't modify this.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageNames List of accessibility service package names.
@return true if setting the restriction succeeded. It fail if there is one or more non-system
        accessibility services enabled, that are not in the list.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2368567 "getPermittedAccessibilityServices"
	public return_type class_ref 129591 // String
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of permitted accessibility services set by this device or profile owner.
<p>
An empty list means no accessibility services except system services are allowed. Null means
all accessibility services are allowed.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return List of accessiblity service package names.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2368695 "isAccessibilityServicePermittedByAdmin"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the system to check if a specific accessibility service is disabled by admin.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName Accessibility service package name that needs to be checked.
@param userHandle user id the admin is running as.
@return true if the accessibility service is permitted, otherwise false.

@hide"
      end

      operation 2368823 "getPermittedAccessibilityServices"
	public return_type class_ref 129591 // String
	nparams 1
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Returns the list of accessibility services permitted by the device or profiles
owners of this user.

<p>Null means all accessibility services are allowed, if a non-null list is returned
it will contain the intersection of the permitted lists for any device or profile
owners that apply to this user. It will also include any system accessibility services.

@param userId which user to check for.
@return List of accessiblity service package names.
@hide"
      end

      operation 2368951 "setPermittedInputMethods"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageNames" explicit_type "List<String>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile or device owner to set the permitted input methods services. When set by
a device owner or profile owner the restriction applies to all profiles of the user the
device owner or profile owner is an admin for. By default the user can use any input method.
When zero or more packages have been added, input method that are not in the list and not
part of the system can not be enabled by the user. This method will fail if it is called for
a admin that is not for the foreground user or a profile of the foreground user.
<p>
Calling with a null value for the list disables the restriction so that all input methods can
be used, calling with an empty list disables all but the system's own input methods.
<p>
System input methods are always available to the user this method can't modify this.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageNames List of input method package names.
@return true if setting the restriction succeeded. It will fail if there are one or more
        non-system input methods currently enabled that are not in the packageNames list.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2369079 "getPermittedInputMethods"
	public return_type class_ref 129591 // String
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of permitted input methods set by this device or profile owner.
<p>
An empty list means no input methods except system input methods are allowed. Null means all
input methods are allowed.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return List of input method package names.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2369207 "isInputMethodPermittedByAdmin"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the system to check if a specific input method is disabled by admin.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName Input method package name that needs to be checked.
@param userHandle user id the admin is running as.
@return true if the input method is permitted, otherwise false.

@hide"
      end

      operation 2369335 "getPermittedInputMethodsForCurrentUser"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Returns the list of input methods permitted by the device or profiles
owners of the current user.  (*Not* calling user, due to a limitation in InputMethodManager.)

<p>Null means all input methods are allowed, if a non-null list is returned
it will contain the intersection of the permitted lists for any device or profile
owners that apply to this user. It will also include any system input methods.

@return List of input method package names.
@hide"
      end

      operation 2369463 "getKeepUninstalledPackages"
	public return_type class_ref 129591 // String
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to get the list of apps to keep around as APKs even if no user has
currently installed it.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.

@return List of package names to keep cached.
@hide"
      end

      operation 2369591 "setKeepUninstalledPackages"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageNames" explicit_type "List<String>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to set a list of apps to keep around as APKs even if no user has
currently installed it.

<p>Please note that setting this policy does not imply that specified apps will be
automatically pre-cached.</p>

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageNames List of package names to keep cached.
@throws SecurityException if {@code admin} is not a device owner.
@hide"
      end

      operation 2369719 "createUser"
	public return_type class_ref 131383 // UserHandle
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "name" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Called by a device owner to create a user with the specified name. The UserHandle returned
by this method should not be persisted as user handles are recycled as users are removed and
created. If you need to persist an identifier for this user, use
{@link UserManager#getSerialNumberForUser}.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param name the user's name
@see UserHandle
@return the {@link android.os.UserHandle} object for the created user, or {@code null} if the
        user could not be created.

@deprecated From {@link android.os.Build.VERSION_CODES#M}
@removed From {@link android.os.Build.VERSION_CODES#N}"
      end

      operation 2369847 "createAndInitializeUser"
	public return_type class_ref 131383 // UserHandle
	nparams 5
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "name" type class_ref 129591 // String
	  param inout name "ownerName" type class_ref 129591 // String
	  param inout name "profileOwnerComponent" type class_ref 132279 // ComponentName
	  param inout name "adminExtras" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, @NonNull ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Called by a device owner to create a user with the specified name. The UserHandle returned
by this method should not be persisted as user handles are recycled as users are removed and
created. If you need to persist an identifier for this user, use
{@link UserManager#getSerialNumberForUser}.  The new user will be started in the background
immediately.

<p> profileOwnerComponent is the {@link DeviceAdminReceiver} to be the profile owner as well
as registered as an active admin on the new user.  The profile owner package will be
installed on the new user if it already is installed on the device.

<p>If the optionalInitializeData is not null, then the extras will be passed to the
profileOwnerComponent when onEnable is called.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param name the user's name
@param ownerName the human readable name of the organisation associated with this DPM.
@param profileOwnerComponent The {@link DeviceAdminReceiver} that will be an active admin on
     the user.
@param adminExtras Extras that will be passed to onEnable of the admin receiver
     on the new user.
@see UserHandle
@return the {@link android.os.UserHandle} object for the created user, or {@code null} if the
        user could not be created.

@deprecated From {@link android.os.Build.VERSION_CODES#M}
@removed From {@link android.os.Build.VERSION_CODES#N}"
      end

      attribute 903223 "SKIP_SETUP_WIZARD"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag used by {@link #createAndManageUser} to skip setup wizard after creating a new user.
"
      end

      attribute 903351 "MAKE_USER_EPHEMERAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag used by {@link #createAndManageUser} to specify that the user should be created
ephemeral.
@hide
"
      end

      operation 2369975 "createAndManageUser"
	public return_type class_ref 131383 // UserHandle
	nparams 5
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "name" type class_ref 129591 // String
	  param inout name "profileOwner" type class_ref 132279 // ComponentName
	  param inout name "adminExtras" type class_ref 158007 // PersistableBundle
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @NonNull ${t2} ${p2}, @Nullable ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to create a user with the specified name and a given component of
the calling package as profile owner. The UserHandle returned by this method should not be
persisted as user handles are recycled as users are removed and created. If you need to
persist an identifier for this user, use {@link UserManager#getSerialNumberForUser}. The new
user will not be started in the background.
<p>
admin is the {@link DeviceAdminReceiver} which is the device owner. profileOwner is also a
DeviceAdminReceiver in the same package as admin, and will become the profile owner and will
be registered as an active admin on the new user. The profile owner package will be installed
on the new user.
<p>
If the adminExtras are not null, they will be stored on the device until the user is started
for the first time. Then the extras will be passed to the admin when onEnable is called.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param name The user's name.
@param profileOwner Which {@link DeviceAdminReceiver} will be profile owner. Has to be in the
           same package as admin, otherwise no user is created and an
           IllegalArgumentException is thrown.
@param adminExtras Extras that will be passed to onEnable of the admin receiver on the new
           user.
@param flags {@link #SKIP_SETUP_WIZARD} is supported.
@see UserHandle
@return the {@link android.os.UserHandle} object for the created user, or {@code null} if the
        user could not be created.
@throws SecurityException if {@code admin} is not a device owner."
      end

      operation 2370103 "removeUser"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "userHandle" type class_ref 131383 // UserHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to remove a user and all associated data. The primary user can not
be removed.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param userHandle the user to remove.
@return {@code true} if the user was removed, {@code false} otherwise.
@throws SecurityException if {@code admin} is not a device owner."
      end

      operation 2370231 "switchUser"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "userHandle" type class_ref 131383 // UserHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to switch the specified user to the foreground.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param userHandle the user to switch to; null will switch to primary.
@return {@code true} if the switch was successful, {@code false} otherwise.
@throws SecurityException if {@code admin} is not a device owner.
@see Intent#ACTION_USER_FOREGROUND"
      end

      operation 2370359 "getApplicationRestrictions"
	public return_type class_ref 131511 // Bundle
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the application restrictions for a given target application running in the calling
user.
<p>
The caller must be a profile or device owner on that user, or the package allowed to manage
application restrictions via {@link #setApplicationRestrictionsManagingPackage}; otherwise a
security exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with, or
           {@code null} if called by the application restrictions managing package.
@param packageName The name of the package to fetch restricted settings of.
@return {@link Bundle} of settings corresponding to what was set last time
        {@link DevicePolicyManager#setApplicationRestrictions} was called, or an empty
        {@link Bundle} if no restrictions have been set.
@throws SecurityException if {@code admin} is not a device or profile owner.
@see {@link #setApplicationRestrictionsManagingPackage}"
      end

      operation 2370487 "addUserRestriction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "key" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile or device owner to set a user restriction specified by the key.
<p>
The calling device admin must be a profile or device owner; if it is not, a security
exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param key The key of the restriction. See the constants in {@link android.os.UserManager}
           for the list of keys.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2370615 "clearUserRestriction"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "key" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile or device owner to clear a user restriction specified by the key.
<p>
The calling device admin must be a profile or device owner; if it is not, a security
exception will be thrown.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param key The key of the restriction. See the constants in {@link android.os.UserManager}
           for the list of keys.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2370743 "getUserRestrictions"
	public return_type class_ref 131511 // Bundle
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile or device owner to get user restrictions set with
{@link #addUserRestriction(ComponentName, String)}.
<p>
The target user may have more restrictions set by the system or other device owner / profile
owner. To get all the user restrictions currently set, use
{@link UserManager#getUserRestrictions()}.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2370871 "setApplicationHidden"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	  param inout name "hidden" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to hide or unhide packages. When a package is hidden it is
unavailable for use, but the data and actual package file remain.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The name of the package to hide or unhide.
@param hidden {@code true} if the package should be hidden, {@code false} if it should be
           unhidden.
@return boolean Whether the hidden setting of the package was successfully updated.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2370999 "isApplicationHidden"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to determine if a package is hidden.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The name of the package to retrieve the hidden status of.
@return boolean {@code true} if the package is hidden, {@code false} otherwise.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2371127 "enableSystemApp"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to re-enable a system app that was disabled by default
when the user was initialized.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The package to be re-enabled in the calling profile.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2371255 "enableSystemApp"
	public explicit_return_type "int"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "intent" type class_ref 131255 // Intent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to re-enable system apps by intent that were disabled by
default when the user was initialized.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param intent An intent matching the app(s) to be installed. All apps that resolve for this
           intent will be re-enabled in the calling profile.
@return int The number of activities that matched the intent and were installed.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2371383 "setAccountManagementDisabled"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "accountType" type class_ref 129591 // String
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner or profile owner to disable account management for a specific type
of account.
<p>
The calling device admin must be a device owner or profile owner. If it is not, a security
exception will be thrown.
<p>
When account management is disabled for an account type, adding or removing an account of
that type will not be possible.
<p>
From {@link android.os.Build.VERSION_CODES#N} the profile or device owner can still use
{@link android.accounts.AccountManager} APIs to add or remove accounts when account
management for a specific type is disabled.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param accountType For which account management is disabled or enabled.
@param disabled The boolean indicating that account management will be disabled (true) or
           enabled (false).
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2371511 "getAccountTypesWithManagementDisabled"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the array of accounts for which account management is disabled by the profile owner.

<p> Account management can be disabled/enabled by calling
{@link #setAccountManagementDisabled}.

@return a list of account types for which account management has been disabled.

@see #setAccountManagementDisabled"
      end

      operation 2371639 "getAccountTypesWithManagementDisabledAsUser"
	public return_type class_ref 129591 // String
	nparams 1
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@see #getAccountTypesWithManagementDisabled()
@hide"
      end

      operation 2371767 "setLockTaskPackages"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packages" type class_ref 129591 // String
	nexceptions 1
	  explicit_exception "SecurityException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets which packages may enter lock task mode.
<p>
Any packages that shares uid with an allowed package will also be allowed to activate lock
task. From {@link android.os.Build.VERSION_CODES#M} removing packages from the lock task
package list results in locked tasks belonging to those packages to be finished. This
function can only be called by the device owner.

@param packages The list of packages allowed to enter lock task mode
@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@throws SecurityException if {@code admin} is not a device owner.
@see Activity#startLockTask()
@see DeviceAdminReceiver#onLockTaskModeEntering(Context, Intent, String)
@see DeviceAdminReceiver#onLockTaskModeExiting(Context, Intent)
@see UserManager#DISALLOW_CREATE_WINDOWS"
      end

      operation 2371895 "getLockTaskPackages"
	public return_type class_ref 129591 // String
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function returns the list of packages allowed to start the lock task mode.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@hide"
      end

      operation 2372023 "isLockTaskPermitted"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "pkg" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function lets the caller know whether the given component is allowed to start the
lock task mode.
@param pkg The package to check"
      end

      operation 2372151 "setGlobalSetting"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "setting" type class_ref 129591 // String
	  param inout name "value" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device owners to update {@link Settings.Global} settings. Validation that the value
of the setting is in the correct form for the setting type should be performed by the caller.
<p>
The settings that can be updated with this method are:
<ul>
<li>{@link Settings.Global#ADB_ENABLED}</li>
<li>{@link Settings.Global#AUTO_TIME}</li>
<li>{@link Settings.Global#AUTO_TIME_ZONE}</li>
<li>{@link Settings.Global#DATA_ROAMING}</li>
<li>{@link Settings.Global#USB_MASS_STORAGE_ENABLED}</li>
<li>{@link Settings.Global#WIFI_SLEEP_POLICY}</li>
<li>{@link Settings.Global#STAY_ON_WHILE_PLUGGED_IN} This setting is only available from
{@link android.os.Build.VERSION_CODES#M} onwards and can only be set if
{@link #setMaximumTimeToLock} is not used to set a timeout.</li>
<li>{@link Settings.Global#WIFI_DEVICE_OWNER_CONFIGS_LOCKDOWN}</li> This setting is only
available from {@link android.os.Build.VERSION_CODES#M} onwards.</li>
</ul>
<p>
Changing the following settings has no effect as of {@link android.os.Build.VERSION_CODES#M}:
<ul>
<li>{@link Settings.Global#BLUETOOTH_ON}. Use
{@link android.bluetooth.BluetoothAdapter#enable()} and
{@link android.bluetooth.BluetoothAdapter#disable()} instead.</li>
<li>{@link Settings.Global#DEVELOPMENT_SETTINGS_ENABLED}</li>
<li>{@link Settings.Global#MODE_RINGER}. Use
{@link android.media.AudioManager#setRingerMode(int)} instead.</li>
<li>{@link Settings.Global#NETWORK_PREFERENCE}</li>
<li>{@link Settings.Global#WIFI_ON}. Use
{@link android.net.wifi.WifiManager#setWifiEnabled(boolean)} instead.</li>
</ul>

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param setting The name of the setting to update.
@param value The value to update the setting to.
@throws SecurityException if {@code admin} is not a device owner."
      end

      operation 2372279 "setSecureSetting"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "setting" type class_ref 129591 // String
	  param inout name "value" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to update {@link Settings.Secure} settings. Validation
that the value of the setting is in the correct form for the setting type should be performed
by the caller.
<p>
The settings that can be updated by a profile or device owner with this method are:
<ul>
<li>{@link Settings.Secure#DEFAULT_INPUT_METHOD}</li>
<li>{@link Settings.Secure#INSTALL_NON_MARKET_APPS}</li>
<li>{@link Settings.Secure#SKIP_FIRST_USE_HINTS}</li>
</ul>
<p>
A device owner can additionally update the following settings:
<ul>
<li>{@link Settings.Secure#LOCATION_MODE}</li>
</ul>

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param setting The name of the setting to update.
@param value The value to update the setting to.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2372407 "setRestrictionsProvider"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "provider" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Designates a specific service component as the provider for making permission requests of a
local or remote administrator of the user.
<p/>
Only a profile owner can designate the restrictions provider.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param provider The component name of the service that implements
           {@link RestrictionsReceiver}. If this param is null, it removes the restrictions
           provider previously assigned.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2372535 "setMasterVolumeMuted"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "on" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to set the master volume mute on or off.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param on {@code true} to mute master volume, {@code false} to turn mute off.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2372663 "isMasterVolumeMuted"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to check whether the master volume mute is on or off.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return {@code true} if master volume is muted, {@code false} if it's not.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2372791 "setUninstallBlocked"
	public explicit_return_type "void"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	  param inout name "uninstallBlocked" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to change whether a user can uninstall a package.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName package to change.
@param uninstallBlocked true if the user shouldn't be able to uninstall the package.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2372919 "isUninstallBlocked"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check whether the user has been blocked by device policy from uninstalling a package.
Requires the caller to be the profile owner if checking a specific admin's policy.
<p>
<strong>Note:</strong> Starting from {@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}, the
behavior of this API is changed such that passing {@code null} as the {@code admin} parameter
will return if any admin has blocked the uninstallation. Before L MR1, passing {@code null}
will cause a NullPointerException to be raised.

@param admin The name of the admin component whose blocking policy will be checked, or
           {@code null} to check whether any admin has blocked the uninstallation.
@param packageName package to check.
@return true if uninstallation is blocked.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2373047 "addCrossProfileWidgetProvider"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the profile owner of a managed profile to enable widget providers from a given
package to be available in the parent profile. As a result the user will be able to add
widgets from the white-listed package running under the profile to a widget host which runs
under the parent profile, for example the home screen. Note that a package may have zero or
more provider components, where each component provides a different widget type.
<p>
<strong>Note:</strong> By default no widget provider package is white-listed.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The package from which widget providers are white-listed.
@return Whether the package was added.
@throws SecurityException if {@code admin} is not a profile owner.
@see #removeCrossProfileWidgetProvider(android.content.ComponentName, String)
@see #getCrossProfileWidgetProviders(android.content.ComponentName)"
      end

      operation 2373175 "removeCrossProfileWidgetProvider"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the profile owner of a managed profile to disable widget providers from a given
package to be available in the parent profile. For this method to take effect the package
should have been added via
{@link #addCrossProfileWidgetProvider( android.content.ComponentName, String)}.
<p>
<strong>Note:</strong> By default no widget provider package is white-listed.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param packageName The package from which widget providers are no longer white-listed.
@return Whether the package was removed.
@throws SecurityException if {@code admin} is not a profile owner.
@see #addCrossProfileWidgetProvider(android.content.ComponentName, String)
@see #getCrossProfileWidgetProviders(android.content.ComponentName)"
      end

      operation 2373303 "getCrossProfileWidgetProviders"
	public return_type class_ref 129591 // String
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the profile owner of a managed profile to query providers from which packages are
available in the parent profile.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return The white-listed package list.
@see #addCrossProfileWidgetProvider(android.content.ComponentName, String)
@see #removeCrossProfileWidgetProvider(android.content.ComponentName, String)
@throws SecurityException if {@code admin} is not a profile owner."
      end

      operation 2373431 "setUserIcon"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "icon" type class_ref 131127 // Bitmap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to set the user's photo.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param icon the bitmap to set as the photo.
@throws SecurityException if {@code admin} is not a device or profile owner."
      end

      operation 2373559 "setSystemUpdatePolicy"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "policy" type class_ref 399287 // SystemUpdatePolicy
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device owners to set a local system update policy. When a new policy is set,
{@link #ACTION_SYSTEM_UPDATE_POLICY_CHANGED} is broadcasted.

@param admin Which {@link DeviceAdminReceiver} this request is associated with. All
           components in the device owner package can set system update policies and the most
           recent policy takes effect.
@param policy the new policy, or {@code null} to clear the current policy.
@throws SecurityException if {@code admin} is not a device owner.
@see SystemUpdatePolicy"
      end

      operation 2373687 "getSystemUpdatePolicy"
	public return_type class_ref 399287 // SystemUpdatePolicy
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve a local system update policy set previously by {@link #setSystemUpdatePolicy}.

@return The current policy object, or {@code null} if no policy is set."
      end

      operation 2373815 "setKeyguardDisabled"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device owner to disable the keyguard altogether.
<p>
Setting the keyguard to disabled has the same effect as choosing \"None\" as the screen lock
type. However, this call has no effect if a password, pin or pattern is currently set. If a
password, pin or pattern is set after the keyguard was disabled, the keyguard stops being
disabled.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param disabled {@code true} disables the keyguard, {@code false} reenables it.
@return {@code false} if attempting to disable the keyguard while a lock password was in
        place. {@code true} otherwise.
@throws SecurityException if {@code admin} is not a device owner."
      end

      operation 2373943 "setStatusBarDisabled"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "disabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device owner to disable the status bar. Disabling the status bar blocks
notifications, quick settings and other screen overlays that allow escaping from a single use
device.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param disabled {@code true} disables the status bar, {@code false} reenables it.
@return {@code false} if attempting to disable the status bar failed. {@code true} otherwise.
@throws SecurityException if {@code admin} is not a device owner."
      end

      operation 2374071 "notifyPendingSystemUpdate"
	public explicit_return_type "void"
	nparams 1
	  param in name "updateReceivedTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Callable by the system update service to notify device owners about pending updates.
The caller must hold {@link android.Manifest.permission#NOTIFY_PENDING_SYSTEM_UPDATE}
permission.

@param updateReceivedTime The time as given by {@link System#currentTimeMillis()} indicating
       when the current pending update was first available. -1 if no update is available.
@hide"
      end

      operation 2374199 "setPermissionPolicy"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "policy" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by profile or device owners to set the default response for future runtime permission
requests by applications. The policy can allow for normal operation which prompts the user to
grant a permission, or can allow automatic granting or denying of runtime permission requests
by an application. This also applies to new permissions declared by app updates. When a
permission is denied or granted this way, the effect is equivalent to setting the permission
grant state via {@link #setPermissionGrantState}.
<p/>
As this policy only acts on runtime permission requests, it only applies to applications
built with a {@code targetSdkVersion} of {@link android.os.Build.VERSION_CODES#M} or later.

@param admin Which profile or device owner this request is associated with.
@param policy One of the policy constants {@link #PERMISSION_POLICY_PROMPT},
           {@link #PERMISSION_POLICY_AUTO_GRANT} and {@link #PERMISSION_POLICY_AUTO_DENY}.
@throws SecurityException if {@code admin} is not a device or profile owner.
@see #setPermissionGrantState"
      end

      operation 2374327 "getPermissionPolicy"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current runtime permission policy set by the device or profile owner. The
default is {@link #PERMISSION_POLICY_PROMPT}.
@param admin Which profile or device owner this request is associated with.
@return the current policy for future permission requests."
      end

      operation 2374455 "setPermissionGrantState"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	  param inout name "permission" type class_ref 129591 // String
	  param in name "grantState" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the grant state of a runtime permission for a specific application. The state can be
{@link #PERMISSION_GRANT_STATE_DEFAULT default} in which a user can manage it through the UI,
{@link #PERMISSION_GRANT_STATE_DENIED denied}, in which the permission is denied and the user
cannot manage it through the UI, and {@link #PERMISSION_GRANT_STATE_GRANTED granted} in which
the permission is granted and the user cannot manage it through the UI. This might affect all
permissions in a group that the runtime permission belongs to. This method can only be called
by a profile or device owner.
<p/>
Setting the grant state to {@link #PERMISSION_GRANT_STATE_DEFAULT default} does not revoke
the permission. It retains the previous grant, if any.
<p/>
Permissions can be granted or revoked only for applications built with a
{@code targetSdkVersion} of {@link android.os.Build.VERSION_CODES#M} or later.

@param admin Which profile or device owner this request is associated with.
@param packageName The application to grant or revoke a permission to.
@param permission The permission to grant or revoke.
@param grantState The permission grant state which is one of
           {@link #PERMISSION_GRANT_STATE_DENIED}, {@link #PERMISSION_GRANT_STATE_DEFAULT},
           {@link #PERMISSION_GRANT_STATE_GRANTED},
@return whether the permission was successfully granted or revoked.
@throws SecurityException if {@code admin} is not a device or profile owner.
@see #PERMISSION_GRANT_STATE_DENIED
@see #PERMISSION_GRANT_STATE_DEFAULT
@see #PERMISSION_GRANT_STATE_GRANTED"
      end

      operation 2374583 "getPermissionGrantState"
	public explicit_return_type "int"
	nparams 3
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "packageName" type class_ref 129591 // String
	  param inout name "permission" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current grant state of a runtime permission for a specific application.

@param admin Which profile or device owner this request is associated with.
@param packageName The application to check the grant state for.
@param permission The permission to check for.
@return the current grant state specified by device policy. If the profile or device owner
        has not set a grant state, the return value is
        {@link #PERMISSION_GRANT_STATE_DEFAULT}. This does not indicate whether or not the
        permission is currently granted for the package.
        <p/>
        If a grant state was set by the profile or device owner, then the return value will
        be one of {@link #PERMISSION_GRANT_STATE_DENIED} or
        {@link #PERMISSION_GRANT_STATE_GRANTED}, which indicates if the permission is
        currently denied or granted.
@throws SecurityException if {@code admin} is not a device or profile owner.
@see #setPermissionGrantState(ComponentName, String, String, int)
@see PackageManager#checkPermission(String, String)"
      end

      operation 2374711 "isProvisioningAllowed"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "action" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns if provisioning a managed profile or device is possible or not.
@param action One of {@link #ACTION_PROVISION_MANAGED_DEVICE},
{@link #ACTION_PROVISION_MANAGED_PROFILE}.
@return if provisioning a managed profile or device is possible or not.
@throws IllegalArgumentException if the supplied action is not valid."
      end

      operation 2374839 "isManagedProfile"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return if this user is a managed profile of another user. An admin can become the profile
owner of a managed profile with {@link #ACTION_PROVISION_MANAGED_PROFILE} and of a managed
user with {@link #createAndManageUser}
@param admin Which profile owner this request is associated with.
@return if this user is a managed profile of another user."
      end

      operation 2374967 "isSystemOnlyUser"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Return if this user is a system-only user. An admin can manage a device from a system only
user by calling {@link #ACTION_PROVISION_MANAGED_SHAREABLE_DEVICE}.
@param admin Which device owner this request is associated with.
@return if this user is a system-only user."
      end

      operation 2375095 "getWifiMacAddress"
	public return_type class_ref 129591 // String
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device owner to get the MAC address of the Wi-Fi device.

@param admin Which device owner this request is associated with.
@return the MAC address of the Wi-Fi device, or null when the information is not available.
        (For example, Wi-Fi hasn't been enabled, or the device doesn't support Wi-Fi.)
        <p>
        The address will be in the {@code XX:XX:XX:XX:XX:XX} format.
@throws SecurityException if {@code admin} is not a device owner."
      end

      operation 2375223 "reboot"
	public explicit_return_type "void"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device owner to reboot the device. If there is an ongoing call on the device,
throws an {@link IllegalStateException}.
@param admin Which device owner the request is associated with.
@throws IllegalStateException if device has an ongoing call.
@throws SecurityException if {@code admin} is not a device owner.
@see TelephonyManager#CALL_STATE_IDLE"
      end

      operation 2375351 "setShortSupportMessage"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "message" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device admin to set the short support message. This will be displayed to the user
in settings screens where funtionality has been disabled by the admin. The message should be
limited to a short statement such as \"This setting is disabled by your administrator. Contact
someone@example.com for support.\" If the message is longer than 200 characters it may be
truncated.
<p>
If the short support message needs to be localized, it is the responsibility of the
{@link DeviceAdminReceiver} to listen to the {@link Intent#ACTION_LOCALE_CHANGED} broadcast
and set a new version of this string accordingly.

@see #setLongSupportMessage
@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param message Short message to be displayed to the user in settings or null to clear the
           existing message.
@throws SecurityException if {@code admin} is not an active administrator."
      end

      operation 2375479 "getShortSupportMessage"
	public explicit_return_type "CharSequence"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device admin to get the short support message.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return The message set by {@link #setShortSupportMessage(ComponentName, CharSequence)} or
        null if no message has been set.
@throws SecurityException if {@code admin} is not an active administrator."
      end

      operation 2375607 "setLongSupportMessage"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "message" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device admin to set the long support message. This will be displayed to the user
in the device administators settings screen.
<p>
If the long support message needs to be localized, it is the responsibility of the
{@link DeviceAdminReceiver} to listen to the {@link Intent#ACTION_LOCALE_CHANGED} broadcast
and set a new version of this string accordingly.

@see #setShortSupportMessage
@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param message Long message to be displayed to the user in settings or null to clear the
           existing message.
@throws SecurityException if {@code admin} is not an active administrator."
      end

      operation 2375735 "getLongSupportMessage"
	public explicit_return_type "CharSequence"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a device admin to get the long support message.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return The message set by {@link #setLongSupportMessage(ComponentName, CharSequence)} or
        null if no message has been set.
@throws SecurityException if {@code admin} is not an active administrator."
      end

      operation 2375863 "getShortSupportMessageForUser"
	public explicit_return_type "CharSequence"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the system to get the short support message.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param userHandle user id the admin is running as.
@return The message set by {@link #setShortSupportMessage(ComponentName, CharSequence)}

@hide"
      end

      operation 2375991 "getLongSupportMessageForUser"
	public explicit_return_type "CharSequence"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the system to get the long support message.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param userHandle user id the admin is running as.
@return The message set by {@link #setLongSupportMessage(ComponentName, CharSequence)}

@hide"
      end

      operation 2376119 "getParentProfileInstance"
	public return_type class_ref 398775 // DevicePolicyManager
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the profile owner of a managed profile to obtain a {@link DevicePolicyManager}
whose calls act on the parent profile.

<p>The following methods are supported for the parent instance, all other methods will
throw a SecurityException when called on the parent instance:
<ul>
<li>{@link #getPasswordQuality}</li>
<li>{@link #setPasswordQuality}</li>
<li>{@link #getPasswordMinimumLength}</li>
<li>{@link #setPasswordMinimumLength}</li>
<li>{@link #getPasswordMinimumUpperCase}</li>
<li>{@link #setPasswordMinimumUpperCase}</li>
<li>{@link #getPasswordMinimumLowerCase}</li>
<li>{@link #setPasswordMinimumLowerCase}</li>
<li>{@link #getPasswordMinimumLetters}</li>
<li>{@link #setPasswordMinimumLetters}</li>
<li>{@link #getPasswordMinimumNumeric}</li>
<li>{@link #setPasswordMinimumNumeric}</li>
<li>{@link #getPasswordMinimumSymbols}</li>
<li>{@link #setPasswordMinimumSymbols}</li>
<li>{@link #getPasswordMinimumNonLetter}</li>
<li>{@link #setPasswordMinimumNonLetter}</li>
<li>{@link #getPasswordHistoryLength}</li>
<li>{@link #setPasswordHistoryLength}</li>
<li>{@link #getPasswordExpirationTimeout}</li>
<li>{@link #setPasswordExpirationTimeout}</li>
<li>{@link #getPasswordExpiration}</li>
<li>{@link #isActivePasswordSufficient}</li>
<li>{@link #getCurrentFailedPasswordAttempts}</li>
<li>{@link #getMaximumFailedPasswordsForWipe}</li>
<li>{@link #setMaximumFailedPasswordsForWipe}</li>
<li>{@link #getMaximumTimeToLock}</li>
<li>{@link #setMaximumTimeToLock}</li>
<li>{@link #lockNow}</li>
<li>{@link #getKeyguardDisabledFeatures}</li>
<li>{@link #setKeyguardDisabledFeatures}</li>
<li>{@link #getTrustAgentConfiguration}</li>
<li>{@link #setTrustAgentConfiguration}</li>
</ul>

@return a new instance of {@link DevicePolicyManager} that acts on the parent profile.
@throws SecurityException if {@code admin} is not a profile owner."
      end

      operation 2376247 "setSecurityLoggingEnabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device owner to control the security logging feature. Logging can only be
enabled on single user devices where the sole user is managed by the device owner.

<p> Security logs contain various information intended for security auditing purposes.
See {@link SecurityEvent} for details.

<p>There must be only one user on the device, managed by the device owner.
Otherwise a {@link SecurityException} will be thrown.

@param admin Which device owner this request is associated with.
@param enabled whether security logging should be enabled or not.
@throws SecurityException if {@code admin} is not a device owner.
@see #retrieveSecurityLogs"
      end

      operation 2376375 "isSecurityLoggingEnabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return whether security logging is enabled or not by the device owner.

<p>Can only be called by the device owner, otherwise a {@link SecurityException} will be
thrown.

@param admin Which device owner this request is associated with.
@return {@code true} if security logging is enabled by device owner, {@code false} otherwise.
@throws SecurityException if {@code admin} is not a device owner."
      end

      operation 2376503 "retrieveSecurityLogs"
	public return_type class_ref 399543 // SecurityEvent
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device owner to retrieve all new security logging entries since the last call to
this API after device boots.

<p> Access to the logs is rate limited and it will only return new logs after the device
owner has been notified via {@link DeviceAdminReceiver#onSecurityLogsAvailable}.

<p>There must be only one user on the device, managed by the device owner.
Otherwise a {@link SecurityException} will be thrown.

@param admin Which device owner this request is associated with.
@return the new batch of security logs which is a list of {@link SecurityEvent},
or {@code null} if rate limitation is exceeded or if logging is currently disabled.
@throws SecurityException if {@code admin} is not a device owner."
      end

      operation 2376631 "getParentProfileInstance"
	public return_type class_ref 398775 // DevicePolicyManager
	nparams 1
	  param inout name "uInfo" type class_ref 334135 // UserInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the system to obtain a {@link DevicePolicyManager} whose calls act on the parent
profile.

@hide"
      end

      operation 2376759 "retrievePreRebootSecurityLogs"
	public return_type class_ref 399543 // SecurityEvent
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by device owners to retrieve device logs from before the device's last reboot.
<p>
<strong> This API is not supported on all devices. Calling this API on unsupported devices
will result in {@code null} being returned. The device logs are retrieved from a RAM region
which is not guaranteed to be corruption-free during power cycles, as a result be cautious
about data corruption when parsing. </strong>
<p>
There must be only one user on the device, managed by the device owner. Otherwise a
{@link SecurityException} will be thrown.

@param admin Which device owner this request is associated with.
@return Device logs from before the latest reboot of the system, or {@code null} if this API
        is not supported on the device.
@throws SecurityException if {@code admin} is not a device owner."
      end

      operation 2376887 "setOrganizationColor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param in name "color" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to set the color used for customization. This
color is used as background color of the confirm credentials screen for that user. The
default color is teal (#00796B).
<p>
The confirm credentials screen can be created using
{@link android.app.KeyguardManager#createConfirmDeviceCredentialIntent}.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param color The 24bit (0xRRGGBB) representation of the color to be used.
@throws SecurityException if {@code admin} is not a profile owner."
      end

      operation 2377015 "setOrganizationColorForUser"
	public explicit_return_type "void"
	nparams 2
	  param in name "color" explicit_type "int"
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@ColorInt ${t0} ${p0}, @UserIdInt ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide

Sets the color used for customization.

@param color The 24bit (0xRRGGBB) representation of the color to be used.
@param userId which user to set the color to.
@RequiresPermission(allOf = {
      Manifest.permission.MANAGE_USERS,
      Manifest.permission.INTERACT_ACROSS_USERS_FULL})"
      end

      operation 2377143 "getOrganizationColor"
	public explicit_return_type "int"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ColorInt
"
	
	
	
	comment "Called by a profile owner of a managed profile to retrieve the color used for customization.
This color is used as background color of the confirm credentials screen for that user.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return The 24bit (0xRRGGBB) representation of the color to be used.
@throws SecurityException if {@code admin} is not a profile owner."
      end

      operation 2377271 "getOrganizationColorForUser"
	public explicit_return_type "int"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ColorInt
"
	
	
	
	comment "@hide
Retrieve the customization color for a given user.

@param userHandle The user id of the user we're interested in.
@return The 24bit (0xRRGGBB) representation of the color to be used."
      end

      operation 2377399 "setOrganizationName"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "title" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to set the name of the organization under
management.
<p>
If the organization name needs to be localized, it is the responsibility of the
{@link DeviceAdminReceiver} to listen to the {@link Intent#ACTION_LOCALE_CHANGED} broadcast
and set a new version of this string accordingly.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@param title The organization name or {@code null} to clear a previously set name.
@throws SecurityException if {@code admin} is not a profile owner."
      end

      operation 2377527 "getOrganizationName"
	public explicit_return_type "CharSequence"
	nparams 1
	  param inout name "admin" type class_ref 132279 // ComponentName
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a profile owner of a managed profile to retrieve the name of the organization under
management.

@param admin Which {@link DeviceAdminReceiver} this request is associated with.
@return The organization name or {@code null} if none is set.
@throws SecurityException if {@code admin} is not a profile owner."
      end

      operation 2377655 "getOrganizationNameForUser"
	public explicit_return_type "CharSequence"
	nparams 1
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the default title message used in the confirm credentials screen for a given user.

@param userHandle The user id of the user we're interested in.
@return The organization name or {@code null} if none is set.

@hide"
      end

      operation 2377783 "getUserProvisioningState"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
@UserProvisioningState
"
	
	
	
	comment "@return the {@link UserProvisioningState} for the current user - for unmanaged users will
        return {@link #STATE_USER_UNMANAGED}
@hide"
      end

      operation 2377911 "setUserProvisioningState"
	public explicit_return_type "void"
	nparams 2
	  param in name "state" explicit_type "int"
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@UserProvisioningState ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the {@link UserProvisioningState} for the supplied user, if they are managed.

@param state to store
@param userHandle for user
@hide"
      end

      operation 2378039 "setAffiliationIds"
	public explicit_return_type "void"
	nparams 2
	  param inout name "admin" type class_ref 132279 // ComponentName
	  param inout name "ids" explicit_type "Set<String>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Indicates the entity that controls the device or profile owner. A user/profile is considered
affiliated if it is managed by the same entity as the device.

<p> By definition, the user that the device owner runs on is always affiliated. Any other
user/profile is considered affiliated if the following conditions are both met:
<ul>
<li>The device owner and the user's/profile's profile owner have called this method,
  specifying a set of opaque affiliation ids each. If the sets specified by the device owner
  and a profile owner intersect, they must have come from the same source, which means that
  the device owner and profile owner are controlled by the same entity.</li>
<li>The device owner's and profile owner's package names are the same.</li>
</ul>

@param admin Which profile or device owner this request is associated with.
@param ids A set of opaque affiliation ids."
      end

      operation 2378167 "isAffiliatedUser"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Returns whether this user/profile is affiliated with the device. See
{@link #setAffiliationIds} for the definition of affiliation.

@return whether this user/profile is affiliated with the device."
      end

      operation 2378295 "isUninstallInQueue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Returns whether the uninstall for {@code packageName} for the current user is in queue
to be started
@param packageName the package to check for
@return whether the uninstall intent for {@code packageName} is pending"
      end

      operation 2378423 "uninstallPackageWithActiveAdmins"
	public explicit_return_type "void"
	nparams 1
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
@param packageName the package containing active DAs to be uninstalled"
      end

      operation 2378551 "forceRemoveActiveAdmin"
	public explicit_return_type "void"
	nparams 2
	  param inout name "adminReceiver" type class_ref 132279 // ComponentName
	  param in name "userHandle" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide
Remove a test admin synchronously without sending it a broadcast about being removed.
If the admin is a profile owner or device owner it will still be removed.

@param userHandle user id to remove the admin for.
@param admin The administration compononent to remove.
@throws SecurityException if the caller is not shell / root or the admin package
        isn't a test application see {@link ApplicationInfo#FLAG_TEST_APP}."
      end

      operation 2378679 "throwIfParentInstance"
	private explicit_return_type "void"
	nparams 1
	  param inout name "functionName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 399287 "SystemUpdatePolicy"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A class that represents a local system update policy set by the device owner.

@see DevicePolicyManager#setSystemUpdatePolicy
@see DevicePolicyManager#getSystemUpdatePolicy"
      classrelation 913975 // <realization>
	relation 913975 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 913975 // <realization>
	  b parent class_ref 137399 // Parcelable
      end

      class 400311 "SystemUpdatePolicyType"
	visibility package stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef({
        TYPE_INSTALL_AUTOMATIC,
        TYPE_INSTALL_WINDOWED,
        TYPE_POSTPONE})
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 904503 "TYPE_UNKNOWN"
	class_attribute const_attribute private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Unknown policy type, used only internally.
"
      end

      attribute 904631 "TYPE_INSTALL_AUTOMATIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Install system update automatically as soon as one is available.
"
      end

      attribute 904759 "TYPE_INSTALL_WINDOWED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Install system update automatically within a daily maintenance window, for a maximum of 30
days. After the expiration the policy will no longer be effective and the system should
revert back to its normal behavior as if no policy were set. The only exception is
{@link #TYPE_INSTALL_AUTOMATIC} which should still take effect to install system update
immediately.
"
      end

      attribute 904887 "TYPE_POSTPONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Incoming system update will be blocked for a maximum of 30 days, after which the system
should revert back to its normal behavior as if no policy were set. The only exception is
{@link #TYPE_INSTALL_AUTOMATIC} which should still take effect to install system update
immediately.
"
      end

      classrelation 914103 // KEY_POLICY_TYPE (<unidirectional association>)
	relation 914103 --->
	  a role_name "KEY_POLICY_TYPE" init_value " \"policy_type\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 914103 // KEY_POLICY_TYPE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 914231 // KEY_INSTALL_WINDOW_START (<unidirectional association>)
	relation 914231 --->
	  a role_name "KEY_INSTALL_WINDOW_START" init_value " \"install_window_start\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 914231 // KEY_INSTALL_WINDOW_START (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 914359 // KEY_INSTALL_WINDOW_END (<unidirectional association>)
	relation 914359 --->
	  a role_name "KEY_INSTALL_WINDOW_END" init_value " \"install_window_end\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 914359 // KEY_INSTALL_WINDOW_END (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 905015 "WINDOW_BOUNDARY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 24 * 60"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The upper boundary of the daily maintenance window: 24 * 60 minutes.
"
      end

      attribute 905143 "mPolicyType"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemUpdatePolicyType
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 905271 "mMaintenanceWindowStart"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 905399 "mMaintenanceWindowEnd"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 2381367 "SystemUpdatePolicy"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2381495 "createAutomaticInstallPolicy"
	class_operation public return_type class_ref 399287 // SystemUpdatePolicy
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a policy object and set it to install update automatically as soon as one is
available.

@see #TYPE_INSTALL_AUTOMATIC"
      end

      operation 2381623 "createWindowedInstallPolicy"
	class_operation public return_type class_ref 399287 // SystemUpdatePolicy
	nparams 2
	  param in name "startTime" explicit_type "int"
	  param in name "endTime" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a policy object and set it to: new system update will only be installed automatically
when the system clock is inside a daily maintenance window. If the start and end times are
the same, the window is considered to include the WHOLE 24 hours, that is, updates can
install at any time. If the given window in invalid, a {@link IllegalArgumentException} will
be thrown. If start time is later than end time, the window is considered spanning midnight,
i.e. end time donates a time on the next day. The maintenance window will last for 30 days,
after which the system should revert back to its normal behavior as if no policy were set.

@param startTime the start of the maintenance window, measured as the number of minutes from
           midnight in the device's local time. Must be in the range of [0, 1440).
@param endTime the end of the maintenance window, measured as the number of minutes from
           midnight in the device's local time. Must be in the range of [0, 1440).
@see #TYPE_INSTALL_WINDOWED"
      end

      operation 2381751 "createPostponeInstallPolicy"
	class_operation public return_type class_ref 399287 // SystemUpdatePolicy
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a policy object and set it to block installation for a maximum period of 30 days.
After expiration the system should revert back to its normal behavior as if no policy were
set.

@see #TYPE_POSTPONE"
      end

      operation 2381879 "getPolicyType"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemUpdatePolicyType
"
	
	
	
	comment "Returns the type of system update policy.

@return an integer, either one of {@link #TYPE_INSTALL_AUTOMATIC},
{@link #TYPE_INSTALL_WINDOWED} and {@link #TYPE_POSTPONE}, or -1 if no policy has been set."
      end

      operation 2382007 "getInstallWindowStart"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the start of the maintenance window.

@return the start of the maintenance window measured as the number of minutes from midnight,
or -1 if the policy does not have a maintenance window."
      end

      operation 2382135 "getInstallWindowEnd"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the end of the maintenance window.

@return the end of the maintenance window measured as the number of minutes from midnight,
or -1 if the policy does not have a maintenance window."
      end

      operation 2382263 "isValid"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return if this object represents a valid policy.
@hide"
      end

      operation 2382391 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2382519 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2382647 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 137527 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 914487 // CREATOR (<unidirectional association>)
	relation 914487 --->
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<SystemUpdatePolicy>() {

                @Override
                public SystemUpdatePolicy createFromParcel(Parcel source) {
                    SystemUpdatePolicy policy = new SystemUpdatePolicy();
                    policy.mPolicyType = source.readInt();
                    policy.mMaintenanceWindowStart = source.readInt();
                    policy.mMaintenanceWindowEnd = source.readInt();
                    return policy;
                }

                @Override
                public SystemUpdatePolicy[] newArray(int size) {
                    return new SystemUpdatePolicy[size];
                }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<SystemUpdatePolicy> ${name}${value};
"
	    classrelation_ref 914487 // CREATOR (<unidirectional association>)
	  b parent class_ref 137655 // Creator
      end

      operation 2382775 "restoreFromXml"
	class_operation public return_type class_ref 399287 // SystemUpdatePolicy
	nparams 1
	  param inout name "parser" explicit_type "XmlPullParser"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2382903 "saveToXml"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" explicit_type "XmlSerializer"
	nexceptions 1
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end
    end

    class 399415 "SecurityLog"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 399543 "SecurityEvent"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 913591 // <realization>
	  relation 913591 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 913591 // <realization>
	    b parent class_ref 137399 // Parcelable
	end

	classrelation 913719 // mEvent (<unidirectional association>)
	  relation 913719 --->
	    a role_name "mEvent" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 913719 // mEvent (<unidirectional association>)
	    b parent class_ref 400183 // Event
	end

	operation 2379831 "SecurityEvent"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "data" explicit_type "byte"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " @hide 
package"
	end

	operation 2379959 "getTimeNanos"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the timestamp in nano seconds when this event was logged."
	end

	operation 2380087 "getTag"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SECURITY_LOG_TAG
"
	  
	  
	  
	  comment "Returns the tag of this log entry, which specifies entry's semantics.
Could be one of {@link SecurityLog#TAG_SYNC_RECV_FILE},
{@link SecurityLog#TAG_SYNC_SEND_FILE}, {@link SecurityLog#TAG_ADB_SHELL_CMD},
{@link SecurityLog#TAG_ADB_SHELL_INTERACTIVE}, {@link SecurityLog#TAG_APP_PROCESS_START},
{@link SecurityLog#TAG_KEYGUARD_DISMISSED}, {@link SecurityLog#TAG_KEYGUARD_SECURED},
{@link SecurityLog#TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT}."
	end

	operation 2380215 "getData"
	  public return_type class_ref 132663 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the payload contained in this log. Each call to this method will
retrieve the next payload item. If no more payload exists, it returns {@code null}."
	end

	operation 2380343 "describeContents"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2380471 "writeToParcel"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "dest" type class_ref 137527 // Parcel
	    param in name "flags" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	classrelation 913847 // CREATOR (<unidirectional association>)
	  relation 913847 --->
	    a role_name "CREATOR" init_value "
                new Parcelable.Creator<SecurityEvent>() {
            @Override
            public SecurityEvent createFromParcel(Parcel source) {
                return new SecurityEvent(source.createByteArray());
            }

            @Override
            public SecurityEvent[] newArray(int size) {
                return new SecurityEvent[size];
            }
        }" class_relation const_relation public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<SecurityEvent> ${name}${value};
"
	      classrelation_ref 913847 // CREATOR (<unidirectional association>)
	    b parent class_ref 137655 // Creator
	end
      end

      classrelation 913463 // PROPERTY_LOGGING_ENABLED (<unidirectional association>)
	relation 913463 --->
	  a role_name "PROPERTY_LOGGING_ENABLED" init_value " \"persist.logd.security\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 913463 // PROPERTY_LOGGING_ENABLED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      class 399927 "SECURITY_LOG_TAG"
	visibility public stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@Retention(RetentionPolicy.SOURCE)
@IntDef({TAG_ADB_SHELL_INTERACTIVE, TAG_ADB_SHELL_CMD, TAG_SYNC_RECV_FILE, TAG_SYNC_SEND_FILE,
        TAG_APP_PROCESS_START, TAG_KEYGUARD_DISMISSED, TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT,
        TAG_KEYGUARD_SECURED})
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 903479 "TAG_ADB_SHELL_INTERACTIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value "
            SecurityLogTags.SECURITY_ADB_SHELL_INTERACTIVE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicate that an ADB interactive shell was opened via \"adb shell\".
There is no extra payload in the log event.
"
      end

      attribute 903607 "TAG_ADB_SHELL_CMD"
	class_attribute const_attribute public explicit_type "int"
	init_value " SecurityLogTags.SECURITY_ADB_SHELL_COMMAND"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicate that an shell command was issued over ADB via \"adb shell command\"
The log entry contains a string data of the shell command, accessible via
{@link SecurityEvent#getData()}
"
      end

      attribute 903735 "TAG_SYNC_RECV_FILE"
	class_attribute const_attribute public explicit_type "int"
	init_value " SecurityLogTags.SECURITY_ADB_SYNC_RECV"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicate that a file was pulled from the device via the adb daemon, for example via
\"adb pull\". The log entry contains a string data of the path of the pulled file,
accessible via {@link SecurityEvent#getData()}
"
      end

      attribute 903863 "TAG_SYNC_SEND_FILE"
	class_attribute const_attribute public explicit_type "int"
	init_value " SecurityLogTags.SECURITY_ADB_SYNC_SEND"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicate that a file was pushed to the device via the adb daemon, for example via
\"adb push\". The log entry contains a string data of the destination path of the
pushed file, accessible via {@link SecurityEvent#getData()}
"
      end

      attribute 903991 "TAG_APP_PROCESS_START"
	class_attribute const_attribute public explicit_type "int"
	init_value " SecurityLogTags.SECURITY_APP_PROCESS_START"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicate that an app process was started. The log entry contains the following
information about the process encapsulated in an {@link Object} array, accessible via
{@link SecurityEvent#getData()}:
process name (String), exact start time (long), app Uid (integer), app Pid (integer),
seinfo tag (String), SHA-256 hash of the base APK in hexadecimal (String)
"
      end

      attribute 904119 "TAG_KEYGUARD_DISMISSED"
	class_attribute const_attribute public explicit_type "int"
	init_value "
            SecurityLogTags.SECURITY_KEYGUARD_DISMISSED"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicate that keyguard is being dismissed.
There is no extra payload in the log event.
"
      end

      attribute 904247 "TAG_KEYGUARD_DISMISS_AUTH_ATTEMPT"
	class_attribute const_attribute public explicit_type "int"
	init_value "
            SecurityLogTags.SECURITY_KEYGUARD_DISMISS_AUTH_ATTEMPT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicate that there has been an authentication attempt to dismiss the keyguard. The log entry
contains the following information about the attempt encapsulated in an {@link Object} array,
accessible via {@link SecurityEvent#getData()}:
attempt result (integer, 1 for successful, 0 for unsuccessful), strength of auth method
(integer, 1 if strong auth method was used, 0 otherwise)
"
      end

      attribute 904375 "TAG_KEYGUARD_SECURED"
	class_attribute const_attribute public explicit_type "int"
	init_value " SecurityLogTags.SECURITY_KEYGUARD_SECURED"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicate that the device has been locked, either by user or by timeout.
There is no extra payload in the log event.
"
      end

      operation 2379447 "isLoggingEnabled"
	class_operation public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
	comment "Returns if security logging is enabled. Log producers should only write new logs if this is
true. Under the hood this is the logical AND of whether device owner exists and whether
it enables logging by setting the system property {@link #PROPERTY_LOGGING_ENABLED}.
@hide"
      end

      operation 2379575 "setLoggingEnabledProperty"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2379703 "getLoggingEnabledProperty"
	class_operation public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2380599 "readEvents"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "output" explicit_type "Collection<SecurityEvent>"
	nexceptions 1
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "Retrieve all security logs and return immediately.
@hide"
      end

      operation 2380727 "readEventsSince"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "timestamp" explicit_type "long"
	  param inout name "output" explicit_type "Collection<SecurityEvent>"
	nexceptions 1
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Retrieve all security logs since the given timestamp in nanoseconds and return immediately.
@hide"
      end

      operation 2380855 "readPreviousEvents"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "output" explicit_type "Collection<SecurityEvent>"
	nexceptions 1
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "Retrieve all security logs before the last reboot. May return corrupted data due to
unreliable pstore.
@hide"
      end

      operation 2380983 "readEventsOnWrapping"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "timestamp" explicit_type "long"
	  param inout name "output" explicit_type "Collection<SecurityEvent>"
	nexceptions 1
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Retrieve all security logs whose timestamp (in nanosceonds) is equal to or greater than the
given timestamp. This method will block until either the last log earlier than the given
timestamp is about to be pruned, or after a 2-hour timeout has passed.
@hide"
      end

      operation 2381111 "writeEvent"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "tag" explicit_type "int"
	  param inout name "str" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Write a log entry to the underlying storage, with a string payload.
@hide"
      end

      operation 2381239 "writeEvent"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "tag" explicit_type "int"
	  param inout name "" explicit_type "Object...payloads"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Write a log entry to the underlying storage, with several payloads.
Supported types of payload are: integer, long, float, string plus array of supported types.
@hide"
      end
    end

    class 399671 "DevicePolicyManagerInternal"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Device policy manager local system service interface.

@hide Only for use within the system server."
      class 399799 "OnCrossProfileWidgetProvidersChangeListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 2378807 "onCrossProfileWidgetProvidersChanged"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "profileId" explicit_type "int"
	    param inout name "packages" explicit_type "List<String>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when the white-listed packages to show cross-profile widgets
have changed for a given user.

@param profileId The profile for which the white-listed packages changed.
@param packages The white-listed packages."
	end
      end

      operation 2378935 "getCrossProfileWidgetProviders"
	abstract public return_type class_ref 129591 // String
	nparams 1
	  param in name "profileId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the packages whose widget providers are white-listed to be
available in the parent user.

<p>This takes the DPMS lock.  DO NOT call from PM/UM/AM with their lock held.

@param profileId The profile id.
@return The list of packages if such or empty list if there are
   no white-listed packages or the profile id is not a managed
   profile."
      end

      operation 2379063 "addOnCrossProfileWidgetProvidersChangeListener"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 399799 // OnCrossProfileWidgetProvidersChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener for changes in the white-listed packages to show
cross-profile app widgets.

<p>This takes the DPMS lock.  DO NOT call from PM/UM/AM with their lock held.

@param listener The listener to add."
      end

      operation 2379191 "isActiveAdminWithPolicy"
	abstract public explicit_return_type "boolean"
	nparams 2
	  param in name "uid" explicit_type "int"
	  param in name "reqPolicy" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if an app with given uid is an active device admin of its user and has the policy
specified.

<p>This takes the DPMS lock.  DO NOT call from PM/UM/AM with their lock held.

@param uid App uid.
@param reqPolicy Required policy, for policies see {@link DevicePolicyManager}.
@return true if the uid is an active admin with the given policy."
      end

      operation 2379319 "createPackageSuspendedDialogIntent"
	abstract public return_type class_ref 131255 // Intent
	nparams 2
	  param inout name "packageName" type class_ref 129591 // String
	  param in name "userId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an intent to show the admin support dialog to let the user know that the package is
suspended by the admin. This assumes that {@param packageName} is suspended by the
device/profile owner. The caller should check if the package is suspended or not.

<p>This method does not take the DPMS lock.  Safe to be called from anywhere.

@param packageName The package that is suspended
@param userId The user having the suspended package.
@return The intent to trigger the admin support dialog."
      end
    end
  end

  deploymentview 148919 "admin"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 260279 "DeviceAdminInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
import android.annotation.NonNull;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.content.res.Resources.NotFoundException;
import android.graphics.drawable.Drawable;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.AttributeSet;
import android.util.Log;
import android.util.Printer;
import android.util.SparseArray;
import android.util.Xml;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
${definition}"
      associated_classes
	class_ref 398263 // DeviceAdminInfo
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 260407 "DeviceAdminReceiver"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.accounts.AccountManager;
import android.annotation.IntDef;
import android.annotation.SdkConstant;
import android.annotation.SdkConstant.SdkConstantType;
import android.annotation.SystemApi;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.security.KeyChain;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
${definition}"
      associated_classes
	class_ref 398519 // DeviceAdminReceiver
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 260535 "DevicePolicyManager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.ColorInt;
import android.annotation.IntDef;
import android.annotation.NonNull;
import android.annotation.Nullable;
import android.annotation.SdkConstant;
import android.annotation.SdkConstant.SdkConstantType;
import android.annotation.SystemApi;
import android.annotation.UserIdInt;
import android.app.Activity;
import android.app.admin.SecurityLog.SecurityEvent;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ParceledListSlice;
import android.content.pm.UserInfo;
import android.graphics.Bitmap;
import android.net.ProxyInfo;
import android.net.Uri;
import android.os.Bundle;
import android.os.PersistableBundle;
import android.os.Process;
import android.os.RemoteCallback;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.os.UserHandle;
import android.os.UserManager;
import android.provider.ContactsContract.Directory;
import android.provider.Settings;
import android.security.Credentials;
import android.service.restrictions.RestrictionsReceiver;
import android.telephony.TelephonyManager;
import android.util.Log;
import com.android.internal.annotations.VisibleForTesting;
import com.android.org.conscrypt.TrustedCertificateStore;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 398775 // DevicePolicyManager
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 260663 "DevicePolicyManagerInternal"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Intent;
import java.util.List;
${definition}"
      associated_classes
	class_ref 399671 // DevicePolicyManagerInternal
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 260791 "SecurityLog"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.IntDef;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.SystemProperties;
import android.util.EventLog.Event;
import java.io.IOException;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.Collection;
${definition}"
      associated_classes
	class_ref 399415 // SecurityLog
      end
      comment "Copyright (C) 2016 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 260919 "SystemUpdatePolicy"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.IntDef;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.PersistableBundle;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlSerializer;
import java.io.IOException;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
${definition}"
      associated_classes
	class_ref 399287 // SystemUpdatePolicy
      end
      comment "Copyright (C) 2015 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
