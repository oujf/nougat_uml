class ShortcutPackageInfo
!!!33409463.java!!!	ShortcutPackageInfo(in versionCode : int, inout sigHashes : ArrayList<byte[]>, inout isShadow : boolean)
        mVersionCode = versionCode;
        mIsShadow = isShadow;
        mSigHashes = sigHashes;
!!!33409591.java!!!	newEmpty() : ShortcutPackageInfo
        return new ShortcutPackageInfo(VERSION_UNKNOWN, new ArrayList<>(0), /* isShadow */ false);
!!!33409719.java!!!	isShadow() : boolean
        return mIsShadow;
!!!33409847.java!!!	setShadow(inout shadow : boolean) : void
        mIsShadow = shadow;
!!!33409975.java!!!	getVersionCode() : int
        return mVersionCode;
!!!33410103.java!!!	setVersionCode(in versionCode : int) : void
        mVersionCode = versionCode;
!!!33410231.java!!!	hasSignatures() : boolean
        return mSigHashes.size() > 0;
!!!33410359.java!!!	canRestoreTo(inout s : ShortcutService, inout target : PackageInfo) : boolean
        if (!s.shouldBackupApp(target)) {
            // "allowBackup" was true when backed up, but now false.
            Slog.w(TAG, "Can't restore: package no longer allows backup");
            return false;
        }
        if (target.versionCode < mVersionCode) {
            Slog.w(TAG, String.format(
                    "Can't restore: package current version %d < backed up version %d",
                    target.versionCode, mVersionCode));
            return false;
        }
        if (!BackupUtils.signaturesMatch(mSigHashes, target)) {
            Slog.w(TAG, "Can't restore: Package signature mismatch");
            return false;
        }
        return true;
!!!33410487.java!!!	generateForInstalledPackage(inout s : ShortcutService, inout packageName : String, in packageUserId : int) : ShortcutPackageInfo
        final PackageInfo pi = s.getPackageInfoWithSignatures(packageName, packageUserId);
        if (pi.signatures == null || pi.signatures.length == 0) {
            Slog.e(TAG, "Can't get signatures: package=" + packageName);
            return null;
        }
        final ShortcutPackageInfo ret = new ShortcutPackageInfo(pi.versionCode,
                BackupUtils.hashSignatureArray(pi.signatures), /* shadow=*/ false);

        return ret;
!!!33410615.java!!!	refresh(inout s : ShortcutService, inout pkg : ShortcutPackageItem) : void
        if (mIsShadow) {
            s.wtf("Attempted to refresh package info for shadow package " + pkg.getPackageName()
                    + ", user=" + pkg.getOwnerUserId());
            return;
        }
        // Note use mUserId here, rather than userId.
        final PackageInfo pi = s.getPackageInfoWithSignatures(
                pkg.getPackageName(), pkg.getPackageUserId());
        if (pi == null) {
            Slog.w(TAG, "Package not found: " + pkg.getPackageName());
            return;
        }
        mVersionCode = pi.versionCode;
        mSigHashes = BackupUtils.hashSignatureArray(pi.signatures);
!!!33410743.java!!!	saveToXml(inout out : XmlSerializer) : void

        out.startTag(null, TAG_ROOT);

        ShortcutService.writeAttr(out, ATTR_VERSION, mVersionCode);
        ShortcutService.writeAttr(out, ATTR_SHADOW, mIsShadow);

        for (int i = 0; i < mSigHashes.size(); i++) {
            out.startTag(null, TAG_SIGNATURE);
            ShortcutService.writeAttr(out, ATTR_SIGNATURE_HASH, Base64.encode(mSigHashes.get(i)));
            out.endTag(null, TAG_SIGNATURE);
        }
        out.endTag(null, TAG_ROOT);
!!!33410871.java!!!	loadFromXml(inout parser : XmlPullParser, inout fromBackup : boolean) : void

        final int versionCode = ShortcutService.parseIntAttribute(parser, ATTR_VERSION);

        // When restoring from backup, it's always shadow.
        final boolean shadow =
                fromBackup || ShortcutService.parseBooleanAttribute(parser, ATTR_SHADOW);

        final ArrayList<byte[]> hashes = new ArrayList<>();

        final int outerDepth = parser.getDepth();
        int type;
        while ((type = parser.next()) != XmlPullParser.END_DOCUMENT
                && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
            if (type != XmlPullParser.START_TAG) {
                continue;
            }
            final int depth = parser.getDepth();
            final String tag = parser.getName();

            if (depth == outerDepth + 1) {
                switch (tag) {
                    case TAG_SIGNATURE: {
                        final String hash = ShortcutService.parseStringAttribute(
                                parser, ATTR_SIGNATURE_HASH);
                        hashes.add(Base64.decode(hash.getBytes()));
                        continue;
                    }
                }
            }
            ShortcutService.warnForInvalidTag(depth, tag);
        }

        // Successfully loaded; replace the feilds.
        mVersionCode = versionCode;
        mIsShadow = shadow;
        mSigHashes = hashes;
!!!33410999.java!!!	dump(inout s : ShortcutService, inout pw : PrintWriter, inout prefix : String) : void
        pw.println();

        pw.print(prefix);
        pw.println("PackageInfo:");

        pw.print(prefix);
        pw.print("  IsShadow: ");
        pw.print(mIsShadow);
        pw.println();

        pw.print(prefix);
        pw.print("  Version: ");
        pw.print(mVersionCode);
        pw.println();

        for (int i = 0; i < mSigHashes.size(); i++) {
            pw.print(prefix);
            pw.print("    ");
            pw.print("SigHash: ");
            pw.println(HexEncoding.encode(mSigHashes.get(i)));
        }
