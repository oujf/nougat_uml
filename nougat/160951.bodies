class DalvInsn
!!!412599.java!!!	makeMove(inout position : SourcePosition, inout dest : RegisterSpec, inout src : RegisterSpec) : SimpleInsn
        boolean category1 = dest.getCategory() == 1;
        boolean reference = dest.getType().isReference();
        int destReg = dest.getReg();
        int srcReg = src.getReg();
        Dop opcode;

        if ((srcReg | destReg) < 16) {
            opcode = reference ? Dops.MOVE_OBJECT :
                (category1 ? Dops.MOVE : Dops.MOVE_WIDE);
        } else if (destReg < 256) {
            opcode = reference ? Dops.MOVE_OBJECT_FROM16 :
                (category1 ? Dops.MOVE_FROM16 : Dops.MOVE_WIDE_FROM16);
        } else {
            opcode = reference ? Dops.MOVE_OBJECT_16 :
                (category1 ? Dops.MOVE_16 : Dops.MOVE_WIDE_16);
        }

        return new SimpleInsn(opcode, position,
                              RegisterSpecList.make(dest, src));
!!!412727.java!!!	DalvInsn(inout opcode : Dop, inout position : SourcePosition, inout registers : RegisterSpecList)
        if (opcode == null) {
            throw new NullPointerException("opcode == null");
        }

        if (position == null) {
            throw new NullPointerException("position == null");
        }

        if (registers == null) {
            throw new NullPointerException("registers == null");
        }

        this.address = -1;
        this.opcode = opcode;
        this.position = position;
        this.registers = registers;
!!!412855.java!!!	toString() : String
        StringBuffer sb = new StringBuffer(100);

        sb.append(identifierString());
        sb.append(' ');
        sb.append(position);

        sb.append(": ");
        sb.append(opcode.getName());

        boolean needComma = false;
        if (registers.size() != 0) {
            sb.append(registers.toHuman(" ", ", ", null));
            needComma = true;
        }

        String extra = argString();
        if (extra != null) {
            if (needComma) {
                sb.append(',');
            }
            sb.append(' ');
            sb.append(extra);
        }

        return sb.toString();
!!!412983.java!!!	hasAddress() : boolean
        return (address >= 0);
!!!413111.java!!!	getAddress() : int
        if (address < 0) {
            throw new RuntimeException("address not yet known");
        }

        return address;
!!!413239.java!!!	getOpcode() : Dop
        return opcode;
!!!413367.java!!!	getPosition() : SourcePosition
        return position;
!!!413495.java!!!	getRegisters() : RegisterSpecList
        return registers;
!!!413623.java!!!	hasResult() : boolean
        return opcode.hasResult();
!!!413751.java!!!	getMinimumRegisterRequirement() : int
        boolean hasResult = hasResult();
        int regSz = registers.size();
        int resultRequirement = hasResult ? registers.get(0).getCategory() : 0;
        int sourceRequirement = 0;

        for (int i = hasResult ? 1 : 0; i < regSz; i++) {
            sourceRequirement += registers.get(i).getCategory();
        }

        return Math.max(sourceRequirement, resultRequirement);
!!!413879.java!!!	hrPrefix() : DalvInsn
        RegisterSpecList regs = registers;
        int sz = regs.size();

        if (hasResult()) {
            if (sz == 1) {
                return null;
            }
            regs = regs.withoutFirst();
        } else if (sz == 0) {
            return null;
        }

        return new HighRegisterPrefix(position, regs);
!!!414007.java!!!	hrSuffix() : DalvInsn
        if (hasResult()) {
            RegisterSpec r = registers.get(0);
            return makeMove(position, r, r.withReg(0));
        } else {
            return null;
        }
!!!414135.java!!!	hrVersion() : DalvInsn
        RegisterSpecList regs =
            registers.withSequentialRegisters(0, hasResult());
        return withRegisters(regs);
!!!414263.java!!!	identifierString() : String
        if (address != -1) {
            return String.format("%04x", address);
        }

        return Hex.u4(System.identityHashCode(this));
!!!414391.java!!!	listingString(inout prefix : String, in width : int, inout noteIndices : boolean) : String
        String insnPerSe = listingString0(noteIndices);

        if (insnPerSe == null) {
            return null;
        }

        String addr = prefix + identifierString() + ": ";
        int w1 = addr.length();
        int w2 = (width == 0) ? insnPerSe.length() : (width - w1);

        return TwoColumnOutput.toString(addr, w1, "", insnPerSe, w2);
!!!414519.java!!!	setAddress(in address : int) : void
        if (address < 0) {
            throw new IllegalArgumentException("address < 0");
        }

        this.address = address;
!!!414647.java!!!	getNextAddress() : int
        return getAddress() + codeSize();
