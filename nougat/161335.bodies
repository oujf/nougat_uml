class RegisterSpecList
!!!583735.java!!!	make(inout spec : RegisterSpec) : RegisterSpecList
        RegisterSpecList result = new RegisterSpecList(1);
        result.set(0, spec);
        return result;
!!!583863.java!!!	make(inout spec0 : RegisterSpec, inout spec1 : RegisterSpec) : RegisterSpecList
        RegisterSpecList result = new RegisterSpecList(2);
        result.set(0, spec0);
        result.set(1, spec1);
        return result;
!!!583991.java!!!	make(inout spec0 : RegisterSpec, inout spec1 : RegisterSpec, inout spec2 : RegisterSpec) : RegisterSpecList
        RegisterSpecList result = new RegisterSpecList(3);
        result.set(0, spec0);
        result.set(1, spec1);
        result.set(2, spec2);
        return result;
!!!584119.java!!!	make(inout spec0 : RegisterSpec, inout spec1 : RegisterSpec, inout spec2 : RegisterSpec, inout spec3 : RegisterSpec) : RegisterSpecList
        RegisterSpecList result = new RegisterSpecList(4);
        result.set(0, spec0);
        result.set(1, spec1);
        result.set(2, spec2);
        result.set(3, spec3);
        return result;
!!!584247.java!!!	RegisterSpecList(in size : int)
        super(size);
!!!584375.java!!!	getType(in n : int) : Type
        return get(n).getType().getType();
!!!584503.java!!!	getWordCount() : int
        int sz = size();
        int result = 0;

        for (int i = 0; i < sz; i++) {
            result += getType(i).getCategory();
        }

        return result;
!!!584631.java!!!	withAddedType(inout type : Type) : TypeList
        throw new UnsupportedOperationException("unsupported");
!!!584759.java!!!	get(in n : int) : RegisterSpec
        return (RegisterSpec) get0(n);
!!!584887.java!!!	specForRegister(in reg : int) : RegisterSpec
        int sz = size();
        for (int i = 0; i < sz; i++) {
            RegisterSpec rs;

            rs = get(i);

            if (rs.getReg() == reg) {
                return rs;
            }
        }

        return null;
!!!585015.java!!!	indexOfRegister(in reg : int) : int
        int sz = size();
        for (int i = 0; i < sz; i++) {
            RegisterSpec rs;

            rs = get(i);

            if (rs.getReg() == reg) {
                return i;
            }
        }

        return -1;
!!!585143.java!!!	set(in n : int, inout spec : RegisterSpec) : void
        set0(n, spec);
!!!585271.java!!!	getRegistersSize() : int
        int sz = size();
        int result = 0;

        for (int i = 0; i < sz; i++) {
            RegisterSpec spec = (RegisterSpec) get0(i);
            if (spec != null) {
                int min = spec.getNextReg();
                if (min > result) {
                    result = min;
                }
            }
        }

        return result;
!!!585399.java!!!	withFirst(inout spec : RegisterSpec) : RegisterSpecList
        int sz = size();
        RegisterSpecList result = new RegisterSpecList(sz + 1);

        for (int i = 0; i < sz; i++) {
            result.set0(i + 1, get0(i));
        }

        result.set0(0, spec);
        if (isImmutable()) {
            result.setImmutable();
        }

        return result;
!!!585527.java!!!	withoutFirst() : RegisterSpecList
        int newSize = size() - 1;

        if (newSize == 0) {
            return EMPTY;
        }

        RegisterSpecList result = new RegisterSpecList(newSize);

        for (int i = 0; i < newSize; i++) {
            result.set0(i, get0(i + 1));
        }

        if (isImmutable()) {
            result.setImmutable();
        }

        return result;
!!!585655.java!!!	withoutLast() : RegisterSpecList
        int newSize = size() - 1;

        if (newSize == 0) {
            return EMPTY;
        }

        RegisterSpecList result = new RegisterSpecList(newSize);

        for (int i = 0; i < newSize; i++) {
            result.set0(i, get0(i));
        }

        if (isImmutable()) {
            result.setImmutable();
        }

        return result;
!!!585783.java!!!	withOffset(in delta : int) : RegisterSpecList
        int sz = size();

        if (sz == 0) {
            // Don't bother making a new zero-element instance.
            return this;
        }

        RegisterSpecList result = new RegisterSpecList(sz);

        for (int i = 0; i < sz; i++) {
            RegisterSpec one = (RegisterSpec) get0(i);
            if (one != null) {
                result.set0(i, one.withOffset(delta));
            }
        }

        if (isImmutable()) {
            result.setImmutable();
        }

        return result;
!!!585911.java!!!	withSequentialRegisters(in base : int, inout duplicateFirst : boolean) : RegisterSpecList
        int sz = size();

        if (sz == 0) {
            // Don't bother making a new zero-element instance.
            return this;
        }

        RegisterSpecList result = new RegisterSpecList(sz);

        for (int i = 0; i < sz; i++) {
            RegisterSpec one = (RegisterSpec) get0(i);
            result.set0(i, one.withReg(base));
            if (duplicateFirst) {
                duplicateFirst = false;
            } else {
                base += one.getCategory();
            }
        }

        if (isImmutable()) {
            result.setImmutable();
        }

        return result;
