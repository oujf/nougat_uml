class TwilightService
!!!33626551.java!!!	TwilightService(inout context : Context)
        super(context);
!!!33626679.java!!!	onStart() : void
        mAlarmManager = (AlarmManager) getContext().getSystemService(Context.ALARM_SERVICE);
        mLocationManager = (LocationManager) getContext().getSystemService(
                Context.LOCATION_SERVICE);
        mLocationHandler = new LocationHandler();
        mCurrentUser = ActivityManager.getCurrentUser();

        IntentFilter filter = new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
        filter.addAction(Intent.ACTION_TIME_CHANGED);
        filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
        filter.addAction(Intent.ACTION_USER_SWITCHED);
        filter.addAction(ACTION_UPDATE_TWILIGHT_STATE);
        getContext().registerReceiver(mReceiver, filter);

        publishLocalService(TwilightManager.class, mService);
!!!33626807.java!!!	onBootPhase(in phase : int) : void
        if (phase == PHASE_BOOT_COMPLETED) {
            getContext().getContentResolver().registerContentObserver(
                    Secure.getUriFor(Secure.TWILIGHT_MODE), false, mContentObserver, mCurrentUser);
            mContentObserver.onChange(true);
            mBootCompleted = true;
            sendBroadcast();
        }
!!!33626935.java!!!	reregisterSettingObserver() : void
        final ContentResolver contentResolver = getContext().getContentResolver();
        contentResolver.unregisterContentObserver(mContentObserver);
        contentResolver.registerContentObserver(Secure.getUriFor(Secure.TWILIGHT_MODE), false,
                mContentObserver, mCurrentUser);
        mContentObserver.onChange(true);
!!!33627063.java!!!	setLockedState(inout state : TwilightState) : void
        synchronized (mLock) {
            // Make sure we aren't locked so we can set the state.
            mLocked = false;
            setTwilightState(state);
            // Make sure we leave the state locked, so it cant be changed.
            mLocked = true;
            // TODO: Don't bother updating state when locked.
        }
!!!33627191.java!!!	setTwilightState(inout state : TwilightState) : void
        synchronized (mLock) {
            if (mLocked) {
                // State has been locked by secure setting, shouldn't be changed.
                return;
            }
            if (!Objects.equal(mTwilightState, state)) {
                if (DEBUG) {
                    Slog.d(TAG, "Twilight state changed: " + state);
                }

                mTwilightState = state;

                final int listenerLen = mListeners.size();
                for (int i = 0; i < listenerLen; i++) {
                    mListeners.get(i).postUpdate();
                }
            }
        }
        sendBroadcast();
!!!33627319.java!!!	sendBroadcast() : void
        synchronized (mLock) {
            if (mTwilightState == null) {
                return;
            }
            if (mBootCompleted) {
                Intent intent = new Intent(ACTION_TWILIGHT_CHANGED);
                intent.putExtra(EXTRA_IS_NIGHT, mTwilightState.isNight());
                intent.putExtra(EXTRA_AMOUNT, mTwilightState.getAmount());
                intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
                getContext().sendStickyBroadcastAsUser(intent, UserHandle.ALL);
            }
        }
!!!33627447.java!!!	scheduleReset() : void
        long resetTime = System.currentTimeMillis() + RESET_TIME;
        Intent resetIntent = new Intent(ACTION_RESET_TWILIGHT_AUTO);
        resetIntent.putExtra(EXTRA_RESET_USER, mCurrentUser);
        PendingIntent pendingIntent = PendingIntent.getBroadcast(
                getContext(), 0, resetIntent, 0);
        mAlarmManager.cancel(pendingIntent);
        mAlarmManager.setExact(AlarmManager.RTC, resetTime, pendingIntent);
!!!33627959.java!!!	hasMoved(inout from : Location, inout to : Location) : boolean
        if (to == null) {
            return false;
        }

        if (from == null) {
            return true;
        }

        // if new location is older than the current one, the device hasn't moved.
        if (to.getElapsedRealtimeNanos() < from.getElapsedRealtimeNanos()) {
            return false;
        }

        // Get the distance between the two points.
        float distance = from.distanceTo(to);

        // Get the total accuracy radius for both locations.
        float totalAccuracy = from.getAccuracy() + to.getAccuracy();

        // If the distance is greater than the combined accuracy of the two
        // points then they can't overlap and hence the user has moved.
        return distance >= totalAccuracy;
