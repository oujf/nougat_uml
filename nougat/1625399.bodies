class AccessibilityController
!!!33665335.java!!!	AccessibilityController(inout service : WindowManagerService)
        mWindowManagerService = service;
!!!33665463.java!!!	setMagnificationCallbacksLocked(inout callbacks : WindowManagerInternal::MagnificationCallbacks) : void
        if (callbacks != null) {
            if (mDisplayMagnifier != null) {
                throw new IllegalStateException("Magnification callbacks already set!");
            }
            mDisplayMagnifier = new DisplayMagnifier(mWindowManagerService, callbacks);
        } else {
            if  (mDisplayMagnifier == null) {
                throw new IllegalStateException("Magnification callbacks already cleared!");
            }
            mDisplayMagnifier.destroyLocked();
            mDisplayMagnifier = null;
        }
!!!33665591.java!!!	setWindowsForAccessibilityCallback(inout callback : WindowManagerInternal::WindowsForAccessibilityCallback) : void
        if (callback != null) {
            if (mWindowsForAccessibilityObserver != null) {
                throw new IllegalStateException(
                        "Windows for accessibility callback already set!");
            }
            mWindowsForAccessibilityObserver = new WindowsForAccessibilityObserver(
                    mWindowManagerService, callback);
        } else {
            if (mWindowsForAccessibilityObserver == null) {
                throw new IllegalStateException(
                        "Windows for accessibility callback already cleared!");
            }
            mWindowsForAccessibilityObserver = null;
        }
!!!33665719.java!!!	setMagnificationSpecLocked(inout spec : MagnificationSpec) : void
        if (mDisplayMagnifier != null) {
            mDisplayMagnifier.setMagnificationSpecLocked(spec);
        }
        if (mWindowsForAccessibilityObserver != null) {
            mWindowsForAccessibilityObserver.scheduleComputeChangedWindowsLocked();
        }
!!!33665847.java!!!	getMagnificationRegionLocked(inout outMagnificationRegion : Region) : void
        if (mDisplayMagnifier != null) {
            mDisplayMagnifier.getMagnificationRegionLocked(outMagnificationRegion);
        }
!!!33665975.java!!!	onRectangleOnScreenRequestedLocked(inout rectangle : Rect) : void
        if (mDisplayMagnifier != null) {
            mDisplayMagnifier.onRectangleOnScreenRequestedLocked(rectangle);
        }
        // Not relevant for the window observer.
!!!33666103.java!!!	onWindowLayersChangedLocked() : void
        if (mDisplayMagnifier != null) {
            mDisplayMagnifier.onWindowLayersChangedLocked();
        }
        if (mWindowsForAccessibilityObserver != null) {
            mWindowsForAccessibilityObserver.scheduleComputeChangedWindowsLocked();
        }
!!!33666231.java!!!	onRotationChangedLocked(inout displayContent : DisplayContent, in rotation : int) : void
        if (mDisplayMagnifier != null) {
            mDisplayMagnifier.onRotationChangedLocked(displayContent, rotation);
        }
        if (mWindowsForAccessibilityObserver != null) {
            mWindowsForAccessibilityObserver.scheduleComputeChangedWindowsLocked();
        }
!!!33666359.java!!!	onAppWindowTransitionLocked(inout windowState : WindowState, in transition : int) : void
        if (mDisplayMagnifier != null) {
            mDisplayMagnifier.onAppWindowTransitionLocked(windowState, transition);
        }
        // Not relevant for the window observer.
!!!33666487.java!!!	onWindowTransitionLocked(inout windowState : WindowState, in transition : int) : void
        if (mDisplayMagnifier != null) {
            mDisplayMagnifier.onWindowTransitionLocked(windowState, transition);
        }
        if (mWindowsForAccessibilityObserver != null) {
            mWindowsForAccessibilityObserver.scheduleComputeChangedWindowsLocked();
        }
!!!33666615.java!!!	onWindowFocusChangedNotLocked() : void
        // Not relevant for the display magnifier.

        WindowsForAccessibilityObserver observer = null;
        synchronized (mWindowManagerService) {
            observer = mWindowsForAccessibilityObserver;
        }
        if (observer != null) {
            observer.performComputeChangedWindowsNotLocked();
        }
!!!33666743.java!!!	onSomeWindowResizedOrMovedLocked() : void
        // Not relevant for the display magnifier.

        if (mWindowsForAccessibilityObserver != null) {
            mWindowsForAccessibilityObserver.scheduleComputeChangedWindowsLocked();
        }
!!!33666871.java!!!	drawMagnifiedRegionBorderIfNeededLocked() : void
        if (mDisplayMagnifier != null) {
            mDisplayMagnifier.drawMagnifiedRegionBorderIfNeededLocked();
        }
        // Not relevant for the window observer.
!!!33666999.java!!!	getMagnificationSpecForWindowLocked(inout windowState : WindowState) : MagnificationSpec
        if (mDisplayMagnifier != null) {
            return mDisplayMagnifier.getMagnificationSpecForWindowLocked(windowState);
        }
        return null;
!!!33667127.java!!!	hasCallbacksLocked() : boolean
        return (mDisplayMagnifier != null
                || mWindowsForAccessibilityObserver != null);
!!!33667255.java!!!	populateTransformationMatrixLocked(inout windowState : WindowState, inout outMatrix : Matrix) : void
        sTempFloats[Matrix.MSCALE_X] = windowState.mWinAnimator.mDsDx;
        sTempFloats[Matrix.MSKEW_Y] = windowState.mWinAnimator.mDtDx;
        sTempFloats[Matrix.MSKEW_X] = windowState.mWinAnimator.mDsDy;
        sTempFloats[Matrix.MSCALE_Y] = windowState.mWinAnimator.mDtDy;
        sTempFloats[Matrix.MTRANS_X] = windowState.mShownPosition.x;
        sTempFloats[Matrix.MTRANS_Y] = windowState.mShownPosition.y;
        sTempFloats[Matrix.MPERSP_0] = 0;
        sTempFloats[Matrix.MPERSP_1] = 0;
        sTempFloats[Matrix.MPERSP_2] = 1;
        outMatrix.setValues(sTempFloats);
