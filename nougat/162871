format 76
"dispatch" // nougat_src::frameworks::base::core::java::android::hardware::camera2::dispatch
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/base/core/java/android/hardware/camera2/dispatch/"
  java_package "android.hardware.camera2.dispatch"
  classview 158263 "dispatch"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 469047 "ArgumentReplacingDispatcher"
      visibility public 
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "TArg" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 469175 // Dispatchable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A dispatcher that replaces one argument with another; replaces any argument at an index
with another argument.

<p>For example, we can override an {@code void onSomething(int x)} calls to have {@code x} always
equal to 1. Or, if using this with a duck typing dispatcher, we could even overwrite {@code x} to
be something
that's not an {@code int}.</p>

@param <T>
         source dispatch type, whose methods with {@link #dispatch} will be called
@param <TArg>
         argument replacement type, args in {@link #dispatch} matching {@code argumentIndex}
         will be overriden to objects of this type"
      classrelation 1242935 // <realization>
	relation 1242935 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1242935 // <realization>
	  b parent class_ref 469175 // Dispatchable
      end

      classrelation 1243063 // mTarget (<unidirectional association>)
	relation 1243063 --->
	  a role_name "mTarget" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 1243063 // mTarget (<unidirectional association>)
	  b parent class_ref 469175 // Dispatchable
      end

      attribute 1294903 "mArgumentIndex"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1295031 "mReplaceWith"
	const_attribute private explicit_type "TArg"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3091383 "ArgumentReplacingDispatcher"
	public explicit_return_type ""
	nparams 3
	  param inout name "target" type class_ref 469175 // Dispatchable
	  param in name "argumentIndex" explicit_type "int"
	  param inout name "replaceWith" explicit_type "TArg"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new argument replacing dispatcher; dispatches are forwarded to {@code target}
after the argument is replaced.

<p>For example, if a method {@code onAction(T1 a, Integer b, T2 c)} is invoked, and we wanted
to replace all occurrences of {@code b} with {@code 0xDEADBEEF}, we would set
{@code argumentIndex = 1} and {@code replaceWith = 0xDEADBEEF}.</p>

<p>If a method dispatched has less arguments than {@code argumentIndex}, it is
passed through with the arguments unchanged.</p>

@param target destination dispatch type, methods will be redirected to this dispatcher
@param argumentIndex the numeric index of the argument {@code >= 0}
@param replaceWith arguments matching {@code argumentIndex} will be replaced with this object"
      end

      operation 3091511 "dispatch"
	public return_type class_ref 132663 // Object
	nparams 2
	  param inout name "method" explicit_type "Method"
	  param inout name "args" type class_ref 132663 // Object
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3091639 "arrayCopy"
	class_operation private return_type class_ref 132663 // Object
	nparams 1
	  param inout name "array" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 469175 "Dispatchable"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Dynamically dispatch a method and its argument to some object.

<p>This can be used to intercept method calls and do work around them, redirect work,
or block calls entirely.</p>"
      operation 3091255 "dispatch"
	public return_type class_ref 132663 // Object
	nparams 2
	  param inout name "method" explicit_type "Method"
	  param inout name "args" type class_ref 132663 // Object
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dispatch the method and arguments to this object.
@param method a method defined in class {@code T}
@param args arguments corresponding to said {@code method}
@return the object returned when invoking {@code method}
@throws Throwable any exception that might have been raised while invoking the method"
      end
    end

    class 469303 "BroadcastDispatcher"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 469175 // Dispatchable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Broadcast a single dispatch into multiple other dispatchables.

<p>Every time {@link #dispatch} is invoked, all the broadcast targets will
see the same dispatch as well. The first target's return value is returned.</p>

<p>This enables a single listener to be converted into a multi-listener.</p>"
      classrelation 1243191 // <realization>
	relation 1243191 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1243191 // <realization>
	  b parent class_ref 469175 // Dispatchable
      end

      classrelation 1243319 // mDispatchTargets (<unidirectional association>)
	relation 1243319 --->
	  stereotype "List"
	  a role_name "mDispatchTargets" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}<T>> ${name}${value};
"
	    classrelation_ref 1243319 // mDispatchTargets (<unidirectional association>)
	  b parent class_ref 469175 // Dispatchable
      end

      operation 3091767 "BroadcastDispatcher"
	public explicit_return_type ""
	nparams 1
	  param inout name "dispatchTargets" explicit_type "Dispatchable<T>..."
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
"
	
	
	
	comment "Create a broadcast dispatcher from the supplied dispatch targets.

@param dispatchTargets one or more targets to dispatch to"
      end

      operation 3091895 "dispatch"
	public return_type class_ref 132663 // Object
	nparams 2
	  param inout name "method" explicit_type "Method"
	  param inout name "args" type class_ref 132663 // Object
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 469431 "DuckTypingDispatcher"
      visibility public 
      nformals 2
      formal name "TFrom" type "" explicit_default_value ""
        explicit_extends ""
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 469175 // Dispatchable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Duck typing dispatcher; converts dispatch methods calls from one class to another by
looking up equivalently methods at runtime by name.

<p>For example, if two types have identical method names and arguments, but
are not subclasses/subinterfaces of each other, this dispatcher will allow calls to be
made from one type to the other.</p>

@param <TFrom> source dispatch type, whose methods with {@link #dispatch} will be called
@param <T> destination dispatch type, methods will be converted to the class of {@code T}"
      classrelation 1243447 // <realization>
	relation 1243447 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1243447 // <realization>
	  b parent class_ref 469175 // Dispatchable
      end

      classrelation 1243575 // mDuck (<unidirectional association>)
	relation 1243575 --->
	  a role_name "mDuck" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 1243575 // mDuck (<unidirectional association>)
	  b parent class_ref 469559 // MethodNameInvoker
      end

      operation 3092023 "DuckTypingDispatcher"
	public explicit_return_type ""
	nparams 2
	  param inout name "target" type class_ref 469175 // Dispatchable
	  param inout name "targetClass" type class_ref 132791 // Class
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new duck typing dispatcher.

@param target destination dispatch type, methods will be redirected to this dispatcher
@param targetClass destination dispatch class, methods will be converted to this class's"
      end

      operation 3092151 "dispatch"
	public return_type class_ref 132663 // Object
	nparams 2
	  param inout name "method" explicit_type "Method"
	  param inout name "args" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 469559 "MethodNameInvoker"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Invoke a method on a dispatchable by its name (without knowing the {@code Method} ahead of time).

@param <T> destination dispatch type, methods will be looked up in the class of {@code T}"
      classrelation 1244471 // mTarget (<unidirectional association>)
	relation 1244471 --->
	  a role_name "mTarget" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 1244471 // mTarget (<unidirectional association>)
	  b parent class_ref 469175 // Dispatchable
      end

      classrelation 1244599 // mTargetClass (<unidirectional association>)
	relation 1244599 --->
	  a role_name "mTargetClass" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 1244599 // mTargetClass (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      classrelation 1244727 // mMethods (<unidirectional association>)
	relation 1244727 --->
	  stereotype "ConcurrentHashMap"
	  a role_name "mMethods" init_value "
            new ConcurrentHashMap<>()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, Method> ${name}${value};
"
	    classrelation_ref 1244727 // mMethods (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      operation 3092791 "MethodNameInvoker"
	public explicit_return_type ""
	nparams 2
	  param inout name "target" type class_ref 469175 // Dispatchable
	  param inout name "targetClass" type class_ref 132791 // Class
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new method name invoker.

@param target destination dispatch type, invokes will be redirected to this dispatcher
@param targetClass destination dispatch class, the invoked methods will be from this class"
      end

      operation 3092919 "invoke"
	public explicit_return_type "K"
	nparams 2
	  param inout name "methodName" type class_ref 129591 // String
	  param inout name "" explicit_type "Object...params"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Invoke a method by its name.

<p>If more than one method exists in {@code targetClass}, the first method with the right
number of arguments will be used, and later calls will all use that method.</p>

@param methodName
         The name of the method, which will be matched 1:1 to the destination method
@param params
         Variadic parameter list.
@return
         The same kind of value that would normally be returned by calling {@code methodName}
         statically.

@throws IllegalArgumentException if {@code methodName} does not exist on the target class
@throws Throwable will rethrow anything that the target method would normally throw"
      end
    end

    class 469687 "HandlerDispatcher"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 469175 // Dispatchable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Forward all interface calls into a handler by posting it as a {@code Runnable}.

<p>All calls will return immediately; functions with return values will return a default
value of {@code null}, {@code 0}, or {@code false} where that value is legal.</p>

<p>Any exceptions thrown on the handler while trying to invoke a method
will be re-thrown. Throwing checked exceptions on a handler which doesn't expect any
checked exceptions to be thrown will result in \"undefined\" behavior
(although in practice it is usually thrown as normal).</p>"
      classrelation 1243703 // <realization>
	relation 1243703 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1243703 // <realization>
	  b parent class_ref 469175 // Dispatchable
      end

      classrelation 1243831 // TAG (<unidirectional association>)
	relation 1243831 --->
	  a role_name "TAG" init_value " \"HandlerDispatcher\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1243831 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1243959 // mDispatchTarget (<unidirectional association>)
	relation 1243959 --->
	  a role_name "mDispatchTarget" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 1243959 // mDispatchTarget (<unidirectional association>)
	  b parent class_ref 469175 // Dispatchable
      end

      classrelation 1244087 // mHandler (<unidirectional association>)
	relation 1244087 --->
	  a role_name "mHandler" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1244087 // mHandler (<unidirectional association>)
	  b parent class_ref 132023 // Handler
      end

      operation 3092279 "HandlerDispatcher"
	public explicit_return_type ""
	nparams 2
	  param inout name "dispatchTarget" type class_ref 469175 // Dispatchable
	  param inout name "handler" type class_ref 132023 // Handler
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a dispatcher that forwards it's dispatch calls by posting
them onto the {@code handler} as a {@code Runnable}.

@param dispatchTarget the destination whose method calls will be redirected into the handler
@param handler all calls into {@code dispatchTarget} will be posted onto this handler
@param <T> the type of the element you want to wrap.
@return a dispatcher that will forward it's dispatch calls to a handler"
      end

      operation 3092407 "dispatch"
	public return_type class_ref 132663 // Object
	nparams 2
	  param in name "method" explicit_type "Method"
	  param in name "args" type class_ref 132663 // Object
	nexceptions 1
	  explicit_exception "Throwable"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 469815 "InvokeDispatcher"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 469175 // Dispatchable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1244215 // <realization>
	relation 1244215 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1244215 // <realization>
	  b parent class_ref 469175 // Dispatchable
      end

      classrelation 1244343 // TAG (<unidirectional association>)
	relation 1244343 --->
	  a role_name "TAG" init_value " \"InvocationSink\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1244343 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 1295159 "mTarget"
	const_attribute private explicit_type "T"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3092535 "InvokeDispatcher"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3092663 "dispatch"
	public return_type class_ref 132663 // Object
	nparams 2
	  param inout name "method" explicit_type "Method"
	  param inout name "args" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 469943 "NullDispatcher"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 469175 // Dispatchable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Do nothing when dispatching; follows the null object pattern."
      classrelation 1244855 // <realization>
	relation 1244855 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1244855 // <realization>
	  b parent class_ref 469175 // Dispatchable
      end

      operation 3093047 "NullDispatcher"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a dispatcher that does nothing when dispatched to."
      end

      operation 3093175 "dispatch"
	public return_type class_ref 132663 // Object
	nparams 2
	  param inout name "method" explicit_type "Method"
	  param inout name "args" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Do nothing; all parameters are ignored."
      end
    end
  end

  deploymentview 150711 "dispatch"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 303927 "Dispatchable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
${definition}"
      associated_classes
	class_ref 469175 // Dispatchable
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 304055 "ArgumentReplacingDispatcher"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
${definition}"
      associated_classes
	class_ref 469047 // ArgumentReplacingDispatcher
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 304183 "BroadcastDispatcher"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.List;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 469303 // BroadcastDispatcher
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 304311 "DuckTypingDispatcher"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 469431 // DuckTypingDispatcher
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 304439 "HandlerDispatcher"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.utils.UncheckedThrow;
import android.os.Handler;
import android.util.Log;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 469687 // HandlerDispatcher
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 304567 "InvokeDispatcher"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.utils.UncheckedThrow;
import android.util.Log;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 469815 // InvokeDispatcher
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 304695 "MethodNameInvoker"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.utils.UncheckedThrow;
import java.lang.reflect.Method;
import java.util.concurrent.ConcurrentHashMap;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 469559 // MethodNameInvoker
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 304823 "NullDispatcher"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
${definition}"
      associated_classes
	class_ref 469943 // NullDispatcher
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
