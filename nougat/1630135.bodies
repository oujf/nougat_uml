class TaskTapPointerEventListener
!!!33753015.java!!!	TaskTapPointerEventListener(inout service : WindowManagerService, inout displayContent : DisplayContent)
        mService = service;
        mDisplayContent = displayContent;
!!!33753143.java!!!	init() : void
        mGestureDetector = new GestureDetector(
                mService.mContext, new TwoFingerScrollListener(), mService.mH);
!!!33753271.java!!!	onPointerEvent(inout motionEvent : MotionEvent) : void
        doGestureDetection(motionEvent);

        final int action = motionEvent.getAction();
        switch (action & MotionEvent.ACTION_MASK) {
            case MotionEvent.ACTION_DOWN: {
                final int x = (int) motionEvent.getX();
                final int y = (int) motionEvent.getY();

                synchronized (this) {
                    if (!mTouchExcludeRegion.contains(x, y)) {
                        mService.mH.obtainMessage(H.TAP_OUTSIDE_TASK,
                                x, y, mDisplayContent).sendToTarget();
                    }
                }
                break;
            }

            case MotionEvent.ACTION_MOVE: {
                if (motionEvent.getPointerCount() != 2) {
                    stopTwoFingerScroll();
                }
                break;
            }

            case MotionEvent.ACTION_HOVER_MOVE: {
                final int x = (int) motionEvent.getX();
                final int y = (int) motionEvent.getY();
                final Task task = mDisplayContent.findTaskForControlPoint(x, y);
                InputDevice inputDevice = motionEvent.getDevice();
                if (task == null || inputDevice == null) {
                    mPointerIconType = TYPE_NOT_SPECIFIED;
                    break;
                }
                task.getDimBounds(mTmpRect);
                if (!mTmpRect.isEmpty() && !mTmpRect.contains(x, y)) {
                    int iconType = TYPE_DEFAULT;
                    if (x < mTmpRect.left) {
                        iconType =
                            (y < mTmpRect.top) ? TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW :
                            (y > mTmpRect.bottom) ? TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW :
                            TYPE_HORIZONTAL_DOUBLE_ARROW;
                    } else if (x > mTmpRect.right) {
                        iconType =
                            (y < mTmpRect.top) ? TYPE_TOP_RIGHT_DIAGONAL_DOUBLE_ARROW :
                            (y > mTmpRect.bottom) ? TYPE_TOP_LEFT_DIAGONAL_DOUBLE_ARROW :
                            TYPE_HORIZONTAL_DOUBLE_ARROW;
                    } else if (y < mTmpRect.top || y > mTmpRect.bottom) {
                        iconType = TYPE_VERTICAL_DOUBLE_ARROW;
                    }
                    if (mPointerIconType != iconType) {
                        mPointerIconType = iconType;
                        inputDevice.setPointerType(iconType);
                    }
                } else {
                    mPointerIconType = TYPE_NOT_SPECIFIED;
                }
            } break;

            case MotionEvent.ACTION_HOVER_EXIT:
                mPointerIconType = TYPE_NOT_SPECIFIED;
                InputDevice inputDevice = motionEvent.getDevice();
                if (inputDevice != null) {
                    inputDevice.setPointerType(TYPE_DEFAULT);
                }
                break;

            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_POINTER_UP: {
                stopTwoFingerScroll();
                break;
            }
        }
!!!33753399.java!!!	doGestureDetection(inout motionEvent : MotionEvent) : void
        if (mGestureDetector == null || mNonResizeableRegion.isEmpty()) {
            return;
        }
        final int action = motionEvent.getAction() & MotionEvent.ACTION_MASK;
        final int x = (int) motionEvent.getX();
        final int y = (int) motionEvent.getY();
        final boolean isTouchInside = mNonResizeableRegion.contains(x, y);
        if (mInGestureDetection || action == MotionEvent.ACTION_DOWN && isTouchInside) {
            // If we receive the following actions, or the pointer goes out of the area
            // we're interested in, stop detecting and cancel the current detection.
            mInGestureDetection = isTouchInside
                    && action != MotionEvent.ACTION_UP
                    && action != MotionEvent.ACTION_POINTER_UP
                    && action != MotionEvent.ACTION_CANCEL;
            if (mInGestureDetection) {
                mGestureDetector.onTouchEvent(motionEvent);
            } else {
                MotionEvent cancelEvent = motionEvent.copy();
                cancelEvent.cancel();
                mGestureDetector.onTouchEvent(cancelEvent);
                stopTwoFingerScroll();
            }
        }
!!!33753527.java!!!	onTwoFingerScroll(inout e : MotionEvent) : void
        final int x = (int)e.getX(0);
        final int y = (int)e.getY(0);
        if (!mTwoFingerScrolling) {
            mTwoFingerScrolling = true;
            mService.mH.obtainMessage(
                    H.TWO_FINGER_SCROLL_START, x, y, mDisplayContent).sendToTarget();
        }
!!!33753655.java!!!	stopTwoFingerScroll() : void
        if (mTwoFingerScrolling) {
            mTwoFingerScrolling = false;
            mService.mH.obtainMessage(H.FINISH_TASK_POSITIONING).sendToTarget();
        }
!!!33753911.java!!!	setTouchExcludeRegion(inout newRegion : Region, inout nonResizeableRegion : Region) : void
        synchronized (this) {
           mTouchExcludeRegion.set(newRegion);
           mNonResizeableRegion.set(nonResizeableRegion);
        }
