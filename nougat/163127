format 76
"marshal" // nougat_src::frameworks::base::core::java::android::hardware::camera2::marshal
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/base/core/java/android/hardware/camera2/marshal/"
  java_package "android.hardware.camera2.marshal"
  classview 158519 "marshal"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 473271 "Marshaler"
      abstract visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base class to marshal data to/from managed/native metadata byte buffers.

<p>This class should not be created directly; an instance of it can be obtained
using {@link MarshalQueryable#createMarshaler} for the same type {@code T} if the native type
mapping for {@code T} {@link MarshalQueryable#isTypeMappingSupported supported}.</p>

@param <T> the compile-time managed type"
      classrelation 1272631 // mTypeReference (<unidirectional association>)
	relation 1272631 --->
	  a role_name "mTypeReference" const_relation protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 1272631 // mTypeReference (<unidirectional association>)
	  b parent class_ref 464439 // TypeReference
      end

      attribute 1329847 "mNativeType"
	const_attribute protected explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3174711 "Marshaler"
	protected explicit_return_type ""
	nparams 3
	  param inout name "query" type class_ref 479287 // MarshalQueryable
	  param inout name "typeReference" type class_ref 464439 // TypeReference
	  param in name "nativeType" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<T> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiate a marshaler between a single managed/native type combination.

<p>This particular managed/native type combination must be supported by
{@link #isTypeMappingSupported}.</p>

@param query an instance of {@link MarshalQueryable}
@param typeReference the managed type reference
       Must be one for which {@link #isTypeMappingSupported} returns {@code true}
@param nativeType the native type, e.g.
       {@link android.hardware.camera2.impl.CameraMetadataNative#TYPE_BYTE TYPE_BYTE}.
       Must be one for which {@link #isTypeMappingSupported} returns {@code true}.

@throws NullPointerException if any args were {@code null}
@throws UnsupportedOperationException if the type mapping was not supported"
      end

      operation 3174839 "marshal"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "value" explicit_type "T"
	  param inout name "buffer" explicit_type "ByteBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marshal the specified object instance (value) into a byte buffer.

<p>Upon completion, the {@link ByteBuffer#position()} will have advanced by
the {@link #calculateMarshalSize marshal size} of {@code value}.</p>

@param value the value of type T that we wish to write into the byte buffer
@param buffer the byte buffer into which the marshaled object will be written"
      end

      operation 3174967 "calculateMarshalSize"
	public explicit_return_type "int"
	nparams 1
	  param inout name "value" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the size in bytes for how much space would be required to write this {@code value}
into a byte buffer using the given {@code nativeType}.

<p>If the size of this {@code T} instance when serialized into a buffer is always constant,
then this method will always return the same value (and particularly, it will return
an equivalent value to {@link #getNativeSize()}.</p>

<p>Overriding this method is a must when the size is {@link NATIVE_SIZE_DYNAMIC dynamic}.</p>

@param value the value of type T that we wish to write into the byte buffer
@return the size that would need to be written to the byte buffer"
      end

      operation 3175095 "unmarshal"
	abstract public explicit_return_type "T"
	nparams 1
	  param inout name "buffer" explicit_type "ByteBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unmarshal a new object instance from the byte buffer into its managed type.

<p>Upon completion, the {@link ByteBuffer#position()} will have advanced by
the {@link #calculateMarshalSize marshal size} of the returned {@code T} instance.</p>

@param buffer the byte buffer, from which we will read the object
@return a new instance of type T read from the byte buffer"
      end

      attribute 1329975 "NATIVE_SIZE_DYNAMIC"
	class_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Used to denote variable-length data structures.

<p>If the size is dynamic then we can't know ahead of time how big of a data structure
to preallocate for e.g. arrays, so one object must be unmarshaled at a time.</p>
"
      end

      operation 3175223 "getNativeSize"
	abstract public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "How many bytes a single instance of {@code T} will take up if marshalled to/from
{@code nativeType}.

<p>When unmarshaling data from native to managed, the instance {@code T} is not yet
available. If the native size is always a fixed mapping regardless of the instance of
{@code T} (e.g. if the type is not a container of some sort), it can be used to preallocate
containers for {@code T} to avoid resizing them.</p>

<p>In particular, the array marshaler takes advantage of this (when size is not dynamic)
to preallocate arrays of the right length when unmarshaling an array {@code T[]}.</p>

@return a size in bytes, or {@link #NATIVE_SIZE_DYNAMIC} if the size is dynamic"
      end

      operation 3175351 "getTypeReference"
	public return_type class_ref 464439 // TypeReference
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The type reference for {@code T} for the managed type side of this marshaler."
      end

      operation 3175479 "getNativeType"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The native type corresponding to this marshaler for the native side of this marshaler."
      end
    end

    class 479287 "MarshalQueryable"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Query if a marshaler can marshal to/from a particular native and managed type; if it supports
the combination, allow creating a marshaler instance to do the serialization.

<p>Not all queryable instances will support exactly one combination. Some, such as the
primitive queryable will support all primitive to/from managed mappings (as long as they are
1:1). Others, such as the rectangle queryable will only support integer to rectangle mappings.
</p>

<p>Yet some others are codependent on other queryables; e.g. array queryables might only support
a type map for {@code T[]} if another queryable exists with support for the component type
{@code T}.</p>"
      operation 3176631 "createMarshaler"
	public return_type class_ref 473271 // Marshaler
	nparams 2
	  param inout name "managedType" type class_ref 464439 // TypeReference
	  param in name "nativeType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a marshaler between the selected managed and native type.

<p>This marshaler instance is only good for that specific type mapping; and will refuse
to map other managed types, other native types, or an other combination that isn't
this exact one.</p>

@param managedType a managed type reference
@param nativeType the native type, e.g.
         {@link android.hardware.camera2.impl.CameraMetadataNative#TYPE_BYTE TYPE_BYTE}
@return

@throws UnsupportedOperationException
         if {@link #isTypeMappingSupported} returns {@code false}"
      end

      operation 3176759 "isTypeMappingSupported"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "managedType" type class_ref 464439 // TypeReference
	  param in name "nativeType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine whether or not this query marshal is able to create a marshaler that will
support the managed type and native type mapping.

<p>If this returns {@code true}, then a marshaler can be instantiated by
{@link #createMarshaler} that will marshal data to/from the native type
from/to the managed type.</p>

<p>Most marshalers are likely to only support one type map.</p>"
      end
    end

    class 479415 "MarshalHelpers"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Static functions in order to help implementing various marshaler functionality.

<p>The intention is to statically import everything from this file into another file when
implementing a new marshaler (or marshal queryable).</p>

<p>The helpers are centered around providing primitive knowledge of the native types,
such as the native size, the managed class wrappers, and various precondition checks.</p>"
      attribute 1330103 "SIZEOF_BYTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1330231 "SIZEOF_INT32"
	class_attribute const_attribute public explicit_type "int"
	init_value " Integer.SIZE / Byte.SIZE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1330359 "SIZEOF_INT64"
	class_attribute const_attribute public explicit_type "int"
	init_value " Long.SIZE / Byte.SIZE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1330487 "SIZEOF_FLOAT"
	class_attribute const_attribute public explicit_type "int"
	init_value " Float.SIZE / Byte.SIZE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1330615 "SIZEOF_DOUBLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " Double.SIZE / Byte.SIZE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1330743 "SIZEOF_RATIONAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " SIZEOF_INT32 * 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3175607 "getPrimitiveTypeSize"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "nativeType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the size in bytes for the native camera metadata type.

<p>This used to determine how many bytes it would take to encode/decode a single value
of that {@link nativeType}.</p>

@param nativeType the native type, e.g.
       {@link android.hardware.camera2.impl.CameraMetadataNative#TYPE_BYTE TYPE_BYTE}.
@return size in bytes >= 1

@throws UnsupportedOperationException if nativeType was not one of the built-in types"
      end

      operation 3175735 "checkPrimitiveClass"
	class_operation public return_type class_ref 132791 // Class
	nparams 1
	  param inout name "klass" type class_ref 132791 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensure that the {@code klass} is one of the metadata-primitive classes.

@param klass a non-{@code null} reference
@return {@code klass} instance

@throws UnsupportedOperationException if klass was not one of the built-in classes
@throws NullPointerException if klass was null

@see #isPrimitiveClass"
      end

      operation 3175863 "isPrimitiveClass"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "klass" type class_ref 132791 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether or not {@code klass} is one of the metadata-primitive classes.

<p>The following types (whether boxed or unboxed) are considered primitive:
<ul>
<li>byte
<li>int
<li>float
<li>double
<li>Rational
</ul>
</p>

<p>This doesn't strictly follow the java understanding of primitive since
boxed objects are included, Rational is included, and other types such as char and
short are not included.</p>

@param klass a {@link Class} instance; using {@code null} will return {@code false}
@return {@code true} if primitive, {@code false} otherwise"
      end

      operation 3175991 "wrapClassIfPrimitive"
	class_operation public return_type class_ref 132791 // Class
	nparams 1
	  param inout name "klass" type class_ref 132791 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Wrap {@code klass} with its wrapper variant if it was a {@code Class} corresponding
to a Java primitive.

<p>Non-primitive classes are passed through as-is.</p>

<p>For example, for a primitive {@code int.class => Integer.class},
but for a non-primitive {@code Rational.class => Rational.class}.</p>

@param klass a {@code Class} reference

@return wrapped class object, or same class object if non-primitive"
      end

      operation 3176119 "toStringNativeType"
	class_operation public return_type class_ref 129591 // String
	nparams 1
	  param in name "nativeType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a human-readable representation of the {@code nativeType}, e.g. \"TYPE_INT32\"

<p>Out-of-range values return a string with \"UNKNOWN\" as the prefix.</p>

@param nativeType the native type

@return human readable type name"
      end

      operation 3176247 "checkNativeType"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "nativeType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensure that the {@code nativeType} is one of the native types supported
by {@link CameraMetadataNative}.

@param nativeType the native type

@return the native type

@throws UnsupportedOperationException if the native type was invalid"
      end

      operation 3176375 "checkNativeTypeEquals"
	class_operation public explicit_return_type "int"
	nparams 2
	  param in name "expectedNativeType" explicit_type "int"
	  param in name "actualNativeType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensure that the expected and actual native types are equal.

@param expectedNativeType the expected native type
@param actualNativeType the actual native type
@return the actual native type

@throws UnsupportedOperationException if the types are not equal"
      end

      operation 3176503 "MarshalHelpers"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 479543 "MarshalRegistry"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Registry of supported marshalers; add new query-able marshalers or lookup existing ones.</p>"
      operation 3176887 "registerMarshalQueryable"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "queryable" type class_ref 479287 // MarshalQueryable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register a marshal queryable for the managed type {@code T}.

<p>Multiple marshal queryables for the same managed type {@code T} may be registered;
this is desirable if they support different native types (e.g. marshaler 1 supports
{@code Integer <-> TYPE_INT32}, marshaler 2 supports {@code Integer <-> TYPE_BYTE}.</p>

@param queryable a non-{@code null} marshal queryable that supports marshaling {@code T}"
      end

      operation 3177015 "getMarshaler"
	class_operation public return_type class_ref 473271 // Marshaler
	nparams 2
	  param inout name "typeToken" type class_ref 464439 // TypeReference
	  param in name "nativeType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Lookup a marshaler between {@code T} and {@code nativeType}.

<p>Marshalers are looked up in the order they were registered; earlier registered
marshal queriers get priority.</p>

@param typeToken The compile-time type reference for {@code T}
@param nativeType The native type, e.g. {@link CameraMetadataNative#TYPE_BYTE TYPE_BYTE}
@return marshaler a non-{@code null} marshaler that supports marshaling the type combo

@throws UnsupportedOperationException If no marshaler matching the args could be found"
      end

      class 479671 "MarshalToken"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 3177143 "MarshalToken"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "typeReference" type class_ref 464439 // TypeReference
	    param in name "nativeType" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 1272759 // typeReference (<unidirectional association>)
	  relation 1272759 --->
	    a role_name "typeReference" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 1272759 // typeReference (<unidirectional association>)
	    b parent class_ref 464439 // TypeReference
	end

	attribute 1330871 "nativeType"
	  const_attribute package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1330999 "hash"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 3177271 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "other" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 3177399 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 1272887 // sMarshalLock (<unidirectional association>)
	relation 1272887 --->
	  a role_name "sMarshalLock" init_value " new Object()" class_relation const_relation private
	    comment " Control access to the static data structures below
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1272887 // sMarshalLock (<unidirectional association>)
	  b parent class_ref 132663 // Object
      end

      classrelation 1273015 // sRegisteredMarshalQueryables (<unidirectional association>)
	relation 1273015 --->
	  stereotype "List"
	  a role_name "sRegisteredMarshalQueryables" init_value "
            new ArrayList<MarshalQueryable<?>>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}<?>> ${name}${value};
"
	    classrelation_ref 1273015 // sRegisteredMarshalQueryables (<unidirectional association>)
	  b parent class_ref 479287 // MarshalQueryable
      end

      classrelation 1273143 // sMarshalerMap (<unidirectional association>)
	relation 1273143 --->
	  stereotype "HashMap"
	  a role_name "sMarshalerMap" init_value "
            new HashMap<MarshalToken<?>, Marshaler<?>>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}<?>, Marshaler<?>> ${name}${value};
"
	    classrelation_ref 1273143 // sMarshalerMap (<unidirectional association>)
	  b parent class_ref 479671 // MarshalToken
      end

      operation 3177527 "MarshalRegistry"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 151223 "marshal"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 309431 "Marshaler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.utils.TypeReference;
import java.nio.ByteBuffer;
import static android.hardware.camera2.marshal.MarshalHelpers.*;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 473271 // Marshaler
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 309559 "MarshalHelpers"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.impl.CameraMetadataNative;
import android.util.Rational;
import static android.hardware.camera2.impl.CameraMetadataNative.*;
import static com.android.internal.util.Preconditions.*;
${definition}"
      associated_classes
	class_ref 479415 // MarshalHelpers
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 309687 "MarshalQueryable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.utils.TypeReference;
${definition}"
      associated_classes
	class_ref 479287 // MarshalQueryable
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 309815 "MarshalRegistry"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.hardware.camera2.impl.CameraMetadataNative;
import android.hardware.camera2.utils.TypeReference;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
${definition}"
      associated_classes
	class_ref 479543 // MarshalRegistry
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end

  package_ref 163511 // impl
end
