class LocalService
!!!33802167.java!!!	requestTraversalFromDisplayManager() : void
            requestTraversal();
!!!33802295.java!!!	setMagnificationSpec(inout spec : MagnificationSpec) : void
            synchronized (mWindowMap) {
                if (mAccessibilityController != null) {
                    mAccessibilityController.setMagnificationSpecLocked(spec);
                } else {
                    throw new IllegalStateException("Magnification callbacks not set!");
                }
            }
            if (Binder.getCallingPid() != android.os.Process.myPid()) {
                spec.recycle();
            }
!!!33802423.java!!!	getMagnificationRegion(inout magnificationRegion : Region) : void
            synchronized (mWindowMap) {
                if (mAccessibilityController != null) {
                    mAccessibilityController.getMagnificationRegionLocked(magnificationRegion);
                } else {
                    throw new IllegalStateException("Magnification callbacks not set!");
                }
            }
!!!33802551.java!!!	getCompatibleMagnificationSpecForWindow(inout windowToken : IBinder) : MagnificationSpec
            synchronized (mWindowMap) {
                WindowState windowState = mWindowMap.get(windowToken);
                if (windowState == null) {
                    return null;
                }
                MagnificationSpec spec = null;
                if (mAccessibilityController != null) {
                    spec = mAccessibilityController.getMagnificationSpecForWindowLocked(windowState);
                }
                if ((spec == null || spec.isNop()) && windowState.mGlobalScale == 1.0f) {
                    return null;
                }
                spec = (spec == null) ? MagnificationSpec.obtain() : MagnificationSpec.obtain(spec);
                spec.scale *= windowState.mGlobalScale;
                return spec;
            }
!!!33802679.java!!!	setMagnificationCallbacks(inout callbacks : WindowManagerInternal::MagnificationCallbacks) : void
            synchronized (mWindowMap) {
                if (mAccessibilityController == null) {
                    mAccessibilityController = new AccessibilityController(
                            WindowManagerService.this);
                }
                mAccessibilityController.setMagnificationCallbacksLocked(callbacks);
                if (!mAccessibilityController.hasCallbacksLocked()) {
                    mAccessibilityController = null;
                }
            }
!!!33802807.java!!!	setWindowsForAccessibilityCallback(inout callback : WindowManagerInternal::WindowsForAccessibilityCallback) : void
            synchronized (mWindowMap) {
                if (mAccessibilityController == null) {
                    mAccessibilityController = new AccessibilityController(
                            WindowManagerService.this);
                }
                mAccessibilityController.setWindowsForAccessibilityCallback(callback);
                if (!mAccessibilityController.hasCallbacksLocked()) {
                    mAccessibilityController = null;
                }
            }
!!!33802935.java!!!	setInputFilter(inout filter : IInputFilter) : void
            mInputManager.setInputFilter(filter);
!!!33803063.java!!!	getFocusedWindowToken() : IBinder
            synchronized (mWindowMap) {
                WindowState windowState = getFocusedWindowLocked();
                if (windowState != null) {
                    return windowState.mClient.asBinder();
                }
                return null;
            }
!!!33803191.java!!!	isKeyguardLocked() : boolean
            return WindowManagerService.this.isKeyguardLocked();
!!!33803319.java!!!	showGlobalActions() : void
            WindowManagerService.this.showGlobalActions();
!!!33803447.java!!!	getWindowFrame(inout token : IBinder, inout outBounds : Rect) : void
            synchronized (mWindowMap) {
                WindowState windowState = mWindowMap.get(token);
                if (windowState != null) {
                    outBounds.set(windowState.mFrame);
                } else {
                    outBounds.setEmpty();
                }
            }
!!!33803575.java!!!	waitForAllWindowsDrawn(inout callback : Runnable, in timeout : long) : void
            boolean allWindowsDrawn = false;
            synchronized (mWindowMap) {
                mWaitingForDrawnCallback = callback;
                final WindowList windows = getDefaultWindowListLocked();
                for (int winNdx = windows.size() - 1; winNdx >= 0; --winNdx) {
                    final WindowState win = windows.get(winNdx);
                    final boolean isForceHiding = mPolicy.isForceHiding(win.mAttrs);
                    if (win.isVisibleLw()
                            && (win.mAppToken != null || isForceHiding)) {
                        win.mWinAnimator.mDrawState = DRAW_PENDING;
                        // Force add to mResizingWindows.
                        win.mLastContentInsets.set(-1, -1, -1, -1);
                        mWaitingForDrawn.add(win);

                        // No need to wait for the windows below Keyguard.
                        if (isForceHiding) {
                            break;
                        }
                    }
                }
                mWindowPlacerLocked.requestTraversal();
                mH.removeMessages(H.WAITING_FOR_DRAWN_TIMEOUT);
                if (mWaitingForDrawn.isEmpty()) {
                    allWindowsDrawn = true;
                } else {
                    mH.sendEmptyMessageDelayed(H.WAITING_FOR_DRAWN_TIMEOUT, timeout);
                    checkDrawnWindowsLocked();
                }
            }
            if (allWindowsDrawn) {
                callback.run();
            }
!!!33803703.java!!!	addWindowToken(inout token : IBinder, in type : int) : void
            WindowManagerService.this.addWindowToken(token, type);
!!!33803831.java!!!	removeWindowToken(inout token : IBinder, inout removeWindows : boolean) : void
            synchronized(mWindowMap) {
                if (removeWindows) {
                    WindowToken wtoken = mTokenMap.remove(token);
                    if (wtoken != null) {
                        wtoken.removeAllWindows();
                    }
                }
                WindowManagerService.this.removeWindowToken(token);
            }
!!!33803959.java!!!	registerAppTransitionListener(inout listener : WindowManagerInternal::AppTransitionListener) : void
            synchronized (mWindowMap) {
                mAppTransition.registerListenerLocked(listener);
            }
!!!33804087.java!!!	getInputMethodWindowVisibleHeight() : int
            synchronized (mWindowMap) {
                return mPolicy.getInputMethodWindowVisibleHeightLw();
            }
!!!33804215.java!!!	saveLastInputMethodWindowForTransition() : void
            synchronized (mWindowMap) {
                if (mInputMethodWindow != null) {
                    mPolicy.setLastInputMethodWindowLw(mInputMethodWindow, mInputMethodTarget);
                }
            }
!!!33804343.java!!!	clearLastInputMethodWindowForTransition() : void
            synchronized (mWindowMap) {
                mPolicy.setLastInputMethodWindowLw(null, null);
            }
!!!33804471.java!!!	isHardKeyboardAvailable() : boolean
            synchronized (mWindowMap) {
                return mHardKeyboardAvailable;
            }
!!!33804599.java!!!	setOnHardKeyboardStatusChangeListener(inout listener : WindowManagerInternal::OnHardKeyboardStatusChangeListener) : void
            synchronized (mWindowMap) {
                mHardKeyboardStatusChangeListener = listener;
            }
!!!33804727.java!!!	isStackVisible(in stackId : int) : boolean
            synchronized (mWindowMap) {
                return WindowManagerService.this.isStackVisibleLocked(stackId);
            }
!!!33804855.java!!!	isDockedDividerResizing() : boolean
            synchronized (mWindowMap) {
                return getDefaultDisplayContentLocked().getDockedDividerController().isResizing();
            }
