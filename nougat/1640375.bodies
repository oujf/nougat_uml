class ApfGenerator
!!!33934135.java!!!	setApfVersion(in version : int) : boolean
        // This version number syncs up with APF_VERSION in hardware/google/apf/apf_interpreter.h
        return version == 2;
!!!33934263.java!!!	addInstruction(inout instruction : ApfGenerator::Instruction) : void
        if (mGenerated) {
            throw new IllegalStateException("Program already generated");
        }
        mInstructions.add(instruction);
!!!33934391.java!!!	defineLabel(inout name : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.LABEL);
        instruction.setLabel(name);
        addInstruction(instruction);
        return this;
!!!33934519.java!!!	addJump(inout target : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.JMP);
        instruction.setTargetLabel(target);
        addInstruction(instruction);
        return this;
!!!33934647.java!!!	addLoad8(inout register : ApfGenerator::Register, in offset : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.LDB, register);
        instruction.setUnsignedImm(offset);
        addInstruction(instruction);
        return this;
!!!33934775.java!!!	addLoad16(inout register : ApfGenerator::Register, in offset : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.LDH, register);
        instruction.setUnsignedImm(offset);
        addInstruction(instruction);
        return this;
!!!33934903.java!!!	addLoad32(inout register : ApfGenerator::Register, in offset : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.LDW, register);
        instruction.setUnsignedImm(offset);
        addInstruction(instruction);
        return this;
!!!33935031.java!!!	addLoad8Indexed(inout register : ApfGenerator::Register, in offset : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.LDBX, register);
        instruction.setUnsignedImm(offset);
        addInstruction(instruction);
        return this;
!!!33935159.java!!!	addLoad16Indexed(inout register : ApfGenerator::Register, in offset : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.LDHX, register);
        instruction.setUnsignedImm(offset);
        addInstruction(instruction);
        return this;
!!!33935287.java!!!	addLoad32Indexed(inout register : ApfGenerator::Register, in offset : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.LDWX, register);
        instruction.setUnsignedImm(offset);
        addInstruction(instruction);
        return this;
!!!33935415.java!!!	addAdd(in value : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.ADD);
        instruction.setSignedImm(value);
        addInstruction(instruction);
        return this;
!!!33935543.java!!!	addMul(in value : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.MUL);
        instruction.setSignedImm(value);
        addInstruction(instruction);
        return this;
!!!33935671.java!!!	addDiv(in value : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.DIV);
        instruction.setSignedImm(value);
        addInstruction(instruction);
        return this;
!!!33935799.java!!!	addAnd(in value : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.AND);
        instruction.setUnsignedImm(value);
        addInstruction(instruction);
        return this;
!!!33935927.java!!!	addOr(in value : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.OR);
        instruction.setUnsignedImm(value);
        addInstruction(instruction);
        return this;
!!!33936055.java!!!	addLeftShift(in value : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.SH);
        instruction.setSignedImm(value);
        addInstruction(instruction);
        return this;
!!!33936183.java!!!	addRightShift(in value : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.SH);
        instruction.setSignedImm(-value);
        addInstruction(instruction);
        return this;
!!!33936311.java!!!	addAddR1() : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.ADD, Register.R1);
        addInstruction(instruction);
        return this;
!!!33936439.java!!!	addMulR1() : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.MUL, Register.R1);
        addInstruction(instruction);
        return this;
!!!33936567.java!!!	addDivR1() : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.DIV, Register.R1);
        addInstruction(instruction);
        return this;
!!!33936695.java!!!	addAndR1() : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.AND, Register.R1);
        addInstruction(instruction);
        return this;
!!!33936823.java!!!	addOrR1() : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.OR, Register.R1);
        addInstruction(instruction);
        return this;
!!!33936951.java!!!	addLeftShiftR1() : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.SH, Register.R1);
        addInstruction(instruction);
        return this;
!!!33937079.java!!!	addLoadImmediate(inout register : ApfGenerator::Register, in value : int) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.LI, register);
        instruction.setSignedImm(value);
        addInstruction(instruction);
        return this;
!!!33937207.java!!!	addJumpIfR0Equals(in value : int, inout target : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.JEQ);
        instruction.setUnsignedImm(value);
        instruction.setTargetLabel(target);
        addInstruction(instruction);
        return this;
!!!33937335.java!!!	addJumpIfR0NotEquals(in value : int, inout target : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.JNE);
        instruction.setUnsignedImm(value);
        instruction.setTargetLabel(target);
        addInstruction(instruction);
        return this;
!!!33937463.java!!!	addJumpIfR0GreaterThan(in value : int, inout target : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.JGT);
        instruction.setUnsignedImm(value);
        instruction.setTargetLabel(target);
        addInstruction(instruction);
        return this;
!!!33937591.java!!!	addJumpIfR0LessThan(in value : int, inout target : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.JLT);
        instruction.setUnsignedImm(value);
        instruction.setTargetLabel(target);
        addInstruction(instruction);
        return this;
!!!33937719.java!!!	addJumpIfR0AnyBitsSet(in value : int, inout target : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.JSET);
        instruction.setUnsignedImm(value);
        instruction.setTargetLabel(target);
        addInstruction(instruction);
        return this;
!!!33937847.java!!!	addJumpIfR0EqualsR1(inout target : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.JEQ, Register.R1);
        instruction.setTargetLabel(target);
        addInstruction(instruction);
        return this;
!!!33937975.java!!!	addJumpIfR0NotEqualsR1(inout target : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.JNE, Register.R1);
        instruction.setTargetLabel(target);
        addInstruction(instruction);
        return this;
!!!33938103.java!!!	addJumpIfR0GreaterThanR1(inout target : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.JGT, Register.R1);
        instruction.setTargetLabel(target);
        addInstruction(instruction);
        return this;
!!!33938231.java!!!	addJumpIfR0LessThanR1(inout target : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.JLT, Register.R1);
        instruction.setTargetLabel(target);
        addInstruction(instruction);
        return this;
!!!33938359.java!!!	addJumpIfR0AnyBitsSetR1(inout target : String) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.JSET, Register.R1);
        instruction.setTargetLabel(target);
        addInstruction(instruction);
        return this;
!!!33938487.java!!!	addJumpIfBytesNotEqual(inout register : ApfGenerator::Register, inout bytes : byte, inout target : String) : ApfGenerator
        if (register == Register.R1) {
            throw new IllegalInstructionException("JNEBS fails with R1");
        }
        Instruction instruction = new Instruction(Opcodes.JNEBS, register);
        instruction.setUnsignedImm(bytes.length);
        instruction.setTargetLabel(target);
        instruction.setCompareBytes(bytes);
        addInstruction(instruction);
        return this;
!!!33938615.java!!!	addLoadFromMemory(inout register : ApfGenerator::Register, in slot : int) : ApfGenerator
        if (slot < 0 || slot > (MEMORY_SLOTS - 1)) {
            throw new IllegalInstructionException("illegal memory slot number: " + slot);
        }
        Instruction instruction = new Instruction(Opcodes.EXT, register);
        instruction.setUnsignedImm(ExtendedOpcodes.LDM.value + slot);
        addInstruction(instruction);
        return this;
!!!33938743.java!!!	addStoreToMemory(inout register : ApfGenerator::Register, in slot : int) : ApfGenerator
        if (slot < 0 || slot > (MEMORY_SLOTS - 1)) {
            throw new IllegalInstructionException("illegal memory slot number: " + slot);
        }
        Instruction instruction = new Instruction(Opcodes.EXT, register);
        instruction.setUnsignedImm(ExtendedOpcodes.STM.value + slot);
        addInstruction(instruction);
        return this;
!!!33938871.java!!!	addNot(inout register : ApfGenerator::Register) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.EXT, register);
        instruction.setUnsignedImm(ExtendedOpcodes.NOT.value);
        addInstruction(instruction);
        return this;
!!!33938999.java!!!	addNeg(inout register : ApfGenerator::Register) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.EXT, register);
        instruction.setUnsignedImm(ExtendedOpcodes.NEG.value);
        addInstruction(instruction);
        return this;
!!!33939127.java!!!	addSwap() : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.EXT);
        instruction.setUnsignedImm(ExtendedOpcodes.SWAP.value);
        addInstruction(instruction);
        return this;
!!!33939255.java!!!	addMove(inout register : ApfGenerator::Register) : ApfGenerator
        Instruction instruction = new Instruction(Opcodes.EXT, register);
        instruction.setUnsignedImm(ExtendedOpcodes.MOVE.value);
        addInstruction(instruction);
        return this;
!!!33939383.java!!!	updateInstructionOffsets() : int
        int offset = 0;
        for (Instruction instruction : mInstructions) {
            instruction.offset = offset;
            offset += instruction.size();
        }
        return offset;
!!!33939511.java!!!	programLengthOverEstimate() : int
        return updateInstructionOffsets();
!!!33939639.java!!!	generate() : byte
        // Enforce that we can only generate once because we cannot unshrink instructions and
        // PASS/DROP labels may move further away requiring unshrinking if we add further
        // instructions.
        if (mGenerated) {
            throw new IllegalStateException("Can only generate() once!");
        }
        mGenerated = true;
        int total_size;
        boolean shrunk;
        // Shrink the immediate value fields of instructions.
        // As we shrink the instructions some branch offset
        // fields may shrink also, thereby shrinking the
        // instructions further. Loop until we've reached the
        // minimum size. Rarely will this loop more than a few times.
        // Limit iterations to avoid O(n^2) behavior.
        int iterations_remaining = 10;
        do {
            total_size = updateInstructionOffsets();
            // Update drop and pass label offsets.
            mDropLabel.offset = total_size + 1;
            mPassLabel.offset = total_size;
            // Limit run-time in aberant circumstances.
            if (iterations_remaining-- == 0) break;
            // Attempt to shrink instructions.
            shrunk = false;
            for (Instruction instruction : mInstructions) {
                if (instruction.shrink()) {
                    shrunk = true;
                }
            }
        } while (shrunk);
        // Generate bytecode for instructions.
        byte[] bytecode = new byte[total_size];
        for (Instruction instruction : mInstructions) {
            instruction.generate(bytecode);
        }
        return bytecode;
