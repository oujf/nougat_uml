class Instruction
!!!33931959.java!!!	Instruction(inout opcode : ApfGenerator::Opcodes, inout register : ApfGenerator::Register)
            mOpcode = (byte)opcode.value;
            mRegister = (byte)register.value;
!!!33932087.java!!!	Instruction(inout opcode : ApfGenerator::Opcodes)
            this(opcode, Register.R0);
!!!33932215.java!!!	setImm(in imm : int, inout signed : boolean) : void
            mHasImm = true;
            mImm = imm;
            mImmSigned = signed;
            mImmSize = calculateImmSize(imm, signed);
!!!33932343.java!!!	setUnsignedImm(in imm : int) : void
            setImm(imm, false);
!!!33932471.java!!!	setSignedImm(in imm : int) : void
            setImm(imm, true);
!!!33932599.java!!!	setLabel(inout label : String) : void
            if (mLabels.containsKey(label)) {
                throw new IllegalInstructionException("duplicate label " + label);
            }
            if (mOpcode != Opcodes.LABEL.value) {
                throw new IllegalStateException("adding label to non-label instruction");
            }
            mLabel = label;
            mLabels.put(label, this);
!!!33932727.java!!!	setTargetLabel(inout label : String) : void
            mTargetLabel = label;
            mTargetLabelSize = 4; // May shrink later on in generate().
!!!33932855.java!!!	setCompareBytes(inout bytes : byte) : void
            if (mOpcode != Opcodes.JNEBS.value) {
                throw new IllegalStateException("adding compare bytes to non-JNEBS instruction");
            }
            mCompareBytes = bytes;
!!!33932983.java!!!	size() : int
            if (mOpcode == Opcodes.LABEL.value) {
                return 0;
            }
            int size = 1;
            if (mHasImm) {
                size += generatedImmSize();
            }
            if (mTargetLabel != null) {
                size += generatedImmSize();
            }
            if (mCompareBytes != null) {
                size += mCompareBytes.length;
            }
            return size;
!!!33933111.java!!!	shrink() : boolean
            if (mTargetLabel == null) {
                return false;
            }
            int oldSize = size();
            int oldTargetLabelSize = mTargetLabelSize;
            mTargetLabelSize = calculateImmSize(calculateTargetLabelOffset(), false);
            if (mTargetLabelSize > oldTargetLabelSize) {
                throw new IllegalStateException("instruction grew");
            }
            return size() < oldSize;
!!!33933239.java!!!	generateImmSizeField() : byte
            byte immSize = generatedImmSize();
            // Encode size field to fit in 2 bits: 0->0, 1->1, 2->2, 3->4.
            return immSize == 4 ? 3 : immSize;
!!!33933367.java!!!	generateInstructionByte() : byte
            byte sizeField = generateImmSizeField();
            return (byte)((mOpcode << 3) | (sizeField << 1) | mRegister);
!!!33933495.java!!!	writeValue(in value : int, inout bytecode : byte, in writingOffset : int) : int
            for (int i = generatedImmSize() - 1; i >= 0; i--) {
                bytecode[writingOffset++] = (byte)((value >> (i * 8)) & 255);
            }
            return writingOffset;
!!!33933623.java!!!	generate(inout bytecode : byte) : void
            if (mOpcode == Opcodes.LABEL.value) {
                return;
            }
            int writingOffset = offset;
            bytecode[writingOffset++] = generateInstructionByte();
            if (mTargetLabel != null) {
                writingOffset = writeValue(calculateTargetLabelOffset(), bytecode, writingOffset);
            }
            if (mHasImm) {
                writingOffset = writeValue(mImm, bytecode, writingOffset);
            }
            if (mCompareBytes != null) {
                System.arraycopy(mCompareBytes, 0, bytecode, writingOffset, mCompareBytes.length);
                writingOffset += mCompareBytes.length;
            }
            if ((writingOffset - offset) != size()) {
                throw new IllegalStateException("wrote " + (writingOffset - offset) +
                        " but should have written " + size());
            }
!!!33933751.java!!!	generatedImmSize() : byte
            return mImmSize > mTargetLabelSize ? mImmSize : mTargetLabelSize;
!!!33933879.java!!!	calculateTargetLabelOffset() : int
            Instruction targetLabelInstruction;
            if (mTargetLabel == DROP_LABEL) {
                targetLabelInstruction = mDropLabel;
            } else if (mTargetLabel == PASS_LABEL) {
                targetLabelInstruction = mPassLabel;
            } else {
                targetLabelInstruction = mLabels.get(mTargetLabel);
            }
            if (targetLabelInstruction == null) {
                throw new IllegalInstructionException("label not found: " + mTargetLabel);
            }
            // Calculate distance from end of this instruction to instruction.offset.
            final int targetLabelOffset = targetLabelInstruction.offset - (offset + size());
            if (targetLabelOffset < 0) {
                throw new IllegalInstructionException("backward branches disallowed; label: " +
                        mTargetLabel);
            }
            return targetLabelOffset;
!!!33934007.java!!!	calculateImmSize(in imm : int, inout signed : boolean) : byte
            if (imm == 0) {
                return 0;
            }
            if (signed && (imm >= -128 && imm <= 127) ||
                    !signed && (imm >= 0 && imm <= 255)) {
                return 1;
            }
            if (signed && (imm >= -32768 && imm <= 32767) ||
                    !signed && (imm >= 0 && imm <= 65535)) {
                return 2;
            }
            return 4;
