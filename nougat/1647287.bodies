class StructNdaCacheInfo
!!!33975991.java!!!	hasAvailableSpace(inout byteBuffer : ByteBuffer) : boolean
        return byteBuffer != null && byteBuffer.remaining() >= STRUCT_SIZE;
!!!33976119.java!!!	parse(inout byteBuffer : ByteBuffer) : StructNdaCacheInfo
        if (!hasAvailableSpace(byteBuffer)) { return null; }

        // The ByteOrder must have already been set by the caller.  In most
        // cases ByteOrder.nativeOrder() is correct, with the possible
        // exception of usage within unittests.
        final StructNdaCacheInfo struct = new StructNdaCacheInfo();
        struct.ndm_used = byteBuffer.getInt();
        struct.ndm_confirmed = byteBuffer.getInt();
        struct.ndm_updated = byteBuffer.getInt();
        struct.ndm_refcnt = byteBuffer.getInt();
        return struct;
!!!33976247.java!!!	ticksToMilliSeconds(in intClockTicks : int) : long
        final long longClockTicks = (long) intClockTicks & 0xffffffff;
        return (longClockTicks * 1000) / CLOCK_TICKS_PER_SECOND;
!!!33976503.java!!!	lastUsed() : long
        return ticksToMilliSeconds(ndm_used);
!!!33976631.java!!!	lastConfirmed() : long
        return ticksToMilliSeconds(ndm_confirmed);
!!!33976759.java!!!	lastUpdated() : long
        return ticksToMilliSeconds(ndm_updated);
!!!33976887.java!!!	toString() : String
        return "NdaCacheInfo{ "
                + "ndm_used{" + lastUsed() + "}, "
                + "ndm_confirmed{" + lastConfirmed() + "}, "
                + "ndm_updated{" + lastUpdated() + "}, "
                + "ndm_refcnt{" + ndm_refcnt + "} "
                + "}";
