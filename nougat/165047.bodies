class InsnFormat
!!!433079.java!!!	listingString(inout insn : DalvInsn, inout noteIndices : boolean) : String
        String op = insn.getOpcode().getName();
        String arg = insnArgString(insn);
        String comment = insnCommentString(insn, noteIndices);
        StringBuilder sb = new StringBuilder(100);

        sb.append(op);

        if (arg.length() != 0) {
            sb.append(' ');
            sb.append(arg);
        }

        if (comment.length() != 0) {
            sb.append(" // ");
            sb.append(comment);
        }

        return sb.toString();
!!!433719.java!!!	branchFits(inout insn : TargetInsn) : boolean
        return false;
!!!434103.java!!!	regListString(inout list : RegisterSpecList) : String
        int sz = list.size();
        StringBuffer sb = new StringBuffer(sz * 5 + 2);

        sb.append('{');

        for (int i = 0; i < sz; i++) {
            if (i != 0) {
                sb.append(", ");
            }
            sb.append(list.get(i).regString());
        }

        sb.append('}');

        return sb.toString();
!!!434231.java!!!	literalBitsString(inout value : CstLiteralBits) : String
        StringBuffer sb = new StringBuffer(100);

        sb.append('#');

        if (value instanceof CstKnownNull) {
            sb.append("null");
        } else {
            sb.append(value.typeName());
            sb.append(' ');
            sb.append(value.toHuman());
        }

        return sb.toString();
!!!434359.java!!!	literalBitsComment(inout value : CstLiteralBits, in width : int) : String
        StringBuffer sb = new StringBuffer(20);

        sb.append("#");

        long bits;

        if (value instanceof CstLiteral64) {
            bits = ((CstLiteral64) value).getLongBits();
        } else {
            bits = value.getIntBits();
        }

        switch (width) {
            case 4:  sb.append(Hex.uNibble((int) bits)); break;
            case 8:  sb.append(Hex.u1((int) bits));      break;
            case 16: sb.append(Hex.u2((int) bits));      break;
            case 32: sb.append(Hex.u4((int) bits));      break;
            case 64: sb.append(Hex.u8(bits));            break;
            default: {
                throw new RuntimeException("shouldn't happen");
            }
        }

        return sb.toString();
!!!434487.java!!!	branchString(inout insn : DalvInsn) : String
        TargetInsn ti = (TargetInsn) insn;
        int address = ti.getTargetAddress();

        return (address == (char) address) ? Hex.u2(address) : Hex.u4(address);
!!!434615.java!!!	branchComment(inout insn : DalvInsn) : String
        TargetInsn ti = (TargetInsn) insn;
        int offset = ti.getTargetOffset();

        return (offset == (short) offset) ? Hex.s2(offset) : Hex.s4(offset);
!!!434743.java!!!	cstString(inout insn : DalvInsn) : String
        CstInsn ci = (CstInsn) insn;
        Constant cst = ci.getConstant();

        return cst.toHuman();
!!!434871.java!!!	cstComment(inout insn : DalvInsn) : String
        CstInsn ci = (CstInsn) insn;

        if (! ci.hasIndex()) {
            return "";
        }

        StringBuilder sb = new StringBuilder(20);
        int index = ci.getIndex();

        sb.append(ci.getConstant().typeName());
        sb.append('@');

        if (index < 65536) {
            sb.append(Hex.u2(index));
        } else {
            sb.append(Hex.u4(index));
        }

        return sb.toString();
!!!434999.java!!!	signedFitsInNibble(in value : int) : boolean
        return (value >= -8) && (value <= 7);
!!!435127.java!!!	unsignedFitsInNibble(in value : int) : boolean
        return value == (value & 0xf);
!!!435255.java!!!	signedFitsInByte(in value : int) : boolean
        return (byte) value == value;
!!!435383.java!!!	unsignedFitsInByte(in value : int) : boolean
        return value == (value & 0xff);
!!!435511.java!!!	signedFitsInShort(in value : int) : boolean
        return (short) value == value;
!!!435639.java!!!	unsignedFitsInShort(in value : int) : boolean
        return value == (value & 0xffff);
!!!435767.java!!!	signedFitsIn3Bytes(in value : int) : boolean
        return value == ((value << 8) >> 8);
!!!435895.java!!!	argIndex(inout insn : DalvInsn) : int
        int arg = ((CstInteger) ((CstInsn) insn).getConstant()).getValue();

        if (arg < 0) {
            throw new IllegalArgumentException("bogus insn");
        }

        return arg;
!!!436023.java!!!	opcodeUnit(inout insn : DalvInsn, in arg : int) : short
        if ((arg & 0xff) != arg) {
            throw new IllegalArgumentException("arg out of range 0..255");
        }

        int opcode = insn.getOpcode().getOpcode();

        if ((opcode & 0xff) != opcode) {
            throw new IllegalArgumentException("opcode out of range 0..255");
        }

        return (short) (opcode | (arg << 8));
!!!436151.java!!!	codeUnit(in low : int, in high : int) : short
        if ((low & 0xff) != low) {
            throw new IllegalArgumentException("low out of range 0..255");
        }

        if ((high & 0xff) != high) {
            throw new IllegalArgumentException("high out of range 0..255");
        }

        return (short) (low | (high << 8));
!!!436279.java!!!	codeUnit(in n0 : int, in n1 : int, in n2 : int, in n3 : int) : short
        if ((n0 & 0xf) != n0) {
            throw new IllegalArgumentException("n0 out of range 0..15");
        }

        if ((n1 & 0xf) != n1) {
            throw new IllegalArgumentException("n1 out of range 0..15");
        }

        if ((n2 & 0xf) != n2) {
            throw new IllegalArgumentException("n2 out of range 0..15");
        }

        if ((n3 & 0xf) != n3) {
            throw new IllegalArgumentException("n3 out of range 0..15");
        }

        return (short) (n0 | (n1 << 4) | (n2 << 8) | (n3 << 12));
!!!436407.java!!!	makeByte(in low : int, in high : int) : int
        if ((low & 0xf) != low) {
            throw new IllegalArgumentException("low out of range 0..15");
        }

        if ((high & 0xf) != high) {
            throw new IllegalArgumentException("high out of range 0..15");
        }

        return low | (high << 4);
!!!436535.java!!!	write(inout out : AnnotatedOutput, in c0 : short) : void
        out.writeShort(c0);
!!!436663.java!!!	write(inout out : AnnotatedOutput, in c0 : short, in c1 : short) : void
        out.writeShort(c0);
        out.writeShort(c1);
!!!436791.java!!!	write(inout out : AnnotatedOutput, in c0 : short, in c1 : short, in c2 : short) : void
        out.writeShort(c0);
        out.writeShort(c1);
        out.writeShort(c2);
!!!436919.java!!!	write(inout out : AnnotatedOutput, in c0 : short, in c1 : short, in c2 : short, in c3 : short) : void
        out.writeShort(c0);
        out.writeShort(c1);
        out.writeShort(c2);
        out.writeShort(c3);
!!!437047.java!!!	write(inout out : AnnotatedOutput, in c0 : short, in c1 : short, in c2 : short, in c3 : short, in c4 : short) : void
        out.writeShort(c0);
        out.writeShort(c1);
        out.writeShort(c2);
        out.writeShort(c3);
        out.writeShort(c4);
!!!437175.java!!!	write(inout out : AnnotatedOutput, in c0 : short, in c1 : short, in c2 : short, in c3 : short, in c4 : short, in c5 : short) : void
        out.writeShort(c0);
        out.writeShort(c1);
        out.writeShort(c2);
        out.writeShort(c3);
        out.writeShort(c4);
        out.writeShort(c5);
