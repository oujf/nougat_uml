class Vector3Test
!!!34070071.java!!!	nearlyEqual(in a : float, in b : float) : boolean
        return Math.abs(a - b) <= tolerance;
!!!34070199.java!!!	setUp() : void
        super.setUp();
        unitXAxis = new AnyMotionDetector.Vector3(0, 1, 0, 0);
        unitYAxis = new AnyMotionDetector.Vector3(0, 0, 1, 0);
        unitZAxis = new AnyMotionDetector.Vector3(0, 0, 0, 1);
        x3 = new AnyMotionDetector.Vector3(0, 3, 0, 0);
        x1y1 = new AnyMotionDetector.Vector3(0, 1, 1, 0);
        xn1y1 = new AnyMotionDetector.Vector3(0, -1, 1, 0);
        x1z1 = new AnyMotionDetector.Vector3(0, 1, 0, 1);
        y1z1 = new AnyMotionDetector.Vector3(0, 0, 1, 1);
        piOverSixUnitCircle = new AnyMotionDetector.Vector3(
                0, (float)Math.sqrt(3)/2, (float)0.5, 0);

        case1A = new AnyMotionDetector.Vector3(0, -9.81f, -0.02f, 0.3f);
        case1B = new AnyMotionDetector.Vector3(0, -9.80f, -0.02f, 0.3f);
        case2A = new AnyMotionDetector.Vector3(0, 1f, 2f, 3f);
        case2B = new AnyMotionDetector.Vector3(0, 4f, 5f, 6f);
!!!34070327.java!!!	testVector3Norm() : void
        assertTrue(nearlyEqual(unitXAxis.norm(), 1.0f));
        assertTrue(nearlyEqual(unitYAxis.norm(), 1.0f));
        assertTrue(nearlyEqual(unitZAxis.norm(), 1.0f));
        assertTrue(nearlyEqual(x1y1.norm(), (float)Math.sqrt(2)));
!!!34070455.java!!!	testVector3AngleBetween() : void
        // Zero angle.
        assertTrue(nearlyEqual(unitXAxis.angleBetween(unitXAxis), 0.0f));
        assertTrue(nearlyEqual(unitYAxis.angleBetween(unitYAxis), 0.0f));
        assertTrue(nearlyEqual(unitZAxis.angleBetween(unitZAxis), 0.0f));

        // Unit axes should be perpendicular.
        assertTrue(nearlyEqual(unitXAxis.angleBetween(unitYAxis), 90.0f));
        assertTrue(nearlyEqual(unitXAxis.angleBetween(unitZAxis), 90.0f));
        assertTrue(nearlyEqual(unitYAxis.angleBetween(unitZAxis), 90.0f));

        // 45 degree angles.
        assertTrue(nearlyEqual(unitXAxis.angleBetween(x1y1), 45.0f));
        assertTrue(nearlyEqual(unitYAxis.angleBetween(x1y1), 45.0f));

        // 135 degree angles.
        assertTrue(nearlyEqual(xn1y1.angleBetween(unitXAxis), 135.0f));

        // 30 degree angles.
        assertTrue(nearlyEqual(piOverSixUnitCircle.angleBetween(unitXAxis), 30.0f));

        // These vectors are expected to be still.
        assertTrue(case1A.angleBetween(case1A) < STATIONARY_ANGLE_THRESHOLD);
        assertTrue(case1A.angleBetween(case1B) < STATIONARY_ANGLE_THRESHOLD);
        assertTrue(unitXAxis.angleBetween(unitXAxis) < STATIONARY_ANGLE_THRESHOLD);
        assertTrue(unitYAxis.angleBetween(unitYAxis) < STATIONARY_ANGLE_THRESHOLD);
        assertTrue(unitZAxis.angleBetween(unitZAxis) < STATIONARY_ANGLE_THRESHOLD);
!!!34070583.java!!!	testVector3Normalized() : void
        AnyMotionDetector.Vector3 unitXAxisNormalized = unitXAxis.normalized();
        assertTrue(nearlyEqual(unitXAxisNormalized.x, unitXAxis.x));
        assertTrue(nearlyEqual(unitXAxisNormalized.y, unitXAxis.y));
        assertTrue(nearlyEqual(unitXAxisNormalized.z, unitXAxis.z));

        // Normalizing the vector created by multiplying the unit vector by 3 gets the unit vector.
        AnyMotionDetector.Vector3 x3Normalized = x3.normalized();
        assertTrue(nearlyEqual(x3Normalized.x, unitXAxis.x));
        assertTrue(nearlyEqual(x3Normalized.y, unitXAxis.y));
        assertTrue(nearlyEqual(x3Normalized.z, unitXAxis.z));
!!!34070711.java!!!	testVector3Cross() : void
        AnyMotionDetector.Vector3 xCrossX = unitXAxis.cross(unitXAxis);
        assertTrue(nearlyEqual(xCrossX.x, 0f));
        assertTrue(nearlyEqual(xCrossX.y, 0f));
        assertTrue(nearlyEqual(xCrossX.z, 0f));

        AnyMotionDetector.Vector3 xCrossNx = unitXAxis.cross(unitXAxis.times(-1));
        assertTrue(nearlyEqual(xCrossNx.x, 0f));
        assertTrue(nearlyEqual(xCrossNx.y, 0f));
        assertTrue(nearlyEqual(xCrossNx.z, 0f));

        AnyMotionDetector.Vector3 cross2 = case2A.cross(case2B);
        assertTrue(nearlyEqual(cross2.x, -3));
        assertTrue(nearlyEqual(cross2.y, 6));
        assertTrue(nearlyEqual(cross2.z, -3));
!!!34070839.java!!!	testVector3Times() : void
         AnyMotionDetector.Vector3 yTimes2 = unitYAxis.times(2);
         assertTrue(nearlyEqual(yTimes2.x, 0f));
         assertTrue(nearlyEqual(yTimes2.y, 2f));
         assertTrue(nearlyEqual(yTimes2.z, 0f));
!!!34070967.java!!!	testVector3Plus() : void
         AnyMotionDetector.Vector3 xPlusY = unitXAxis.plus(unitYAxis);
         assertTrue(nearlyEqual(xPlusY.x, 1f));
         assertTrue(nearlyEqual(xPlusY.y, 1f));
         assertTrue(nearlyEqual(xPlusY.z, 0f));
!!!34071095.java!!!	testVector3Minus() : void
         AnyMotionDetector.Vector3 xMinusY = unitXAxis.minus(unitYAxis);
         assertTrue(nearlyEqual(xMinusY.x, 1f));
         assertTrue(nearlyEqual(xMinusY.y, -1f));
         assertTrue(nearlyEqual(xMinusY.z, 0f));
!!!34071223.java!!!	testVector3DotProduct() : void
         float xDotX = unitXAxis.dotProduct(unitXAxis);
         float xDotY = unitXAxis.dotProduct(unitYAxis);
         float xDotZ = unitXAxis.dotProduct(unitZAxis);
         assertTrue(nearlyEqual(xDotX, 1f));
         assertTrue(nearlyEqual(xDotY, 0f));
         assertTrue(nearlyEqual(xDotZ, 0f));
