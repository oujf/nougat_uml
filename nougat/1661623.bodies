class DpmMockContext
!!!34124343.java!!!	DpmMockContext(inout context : Context, inout dataDir : File)
        realTestContext = context;

        this.dataDir = dataDir;
        DpmTestUtils.clearDir(dataDir);

        binder = new MockBinder();
        environment = mock(EnvironmentForMock.class);
        systemProperties= mock(SystemPropertiesForMock.class);
        userManager = mock(UserManager.class);
        userManagerInternal = mock(UserManagerInternal.class);
        userManagerForMock = mock(UserManagerForMock.class);
        packageManagerInternal = mock(PackageManagerInternal.class);
        powerManager = mock(PowerManagerForMock.class);
        powerManagerInternal = mock(PowerManagerInternal.class);
        notificationManager = mock(NotificationManager.class);
        iwindowManager = mock(IWindowManager.class);
        iactivityManager = mock(IActivityManager.class);
        ipackageManager = mock(IPackageManager.class);
        ibackupManager = mock(IBackupManager.class);
        iaudioService = mock(IAudioService.class);
        lockPatternUtils = mock(LockPatternUtils.class);
        storageManager = mock(StorageManagerForMock.class);
        wifiManager = mock(WifiManager.class);
        settings = mock(SettingsForMock.class);
        telephonyManager = mock(TelephonyManager.class);

        // Package manager is huge, so we use a partial mock instead.
        packageManager = spy(context.getPackageManager());

        spiedContext = mock(Context.class);

        contentResolver = new MockContentResolver();

        // Add the system user
        systemUserDataDir = addUser(UserHandle.USER_SYSTEM, UserInfo.FLAG_PRIMARY);

        // System user is always running.
        setUserRunning(UserHandle.USER_SYSTEM, true);
!!!34124471.java!!!	addUser(in userId : int, in flags : int) : File

        // Set up (default) UserInfo for CALLER_USER_HANDLE.
        final UserInfo uh = new UserInfo(userId, "user" + userId, flags);
        when(userManager.getUserInfo(eq(userId))).thenReturn(uh);

        mUserInfos.add(uh);
        when(userManager.getUsers()).thenReturn(mUserInfos);
        when(userManager.getUsers(anyBoolean())).thenReturn(mUserInfos);
        when(userManager.isUserRunning(eq(new UserHandle(userId)))).thenReturn(true);
        when(userManager.getUserInfo(anyInt())).thenAnswer(
                new Answer<UserInfo>() {
                    @Override
                    public UserInfo answer(InvocationOnMock invocation) throws Throwable {
                        final int userId = (int) invocation.getArguments()[0];
                        for (UserInfo ui : mUserInfos) {
                            if (ui.id == userId) {
                                return ui;
                            }
                        }
                        return null;
                    }
                }
        );
        when(userManager.getProfiles(anyInt())).thenAnswer(
                new Answer<List<UserInfo>>() {
                    @Override
                    public List<UserInfo> answer(InvocationOnMock invocation) throws Throwable {
                        final int userId = (int) invocation.getArguments()[0];
                        return getProfiles(userId);
                    }
                }
        );
        when(userManager.getProfileIdsWithDisabled(anyInt())).thenAnswer(
                new Answer<int[]>() {
                    @Override
                    public int[] answer(InvocationOnMock invocation) throws Throwable {
                        final int userId = (int) invocation.getArguments()[0];
                        List<UserInfo> profiles = getProfiles(userId);
                        int[] results = new int[profiles.size()];
                        for (int i = 0; i < results.length; i++) {
                            results[i] = profiles.get(i).id;
                        }
                        return results;
                    }
                }
        );


        // Create a data directory.
        final File dir = new File(dataDir, "user" + userId);
        DpmTestUtils.clearDir(dir);

        when(environment.getUserSystemDirectory(eq(userId))).thenReturn(dir);
        return dir;
!!!34124599.java!!!	getProfiles(in userId : int) : UserInfo
        final ArrayList<UserInfo> ret = new ArrayList<UserInfo>();
        UserInfo parent = null;
        for (UserInfo ui : mUserInfos) {
            if (ui.id == userId) {
                parent = ui;
                break;
            }
        }
        if (parent == null) {
            return ret;
        }
        ret.add(parent);
        for (UserInfo ui : mUserInfos) {
            if (ui.id == userId) {
                continue;
            }
            if (ui.profileGroupId != UserInfo.NO_PROFILE_GROUP_ID
                    && ui.profileGroupId == parent.profileGroupId) {
                ret.add(ui);
            }
        }
        return ret;
!!!34124727.java!!!	addUsers(inout  : int...userIds) : void
        for (int userId : userIds) {
            addUser(userId, 0);
        }
!!!34124855.java!!!	setUserRunning(in userId : int, inout isRunning : boolean) : void
        when(userManager.isUserRunning(MockUtils.checkUserHandle(userId)))
                .thenReturn(isRunning);
!!!34124983.java!!!	getSystemService(inout name : String) : Object
        switch (name) {
            case Context.USER_SERVICE:
                return userManager;
            case Context.POWER_SERVICE:
                return powerManager;
            case Context.WIFI_SERVICE:
                return wifiManager;
        }
        throw new UnsupportedOperationException();
!!!34125111.java!!!	getSystemServiceName(inout serviceClass : Class) : String
        return realTestContext.getSystemServiceName(serviceClass);
!!!34125239.java!!!	getPackageManager() : PackageManager
        return packageManager;
!!!34125367.java!!!	enforceCallingOrSelfPermission(inout permission : String, inout message : String) : void
        if (binder.getCallingUid() == SYSTEM_UID) {
            return; // Assume system has all permissions.
        }
        if (!callerPermissions.contains(permission)) {
            throw new SecurityException("Caller doesn't have " + permission + " : " + message);
        }
!!!34125495.java!!!	sendBroadcast(inout intent : Intent) : void
        spiedContext.sendBroadcast(intent);
!!!34125623.java!!!	sendBroadcast(inout intent : Intent, inout receiverPermission : String) : void
        spiedContext.sendBroadcast(intent, receiverPermission);
!!!34125751.java!!!	sendBroadcastMultiplePermissions(inout intent : Intent, inout receiverPermissions : String) : void
        spiedContext.sendBroadcastMultiplePermissions(intent, receiverPermissions);
!!!34125879.java!!!	sendBroadcast(inout intent : Intent, inout receiverPermission : String, inout options : Bundle) : void
        spiedContext.sendBroadcast(intent, receiverPermission, options);
!!!34126007.java!!!	sendBroadcast(inout intent : Intent, inout receiverPermission : String, in appOp : int) : void
        spiedContext.sendBroadcast(intent, receiverPermission, appOp);
!!!34126135.java!!!	sendOrderedBroadcast(inout intent : Intent, inout receiverPermission : String) : void
        spiedContext.sendOrderedBroadcast(intent, receiverPermission);
!!!34126263.java!!!	sendOrderedBroadcast(inout intent : Intent, inout receiverPermission : String, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        spiedContext.sendOrderedBroadcast(intent, receiverPermission, resultReceiver, scheduler,
                initialCode, initialData, initialExtras);
!!!34126391.java!!!	sendOrderedBroadcast(inout intent : Intent, inout receiverPermission : String, inout options : Bundle, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        spiedContext.sendOrderedBroadcast(intent, receiverPermission, options, resultReceiver,
                scheduler,
                initialCode, initialData, initialExtras);
!!!34126519.java!!!	sendOrderedBroadcast(inout intent : Intent, inout receiverPermission : String, in appOp : int, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        spiedContext.sendOrderedBroadcast(intent, receiverPermission, appOp, resultReceiver,
                scheduler,
                initialCode, initialData, initialExtras);
!!!34126647.java!!!	sendBroadcastAsUser(inout intent : Intent, inout user : UserHandle) : void
        if (binder.callingPid != SYSTEM_PID) {
            // Unless called as the system process, can only call if the target user is the
            // calling user.
            // (The actual check is more complex; we may need to change it later.)
            Assert.assertEquals(UserHandle.getUserId(binder.getCallingUid()), user.getIdentifier());
        }

        spiedContext.sendBroadcastAsUser(intent, user);
!!!34126775.java!!!	sendBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String) : void
        spiedContext.sendBroadcastAsUser(intent, user, receiverPermission);
!!!34126903.java!!!	sendBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, in appOp : int) : void
        spiedContext.sendBroadcastAsUser(intent, user, receiverPermission, appOp);
!!!34127031.java!!!	sendOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        spiedContext.sendOrderedBroadcastAsUser(intent, user, receiverPermission, resultReceiver,
                scheduler, initialCode, initialData, initialExtras);
!!!34127159.java!!!	sendOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, in appOp : int, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        spiedContext.sendOrderedBroadcastAsUser(intent, user, receiverPermission, appOp,
                resultReceiver,
                scheduler, initialCode, initialData, initialExtras);
!!!34127287.java!!!	sendOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, in appOp : int, inout options : Bundle, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        spiedContext.sendOrderedBroadcastAsUser(intent, user, receiverPermission, appOp, options,
                resultReceiver, scheduler, initialCode, initialData, initialExtras);
!!!34127415.java!!!	sendStickyBroadcast(inout intent : Intent) : void
        spiedContext.sendStickyBroadcast(intent);
!!!34127543.java!!!	sendStickyOrderedBroadcast(inout intent : Intent, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        spiedContext.sendStickyOrderedBroadcast(intent, resultReceiver, scheduler, initialCode,
                initialData, initialExtras);
!!!34127671.java!!!	removeStickyBroadcast(inout intent : Intent) : void
        spiedContext.removeStickyBroadcast(intent);
!!!34127799.java!!!	sendStickyBroadcastAsUser(inout intent : Intent, inout user : UserHandle) : void
        spiedContext.sendStickyBroadcastAsUser(intent, user);
!!!34127927.java!!!	sendStickyOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
        spiedContext.sendStickyOrderedBroadcastAsUser(intent, user, resultReceiver, scheduler, initialCode,
                initialData, initialExtras);
!!!34128055.java!!!	removeStickyBroadcastAsUser(inout intent : Intent, inout user : UserHandle) : void
        spiedContext.removeStickyBroadcastAsUser(intent, user);
!!!34128183.java!!!	registerReceiver(inout receiver : BroadcastReceiver, inout filter : IntentFilter) : Intent
        return spiedContext.registerReceiver(receiver, filter);
!!!34128311.java!!!	registerReceiver(inout receiver : BroadcastReceiver, inout filter : IntentFilter, inout broadcastPermission : String, inout scheduler : Handler) : Intent
        return spiedContext.registerReceiver(receiver, filter, broadcastPermission, scheduler);
!!!34128439.java!!!	registerReceiverAsUser(inout receiver : BroadcastReceiver, inout user : UserHandle, inout filter : IntentFilter, inout broadcastPermission : String, inout scheduler : Handler) : Intent
        return spiedContext.registerReceiverAsUser(receiver, user, filter, broadcastPermission,
                scheduler);
!!!34128567.java!!!	unregisterReceiver(inout receiver : BroadcastReceiver) : void
        spiedContext.unregisterReceiver(receiver);
!!!34128695.java!!!	getContentResolver() : ContentResolver
        return contentResolver;
