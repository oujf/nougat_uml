class LocalService
!!!34213303.java!!!	reportEvent(inout component : ComponentName, in userId : int, in eventType : int) : void
            if (component == null) {
                Slog.w(TAG, "Event reported without a component name");
                return;
            }

            UsageEvents.Event event = new UsageEvents.Event();
            event.mPackage = component.getPackageName();
            event.mClass = component.getClassName();

            // This will later be converted to system time.
            event.mTimeStamp = SystemClock.elapsedRealtime();

            event.mEventType = eventType;
            mHandler.obtainMessage(MSG_REPORT_EVENT, userId, 0, event).sendToTarget();
!!!34213431.java!!!	reportEvent(inout packageName : String, in userId : int, in eventType : int) : void
            if (packageName == null) {
                Slog.w(TAG, "Event reported without a package name");
                return;
            }

            UsageEvents.Event event = new UsageEvents.Event();
            event.mPackage = packageName;

            // This will later be converted to system time.
            event.mTimeStamp = SystemClock.elapsedRealtime();

            event.mEventType = eventType;
            mHandler.obtainMessage(MSG_REPORT_EVENT, userId, 0, event).sendToTarget();
!!!34213559.java!!!	reportConfigurationChange(inout config : Configuration, in userId : int) : void
            if (config == null) {
                Slog.w(TAG, "Configuration event reported with a null config");
                return;
            }

            UsageEvents.Event event = new UsageEvents.Event();
            event.mPackage = "android";

            // This will later be converted to system time.
            event.mTimeStamp = SystemClock.elapsedRealtime();

            event.mEventType = UsageEvents.Event.CONFIGURATION_CHANGE;
            event.mConfiguration = new Configuration(config);
            mHandler.obtainMessage(MSG_REPORT_EVENT, userId, 0, event).sendToTarget();
!!!34213687.java!!!	reportContentProviderUsage(inout name : String, inout packageName : String, in userId : int) : void
            SomeArgs args = SomeArgs.obtain();
            args.arg1 = name;
            args.arg2 = packageName;
            args.arg3 = userId;
            mHandler.obtainMessage(MSG_REPORT_CONTENT_PROVIDER_USAGE, args)
                    .sendToTarget();
!!!34213815.java!!!	isAppIdle(inout packageName : String, in uidForAppId : int, in userId : int) : boolean
            return UsageStatsService.this.isAppIdleFiltered(packageName, uidForAppId, userId,
                    SystemClock.elapsedRealtime());
!!!34213943.java!!!	getIdleUidsForUser(in userId : int) : int
            return UsageStatsService.this.getIdleUidsForUser(userId);
!!!34214071.java!!!	isAppIdleParoleOn() : boolean
            return mAppIdleParoled;
!!!34214199.java!!!	prepareShutdown() : void
            // This method *WILL* do IO work, but we must block until it is finished or else
            // we might not shutdown cleanly. This is ok to do with the 'am' lock held, because
            // we are shutting down.
            shutdown();
!!!34214327.java!!!	addAppIdleStateChangeListener(inout listener : UsageStatsManagerInternal::AppIdleStateChangeListener) : void
            UsageStatsService.this.addListener(listener);
            listener.onParoleStateChanged(isAppIdleParoleOn());
!!!34214455.java!!!	removeAppIdleStateChangeListener(inout listener : UsageStatsManagerInternal::AppIdleStateChangeListener) : void
            UsageStatsService.this.removeListener(listener);
!!!34214583.java!!!	getBackupPayload(in user : int, inout key : String) : byte
            // Check to ensure that only user 0's data is b/r for now
            if (user == UserHandle.USER_SYSTEM) {
                final UserUsageStatsService userStats =
                        getUserDataAndInitializeIfNeededLocked(user, checkAndGetTimeLocked());
                return userStats.getBackupPayload(key);
            } else {
                return null;
            }
!!!34214711.java!!!	applyRestoredPayload(in user : int, inout key : String, inout payload : byte) : void
            if (user == UserHandle.USER_SYSTEM) {
                final UserUsageStatsService userStats =
                        getUserDataAndInitializeIfNeededLocked(user, checkAndGetTimeLocked());
                userStats.applyRestoredPayload(key, payload);
            }
