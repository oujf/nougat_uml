format 76
"nfc" // nougat_src::frameworks::base::core::java::android::nfc
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/base/core/java/android/nfc/"
  java_package "android.nfc"
  classview 162231 "nfc"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 530231 "ApduList"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "@hide"
      classrelation 1405239 // <realization>
	relation 1405239 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1405239 // <realization>
	  b parent class_ref 137399 // Parcelable
      end

      attribute 1555255 "commands"
	private explicit_type "byte[]"
	init_value " new ArrayList<byte[]>()"
	stereotype "ArrayList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3634999 "ApduList"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3635127 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "command" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3635255 "get"
	public explicit_return_type "List<byte[]>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 1405367 // CREATOR (<unidirectional association>)
	relation 1405367 --->
	  a role_name "CREATOR" init_value "
        new Parcelable.Creator<ApduList>() {
        @Override
        public ApduList createFromParcel(Parcel in) {
            return new ApduList(in);
        }

        @Override
        public ApduList[] newArray(int size) {
            return new ApduList[size];
        }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ApduList> ${name}${value};
"
	    classrelation_ref 1405367 // CREATOR (<unidirectional association>)
	  b parent class_ref 137655 // Creator
      end

      operation 3635383 "ApduList"
	private explicit_return_type ""
	nparams 1
	  param inout name "in" type class_ref 137527 // Parcel
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3635511 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3635639 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 137527 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 530359 "BeamShareData"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Class to IPC data to be shared over Android Beam.
Allows bundling NdefMessage, Uris and flags in a single
IPC call. This is important as we want to reduce the
amount of IPC calls at \"touch time\".
@hide"
      classrelation 1405495 // <realization>
	relation 1405495 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1405495 // <realization>
	  b parent class_ref 137399 // Parcelable
      end

      classrelation 1405623 // ndefMessage (<unidirectional association>)
	relation 1405623 --->
	  a role_name "ndefMessage" const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1405623 // ndefMessage (<unidirectional association>)
	  b parent class_ref 530487 // NdefMessage
      end

      classrelation 1405751 // uris (<unidirectional association>)
	relation 1405751 --->
	  a role_name "uris" multiplicity "[]" const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1405751 // uris (<unidirectional association>)
	  b parent class_ref 133047 // Uri
      end

      classrelation 1405879 // userHandle (<unidirectional association>)
	relation 1405879 --->
	  a role_name "userHandle" const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1405879 // userHandle (<unidirectional association>)
	  b parent class_ref 131383 // UserHandle
      end

      attribute 1555383 "flags"
	const_attribute public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3635767 "BeamShareData"
	public explicit_return_type ""
	nparams 4
	  param inout name "msg" type class_ref 530487 // NdefMessage
	  param inout name "uris" type class_ref 133047 // Uri
	  param inout name "userHandle" type class_ref 131383 // UserHandle
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3635895 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3636023 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 137527 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 1406007 // CREATOR (<unidirectional association>)
	relation 1406007 --->
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<BeamShareData>() {
        @Override
        public BeamShareData createFromParcel(Parcel source) {
            Uri[] uris = null;
            NdefMessage msg = source.readParcelable(NdefMessage.class.getClassLoader());
            int numUris = source.readInt();
            if (numUris > 0) {
                uris = new Uri[numUris];
                source.readTypedArray(uris, Uri.CREATOR);
            }
            UserHandle userHandle = source.readParcelable(UserHandle.class.getClassLoader());
            int flags = source.readInt();

            return new BeamShareData(msg, uris, userHandle, flags);
        }

        @Override
        public BeamShareData[] newArray(int size) {
            return new BeamShareData[size];
        }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<BeamShareData> ${name}${value};
"
	    classrelation_ref 1406007 // CREATOR (<unidirectional association>)
	  b parent class_ref 137655 // Creator
      end
    end

    class 530487 "NdefMessage"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents an immutable NDEF Message.
<p>
NDEF (NFC Data Exchange Format) is a light-weight binary format,
used to encapsulate typed data. It is specified by the NFC Forum,
for transmission and storage with NFC, however it is transport agnostic.
<p>
NDEF defines messages and records. An NDEF Record contains
typed data, such as MIME-type media, a URI, or a custom
application payload. An NDEF Message is a container for
one or more NDEF Records.
<p>
When an Android device receives an NDEF Message
(for example by reading an NFC tag) it processes it through
a dispatch mechanism to determine an activity to launch.
The type of the <em>first</em> record in the message has
special importance for message dispatch, so design this record
carefully.
<p>
Use {@link #NdefMessage(byte[])} to construct an NDEF Message from
binary data, or {@link #NdefMessage(NdefRecord[])} to
construct from one or more {@link NdefRecord}s.
<p class=\"note\">
{@link NdefMessage} and {@link NdefRecord} implementations are
always available, even on Android devices that do not have NFC hardware.
<p class=\"note\">
{@link NdefRecord}s are intended to be immutable (and thread-safe),
however they may contain mutable fields. So take care not to modify
mutable fields passed into constructors, or modify mutable fields
obtained by getter methods, unless such modification is explicitly
marked as safe.

@see NfcAdapter#ACTION_NDEF_DISCOVERED
@see NdefRecord"
      classrelation 1406263 // <realization>
	relation 1406263 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1406263 // <realization>
	  b parent class_ref 137399 // Parcelable
      end

      classrelation 1406391 // mRecords (<unidirectional association>)
	relation 1406391 --->
	  a role_name "mRecords" multiplicity "[]" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1406391 // mRecords (<unidirectional association>)
	  b parent class_ref 530871 // NdefRecord
      end

      operation 3636791 "NdefMessage"
	public explicit_return_type ""
	nparams 1
	  param inout name "data" explicit_type "byte"
	nexceptions 1
	  exception class_ref 530743 // FormatException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an NDEF Message by parsing raw bytes.<p>
Strict validation of the NDEF binary structure is performed:
there must be at least one record, every record flag must
be correct, and the total length of the message must match
the length of the input data.<p>
This parser can handle chunked records, and converts them
into logical {@link NdefRecord}s within the message.<p>
Once the input data has been parsed to one or more logical
records, basic validation of the tnf, type, id, and payload fields
of each record is performed, as per the documentation on
on {@link NdefRecord#NdefRecord(short, byte[], byte[], byte[])}<p>
If either strict validation of the binary format fails, or
basic validation during record construction fails, a
{@link FormatException} is thrown<p>
Deep inspection of the type, id and payload fields of
each record is not performed, so it is possible to parse input
that has a valid binary format and confirms to the basic
validation requirements of
{@link NdefRecord#NdefRecord(short, byte[], byte[], byte[])},
but fails more strict requirements as specified by the
NFC Forum.

<p class=\"note\">
It is safe to re-use the data byte array after construction:
this constructor will make an internal copy of all necessary fields.

@param data raw bytes to parse
@throws FormatException if the data cannot be parsed"
      end

      operation 3636919 "NdefMessage"
	public explicit_return_type ""
	nparams 2
	  param inout name "record" type class_ref 530871 // NdefRecord
	  param inout name "records" type class_ref 530871 // NdefRecord
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ... ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an NDEF Message from one or more NDEF Records.

@param record first record (mandatory)
@param records additional records (optional)"
      end

      operation 3637047 "NdefMessage"
	public explicit_return_type ""
	nparams 1
	  param inout name "records" type class_ref 530871 // NdefRecord
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an NDEF Message from one or more NDEF Records.

@param records one or more records"
      end

      operation 3637175 "getRecords"
	public return_type class_ref 530871 // NdefRecord
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the NDEF Records inside this NDEF Message.<p>
An {@link NdefMessage} always has one or more NDEF Records: so the
following code to retrieve the first record is always safe
(no need to check for null or array length >= 1):
<pre>
NdefRecord firstRecord = ndefMessage.getRecords()[0];
</pre>

@return array of one or more NDEF records."
      end

      operation 3637303 "getByteArrayLength"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the length of this NDEF Message if it is written to a byte array
with {@link #toByteArray}.<p>
An NDEF Message can be formatted to bytes in different ways
depending on chunking, SR, and ID flags, so the length returned
by this method may not be equal to the length of the original
byte array used to construct this NDEF Message. However it will
always be equal to the length of the byte array produced by
{@link #toByteArray}.

@return length of this NDEF Message when written to bytes with {@link #toByteArray}
@see #toByteArray"
      end

      operation 3637431 "toByteArray"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return this NDEF Message as raw bytes.<p>
The NDEF Message is formatted as per the NDEF 1.0 specification,
and the byte array is suitable for network transmission or storage
in an NFC Forum NDEF compatible tag.<p>
This method will not chunk any records, and will always use the
short record (SR) format and omit the identifier field when possible.

@return NDEF Message in binary format
@see getByteArrayLength"
      end

      operation 3637559 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3637687 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 137527 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 1406519 // CREATOR (<unidirectional association>)
	relation 1406519 --->
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<NdefMessage>() {
        @Override
        public NdefMessage createFromParcel(Parcel in) {
            int recordsLength = in.readInt();
            NdefRecord[] records = new NdefRecord[recordsLength];
            in.readTypedArray(records, NdefRecord.CREATOR);
            return new NdefMessage(records);
        }
        @Override
        public NdefMessage[] newArray(int size) {
            return new NdefMessage[size];
        }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<NdefMessage> ${name}${value};
"
	    classrelation_ref 1406519 // CREATOR (<unidirectional association>)
	  b parent class_ref 137655 // Creator
      end

      operation 3637815 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3637943 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns true if the specified NDEF Message contains
identical NDEF Records."
      end

      operation 3638071 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 530615 "ErrorCodes"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class defines all the error codes that can be returned by the service
and producing an exception on the application level. These are needed since
binders does not support exceptions.

@hide"
      operation 3636151 "isError"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "code" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3636279 "asString"
	class_operation public return_type class_ref 129591 // String
	nparams 1
	  param in name "code" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1555511 "SUCCESS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1555639 "ERROR_IO"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1555767 "ERROR_CANCELLED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1555895 "ERROR_TIMEOUT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1556023 "ERROR_BUSY"
	class_attribute const_attribute public explicit_type "int"
	init_value " -4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1556151 "ERROR_CONNECT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1556279 "ERROR_DISCONNECT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1556407 "ERROR_READ"
	class_attribute const_attribute public explicit_type "int"
	init_value " -6"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1556535 "ERROR_WRITE"
	class_attribute const_attribute public explicit_type "int"
	init_value " -7"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1556663 "ERROR_INVALID_PARAM"
	class_attribute const_attribute public explicit_type "int"
	init_value " -8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1556791 "ERROR_INSUFFICIENT_RESOURCES"
	class_attribute const_attribute public explicit_type "int"
	init_value " -9"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1556919 "ERROR_SOCKET_CREATION"
	class_attribute const_attribute public explicit_type "int"
	init_value " -10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1557047 "ERROR_SOCKET_NOT_CONNECTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -11"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1557175 "ERROR_BUFFER_TO_SMALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " -12"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1557303 "ERROR_SAP_USED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -13"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1557431 "ERROR_SERVICE_NAME_USED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -14"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1557559 "ERROR_SOCKET_OPTIONS"
	class_attribute const_attribute public explicit_type "int"
	init_value " -15"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1557687 "ERROR_NFC_ON"
	class_attribute const_attribute public explicit_type "int"
	init_value " -16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1557815 "ERROR_NOT_INITIALIZED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -17"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1557943 "ERROR_SE_ALREADY_SELECTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -18"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1558071 "ERROR_SE_CONNECTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -19"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1558199 "ERROR_NO_SE_CONNECTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -20"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1558327 "ERROR_NOT_SUPPORTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " -21"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 530743 "FormatException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1406135 // <generalisation>
	relation 1406135 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1406135 // <generalisation>
	  b parent class_ref 190647 // Exception
      end

      operation 3636407 "FormatException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3636535 "FormatException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 129591 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3636663 "FormatException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 129591 // String
	  param inout name "e" explicit_type "Throwable"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 530871 "NdefRecord"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents an immutable NDEF Record.
<p>
NDEF (NFC Data Exchange Format) is a light-weight binary format,
used to encapsulate typed data. It is specified by the NFC Forum,
for transmission and storage with NFC, however it is transport agnostic.
<p>
NDEF defines messages and records. An NDEF Record contains
typed data, such as MIME-type media, a URI, or a custom
application payload. An NDEF Message is a container for
one or more NDEF Records.
<p>
This class represents logical (complete) NDEF Records, and can not be
used to represent chunked (partial) NDEF Records. However
{@link NdefMessage#NdefMessage(byte[])} can be used to parse a message
containing chunked records, and will return a message with unchunked
(complete) records.
<p>
A logical NDEF Record always contains a 3-bit TNF (Type Name Field)
that provides high level typing for the rest of the record. The
remaining fields are variable length and not always present:
<ul>
<li><em>type</em>: detailed typing for the payload</li>
<li><em>id</em>: identifier meta-data, not commonly used</li>
<li><em>payload</em>: the actual payload</li>
</ul>
<p>
Helpers such as {@link NdefRecord#createUri}, {@link NdefRecord#createMime}
and {@link NdefRecord#createExternal} are included to create well-formatted
NDEF Records with correctly set tnf, type, id and payload fields, please
use these helpers whenever possible.
<p>
Use the constructor {@link #NdefRecord(short, byte[], byte[], byte[])}
if you know what you are doing and what to set the fields individually.
Only basic validation is performed with this constructor, so it is possible
to create records that do not confirm to the strict NFC Forum
specifications.
<p>
The binary representation of an NDEF Record includes additional flags to
indicate location with an NDEF message, provide support for chunking of
NDEF records, and to pack optional fields. This class does not expose
those details. To write an NDEF Record as binary you must first put it
into an {@link NdefMessage}, then call {@link NdefMessage#toByteArray()}.
<p class=\"note\">
{@link NdefMessage} and {@link NdefRecord} implementations are
always available, even on Android devices that do not have NFC hardware.
<p class=\"note\">
{@link NdefRecord}s are intended to be immutable (and thread-safe),
however they may contain mutable fields. So take care not to modify
mutable fields passed into constructors, or modify mutable fields
obtained by getter methods, unless such modification is explicitly
marked as safe.

@see NfcAdapter#ACTION_NDEF_DISCOVERED
@see NdefMessage"
      classrelation 1406647 // <realization>
	relation 1406647 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1406647 // <realization>
	  b parent class_ref 137399 // Parcelable
      end

      attribute 1558455 "TNF_EMPTY"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x00"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates the record is empty.<p>
Type, id and payload fields are empty in a {@literal TNF_EMPTY} record.
"
      end

      attribute 1558583 "TNF_WELL_KNOWN"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x01"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates the type field contains a well-known RTD type name.<p>
Use this tnf with RTD types such as {@link #RTD_TEXT}, {@link #RTD_URI}.
<p>
The RTD type name format is specified in NFCForum-TS-RTD_1.0.

@see #RTD_URI
@see #RTD_TEXT
@see #RTD_SMART_POSTER
@see #createUri
"
      end

      attribute 1558711 "TNF_MIME_MEDIA"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x02"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates the type field contains a media-type BNF
construct, defined by RFC 2046.<p>
Use this with MIME type names such as {@literal \"image/jpeg\"}, or
using the helper {@link #createMime}.

@see #createMime
"
      end

      attribute 1558839 "TNF_ABSOLUTE_URI"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x03"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates the type field contains an absolute-URI
BNF construct defined by RFC 3986.<p>
When creating new records prefer {@link #createUri},
since it offers more compact URI encoding
({@literal #RTD_URI} allows compression of common URI prefixes).

@see #createUri
"
      end

      attribute 1558967 "TNF_EXTERNAL_TYPE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x04"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates the type field contains an external type name.<p>
Used to encode custom payloads. When creating new records
use the helper {@link #createExternal}.<p>
The external-type RTD format is specified in NFCForum-TS-RTD_1.0.<p>
<p>
Note this TNF should not be used with RTD_TEXT or RTD_URI constants.
Those are well known RTD constants, not external RTD constants.

@see #createExternal
"
      end

      attribute 1559095 "TNF_UNKNOWN"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x05"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates the payload type is unknown.<p>
NFC Forum explains this should be treated similarly to the
\"application/octet-stream\" MIME type. The payload
type is not explicitly encoded within the record.
<p>
The type field is empty in an {@literal TNF_UNKNOWN} record.
"
      end

      attribute 1559223 "TNF_UNCHANGED"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x06"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates the payload is an intermediate or final chunk of a chunked
NDEF Record.<p>
{@literal TNF_UNCHANGED} can not be used with this class
since all {@link NdefRecord}s are already unchunked, however they
may appear in the binary format.
"
      end

      attribute 1559351 "TNF_RESERVED"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x07"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reserved TNF type.
<p>
The NFC Forum NDEF Specification v1.0 suggests for NDEF parsers to treat this
value like TNF_UNKNOWN.
@hide
"
      end

      attribute 1559479 "RTD_TEXT"
	class_attribute const_attribute public explicit_type "byte"
	multiplicity "[]"
	init_value " {0x54}"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "RTD Text type. For use with {@literal TNF_WELL_KNOWN}.
@see #TNF_WELL_KNOWN

 \"T\""
      end

      attribute 1559607 "RTD_URI"
	class_attribute const_attribute public explicit_type "byte"
	multiplicity "[]"
	init_value " {0x55}"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "RTD URI type. For use with {@literal TNF_WELL_KNOWN}.
@see #TNF_WELL_KNOWN

 \"U\""
      end

      attribute 1559735 "RTD_SMART_POSTER"
	class_attribute const_attribute public explicit_type "byte"
	multiplicity "[]"
	init_value " {0x53, 0x70}"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "RTD Smart Poster type. For use with {@literal TNF_WELL_KNOWN}.
@see #TNF_WELL_KNOWN

 \"Sp\""
      end

      attribute 1559863 "RTD_ALTERNATIVE_CARRIER"
	class_attribute const_attribute public explicit_type "byte"
	multiplicity "[]"
	init_value " {0x61, 0x63}"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "RTD Alternative Carrier type. For use with {@literal TNF_WELL_KNOWN}.
@see #TNF_WELL_KNOWN

 \"ac\""
      end

      attribute 1559991 "RTD_HANDOVER_CARRIER"
	class_attribute const_attribute public explicit_type "byte"
	multiplicity "[]"
	init_value " {0x48, 0x63}"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "RTD Handover Carrier type. For use with {@literal TNF_WELL_KNOWN}.
@see #TNF_WELL_KNOWN

 \"Hc\""
      end

      attribute 1560119 "RTD_HANDOVER_REQUEST"
	class_attribute const_attribute public explicit_type "byte"
	multiplicity "[]"
	init_value " {0x48, 0x72}"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "RTD Handover Request type. For use with {@literal TNF_WELL_KNOWN}.
@see #TNF_WELL_KNOWN

 \"Hr\""
      end

      attribute 1560247 "RTD_HANDOVER_SELECT"
	class_attribute const_attribute public explicit_type "byte"
	multiplicity "[]"
	init_value " {0x48, 0x73}"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "RTD Handover Select type. For use with {@literal TNF_WELL_KNOWN}.
@see #TNF_WELL_KNOWN

 \"Hs\""
      end

      attribute 1560375 "RTD_ANDROID_APP"
	class_attribute const_attribute public explicit_type "byte"
	multiplicity "[]"
	init_value " \"android.com:pkg\".getBytes()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "RTD Android app type. For use with {@literal TNF_EXTERNAL}.
<p>
The payload of a record with type RTD_ANDROID_APP
should be the package name identifying an application.
Multiple RTD_ANDROID_APP records may be included
in a single {@link NdefMessage}.
<p>
Use {@link #createApplicationRecord(String)} to create
RTD_ANDROID_APP records.
@hide
"
      end

      attribute 1560503 "FLAG_MB"
	class_attribute const_attribute private explicit_type "byte"
	init_value " (byte) 0x80"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1560631 "FLAG_ME"
	class_attribute const_attribute private explicit_type "byte"
	init_value " (byte) 0x40"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1560759 "FLAG_CF"
	class_attribute const_attribute private explicit_type "byte"
	init_value " (byte) 0x20"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1560887 "FLAG_SR"
	class_attribute const_attribute private explicit_type "byte"
	init_value " (byte) 0x10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1561015 "FLAG_IL"
	class_attribute const_attribute private explicit_type "byte"
	init_value " (byte) 0x08"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1406775 // URI_PREFIX_MAP (<unidirectional association>)
	relation 1406775 --->
	  a role_name "URI_PREFIX_MAP" multiplicity "[]" init_value " new String[] {
            \"\", // 0x00
            \"http://www.\", // 0x01
            \"https://www.\", // 0x02
            \"http://\", // 0x03
            \"https://\", // 0x04
            \"tel:\", // 0x05
            \"mailto:\", // 0x06
            \"ftp://anonymous:anonymous@\", // 0x07
            \"ftp://ftp.\", // 0x08
            \"ftps://\", // 0x09
            \"sftp://\", // 0x0A
            \"smb://\", // 0x0B
            \"nfs://\", // 0x0C
            \"ftp://\", // 0x0D
            \"dav://\", // 0x0E
            \"news:\", // 0x0F
            \"telnet://\", // 0x10
            \"imap:\", // 0x11
            \"rtsp://\", // 0x12
            \"urn:\", // 0x13
            \"pop:\", // 0x14
            \"sip:\", // 0x15
            \"sips:\", // 0x16
            \"tftp:\", // 0x17
            \"btspp://\", // 0x18
            \"btl2cap://\", // 0x19
            \"btgoep://\", // 0x1A
            \"tcpobex://\", // 0x1B
            \"irdaobex://\", // 0x1C
            \"file://\", // 0x1D
            \"urn:epc:id:\", // 0x1E
            \"urn:epc:tag:\", // 0x1F
            \"urn:epc:pat:\", // 0x20
            \"urn:epc:raw:\", // 0x21
            \"urn:epc:\", // 0x22
            \"urn:nfc:\", // 0x23
    }" class_relation const_relation private
	    comment "
NFC Forum \"URI Record Type Definition\"<p>
This is a mapping of \"URI Identifier Codes\" to URI string prefixes,
per section 3.2.2 of the NFC Forum URI Record Type Definition document.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1406775 // URI_PREFIX_MAP (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 1561143 "MAX_PAYLOAD_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 10 * (1 << 20)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " 10 MB payload limit"
      end

      attribute 1561271 "EMPTY_BYTE_ARRAY"
	class_attribute const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[0]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1561399 "mTnf"
	const_attribute private explicit_type "short"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1561527 "mType"
	const_attribute private explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1561655 "mId"
	const_attribute private explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1561783 "mPayload"
	const_attribute private explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3638199 "createApplicationRecord"
	class_operation public return_type class_ref 530871 // NdefRecord
	nparams 1
	  param inout name "packageName" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new Android Application Record (AAR).
<p>
This record indicates to other Android devices the package
that should be used to handle the entire NDEF message.
You can embed this record anywhere into your message
to ensure that the intended package receives the message.
<p>
When an Android device dispatches an {@link NdefMessage}
containing one or more Android application records,
the applications contained in those records will be the
preferred target for the {@link NfcAdapter#ACTION_NDEF_DISCOVERED}
intent, in the order in which they appear in the message.
This dispatch behavior was first added to Android in
Ice Cream Sandwich.
<p>
If none of the applications have a are installed on the device,
a Market link will be opened to the first application.
<p>
Note that Android application records do not overrule
applications that have called
{@link NfcAdapter#enableForegroundDispatch}.

@param packageName Android package name
@return Android application NDEF record"
      end

      operation 3638327 "createUri"
	class_operation public return_type class_ref 530871 // NdefRecord
	nparams 1
	  param inout name "uri" type class_ref 133047 // Uri
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new NDEF Record containing a URI.<p>
Use this method to encode a URI (or URL) into an NDEF Record.<p>
Uses the well known URI type representation: {@link #TNF_WELL_KNOWN}
and {@link #RTD_URI}. This is the most efficient encoding
of a URI into NDEF.<p>
The uri parameter will be normalized with
{@link Uri#normalizeScheme} to set the scheme to lower case to
follow Android best practices for intent filtering.
However the unchecked exception
{@link IllegalArgumentException} may be thrown if the uri
parameter has serious problems, for example if it is empty, so always
catch this exception if you are passing user-generated data into this
method.<p>

Reference specification: NFCForum-TS-RTD_URI_1.0

@param uri URI to encode.
@return an NDEF Record containing the URI
@throws IllegalArugmentException if the uri is empty or invalid"
      end

      operation 3638455 "createUri"
	class_operation public return_type class_ref 530871 // NdefRecord
	nparams 1
	  param inout name "uriString" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new NDEF Record containing a URI.<p>
Use this method to encode a URI (or URL) into an NDEF Record.<p>
Uses the well known URI type representation: {@link #TNF_WELL_KNOWN}
and {@link #RTD_URI}. This is the most efficient encoding
of a URI into NDEF.<p>
The uriString parameter will be normalized with
{@link Uri#normalizeScheme} to set the scheme to lower case to
follow Android best practices for intent filtering.
However the unchecked exception
{@link IllegalArgumentException} may be thrown if the uriString
parameter has serious problems, for example if it is empty, so always
catch this exception if you are passing user-generated data into this
method.<p>

Reference specification: NFCForum-TS-RTD_URI_1.0

@param uriString string URI to encode.
@return an NDEF Record containing the URI
@throws IllegalArugmentException if the uriString is empty or invalid"
      end

      operation 3638583 "createMime"
	class_operation public return_type class_ref 530871 // NdefRecord
	nparams 2
	  param inout name "mimeType" type class_ref 129591 // String
	  param inout name "mimeData" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new NDEF Record containing MIME data.<p>
Use this method to encode MIME-typed data into an NDEF Record,
such as \"text/plain\", or \"image/jpeg\".<p>
The mimeType parameter will be normalized with
{@link Intent#normalizeMimeType} to follow Android best
practices for intent filtering, for example to force lower-case.
However the unchecked exception
{@link IllegalArgumentException} may be thrown
if the mimeType parameter has serious problems,
for example if it is empty, so always catch this
exception if you are passing user-generated data into this method.
<p>
For efficiency, This method might not make an internal copy of the
mimeData byte array, so take care not
to modify the mimeData byte array while still using the returned
NdefRecord.

@param mimeType a valid MIME type
@param mimeData MIME data as bytes
@return an NDEF Record containing the MIME-typed data
@throws IllegalArugmentException if the mimeType is empty or invalid
"
      end

      operation 3638711 "createExternal"
	class_operation public return_type class_ref 530871 // NdefRecord
	nparams 3
	  param inout name "domain" type class_ref 129591 // String
	  param inout name "type" type class_ref 129591 // String
	  param inout name "data" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new NDEF Record containing external (application-specific) data.<p>
Use this method to encode application specific data into an NDEF Record.
The data is typed by a domain name (usually your Android package name) and
a domain-specific type. This data is packaged into a \"NFC Forum External
Type\" NDEF Record.<p>
NFC Forum requires that the domain and type used in an external record
are treated as case insensitive, however Android intent filtering is
always case sensitive. So this method will force the domain and type to
lower-case before creating the NDEF Record.<p>
The unchecked exception {@link IllegalArgumentException} will be thrown
if the domain and type have serious problems, for example if either field
is empty, so always catch this
exception if you are passing user-generated data into this method.<p>
There are no such restrictions on the payload data.<p>
For efficiency, This method might not make an internal copy of the
data byte array, so take care not
to modify the data byte array while still using the returned
NdefRecord.

Reference specification: NFCForum-TS-RTD_1.0
@param domain domain-name of issuing organization
@param type domain-specific type of data
@param data payload as bytes
@throws IllegalArugmentException if either domain or type are empty or invalid"
      end

      operation 3638839 "createTextRecord"
	class_operation public return_type class_ref 530871 // NdefRecord
	nparams 2
	  param inout name "languageCode" type class_ref 129591 // String
	  param inout name "text" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new NDEF record containing UTF-8 text data.<p>

The caller can either specify the language code for the provided text,
or otherwise the language code corresponding to the current default
locale will be used.

Reference specification: NFCForum-TS-RTD_Text_1.0
@param languageCode The languageCode for the record. If locale is empty or null,
                    the language code of the current default locale will be used.
@param text   The text to be encoded in the record. Will be represented in UTF-8 format.
@throws IllegalArgumentException if text is null"
      end

      operation 3638967 "NdefRecord"
	public explicit_return_type ""
	nparams 4
	  param in name "tnf" explicit_type "short"
	  param inout name "type" explicit_type "byte"
	  param inout name "id" explicit_type "byte"
	  param inout name "payload" explicit_type "byte"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an NDEF Record from its component fields.<p>
Recommend to use helpers such as {#createUri} or
{{@link #createExternal} where possible, since they perform
stricter validation that the record is correctly formatted
as per NDEF specifications. However if you know what you are
doing then this constructor offers the most flexibility.<p>
An {@link NdefRecord} represents a logical (complete)
record, and cannot represent NDEF Record chunks.<p>
Basic validation of the tnf, type, id and payload is performed
as per the following rules:
<ul>
<li>The tnf paramter must be a 3-bit value.</li>
<li>Records with a tnf of {@link #TNF_EMPTY} cannot have a type,
id or payload.</li>
<li>Records with a tnf of {@link #TNF_UNKNOWN} or {@literal 0x07}
cannot have a type.</li>
<li>Records with a tnf of {@link #TNF_UNCHANGED} are not allowed
since this class only represents complete (unchunked) records.</li>
</ul>
This minimal validation is specified by
NFCForum-TS-NDEF_1.0 section 3.2.6 (Type Name Format).<p>
If any of the above validation
steps fail then {@link IllegalArgumentException} is thrown.<p>
Deep inspection of the type, id and payload fields is not
performed, so it is possible to create NDEF Records
that conform to section 3.2.6
but fail other more strict NDEF specification requirements. For
example, the payload may be invalid given the tnf and type.
<p>
To omit a type, id or payload field, set the parameter to an
empty byte array or null.

@param tnf  a 3-bit TNF constant
@param type byte array, containing zero to 255 bytes, or null
@param id   byte array, containing zero to 255 bytes, or null
@param payload byte array, containing zero to (2 ** 32 - 1) bytes,
               or null
@throws IllegalArugmentException if a valid record cannot be created"
      end

      operation 3639095 "NdefRecord"
	public explicit_return_type ""
	nparams 1
	  param inout name "data" explicit_type "byte"
	nexceptions 1
	  exception class_ref 530743 // FormatException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Construct an NDEF Record from raw bytes.<p>
This method is deprecated, use {@link NdefMessage#NdefMessage(byte[])}
instead. This is because it does not make sense to parse a record:
the NDEF binary format is only defined for a message, and the
record flags MB and ME do not make sense outside of the context of
an entire message.<p>
This implementation will attempt to parse a single record by ignoring
the MB and ME flags, and otherwise following the rules of
{@link NdefMessage#NdefMessage(byte[])}.<p>

@param data raw bytes to parse
@throws FormatException if the data cannot be parsed into a valid record
@deprecated use {@link NdefMessage#NdefMessage(byte[])} instead."
      end

      operation 3639223 "getTnf"
	public explicit_return_type "short"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the 3-bit TNF.
<p>
TNF is the top-level type."
      end

      operation 3639351 "getType"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the variable length Type field.
<p>
This should be used in conjunction with the TNF field to determine the
payload format.
<p>
Returns an empty byte array if this record
does not have a type field."
      end

      operation 3639479 "getId"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the variable length ID.
<p>
Returns an empty byte array if this record
does not have an id field."
      end

      operation 3639607 "getPayload"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the variable length payload.
<p>
Returns an empty byte array if this record
does not have a payload field."
      end

      operation 3639735 "toByteArray"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Return this NDEF Record as a byte array.<p>
This method is deprecated, use {@link NdefMessage#toByteArray}
instead. This is because the NDEF binary format is not defined for
a record outside of the context of a message: the MB and ME flags
cannot be set without knowing the location inside a message.<p>
This implementation will attempt to serialize a single record by
always setting the MB and ME flags (in other words, assume this
is a single-record NDEF Message).<p>

@deprecated use {@link NdefMessage#toByteArray()} instead"
      end

      operation 3639863 "toMimeType"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Map this record to a MIME type, or return null if it cannot be mapped.<p>
Currently this method considers all {@link #TNF_MIME_MEDIA} records to
be MIME records, as well as some {@link #TNF_WELL_KNOWN} records such as
{@link #RTD_TEXT}. If this is a MIME record then the MIME type as string
is returned, otherwise null is returned.<p>
This method does not perform validation that the MIME type is
actually valid. It always attempts to
return a string containing the type if this is a MIME record.<p>
The returned MIME type will by normalized to lower-case using
{@link Intent#normalizeMimeType}.<p>
The MIME payload can be obtained using {@link #getPayload}.

@return MIME type as a string, or null if this is not a MIME record"
      end

      operation 3639991 "toUri"
	public return_type class_ref 133047 // Uri
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Map this record to a URI, or return null if it cannot be mapped.<p>
Currently this method considers the following to be URI records:
<ul>
<li>{@link #TNF_ABSOLUTE_URI} records.</li>
<li>{@link #TNF_WELL_KNOWN} with a type of {@link #RTD_URI}.</li>
<li>{@link #TNF_WELL_KNOWN} with a type of {@link #RTD_SMART_POSTER}
and containing a URI record in the NDEF message nested in the payload.
</li>
<li>{@link #TNF_EXTERNAL_TYPE} records.</li>
</ul>
If this is not a URI record by the above rules, then null is returned.<p>
This method does not perform validation that the URI is
actually valid: it always attempts to create and return a URI if
this record appears to be a URI record by the above rules.<p>
The returned URI will be normalized to have a lower case scheme
using {@link Uri#normalizeScheme}.<p>

@return URI, or null if this is not a URI record"
      end

      operation 3640119 "toUri"
	private return_type class_ref 133047 // Uri
	nparams 1
	  param inout name "inSmartPoster" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3640247 "parseWktUri"
	private return_type class_ref 133047 // Uri
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return complete URI of {@link #TNF_WELL_KNOWN}, {@link #RTD_URI} records.
@return complete URI, or null if invalid"
      end

      operation 3640375 "parse"
	class_operation package return_type class_ref 530871 // NdefRecord
	nparams 2
	  param inout name "buffer" explicit_type "ByteBuffer"
	  param inout name "ignoreMbMe" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 530743 // FormatException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main record parsing method.<p>
Expects NdefMessage to begin immediately, allows trailing data.<p>
Currently has strict validation of all fields as per NDEF 1.0
specification section 2.5. We will attempt to keep this as strict as
possible to encourage well-formatted NDEF.<p>
Always returns 1 or more NdefRecord's, or throws FormatException.

@param buffer ByteBuffer to read from
@param ignoreMbMe ignore MB and ME flags, and read only 1 complete record
@return one or more records
@throws FormatException on any parsing error"
      end

      operation 3640503 "ensureSanePayloadSize"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "long"
	nexceptions 1
	  exception class_ref 530743 // FormatException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3640631 "validateTnf"
	class_operation package return_type class_ref 129591 // String
	nparams 4
	  param in name "tnf" explicit_type "short"
	  param inout name "type" explicit_type "byte"
	  param inout name "id" explicit_type "byte"
	  param inout name "payload" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform simple validation that the tnf is valid.<p>
Validates the requirements of NFCForum-TS-NDEF_1.0 section
3.2.6 (Type Name Format). This just validates that the tnf
is valid, and that the relevant type, id and payload
fields are present (or empty) for this tnf. It does not
perform any deep inspection of the type, id and payload fields.<p>
Also does not allow TNF_UNCHANGED since this class is only used
to present logical (unchunked) records.

@return null if valid, or a string error if invalid."
      end

      operation 3640759 "writeToByteBuffer"
	package explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "ByteBuffer"
	  param inout name "mb" explicit_type "boolean"
	  param inout name "me" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serialize record for network transmission.<p>
Uses specified MB and ME flags.<p>
Does not chunk records."
      end

      operation 3640887 "getByteLength"
	package explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get byte length of serialized record."
      end

      operation 3641015 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3641143 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 137527 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 1406903 // CREATOR (<unidirectional association>)
	relation 1406903 --->
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<NdefRecord>() {
        @Override
        public NdefRecord createFromParcel(Parcel in) {
            short tnf = (short)in.readInt();
            int typeLength = in.readInt();
            byte[] type = new byte[typeLength];
            in.readByteArray(type);
            int idLength = in.readInt();
            byte[] id = new byte[idLength];
            in.readByteArray(id);
            int payloadLength = in.readInt();
            byte[] payload = new byte[payloadLength];
            in.readByteArray(payload);

            return new NdefRecord(tnf, type, id, payload);
        }
        @Override
        public NdefRecord[] newArray(int size) {
            return new NdefRecord[size];
        }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<NdefRecord> ${name}${value};
"
	    classrelation_ref 1406903 // CREATOR (<unidirectional association>)
	  b parent class_ref 137655 // Creator
      end

      operation 3641271 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3641399 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns true if the specified NDEF Record contains
identical tnf, type, id and payload fields."
      end

      operation 3641527 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3641655 "bytesToString"
	class_operation private explicit_return_type "StringBuilder"
	nparams 1
	  param inout name "bs" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 530999 "NfcActivityManager"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Manages NFC API's that are coupled to the life-cycle of an Activity.

<p>Uses {@link Application#registerActivityLifecycleCallbacks} to hook
into activity life-cycle events such as onPause() and onResume().

@hide"
      classrelation 1407031 // <generalisation>
	relation 1407031 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1407031 // <generalisation>
	  b parent class_ref 531127 // Stub
      end

      classrelation 1407159 // <realization>
	relation 1407159 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1407159 // <realization>
	  b parent class_ref 347959 // ActivityLifecycleCallbacks
      end

      classrelation 1407287 // TAG (<unidirectional association>)
	relation 1407287 --->
	  a role_name "TAG" init_value " NfcAdapter.TAG" class_relation const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1407287 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 1561911 "DBG"
	class_attribute const_attribute package explicit_type "Boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1407415 // mAdapter (<unidirectional association>)
	relation 1407415 --->
	  a role_name "mAdapter" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1407415 // mAdapter (<unidirectional association>)
	  b parent class_ref 531255 // NfcAdapter
      end

      class 531383 "NfcApplicationState"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1562039 "refCount"
	  package explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1407799 // app (<unidirectional association>)
	  relation 1407799 --->
	    a role_name "app" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1407799 // app (<unidirectional association>)
	    b parent class_ref 155447 // Application
	end

	operation 3641783 "NfcApplicationState"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "app" type class_ref 155447 // Application
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3641911 "register"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3642039 "unregister"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1407543 // mApps (<unidirectional association>)
	relation 1407543 --->
	  stereotype "List"
	  a role_name "mApps" const_relation package
	    comment " All objects in the lists are protected by this
 Application(s) that have NFC state. Usually one"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1407543 // mApps (<unidirectional association>)
	  b parent class_ref 531383 // NfcApplicationState
      end

      class 531511 "NfcActivityState"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1562167 "resumed"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1407927 // activity (<unidirectional association>)
	  relation 1407927 --->
	    a role_name "activity" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1407927 // activity (<unidirectional association>)
	    b parent class_ref 128183 // Activity
	end

	classrelation 1408055 // ndefMessage (<unidirectional association>)
	  relation 1408055 --->
	    a role_name "ndefMessage" init_value " null" package
	      comment " static NDEF message"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1408055 // ndefMessage (<unidirectional association>)
	    b parent class_ref 530487 // NdefMessage
	end

	classrelation 1408183 // ndefMessageCallback (<unidirectional association>)
	  relation 1408183 --->
	    a role_name "ndefMessageCallback" init_value " null" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1408183 // ndefMessageCallback (<unidirectional association>)
	    b parent class_ref 531639 // CreateNdefMessageCallback
	end

	classrelation 1408311 // onNdefPushCompleteCallback (<unidirectional association>)
	  relation 1408311 --->
	    a role_name "onNdefPushCompleteCallback" init_value " null" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1408311 // onNdefPushCompleteCallback (<unidirectional association>)
	    b parent class_ref 531767 // OnNdefPushCompleteCallback
	end

	classrelation 1408439 // uriCallback (<unidirectional association>)
	  relation 1408439 --->
	    a role_name "uriCallback" init_value " null" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1408439 // uriCallback (<unidirectional association>)
	    b parent class_ref 531895 // CreateBeamUrisCallback
	end

	classrelation 1408567 // uris (<unidirectional association>)
	  relation 1408567 --->
	    a role_name "uris" multiplicity "[]" init_value " null" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 1408567 // uris (<unidirectional association>)
	    b parent class_ref 133047 // Uri
	end

	attribute 1562295 "flags"
	  package explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1562423 "readerModeFlags"
	  package explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1408695 // readerCallback (<unidirectional association>)
	  relation 1408695 --->
	    a role_name "readerCallback" init_value " null" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1408695 // readerCallback (<unidirectional association>)
	    b parent class_ref 532023 // ReaderCallback
	end

	classrelation 1408823 // readerModeExtras (<unidirectional association>)
	  relation 1408823 --->
	    a role_name "readerModeExtras" init_value " null" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1408823 // readerModeExtras (<unidirectional association>)
	    b parent class_ref 131511 // Bundle
	end

	classrelation 1408951 // token (<unidirectional association>)
	  relation 1408951 --->
	    a role_name "token" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1408951 // token (<unidirectional association>)
	    b parent class_ref 277559 // Binder
	end

	operation 3642551 "NfcActivityState"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "activity" type class_ref 128183 // Activity
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3642679 "destroy"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3642807 "toString"
	  public return_type class_ref 129591 // String
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 1407671 // mActivities (<unidirectional association>)
	relation 1407671 --->
	  stereotype "List"
	  a role_name "mActivities" const_relation package
	    comment " Activities that have NFC state"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1407671 // mActivities (<unidirectional association>)
	  b parent class_ref 531511 // NfcActivityState
      end

      operation 3642167 "findAppState"
	package return_type class_ref 531383 // NfcApplicationState
	nparams 1
	  param inout name "app" type class_ref 155447 // Application
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3642295 "registerApplication"
	package explicit_return_type "void"
	nparams 1
	  param inout name "app" type class_ref 155447 // Application
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3642423 "unregisterApplication"
	package explicit_return_type "void"
	nparams 1
	  param inout name "app" type class_ref 155447 // Application
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3642935 "findActivityState"
	package return_type class_ref 531511 // NfcActivityState
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " find activity state from mActivities "
      end

      operation 3643063 "getActivityState"
	package return_type class_ref 531511 // NfcActivityState
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " find or create activity state from mActivities "
      end

      operation 3643191 "findResumedActivityState"
	package return_type class_ref 531511 // NfcActivityState
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3643319 "destroyActivityState"
	package explicit_return_type "void"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3643447 "NfcActivityManager"
	public explicit_return_type ""
	nparams 1
	  param inout name "adapter" type class_ref 531255 // NfcAdapter
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3643575 "enableReaderMode"
	public explicit_return_type "void"
	nparams 4
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "callback" type class_ref 532023 // ReaderCallback
	  param in name "flags" explicit_type "int"
	  param inout name "extras" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3643703 "disableReaderMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3643831 "setReaderMode"
	public explicit_return_type "void"
	nparams 3
	  param inout name "token" type class_ref 277559 // Binder
	  param in name "flags" explicit_type "int"
	  param inout name "extras" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3643959 "setNdefPushContentUri"
	public explicit_return_type "void"
	nparams 2
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "uris" type class_ref 133047 // Uri
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3644087 "setNdefPushContentUriCallback"
	public explicit_return_type "void"
	nparams 2
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "callback" type class_ref 531895 // CreateBeamUrisCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3644215 "setNdefPushMessage"
	public explicit_return_type "void"
	nparams 3
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "message" type class_ref 530487 // NdefMessage
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3644343 "setNdefPushMessageCallback"
	public explicit_return_type "void"
	nparams 3
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "callback" type class_ref 531639 // CreateNdefMessageCallback
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3644471 "setOnNdefPushCompleteCallback"
	public explicit_return_type "void"
	nparams 2
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "callback" type class_ref 531767 // OnNdefPushCompleteCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3644599 "requestNfcServiceCallback"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Request or unrequest NFC service callbacks.
Makes IPC call - do not hold lock."
      end

      operation 3644727 "verifyNfcPermission"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3644855 "createBeamShareData"
	public return_type class_ref 530359 // BeamShareData
	nparams 1
	  param in name "peerLlcpVersion" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Callback from NFC service, usually on binder thread "
      end

      operation 3644983 "onNdefPushComplete"
	public explicit_return_type "void"
	nparams 1
	  param in name "peerLlcpVersion" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Callback from NFC service, usually on binder thread "
      end

      operation 3645111 "onTagDiscovered"
	public explicit_return_type "void"
	nparams 1
	  param inout name "tag" type class_ref 532151 // Tag
	nexceptions 1
	  exception class_ref 159031 // RemoteException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3645239 "onActivityCreated"
	public explicit_return_type "void"
	nparams 2
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "savedInstanceState" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Callback from Activity life-cycle, on main thread "
      end

      operation 3645367 "onActivityStarted"
	public explicit_return_type "void"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Callback from Activity life-cycle, on main thread "
      end

      operation 3645495 "onActivityResumed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Callback from Activity life-cycle, on main thread "
      end

      operation 3645623 "onActivityPaused"
	public explicit_return_type "void"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Callback from Activity life-cycle, on main thread "
      end

      operation 3645751 "onActivityStopped"
	public explicit_return_type "void"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Callback from Activity life-cycle, on main thread "
      end

      operation 3645879 "onActivitySaveInstanceState"
	public explicit_return_type "void"
	nparams 2
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "outState" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Callback from Activity life-cycle, on main thread "
      end

      operation 3646007 "onActivityDestroyed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Callback from Activity life-cycle, on main thread "
      end
    end

    class 531255 "NfcAdapter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents the local NFC adapter.
<p>
Use the helper {@link #getDefaultAdapter(Context)} to get the default NFC
adapter for this Android device.

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about using NFC, read the
<a href=\"{@docRoot}guide/topics/nfc/index.html\">Near Field Communication</a> developer guide.</p>
<p>To perform basic file sharing between devices, read
<a href=\"{@docRoot}training/beam-files/index.html\">Sharing Files with NFC</a>.
</div>"
      class 531639 "CreateNdefMessageCallback"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 3646391 "createNdefMessage"
	  public return_type class_ref 530487 // NdefMessage
	  nparams 1
	    param inout name "event" type class_ref 532407 // NfcEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called to provide a {@link NdefMessage} to push.

<p>This callback is usually made on a binder thread (not the UI thread).

<p>Called when this device is in range of another device
that might support NDEF push. It allows the application to
create the NDEF message only when it is required.

<p>NDEF push cannot occur until this method returns, so do not
block for too long.

<p>The Android operating system will usually show a system UI
on top of your activity during this time, so do not try to request
input from the user to complete the callback, or provide custom NDEF
push UI. The user probably will not see it.

@param event {@link NfcEvent} with the {@link NfcEvent#nfcAdapter} field set
@return NDEF message to push, or null to not provide a message"
	end
      end

      class 531767 "OnNdefPushCompleteCallback"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 3646263 "onNdefPushComplete"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "event" type class_ref 532407 // NfcEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called on successful NDEF push.

<p>This callback is usually made on a binder thread (not the UI thread).

@param event {@link NfcEvent} with the {@link NfcEvent#nfcAdapter} field set
@see #setNdefPushMessageCallback"
	end
      end

      class 531895 "CreateBeamUrisCallback"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 3646519 "createBeamUris"
	  public return_type class_ref 133047 // Uri
	  nparams 1
	    param inout name "event" type class_ref 532407 // NfcEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 532023 "ReaderCallback"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 3646135 "onTagDiscovered"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "tag" type class_ref 532151 // Tag
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1409079 // TAG (<unidirectional association>)
	relation 1409079 --->
	  a role_name "TAG" init_value " \"NFC\"" class_relation const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1409079 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1409207 // ACTION_NDEF_DISCOVERED (<unidirectional association>)
	relation 1409207 --->
	  a role_name "ACTION_NDEF_DISCOVERED" init_value " \"android.nfc.action.NDEF_DISCOVERED\"" class_relation const_relation public
	    comment "
Intent to start an activity when a tag with NDEF payload is discovered.

<p>The system inspects the first {@link NdefRecord} in the first {@link NdefMessage} and
looks for a URI, SmartPoster, or MIME record. If a URI or SmartPoster record is found the
intent will contain the URI in its data field. If a MIME record is found the intent will
contain the MIME type in its type field. This allows activities to register
{@link IntentFilter}s targeting specific content on tags. Activities should register the
most specific intent filters possible to avoid the activity chooser dialog, which can
disrupt the interaction with the tag as the user interacts with the screen.

<p>If the tag has an NDEF payload this intent is started before
{@link #ACTION_TECH_DISCOVERED}. If any activities respond to this intent neither
{@link #ACTION_TECH_DISCOVERED} or {@link #ACTION_TAG_DISCOVERED} will be started.

<p>The MIME type or data URI of this intent are normalized before dispatch -
so that MIME, URI scheme and URI host are always lower-case.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 1409207 // ACTION_NDEF_DISCOVERED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1409335 // ACTION_TECH_DISCOVERED (<unidirectional association>)
	relation 1409335 --->
	  a role_name "ACTION_TECH_DISCOVERED" init_value " \"android.nfc.action.TECH_DISCOVERED\"" class_relation const_relation public
	    comment "
Intent to start an activity when a tag is discovered and activities are registered for the
specific technologies on the tag.

<p>To receive this intent an activity must include an intent filter
for this action and specify the desired tech types in a
manifest <code>meta-data</code> entry. Here is an example manfiest entry:
<pre>
&lt;activity android:name=\".nfc.TechFilter\" android:label=\"NFC/TechFilter\"&gt;
    &lt;!-- Add a technology filter --&gt;
    &lt;intent-filter&gt;
        &lt;action android:name=\"android.nfc.action.TECH_DISCOVERED\" /&gt;
    &lt;/intent-filter&gt;

    &lt;meta-data android:name=\"android.nfc.action.TECH_DISCOVERED\"
        android:resource=\"@xml/filter_nfc\"
    /&gt;
&lt;/activity&gt;</pre>

<p>The meta-data XML file should contain one or more <code>tech-list</code> entries
each consisting or one or more <code>tech</code> entries. The <code>tech</code> entries refer
to the qualified class name implementing the technology, for example \"android.nfc.tech.NfcA\".

<p>A tag matches if any of the
<code>tech-list</code> sets is a subset of {@link Tag#getTechList() Tag.getTechList()}. Each
of the <code>tech-list</code>s is considered independently and the
activity is considered a match is any single <code>tech-list</code> matches the tag that was
discovered. This provides AND and OR semantics for filtering desired techs. Here is an
example that will match any tag using {@link NfcF} or any tag using {@link NfcA},
{@link MifareClassic}, and {@link Ndef}:

<pre>
&lt;resources xmlns:xliff=\"urn:oasis:names:tc:xliff:document:1.2\"&gt;
    &lt;!-- capture anything using NfcF --&gt;
    &lt;tech-list&gt;
        &lt;tech&gt;android.nfc.tech.NfcF&lt;/tech&gt;
    &lt;/tech-list&gt;

    &lt;!-- OR --&gt;

    &lt;!-- capture all MIFARE Classics with NDEF payloads --&gt;
    &lt;tech-list&gt;
        &lt;tech&gt;android.nfc.tech.NfcA&lt;/tech&gt;
        &lt;tech&gt;android.nfc.tech.MifareClassic&lt;/tech&gt;
        &lt;tech&gt;android.nfc.tech.Ndef&lt;/tech&gt;
    &lt;/tech-list&gt;
&lt;/resources&gt;</pre>

<p>This intent is started after {@link #ACTION_NDEF_DISCOVERED} and before
{@link #ACTION_TAG_DISCOVERED}. If any activities respond to {@link #ACTION_NDEF_DISCOVERED}
this intent will not be started. If any activities respond to this intent
{@link #ACTION_TAG_DISCOVERED} will not be started.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 1409335 // ACTION_TECH_DISCOVERED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1409463 // ACTION_TAG_DISCOVERED (<unidirectional association>)
	relation 1409463 --->
	  a role_name "ACTION_TAG_DISCOVERED" init_value " \"android.nfc.action.TAG_DISCOVERED\"" class_relation const_relation public
	    comment "
Intent to start an activity when a tag is discovered.

<p>This intent will not be started when a tag is discovered if any activities respond to
{@link #ACTION_NDEF_DISCOVERED} or {@link #ACTION_TECH_DISCOVERED} for the current tag.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
"
	    classrelation_ref 1409463 // ACTION_TAG_DISCOVERED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1409591 // ACTION_TAG_LEFT_FIELD (<unidirectional association>)
	relation 1409591 --->
	  a role_name "ACTION_TAG_LEFT_FIELD" init_value " \"android.nfc.action.TAG_LOST\"" class_relation const_relation public
	    comment "
Broadcast to only the activity that handles ACTION_TAG_DISCOVERED
@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1409591 // ACTION_TAG_LEFT_FIELD (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1409719 // EXTRA_TAG (<unidirectional association>)
	relation 1409719 --->
	  a role_name "EXTRA_TAG" init_value " \"android.nfc.extra.TAG\"" class_relation const_relation public
	    comment "
Mandatory extra containing the {@link Tag} that was discovered for the
{@link #ACTION_NDEF_DISCOVERED}, {@link #ACTION_TECH_DISCOVERED}, and
{@link #ACTION_TAG_DISCOVERED} intents.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1409719 // EXTRA_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1409847 // EXTRA_NDEF_MESSAGES (<unidirectional association>)
	relation 1409847 --->
	  a role_name "EXTRA_NDEF_MESSAGES" init_value " \"android.nfc.extra.NDEF_MESSAGES\"" class_relation const_relation public
	    comment "
Extra containing an array of {@link NdefMessage} present on the discovered tag.<p>
This extra is mandatory for {@link #ACTION_NDEF_DISCOVERED} intents,
and optional for {@link #ACTION_TECH_DISCOVERED}, and
{@link #ACTION_TAG_DISCOVERED} intents.<p>
When this extra is present there will always be at least one
{@link NdefMessage} element. Most NDEF tags have only one NDEF message,
but we use an array for future compatibility.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1409847 // EXTRA_NDEF_MESSAGES (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1409975 // EXTRA_ID (<unidirectional association>)
	relation 1409975 --->
	  a role_name "EXTRA_ID" init_value " \"android.nfc.extra.ID\"" class_relation const_relation public
	    comment "
Optional extra containing a byte array containing the ID of the discovered tag for
the {@link #ACTION_NDEF_DISCOVERED}, {@link #ACTION_TECH_DISCOVERED}, and
{@link #ACTION_TAG_DISCOVERED} intents.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1409975 // EXTRA_ID (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1410103 // ACTION_ADAPTER_STATE_CHANGED (<unidirectional association>)
	relation 1410103 --->
	  a role_name "ACTION_ADAPTER_STATE_CHANGED" init_value "
            \"android.nfc.action.ADAPTER_STATE_CHANGED\"" class_relation const_relation public
	    comment "
Broadcast Action: The state of the local NFC adapter has been
changed.
<p>For example, NFC has been turned on or off.
<p>Always contains the extra field {@link #EXTRA_ADAPTER_STATE}

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
"
	    classrelation_ref 1410103 // ACTION_ADAPTER_STATE_CHANGED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1410231 // EXTRA_ADAPTER_STATE (<unidirectional association>)
	relation 1410231 --->
	  a role_name "EXTRA_ADAPTER_STATE" init_value " \"android.nfc.extra.ADAPTER_STATE\"" class_relation const_relation public
	    comment "
Used as an int extra field in {@link #ACTION_ADAPTER_STATE_CHANGED}
intents to request the current power state. Possible values are:
{@link #STATE_OFF},
{@link #STATE_TURNING_ON},
{@link #STATE_ON},
{@link #STATE_TURNING_OFF},

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1410231 // EXTRA_ADAPTER_STATE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 1562551 "STATE_OFF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1562679 "STATE_TURNING_ON"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1562807 "STATE_ON"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1562935 "STATE_TURNING_OFF"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1563063 "FLAG_READER_NFC_A"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
<p>
Setting this flag enables polling for Nfc-A technology.
"
      end

      attribute 1563191 "FLAG_READER_NFC_B"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
<p>
Setting this flag enables polling for Nfc-B technology.
"
      end

      attribute 1563319 "FLAG_READER_NFC_F"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
<p>
Setting this flag enables polling for Nfc-F technology.
"
      end

      attribute 1563447 "FLAG_READER_NFC_V"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
<p>
Setting this flag enables polling for Nfc-V (ISO15693) technology.
"
      end

      attribute 1563575 "FLAG_READER_NFC_BARCODE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
<p>
Setting this flag enables polling for NfcBarcode technology.
"
      end

      attribute 1563703 "FLAG_READER_SKIP_NDEF_CHECK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x80"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
<p>
Setting this flag allows the caller to prevent the
platform from performing an NDEF check on the tags it
finds.
"
      end

      attribute 1563831 "FLAG_READER_NO_PLATFORM_SOUNDS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
<p>
Setting this flag allows the caller to prevent the
platform from playing sounds when it discovers a tag.
"
      end

      classrelation 1410359 // EXTRA_READER_PRESENCE_CHECK_DELAY (<unidirectional association>)
	relation 1410359 --->
	  a role_name "EXTRA_READER_PRESENCE_CHECK_DELAY" init_value " \"presence\"" class_relation const_relation public
	    comment "
Int Extra for use with {@link #enableReaderMode(Activity, ReaderCallback, int, Bundle)}.
<p>
Setting this integer extra allows the calling application to specify
the delay that the platform will use for performing presence checks
on any discovered tag.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1410359 // EXTRA_READER_PRESENCE_CHECK_DELAY (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 1563959 "FLAG_NDEF_PUSH_NO_CONFIRM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " @hide "
      end

      classrelation 1410487 // ACTION_HANDOVER_TRANSFER_STARTED (<unidirectional association>)
	relation 1410487 --->
	  a role_name "ACTION_HANDOVER_TRANSFER_STARTED" init_value "
            \"android.nfc.action.HANDOVER_TRANSFER_STARTED\"" class_relation const_relation public
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1410487 // ACTION_HANDOVER_TRANSFER_STARTED (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1410615 // ACTION_HANDOVER_TRANSFER_DONE (<unidirectional association>)
	relation 1410615 --->
	  a role_name "ACTION_HANDOVER_TRANSFER_DONE" init_value "
            \"android.nfc.action.HANDOVER_TRANSFER_DONE\"" class_relation const_relation public
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1410615 // ACTION_HANDOVER_TRANSFER_DONE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1410743 // EXTRA_HANDOVER_TRANSFER_STATUS (<unidirectional association>)
	relation 1410743 --->
	  a role_name "EXTRA_HANDOVER_TRANSFER_STATUS" init_value "
            \"android.nfc.extra.HANDOVER_TRANSFER_STATUS\"" class_relation const_relation public
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1410743 // EXTRA_HANDOVER_TRANSFER_STATUS (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 1564087 "HANDOVER_TRANSFER_STATUS_SUCCESS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " @hide "
      end

      attribute 1564215 "HANDOVER_TRANSFER_STATUS_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " @hide "
      end

      classrelation 1410871 // EXTRA_HANDOVER_TRANSFER_URI (<unidirectional association>)
	relation 1410871 --->
	  a role_name "EXTRA_HANDOVER_TRANSFER_URI" init_value "
            \"android.nfc.extra.HANDOVER_TRANSFER_URI\"" class_relation const_relation public
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1410871 // EXTRA_HANDOVER_TRANSFER_URI (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 1564343 "sIsInitialized"
	class_attribute package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Guarded by NfcAdapter.class"
      end

      attribute 1564471 "sService"
	class_attribute package explicit_type "INfcAdapter"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Final after first constructor, except for
 attemptDeadServiceRecovery() when NFC crashes - we accept a best effort
 recovery"
      end

      attribute 1564599 "sTagService"
	class_attribute package explicit_type "INfcTag"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1564727 "sCardEmulationService"
	class_attribute package explicit_type "INfcCardEmulation"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1564855 "sNfcFCardEmulationService"
	class_attribute package explicit_type "INfcFCardEmulation"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1410999 // sNfcAdapters (<unidirectional association>)
	relation 1410999 --->
	  stereotype "HashMap"
	  a role_name "sNfcAdapters" init_value " new HashMap()" class_relation package
	    comment "The NfcAdapter object for each application context.
There is a 1-1 relationship between application context and
NfcAdapter object.

guard by NfcAdapter.class"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, NfcAdapter> ${name}${value};
"
	    classrelation_ref 1410999 // sNfcAdapters (<unidirectional association>)
	  b parent class_ref 128567 // Context
      end

      classrelation 1411127 // sNullContextNfcAdapter (<unidirectional association>)
	relation 1411127 --->
	  a role_name "sNullContextNfcAdapter" class_relation package
	    comment "
NfcAdapter used with a null context. This ctor was deprecated but we have
to support it for backwards compatibility. New methods that require context
might throw when called on the null-context NfcAdapter.

 protected by NfcAdapter.class"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1411127 // sNullContextNfcAdapter (<unidirectional association>)
	  b parent class_ref 531255 // NfcAdapter
      end

      classrelation 1411255 // mNfcActivityManager (<unidirectional association>)
	relation 1411255 --->
	  a role_name "mNfcActivityManager" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1411255 // mNfcActivityManager (<unidirectional association>)
	  b parent class_ref 530999 // NfcActivityManager
      end

      classrelation 1411383 // mContext (<unidirectional association>)
	relation 1411383 --->
	  a role_name "mContext" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1411383 // mContext (<unidirectional association>)
	  b parent class_ref 128567 // Context
      end

      class 532279 "NfcUnlockHandler"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	java_annotation "@SystemApi
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 3646775 "onUnlockAttempted"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "tag" type class_ref 532151 // Tag
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called at the lock screen to attempt to unlock the device with the given tag.
@param tag the detected tag, to be used to unlock the device
@return true if the device was successfully unlocked"
	end
      end

      classrelation 1411511 // mNfcUnlockHandlers (<unidirectional association>)
	relation 1411511 --->
	  stereotype "HashMap"
	  a role_name "mNfcUnlockHandlers" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, INfcUnlockHandler> ${name}${value};
"
	    classrelation_ref 1411511 // mNfcUnlockHandlers (<unidirectional association>)
	  b parent class_ref 532279 // NfcUnlockHandler
      end

      classrelation 1411639 // mLock (<unidirectional association>)
	relation 1411639 --->
	  a role_name "mLock" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1411639 // mLock (<unidirectional association>)
	  b parent class_ref 132663 // Object
      end

      attribute 1564983 "mTagRemovedListener"
	package explicit_type "ITagRemovedCallback"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " protected by mLock"
      end

      class 532535 "OnTagRemovedListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 3646647 "onTagRemoved"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 3646903 "hasNfcFeature"
	class_operation private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Helper to check if this device has FEATURE_NFC, but without using
a context.
Equivalent to
context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_NFC)"
      end

      operation 3647031 "getNfcAdapter"
	class_operation public return_type class_ref 531255 // NfcAdapter
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the NfcAdapter for application context,
or throws if NFC is not available.
@hide"
      end

      operation 3647159 "getServiceInterface"
	class_operation private explicit_return_type "INfcAdapter"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get handle to NFC service interface "
      end

      operation 3647287 "getDefaultAdapter"
	class_operation public return_type class_ref 531255 // NfcAdapter
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Helper to get the default NFC Adapter.
<p>
Most Android devices will only have one NFC Adapter (NFC Controller).
<p>
This helper is the equivalent of:
<pre>
NfcManager manager = (NfcManager) context.getSystemService(Context.NFC_SERVICE);
NfcAdapter adapter = manager.getDefaultAdapter();</pre>
@param context the calling application's context

@return the default NFC adapter, or null if no NFC adapter exists"
      end

      operation 3647415 "getDefaultAdapter"
	class_operation public return_type class_ref 531255 // NfcAdapter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Legacy NfcAdapter getter, always use {@link #getDefaultAdapter(Context)} instead.<p>
This method was deprecated at API level 10 (Gingerbread MR1) because a context is required
for many NFC API methods. Those methods will fail when called on an NfcAdapter
object created from this method.<p>
@deprecated use {@link #getDefaultAdapter(Context)}
@hide"
      end

      operation 3647543 "NfcAdapter"
	package explicit_return_type ""
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3647671 "getContext"
	public return_type class_ref 128567 // Context
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 3647799 "getService"
	public explicit_return_type "INfcAdapter"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the binder interface to the service.
@hide"
      end

      operation 3647927 "getTagService"
	public explicit_return_type "INfcTag"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the binder interface to the tag service.
@hide"
      end

      operation 3648055 "getCardEmulationService"
	public explicit_return_type "INfcCardEmulation"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the binder interface to the card emulation service.
@hide"
      end

      operation 3648183 "getNfcFCardEmulationService"
	public explicit_return_type "INfcFCardEmulation"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the binder interface to the NFC-F card emulation service.
@hide"
      end

      operation 3648311 "attemptDeadServiceRecovery"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "NFC service dead - attempt best effort recovery
@hide"
      end

      operation 3648439 "isEnabled"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if this NFC Adapter has any features enabled.

<p>If this method returns false, the NFC hardware is guaranteed not to
generate or respond to any NFC communication over its NFC radio.
<p>Applications can use this to check if NFC is enabled. Applications
can request Settings UI allowing the user to toggle NFC using:
<p><pre>startActivity(new Intent(Settings.ACTION_NFC_SETTINGS))</pre>

@see android.provider.Settings#ACTION_NFC_SETTINGS
@return true if this NFC Adapter has any features enabled"
      end

      operation 3648567 "getAdapterState"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the state of this NFC Adapter.

<p>Returns one of {@link #STATE_ON}, {@link #STATE_TURNING_ON},
{@link #STATE_OFF}, {@link #STATE_TURNING_OFF}.

<p>{@link #isEnabled()} is equivalent to
<code>{@link #getAdapterState()} == {@link #STATE_ON}</code>

@return the current state of this NFC adapter

@hide"
      end

      operation 3648695 "enable"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Enable NFC hardware.

<p>This call is asynchronous. Listen for
{@link #ACTION_ADAPTER_STATE_CHANGED} broadcasts to find out when the
operation is complete.

<p>If this returns true, then either NFC is already on, or
a {@link #ACTION_ADAPTER_STATE_CHANGED} broadcast will be sent
to indicate a state transition. If this returns false, then
there is some problem that prevents an attempt to turn
NFC on (for example we are in airplane mode and NFC is not
toggleable in airplane mode on this platform).

@hide"
      end

      operation 3648823 "disable"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Disable NFC hardware.

<p>No NFC features will work after this call, and the hardware
will not perform or respond to any NFC communication.

<p>This call is asynchronous. Listen for
{@link #ACTION_ADAPTER_STATE_CHANGED} broadcasts to find out when the
operation is complete.

<p>If this returns true, then either NFC is already off, or
a {@link #ACTION_ADAPTER_STATE_CHANGED} broadcast will be sent
to indicate a state transition. If this returns false, then
there is some problem that prevents an attempt to turn
NFC off.

@hide"
      end

      operation 3648951 "disable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "persist" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Disable NFC hardware.
@hide"
      end

      operation 3649079 "pausePolling"
	public explicit_return_type "void"
	nparams 1
	  param in name "timeoutInMs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pauses polling for a {@code timeoutInMs} millis. If polling must be resumed before timeout,
use {@link #resumePolling()}.
@hide"
      end

      operation 3649207 "resumePolling"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resumes default polling for the current device state if polling is paused. Calling
this while polling is not paused is a no-op.

@hide"
      end

      operation 3649335 "setBeamPushUris"
	public explicit_return_type "void"
	nparams 2
	  param inout name "uris" type class_ref 133047 // Uri
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set one or more {@link Uri}s to send using Android Beam (TM). Every
Uri you provide must have either scheme 'file' or scheme 'content'.

<p>For the data provided through this method, Android Beam tries to
switch to alternate transports such as Bluetooth to achieve a fast
transfer speed. Hence this method is very suitable
for transferring large files such as pictures or songs.

<p>The receiving side will store the content of each Uri in
a file and present a notification to the user to open the file
with a {@link android.content.Intent} with action
{@link android.content.Intent#ACTION_VIEW}.
If multiple URIs are sent, the {@link android.content.Intent} will refer
to the first of the stored files.

<p>This method may be called at any time before {@link Activity#onDestroy},
but the URI(s) are only made available for Android Beam when the
specified activity(s) are in resumed (foreground) state. The recommended
approach is to call this method during your Activity's
{@link Activity#onCreate} - see sample
code below. This method does not immediately perform any I/O or blocking work,
so is safe to call on your main thread.

<p>{@link #setBeamPushUris} and {@link #setBeamPushUrisCallback}
have priority over both {@link #setNdefPushMessage} and
{@link #setNdefPushMessageCallback}.

<p>If {@link #setBeamPushUris} is called with a null Uri array,
and/or {@link #setBeamPushUrisCallback} is called with a null callback,
then the Uri push will be completely disabled for the specified activity(s).

<p>Code example:
<pre>
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
    if (nfcAdapter == null) return;  // NFC not available on this device
    nfcAdapter.setBeamPushUris(new Uri[] {uri1, uri2}, this);
}</pre>
And that is it. Only one call per activity is necessary. The Android
OS will automatically release its references to the Uri(s) and the
Activity object when it is destroyed if you follow this pattern.

<p>If your Activity wants to dynamically supply Uri(s),
then set a callback using {@link #setBeamPushUrisCallback} instead
of using this method.

<p class=\"note\">Do not pass in an Activity that has already been through
{@link Activity#onDestroy}. This is guaranteed if you call this API
during {@link Activity#onCreate}.

<p class=\"note\">If this device does not support alternate transports
such as Bluetooth or WiFI, calling this method does nothing.

<p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.

@param uris an array of Uri(s) to push over Android Beam
@param activity activity for which the Uri(s) will be pushed"
      end

      operation 3649463 "setBeamPushUrisCallback"
	public explicit_return_type "void"
	nparams 2
	  param inout name "callback" type class_ref 531895 // CreateBeamUrisCallback
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a callback that will dynamically generate one or more {@link Uri}s
to send using Android Beam (TM). Every Uri the callback provides
must have either scheme 'file' or scheme 'content'.

<p>For the data provided through this callback, Android Beam tries to
switch to alternate transports such as Bluetooth to achieve a fast
transfer speed. Hence this method is very suitable
for transferring large files such as pictures or songs.

<p>The receiving side will store the content of each Uri in
a file and present a notification to the user to open the file
with a {@link android.content.Intent} with action
{@link android.content.Intent#ACTION_VIEW}.
If multiple URIs are sent, the {@link android.content.Intent} will refer
to the first of the stored files.

<p>This method may be called at any time before {@link Activity#onDestroy},
but the URI(s) are only made available for Android Beam when the
specified activity(s) are in resumed (foreground) state. The recommended
approach is to call this method during your Activity's
{@link Activity#onCreate} - see sample
code below. This method does not immediately perform any I/O or blocking work,
so is safe to call on your main thread.

<p>{@link #setBeamPushUris} and {@link #setBeamPushUrisCallback}
have priority over both {@link #setNdefPushMessage} and
{@link #setNdefPushMessageCallback}.

<p>If {@link #setBeamPushUris} is called with a null Uri array,
and/or {@link #setBeamPushUrisCallback} is called with a null callback,
then the Uri push will be completely disabled for the specified activity(s).

<p>Code example:
<pre>
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
    if (nfcAdapter == null) return;  // NFC not available on this device
    nfcAdapter.setBeamPushUrisCallback(callback, this);
}</pre>
And that is it. Only one call per activity is necessary. The Android
OS will automatically release its references to the Uri(s) and the
Activity object when it is destroyed if you follow this pattern.

<p class=\"note\">Do not pass in an Activity that has already been through
{@link Activity#onDestroy}. This is guaranteed if you call this API
during {@link Activity#onCreate}.

<p class=\"note\">If this device does not support alternate transports
such as Bluetooth or WiFI, calling this method does nothing.

<p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.

@param callback callback, or null to disable
@param activity activity for which the Uri(s) will be pushed"
      end

      operation 3649591 "setNdefPushMessage"
	public explicit_return_type "void"
	nparams 3
	  param inout name "message" type class_ref 530487 // NdefMessage
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "activities" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a static {@link NdefMessage} to send using Android Beam (TM).

<p>This method may be called at any time before {@link Activity#onDestroy},
but the NDEF message is only made available for NDEF push when the
specified activity(s) are in resumed (foreground) state. The recommended
approach is to call this method during your Activity's
{@link Activity#onCreate} - see sample
code below. This method does not immediately perform any I/O or blocking work,
so is safe to call on your main thread.

<p>Only one NDEF message can be pushed by the currently resumed activity.
If both {@link #setNdefPushMessage} and
{@link #setNdefPushMessageCallback} are set, then
the callback will take priority.

<p>If neither {@link #setNdefPushMessage} or
{@link #setNdefPushMessageCallback} have been called for your activity, then
the Android OS may choose to send a default NDEF message on your behalf,
such as a URI for your application.

<p>If {@link #setNdefPushMessage} is called with a null NDEF message,
and/or {@link #setNdefPushMessageCallback} is called with a null callback,
then NDEF push will be completely disabled for the specified activity(s).
This also disables any default NDEF message the Android OS would have
otherwise sent on your behalf for those activity(s).

<p>If you want to prevent the Android OS from sending default NDEF
messages completely (for all activities), you can include a
{@code <meta-data>} element inside the {@code <application>}
element of your AndroidManifest.xml file, like this:
<pre>
&lt;application ...>
    &lt;meta-data android:name=\"android.nfc.disable_beam_default\"
        android:value=\"true\" />
&lt;/application></pre>

<p>The API allows for multiple activities to be specified at a time,
but it is strongly recommended to just register one at a time,
and to do so during the activity's {@link Activity#onCreate}. For example:
<pre>
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
    if (nfcAdapter == null) return;  // NFC not available on this device
    nfcAdapter.setNdefPushMessage(ndefMessage, this);
}</pre>
And that is it. Only one call per activity is necessary. The Android
OS will automatically release its references to the NDEF message and the
Activity object when it is destroyed if you follow this pattern.

<p>If your Activity wants to dynamically generate an NDEF message,
then set a callback using {@link #setNdefPushMessageCallback} instead
of a static message.

<p class=\"note\">Do not pass in an Activity that has already been through
{@link Activity#onDestroy}. This is guaranteed if you call this API
during {@link Activity#onCreate}.

<p class=\"note\">For sending large content such as pictures and songs,
consider using {@link #setBeamPushUris}, which switches to alternate transports
such as Bluetooth to achieve a fast transfer rate.

<p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.

@param message NDEF message to push over NFC, or null to disable
@param activity activity for which the NDEF message will be pushed
@param activities optional additional activities, however we strongly recommend
       to only register one at a time, and to do so in that activity's
       {@link Activity#onCreate}"
      end

      operation 3649719 "setNdefPushMessage"
	public explicit_return_type "void"
	nparams 3
	  param inout name "message" type class_ref 530487 // NdefMessage
	  param inout name "activity" type class_ref 128183 // Activity
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "@hide"
      end

      operation 3649847 "setNdefPushMessageCallback"
	public explicit_return_type "void"
	nparams 3
	  param inout name "callback" type class_ref 531639 // CreateNdefMessageCallback
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "activities" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a callback that dynamically generates NDEF messages to send using Android Beam (TM).

<p>This method may be called at any time before {@link Activity#onDestroy},
but the NDEF message callback can only occur when the
specified activity(s) are in resumed (foreground) state. The recommended
approach is to call this method during your Activity's
{@link Activity#onCreate} - see sample
code below. This method does not immediately perform any I/O or blocking work,
so is safe to call on your main thread.

<p>Only one NDEF message can be pushed by the currently resumed activity.
If both {@link #setNdefPushMessage} and
{@link #setNdefPushMessageCallback} are set, then
the callback will take priority.

<p>If neither {@link #setNdefPushMessage} or
{@link #setNdefPushMessageCallback} have been called for your activity, then
the Android OS may choose to send a default NDEF message on your behalf,
such as a URI for your application.

<p>If {@link #setNdefPushMessage} is called with a null NDEF message,
and/or {@link #setNdefPushMessageCallback} is called with a null callback,
then NDEF push will be completely disabled for the specified activity(s).
This also disables any default NDEF message the Android OS would have
otherwise sent on your behalf for those activity(s).

<p>If you want to prevent the Android OS from sending default NDEF
messages completely (for all activities), you can include a
{@code <meta-data>} element inside the {@code <application>}
element of your AndroidManifest.xml file, like this:
<pre>
&lt;application ...>
    &lt;meta-data android:name=\"android.nfc.disable_beam_default\"
        android:value=\"true\" />
&lt;/application></pre>

<p>The API allows for multiple activities to be specified at a time,
but it is strongly recommended to just register one at a time,
and to do so during the activity's {@link Activity#onCreate}. For example:
<pre>
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
    if (nfcAdapter == null) return;  // NFC not available on this device
    nfcAdapter.setNdefPushMessageCallback(callback, this);
}</pre>
And that is it. Only one call per activity is necessary. The Android
OS will automatically release its references to the callback and the
Activity object when it is destroyed if you follow this pattern.

<p class=\"note\">Do not pass in an Activity that has already been through
{@link Activity#onDestroy}. This is guaranteed if you call this API
during {@link Activity#onCreate}.
<p class=\"note\">For sending large content such as pictures and songs,
consider using {@link #setBeamPushUris}, which switches to alternate transports
such as Bluetooth to achieve a fast transfer rate.
<p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.

@param callback callback, or null to disable
@param activity activity for which the NDEF message will be pushed
@param activities optional additional activities, however we strongly recommend
       to only register one at a time, and to do so in that activity's
       {@link Activity#onCreate}"
      end

      operation 3649975 "setNdefPushMessageCallback"
	public explicit_return_type "void"
	nparams 3
	  param inout name "callback" type class_ref 531639 // CreateNdefMessageCallback
	  param inout name "activity" type class_ref 128183 // Activity
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 3650103 "setOnNdefPushCompleteCallback"
	public explicit_return_type "void"
	nparams 3
	  param inout name "callback" type class_ref 531767 // OnNdefPushCompleteCallback
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "activities" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ... ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a callback on successful Android Beam (TM).

<p>This method may be called at any time before {@link Activity#onDestroy},
but the callback can only occur when the
specified activity(s) are in resumed (foreground) state. The recommended
approach is to call this method during your Activity's
{@link Activity#onCreate} - see sample
code below. This method does not immediately perform any I/O or blocking work,
so is safe to call on your main thread.

<p>The API allows for multiple activities to be specified at a time,
but it is strongly recommended to just register one at a time,
and to do so during the activity's {@link Activity#onCreate}. For example:
<pre>
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this);
    if (nfcAdapter == null) return;  // NFC not available on this device
    nfcAdapter.setOnNdefPushCompleteCallback(callback, this);
}</pre>
And that is it. Only one call per activity is necessary. The Android
OS will automatically release its references to the callback and the
Activity object when it is destroyed if you follow this pattern.

<p class=\"note\">Do not pass in an Activity that has already been through
{@link Activity#onDestroy}. This is guaranteed if you call this API
during {@link Activity#onCreate}.

<p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.

@param callback callback, or null to disable
@param activity activity for which the NDEF message will be pushed
@param activities optional additional activities, however we strongly recommend
       to only register one at a time, and to do so in that activity's
       {@link Activity#onCreate}"
      end

      operation 3650231 "enableForegroundDispatch"
	public explicit_return_type "void"
	nparams 4
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "intent" type class_ref 159287 // PendingIntent
	  param inout name "filters" type class_ref 132151 // IntentFilter
	  param inout name "techLists" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable foreground dispatch to the given Activity.

<p>This will give give priority to the foreground activity when
dispatching a discovered {@link Tag} to an application.

<p>If any IntentFilters are provided to this method they are used to match dispatch Intents
for both the {@link NfcAdapter#ACTION_NDEF_DISCOVERED} and
{@link NfcAdapter#ACTION_TAG_DISCOVERED}. Since {@link NfcAdapter#ACTION_TECH_DISCOVERED}
relies on meta data outside of the IntentFilter matching for that dispatch Intent is handled
by passing in the tech lists separately. Each first level entry in the tech list represents
an array of technologies that must all be present to match. If any of the first level sets
match then the dispatch is routed through the given PendingIntent. In other words, the second
level is ANDed together and the first level entries are ORed together.

<p>If you pass {@code null} for both the {@code filters} and {@code techLists} parameters
that acts a wild card and will cause the foreground activity to receive all tags via the
{@link NfcAdapter#ACTION_TAG_DISCOVERED} intent.

<p>This method must be called from the main thread, and only when the activity is in the
foreground (resumed). Also, activities must call {@link #disableForegroundDispatch} before
the completion of their {@link Activity#onPause} callback to disable foreground dispatch
after it has been enabled.

<p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.

@param activity the Activity to dispatch to
@param intent the PendingIntent to start for the dispatch
@param filters the IntentFilters to override dispatching for, or null to always dispatch
@param techLists the tech lists used to perform matching for dispatching of the
     {@link NfcAdapter#ACTION_TECH_DISCOVERED} intent
@throws IllegalStateException if the Activity is not currently in the foreground"
      end

      operation 3650359 "disableForegroundDispatch"
	public explicit_return_type "void"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disable foreground dispatch to the given activity.

<p>After calling {@link #enableForegroundDispatch}, an activity
must call this method before its {@link Activity#onPause} callback
completes.

<p>This method must be called from the main thread.

<p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.

@param activity the Activity to disable dispatch to
@throws IllegalStateException if the Activity has already been paused"
      end

      classrelation 1411767 // mForegroundDispatchListener (<unidirectional association>)
	relation 1411767 --->
	  a role_name "mForegroundDispatchListener" init_value " new OnActivityPausedListener() {
        @Override
        public void onPaused(Activity activity) {
            disableForegroundDispatchInternal(activity, true);
        }
    }" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1411767 // mForegroundDispatchListener (<unidirectional association>)
	  b parent class_ref 339255 // OnActivityPausedListener
      end

      operation 3650487 "disableForegroundDispatchInternal"
	package explicit_return_type "void"
	nparams 2
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "force" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3650615 "enableReaderMode"
	public explicit_return_type "void"
	nparams 4
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "callback" type class_ref 532023 // ReaderCallback
	  param in name "flags" explicit_type "int"
	  param inout name "extras" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Limit the NFC controller to reader mode while this Activity is in the foreground.

<p>In this mode the NFC controller will only act as an NFC tag reader/writer,
thus disabling any peer-to-peer (Android Beam) and card-emulation modes of
the NFC adapter on this device.

<p>Use {@link #FLAG_READER_SKIP_NDEF_CHECK} to prevent the platform from
performing any NDEF checks in reader mode. Note that this will prevent the
{@link Ndef} tag technology from being enumerated on the tag, and that
NDEF-based tag dispatch will not be functional.

<p>For interacting with tags that are emulated on another Android device
using Android's host-based card-emulation, the recommended flags are
{@link #FLAG_READER_NFC_A} and {@link #FLAG_READER_SKIP_NDEF_CHECK}.

@param activity the Activity that requests the adapter to be in reader mode
@param callback the callback to be called when a tag is discovered
@param flags Flags indicating poll technologies and other optional parameters
@param extras Additional extras for configuring reader mode."
      end

      operation 3650743 "disableReaderMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restore the NFC adapter to normal mode of operation: supporting
peer-to-peer (Android Beam), card emulation, and polling for
all supported tag technologies.

@param activity the Activity that currently has reader mode enabled"
      end

      operation 3650871 "invokeBeam"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Manually invoke Android Beam to share data.

<p>The Android Beam animation is normally only shown when two NFC-capable
devices come into range.
By calling this method, an Activity can invoke the Beam animation directly
even if no other NFC device is in range yet. The Beam animation will then
prompt the user to tap another NFC-capable device to complete the data
transfer.

<p>The main advantage of using this method is that it avoids the need for the
user to tap the screen to complete the transfer, as this method already
establishes the direction of the transfer and the consent of the user to
share data. Callers are responsible for making sure that the user has
consented to sharing data on NFC tap.

<p>Note that to use this method, the passed in Activity must have already
set data to share over Beam by using method calls such as
{@link #setNdefPushMessageCallback} or
{@link #setBeamPushUrisCallback}.

@param activity the current foreground Activity that has registered data to share
@return whether the Beam animation was successfully invoked"
      end

      operation 3650999 "invokeBeam"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "shareData" type class_ref 530359 // BeamShareData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 3651127 "enableForegroundNdefPush"
	public explicit_return_type "void"
	nparams 2
	  param inout name "activity" type class_ref 128183 // Activity
	  param inout name "message" type class_ref 530487 // NdefMessage
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Enable NDEF message push over NFC while this Activity is in the foreground.

<p>You must explicitly call this method every time the activity is
resumed, and you must call {@link #disableForegroundNdefPush} before
your activity completes {@link Activity#onPause}.

<p>Strongly recommend to use the new {@link #setNdefPushMessage}
instead: it automatically hooks into your activity life-cycle,
so you do not need to call enable/disable in your onResume/onPause.

<p>For NDEF push to function properly the other NFC device must
support either NFC Forum's SNEP (Simple Ndef Exchange Protocol), or
Android's \"com.android.npp\" (Ndef Push Protocol). This was optional
on Gingerbread level Android NFC devices, but SNEP is mandatory on
Ice-Cream-Sandwich and beyond.

<p>This method must be called from the main thread.

<p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.

@param activity foreground activity
@param message a NDEF Message to push over NFC
@throws IllegalStateException if the activity is not currently in the foreground
@deprecated use {@link #setNdefPushMessage} instead"
      end

      operation 3651255 "disableForegroundNdefPush"
	public explicit_return_type "void"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Disable NDEF message push over P2P.

<p>After calling {@link #enableForegroundNdefPush}, an activity
must call this method before its {@link Activity#onPause} callback
completes.

<p>Strongly recommend to use the new {@link #setNdefPushMessage}
instead: it automatically hooks into your activity life-cycle,
so you do not need to call enable/disable in your onResume/onPause.

<p>This method must be called from the main thread.

<p class=\"note\">Requires the {@link android.Manifest.permission#NFC} permission.

@param activity the Foreground activity
@throws IllegalStateException if the Activity has already been paused
@deprecated use {@link #setNdefPushMessage} instead"
      end

      operation 3651383 "enableNdefPush"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Enable NDEF Push feature.
<p>This API is for the Settings application.
@hide"
      end

      operation 3651511 "disableNdefPush"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Disable NDEF Push feature.
<p>This API is for the Settings application.
@hide"
      end

      operation 3651639 "isNdefPushEnabled"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the NDEF Push (Android Beam) feature is enabled.
<p>This function will return true only if both NFC is enabled, and the
NDEF Push feature is enabled.
<p>Note that if NFC is enabled but NDEF Push is disabled then this
device can still <i>receive</i> NDEF messages, it just cannot send them.
<p>Applications cannot directly toggle the NDEF Push feature, but they
can request Settings UI allowing the user to toggle NDEF Push using
<code>startActivity(new Intent(Settings.ACTION_NFCSHARING_SETTINGS))</code>
<p>Example usage in an Activity that requires NDEF Push:
<p><pre>
protected void onResume() {
    super.onResume();
    if (!nfcAdapter.isEnabled()) {
        startActivity(new Intent(Settings.ACTION_NFC_SETTINGS));
    } else if (!nfcAdapter.isNdefPushEnabled()) {
        startActivity(new Intent(Settings.ACTION_NFCSHARING_SETTINGS));
    }
}</pre>

@see android.provider.Settings#ACTION_NFCSHARING_SETTINGS
@return true if NDEF Push feature is enabled"
      end

      operation 3651767 "ignore"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "tag" type class_ref 532151 // Tag
	  param in name "debounceMs" explicit_type "int"
	  param in name "tagRemovedListener" type class_ref 532535 // OnTagRemovedListener
	  param in name "handler" type class_ref 132023 // Handler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signals that you are no longer interested in communicating with an NFC tag
for as long as it remains in range.

All future attempted communication to this tag will fail with {@link IOException}.
The NFC controller will be put in a low-power polling mode, allowing the device
to save power in cases where it's \"attached\" to a tag all the time (e.g. a tag in
car dock).

Additionally the debounceMs parameter allows you to specify for how long the tag needs
to have gone out of range, before it will be dispatched again.

Note: the NFC controller typically polls at a pretty slow interval (100 - 500 ms).
This means that if the tag repeatedly goes in and out of range (for example, in
case of a flaky connection), and the controller happens to poll every time the
tag is out of range, it *will* re-dispatch the tag after debounceMs, despite the tag
having been \"in range\" during the interval.

Note 2: if a tag with another UID is detected after this API is called, its effect
will be cancelled; if this tag shows up before the amount of time specified in
debounceMs, it will be dispatched again.

Note 3: some tags have a random UID, in which case this API won't work reliably.

@param tag        the {@link android.nfc.Tag Tag} to ignore.
@param debounceMs minimum amount of time the tag needs to be out of range before being
                  dispatched again.
@param tagRemovedListener listener to be called when the tag is removed from the field.
                          Note that this will only be called if the tag has been out of range
                          for at least debounceMs, or if another tag came into range before
                          debounceMs. May be null in case you don't want a callback.
@param handler the {@link android.os.Handler Handler} that will be used for delivering
               the callback. if the handler is null, then the thread used for delivering
               the callback is unspecified.
@return false if the tag couldn't be found (or has already gone out of range), true otherwise"
      end

      operation 3651895 "dispatch"
	public explicit_return_type "void"
	nparams 1
	  param inout name "tag" type class_ref 532151 // Tag
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inject a mock NFC tag.<p>
Used for testing purposes.
<p class=\"note\">Requires the
{@link android.Manifest.permission#WRITE_SECURE_SETTINGS} permission.
@hide"
      end

      operation 3652023 "setP2pModes"
	public explicit_return_type "void"
	nparams 2
	  param in name "initiatorModes" explicit_type "int"
	  param in name "targetModes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 3652151 "addNfcUnlockHandler"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "unlockHandler" type class_ref 532279 // NfcUnlockHandler
	  param inout name "tagTechnologies" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Registers a new NFC unlock handler with the NFC service.

<p />NFC unlock handlers are intended to unlock the keyguard in the presence of a trusted
NFC device. The handler should return true if it successfully authenticates the user and
unlocks the keyguard.

<p /> The parameter {@code tagTechnologies} determines which Tag technologies will be polled for
at the lockscreen. Polling for less tag technologies reduces latency, and so it is
strongly recommended to only provide the Tag technologies that the handler is expected to
receive. There must be at least one tag technology provided, otherwise the unlock handler
is ignored.

@hide"
      end

      operation 3652279 "removeNfcUnlockHandler"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unlockHandler" type class_ref 532279 // NfcUnlockHandler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SystemApi
"
	
	
	
	comment "Removes a previously registered unlock handler. Also removes the tag technologies
associated with the removed unlock handler.

@hide"
      end

      operation 3652407 "getNfcAdapterExtrasInterface"
	public explicit_return_type "INfcAdapterExtras"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 3652535 "enforceResumed"
	package explicit_return_type "void"
	nparams 1
	  param inout name "activity" type class_ref 128183 // Activity
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3652663 "getSdkVersion"
	package explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 532151 "Tag"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents an NFC tag that has been discovered.
<p>
{@link Tag} is an immutable object that represents the state of a NFC tag at
the time of discovery. It can be used as a handle to {@link TagTechnology} classes
to perform advanced operations, or directly queried for its ID via {@link #getId} and the
set of technologies it contains via {@link #getTechList}. Arrays passed to and
returned by this class are <em>not</em> cloned, so be careful not to modify them.
<p>
A new tag object is created every time a tag is discovered (comes into range), even
if it is the same physical tag. If a tag is removed and then returned into range, then
only the most recent tag object can be successfully used to create a {@link TagTechnology}.

<h3>Tag Dispatch</h3>
When a tag is discovered, a {@link Tag} object is created and passed to a
single activity via the {@link NfcAdapter#EXTRA_TAG} extra in an
{@link android.content.Intent} via {@link Context#startActivity}. A four stage dispatch is used
to select the
most appropriate activity to handle the tag. The Android OS executes each stage in order,
and completes dispatch as soon as a single matching activity is found. If there are multiple
matching activities found at any one stage then the Android activity chooser dialog is shown
to allow the user to select the activity to receive the tag.

<p>The Tag dispatch mechanism was designed to give a high probability of dispatching
a tag to the correct activity without showing the user an activity chooser dialog.
This is important for NFC interactions because they are very transient -- if a user has to
move the Android device to choose an application then the connection will likely be broken.

<h4>1. Foreground activity dispatch</h4>
A foreground activity that has called
{@link NfcAdapter#enableForegroundDispatch NfcAdapter.enableForegroundDispatch()} is
given priority. See the documentation on
{@link NfcAdapter#enableForegroundDispatch NfcAdapter.enableForegroundDispatch()} for
its usage.
<h4>2. NDEF data dispatch</h4>
If the tag contains NDEF data the system inspects the first {@link NdefRecord} in the first
{@link NdefMessage}. If the record is a URI, SmartPoster, or MIME data
{@link Context#startActivity} is called with {@link NfcAdapter#ACTION_NDEF_DISCOVERED}. For URI
and SmartPoster records the URI is put into the intent's data field. For MIME records the MIME
type is put in the intent's type field. This allows activities to register to be launched only
when data they know how to handle is present on a tag. This is the preferred method of handling
data on a tag since NDEF data can be stored on many types of tags and doesn't depend on a
specific tag technology. 
See {@link NfcAdapter#ACTION_NDEF_DISCOVERED} for more detail. If the tag does not contain
NDEF data, or if no activity is registered
for {@link NfcAdapter#ACTION_NDEF_DISCOVERED} with a matching data URI or MIME type then dispatch
moves to stage 3.
<h4>3. Tag Technology dispatch</h4>
{@link Context#startActivity} is called with {@link NfcAdapter#ACTION_TECH_DISCOVERED} to
dispatch the tag to an activity that can handle the technologies present on the tag.
Technologies are defined as sub-classes of {@link TagTechnology}, see the package
{@link android.nfc.tech}. The Android OS looks for an activity that can handle one or
more technologies in the tag. See {@link NfcAdapter#ACTION_TECH_DISCOVERED} for more detail.
<h4>4. Fall-back dispatch</h4>
If no activity has been matched then {@link Context#startActivity} is called with
{@link NfcAdapter#ACTION_TAG_DISCOVERED}. This is intended as a fall-back mechanism.
See {@link NfcAdapter#ACTION_TAG_DISCOVERED}.

<h3>NFC Tag Background</h3>
An NFC tag is a passive NFC device, powered by the NFC field of this Android device while
it is in range. Tag's can come in many forms, such as stickers, cards, key fobs, or
even embedded in a more sophisticated device.
<p>
Tags can have a wide range of capabilities. Simple tags just offer read/write semantics,
and contain some one time
programmable areas to make read-only. More complex tags offer math operations
and per-sector access control and authentication. The most sophisticated tags
contain operating environments allowing complex interactions with the
code executing on the tag. Use {@link TagTechnology} classes to access a broad
range of capabilities available in NFC tags.
<p>"
      classrelation 1412151 // <realization>
	relation 1412151 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1412151 // <realization>
	  b parent class_ref 137399 // Parcelable
      end

      attribute 1565367 "mId"
	const_attribute package explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1565495 "mTechList"
	const_attribute package explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1412279 // mTechStringList (<unidirectional association>)
	relation 1412279 --->
	  a role_name "mTechStringList" multiplicity "[]" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1412279 // mTechStringList (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1412407 // mTechExtras (<unidirectional association>)
	relation 1412407 --->
	  a role_name "mTechExtras" multiplicity "[]" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1412407 // mTechExtras (<unidirectional association>)
	  b parent class_ref 131511 // Bundle
      end

      attribute 1565623 "mServiceHandle"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " for use by NFC service, 0 indicates a mock"
      end

      attribute 1565751 "mTagService"
	const_attribute package explicit_type "INfcTag"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " interface to NFC service, will be null if mock tag"
      end

      attribute 1565879 "mConnectedTechnology"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3653175 "Tag"
	public explicit_return_type ""
	nparams 5
	  param inout name "id" explicit_type "byte"
	  param inout name "techList" explicit_type "int"
	  param inout name "techListExtras" type class_ref 131511 // Bundle
	  param in name "serviceHandle" explicit_type "int"
	  param inout name "tagService" explicit_type "INfcTag"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Hidden constructor to be used by NFC service and internal classes.
@hide"
      end

      operation 3653303 "createMockTag"
	class_operation public return_type class_ref 532151 // Tag
	nparams 3
	  param inout name "id" explicit_type "byte"
	  param inout name "techList" explicit_type "int"
	  param inout name "techListExtras" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a mock Tag.
<p>This is an application constructed tag, so NfcAdapter methods on this Tag may fail
with {@link IllegalArgumentException} since it does not represent a physical Tag.
<p>This constructor might be useful for mock testing.
@param id The tag identifier, can be null
@param techList must not be null
@return freshly constructed tag
@hide"
      end

      operation 3653431 "generateTechStringList"
	private return_type class_ref 129591 // String
	nparams 1
	  param inout name "techList" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3653559 "getTechCodesFromStrings"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "techStringList" type class_ref 129591 // String
	nexceptions 1
	  explicit_exception "IllegalArgumentException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3653687 "getTechStringToCodeMap"
	class_operation private return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}HashMap<${type}, Integer> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3653815 "getServiceHandle"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For use by NfcService only.
@hide"
      end

      operation 3653943 "getTechCodeList"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For use by NfcService only.
@hide"
      end

      operation 3654071 "getId"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the Tag Identifier (if it has one).
<p>The tag identifier is a low level serial number, used for anti-collision
and identification.
<p> Most tags have a stable unique identifier
(UID), but some tags will generate a random ID every time they are discovered
(RID), and there are some tags with no ID at all (the byte array will be zero-sized).
<p> The size and format of an ID is specific to the RF technology used by the tag.
<p> This function retrieves the ID as determined at discovery time, and does not
perform any further RF communication or block.
@return ID as byte array, never null"
      end

      operation 3654199 "getTechList"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the technologies available in this tag, as fully qualified class names.
<p>
A technology is an implementation of the {@link TagTechnology} interface,
and can be instantiated by calling the static <code>get(Tag)</code>
method on the implementation with this Tag. The {@link TagTechnology}
object can then be used to perform advanced, technology-specific operations on a tag.
<p>
Android defines a mandatory set of technologies that must be correctly
enumerated by all Android NFC devices, and an optional
set of proprietary technologies.
See {@link TagTechnology} for more details.
<p>
The ordering of the returned array is undefined and should not be relied upon.
@return an array of fully-qualified {@link TagTechnology} class-names."
      end

      operation 3654327 "rediscover"
	public return_type class_ref 532151 // Tag
	nparams 0
	nexceptions 1
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rediscover the technologies available on this tag.
<p>
The technologies that are available on a tag may change due to
operations being performed on a tag. For example, formatting a
tag as NDEF adds the {@link Ndef} technology. The {@link rediscover}
method reenumerates the available technologies on the tag
and returns a new {@link Tag} object containing these technologies.
<p>
You may not be connected to any of this {@link Tag}'s technologies
when calling this method.
This method guarantees that you will be returned the same Tag
if it is still in the field.
<p>May cause RF activity and may block. Must not be called
from the main application thread. A blocked call will be canceled with
{@link IOException} by calling {@link #close} from another thread.
<p>Does not remove power from the RF field, so a tag having a random
ID should not change its ID.
@return the rediscovered tag object.
@throws IOException if the tag cannot be rediscovered
@hide

 TODO See if we need TagLostException
 TODO Unhide for ICS
 TODO Update documentation to make sure it matches with the final
      implementation."
      end

      operation 3654455 "hasTech"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "techType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 3654583 "getTechExtras"
	public return_type class_ref 131511 // Bundle
	nparams 1
	  param in name "tech" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 3654711 "getTagService"
	public explicit_return_type "INfcTag"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 3654839 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Human-readable description of the tag, for debugging."
      end

      operation 3654967 "readBytesWithNull"
	class_operation package explicit_return_type "byte"
	nparams 1
	  param inout name "in" type class_ref 137527 // Parcel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "package"
      end

      operation 3655095 "writeBytesWithNull"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "out" type class_ref 137527 // Parcel
	  param inout name "b" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "package"
      end

      operation 3655223 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3655351 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 137527 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 1412535 // CREATOR (<unidirectional association>)
	relation 1412535 --->
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<Tag>() {
        @Override
        public Tag createFromParcel(Parcel in) {
            INfcTag tagService;

            // Tag fields
            byte[] id = Tag.readBytesWithNull(in);
            int[] techList = new int[in.readInt()];
            in.readIntArray(techList);
            Bundle[] techExtras = in.createTypedArray(Bundle.CREATOR);
            int serviceHandle = in.readInt();
            int isMock = in.readInt();
            if (isMock == 0) {
                tagService = INfcTag.Stub.asInterface(in.readStrongBinder());
            }
            else {
                tagService = null;
            }

            return new Tag(id, techList, techExtras, serviceHandle, tagService);
        }

        @Override
        public Tag[] newArray(int size) {
            return new Tag[size];
        }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Tag> ${name}${value};
"
	    classrelation_ref 1412535 // CREATOR (<unidirectional association>)
	  b parent class_ref 137655 // Creator
      end

      operation 3655479 "setConnectedTechnology"
	public explicit_return_type "void"
	nparams 1
	  param in name "technology" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For internal use only.

@hide"
      end

      operation 3655607 "getConnectedTechnology"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For internal use only.

@hide"
      end

      operation 3655735 "setTechnologyDisconnected"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For internal use only.

@hide"
      end
    end

    class 532407 "NfcEvent"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Wraps information associated with any NFC event.

<p>Immutable object, with direct access to the (final) fields.

<p>An {@link NfcEvent} object is usually included in callbacks from
{@link NfcAdapter}. Check the documentation of the callback to see
which fields may be set.

<p>This wrapper object is used (instead of parameters
in the callback) because it allows new fields to be added without breaking
API compatibility.

@see NfcAdapter.OnNdefPushCompleteCallback#onNdefPushComplete
@see NfcAdapter.CreateNdefMessageCallback#createNdefMessage"
      classrelation 1411895 // nfcAdapter (<unidirectional association>)
	relation 1411895 --->
	  a role_name "nfcAdapter" const_relation public
	    comment "
The {@link NfcAdapter} associated with the NFC event.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1411895 // nfcAdapter (<unidirectional association>)
	  b parent class_ref 531255 // NfcAdapter
      end

      attribute 1565111 "peerLlcpMajorVersion"
	const_attribute public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The major LLCP version number of the peer associated with the NFC event.
"
      end

      attribute 1565239 "peerLlcpMinorVersion"
	const_attribute public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minor LLCP version number of the peer associated with the NFC event.
"
      end

      operation 3652791 "NfcEvent"
	package explicit_return_type ""
	nparams 2
	  param inout name "nfcAdapter" type class_ref 531255 // NfcAdapter
	  param in name "peerLlcpVersion" explicit_type "byte"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 532663 "NfcManager"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "High level manager used to obtain an instance of an {@link NfcAdapter}.
<p>
Use {@link android.content.Context#getSystemService(java.lang.String)}
with {@link Context#NFC_SERVICE} to create an {@link NfcManager},
then call {@link #getDefaultAdapter} to obtain the {@link NfcAdapter}.
<p>
Alternately, you can just call the static helper
{@link NfcAdapter#getDefaultAdapter(android.content.Context)}.

<div class=\"special reference\">
<h3>Developer Guides</h3>
<p>For more information about using NFC, read the
<a href=\"{@docRoot}guide/topics/nfc/index.html\">Near Field Communication</a> developer guide.</p>
</div>

@see Context#getSystemService
@see NfcAdapter#getDefaultAdapter(android.content.Context)"
      classrelation 1412023 // mAdapter (<unidirectional association>)
	relation 1412023 --->
	  a role_name "mAdapter" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1412023 // mAdapter (<unidirectional association>)
	  b parent class_ref 531255 // NfcAdapter
      end

      operation 3652919 "NfcManager"
	public explicit_return_type ""
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 3653047 "getDefaultAdapter"
	public return_type class_ref 531255 // NfcAdapter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the default NFC Adapter for this device.

@return the default NFC Adapter"
      end
    end

    class 532791 "TagLostException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1412663 // <generalisation>
	relation 1412663 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1412663 // <generalisation>
	  b parent class_ref 250167 // IOException
      end

      operation 3655863 "TagLostException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3655991 "TagLostException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 129591 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 532919 "TechListParcel"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " @hide "
      classrelation 1412791 // <realization>
	relation 1412791 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1412791 // <realization>
	  b parent class_ref 137399 // Parcelable
      end

      classrelation 1412919 // mTechLists (<unidirectional association>)
	relation 1412919 --->
	  a role_name "mTechLists" multiplicity "[][]" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1412919 // mTechLists (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      operation 3656119 "TechListParcel"
	public explicit_return_type ""
	nparams 1
	  param inout name "strings" type class_ref 129591 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ... ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3656247 "getTechLists"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3656375 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3656503 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 137527 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 1413047 // CREATOR (<unidirectional association>)
	relation 1413047 --->
	  a role_name "CREATOR" init_value " new Creator<TechListParcel>() {
        @Override
        public TechListParcel createFromParcel(Parcel source) {
            int count = source.readInt();
            String[][] techLists = new String[count][];
            for (int i = 0; i < count; i++) {
                techLists[i] = source.readStringArray();
            }
            return new TechListParcel(techLists);
        }

        @Override
        public TechListParcel[] newArray(int size) {
            return new TechListParcel[size];
        }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TechListParcel> ${name}${value};
"
	    classrelation_ref 1413047 // CREATOR (<unidirectional association>)
	  b parent class_ref 137655 // Creator
      end
    end

    class 533047 "TransceiveResult"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Class used to pipe transceive result from the NFC service.

@hide"
      classrelation 1413175 // <realization>
	relation 1413175 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1413175 // <realization>
	  b parent class_ref 137399 // Parcelable
      end

      attribute 1566007 "RESULT_SUCCESS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1566135 "RESULT_FAILURE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1566263 "RESULT_TAGLOST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1566391 "RESULT_EXCEEDED_LENGTH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1566519 "mResult"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1566647 "mResponseData"
	const_attribute package explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 3656631 "TransceiveResult"
	public explicit_return_type ""
	nparams 2
	  param in name "result" explicit_type "int"
	  param in name "data" explicit_type "byte"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}, final ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3656759 "getResponseOrThrow"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3656887 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 3657015 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 137527 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 1413303 // CREATOR (<unidirectional association>)
	relation 1413303 --->
	  a role_name "CREATOR" init_value "
            new Parcelable.Creator<TransceiveResult>() {
        @Override
        public TransceiveResult createFromParcel(Parcel in) {
            int result = in.readInt();
            byte[] responseData;

            if (result == RESULT_SUCCESS) {
                int responseLength = in.readInt();
                responseData = new byte[responseLength];
                in.readByteArray(responseData);
            } else {
                responseData = null;
            }
            return new TransceiveResult(result, responseData);
        }

        @Override
        public TransceiveResult[] newArray(int size) {
            return new TransceiveResult[size];
        }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TransceiveResult> ${name}${value};
"
	    classrelation_ref 1413303 // CREATOR (<unidirectional association>)
	  b parent class_ref 137655 // Creator
      end
    end
  end

  deploymentview 153399 "nfc"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 336183 "ApduList"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
import java.util.ArrayList;
import java.util.List;
${definition}"
      associated_classes
	class_ref 530231 // ApduList
      end
    end

    artifact 336311 "BeamShareData"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.net.Uri;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.UserHandle;
${definition}"
      associated_classes
	class_ref 530359 // BeamShareData
      end
    end

    artifact 336439 "ErrorCodes"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 530615 // ErrorCodes
      end
      comment "Copyright (C) 2010, The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 336567 "FormatException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 530743 // FormatException
      end
      comment "Copyright (C) 2010, The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 336695 "NdefMessage"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import java.util.Arrays;
import android.os.Parcel;
import android.os.Parcelable;
${definition}"
      associated_classes
	class_ref 530487 // NdefMessage
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 336823 "NdefRecord"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Intent;
import android.net.Uri;
import android.os.Parcel;
import android.os.Parcelable;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
${definition}"
      associated_classes
	class_ref 530871 // NdefRecord
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 336951 "NfcActivityManager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.app.Activity;
import android.app.Application;
import android.content.ContentProvider;
import android.content.Intent;
import android.net.Uri;
import android.nfc.NfcAdapter.ReaderCallback;
import android.os.Binder;
import android.os.Bundle;
import android.os.RemoteException;
import android.os.UserHandle;
import android.util.Log;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
${definition}"
      associated_classes
	class_ref 530999 // NfcActivityManager
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 337079 "NfcAdapter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.HashMap;
import android.annotation.SdkConstant;
import android.annotation.SdkConstant.SdkConstantType;
import android.annotation.SystemApi;
import android.app.Activity;
import android.app.ActivityThread;
import android.app.OnActivityPausedListener;
import android.app.PendingIntent;
import android.content.Context;
import android.content.IntentFilter;
import android.content.pm.IPackageManager;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.nfc.tech.MifareClassic;
import android.nfc.tech.Ndef;
import android.nfc.tech.NfcA;
import android.nfc.tech.NfcF;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.util.Log;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 531255 // NfcAdapter
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 337207 "NfcEvent"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 532407 // NfcEvent
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 337335 "NfcManager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
${definition}"
      associated_classes
	class_ref 532663 // NfcManager
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 337463 "Tag"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.nfc.tech.IsoDep;
import android.nfc.tech.MifareClassic;
import android.nfc.tech.MifareUltralight;
import android.nfc.tech.Ndef;
import android.nfc.tech.NdefFormatable;
import android.nfc.tech.NfcA;
import android.nfc.tech.NfcB;
import android.nfc.tech.NfcBarcode;
import android.nfc.tech.NfcF;
import android.nfc.tech.NfcV;
import android.nfc.tech.TagTechnology;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.RemoteException;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
${definition}"
      associated_classes
	class_ref 532151 // Tag
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 337591 "TagLostException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 532791 // TagLostException
      end
      comment "Copyright (C) 2011, The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 337719 "TechListParcel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
${definition}"
      associated_classes
	class_ref 532919 // TechListParcel
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License"
    end

    artifact 337847 "TransceiveResult"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 533047 // TransceiveResult
      end
      comment "Copyright (C) 2011, The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end

  package_ref 167607 // cardemulation

  package_ref 167735 // tech
end
