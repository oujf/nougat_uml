class LocalVariableInfo
!!!574263.java!!!	LocalVariableInfo(inout method : RopMethod)
        if (method == null) {
            throw new NullPointerException("method == null");
        }

        BasicBlockList blocks = method.getBlocks();
        int maxLabel = blocks.getMaxLabel();

        this.regCount = blocks.getRegCount();
        this.emptySet = new RegisterSpecSet(regCount);
        this.blockStarts = new RegisterSpecSet[maxLabel];
        this.insnAssignments =
            new HashMap<Insn, RegisterSpec>(blocks.getInstructionCount());

        emptySet.setImmutable();
!!!574391.java!!!	setStarts(in label : int, inout specs : RegisterSpecSet) : void
        throwIfImmutable();

        if (specs == null) {
            throw new NullPointerException("specs == null");
        }

        try {
            blockStarts[label] = specs;
        } catch (ArrayIndexOutOfBoundsException ex) {
            // Translate the exception.
            throw new IllegalArgumentException("bogus label");
        }
!!!574519.java!!!	mergeStarts(in label : int, inout specs : RegisterSpecSet) : boolean
        RegisterSpecSet start = getStarts0(label);
        boolean changed = false;

        if (start == null) {
            setStarts(label, specs);
            return true;
        }

        RegisterSpecSet newStart = start.mutableCopy();
        newStart.intersect(specs, true);

        if (start.equals(newStart)) {
            return false;
        }

        newStart.setImmutable();
        setStarts(label, newStart);

        return true;
!!!574647.java!!!	getStarts(in label : int) : RegisterSpecSet
        RegisterSpecSet result = getStarts0(label);

        return (result != null) ? result : emptySet;
!!!574775.java!!!	getStarts(inout block : BasicBlock) : RegisterSpecSet
        return getStarts(block.getLabel());
!!!574903.java!!!	mutableCopyOfStarts(in label : int) : RegisterSpecSet
        RegisterSpecSet result = getStarts0(label);

        return (result != null) ?
            result.mutableCopy() : new RegisterSpecSet(regCount);
!!!575031.java!!!	addAssignment(inout insn : Insn, inout spec : RegisterSpec) : void
        throwIfImmutable();

        if (insn == null) {
            throw new NullPointerException("insn == null");
        }

        if (spec == null) {
            throw new NullPointerException("spec == null");
        }

        insnAssignments.put(insn, spec);
!!!575159.java!!!	getAssignment(inout insn : Insn) : RegisterSpec
        return insnAssignments.get(insn);
!!!575287.java!!!	getAssignmentCount() : int
        return insnAssignments.size();
!!!575415.java!!!	debugDump() : void
        for (int label = 0 ; label < blockStarts.length; label++) {
            if (blockStarts[label] == null) {
                continue;
            }

            if (blockStarts[label] == emptySet) {
                System.out.printf("%04x: empty set\n", label);
            } else {
                System.out.printf("%04x: %s\n", label, blockStarts[label]);
            }
        }
!!!575543.java!!!	getStarts0(in label : int) : RegisterSpecSet
        try {
            return blockStarts[label];
        } catch (ArrayIndexOutOfBoundsException ex) {
            // Translate the exception.
            throw new IllegalArgumentException("bogus label");
        }
