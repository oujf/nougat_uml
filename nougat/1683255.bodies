class RemoteConnection
!!!34386871.java!!!	RemoteConnection(inout id : String, inout connectionService : IConnectionService, inout request : ConnectionRequest)
        mConnectionId = id;
        mConnectionService = connectionService;
        mConnected = true;
        mState = Connection.STATE_INITIALIZING;
!!!34386999.java!!!	RemoteConnection(inout callId : String, inout connectionService : IConnectionService, inout connection : ParcelableConnection)
        mConnectionId = callId;
        mConnectionService = connectionService;
        mConnected = true;
        mState = connection.getState();
        mDisconnectCause = connection.getDisconnectCause();
        mRingbackRequested = connection.isRingbackRequested();
        mConnectionCapabilities = connection.getConnectionCapabilities();
        mConnectionProperties = connection.getConnectionProperties();
        mVideoState = connection.getVideoState();
        mVideoProvider = new RemoteConnection.VideoProvider(connection.getVideoProvider());
        mIsVoipAudioMode = connection.getIsVoipAudioMode();
        mStatusHints = connection.getStatusHints();
        mAddress = connection.getHandle();
        mAddressPresentation = connection.getHandlePresentation();
        mCallerDisplayName = connection.getCallerDisplayName();
        mCallerDisplayNamePresentation = connection.getCallerDisplayNamePresentation();
        mConference = null;
!!!34387127.java!!!	RemoteConnection(inout disconnectCause : DisconnectCause)
        mConnectionId = "NULL";
        mConnected = false;
        mState = Connection.STATE_DISCONNECTED;
        mDisconnectCause = disconnectCause;
!!!34387255.java!!!	registerCallback(inout callback : RemoteConnection::Callback) : void
        registerCallback(callback, new Handler());
!!!34387383.java!!!	registerCallback(inout callback : RemoteConnection::Callback, inout handler : Handler) : void
        unregisterCallback(callback);
        if (callback != null && handler != null) {
            mCallbackRecords.add(new CallbackRecord(callback, handler));
        }
!!!34387511.java!!!	unregisterCallback(inout callback : RemoteConnection::Callback) : void
        if (callback != null) {
            for (CallbackRecord record : mCallbackRecords) {
                if (record.getCallback() == callback) {
                    mCallbackRecords.remove(record);
                    break;
                }
            }
        }
!!!34387639.java!!!	getState() : int
        return mState;
!!!34387767.java!!!	getDisconnectCause() : DisconnectCause
        return mDisconnectCause;
!!!34387895.java!!!	getConnectionCapabilities() : int
        return mConnectionCapabilities;
!!!34388023.java!!!	getConnectionProperties() : int
        return mConnectionProperties;
!!!34388151.java!!!	isVoipAudioMode() : boolean
        return mIsVoipAudioMode;
!!!34388279.java!!!	getStatusHints() : StatusHints
        return mStatusHints;
!!!34388407.java!!!	getAddress() : Uri
        return mAddress;
!!!34388535.java!!!	getAddressPresentation() : int
        return mAddressPresentation;
!!!34388663.java!!!	getCallerDisplayName() : CharSequence
        return mCallerDisplayName;
!!!34388791.java!!!	getCallerDisplayNamePresentation() : int
        return mCallerDisplayNamePresentation;
!!!34388919.java!!!	getVideoState() : int
        return mVideoState;
!!!34389047.java!!!	getVideoProvider() : RemoteConnection::VideoProvider
        return mVideoProvider;
!!!34389175.java!!!	getExtras() : Bundle
        return mExtras;
!!!34389303.java!!!	isRingbackRequested() : boolean
        return mRingbackRequested;
!!!34389431.java!!!	abort() : void
        try {
            if (mConnected) {
                mConnectionService.abort(mConnectionId);
            }
        } catch (RemoteException ignored) {
        }
!!!34389559.java!!!	answer() : void
        try {
            if (mConnected) {
                mConnectionService.answer(mConnectionId);
            }
        } catch (RemoteException ignored) {
        }
!!!34389687.java!!!	answer(in videoState : int) : void
        try {
            if (mConnected) {
                mConnectionService.answerVideo(mConnectionId, videoState);
            }
        } catch (RemoteException ignored) {
        }
!!!34389815.java!!!	reject() : void
        try {
            if (mConnected) {
                mConnectionService.reject(mConnectionId);
            }
        } catch (RemoteException ignored) {
        }
!!!34389943.java!!!	hold() : void
        try {
            if (mConnected) {
                mConnectionService.hold(mConnectionId);
            }
        } catch (RemoteException ignored) {
        }
!!!34390071.java!!!	unhold() : void
        try {
            if (mConnected) {
                mConnectionService.unhold(mConnectionId);
            }
        } catch (RemoteException ignored) {
        }
!!!34390199.java!!!	disconnect() : void
        try {
            if (mConnected) {
                mConnectionService.disconnect(mConnectionId);
            }
        } catch (RemoteException ignored) {
        }
!!!34390327.java!!!	playDtmfTone(in digit : char) : void
        try {
            if (mConnected) {
                mConnectionService.playDtmfTone(mConnectionId, digit);
            }
        } catch (RemoteException ignored) {
        }
!!!34390455.java!!!	stopDtmfTone() : void
        try {
            if (mConnected) {
                mConnectionService.stopDtmfTone(mConnectionId);
            }
        } catch (RemoteException ignored) {
        }
!!!34390583.java!!!	postDialContinue(inout proceed : boolean) : void
        try {
            if (mConnected) {
                mConnectionService.onPostDialContinue(mConnectionId, proceed);
            }
        } catch (RemoteException ignored) {
        }
!!!34390711.java!!!	pullExternalCall() : void
        try {
            if (mConnected) {
                mConnectionService.pullExternalCall(mConnectionId);
            }
        } catch (RemoteException ignored) {
        }
!!!34390839.java!!!	setAudioState(inout state : AudioState) : void
        setCallAudioState(new CallAudioState(state));
!!!34390967.java!!!	setCallAudioState(inout state : CallAudioState) : void
        try {
            if (mConnected) {
                mConnectionService.onCallAudioStateChanged(mConnectionId, state);
            }
        } catch (RemoteException ignored) {
        }
!!!34391095.java!!!	getConferenceableConnections() : RemoteConnection
        return mUnmodifiableconferenceableConnections;
!!!34391223.java!!!	getConference() : RemoteConference
        return mConference;
!!!34391351.java!!!	getId() : String
        return mConnectionId;
!!!34391479.java!!!	getConnectionService() : IConnectionService
        return mConnectionService;
!!!34391607.java!!!	setState(in state : int) : void
        if (mState != state) {
            mState = state;
            for (CallbackRecord record: mCallbackRecords) {
                final RemoteConnection connection = this;
                final Callback callback = record.getCallback();
                record.getHandler().post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onStateChanged(connection, state);
                    }
                });
            }
        }
!!!34391735.java!!!	setDisconnected(in disconnectCause : DisconnectCause) : void
        if (mState != Connection.STATE_DISCONNECTED) {
            mState = Connection.STATE_DISCONNECTED;
            mDisconnectCause = disconnectCause;

            for (CallbackRecord record : mCallbackRecords) {
                final RemoteConnection connection = this;
                final Callback callback = record.getCallback();
                record.getHandler().post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onDisconnected(connection, disconnectCause);
                    }
                });
            }
        }
!!!34391863.java!!!	setRingbackRequested(in ringback : boolean) : void
        if (mRingbackRequested != ringback) {
            mRingbackRequested = ringback;
            for (CallbackRecord record : mCallbackRecords) {
                final RemoteConnection connection = this;
                final Callback callback = record.getCallback();
                record.getHandler().post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onRingbackRequested(connection, ringback);
                    }
                });
            }
        }
!!!34391991.java!!!	setConnectionCapabilities(in connectionCapabilities : int) : void
        mConnectionCapabilities = connectionCapabilities;
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onConnectionCapabilitiesChanged(connection, connectionCapabilities);
                }
            });
        }
!!!34392119.java!!!	setConnectionProperties(in connectionProperties : int) : void
        mConnectionProperties = connectionProperties;
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onConnectionPropertiesChanged(connection, connectionProperties);
                }
            });
        }
!!!34392247.java!!!	setDestroyed() : void
        if (!mCallbackRecords.isEmpty()) {
            // Make sure that the callbacks are notified that the call is destroyed first.
            if (mState != Connection.STATE_DISCONNECTED) {
                setDisconnected(
                        new DisconnectCause(DisconnectCause.ERROR, "Connection destroyed."));
            }

            for (CallbackRecord record : mCallbackRecords) {
                final RemoteConnection connection = this;
                final Callback callback = record.getCallback();
                record.getHandler().post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onDestroyed(connection);
                    }
                });
            }
            mCallbackRecords.clear();

            mConnected = false;
        }
!!!34392375.java!!!	setPostDialWait(in remainingDigits : String) : void
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onPostDialWait(connection, remainingDigits);
                }
            });
        }
!!!34392503.java!!!	onPostDialChar(in nextChar : char) : void
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onPostDialChar(connection, nextChar);
                }
            });
        }
!!!34392631.java!!!	setVideoState(in videoState : int) : void
        mVideoState = videoState;
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onVideoStateChanged(connection, videoState);
                }
            });
        }
!!!34392759.java!!!	setVideoProvider(in videoProvider : RemoteConnection::VideoProvider) : void
        mVideoProvider = videoProvider;
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onVideoProviderChanged(connection, videoProvider);
                }
            });
        }
!!!34392887.java!!!	setIsVoipAudioMode(in isVoip : boolean) : void
        mIsVoipAudioMode = isVoip;
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onVoipAudioChanged(connection, isVoip);
                }
            });
        }
!!!34393015.java!!!	setStatusHints(in statusHints : StatusHints) : void
        mStatusHints = statusHints;
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onStatusHintsChanged(connection, statusHints);
                }
            });
        }
!!!34393143.java!!!	setAddress(in address : Uri, in presentation : int) : void
        mAddress = address;
        mAddressPresentation = presentation;
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onAddressChanged(connection, address, presentation);
                }
            });
        }
!!!34393271.java!!!	setCallerDisplayName(in callerDisplayName : String, in presentation : int) : void
        mCallerDisplayName = callerDisplayName;
        mCallerDisplayNamePresentation = presentation;
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onCallerDisplayNameChanged(
                            connection, callerDisplayName, presentation);
                }
            });
        }
!!!34393399.java!!!	setConferenceableConnections(in conferenceableConnections : List<RemoteConnection>) : void
        mConferenceableConnections.clear();
        mConferenceableConnections.addAll(conferenceableConnections);
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onConferenceableConnectionsChanged(
                            connection, mUnmodifiableconferenceableConnections);
                }
            });
        }
!!!34393527.java!!!	setConference(in conference : RemoteConference) : void
        if (mConference != conference) {
            mConference = conference;
            for (CallbackRecord record : mCallbackRecords) {
                final RemoteConnection connection = this;
                final Callback callback = record.getCallback();
                record.getHandler().post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onConferenceChanged(connection, conference);
                    }
                });
            }
        }
!!!34393655.java!!!	putExtras(in extras : Bundle) : void
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putAll(extras);

        notifyExtrasChanged();
!!!34393783.java!!!	removeExtras(inout keys : List<String>) : void
        if (mExtras == null || keys == null || keys.isEmpty()) {
            return;
        }
        for (String key : keys) {
            mExtras.remove(key);
        }

        notifyExtrasChanged();
!!!34393911.java!!!	notifyExtrasChanged() : void
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onExtrasChanged(connection, mExtras);
                }
            });
        }
!!!34394039.java!!!	onConnectionEvent(in event : String, in extras : Bundle) : void
        for (CallbackRecord record : mCallbackRecords) {
            final RemoteConnection connection = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onConnectionEvent(connection, event, extras);
                }
            });
        }
!!!34394167.java!!!	failure(inout disconnectCause : DisconnectCause) : RemoteConnection
        return new RemoteConnection(disconnectCause);
