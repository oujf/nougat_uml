class RemoteConference
!!!34377783.java!!!	RemoteConference(inout id : String, inout connectionService : IConnectionService)
        mId = id;
        mConnectionService = connectionService;
!!!34377911.java!!!	getId() : String
        return mId;
!!!34378039.java!!!	setDestroyed() : void
        for (RemoteConnection connection : mChildConnections) {
            connection.setConference(null);
        }
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final RemoteConference conference = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onDestroyed(conference);
                }
            });
        }
!!!34378167.java!!!	setState(in newState : int) : void
        if (newState != Connection.STATE_ACTIVE &&
                newState != Connection.STATE_HOLDING &&
                newState != Connection.STATE_DISCONNECTED) {
            Log.w(this, "Unsupported state transition for Conference call.",
                    Connection.stateToString(newState));
            return;
        }

        if (mState != newState) {
            final int oldState = mState;
            mState = newState;
            for (CallbackRecord<Callback> record : mCallbackRecords) {
                final RemoteConference conference = this;
                final Callback callback = record.getCallback();
                record.getHandler().post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onStateChanged(conference, oldState, newState);
                    }
                });
            }
        }
!!!34378295.java!!!	addConnection(in connection : RemoteConnection) : void
        if (!mChildConnections.contains(connection)) {
            mChildConnections.add(connection);
            connection.setConference(this);
            for (CallbackRecord<Callback> record : mCallbackRecords) {
                final RemoteConference conference = this;
                final Callback callback = record.getCallback();
                record.getHandler().post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onConnectionAdded(conference, connection);
                    }
                });
            }
        }
!!!34378423.java!!!	removeConnection(in connection : RemoteConnection) : void
        if (mChildConnections.contains(connection)) {
            mChildConnections.remove(connection);
            connection.setConference(null);
            for (CallbackRecord<Callback> record : mCallbackRecords) {
                final RemoteConference conference = this;
                final Callback callback = record.getCallback();
                record.getHandler().post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onConnectionRemoved(conference, connection);
                    }
                });
            }
        }
!!!34378551.java!!!	setConnectionCapabilities(in connectionCapabilities : int) : void
        if (mConnectionCapabilities != connectionCapabilities) {
            mConnectionCapabilities = connectionCapabilities;
            for (CallbackRecord<Callback> record : mCallbackRecords) {
                final RemoteConference conference = this;
                final Callback callback = record.getCallback();
                record.getHandler().post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onConnectionCapabilitiesChanged(
                                conference, mConnectionCapabilities);
                    }
                });
            }
        }
!!!34378679.java!!!	setConnectionProperties(in connectionProperties : int) : void
        if (mConnectionProperties != connectionProperties) {
            mConnectionProperties = connectionProperties;
            for (CallbackRecord<Callback> record : mCallbackRecords) {
                final RemoteConference conference = this;
                final Callback callback = record.getCallback();
                record.getHandler().post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onConnectionPropertiesChanged(
                                conference, mConnectionProperties);
                    }
                });
            }
        }
!!!34378807.java!!!	setConferenceableConnections(inout conferenceableConnections : List<RemoteConnection>) : void
        mConferenceableConnections.clear();
        mConferenceableConnections.addAll(conferenceableConnections);
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final RemoteConference conference = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onConferenceableConnectionsChanged(
                            conference, mUnmodifiableConferenceableConnections);
                }
            });
        }
!!!34378935.java!!!	setDisconnected(in disconnectCause : DisconnectCause) : void
        if (mState != Connection.STATE_DISCONNECTED) {
            mDisconnectCause = disconnectCause;
            setState(Connection.STATE_DISCONNECTED);
            for (CallbackRecord<Callback> record : mCallbackRecords) {
                final RemoteConference conference = this;
                final Callback callback = record.getCallback();
                record.getHandler().post(new Runnable() {
                    @Override
                    public void run() {
                        callback.onDisconnected(conference, disconnectCause);
                    }
                });
            }
        }
!!!34379063.java!!!	putExtras(in extras : Bundle) : void
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putAll(extras);

        notifyExtrasChanged();
!!!34379191.java!!!	removeExtras(inout keys : List<String>) : void
        if (mExtras == null || keys == null || keys.isEmpty()) {
            return;
        }
        for (String key : keys) {
            mExtras.remove(key);
        }

        notifyExtrasChanged();
!!!34379319.java!!!	notifyExtrasChanged() : void
        for (CallbackRecord<Callback> record : mCallbackRecords) {
            final RemoteConference conference = this;
            final Callback callback = record.getCallback();
            record.getHandler().post(new Runnable() {
                @Override
                public void run() {
                    callback.onExtrasChanged(conference, mExtras);
                }
            });
        }
!!!34379447.java!!!	getConnections() : RemoteConnection
        return mUnmodifiableChildConnections;
!!!34379575.java!!!	getState() : int
        return mState;
!!!34379703.java!!!	getConnectionCapabilities() : int
        return mConnectionCapabilities;
!!!34379831.java!!!	getConnectionProperties() : int
        return mConnectionProperties;
!!!34379959.java!!!	getExtras() : Bundle
        return mExtras;
!!!34380087.java!!!	disconnect() : void
        try {
            mConnectionService.disconnect(mId);
        } catch (RemoteException e) {
        }
!!!34380215.java!!!	separate(inout connection : RemoteConnection) : void
        if (mChildConnections.contains(connection)) {
            try {
                mConnectionService.splitFromConference(connection.getId());
            } catch (RemoteException e) {
            }
        }
!!!34380343.java!!!	merge() : void
        try {
            mConnectionService.mergeConference(mId);
        } catch (RemoteException e) {
        }
!!!34380471.java!!!	swap() : void
        try {
            mConnectionService.swapConference(mId);
        } catch (RemoteException e) {
        }
!!!34380599.java!!!	hold() : void
        try {
            mConnectionService.hold(mId);
        } catch (RemoteException e) {
        }
!!!34380727.java!!!	unhold() : void
        try {
            mConnectionService.unhold(mId);
        } catch (RemoteException e) {
        }
!!!34380855.java!!!	getDisconnectCause() : DisconnectCause
        return mDisconnectCause;
!!!34380983.java!!!	playDtmfTone(in digit : char) : void
        try {
            mConnectionService.playDtmfTone(mId, digit);
        } catch (RemoteException e) {
        }
!!!34381111.java!!!	stopDtmfTone() : void
        try {
            mConnectionService.stopDtmfTone(mId);
        } catch (RemoteException e) {
        }
!!!34381239.java!!!	setAudioState(inout state : AudioState) : void
        setCallAudioState(new CallAudioState(state));
!!!34381367.java!!!	setCallAudioState(inout state : CallAudioState) : void
        try {
            mConnectionService.onCallAudioStateChanged(mId, state);
        } catch (RemoteException e) {
        }
!!!34381495.java!!!	getConferenceableConnections() : RemoteConnection
        return mUnmodifiableConferenceableConnections;
!!!34381623.java!!!	registerCallback(inout callback : RemoteConference::Callback) : void
        registerCallback(callback, new Handler());
!!!34381751.java!!!	registerCallback(inout callback : RemoteConference::Callback, inout handler : Handler) : void
        unregisterCallback(callback);
        if (callback != null && handler != null) {
            mCallbackRecords.add(new CallbackRecord(callback, handler));
        }
!!!34381879.java!!!	unregisterCallback(inout callback : RemoteConference::Callback) : void
        if (callback != null) {
            for (CallbackRecord<Callback> record : mCallbackRecords) {
                if (record.getCallback() == callback) {
                    mCallbackRecords.remove(record);
                    break;
                }
            }
        }
