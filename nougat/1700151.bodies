class MoreAsserts
!!!34605879.java!!!	assertAssignableFrom(inout expected : Class, inout actual : Object) : void
        assertAssignableFrom(expected, actual.getClass());
!!!34606007.java!!!	assertAssignableFrom(inout expected : Class, inout actual : Class) : void
        Assert.assertTrue(
                "Expected " + expected.getCanonicalName() +
                        " to be assignable from actual class " + actual.getCanonicalName(),
                expected.isAssignableFrom(actual));
!!!34606135.java!!!	assertNotEqual(inout message : String, inout unexpected : Object, inout actual : Object) : void
        if (equal(unexpected, actual)) {
            failEqual(message, unexpected);
        }
!!!34606263.java!!!	assertNotEqual(inout unexpected : Object, inout actual : Object) : void
        assertNotEqual(null, unexpected, actual);
!!!34606391.java!!!	assertEquals(inout message : String, inout expected : byte, inout actual : byte) : void
        if (expected.length != actual.length) {
            failWrongLength(message, expected.length, actual.length);
        }
        for (int i = 0; i < expected.length; i++) {
            if (expected[i] != actual[i]) {
                failWrongElement(message, i, expected[i], actual[i]);
            }
        }
!!!34606519.java!!!	assertEquals(inout expected : byte, inout actual : byte) : void
        assertEquals(null, expected, actual);
!!!34606647.java!!!	assertEquals(inout message : String, inout expected : int, inout actual : int) : void
        if (expected.length != actual.length) {
            failWrongLength(message, expected.length, actual.length);
        }
        for (int i = 0; i < expected.length; i++) {
            if (expected[i] != actual[i]) {
                failWrongElement(message, i, expected[i], actual[i]);
            }
        }
!!!34606775.java!!!	assertEquals(inout expected : int, inout actual : int) : void
        assertEquals(null, expected, actual);
!!!34606903.java!!!	assertEquals(inout message : String, inout expected : long, inout actual : long) : void
        if (expected.length != actual.length) {
            failWrongLength(message, expected.length, actual.length);
        }
        for (int i = 0; i < expected.length; i++) {
            if (expected[i] != actual[i]) {
                failWrongElement(message, i, expected[i], actual[i]);
            }
        }
!!!34607031.java!!!	assertEquals(inout expected : long, inout actual : long) : void
        assertEquals(null, expected, actual);
!!!34607159.java!!!	assertEquals(inout message : String, inout expected : double, inout actual : double) : void
        if (expected.length != actual.length) {
            failWrongLength(message, expected.length, actual.length);
        }
        for (int i = 0; i < expected.length; i++) {
            if (expected[i] != actual[i]) {
                failWrongElement(message, i, expected[i], actual[i]);
            }
        }
!!!34607287.java!!!	assertEquals(inout expected : double, inout actual : double) : void
        assertEquals(null, expected, actual);
!!!34607415.java!!!	assertEquals(inout message : String, inout expected : Object, inout actual : Object) : void
        if (expected.length != actual.length) {
            failWrongLength(message, expected.length, actual.length);
        }
        for (int i = 0; i < expected.length; i++) {
            Object exp = expected[i];
            Object act = actual[i];
            // The following borrowed from java.util.equals(Object[], Object[]).
            if (!((exp==null) ? act==null : exp.equals(act))) {
                failWrongElement(message, i, exp, act);
            }
        }
!!!34607543.java!!!	assertEquals(inout expected : Object, inout actual : Object) : void
        assertEquals(null, expected, actual);
!!!34607671.java!!!	assertEquals(inout message : String, inout expected : Set<? extends Object>, inout actual : Set<? extends Object>) : void
        Set<Object> onlyInExpected = new HashSet<Object>(expected);
        onlyInExpected.removeAll(actual);
        Set<Object> onlyInActual = new HashSet<Object>(actual);
        onlyInActual.removeAll(expected);
        if (onlyInExpected.size() != 0 || onlyInActual.size() != 0) {
            Set<Object> intersection = new HashSet<Object>(expected);
            intersection.retainAll(actual);
            failWithMessage(
                    message,
                    "Sets do not match.\nOnly in expected: " + onlyInExpected
                    + "\nOnly in actual: " + onlyInActual
                    + "\nIntersection: " + intersection);
        }
!!!34607799.java!!!	assertEquals(inout expected : Set<? extends Object>, inout actual : Set<? extends Object>) : void
        assertEquals(null, expected, actual);
!!!34607927.java!!!	assertMatchesRegex(inout message : String, inout expectedRegex : String, inout actual : String) : MatchResult
        if (actual == null) {
            failNotMatches(message, expectedRegex, actual);
        }
        Matcher matcher = getMatcher(expectedRegex, actual);
        if (!matcher.matches()) {
            failNotMatches(message, expectedRegex, actual);
        }
        return matcher;
!!!34608055.java!!!	assertMatchesRegex(inout expectedRegex : String, inout actual : String) : MatchResult
        return assertMatchesRegex(null, expectedRegex, actual);
!!!34608183.java!!!	assertContainsRegex(inout message : String, inout expectedRegex : String, inout actual : String) : MatchResult
        if (actual == null) {
            failNotContains(message, expectedRegex, actual);
        }
        Matcher matcher = getMatcher(expectedRegex, actual);
        if (!matcher.find()) {
            failNotContains(message, expectedRegex, actual);
        }
        return matcher;
!!!34608311.java!!!	assertContainsRegex(inout expectedRegex : String, inout actual : String) : MatchResult
        return assertContainsRegex(null, expectedRegex, actual);
!!!34608439.java!!!	assertNotMatchesRegex(inout message : String, inout expectedRegex : String, inout actual : String) : void
        Matcher matcher = getMatcher(expectedRegex, actual);
        if (matcher.matches()) {
            failMatch(message, expectedRegex, actual);
        }
!!!34608567.java!!!	assertNotMatchesRegex(inout expectedRegex : String, inout actual : String) : void
        assertNotMatchesRegex(null, expectedRegex, actual);
!!!34608695.java!!!	assertNotContainsRegex(inout message : String, inout expectedRegex : String, inout actual : String) : void
        Matcher matcher = getMatcher(expectedRegex, actual);
        if (matcher.find()) {
            failContains(message, expectedRegex, actual);
        }
!!!34608823.java!!!	assertNotContainsRegex(inout expectedRegex : String, inout actual : String) : void
        assertNotContainsRegex(null, expectedRegex, actual);
!!!34608951.java!!!	assertContentsInOrder(inout message : String, inout actual : Iterable<?>, inout  : Object...expected) : void
        ArrayList actualList = new ArrayList();
        for (Object o : actual) {
            actualList.add(o);
        }
        Assert.assertEquals(message, Arrays.asList(expected), actualList);
!!!34609079.java!!!	assertContentsInOrder(inout actual : Iterable<?>, inout  : Object...expected) : void
        assertContentsInOrder((String) null, actual, expected);
!!!34609207.java!!!	assertContentsInAnyOrder(inout message : String, inout actual : Iterable<?>, inout  : Object...expected) : void
        HashMap<Object, Object> expectedMap = new HashMap<Object, Object>(expected.length);
        for (Object expectedObj : expected) {
            expectedMap.put(expectedObj, expectedObj);
        }

        for (Object actualObj : actual) {
            if (expectedMap.remove(actualObj) == null) {
                failWithMessage(message, "Extra object in actual: (" + actualObj.toString() + ")");
            }
        }

        if (expectedMap.size() > 0) {
            failWithMessage(message, "Extra objects in expected.");
        }
!!!34609335.java!!!	assertContentsInAnyOrder(inout actual : Iterable<?>, inout  : Object...expected) : void
        assertContentsInAnyOrder((String)null, actual, expected);
!!!34609463.java!!!	assertEmpty(inout message : String, inout iterable : Iterable<?>) : void
        if (iterable.iterator().hasNext()) {
            failNotEmpty(message, iterable.toString());
        }
!!!34609591.java!!!	assertEmpty(inout iterable : Iterable<?>) : void
        assertEmpty(null, iterable);
!!!34609719.java!!!	assertEmpty(inout message : String, inout map : Map<?,?>) : void
        if (!map.isEmpty()) {
            failNotEmpty(message, map.toString());
        }
!!!34609847.java!!!	assertEmpty(inout map : Map<?,?>) : void
        assertEmpty(null, map);
!!!34609975.java!!!	assertNotEmpty(inout message : String, inout iterable : Iterable<?>) : void
        if (!iterable.iterator().hasNext()) {
            failEmpty(message);
        }
!!!34610103.java!!!	assertNotEmpty(inout iterable : Iterable<?>) : void
        assertNotEmpty(null, iterable);
!!!34610231.java!!!	assertNotEmpty(inout message : String, inout map : Map<?,?>) : void
        if (map.isEmpty()) {
            failEmpty(message);
        }
!!!34610359.java!!!	assertNotEmpty(inout map : Map<?,?>) : void
        assertNotEmpty(null, map);
!!!34610487.java!!!	checkEqualsAndHashCodeMethods(inout message : String, inout lhs : Object, inout rhs : Object, inout expectedResult : boolean) : void

        if ((lhs == null) && (rhs == null)) {
            Assert.assertTrue(
                    "Your check is dubious...why would you expect null != null?",
                    expectedResult);
            return;
        }

        if ((lhs == null) || (rhs == null)) {
            Assert.assertFalse(
                    "Your check is dubious...why would you expect an object "
                            + "to be equal to null?", expectedResult);
        }

        if (lhs != null) {
            Assert.assertEquals(message, expectedResult, lhs.equals(rhs));
        }
        if (rhs != null) {
            Assert.assertEquals(message, expectedResult, rhs.equals(lhs));
        }

        if (expectedResult) {
            String hashMessage =
                    "hashCode() values for equal objects should be the same";
            if (message != null) {
                hashMessage += ": " + message;
            }
            Assert.assertTrue(hashMessage, lhs.hashCode() == rhs.hashCode());
        }
!!!34610615.java!!!	checkEqualsAndHashCodeMethods(inout lhs : Object, inout rhs : Object, inout expectedResult : boolean) : void
        checkEqualsAndHashCodeMethods((String) null, lhs, rhs, expectedResult);
!!!34610743.java!!!	getMatcher(inout expectedRegex : String, inout actual : String) : Matcher
        Pattern pattern = Pattern.compile(expectedRegex);
        return pattern.matcher(actual);
!!!34610871.java!!!	failEqual(inout message : String, inout unexpected : Object) : void
        failWithMessage(message, "expected not to be:<" + unexpected + ">");
!!!34610999.java!!!	failWrongLength(inout message : String, in expected : int, in actual : int) : void
        failWithMessage(message, "expected array length:<" + expected
                + "> but was:<" + actual + '>');
!!!34611127.java!!!	failWrongElement(inout message : String, in index : int, inout expected : Object, inout actual : Object) : void
        failWithMessage(message, "expected array element[" + index + "]:<"
                + expected + "> but was:<" + actual + '>');
!!!34611255.java!!!	failNotMatches(inout message : String, inout expectedRegex : String, inout actual : String) : void
        String actualDesc = (actual == null) ? "null" : ('<' + actual + '>');
        failWithMessage(message, "expected to match regex:<" + expectedRegex
                + "> but was:" + actualDesc);
!!!34611383.java!!!	failNotContains(inout message : String, inout expectedRegex : String, inout actual : String) : void
        String actualDesc = (actual == null) ? "null" : ('<' + actual + '>');
        failWithMessage(message, "expected to contain regex:<" + expectedRegex
                + "> but was:" + actualDesc);
!!!34611511.java!!!	failMatch(inout message : String, inout expectedRegex : String, inout actual : String) : void
        failWithMessage(message, "expected not to match regex:<" + expectedRegex
                + "> but was:<" + actual + '>');
!!!34611639.java!!!	failContains(inout message : String, inout expectedRegex : String, inout actual : String) : void
        failWithMessage(message, "expected not to contain regex:<" + expectedRegex
                + "> but was:<" + actual + '>');
!!!34611767.java!!!	failNotEmpty(inout message : String, inout actual : String) : void
        failWithMessage(message, "expected to be empty, but contained: <"
                + actual + ">");
!!!34611895.java!!!	failEmpty(inout message : String) : void
        failWithMessage(message, "expected not to be empty, but was");
!!!34612023.java!!!	failWithMessage(inout userMessage : String, inout ourMessage : String) : void
        Assert.fail((userMessage == null)
                ? ourMessage
                : userMessage + ' ' + ourMessage);
!!!34612151.java!!!	equal(inout a : Object, inout b : Object) : boolean
        return a == b || (a != null && a.equals(b));
