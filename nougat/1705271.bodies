class TestCaseClassLoader
!!!34652087.java!!!	TestCaseClassLoader()
        this(System.getProperty("java.class.path"));
!!!34652215.java!!!	TestCaseClassLoader(inout classPath : String)
        scanPath(classPath);
        readExcludedPackages();
!!!34652343.java!!!	scanPath(inout classPath : String) : void
        String separator= System.getProperty("path.separator");
        fPathItems= new Vector(10);
        StringTokenizer st= new StringTokenizer(classPath, separator);
        while (st.hasMoreTokens()) {
            fPathItems.addElement(st.nextToken());
        }
!!!34652471.java!!!	getResource(inout name : String) : URL
        return ClassLoader.getSystemResource(name);
!!!34652599.java!!!	getResourceAsStream(inout name : String) : InputStream
        return ClassLoader.getSystemResourceAsStream(name);
!!!34652727.java!!!	isExcluded(inout name : String) : boolean
        for (int i= 0; i < fExcluded.size(); i++) {
            if (name.startsWith((String) fExcluded.elementAt(i))) {
                return true;
            }
        }
        return false;
!!!34652855.java!!!	loadClass(inout name : String, inout resolve : boolean) : Class

        Class c= findLoadedClass(name);
        if (c != null)
            return c;
        //
        // Delegate the loading of excluded classes to the
        // standard class loader.
        //
        if (isExcluded(name)) {
            try {
                c= findSystemClass(name);
                return c;
            } catch (ClassNotFoundException e) {
                // keep searching
            }
        }
        if (c == null) {
            byte[] data= lookupClassData(name);
            if (data == null)
                throw new ClassNotFoundException();
            c= defineClass(name, data, 0, data.length);
        }
        if (resolve)
            resolveClass(c);
        return c;
!!!34652983.java!!!	lookupClassData(inout className : String) : byte
        byte[] data= null;
        for (int i= 0; i < fPathItems.size(); i++) {
            String path= (String) fPathItems.elementAt(i);
            String fileName= className.replace('.', '/')+".class";
            if (isJar(path)) {
                data= loadJarData(path, fileName);
            } else {
                data= loadFileData(path, fileName);
            }
            if (data != null)
                return data;
        }
        throw new ClassNotFoundException(className);
!!!34653111.java!!!	isJar(inout pathEntry : String) : boolean
        return pathEntry.endsWith(".jar") ||
                pathEntry.endsWith(".apk") ||
                pathEntry.endsWith(".zip");
!!!34653239.java!!!	loadFileData(inout path : String, inout fileName : String) : byte
        File file= new File(path, fileName);
        if (file.exists()) {
            return getClassData(file);
        }
        return null;
!!!34653367.java!!!	getClassData(inout f : File) : byte
        try {
            FileInputStream stream= new FileInputStream(f);
            ByteArrayOutputStream out= new ByteArrayOutputStream(1000);
            byte[] b= new byte[1000];
            int n;
            while ((n= stream.read(b)) != -1)
                out.write(b, 0, n);
            stream.close();
            out.close();
            return out.toByteArray();

        } catch (IOException e) {
        }
        return null;
!!!34653495.java!!!	loadJarData(inout path : String, inout fileName : String) : byte
        ZipFile zipFile= null;
        InputStream stream= null;
        File archive= new File(path);
        if (!archive.exists())
            return null;
        try {
            zipFile= new ZipFile(archive);
        } catch(IOException io) {
            return null;
        }
        ZipEntry entry= zipFile.getEntry(fileName);
        if (entry == null)
            return null;
        int size= (int) entry.getSize();
        try {
            stream= zipFile.getInputStream(entry);
            byte[] data= new byte[size];
            int pos= 0;
            while (pos < size) {
                int n= stream.read(data, pos, data.length - pos);
                pos += n;
            }
            zipFile.close();
            return data;
        } catch (IOException e) {
        } finally {
            try {
                if (stream != null)
                    stream.close();
            } catch (IOException e) {
            }
        }
        return null;
!!!34653623.java!!!	readExcludedPackages() : void
        fExcluded= new Vector(10);
        for (int i= 0; i < defaultExclusions.length; i++)
            fExcluded.addElement(defaultExclusions[i]);

        InputStream is= getClass().getResourceAsStream(EXCLUDED_FILE);
        if (is == null)
            return;
        Properties p= new Properties();
        try {
            p.load(is);
        }
        catch (IOException e) {
            return;
        } finally {
            try {
                is.close();
            } catch (IOException e) {
            }
        }
        for (Enumeration e= p.propertyNames(); e.hasMoreElements(); ) {
            String key= (String)e.nextElement();
            if (key.startsWith("excluded.")) {
                String path= p.getProperty(key);
                path= path.trim();
                if (path.endsWith("*"))
                    path= path.substring(0, path.length()-1);
                if (path.length() > 0)
                    fExcluded.addElement(path);
            }
        }
