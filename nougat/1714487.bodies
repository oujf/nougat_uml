class BufferPool
!!!34679479.java!!!	BufferPool(in initialBufferSize : int, in maxBufferSize : int, in maxBuffers : int)
        mInitialBufferSize = initialBufferSize;
        mMaxBufferSize = maxBufferSize;
        mBuffers = new ByteBuffer[maxBuffers];
!!!34679607.java!!!	acquire(in needed : int) : ByteBuffer
        synchronized (this) {
            for (;;) {
                if (mAvailable != 0) {
                    mAvailable -= 1;
                    return grow(mBuffers[mAvailable], needed);
                }

                if (mAllocated < mBuffers.length) {
                    mAllocated += 1;
                    return ByteBuffer.allocate(chooseCapacity(mInitialBufferSize, needed));
                }

                try {
                    wait();
                } catch (InterruptedException ex) {
                }
            }
        }
!!!34679735.java!!!	release(inout buffer : ByteBuffer) : void
        synchronized (this) {
            buffer.clear();
            mBuffers[mAvailable++] = buffer;
            notifyAll();
        }
!!!34679863.java!!!	grow(inout buffer : ByteBuffer, in needed : int) : ByteBuffer
        int capacity = buffer.capacity();
        if (capacity < needed) {
            final ByteBuffer oldBuffer = buffer;
            capacity = chooseCapacity(capacity, needed);
            buffer = ByteBuffer.allocate(capacity);
            oldBuffer.flip();
            buffer.put(oldBuffer);
        }
        return buffer;
!!!34679991.java!!!	chooseCapacity(in capacity : int, in needed : int) : int
        while (capacity < needed) {
            capacity *= 2;
        }
        if (capacity > mMaxBufferSize) {
            if (needed > mMaxBufferSize) {
                throw new IllegalArgumentException("Requested size " + needed
                        + " is larger than maximum buffer size " + mMaxBufferSize + ".");
            }
            capacity = mMaxBufferSize;
        }
        return capacity;
