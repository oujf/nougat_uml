class Transport
!!!34680631.java!!!	Transport(inout logger : Logger, in maxPacketSize : int)
        mLogger = logger;
        mHandler = new TransportHandler();
        mOutputBuffer = ByteBuffer.allocate(maxPacketSize);
        mInputBufferPool = new BufferPool(
                maxPacketSize, Protocol.MAX_ENVELOPE_SIZE, MAX_INPUT_BUFFERS);
!!!34680759.java!!!	getLogger() : Logger
        return mLogger;
!!!34680887.java!!!	getHandler() : Handler
        return mHandler;
!!!34681015.java!!!	close() : void
        synchronized (mLock) {
            if (mOutputBuffer != null) {
                if (mThread == null) {
                    ioClose();
                } else {
                    // If the thread was started then it will be responsible for
                    // closing the stream when it quits because it may currently
                    // be in the process of reading from the stream so we can't simply
                    // shut it down right now.
                    mThread.quit();
                }
                mOutputBuffer = null;
            }
        }
!!!34681143.java!!!	sendMessage(in service : int, in what : int, inout content : ByteBuffer) : boolean
        checkServiceId(service);
        checkMessageId(what);

        try {
            synchronized (mLock) {
                if (mOutputBuffer == null) {
                    mLogger.logError("Send message failed because transport was closed.");
                    return false;
                }

                final byte[] outputArray = mOutputBuffer.array();
                final int capacity = mOutputBuffer.capacity();
                mOutputBuffer.clear();
                mOutputBuffer.putShort((short)service);
                mOutputBuffer.putShort((short)what);
                if (content == null) {
                    mOutputBuffer.putInt(0);
                } else {
                    final int contentLimit = content.limit();
                    int contentPosition = content.position();
                    int contentRemaining = contentLimit - contentPosition;
                    if (contentRemaining > Protocol.MAX_CONTENT_SIZE) {
                        throw new IllegalArgumentException("Message content too large: "
                                + contentRemaining + " > " + Protocol.MAX_CONTENT_SIZE);
                    }
                    mOutputBuffer.putInt(contentRemaining);
                    while (contentRemaining != 0) {
                        final int outputAvailable = capacity - mOutputBuffer.position();
                        if (contentRemaining <= outputAvailable) {
                            mOutputBuffer.put(content);
                            break;
                        }
                        content.limit(contentPosition + outputAvailable);
                        mOutputBuffer.put(content);
                        content.limit(contentLimit);
                        ioWrite(outputArray, 0, capacity);
                        contentPosition += outputAvailable;
                        contentRemaining -= outputAvailable;
                        mOutputBuffer.clear();
                    }
                }
                ioWrite(outputArray, 0, mOutputBuffer.position());
                return true;
            }
        } catch (IOException ex) {
            mLogger.logError("Send message failed: " + ex);
            return false;
        }
!!!34681271.java!!!	startReading() : void
        synchronized (mLock) {
            if (mOutputBuffer == null) {
                throw new IllegalStateException("Transport has been closed");
            }

            mThread = new ReaderThread();
            mThread.start();
        }
!!!34681399.java!!!	registerService(in service : int, inout callback : Transport::Callback) : void
        checkServiceId(service);
        if (callback == null) {
            throw new IllegalArgumentException("callback must not be null");
        }

        synchronized (mLock) {
            mServices.put(service, callback);
        }
!!!34681527.java!!!	unregisterService(in service : int) : void
        checkServiceId(service);

        synchronized (mLock) {
            mServices.remove(service);
        }
!!!34681655.java!!!	dispatchMessageReceived(in service : int, in what : int, inout content : ByteBuffer) : void
        final Callback callback;
        synchronized (mLock) {
            callback = mServices.get(service);
        }
        if (callback != null) {
            callback.onMessageReceived(service, what, content);
        } else {
            mLogger.log("Discarding message " + what
                    + " for unregistered service " + service);
        }
!!!34681783.java!!!	checkServiceId(in service : int) : void
        if (service < 0 || service > 0xffff) {
            throw new IllegalArgumentException("service id out of range: " + service);
        }
!!!34681911.java!!!	checkMessageId(in what : int) : void
        if (what < 0 || what > 0xffff) {
            throw new IllegalArgumentException("message id out of range: " + what);
        }
