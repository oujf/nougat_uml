class ReaderThread
!!!34682679.java!!!	ReaderThread()
            super("Accessory Display Transport");
!!!34682807.java!!!	run() : void
            loop();
            ioClose();
!!!34682935.java!!!	loop() : void
            ByteBuffer buffer = null;
            int length = Protocol.HEADER_SIZE;
            int contentSize = -1;
            outer: while (!mQuitting) {
                // Get a buffer.
                if (buffer == null) {
                    buffer = mInputBufferPool.acquire(length);
                } else {
                    buffer = mInputBufferPool.grow(buffer, length);
                }

                // Read more data until needed number of bytes obtained.
                int position = buffer.position();
                int count;
                try {
                    count = ioRead(buffer.array(), position, buffer.capacity() - position);
                    if (count < 0) {
                        break; // end of stream
                    }
                } catch (IOException ex) {
                    mLogger.logError("Read failed: " + ex);
                    break; // error
                }
                position += count;
                buffer.position(position);
                if (contentSize < 0 && position >= Protocol.HEADER_SIZE) {
                    contentSize = buffer.getInt(4);
                    if (contentSize < 0 || contentSize > Protocol.MAX_CONTENT_SIZE) {
                        mLogger.logError("Encountered invalid content size: " + contentSize);
                        break; // malformed stream
                    }
                    length += contentSize;
                }
                if (position < length) {
                    continue; // need more data
                }

                // There is at least one complete message in the buffer.
                // Find the end of a contiguous chunk of complete messages.
                int next = length;
                int remaining;
                for (;;) {
                    length = Protocol.HEADER_SIZE;
                    remaining = position - next;
                    if (remaining < length) {
                        contentSize = -1;
                        break; // incomplete header, need more data
                    }
                    contentSize = buffer.getInt(next + 4);
                    if (contentSize < 0 || contentSize > Protocol.MAX_CONTENT_SIZE) {
                        mLogger.logError("Encountered invalid content size: " + contentSize);
                        break outer; // malformed stream
                    }
                    length += contentSize;
                    if (remaining < length) {
                        break; // incomplete content, need more data
                    }
                    next += length;
                }

                // Post the buffer then don't modify it anymore.
                // Now this is kind of sneaky.  We know that no other threads will
                // be acquiring buffers from the buffer pool so we can keep on
                // referring to this buffer as long as we don't modify its contents.
                // This allows us to operate in a single-buffered mode if desired.
                buffer.limit(next);
                buffer.rewind();
                mHandler.obtainMessage(0, buffer).sendToTarget();

                // If there is an incomplete message at the end, then we will need
                // to copy it to a fresh buffer before continuing.  In the single-buffered
                // case, we may acquire the same buffer as before which is fine.
                if (remaining == 0) {
                    buffer = null;
                } else {
                    final ByteBuffer oldBuffer = buffer;
                    buffer = mInputBufferPool.acquire(length);
                    System.arraycopy(oldBuffer.array(), next, buffer.array(), 0, remaining);
                    buffer.position(remaining);
                }
            }

            if (buffer != null) {
                mInputBufferPool.release(buffer);
            }
!!!34683063.java!!!	quit() : void
            mQuitting = true;
