class Form31c
!!!477495.java!!!	Form31c()
        // This space intentionally left blank.
!!!477623.java!!!	insnArgString(inout insn : DalvInsn) : String
        RegisterSpecList regs = insn.getRegisters();
        return regs.get(0).regString() + ", " + cstString(insn);
!!!477751.java!!!	insnCommentString(inout insn : DalvInsn, inout noteIndices : boolean) : String
        if (noteIndices) {
            return cstComment(insn);
        } else {
            return "";
        }
!!!477879.java!!!	codeSize() : int
        return 3;
!!!478007.java!!!	isCompatible(inout insn : DalvInsn) : boolean
        if (!(insn instanceof CstInsn)) {
            return false;
        }

        RegisterSpecList regs = insn.getRegisters();
        RegisterSpec reg;

        switch (regs.size()) {
            case 1: {
                reg = regs.get(0);
                break;
            }
            case 2: {
                /*
                 * This format is allowed for ops that are effectively
                 * 2-arg but where the two args are identical.
                 */
                reg = regs.get(0);
                if (reg.getReg() != regs.get(1).getReg()) {
                    return false;
                }
                break;
            }
            default: {
                return false;
            }
        }

        if (!unsignedFitsInByte(reg.getReg())) {
            return false;
        }

        CstInsn ci = (CstInsn) insn;
        Constant cst = ci.getConstant();

        return ((cst instanceof CstType) ||
                (cst instanceof CstFieldRef) ||
                (cst instanceof CstString));
!!!478135.java!!!	nextUp() : InsnFormat
        return null;
!!!478263.java!!!	writeTo(inout out : AnnotatedOutput, inout insn : DalvInsn) : void
        RegisterSpecList regs = insn.getRegisters();
        int cpi = ((CstInsn) insn).getIndex();

        write(out,
                opcodeUnit(insn, regs.get(0).getReg()),
                (short) cpi,
                (short) (cpi >> 16));
