class Form3rc
!!!482359.java!!!	Form3rc()
        // This space intentionally left blank.
!!!482487.java!!!	insnArgString(inout insn : DalvInsn) : String
        RegisterSpecList regs = insn.getRegisters();
        int size = regs.size();
        StringBuilder sb = new StringBuilder(30);

        sb.append("{");

        switch (size) {
            case 0: {
                // Nothing to do.
                break;
            }
            case 1: {
                sb.append(regs.get(0).regString());
                break;
            }
            default: {
                RegisterSpec lastReg = regs.get(size - 1);
                if (lastReg.getCategory() == 2) {
                    /*
                     * Add one to properly represent a list-final
                     * category-2 register.
                     */
                    lastReg = lastReg.withOffset(1);
                }

                sb.append(regs.get(0).regString());
                sb.append("..");
                sb.append(lastReg.regString());
            }
        }

        sb.append("}, ");
        sb.append(cstString(insn));

        return sb.toString();
!!!482615.java!!!	insnCommentString(inout insn : DalvInsn, inout noteIndices : boolean) : String
        if (noteIndices) {
            return cstComment(insn);
        } else {
            return "";
        }
!!!482743.java!!!	codeSize() : int
        return 3;
!!!482871.java!!!	isCompatible(inout insn : DalvInsn) : boolean
        if (!(insn instanceof CstInsn)) {
            return false;
        }

        CstInsn ci = (CstInsn) insn;
        int cpi = ci.getIndex();

        if (! unsignedFitsInShort(cpi)) {
            return false;
        }

        Constant cst = ci.getConstant();
        if (!((cst instanceof CstMethodRef) ||
              (cst instanceof CstType))) {
            return false;
        }

        RegisterSpecList regs = ci.getRegisters();
        int sz = regs.size();

        if (sz == 0) {
            return true;
        }

        int first = regs.get(0).getReg();
        int next = first;

        if (!unsignedFitsInShort(first)) {
            return false;
        }

        for (int i = 0; i < sz; i++) {
            RegisterSpec one = regs.get(i);
            if (one.getReg() != next) {
                return false;
            }
            next += one.getCategory();
        }

        return unsignedFitsInByte(next - first);
!!!482999.java!!!	nextUp() : InsnFormat
        return null;
!!!483127.java!!!	writeTo(inout out : AnnotatedOutput, inout insn : DalvInsn) : void
        RegisterSpecList regs = insn.getRegisters();
        int sz = regs.size();
        int cpi = ((CstInsn) insn).getIndex();
        int firstReg;
        int count;

        if (sz == 0) {
            firstReg = 0;
            count = 0;
        } else {
            int lastReg = regs.get(sz - 1).getNextReg();
            firstReg = regs.get(0).getReg();
            count = lastReg - firstReg;
        }

        write(out,
              opcodeUnit(insn, count),
              (short) cpi,
              (short) firstReg);
