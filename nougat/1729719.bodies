class FrameType
!!!34795191.java!!!	any() : FrameType
        return FrameType.fetchType(ELEMENT_DONTCARE, -1, ACCESS_UNKNOWN);
!!!34795319.java!!!	single() : FrameType
        return FrameType.fetchType(null, 0);
!!!34795447.java!!!	single(inout clazz : Class) : FrameType
        return FrameType.fetchType(clazz, 0);
!!!34795575.java!!!	array() : FrameType
        return FrameType.fetchType(null, 1);
!!!34795703.java!!!	array(inout clazz : Class) : FrameType
        return FrameType.fetchType(clazz, 1);
!!!34795831.java!!!	buffer1D(in elementType : int) : FrameType
        return FrameType.fetchType(elementType, 1, ACCESS_UNKNOWN);
!!!34795959.java!!!	buffer2D(in elementType : int) : FrameType
        return FrameType.fetchType(elementType, 2, ACCESS_UNKNOWN);
!!!34796087.java!!!	image2D(in elementType : int, in accessHint : int) : FrameType
        return FrameType.fetchType(elementType, 2, accessHint);
!!!34796215.java!!!	asSingle() : FrameType
        if (mElementId != ELEMENT_OBJECT) {
            throw new RuntimeException("Calling asSingle() on non-object type!");
        }
        return FrameType.fetchType(mClass, 0);
!!!34796343.java!!!	asArray() : FrameType
        if (mElementId != ELEMENT_OBJECT) {
            throw new RuntimeException("Calling asArray() on non-object type!");
        }
        return FrameType.fetchType(mClass, 1);
!!!34796471.java!!!	getContentClass() : Class
        return mClass;
!!!34796599.java!!!	getElementId() : int
        return mElementId;
!!!34796727.java!!!	getElementSize() : int
        switch (mElementId) {
            case ELEMENT_INT8:
                return 1;
            case ELEMENT_INT16:
                return 2;
            case ELEMENT_INT32:
            case ELEMENT_FLOAT32:
            case ELEMENT_RGBA8888:
                return 4;
            case ELEMENT_INT64:
            case ELEMENT_FLOAT64:
                return 4;
            default:
                return 0;
        }
!!!34796855.java!!!	getAccessHints() : int
        return mAccessHints;
!!!34796983.java!!!	getNumberOfDimensions() : int
        return mDimensions;
!!!34797111.java!!!	isSpecified() : boolean
        return mElementId != ELEMENT_DONTCARE && mDimensions >= 0;
!!!34797239.java!!!	equals(inout object : Object) : boolean
        if (object instanceof FrameType) {
            FrameType type = (FrameType) object;
            return mElementId == type.mElementId && mDimensions == type.mDimensions
                    && mAccessHints == type.mAccessHints && mClass == type.mClass;
        }
        return false;
!!!34797367.java!!!	hashCode() : int
        return mElementId ^ mDimensions ^ mAccessHints ^ mClass.hashCode();
!!!34797495.java!!!	toString() : String
        String result = elementToString(mElementId, mClass) + "[" + mDimensions + "]";
        if ((mAccessHints & READ_CPU) != 0) {
            result += "(rcpu)";
        }
        if ((mAccessHints & READ_GPU) != 0) {
            result += "(rgpu)";
        }
        if ((mAccessHints & READ_ALLOCATION) != 0) {
            result += "(ralloc)";
        }
        if ((mAccessHints & WRITE_CPU) != 0) {
            result += "(wcpu)";
        }
        if ((mAccessHints & WRITE_GPU) != 0) {
            result += "(wgpu)";
        }
        if ((mAccessHints & WRITE_ALLOCATION) != 0) {
            result += "(walloc)";
        }
        return result;
!!!34797623.java!!!	keyString() : String
        return keyValueForType(mElementId, mDimensions, mAccessHints, mClass);
!!!34797751.java!!!	tryMerge(inout writer : FrameType, inout reader : FrameType) : FrameType
        if (writer.mElementId == ELEMENT_DONTCARE) {
            return reader;
        } else if (reader.mElementId == ELEMENT_DONTCARE) {
            return writer;
        } else if (writer.mElementId == ELEMENT_OBJECT && reader.mElementId == ELEMENT_OBJECT) {
            return tryMergeObjectTypes(writer, reader);
        } else if (writer.mDimensions > 0 && writer.mElementId == reader.mElementId) {
            return tryMergeBuffers(writer, reader);
        } else {
            return null;
        }
!!!34797879.java!!!	tryMergeObjectTypes(inout writer : FrameType, inout reader : FrameType) : FrameType
        int dimensions = Math.max(writer.mDimensions, reader.mDimensions);
        Class<?> mergedClass = mergeClasses(writer.mClass, reader.mClass);
        boolean success = mergedClass != null || writer.mClass == null;
        return success ? FrameType.fetchType(mergedClass, dimensions) : null;
!!!34798007.java!!!	tryMergeBuffers(inout writer : FrameType, inout reader : FrameType) : FrameType
        if (writer.mDimensions == reader.mDimensions) {
            int accessHints = writer.mAccessHints | reader.mAccessHints;
            return FrameType.fetchType(writer.mElementId, writer.mDimensions, accessHints);
        }
        return null;
!!!34798135.java!!!	merge(inout writer : FrameType, inout reader : FrameType) : FrameType
        FrameType result = tryMerge(writer, reader);
        if (result == null) {
            throw new RuntimeException(
                    "Incompatible types in connection: " + writer + " vs. " + reader + "!");
        }
        return result;
!!!34798263.java!!!	keyValueForType(in elemId : int, in dims : int, in hints : int, inout clazz : Class) : String
        return elemId + ":" + dims + ":" + hints + ":" + (clazz != null ? clazz.getName() : "0");
!!!34798391.java!!!	elementToString(in elemId : int, inout clazz : Class) : String
        switch (elemId) {
            case ELEMENT_INT8:
                return "int8";
            case ELEMENT_INT16:
                return "int16";
            case ELEMENT_INT32:
                return "int32";
            case ELEMENT_INT64:
                return "int64";
            case ELEMENT_FLOAT32:
                return "float32";
            case ELEMENT_FLOAT64:
                return "float64";
            case ELEMENT_RGBA8888:
                return "rgba8888";
            case ELEMENT_OBJECT:
                return "<" + (clazz == null ? "*" : clazz.getSimpleName()) + ">";
            case ELEMENT_DONTCARE:
                return "*";
            default:
                return "?";
        }
!!!34798519.java!!!	mergeClasses(inout classA : Class, inout classB : Class) : Class
        // Return the most specialized class.
        if (classA == null) {
            return classB;
        } else if (classB == null) {
            return classA;
        } else if (classA.isAssignableFrom(classB)) {
            return classB;
        } else if (classB.isAssignableFrom(classA)) {
            return classA;
        } else {
            return null;
        }
!!!34798647.java!!!	fetchType(in elementId : int, in dimensions : int, in accessHints : int) : FrameType
        return fetchType(elementId, dimensions, accessHints, null);
!!!34798775.java!!!	fetchType(inout clazz : Class, in dimensions : int) : FrameType
        return fetchType(ELEMENT_OBJECT, dimensions, ACCESS_UNKNOWN, clazz);
!!!34798903.java!!!	fetchType(in elementId : int, in dimensions : int, in accessHints : int, inout clazz : Class) : FrameType
        String typeKey = FrameType.keyValueForType(elementId, dimensions, accessHints, clazz);
        FrameType type = mTypeCache.get(typeKey);
        if (type == null) {
            type = new FrameType(elementId, dimensions, accessHints, clazz);
            mTypeCache.put(typeKey, type);
        }
        return type;
!!!34799031.java!!!	FrameType(in elementId : int, in dimensions : int, in accessHints : int, inout clazz : Class)
        mElementId = elementId;
        mDimensions = dimensions;
        mClass = clazz;
        mAccessHints = accessHints;
