class BitmapBacking
!!!34731831.java!!!	allocate(inout frameType : FrameType) : void
            assertImageCompatible(frameType);
!!!34731959.java!!!	readAccess() : int
            return ACCESS_BITMAP;
!!!34732087.java!!!	writeAccess() : int
            return ACCESS_BITMAP;
!!!34732215.java!!!	syncTo(inout backing : BackingStore::Backing) : void
            int access = backing.readAccess();
            if ((access & ACCESS_BITMAP) != 0) {
                mBitmap = (Bitmap) backing.lock(ACCESS_BITMAP);
            } else if ((access & ACCESS_BYTES) != 0) {
                createBitmap();
                ByteBuffer buffer = (ByteBuffer) backing.lock(ACCESS_BYTES);
                mBitmap.copyPixelsFromBuffer(buffer);
                buffer.rewind();
            } else if ((access & ACCESS_TEXTURE) != 0) {
                createBitmap();
                RenderTarget renderTarget = (RenderTarget) backing.lock(ACCESS_RENDERTARGET);
                mBitmap.copyPixelsFromBuffer(
                        renderTarget.getPixelData(mDimensions[0], mDimensions[1]));
            } else if ((access & ACCESS_ALLOCATION) != 0 && AllocationBacking.isSupported()) {
                createBitmap();
                syncToAllocationBacking(backing);
            } else {
                throw new RuntimeException("Cannot sync bytebuffer backing!");
            }
            backing.unlock();
            mIsDirty = false;
!!!34732343.java!!!	syncToAllocationBacking(inout backing : BackingStore::Backing) : void
            Allocation allocation = (Allocation) backing.lock(ACCESS_ALLOCATION);
            allocation.copyTo(mBitmap);
!!!34732471.java!!!	lock(in accessType : int) : Object
            return mBitmap;
!!!34732599.java!!!	getType() : int
            return BACKING_BITMAP;
!!!34732727.java!!!	shouldCache() : boolean
            return false;
!!!34732855.java!!!	requiresGpu() : boolean
            return false;
!!!34732983.java!!!	destroy() : void
            // As we share the bitmap with other backings (such as object backings), we must not
            // recycle it here.
            mBitmap = null;
!!!34733111.java!!!	getSize() : int
            return 4 * mDimensions[0] * mDimensions[1];
!!!34733239.java!!!	setData(inout data : Object) : void
            // We can assume that data will always be a Bitmap instance.
            mBitmap = (Bitmap) data;
!!!34733367.java!!!	createBitmap() : void
            mBitmap = Bitmap.createBitmap(mDimensions[0], mDimensions[1], Bitmap.Config.ARGB_8888);
