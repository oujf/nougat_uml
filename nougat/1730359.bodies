class TextureBacking
!!!34733495.java!!!	allocate(inout frameType : FrameType) : void
            assertImageCompatible(frameType);
            mTexture = TextureSource.newTexture();
!!!34733623.java!!!	readAccess() : int
            return ACCESS_TEXTURE;
!!!34733751.java!!!	writeAccess() : int
            return ACCESS_RENDERTARGET;
!!!34733879.java!!!	syncTo(inout backing : BackingStore::Backing) : void
            int access = backing.readAccess();
            if ((access & ACCESS_BYTES) != 0) {
                ByteBuffer pixels = (ByteBuffer) backing.lock(ACCESS_BYTES);
                mTexture.allocateWithPixels(pixels, mDimensions[0], mDimensions[1]);
            } else if ((access & ACCESS_BITMAP) != 0) {
                Bitmap bitmap = (Bitmap) backing.lock(ACCESS_BITMAP);
                mTexture.allocateWithBitmapPixels(bitmap);
            } else if ((access & ACCESS_TEXTURE) != 0) {
                TextureSource texture = (TextureSource) backing.lock(ACCESS_TEXTURE);
                int w = mDimensions[0];
                int h = mDimensions[1];
                ImageShader.renderTextureToTarget(texture, getRenderTarget(), w, h);
            } else if ((access & ACCESS_ALLOCATION) != 0 && AllocationBacking.isSupported()) {
                syncToAllocationBacking(backing);
            } else {
                throw new RuntimeException("Cannot sync bytebuffer backing!");
            }
            backing.unlock();
            mIsDirty = false;
!!!34734007.java!!!	syncToAllocationBacking(inout backing : BackingStore::Backing) : void
            Allocation allocation = (Allocation) backing.lock(ACCESS_ALLOCATION);
            ByteBuffer pixels = ByteBuffer.allocateDirect(getSize());
            allocation.copyTo(pixels.array());
            mTexture.allocateWithPixels(pixels, mDimensions[0], mDimensions[1]);
!!!34734135.java!!!	lock(in accessType : int) : Object
            switch (accessType) {
                case ACCESS_TEXTURE:
                    return getTexture();

                case ACCESS_RENDERTARGET:
                    return getRenderTarget();

                default:
                    throw new RuntimeException("Illegal access to texture!");
            }
!!!34734263.java!!!	getType() : int
            return BACKING_TEXTURE;
!!!34734391.java!!!	shouldCache() : boolean
            return true;
!!!34734519.java!!!	requiresGpu() : boolean
            return true;
!!!34734647.java!!!	destroy() : void
            if (mRenderTarget != null) {
                mRenderTarget.release();
            }
            if (mTexture.isAllocated()) {
                mTexture.release();
            }
!!!34734775.java!!!	getSize() : int
            return 4 * mDimensions[0] * mDimensions[1];
!!!34734903.java!!!	getTexture() : TextureSource
            if (!mTexture.isAllocated()) {
                mTexture.allocate(mDimensions[0], mDimensions[1]);
            }
            return mTexture;
!!!34735031.java!!!	getRenderTarget() : RenderTarget
            if (mRenderTarget == null) {
                int w = mDimensions[0];
                int h = mDimensions[1];
                mRenderTarget = RenderTarget.currentTarget().forTexture(getTexture(), w, h);
            }
            return mRenderTarget;
