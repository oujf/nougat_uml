class RenderTarget
!!!34846263.java!!!	newTarget(in width : int, in height : int) : RenderTarget
        EGL10 egl = (EGL10) EGLContext.getEGL();
        EGLDisplay eglDisplay = createDefaultDisplay(egl);
        EGLConfig eglConfig = chooseEglConfig(egl, eglDisplay);
        EGLContext eglContext = createContext(egl, eglDisplay, eglConfig);
        EGLSurface eglSurface = createSurface(egl, eglDisplay, width, height);
        RenderTarget result = new RenderTarget(eglDisplay, eglContext, eglSurface, 0, true, true);
        result.addReferenceTo(eglSurface);
        return result;
!!!34846391.java!!!	currentTarget() : RenderTarget
        // As RenderTargets are immutable, we can safely return the last focused instance on this
        // thread, as we know it cannot have changed, and therefore must be current.
        return mCurrentTarget.get();
!!!34846519.java!!!	forTexture(inout texture : TextureSource, in width : int, in height : int) : RenderTarget
        // NOTE: We do not need to lookup any previous bindings of this texture to an FBO, as
        // multiple FBOs to a single texture is valid.
        int fbo = GLToolbox.generateFbo();
        GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, fbo);
        GLToolbox.checkGlError("glBindFramebuffer");
        GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,
                                      GLES20.GL_COLOR_ATTACHMENT0,
                                      texture.getTarget(),
                                      texture.getTextureId(),
                                      0);
        GLToolbox.checkGlError("glFramebufferTexture2D");
        return new RenderTarget(mDisplay, mContext, surface(), fbo, false, false);
!!!34846647.java!!!	forSurfaceHolder(inout surfaceHolder : SurfaceHolder) : RenderTarget
        EGLConfig eglConfig = chooseEglConfig(mEgl, mDisplay);
        EGLSurface eglSurf = null;
        synchronized (mSurfaceSources) {
            eglSurf = mSurfaceSources.get(surfaceHolder);
            if (eglSurf == null) {
                eglSurf = mEgl.eglCreateWindowSurface(mDisplay, eglConfig, surfaceHolder, null);
                mSurfaceSources.put(surfaceHolder, eglSurf);
            }
        }
        checkEglError(mEgl, "eglCreateWindowSurface");
        checkSurface(mEgl, eglSurf);
        RenderTarget result = new RenderTarget(mDisplay, mContext, eglSurf, 0, false, true);
        result.addReferenceTo(eglSurf);
        result.setSurfaceSource(surfaceHolder);
        return result;
!!!34846775.java!!!	forSurfaceTexture(inout surfaceTexture : SurfaceTexture) : RenderTarget
        EGLConfig eglConfig = chooseEglConfig(mEgl, mDisplay);
        EGLSurface eglSurf = null;
        synchronized (mSurfaceSources) {
            eglSurf = mSurfaceSources.get(surfaceTexture);
            if (eglSurf == null) {
                eglSurf = mEgl.eglCreateWindowSurface(mDisplay, eglConfig, surfaceTexture, null);
                mSurfaceSources.put(surfaceTexture, eglSurf);
            }
        }
        checkEglError(mEgl, "eglCreateWindowSurface");
        checkSurface(mEgl, eglSurf);
        RenderTarget result = new RenderTarget(mDisplay, mContext, eglSurf, 0, false, true);
        result.setSurfaceSource(surfaceTexture);
        result.addReferenceTo(eglSurf);
        return result;
!!!34846903.java!!!	forSurface(inout surface : Surface) : RenderTarget
        EGLConfig eglConfig = chooseEglConfig(mEgl, mDisplay);
        EGLSurface eglSurf = null;
        synchronized (mSurfaceSources) {
            eglSurf = mSurfaceSources.get(surface);
            if (eglSurf == null) {
                eglSurf = mEgl.eglCreateWindowSurface(mDisplay, eglConfig, surface, null);
                mSurfaceSources.put(surface, eglSurf);
            }
        }
        checkEglError(mEgl, "eglCreateWindowSurface");
        checkSurface(mEgl, eglSurf);
        RenderTarget result = new RenderTarget(mDisplay, mContext, eglSurf, 0, false, true);
        result.setSurfaceSource(surface);
        result.addReferenceTo(eglSurf);
        return result;
!!!34847031.java!!!	forMediaRecorder(inout mediaRecorder : MediaRecorder) : RenderTarget
        throw new RuntimeException("Not yet implemented MediaRecorder -> RenderTarget!");
!!!34847159.java!!!	setEGLConfigChooser(in redSize : int, in greenSize : int, in blueSize : int, in alphaSize : int, in depthSize : int, in stencilSize : int) : void
        sRedSize = redSize;
        sGreenSize = greenSize;
        sBlueSize = blueSize;
        sAlphaSize = alphaSize;
        sDepthSize = depthSize;
        sStencilSize = stencilSize;
!!!34847287.java!!!	registerAsDisplaySurface() : void
        if (!mSupportsMultipleDisplaySurfaces) {
            // Note that while this does in effect change RenderTarget instances (by modifying
            // their returned EGLSurface), breaking the immutability requirement, it does not modify
            // the current target. This is important so that the instance returned in
            // currentTarget() remains accurate.
            EGLSurface currentSurface = mDisplaySurfaces.get(mContext);
            if (currentSurface != null && !currentSurface.equals(mSurface)) {
                throw new RuntimeException("This device supports only a single display surface!");
            } else {
                mDisplaySurfaces.put(mContext, mSurface);
            }
        }
!!!34847415.java!!!	unregisterAsDisplaySurface() : void
        if (!mSupportsMultipleDisplaySurfaces) {
            mDisplaySurfaces.put(mContext, null);
        }
!!!34847543.java!!!	focus() : void
        RenderTarget current = mCurrentTarget.get();
        // We assume RenderTargets are immutable, so that we do not need to focus if the current
        // RenderTarget has not changed.
        if (current != this) {
            mEgl.eglMakeCurrent(mDisplay, surface(), surface(), mContext);
            mCurrentTarget.set(this);
        }
        if (getCurrentFbo() != mFbo) {
            GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, mFbo);
            GLToolbox.checkGlError("glBindFramebuffer");
        }
!!!34847671.java!!!	focusNone() : void
        EGL10 egl = (EGL10) EGLContext.getEGL();
        egl.eglMakeCurrent(egl.eglGetCurrentDisplay(),
                           EGL10.EGL_NO_SURFACE,
                           EGL10.EGL_NO_SURFACE,
                           EGL10.EGL_NO_CONTEXT);
        mCurrentTarget.set(null);
        checkEglError(egl, "eglMakeCurrent");
!!!34847799.java!!!	swapBuffers() : void
        mEgl.eglSwapBuffers(mDisplay, surface());
!!!34847927.java!!!	getContext() : EGLContext
        return mContext;
!!!34848055.java!!!	currentContext() : EGLContext
        RenderTarget current = RenderTarget.currentTarget();
        return current != null ? current.getContext() : EGL10.EGL_NO_CONTEXT;
!!!34848183.java!!!	release() : void
        if (mOwnsContext) {
            mEgl.eglDestroyContext(mDisplay, mContext);
            mContext = EGL10.EGL_NO_CONTEXT;
        }
        if (mOwnsSurface) {
            synchronized (mSurfaceSources) {
                if (removeReferenceTo(mSurface)) {
                    mEgl.eglDestroySurface(mDisplay, mSurface);
                    mSurface = EGL10.EGL_NO_SURFACE;
                    mSurfaceSources.remove(mSurfaceSource);
                }
            }
        }
        if (mFbo != 0) {
           GLToolbox.deleteFbo(mFbo);
       }
!!!34848311.java!!!	readPixelData(inout pixels : ByteBuffer, in width : int, in height : int) : void
        GLToolbox.readTarget(this, pixels, width, height);
!!!34848439.java!!!	getPixelData(in width : int, in height : int) : ByteBuffer
        ByteBuffer pixels = ByteBuffer.allocateDirect(width * height * 4);
        GLToolbox.readTarget(this, pixels, width, height);
        return pixels;
!!!34848567.java!!!	getIdentityShader() : ImageShader
        ImageShader idShader = mIdShaders.get(mContext);
        if (idShader == null) {
            idShader = ImageShader.createIdentity();
            mIdShaders.put(mContext, idShader);
        }
        return idShader;
!!!34848695.java!!!	toString() : String
        return "RenderTarget(" + mDisplay + ", " + mContext + ", " + mSurface + ", " + mFbo + ")";
!!!34848823.java!!!	setSurfaceSource(inout source : Object) : void
        mSurfaceSource = source;
!!!34848951.java!!!	addReferenceTo(inout object : Object) : void
        Integer refCount = mRefCounts.get(object);
        if (refCount != null) {
            mRefCounts.put(object, refCount + 1);
        } else {
            mRefCounts.put(object, 1);
        }
!!!34849079.java!!!	removeReferenceTo(inout object : Object) : boolean
        Integer refCount = mRefCounts.get(object);
        if (refCount != null && refCount > 0) {
            --refCount;
            mRefCounts.put(object, refCount);
            return refCount == 0;
        } else {
            Log.e("RenderTarget", "Removing reference of already released: " + object + "!");
            return false;
        }
!!!34849207.java!!!	chooseEglConfig(inout egl : EGL10, inout display : EGLDisplay) : EGLConfig
        if (mEglConfig == null || !display.equals(mConfiguredDisplay)) {
            int[] configsCount = new int[1];
            EGLConfig[] configs = new EGLConfig[1];
            int[] configSpec = getDesiredConfig();
            if (!egl.eglChooseConfig(display, configSpec, configs, 1, configsCount)) {
                throw new IllegalArgumentException("EGL Error: eglChooseConfig failed " +
                        getEGLErrorString(egl, egl.eglGetError()));
            } else if (configsCount[0] > 0) {
                mEglConfig = configs[0];
                mConfiguredDisplay = display;
            }
        }
        return mEglConfig;
!!!34849335.java!!!	getDesiredConfig() : int
        return new int[] {
                EGL10.EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
                EGL10.EGL_RED_SIZE, sRedSize,
                EGL10.EGL_GREEN_SIZE, sGreenSize,
                EGL10.EGL_BLUE_SIZE, sBlueSize,
                EGL10.EGL_ALPHA_SIZE, sAlphaSize,
                EGL10.EGL_DEPTH_SIZE, sDepthSize,
                EGL10.EGL_STENCIL_SIZE, sStencilSize,
                EGL10.EGL_NONE
        };
!!!34849463.java!!!	RenderTarget(inout display : EGLDisplay, inout context : EGLContext, inout surface : EGLSurface, in fbo : int, inout ownsContext : boolean, inout ownsSurface : boolean)
        mEgl = (EGL10) EGLContext.getEGL();
        mDisplay = display;
        mContext = context;
        mSurface = surface;
        mFbo = fbo;
        mOwnsContext = ownsContext;
        mOwnsSurface = ownsSurface;
!!!34849591.java!!!	surface() : EGLSurface
        if (mSupportsMultipleDisplaySurfaces) {
            return mSurface;
        } else {
            EGLSurface displaySurface = mDisplaySurfaces.get(mContext);
            return displaySurface != null ? displaySurface : mSurface;
        }
!!!34849719.java!!!	initEgl(inout egl : EGL10, inout display : EGLDisplay) : void
        int[] version = new int[2];
        if (!egl.eglInitialize(display, version)) {
            throw new RuntimeException("EGL Error: eglInitialize failed " +
                    getEGLErrorString(egl, egl.eglGetError()));
        }
!!!34849847.java!!!	createDefaultDisplay(inout egl : EGL10) : EGLDisplay
        EGLDisplay display = egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
        checkDisplay(egl, display);
        initEgl(egl, display);
        return display;
!!!34849975.java!!!	createContext(inout egl : EGL10, inout display : EGLDisplay, inout config : EGLConfig) : EGLContext
        int[] attrib_list = { EGL_CONTEXT_CLIENT_VERSION, 2, EGL10.EGL_NONE };
        EGLContext ctxt = egl.eglCreateContext(display, config, EGL10.EGL_NO_CONTEXT, attrib_list);
        checkContext(egl, ctxt);
        return ctxt;
!!!34850103.java!!!	createSurface(inout egl : EGL10, inout display : EGLDisplay, in width : int, in height : int) : EGLSurface
        EGLConfig eglConfig = chooseEglConfig(egl, display);
        int[] attribs = { EGL10.EGL_WIDTH, width, EGL10.EGL_HEIGHT, height, EGL10.EGL_NONE };
        return egl.eglCreatePbufferSurface(display, eglConfig, attribs);
!!!34850231.java!!!	getCurrentFbo() : int
        int[] result = new int[1];
        GLES20.glGetIntegerv(GLES20.GL_FRAMEBUFFER_BINDING, result, 0);
        return result[0];
!!!34850359.java!!!	checkDisplay(inout egl : EGL10, inout display : EGLDisplay) : void
        if (display == EGL10.EGL_NO_DISPLAY) {
            throw new RuntimeException("EGL Error: Bad display: "
                    + getEGLErrorString(egl, egl.eglGetError()));
        }
!!!34850487.java!!!	checkContext(inout egl : EGL10, inout context : EGLContext) : void
        if (context == EGL10.EGL_NO_CONTEXT) {
            throw new RuntimeException("EGL Error: Bad context: "
                    + getEGLErrorString(egl, egl.eglGetError()));
        }
!!!34850615.java!!!	checkSurface(inout egl : EGL10, inout surface : EGLSurface) : void
        if (surface == EGL10.EGL_NO_SURFACE) {
            throw new RuntimeException("EGL Error: Bad surface: "
                    + getEGLErrorString(egl, egl.eglGetError()));
        }
!!!34850743.java!!!	checkEglError(inout egl : EGL10, inout command : String) : void
        int error = egl.eglGetError();
        if (error != EGL10.EGL_SUCCESS) {
            throw new RuntimeException("Error executing " + command + "! EGL error = 0x"
                + Integer.toHexString(error));
        }
!!!34850871.java!!!	getEGLErrorString(inout egl : EGL10, in eglError : int) : String
        if (VERSION.SDK_INT >= 14) {
            return getEGLErrorStringICS(egl, eglError);
        } else {
            return "EGL Error 0x" + Integer.toHexString(eglError);
        }
!!!34850999.java!!!	getEGLErrorStringICS(inout egl : EGL10, in eglError : int) : String
        return GLUtils.getEGLErrorString(egl.eglGetError());
