class ByteBufferBacking
!!!34735159.java!!!	allocate(inout frameType : FrameType) : void
            int size = frameType.getElementSize();
            for (int dim : mDimensions) {
                size *= dim;
            }
            mBuffer = ByteBuffer.allocateDirect(size);
!!!34735287.java!!!	readAccess() : int
            return ACCESS_BYTES;
!!!34735415.java!!!	writeAccess() : int
            return ACCESS_BYTES;
!!!34735543.java!!!	requiresGpu() : boolean
            return false;
!!!34735671.java!!!	syncTo(inout backing : BackingStore::Backing) : void
            int access = backing.readAccess();
            if ((access & ACCESS_TEXTURE) != 0) {
                RenderTarget target = (RenderTarget) backing.lock(ACCESS_RENDERTARGET);
                GLToolbox.readTarget(target, mBuffer, mDimensions[0], mDimensions[1]);
            } else if ((access & ACCESS_BITMAP) != 0) {
                Bitmap bitmap = (Bitmap) backing.lock(ACCESS_BITMAP);
                bitmap.copyPixelsToBuffer(mBuffer);
                mBuffer.rewind();
            } else if ((access & ACCESS_BYTES) != 0) {
                ByteBuffer otherBuffer = (ByteBuffer) backing.lock(ACCESS_BYTES);
                mBuffer.put(otherBuffer);
                otherBuffer.rewind();
            } else if ((access & ACCESS_ALLOCATION) != 0 && AllocationBacking.isSupported()) {
                syncToAllocationBacking(backing);
            } else {
                throw new RuntimeException("Cannot sync bytebuffer backing!");
            }
            backing.unlock();
            mBuffer.rewind();
            mIsDirty = false;
!!!34735799.java!!!	syncToAllocationBacking(inout backing : BackingStore::Backing) : void
            Allocation allocation = (Allocation) backing.lock(ACCESS_ALLOCATION);
            if (getElementId() == FrameType.ELEMENT_RGBA8888) {
                byte[] bytes = mBuffer.array();
                allocation.copyTo(bytes);
            } else if (getElementId() == FrameType.ELEMENT_FLOAT32) {
                float[] floats = new float[getSize() / 4];
                allocation.copyTo(floats);
                mBuffer.asFloatBuffer().put(floats);
            } else {
                throw new RuntimeException(
                        "Trying to sync to an allocation with an unsupported element id: "
                        + getElementId());
            }
!!!34735927.java!!!	lock(in accessType : int) : Object
            return mBuffer.rewind();
!!!34736055.java!!!	unlock() : void
            mBuffer.rewind();
!!!34736183.java!!!	getType() : int
            return BACKING_BYTEBUFFER;
!!!34736311.java!!!	shouldCache() : boolean
            return true;
!!!34736439.java!!!	destroy() : void
            mBuffer = null;
!!!34736567.java!!!	getSize() : int
            return mBuffer.remaining();
