class AllocationBacking
!!!34736695.java!!!	AllocationBacking(inout renderScript : RenderScript)
            mRenderScript = renderScript;
!!!34736823.java!!!	allocate(inout frameType : FrameType) : void
            assertCompatible(frameType);

            Element element = null;
            switch (frameType.getElementId()) {
                case FrameType.ELEMENT_RGBA8888:
                    element = Element.RGBA_8888(mRenderScript);
                    break;
                case FrameType.ELEMENT_FLOAT32:
                    element = Element.F32(mRenderScript);
                    break;
            }
            Type.Builder imageTypeBuilder = new Type.Builder(mRenderScript, element);
            imageTypeBuilder.setX(mDimensions.length >= 1 ? mDimensions[0] : 1);
            imageTypeBuilder.setY(mDimensions.length == 2 ? mDimensions[1] : 1);
            Type imageType = imageTypeBuilder.create();

            mAllocation = Allocation.createTyped(mRenderScript, imageType);
!!!34736951.java!!!	readAccess() : int
            return ACCESS_ALLOCATION;
!!!34737079.java!!!	writeAccess() : int
            return ACCESS_ALLOCATION;
!!!34737207.java!!!	requiresGpu() : boolean
            return false;
!!!34737335.java!!!	syncTo(inout backing : BackingStore::Backing) : void
            int access = backing.readAccess();
            if ((access & ACCESS_TEXTURE) != 0) {
                RenderTarget target = (RenderTarget) backing.lock(ACCESS_RENDERTARGET);
                ByteBuffer pixels = ByteBuffer.allocateDirect(getSize());
                GLToolbox.readTarget(target, pixels, mDimensions[0], mDimensions[1]);
                mAllocation.copyFrom(pixels.array());
            } else if ((access & ACCESS_BITMAP) != 0) {
                Bitmap bitmap = (Bitmap) backing.lock(ACCESS_BITMAP);
                mAllocation.copyFrom(bitmap);
            } else if ((access & ACCESS_BYTES) != 0) {
                ByteBuffer buffer = (ByteBuffer) backing.lock(ACCESS_BYTES);
                if (buffer.order() != ByteOrder.nativeOrder()) {
                    throw new RuntimeException(
                            "Trying to sync to the ByteBufferBacking with non-native byte order!");
                }
                byte[] bytes;
                if (buffer.hasArray()) {
                    bytes = buffer.array();
                } else {
                    bytes = new byte[getSize()];
                    buffer.get(bytes);
                    buffer.rewind();
                }
                mAllocation.copyFromUnchecked(bytes);
            } else {
                throw new RuntimeException("Cannot sync allocation backing!");
            }
            backing.unlock();
            mIsDirty = false;
!!!34737463.java!!!	lock(in accessType : int) : Object
            return mAllocation;
!!!34737719.java!!!	getType() : int
            return BACKING_ALLOCATION;
!!!34737847.java!!!	shouldCache() : boolean
            return true;
!!!34737975.java!!!	destroy() : void
            if (mAllocation != null) {
                mAllocation.destroy();
                mAllocation = null;
            }
!!!34738103.java!!!	getSize() : int
            int elementCount = 1;
            for (int dim : mDimensions) {
                elementCount *= dim;
            }
            return getElementSize() * elementCount;
!!!34738231.java!!!	isSupported() : boolean
            return Build.VERSION.SDK_INT >= 11;
!!!34738359.java!!!	assertCompatible(inout type : FrameType) : void
            // TODO: consider adding support for other data types.
            if (type.getElementId() != FrameType.ELEMENT_RGBA8888
                    && type.getElementId() != FrameType.ELEMENT_FLOAT32) {
                throw new RuntimeException(
                        "Cannot allocate allocation with a non-RGBA or non-float data type!");
            }
            if (mDimensions == null || mDimensions.length > 2) {
                throw new RuntimeException(
                        "Cannot create an allocation with more than 2 dimensions!");
            }
