class Filter
!!!34738615.java!!!	Filter(inout context : MffContext, inout name : String)
        mName = name;
        mContext = context;
!!!34738743.java!!!	isAvailable(inout filterClassName : String) : boolean
        return FilterFactory.sharedFactory().isFilterAvailable(filterClassName);
!!!34738871.java!!!	getName() : String
        return mName;
!!!34738999.java!!!	getSignature() : Signature
        return new Signature();
!!!34739127.java!!!	getContext() : MffContext
        return mContext;
!!!34739255.java!!!	isActive() : boolean
        return mIsActive;
!!!34739383.java!!!	activate() : void
        assertIsPaused();
        if (!mIsActive) {
            mIsActive = true;
        }
!!!34739511.java!!!	deactivate() : void
        // TODO: Support close-on-deactivate (must happen in processing thread).
        assertIsPaused();
        if (mIsActive) {
            mIsActive = false;
        }
!!!34739639.java!!!	getConnectedInputPorts() : InputPort
        return mConnectedInputPortArray;
!!!34739767.java!!!	getConnectedOutputPorts() : OutputPort
        return mConnectedOutputPortArray;
!!!34739895.java!!!	getConnectedInputPort(inout name : String) : InputPort
        return mConnectedInputPorts.get(name);
!!!34740023.java!!!	getConnectedOutputPort(inout name : String) : OutputPort
        return mConnectedOutputPorts.get(name);
!!!34740663.java!!!	isOpen() : boolean
        return mState.check(State.STATE_OPEN);
!!!34740791.java!!!	toString() : String
        return mName + " (" + getClass().getSimpleName() + ")";
!!!34741559.java!!!	inputConditionsMet() : boolean
        if (mConnectedInputPortArray.length > 0) {
            int inputFrames = 0;
            // [Non-iterator looping]
            for (int i = 0; i < mConnectedInputPortArray.length; ++i) {
                if (!mConnectedInputPortArray[i].conditionsMet()) {
                    return false;
                } else if (mConnectedInputPortArray[i].hasFrame()) {
                    ++inputFrames;
                }
            }
            if (inputFrames < mMinimumAvailableInputs) {
                return false;
            }
        }
        return true;
!!!34741687.java!!!	outputConditionsMet() : boolean
        if (mConnectedOutputPortArray.length > 0) {
            int availableOutputs = 0;
            for (int i = 0; i < mConnectedOutputPortArray.length; ++i) {
                if (!mConnectedOutputPortArray[i].conditionsMet()) {
                    return false;
                } else if (mConnectedOutputPortArray[i].isAvailable()) {
                    ++availableOutputs;
                }
            }
            if (availableOutputs < mMinimumAvailableOutputs) {
                return false;
            }
        }
        return true;
!!!34741815.java!!!	inSchedulableState() : boolean
        return (mIsActive && !mState.check(State.STATE_CLOSED));
!!!34741943.java!!!	canSchedule() : boolean
        return inSchedulableState() && inputConditionsMet() && outputConditionsMet();
!!!34742071.java!!!	getFrameManager() : FrameManager
        return mFilterGraph.mRunner != null ? mFilterGraph.mRunner.getFrameManager() : null;
!!!34742199.java!!!	isRunning() : boolean
        return mFilterGraph != null && mFilterGraph.mRunner != null
                && mFilterGraph.mRunner.isRunning();
!!!34742327.java!!!	performPreparation(inout runnable : Runnable) : boolean
        synchronized (mState) {
            if (mState.current == State.STATE_OPEN) {
                return false;
            } else {
                runnable.run();
                return true;
            }
        }
!!!34742455.java!!!	requestClose() : void
        mRequests |= REQUEST_FLAG_CLOSE;
!!!34742583.java!!!	setMinimumAvailableInputs(in count : int) : void
        mMinimumAvailableInputs = count;
!!!34742711.java!!!	getMinimumAvailableInputs() : int
        return mMinimumAvailableInputs;
!!!34742839.java!!!	setMinimumAvailableOutputs(in count : int) : void
        mMinimumAvailableOutputs = count;
!!!34742967.java!!!	getMinimumAvailableOutputs() : int
        return mMinimumAvailableOutputs;
!!!34743095.java!!!	enterSleepState() : void
        mIsSleeping.set(true);
!!!34743223.java!!!	wakeUp() : void
        if (mIsSleeping.getAndSet(false)) {
            if (isRunning()) {
                mFilterGraph.mRunner.signalWakeUp();
            }
        }
!!!34743351.java!!!	isOpenGLSupported() : boolean
        return mFilterGraph.mRunner.isOpenGLSupported();
!!!34743479.java!!!	connect(inout outputName : String, inout targetFilter : Filter, inout inputName : String) : void
        // Make sure not connected already
        if (getConnectedOutputPort(outputName) != null) {
            throw new RuntimeException("Attempting to connect already connected output port '"
                + outputName + "' of filter " + this + "'!");
        } else if (targetFilter.getConnectedInputPort(inputName) != null) {
            throw new RuntimeException("Attempting to connect already connected input port '"
                + inputName + "' of filter " + targetFilter + "'!");
        }

        // Establish connection
        InputPort inputPort = targetFilter.newInputPort(inputName);
        OutputPort outputPort = newOutputPort(outputName);
        outputPort.setTarget(inputPort);

        // Fire attachment callbacks
        targetFilter.onInputPortAttached(inputPort);
        onOutputPortAttached(outputPort);

        // Update array of ports (which is maintained for more efficient access)
        updatePortArrays();
!!!34743607.java!!!	getConnectedInputPortMap() : String
        return mConnectedInputPorts;
!!!34743735.java!!!	getConnectedOutputPortMap() : String
        return mConnectedOutputPorts;
!!!34743863.java!!!	execute() : void
        synchronized (mState) {
            autoPullInputs();
            mLastScheduleTime = SystemClock.elapsedRealtime();
            if (mState.current == State.STATE_UNPREPARED) {
                onPrepare();
                mState.current = State.STATE_PREPARED;
            }
            if (mState.current == State.STATE_PREPARED) {
                openPorts();
                onOpen();
                mState.current = State.STATE_OPEN;
            }
            if (mState.current == State.STATE_OPEN) {
                onProcess();
                if (mRequests != REQUEST_FLAG_NONE) {
                    processRequests();
                }
            }
        }
        autoReleaseFrames();
        ++mScheduleCount;
!!!34743991.java!!!	performClose() : void
        synchronized (mState) {
            if (mState.current == State.STATE_OPEN) {
                onClose();
                mIsSleeping.set(false);
                mState.current = State.STATE_CLOSED;
                mCurrentTimestamp = Frame.TIMESTAMP_NOT_SET;
            }
        }
!!!34744119.java!!!	softReset() : void
        synchronized (mState) {
            performClose();
            if (mState.current == State.STATE_CLOSED) {
                mState.current = State.STATE_PREPARED;
            }
        }
!!!34744247.java!!!	performTearDown() : void
        synchronized (mState) {
            if (mState.current == State.STATE_OPEN) {
                throw new RuntimeException("Attempting to tear-down filter " + this + " which is "
                    + "in an open state!");
            } else if (mState.current != State.STATE_DESTROYED
                    && mState.current != State.STATE_UNPREPARED) {
                onTearDown();
                mState.current = State.STATE_DESTROYED;
            }
        }
!!!34744375.java!!!	insertIntoFilterGraph(inout graph : FilterGraph) : void
        mFilterGraph = graph;
        updatePortArrays();
!!!34744503.java!!!	getScheduleCount() : int
        return mScheduleCount;
!!!34744631.java!!!	resetScheduleCount() : void
        mScheduleCount = 0;
!!!34744759.java!!!	openPorts() : void
        // Opening the output ports will open the connected input ports
        for (OutputPort outputPort : mConnectedOutputPorts.values()) {
            openOutputPort(outputPort);
        }
!!!34744887.java!!!	addAutoReleaseFrame(inout frame : Frame) : void
        mAutoReleaseFrames.add(frame);
!!!34745015.java!!!	getCurrentTimestamp() : long
        return mCurrentTimestamp;
!!!34745143.java!!!	onPulledFrameWithTimestamp(in timestamp : long) : void
        if (timestamp > mCurrentTimestamp || mCurrentTimestamp == Frame.TIMESTAMP_NOT_SET) {
            mCurrentTimestamp = timestamp;
        }
!!!34745271.java!!!	openOutputPort(inout outPort : OutputPort) : void
        if (outPort.getQueue() == null) {
            try {
                FrameQueue.Builder builder = new FrameQueue.Builder();
                InputPort inPort = outPort.getTarget();
                outPort.onOpen(builder);
                inPort.onOpen(builder);
                Filter targetFilter = inPort.getFilter();
                String queueName = mName + "[" + outPort.getName() + "] -> " + targetFilter.mName
                        + "[" + inPort.getName() + "]";
                FrameQueue queue = builder.build(queueName);
                outPort.setQueue(queue);
                inPort.setQueue(queue);
            } catch (RuntimeException e) {
                throw new RuntimeException("Could not open output port " + outPort + "!", e);
            }
        }
!!!34745399.java!!!	isSleeping() : boolean
        return mIsSleeping.get();
!!!34745527.java!!!	getLastScheduleTime() : long
        return mLastScheduleTime ;
!!!34745655.java!!!	autoPullInputs() : void
        // [Non-iterator looping]
        for (int i = 0; i < mConnectedInputPortArray.length; ++i) {
            InputPort port = mConnectedInputPortArray[i];
            if (port.hasFrame() && port.isAutoPullEnabled()) {
                mConnectedInputPortArray[i].pullFrame();
            }
        }
!!!34745783.java!!!	autoReleaseFrames() : void
        // [Non-iterator looping]
        for (int i = 0; i < mAutoReleaseFrames.size(); ++i) {
            mAutoReleaseFrames.get(i).release();
        }
        mAutoReleaseFrames.clear();
!!!34745911.java!!!	newInputPort(inout name : String) : InputPort
        InputPort result = mConnectedInputPorts.get(name);
        if (result == null) {
            Signature.PortInfo info = getSignature().getInputPortInfo(name);
            result = new InputPort(this, name, info);
            mConnectedInputPorts.put(name, result);
        }
        return result;
!!!34746039.java!!!	newOutputPort(inout name : String) : OutputPort
        OutputPort result = mConnectedOutputPorts.get(name);
        if (result == null) {
            Signature.PortInfo info = getSignature().getOutputPortInfo(name);
            result = new OutputPort(this, name, info);
            mConnectedOutputPorts.put(name, result);
        }
        return result;
!!!34746167.java!!!	processRequests() : void
        if ((mRequests & REQUEST_FLAG_CLOSE) != 0) {
            performClose();
            mRequests = REQUEST_FLAG_NONE;
        }
!!!34746295.java!!!	assertIsPaused() : void
        GraphRunner runner = GraphRunner.current();
        if (runner != null && !runner.isPaused() && !runner.isStopped()) {
            throw new RuntimeException("Attempting to modify filter state while runner is "
                + "executing. Please pause or stop the runner first!");
        }
!!!34746423.java!!!	updatePortArrays() : void
        // Copy our port-maps to arrays for faster non-iterator access
        mConnectedInputPortArray = mConnectedInputPorts.values().toArray(new InputPort[0]);
        mConnectedOutputPortArray = mConnectedOutputPorts.values().toArray(new OutputPort[0]);
