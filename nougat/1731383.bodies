class MffContext
!!!34837687.java!!!	MffContext(inout context : Context)
        init(context, new Config());
!!!34837815.java!!!	MffContext(inout context : Context, inout config : MffContext::Config)
        init(context, config);
!!!34837943.java!!!	onPause() : void
        synchronized (mState) {
            if (mState.current == State.STATE_RUNNING) {
                if (mCameraStreamer != null) {
                    mCameraStreamer.halt();
                }
                stopRunners(true);
                mState.current = State.STATE_PAUSED;
            }
        }
!!!34838071.java!!!	onResume() : void
        synchronized (mState) {
            if (mState.current == State.STATE_PAUSED) {
                resumeRunners();
                resumeCamera();
                mState.current = State.STATE_RUNNING;
            }
        }
!!!34838199.java!!!	release() : void
        synchronized (mState) {
            if (mState.current != State.STATE_DESTROYED) {
                if (mCameraStreamer != null) {
                    mCameraStreamer.stop();
                    mCameraStreamer.tearDown();
                }
                if (Build.VERSION.SDK_INT >= 11) {
                    maybeDestroyRenderScript();
                }
                stopRunners(false);
                waitUntilStopped();
                tearDown();
                mState.current = State.STATE_DESTROYED;
            }
        }
!!!34838327.java!!!	setPreserveFramesOnPause(inout preserve : boolean) : void
        mPreserveFramesOnPause = preserve;
!!!34838455.java!!!	getPreserveFramesOnPause() : boolean
        return mPreserveFramesOnPause;
!!!34838583.java!!!	getApplicationContext() : Context
        return mApplicationContext;
!!!34838711.java!!!	getCameraStreamer() : CameraStreamer
        if (mCameraStreamer == null) {
            mCameraStreamer = new CameraStreamer(this);
        }
        return mCameraStreamer;
!!!34838839.java!!!	setEGLConfigChooser(in redSize : int, in greenSize : int, in blueSize : int, in alphaSize : int, in depthSize : int, in stencilSize : int) : void
        RenderTarget.setEGLConfigChooser(redSize,
                                         greenSize,
                                         blueSize,
                                         alphaSize,
                                         depthSize,
                                         stencilSize);
!!!34838967.java!!!	isOpenGLSupported() : boolean
        return mGLSupport;
!!!34839095.java!!!	isCameraStreamingSupported() : boolean
        return mCameraStreamingSupport;
!!!34839223.java!!!	getRenderScript() : RenderScript
        if (mRenderScript == null) {
            mRenderScript = RenderScript.create(mApplicationContext);
        }
        return mRenderScript;
!!!34839351.java!!!	assertOpenGLSupported() : void
        if (!isOpenGLSupported()) {
            throw new RuntimeException("Attempting to use OpenGL ES 2 in a context that does not "
                    + "support it!");
        }
!!!34839479.java!!!	addGraph(inout graph : FilterGraph) : void
        synchronized (mGraphs) {
            mGraphs.add(graph);
        }
!!!34839607.java!!!	addRunner(inout runner : GraphRunner) : void
        synchronized (mRunners) {
            mRunners.add(runner);
        }
!!!34839735.java!!!	getDummySurfaceView() : SurfaceView
        return mDummySurfaceView;
!!!34839863.java!!!	postRunnable(inout runnable : Runnable) : void
        mHandler.post(runnable);
!!!34839991.java!!!	init(inout context : Context, inout config : MffContext::Config) : void
        determineGLSupport(context, config);
        determineCameraSupport(config);
        createHandler();
        mApplicationContext = context.getApplicationContext();
        fetchDummySurfaceView(context, config);
!!!34840119.java!!!	fetchDummySurfaceView(inout context : Context, inout config : MffContext::Config) : void
        if (config.requireCamera && CameraStreamer.requireDummySurfaceView()) {
            mDummySurfaceView = config.dummySurface != null
                    ? config.dummySurface
                    : createDummySurfaceView(context);
        }
!!!34840247.java!!!	determineGLSupport(inout context : Context, inout config : MffContext::Config) : void
        if (config.forceNoGL) {
            mGLSupport = false;
        } else {
            mGLSupport = getPlatformSupportsGLES2(context);
            if (config.requireOpenGL && !mGLSupport) {
                throw new RuntimeException("Cannot create context that requires GL support on "
                        + "this platform!");
            }
        }
!!!34840375.java!!!	determineCameraSupport(inout config : MffContext::Config) : void
        mCameraStreamingSupport = (CameraStreamer.getNumberOfCameras() > 0);
        if (config.requireCamera && !mCameraStreamingSupport) {
            throw new RuntimeException("Cannot create context that requires a camera on "
                    + "this platform!");
        }
!!!34840503.java!!!	getPlatformSupportsGLES2(inout context : Context) : boolean
        ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
        ConfigurationInfo configurationInfo = am.getDeviceConfigurationInfo();
        return configurationInfo.reqGlEsVersion >= 0x20000;
!!!34840631.java!!!	createHandler() : void
        if (Looper.myLooper() == null) {
            throw new RuntimeException("MffContext must be created in a thread with a Looper!");
        }
        mHandler = new Handler();
!!!34840759.java!!!	stopRunners(inout haltOnly : boolean) : void
        synchronized (mRunners) {
            // Halt all runners (does nothing if not running)
            for (GraphRunner runner : mRunners) {
                if (haltOnly) {
                    runner.halt();
                } else {
                    runner.stop();
                }
            }
            // Flush all graphs if requested (this is queued up after the call to halt)
            if (!mPreserveFramesOnPause) {
                for (GraphRunner runner : mRunners) {
                    runner.flushFrames();
                }
            }
        }
!!!34840887.java!!!	resumeRunners() : void
        synchronized (mRunners) {
            for (GraphRunner runner : mRunners) {
                runner.restart();
            }
        }
!!!34841015.java!!!	resumeCamera() : void
        // Restart only affects previously halted cameras that were running.
        if (mCameraStreamer != null) {
            mCameraStreamer.restart();
        }
!!!34841143.java!!!	waitUntilStopped() : void
        for (GraphRunner runner : mRunners) {
            runner.waitUntilStop();
        }
!!!34841271.java!!!	tearDown() : void
        // Tear down graphs
        for (FilterGraph graph : mGraphs) {
            graph.tearDown();
        }

        // Tear down runners
        for (GraphRunner runner : mRunners) {
            runner.tearDown();
        }
!!!34841399.java!!!	createDummySurfaceView(inout context : Context) : SurfaceView
        // This is only called on Gingerbread devices, so deprecation warning is unnecessary.
        SurfaceView dummySurfaceView = new SurfaceView(context);
        dummySurfaceView.getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
        // If we have an activity for this context we'll add the SurfaceView to it (as a 1x1 view
        // in the top-left corner). If not, we warn the user that they may need to add one manually.
        Activity activity = findActivityForContext(context);
        if (activity != null) {
            ViewGroup.LayoutParams params = new ViewGroup.LayoutParams(1, 1);
            activity.addContentView(dummySurfaceView, params);
        } else {
            Log.w("MffContext", "Could not find activity for dummy surface! Consider specifying "
                    + "your own SurfaceView!");
        }
        return dummySurfaceView;
!!!34841527.java!!!	findActivityForContext(inout context : Context) : Activity
        return (context instanceof Activity) ? (Activity) context : null;
!!!34841655.java!!!	maybeDestroyRenderScript() : void
        if (mRenderScript != null) {
            mRenderScript.destroy();
            mRenderScript = null;
        }
