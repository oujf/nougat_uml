class FilterGraph
!!!34774455.java!!!	attachToRunner(inout runner : GraphRunner) : void
        if (mRunner == null) {
            for (FilterGraph subGraph : mSubGraphs) {
                subGraph.attachToRunner(runner);
            }
            runner.attachGraph(this);
            mRunner = runner;
        } else if (mRunner != runner) {
            throw new RuntimeException("Cannot attach FilterGraph to GraphRunner that is already "
                + "attached to another GraphRunner!");
        }
!!!34774583.java!!!	tearDown() : void
        assertNotRunning();
        if (mParentGraph != null) {
            throw new RuntimeException("Attempting to tear down sub-graph!");
        }
        if (mRunner != null) {
            mRunner.tearDownGraph(this);
        }
        for (FilterGraph subGraph : mSubGraphs) {
            subGraph.mParentGraph = null;
            subGraph.tearDown();
        }
        mSubGraphs.clear();
!!!34774711.java!!!	getContext() : MffContext
        return mContext;
!!!34774839.java!!!	getFilter(inout name : String) : Filter
        return mFilterMap.get(name);
!!!34774967.java!!!	getVariable(inout name : String) : VariableSource
        Filter result = mFilterMap.get(name);
        if (result != null && result instanceof VariableSource) {
            return (VariableSource)result;
        } else {
            throw new IllegalArgumentException("Unknown variable '" + name + "' specified!");
        }
!!!34775095.java!!!	getGraphOutput(inout name : String) : GraphOutputTarget
        Filter result = mFilterMap.get(name);
        if (result != null && result instanceof GraphOutputTarget) {
            return (GraphOutputTarget)result;
        } else {
            throw new IllegalArgumentException("Unknown target '" + name + "' specified!");
        }
!!!34775223.java!!!	getGraphInput(inout name : String) : GraphInputSource
        Filter result = mFilterMap.get(name);
        if (result != null && result instanceof GraphInputSource) {
            return (GraphInputSource)result;
        } else {
            throw new IllegalArgumentException("Unknown source '" + name + "' specified!");
        }
!!!34775351.java!!!	bindFilterToView(inout filterName : String, inout view : View) : void
        Filter filter = mFilterMap.get(filterName);
        if (filter != null && filter instanceof ViewFilter) {
            ((ViewFilter)filter).bindToView(view);
        } else {
            throw new IllegalArgumentException("Unknown view filter '" + filterName + "'!");
        }
!!!34775479.java!!!	bindValueTarget(inout filterName : String, inout listener : ValueListener, inout onCallerThread : boolean) : void
        Filter filter = mFilterMap.get(filterName);
        if (filter != null && filter instanceof ValueTarget) {
            ((ValueTarget)filter).setListener(listener, onCallerThread);
        } else {
            throw new IllegalArgumentException("Unknown ValueTarget filter '" + filterName + "'!");
        }
!!!34775607.java!!!	run() : GraphRunner
        GraphRunner runner = getRunner();
        runner.setIsVerbose(false);
        runner.start(this);
        return runner;
!!!34775735.java!!!	getRunner() : GraphRunner
        if (mRunner == null) {
            GraphRunner runner = new GraphRunner(mContext);
            attachToRunner(runner);
        }
        return mRunner;
!!!34775863.java!!!	isRunning() : boolean
        return mRunner != null && mRunner.isRunning();
!!!34775991.java!!!	checkSignatures() : void
        checkSignaturesForFilters(mFilterMap.values());
!!!34776119.java!!!	getAllFilters() : Filter
        return mAllFilters;
!!!34776247.java!!!	checkSignaturesForFilters(inout filters : Collection<Filter>) : void
        for (Filter filter : filters) {
            if (DEBUG) {
                Log.d("FilterGraph", "Checking filter " + filter.getName() + "...");
            }
            Signature signature = filter.getSignature();
            signature.checkInputPortsConform(filter);
            signature.checkOutputPortsConform(filter);
        }
!!!34776375.java!!!	wipe() : void
        mAllFilters = null;
        mFilterMap = null;
!!!34776503.java!!!	flushFrames() : void
        for (Filter filter : mFilterMap.values()) {
            for (InputPort inputPort : filter.getConnectedInputPorts()) {
                inputPort.clear();
            }
            for (OutputPort outputPort : filter.getConnectedOutputPorts()) {
                outputPort.clear();
            }
        }
!!!34776631.java!!!	getSubGraphs() : FilterGraph
        return mSubGraphs;
!!!34776759.java!!!	FilterGraph(inout context : MffContext, inout parentGraph : FilterGraph)
        mContext = context;
        mContext.addGraph(this);
        if (parentGraph != null) {
            mParentGraph = parentGraph;
            mParentGraph.mSubGraphs.add(this);
        }
!!!34776887.java!!!	assertNotRunning() : void
        if (isRunning()) {
            throw new IllegalStateException("Attempting to modify running graph!");
        }
