class InputPort
!!!34834615.java!!!	attachToOutputPort(inout outputPort : OutputPort) : void
        assertInAttachmentStage();
        mFilter.openOutputPort(outputPort);
        mQueueBuilder.attachQueue(outputPort.getQueue());
!!!34834743.java!!!	bindToListener(inout listener : InputPort::FrameListener) : void
        assertInAttachmentStage();
        mListener = listener;
!!!34834871.java!!!	bindToField(inout field : Field) : void
        assertInAttachmentStage();
        mListener = new FieldBinding(field);
!!!34834999.java!!!	bindToFieldNamed(inout fieldName : String) : void
        Field field = findFieldNamed(fieldName, mFilter.getClass());
        if (field == null) {
            throw new IllegalArgumentException("Attempting to bind to unknown field '"
                + fieldName + "'!");
        }
        bindToField(field);
!!!34835127.java!!!	setAutoPullEnabled(inout enabled : boolean) : void
        mAutoPullEnabled = enabled;
!!!34835255.java!!!	isAutoPullEnabled() : boolean
        return mAutoPullEnabled;
!!!34835383.java!!!	pullFrame() : Frame
        if (mQueue == null) {
            throw new IllegalStateException("Cannot pull frame from closed input port!");
        }
        Frame frame = mQueue.pullFrame();
        if (frame != null) {
            if (mListener != null) {
                mListener.onFrameReceived(this, frame);
            }
            //Log.i("InputPort", "Adding frame " + frame + " to auto-release pool");
            mFilter.addAutoReleaseFrame(frame);
            long timestamp = frame.getTimestamp();
            if (timestamp != Frame.TIMESTAMP_NOT_SET) {
                mFilter.onPulledFrameWithTimestamp(frame.getTimestamp());
            }
        }
        return frame;
!!!34835511.java!!!	peek() : Frame
        if (mQueue == null) {
            throw new IllegalStateException("Cannot pull frame from closed input port!");
        }
        return mQueue.peek();
!!!34835639.java!!!	isConnected() : boolean
        return mQueue != null;
!!!34835767.java!!!	hasFrame() : boolean
        return mQueue != null && mQueue.canPull();
!!!34835895.java!!!	setWaitsForFrame(inout wait : boolean) : void
        mWaitForFrame = wait;
!!!34836023.java!!!	waitsForFrame() : boolean
        return mWaitForFrame;
!!!34836151.java!!!	getName() : String
        return mName;
!!!34836279.java!!!	getType() : FrameType
        return getQueue().getType();
!!!34836407.java!!!	getFilter() : Filter
        return mFilter;
!!!34836535.java!!!	toString() : String
        return mFilter.getName() + ":" + mName;
!!!34836663.java!!!	InputPort(inout filter : Filter, inout name : String, inout info : Signature::PortInfo)
        mFilter = filter;
        mName = name;
        mInfo = info;
!!!34836791.java!!!	conditionsMet() : boolean
        return !mWaitForFrame || hasFrame();
!!!34836919.java!!!	onOpen(inout builder : FrameQueue::Builder) : void
        mQueueBuilder = builder;
        mQueueBuilder.setReadType(mInfo.type);
        mFilter.onInputPortOpen(this);
!!!34837047.java!!!	setQueue(inout queue : FrameQueue) : void
        mQueue = queue;
        mQueueBuilder = null;
!!!34837175.java!!!	getQueue() : FrameQueue
        return mQueue;
!!!34837303.java!!!	clear() : void
        if (mQueue != null) {
            mQueue.clear();
        }
!!!34837431.java!!!	assertInAttachmentStage() : void
        if (mQueueBuilder == null) {
            throw new IllegalStateException("Attempting to attach port while not in attachment "
                + "stage!");
        }
!!!34837559.java!!!	findFieldNamed(inout fieldName : String, inout clazz : Class) : Field
        Field field = null;
        try {
            field = clazz.getDeclaredField(fieldName);
            field.setAccessible(true);
        } catch (NoSuchFieldException e) {
            Class<?> superClass = clazz.getSuperclass();
            if (superClass != null) {
                field = findFieldNamed(fieldName, superClass);
            }
        }
        return field;
