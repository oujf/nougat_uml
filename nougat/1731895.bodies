class Frame
!!!34777015.java!!!	getType() : FrameType
        return mBackingStore.getFrameType();
!!!34777143.java!!!	getElementCount() : int
        return mBackingStore.getElementCount();
!!!34777271.java!!!	setTimestamp(in timestamp : long) : void
        mBackingStore.setTimestamp(timestamp);
!!!34777399.java!!!	getTimestamp() : long
        return mBackingStore.getTimestamp();
!!!34777527.java!!!	getTimestampMillis() : long
        return mBackingStore.getTimestamp() / 1000000L;
!!!34777655.java!!!	isReadOnly() : boolean
        return mReadOnly;
!!!34777783.java!!!	asFrameValue() : FrameValue
        return FrameValue.create(mBackingStore);
!!!34777911.java!!!	asFrameValues() : FrameValues
        return FrameValues.create(mBackingStore);
!!!34778039.java!!!	asFrameBuffer1D() : FrameBuffer1D
        return FrameBuffer1D.create(mBackingStore);
!!!34778167.java!!!	asFrameBuffer2D() : FrameBuffer2D
        return FrameBuffer2D.create(mBackingStore);
!!!34778295.java!!!	asFrameImage2D() : FrameImage2D
        return FrameImage2D.create(mBackingStore);
!!!34778423.java!!!	toString() : String
        return "Frame[" + getType().toString() + "]: " + mBackingStore;
!!!34778551.java!!!	equals(inout object : Object) : boolean
        return object instanceof Frame && ((Frame)object).mBackingStore == mBackingStore;
!!!34778679.java!!!	create(inout type : FrameType, inout dimensions : int) : Frame
        FrameManager manager = FrameManager.current();
        if (manager == null) {
            throw new IllegalStateException("Attempting to create new Frame outside of "
                + "FrameManager context!");
        }
        return new Frame(type, dimensions, manager);
!!!34778807.java!!!	release() : Frame
        mBackingStore = mBackingStore.release();
        return mBackingStore != null ? this : null;
!!!34778935.java!!!	retain() : Frame
        mBackingStore = mBackingStore.retain();
        return this;
!!!34779063.java!!!	unlock() : void
        if (!mBackingStore.unlock()) {
            throw new RuntimeException("Attempting to unlock frame that is not locked!");
        }
!!!34779191.java!!!	getDimensions() : int
        int[] dim = mBackingStore.getDimensions();
        return dim != null ? Arrays.copyOf(dim, dim.length) : null;
!!!34779319.java!!!	Frame(inout type : FrameType, inout dimensions : int, inout manager : FrameManager)
        mBackingStore = new BackingStore(type, dimensions, manager);
!!!34779447.java!!!	Frame(inout backingStore : BackingStore)
        mBackingStore = backingStore;
!!!34779575.java!!!	assertAccessible(in mode : int) : void
        // Make sure frame is in write-mode
        if (mReadOnly && mode == MODE_WRITE) {
            throw new RuntimeException("Attempting to write to read-only frame " + this + "!");
        }
!!!34779703.java!!!	setReadOnly(inout readOnly : boolean) : void
        mReadOnly = readOnly;
!!!34779831.java!!!	resize(inout newDims : int) : void
        int[] oldDims = mBackingStore.getDimensions();
        int oldCount = oldDims == null ? 0 : oldDims.length;
        int newCount = newDims == null ? 0 : newDims.length;
        if (oldCount != newCount) {
            throw new IllegalArgumentException("Cannot resize " + oldCount + "-dimensional "
                + "Frame to " + newCount + "-dimensional Frame!");
        } else if (newDims != null && !Arrays.equals(oldDims, newDims)) {
            mBackingStore.resize(newDims);
        }
!!!34779959.java!!!	makeCpuCopy(inout frameManager : FrameManager) : Frame
        Frame frame = new Frame(getType(), getDimensions(), frameManager);
        frame.mBackingStore.importStore(mBackingStore);
        return frame;
