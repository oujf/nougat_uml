class Signature
!!!34853303.java!!!	addInputPort(inout name : String, in flags : int, inout type : FrameType) : Signature
        addInputPort(name, new PortInfo(flags, type));
        return this;
!!!34853431.java!!!	addOutputPort(inout name : String, in flags : int, inout type : FrameType) : Signature
        addOutputPort(name, new PortInfo(flags, type));
        return this;
!!!34853559.java!!!	disallowOtherInputs() : Signature
        mAllowOtherInputs = false;
        return this;
!!!34853687.java!!!	disallowOtherOutputs() : Signature
        mAllowOtherOutputs = false;
        return this;
!!!34853815.java!!!	disallowOtherPorts() : Signature
        mAllowOtherInputs = false;
        mAllowOtherOutputs = false;
        return this;
!!!34853943.java!!!	toString() : String
        StringBuffer stringBuffer = new StringBuffer();
        for (Entry<String, PortInfo> entry : mInputPorts.entrySet()) {
            stringBuffer.append(entry.getValue().toString("input", entry.getKey()) + "\n");
        }
        for (Entry<String, PortInfo> entry : mOutputPorts.entrySet()) {
            stringBuffer.append(entry.getValue().toString("output", entry.getKey()) + "\n");
        }
        if (!mAllowOtherInputs) {
            stringBuffer.append("disallow other inputs\n");
        }
        if (!mAllowOtherOutputs) {
            stringBuffer.append("disallow other outputs\n");
        }
        return stringBuffer.toString();
!!!34854071.java!!!	getInputPortInfo(inout name : String) : Signature::PortInfo
        PortInfo result = mInputPorts != null ? mInputPorts.get(name) : null;
        return result != null ? result : new PortInfo();
!!!34854199.java!!!	getOutputPortInfo(inout name : String) : Signature::PortInfo
        PortInfo result = mOutputPorts != null ? mOutputPorts.get(name) : null;
        return result != null ? result : new PortInfo();
!!!34854327.java!!!	checkInputPortsConform(inout filter : Filter) : void
        Set<String> filterInputs = new HashSet<String>();
        filterInputs.addAll(filter.getConnectedInputPortMap().keySet());
        if (mInputPorts != null) {
            for (Entry<String, PortInfo> entry : mInputPorts.entrySet()) {
                String portName = entry.getKey();
                PortInfo portInfo = entry.getValue();
                InputPort inputPort = filter.getConnectedInputPort(portName);
                if (inputPort == null && portInfo.isRequired()) {
                    throw new RuntimeException("Filter " + filter + " does not have required "
                        + "input port '" + portName + "'!");
                }
                filterInputs.remove(portName);
            }
        }
        if (!mAllowOtherInputs && !filterInputs.isEmpty()) {
            throw new RuntimeException("Filter " + filter + " has invalid input ports: "
                + filterInputs + "!");
        }
!!!34854455.java!!!	checkOutputPortsConform(inout filter : Filter) : void
        Set<String> filterOutputs = new HashSet<String>();
        filterOutputs.addAll(filter.getConnectedOutputPortMap().keySet());
        if (mOutputPorts != null) {
            for (Entry<String, PortInfo> entry : mOutputPorts.entrySet()) {
                String portName = entry.getKey();
                PortInfo portInfo = entry.getValue();
                OutputPort outputPort = filter.getConnectedOutputPort(portName);
                if (outputPort == null && portInfo.isRequired()) {
                    throw new RuntimeException("Filter " + filter + " does not have required "
                        + "output port '" + portName + "'!");
                }
                filterOutputs.remove(portName);
            }
        }
        if (!mAllowOtherOutputs && !filterOutputs.isEmpty()) {
            throw new RuntimeException("Filter " + filter + " has invalid output ports: "
                + filterOutputs + "!");
        }
!!!34854583.java!!!	getInputPorts() : String
        return mInputPorts;
!!!34854711.java!!!	getOutputPorts() : String
        return mOutputPorts;
!!!34854839.java!!!	addInputPort(inout name : String, inout portInfo : Signature::PortInfo) : void
        if (mInputPorts == null) {
            mInputPorts = new HashMap<String, PortInfo>();
        }
        if (mInputPorts.containsKey(name)) {
            throw new RuntimeException("Attempting to add duplicate input port '" + name + "'!");
        }
        mInputPorts.put(name, portInfo);
!!!34854967.java!!!	addOutputPort(inout name : String, inout portInfo : Signature::PortInfo) : void
        if (mOutputPorts == null) {
            mOutputPorts = new HashMap<String, PortInfo>();
        }
        if (mOutputPorts.containsKey(name)) {
            throw new RuntimeException("Attempting to add duplicate output port '" + name + "'!");
        }
        mOutputPorts.put(name, portInfo);
