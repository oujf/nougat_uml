class ImageShader
!!!34825783.java!!!	ImageShader(inout fragmentShader : String)
        mProgram = createProgram(mDefaultVertexShader, fragmentShader);
        scanUniforms();
!!!34825911.java!!!	ImageShader(inout vertexShader : String, inout fragmentShader : String)
        mProgram = createProgram(vertexShader, fragmentShader);
        scanUniforms();
!!!34826039.java!!!	createIdentity() : ImageShader
        return new ImageShader(mIdentityShader);
!!!34826167.java!!!	createIdentity(inout vertexShader : String) : ImageShader
        return new ImageShader(vertexShader, mIdentityShader);
!!!34826295.java!!!	renderTextureToTarget(inout texture : TextureSource, inout target : RenderTarget, in width : int, in height : int) : void
        ImageShader shader = RenderTarget.currentTarget().getIdentityShader();
        shader.process(texture, target, width, height);
!!!34826423.java!!!	process(inout input : FrameImage2D, inout output : FrameImage2D) : void
        TextureSource texSource = input.lockTextureSource();
        RenderTarget renderTarget = output.lockRenderTarget();
        processMulti(new TextureSource[] { texSource },
                     renderTarget,
                     output.getWidth(),
                     output.getHeight());
        input.unlock();
        output.unlock();
!!!34826551.java!!!	processMulti(inout inputs : FrameImage2D, inout output : FrameImage2D) : void
        TextureSource[] texSources = new TextureSource[inputs.length];
        for (int i = 0; i < inputs.length; ++i) {
            texSources[i] = inputs[i].lockTextureSource();
        }
        RenderTarget renderTarget = output.lockRenderTarget();
        processMulti(texSources,
                     renderTarget,
                     output.getWidth(),
                     output.getHeight());
        for (FrameImage2D input : inputs) {
            input.unlock();
        }
        output.unlock();
!!!34826679.java!!!	process(inout texture : TextureSource, inout target : RenderTarget, in width : int, in height : int) : void
        processMulti(new TextureSource[] { texture }, target, width, height);
!!!34826807.java!!!	processMulti(inout sources : TextureSource, inout target : RenderTarget, in width : int, in height : int) : void
        GLToolbox.checkGlError("Unknown Operation");
        checkExecutable();
        checkTexCount(sources.length);
        focusTarget(target, width, height);
        pushShaderState();
        bindInputTextures(sources);
        render();
!!!34826935.java!!!	processNoInput(inout output : FrameImage2D) : void
        RenderTarget renderTarget = output.lockRenderTarget();
        processNoInput(renderTarget, output.getWidth(), output.getHeight());
        output.unlock();
!!!34827063.java!!!	processNoInput(inout target : RenderTarget, in width : int, in height : int) : void
        processMulti(new TextureSource[] {}, target, width, height);
!!!34827191.java!!!	getUniformLocation(inout name : String) : int
        return getProgramUniform(name, true).getLocation();
!!!34827319.java!!!	getAttributeLocation(inout name : String) : int
        if (name.equals(positionAttributeName()) || name.equals(texCoordAttributeName())) {
            Log.w("ImageShader", "Attempting to access internal attribute '" + name
                + "' directly!");
        }
        int loc = GLES20.glGetAttribLocation(mProgram, name);
        if (loc < 0) {
            throw new RuntimeException("Unknown attribute '" + name + "' in shader program!");
        }
        return loc;
!!!34827447.java!!!	setUniformValue(inout uniformName : String, in value : int) : void
        useProgram();
        int uniformHandle = getUniformLocation(uniformName);
        GLES20.glUniform1i(uniformHandle, value);
        GLToolbox.checkGlError("Set uniform value (" + uniformName + ")");
!!!34827575.java!!!	setUniformValue(inout uniformName : String, in value : float) : void
        useProgram();
        int uniformHandle = getUniformLocation(uniformName);
        GLES20.glUniform1f(uniformHandle, value);
        GLToolbox.checkGlError("Set uniform value (" + uniformName + ")");
!!!34827703.java!!!	setUniformValue(inout uniformName : String, inout values : int) : void
        ProgramUniform uniform = getProgramUniform(uniformName, true);
        useProgram();
        int len = values.length;
        switch (uniform.getType()) {
            case GLES20.GL_INT:
                checkUniformAssignment(uniform, len, 1);
                GLES20.glUniform1iv(uniform.getLocation(), len, values, 0);
                break;
            case GLES20.GL_INT_VEC2:
                checkUniformAssignment(uniform, len, 2);
                GLES20.glUniform2iv(uniform.getLocation(), len / 2, values, 0);
                break;
            case GLES20.GL_INT_VEC3:
                checkUniformAssignment(uniform, len, 3);
                GLES20.glUniform2iv(uniform.getLocation(), len / 3, values, 0);
                break;
            case GLES20.GL_INT_VEC4:
                checkUniformAssignment(uniform, len, 4);
                GLES20.glUniform2iv(uniform.getLocation(), len / 4, values, 0);
                break;
            default:
                throw new RuntimeException("Cannot assign int-array to incompatible uniform type "
                    + "for uniform '" + uniformName + "'!");
        }
        GLToolbox.checkGlError("Set uniform value (" + uniformName + ")");
!!!34827831.java!!!	setUniformValue(inout uniformName : String, inout values : float) : void
        ProgramUniform uniform = getProgramUniform(uniformName, true);
        useProgram();
        int len = values.length;
        switch (uniform.getType()) {
            case GLES20.GL_FLOAT:
                checkUniformAssignment(uniform, len, 1);
                GLES20.glUniform1fv(uniform.getLocation(), len, values, 0);
                break;
            case GLES20.GL_FLOAT_VEC2:
                checkUniformAssignment(uniform, len, 2);
                GLES20.glUniform2fv(uniform.getLocation(), len / 2, values, 0);
                break;
            case GLES20.GL_FLOAT_VEC3:
                checkUniformAssignment(uniform, len, 3);
                GLES20.glUniform3fv(uniform.getLocation(), len / 3, values, 0);
                break;
            case GLES20.GL_FLOAT_VEC4:
                checkUniformAssignment(uniform, len, 4);
                GLES20.glUniform4fv(uniform.getLocation(), len / 4, values, 0);
                break;
            case GLES20.GL_FLOAT_MAT2:
                checkUniformAssignment(uniform, len, 4);
                GLES20.glUniformMatrix2fv(uniform.getLocation(), len / 4, false, values, 0);
                break;
            case GLES20.GL_FLOAT_MAT3:
                checkUniformAssignment(uniform, len, 9);
                GLES20.glUniformMatrix3fv(uniform.getLocation(), len / 9, false, values, 0);
                break;
            case GLES20.GL_FLOAT_MAT4:
                checkUniformAssignment(uniform, len, 16);
                GLES20.glUniformMatrix4fv(uniform.getLocation(), len / 16, false, values, 0);
                break;
            default:
                throw new RuntimeException("Cannot assign float-array to incompatible uniform type "
                    + "for uniform '" + uniformName + "'!");
        }
        GLToolbox.checkGlError("Set uniform value (" + uniformName + ")");
!!!34827959.java!!!	setAttributeValues(inout attributeName : String, inout data : float, in components : int) : void
        VertexAttribute attr = getProgramAttribute(attributeName, true);
        attr.set(false, FLOAT_SIZE * components, components, GLES20.GL_FLOAT, data);
!!!34828087.java!!!	setAttributeValues(inout attributeName : String, in vbo : int, in type : int, in components : int, in stride : int, in offset : int, inout normalize : boolean) : void
        VertexAttribute attr = getProgramAttribute(attributeName, true);
        attr.set(normalize, offset, stride, components, type, vbo);
!!!34828215.java!!!	setSourceRect(in x : float, in y : float, in width : float, in height : float) : void
        setSourceCoords(new float[] { x, y, x + width, y, x, y + height, x + width, y + height });
!!!34828343.java!!!	setSourceRect(inout rect : RectF) : void
        setSourceRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);
!!!34828471.java!!!	setSourceQuad(inout quad : Quad) : void
        setSourceCoords(new float[] { quad.topLeft().x,     quad.topLeft().y,
                                      quad.topRight().x,    quad.topRight().y,
                                      quad.bottomLeft().x,  quad.bottomLeft().y,
                                      quad.bottomRight().x, quad.bottomRight().y });
!!!34828599.java!!!	setSourceCoords(inout coords : float) : void
        if (coords.length != 8) {
            throw new IllegalArgumentException("Expected 8 coordinates as source coordinates but "
                + "got " + coords.length + " coordinates!");
        }
        mSourceCoords = Arrays.copyOf(coords, 8);
!!!34828727.java!!!	setSourceTransform(inout matrix : float) : void
        if (matrix.length != 16) {
            throw new IllegalArgumentException("Expected 4x4 matrix for source transform!");
        }
        setSourceCoords(new float[] {
            matrix[12],
            matrix[13],

            matrix[0] + matrix[12],
            matrix[1] + matrix[13],

            matrix[4] + matrix[12],
            matrix[5] + matrix[13],

            matrix[0] + matrix[4] + matrix[12],
            matrix[1] + matrix[5] + matrix[13],
        });
!!!34828855.java!!!	setTargetRect(in x : float, in y : float, in width : float, in height : float) : void
        setTargetCoords(new float[] { x, y,
                                      x + width, y,
                                      x, y + height,
                                      x + width, y + height });
!!!34828983.java!!!	setTargetRect(inout rect : RectF) : void
        setTargetCoords(new float[] { rect.left,    rect.top,
                                      rect.right,   rect.top,
                                      rect.left,    rect.bottom,
                                      rect.right,   rect.bottom });
!!!34829111.java!!!	setTargetQuad(inout quad : Quad) : void
        setTargetCoords(new float[] { quad.topLeft().x,     quad.topLeft().y,
                                      quad.topRight().x,    quad.topRight().y,
                                      quad.bottomLeft().x,  quad.bottomLeft().y,
                                      quad.bottomRight().x, quad.bottomRight().y });
!!!34829239.java!!!	setTargetCoords(inout coords : float) : void
        if (coords.length != 8) {
            throw new IllegalArgumentException("Expected 8 coordinates as target coordinates but "
                + "got " + coords.length + " coordinates!");
        }
        mTargetCoords = new float[8];
        for (int i = 0; i < 8; ++i) {
            mTargetCoords[i] = coords[i] * 2f - 1f;
        }
!!!34829367.java!!!	setTargetTransform(inout matrix : float) : void
        if (matrix.length != 16) {
            throw new IllegalArgumentException("Expected 4x4 matrix for target transform!");
        }
        setTargetCoords(new float[] {
            matrix[12],
            matrix[13],

            matrix[0] + matrix[12],
            matrix[1] + matrix[13],

            matrix[4] + matrix[12],
            matrix[5] + matrix[13],

            matrix[0] + matrix[4] + matrix[12],
            matrix[1] + matrix[5] + matrix[13],
        });
!!!34829495.java!!!	setClearsOutput(inout clears : boolean) : void
        mClearsOutput = clears;
!!!34829623.java!!!	getClearsOutput() : boolean
        return mClearsOutput;
!!!34829751.java!!!	setClearColor(inout rgba : float) : void
        mClearColor = rgba;
!!!34829879.java!!!	getClearColor() : float
        return mClearColor;
!!!34830007.java!!!	setClearBufferMask(in bufferMask : int) : void
        mClearBuffers = bufferMask;
!!!34830135.java!!!	getClearBufferMask() : int
        return mClearBuffers;
!!!34830263.java!!!	setBlendEnabled(inout enable : boolean) : void
        mBlendEnabled = enable;
!!!34830391.java!!!	getBlendEnabled() : boolean
        return mBlendEnabled;
!!!34830519.java!!!	setBlendFunc(in sFactor : int, in dFactor : int) : void
        mSFactor = sFactor;
        mDFactor = dFactor;
!!!34830647.java!!!	setDrawMode(in drawMode : int) : void
        mDrawMode = drawMode;
!!!34830775.java!!!	getDrawMode() : int
        return mDrawMode;
!!!34830903.java!!!	setVertexCount(in count : int) : void
        mVertexCount = count;
!!!34831031.java!!!	getVertexCount() : int
        return mVertexCount;
!!!34831159.java!!!	setBaseTextureUnit(in baseTexUnit : int) : void
        mBaseTexUnit = baseTexUnit;
!!!34831287.java!!!	baseTextureUnit() : int
        return mBaseTexUnit;
!!!34831415.java!!!	texCoordAttributeName() : String
        return "a_texcoord";
!!!34831543.java!!!	positionAttributeName() : String
        return "a_position";
!!!34831671.java!!!	inputTextureUniformName(in index : int) : String
        return "tex_sampler_" + index;
!!!34831799.java!!!	maxTextureUnits() : int
        return GLES20.GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS;
!!!34831927.java!!!	finalize() : void
        GLES20.glDeleteProgram(mProgram);
!!!34832055.java!!!	pushShaderState() : void
        useProgram();
        updateSourceCoordAttribute();
        updateTargetCoordAttribute();
        pushAttributes();
        if (mClearsOutput) {
            GLES20.glClearColor(mClearColor[0], mClearColor[1], mClearColor[2], mClearColor[3]);
            GLES20.glClear(mClearBuffers);
        }
        if (mBlendEnabled) {
            GLES20.glEnable(GLES20.GL_BLEND);
            GLES20.glBlendFunc(mSFactor, mDFactor);
        } else {
            GLES20.glDisable(GLES20.GL_BLEND);
        }
        GLToolbox.checkGlError("Set render variables");
!!!34832183.java!!!	focusTarget(inout target : RenderTarget, in width : int, in height : int) : void
        target.focus();
        GLES20.glViewport(0, 0, width, height);
        GLToolbox.checkGlError("glViewport");
!!!34832311.java!!!	bindInputTextures(inout sources : TextureSource) : void
        for (int i = 0; i < sources.length; ++i) {
            // Activate texture unit i
            GLES20.glActiveTexture(baseTextureUnit() + i);

            // Bind texture
            sources[i].bind();

            // Assign the texture uniform in the shader to unit i
            int texUniform = GLES20.glGetUniformLocation(mProgram, inputTextureUniformName(i));
            if (texUniform >= 0) {
                GLES20.glUniform1i(texUniform, i);
            } else {
                throw new RuntimeException("Shader does not seem to support " + sources.length
                    + " number of input textures! Missing uniform " + inputTextureUniformName(i)
                    + "!");
            }
            GLToolbox.checkGlError("Binding input texture " + i);
        }
!!!34832439.java!!!	pushAttributes() : void
        for (VertexAttribute attr : mAttributes.values()) {
            if (!attr.push()) {
                throw new RuntimeException("Unable to assign attribute value '" + attr + "'!");
            }
        }
        GLToolbox.checkGlError("Push Attributes");
!!!34832567.java!!!	updateSourceCoordAttribute() : void
        // If attribute does not exist, simply do nothing (may be custom shader).
        VertexAttribute attr = getProgramAttribute(texCoordAttributeName(), false);
        // A non-null value of mSourceCoords indicates new values to be set.
        if (mSourceCoords != null && attr != null) {
            // Upload new source coordinates to GPU
            attr.set(false, FLOAT_SIZE * 2, 2, GLES20.GL_FLOAT, mSourceCoords);
        }
        // Do not set again (even if failed, to not cause endless attempts)
        mSourceCoords = null;
!!!34832695.java!!!	updateTargetCoordAttribute() : void
        // If attribute does not exist, simply do nothing (may be custom shader).
        VertexAttribute attr = getProgramAttribute(positionAttributeName(), false);
        // A non-null value of mTargetCoords indicates new values to be set.
        if (mTargetCoords != null && attr != null) {
            // Upload new target coordinates to GPU
            attr.set(false, FLOAT_SIZE * 2, 2, GLES20.GL_FLOAT, mTargetCoords);
        }
        // Do not set again (even if failed, to not cause endless attempts)
        mTargetCoords = null;
!!!34832823.java!!!	render() : void
        GLES20.glDrawArrays(mDrawMode, 0, mVertexCount);
        GLToolbox.checkGlError("glDrawArrays");
!!!34832951.java!!!	checkExecutable() : void
        if (mProgram == 0) {
            throw new RuntimeException("Attempting to execute invalid shader-program!");
        }
!!!34833079.java!!!	useProgram() : void
        GLES20.glUseProgram(mProgram);
        GLToolbox.checkGlError("glUseProgram");
!!!34833207.java!!!	checkTexCount(in count : int) : void
        if (count > maxTextureUnits()) {
            throw new RuntimeException("Number of textures passed (" + count + ") exceeds the "
                + "maximum number of allowed texture units (" + maxTextureUnits() + ")!");
        }
!!!34833335.java!!!	loadShader(in shaderType : int, inout source : String) : int
        int shader = GLES20.glCreateShader(shaderType);
        if (shader != 0) {
            GLES20.glShaderSource(shader, source);
            GLES20.glCompileShader(shader);
            int[] compiled = new int[1];
            GLES20.glGetShaderiv(shader, GLES20.GL_COMPILE_STATUS, compiled, 0);
            if (compiled[0] == 0) {
                String info = GLES20.glGetShaderInfoLog(shader);
                GLES20.glDeleteShader(shader);
                shader = 0;
                throw new RuntimeException("Could not compile shader " + shaderType + ":" + info);
            }
        }
        return shader;
!!!34833463.java!!!	createProgram(inout vertexSource : String, inout fragmentSource : String) : int
        int vertexShader = loadShader(GLES20.GL_VERTEX_SHADER, vertexSource);
        if (vertexShader == 0) {
            throw new RuntimeException("Could not create shader-program as vertex shader "
                + "could not be compiled!");
        }
        int pixelShader = loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentSource);
        if (pixelShader == 0) {
            throw new RuntimeException("Could not create shader-program as fragment shader "
                + "could not be compiled!");
        }

        int program = GLES20.glCreateProgram();
        if (program != 0) {
            GLES20.glAttachShader(program, vertexShader);
            GLToolbox.checkGlError("glAttachShader");
            GLES20.glAttachShader(program, pixelShader);
            GLToolbox.checkGlError("glAttachShader");
            GLES20.glLinkProgram(program);
            int[] linkStatus = new int[1];
            GLES20.glGetProgramiv(program, GLES20.GL_LINK_STATUS, linkStatus, 0);
            if (linkStatus[0] != GLES20.GL_TRUE) {
                String info = GLES20.glGetProgramInfoLog(program);
                GLES20.glDeleteProgram(program);
                program = 0;
                throw new RuntimeException("Could not link program: " + info);
            }
        }

        GLES20.glDeleteShader(vertexShader);
        GLES20.glDeleteShader(pixelShader);

        return program;
!!!34833591.java!!!	scanUniforms() : void
        int uniformCount[] = new int [1];
        GLES20.glGetProgramiv(mProgram, GLES20.GL_ACTIVE_UNIFORMS, uniformCount, 0);
        if (uniformCount[0] > 0) {
            mUniforms = new HashMap<String, ProgramUniform>(uniformCount[0]);
            for (int i = 0; i < uniformCount[0]; ++i) {
                ProgramUniform uniform = new ProgramUniform(mProgram, i);
                mUniforms.put(uniform.getName(), uniform);
            }
        }
!!!34833719.java!!!	getProgramUniform(inout name : String, inout required : boolean) : ImageShader::ProgramUniform
        ProgramUniform result = mUniforms.get(name);
        if (result == null && required) {
            throw new IllegalArgumentException("Unknown uniform '" + name + "'!");
        }
        return result;
!!!34833847.java!!!	getProgramAttribute(inout name : String, inout required : boolean) : ImageShader::VertexAttribute
        VertexAttribute result = mAttributes.get(name);
        if (result == null) {
            int handle = GLES20.glGetAttribLocation(mProgram, name);
            if (handle >= 0) {
                result = new VertexAttribute(name, handle);
                mAttributes.put(name, result);
            } else if (required) {
                throw new IllegalArgumentException("Unknown attribute '" + name + "'!");
            }
        }
        return result;
!!!34833975.java!!!	checkUniformAssignment(inout uniform : ImageShader::ProgramUniform, in values : int, in components : int) : void
        if (values % components != 0) {
            throw new RuntimeException("Size mismatch: Attempting to assign values of size "
                + values + " to uniform '" + uniform.getName() + "' (must be multiple of "
                + components + ")!");
        } else if (uniform.getSize() != values / components) {
            throw new RuntimeException("Size mismatch: Cannot assign " + values + " values to "
                + "uniform '" + uniform.getName() + "'!");
        }
!!!34834103.java!!!	strlen(inout strVal : byte) : int
        for (int i = 0; i < strVal.length; ++i) {
            if (strVal[i] == '\0') {
                return i;
            }
        }
        return strVal.length;
