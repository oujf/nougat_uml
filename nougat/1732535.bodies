class CameraRunnable
!!!34755895.java!!!	CameraRunnable(inout context : MffContext)
            mContext = context;
            createCamFrameHandler();
            mCamFrameHandler.initWithRunner(this);
            launchThread();
!!!34756023.java!!!	getContext() : MffContext
            return mContext;
!!!34756151.java!!!	loop() : void
            while (true) {
                try {
                    Event event = nextEvent();
                    if (event == null) continue;
                    switch (event.code) {
                        case Event.START:
                            onStart();
                            break;
                        case Event.STOP:
                            onStop();
                            break;
                        case Event.FRAME:
                            onFrame();
                            break;
                        case Event.HALT:
                            onHalt();
                            break;
                        case Event.RESTART:
                            onRestart();
                            break;
                        case Event.UPDATE:
                            onUpdate();
                            break;
                        case Event.TEARDOWN:
                            onTearDown();
                            break;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
!!!34756279.java!!!	run() : void
            loop();
!!!34756407.java!!!	signalNewFrame() : void
            pushEvent(Event.FRAME, false);
!!!34756535.java!!!	pushEvent(in eventId : int, inout required : boolean) : void
            try {
                if (required) {
                    mEventQueue.put(new Event(eventId));
                } else {
                    mEventQueue.offer(new Event(eventId));
                }
            } catch (InterruptedException e) {
                // We should never get here (as we do not limit capacity in the queue), but if
                // we do, we log an error.
                Log.e("CameraStreamer", "Dropping event " + eventId + "!");
            }
!!!34756663.java!!!	launchThread() : void
            Thread cameraThread = new Thread(this);
            cameraThread.start();
!!!34756791.java!!!	getCamera() : Camera
            synchronized (mState) {
                return mCamera;
            }
!!!34756919.java!!!	lockCamera(inout context : Object) : Camera
            mExternalCameraLock.lock(context);
            /**
             * since lockCamera can happen right after closeCamera,
             * the camera handle can be null, wait until valid handle
             * is acquired.
             */
            while (mCamera == null) {
                mExternalCameraLock.unlock(context);
                mCameraReadyLock.lock();
                try {
                    mCameraReady.await();
                } catch (InterruptedException e) {
                    throw new RuntimeException("Condition interrupted", e);
                }
                mCameraReadyLock.unlock();
                mExternalCameraLock.lock(context);
            }
            return mCamera;
!!!34757047.java!!!	unlockCamera(inout context : Object) : void
            mExternalCameraLock.unlock(context);
!!!34757175.java!!!	getCurrentCameraId() : int
            synchronized (mState) {
                return mCamId;
            }
!!!34757303.java!!!	isRunning() : boolean
            return mState.current() != State.STATE_STOPPED;
!!!34757431.java!!!	addListener(inout listener : CameraStreamer::CameraListener) : void
            synchronized (mCamListeners) {
                mCamListeners.add(listener);
            }
!!!34757559.java!!!	removeListener(inout listener : CameraStreamer::CameraListener) : void
            synchronized (mCamListeners) {
                mCamListeners.remove(listener);
            }
!!!34757687.java!!!	bindToDisplay(inout display : Display) : void
            mDisplay = display;
!!!34757815.java!!!	setDesiredPreviewSize(in width : int, in height : int) : void
            if (width != mRequestedPreviewWidth || height != mRequestedPreviewHeight) {
                mRequestedPreviewWidth = width;
                mRequestedPreviewHeight = height;
                onParamsUpdated();
            }
!!!34757943.java!!!	setDesiredPictureSize(in width : int, in height : int) : void
            if (width != mRequestedPictureWidth || height != mRequestedPictureHeight) {
                mRequestedPictureWidth = width;
                mRequestedPictureHeight = height;
                onParamsUpdated();
            }
!!!34758071.java!!!	setDesiredFrameRate(in fps : int) : void
            if (fps != mRequestedFramesPerSec) {
                mRequestedFramesPerSec = fps;
                onParamsUpdated();
            }
!!!34758199.java!!!	setFacing(in facing : int) : void
            if (facing != mRequestedFacing) {
                switch (facing) {
                    case FACING_DONTCARE:
                    case FACING_FRONT:
                    case FACING_BACK:
                        mRequestedFacing = facing;
                        break;
                    default:
                        throw new IllegalArgumentException("Unknown facing value '" + facing
                            + "' passed to setFacing!");
                }
                onParamsUpdated();
            }
!!!34758327.java!!!	setFlipFrontCamera(inout flipFront : boolean) : void
            if (mFlipFront != flipFront) {
                mFlipFront = flipFront;
            }
!!!34758455.java!!!	setFlashMode(inout flashMode : String) : void
            if (!flashMode.equals(mFlashMode)) {
                mFlashMode = flashMode;
                onParamsUpdated();
            }
!!!34758583.java!!!	getCameraFacing() : int
            return mActualFacing;
!!!34758711.java!!!	getCameraRotation() : int
            return mCamRotation;
!!!34758839.java!!!	supportsHardwareFaceDetection() : boolean
            //return mCamFrameHandler.supportsHardwareFaceDetection();
            // TODO
            return true;
!!!34758967.java!!!	getCameraWidth() : int
            return (mActualDims != null) ? mActualDims[0] : 0;
!!!34759095.java!!!	getCameraHeight() : int
            return (mActualDims != null) ? mActualDims[1] : 0;
!!!34759223.java!!!	getCameraFrameRate() : int
            return mActualFramesPerSec;
!!!34759351.java!!!	getFlashMode() : String
            return mCamera.getParameters().getFlashMode();
!!!34759479.java!!!	canStart() : boolean
            // If we can get a camera id without error we should be able to start.
            try {
                getCameraId();
            } catch (RuntimeException e) {
                return false;
            }
            return true;
!!!34759607.java!!!	grabFrame(inout targetFrame : FrameImage2D) : boolean
            // Make sure we stay in state running while we are grabbing the frame.
            synchronized (mState) {
                if (mState.current() != State.STATE_RUNNING) {
                    return false;
                }
                // we may not have the camera ready, this might happen when in the middle
                // of switching camera.
                if (mCamera == null) {
                    return false;
                }
                mCamFrameHandler.grabFrame(targetFrame);
                return true;
            }
!!!34759735.java!!!	getCamFrameHandler() : CameraStreamer::CamFrameHandler
            return mCamFrameHandler;
!!!34759863.java!!!	onParamsUpdated() : void
            pushEvent(Event.UPDATE, true);
!!!34759991.java!!!	nextEvent() : CameraStreamer::Event
            try {
                return mEventQueue.take();
            } catch (InterruptedException e) {
                // Ignore and keep going.
                Log.w("GraphRunner", "Event queue processing was interrupted.");
                return null;
            }
!!!34760119.java!!!	onStart() : void
            if (mState.current() == State.STATE_STOPPED) {
                mState.set(State.STATE_RUNNING);
                getRenderTarget().focus();
                openCamera();
            }
!!!34760247.java!!!	onStop() : void
            if (mState.current() == State.STATE_RUNNING) {
                closeCamera();
                RenderTarget.focusNone();
            }
            // Set state to stop (halted becomes stopped).
            mState.set(State.STATE_STOPPED);
!!!34760375.java!!!	onHalt() : void
            // Only halt if running. Stopped overrides halt.
            if (mState.current() == State.STATE_RUNNING) {
                closeCamera();
                RenderTarget.focusNone();
                mState.set(State.STATE_HALTED);
            }
!!!34760503.java!!!	onRestart() : void
            // Only restart if halted
            if (mState.current() == State.STATE_HALTED) {
                mState.set(State.STATE_RUNNING);
                getRenderTarget().focus();
                openCamera();
            }
!!!34760631.java!!!	onUpdate() : void
            if (mState.current() == State.STATE_RUNNING) {
                pushEvent(Event.STOP, true);
                pushEvent(Event.START, true);
            }
!!!34760759.java!!!	onFrame() : void
            if (mState.current() == State.STATE_RUNNING) {
                updateRotation();
                mCamFrameHandler.updateServerFrame();
            }
!!!34760887.java!!!	onTearDown() : void
            if (mState.current() == State.STATE_STOPPED) {
                // Remove all listeners. This will release their resources
                for (CameraListener listener : mCamListeners) {
                    removeListener(listener);
                }
                mCamListeners.clear();
            } else {
                Log.e("CameraStreamer", "Could not tear-down CameraStreamer as camera still "
                        + "seems to be running!");
            }
!!!34761015.java!!!	createCamFrameHandler() : void
            // TODO: For now we simply assert that OpenGL is supported. Later on, we should add
            // a CamFrameHandler that does not depend on OpenGL.
            getContext().assertOpenGLSupported();
            if (VERSION.SDK_INT >= 16) {
                mCamFrameHandler = new CamFrameHandlerJB();
            } else if (VERSION.SDK_INT >= 15) {
                mCamFrameHandler = new CamFrameHandlerICS();
            } else {
                mCamFrameHandler = new CamFrameHandlerGB();
            }
!!!34761143.java!!!	updateRotation() : void
            if (mDisplay != null) {
                updateDisplayRotation(mDisplay.getRotation());
            }
!!!34761271.java!!!	updateDisplayRotation(in rotation : int) : void
            switch (rotation) {
                case Surface.ROTATION_0:
                    onUpdateOrientation(0);
                    break;
                case Surface.ROTATION_90:
                    onUpdateOrientation(90);
                    break;
                case Surface.ROTATION_180:
                    onUpdateOrientation(180);
                    break;
                case Surface.ROTATION_270:
                    onUpdateOrientation(270);
                    break;
                default:
                    throw new IllegalArgumentException("Unsupported display rotation constant! Use "
                        + "one of the Surface.ROTATION_ constants!");
            }
!!!34761399.java!!!	getRenderTarget() : RenderTarget
            if (mRenderTarget == null) {
                mRenderTarget = RenderTarget.newTarget(1, 1);
            }
            return mRenderTarget;
!!!34761527.java!!!	updateCamera() : void
            synchronized (mState) {
                mCamId = getCameraId();
                updateCameraOrientation(mCamId);
                mCamera = Camera.open(mCamId);
                initCameraParameters();
            }
!!!34761655.java!!!	updateCameraOrientation(in camId : int) : void
            CameraInfo cameraInfo = new CameraInfo();
            Camera.getCameraInfo(camId, cameraInfo);
            mCamOrientation = cameraInfo.orientation;
            mOrientation = -1;  // Forces recalculation to match display
            mActualFacing = (cameraInfo.facing == CameraInfo.CAMERA_FACING_FRONT)
                ? FACING_FRONT
                : FACING_BACK;
!!!34761783.java!!!	getCameraId() : int
            int camCount = Camera.getNumberOfCameras();
            if (camCount == 0) {
                throw new RuntimeException("Device does not have any cameras!");
            } else if (mRequestedFacing == FACING_DONTCARE) {
                // Simply return first camera if mRequestedFacing is don't care
                return 0;
            }

            // Attempt to find requested camera
            boolean useFrontCam = (mRequestedFacing == FACING_FRONT);
            CameraInfo cameraInfo = new CameraInfo();
            for (int i = 0; i < camCount; ++i) {
                Camera.getCameraInfo(i, cameraInfo);
                if ((cameraInfo.facing == CameraInfo.CAMERA_FACING_FRONT) == useFrontCam) {
                    return i;
                }
            }
            throw new RuntimeException("Could not find a camera facing (" + mRequestedFacing
                    + ")!");
!!!34761911.java!!!	initCameraParameters() : void
            Camera.Parameters params = mCamera.getParameters();

            // Find closest preview size
            mActualDims =
                findClosestPreviewSize(mRequestedPreviewWidth, mRequestedPreviewHeight, params);
            mCamFrameHandler.setCameraSize(mActualDims[0], mActualDims[1]);
            params.setPreviewSize(mActualDims[0], mActualDims[1]);
            // Find closest picture size
            int[] dims =
                findClosestPictureSize(mRequestedPictureWidth, mRequestedPictureHeight, params);
            params.setPictureSize(dims[0], dims[1]);

            // Find closest FPS
            int closestRange[] = findClosestFpsRange(mRequestedFramesPerSec, params);
            params.setPreviewFpsRange(closestRange[Camera.Parameters.PREVIEW_FPS_MIN_INDEX],
                                      closestRange[Camera.Parameters.PREVIEW_FPS_MAX_INDEX]);

            // Set flash mode (if supported)
            if (params.getFlashMode() != null) {
                params.setFlashMode(mFlashMode);
            }

            mCamera.setParameters(params);
!!!34762039.java!!!	findClosestPreviewSize(in width : int, in height : int, inout parameters : Camera::Parameters) : int
            List<Camera.Size> previewSizes = parameters.getSupportedPreviewSizes();
            return findClosestSizeFromList(width, height, previewSizes);
!!!34762167.java!!!	findClosestPictureSize(in width : int, in height : int, inout parameters : Camera::Parameters) : int
            List<Camera.Size> pictureSizes = parameters.getSupportedPictureSizes();
            return findClosestSizeFromList(width, height, pictureSizes);
!!!34762295.java!!!	findClosestSizeFromList(in width : int, in height : int, inout sizes : List<Camera.Size>) : int
            int closestWidth = -1;
            int closestHeight = -1;
            int smallestWidth = sizes.get(0).width;
            int smallestHeight =  sizes.get(0).height;
            for (Camera.Size size : sizes) {
                // Best match defined as not being larger in either dimension than
                // the requested size, but as close as possible. The below isn't a
                // stable selection (reording the size list can give different
                // results), but since this is a fallback nicety, that's acceptable.
                if ( size.width <= width &&
                     size.height <= height &&
                     size.width >= closestWidth &&
                     size.height >= closestHeight) {
                    closestWidth = size.width;
                    closestHeight = size.height;
                }
                if ( size.width < smallestWidth &&
                     size.height < smallestHeight) {
                    smallestWidth = size.width;
                    smallestHeight = size.height;
                }
            }
            if (closestWidth == -1) {
                // Requested size is smaller than any listed size; match with smallest possible
                closestWidth = smallestWidth;
                closestHeight = smallestHeight;
            }
            int[] closestSize = {closestWidth, closestHeight};
            return closestSize;
!!!34762423.java!!!	findClosestFpsRange(in fps : int, inout params : Camera::Parameters) : int
            List<int[]> supportedFpsRanges = params.getSupportedPreviewFpsRange();
            int[] closestRange = supportedFpsRanges.get(0);
            int fpsk = fps * 1000;
            int minDiff = 1000000;
            for (int[] range : supportedFpsRanges) {
                int low = range[Camera.Parameters.PREVIEW_FPS_MIN_INDEX];
                int high = range[Camera.Parameters.PREVIEW_FPS_MAX_INDEX];
                if (low <= fpsk && high >= fpsk) {
                    int diff = (fpsk - low) + (high - fpsk);
                    if (diff < minDiff) {
                        closestRange = range;
                        minDiff = diff;
                    }
                }
            }
            mActualFramesPerSec = closestRange[Camera.Parameters.PREVIEW_FPS_MAX_INDEX] / 1000;
            return closestRange;
!!!34762551.java!!!	onUpdateOrientation(in orientation : int) : void
            // First we calculate the camera rotation.
            int rotation = (mActualFacing == FACING_FRONT)
                    ? (mCamOrientation + orientation) % 360
                    : (mCamOrientation - orientation + 360) % 360;
            if (rotation != mCamRotation) {
                synchronized (this) {
                    mCamRotation = rotation;
                }
            }

            // We compensate for mirroring in the orientation. This differs from the rotation,
            // where we are invariant to mirroring.
            int fixedOrientation = rotation;
            if (mActualFacing == FACING_FRONT && mCamFrameHandler.isFrontMirrored()) {
                fixedOrientation = (360 - rotation) % 360;  // compensate the mirror
            }
            if (mOrientation != fixedOrientation) {
                mOrientation = fixedOrientation;
                mCamFrameHandler.onUpdateCameraOrientation(mOrientation);
            }
!!!34762679.java!!!	openCamera() : void
            // Acquire lock for camera
            try {
                if (!mCameraLock.tryLock(MAX_CAMERA_WAIT_TIME, TimeUnit.SECONDS)) {
                    throw new RuntimeException("Timed out while waiting to acquire camera!");
                }
            } catch (InterruptedException e) {
                throw new RuntimeException("Interrupted while waiting to acquire camera!");
            }

            // Make sure external entities are not holding camera. We need to hold the lock until
            // the preview is started again.
            Object lockContext = new Object();
            mExternalCameraLock.lock(lockContext);

            // Need to synchronize this as many of the member values are modified during setup.
            synchronized (this) {
                updateCamera();
                updateRotation();
                mCamFrameHandler.setupServerFrame();
            }

            mCamera.startPreview();

            // Inform listeners
            synchronized (mCamListeners) {
                for (CameraListener listener : mCamListeners) {
                    listener.onCameraOpened(CameraStreamer.this);
                }
            }
            mExternalCameraLock.unlock(lockContext);
            // New camera started
            mCameraReadyLock.lock();
            mCameraReady.signal();
            mCameraReadyLock.unlock();
!!!34762807.java!!!	createRecorder(inout outputPath : String, inout profile : CamcorderProfile) : void
            lockCamera(this);
            mCamera.unlock();
            if (mRecorder != null) {
                mRecorder.release();
            }
            mRecorder = new MediaRecorder();
            mRecorder.setCamera(mCamera);
            mRecorder.setAudioSource(MediaRecorder.AudioSource.CAMCORDER);
            mRecorder.setVideoSource(MediaRecorder.VideoSource.CAMERA);
            mRecorder.setProfile(profile);
            mRecorder.setOutputFile(outputPath);
            try {
                mRecorder.prepare();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
!!!34762935.java!!!	startRecording() : void
            if (mRecorder == null) {
                throw new RuntimeException("No recorder created");
            }
            mRecorder.start();
!!!34763063.java!!!	stopRecording() : void
            if (mRecorder == null) {
                throw new RuntimeException("No recorder created");
            }
            mRecorder.stop();
!!!34763191.java!!!	releaseRecorder() : void
            if (mRecorder == null) {
                throw new RuntimeException("No recorder created");
            }
            mRecorder.release();
            mRecorder = null;
            mCamera.lock();
            unlockCamera(this);
!!!34763319.java!!!	closeCamera() : void
            Object lockContext = new Object();
            mExternalCameraLock.lock(lockContext);
            if (mCamera != null) {
                mCamera.stopPreview();
                mCamera.release();
                mCamera = null;
            }
            mCameraLock.unlock();
            mCamFrameHandler.release();
            mExternalCameraLock.unlock(lockContext);
            // Inform listeners
            synchronized (mCamListeners) {
                for (CameraListener listener : mCamListeners) {
                    listener.onCameraClosed(CameraStreamer.this);
                }
            }
