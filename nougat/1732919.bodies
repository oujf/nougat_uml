class FrameImage2D
!!!34781879.java!!!	lockTextureSource() : TextureSource
        return (TextureSource)mBackingStore.lockData(MODE_READ, BackingStore.ACCESS_TEXTURE);
!!!34782007.java!!!	lockRenderTarget() : RenderTarget
        return (RenderTarget)mBackingStore.lockData(MODE_WRITE, BackingStore.ACCESS_RENDERTARGET);
!!!34782135.java!!!	setBitmap(inout bitmap : Bitmap) : void
        bitmap = convertToFrameType(bitmap, mBackingStore.getFrameType());
        validateBitmapSize(bitmap, mBackingStore.getDimensions());
        Backing backing = mBackingStore.lockBacking(MODE_WRITE, BackingStore.ACCESS_BITMAP);
        backing.setData(bitmap);
        mBackingStore.unlock();
!!!34782263.java!!!	toBitmap() : Bitmap
        Bitmap result = (Bitmap)mBackingStore.lockData(MODE_READ, BackingStore.ACCESS_BITMAP);
        mBackingStore.unlock();
        return result;
!!!34782391.java!!!	copyToFrame(inout target : FrameImage2D, inout sourceRect : RectF, inout targetRect : RectF) : void
        if (GraphRunner.current().isOpenGLSupported()) {
            gpuImageCopy(this, target, sourceRect, targetRect);
        } else {
            cpuImageCopy(this, target, sourceRect, targetRect);
        }
!!!34782519.java!!!	create(inout backingStore : BackingStore) : FrameImage2D
        assertCanCreate(backingStore);
        return new FrameImage2D(backingStore);
!!!34782647.java!!!	FrameImage2D(inout backingStore : BackingStore)
        super(backingStore);
!!!34782775.java!!!	assertCanCreate(inout backingStore : BackingStore) : void
        FrameBuffer2D.assertCanCreate(backingStore);
!!!34782903.java!!!	convertToFrameType(inout bitmap : Bitmap, inout type : FrameType) : Bitmap
        Bitmap.Config config = bitmap.getConfig();
        Bitmap result = bitmap;
        switch(type.getElementId()) {
            case FrameType.ELEMENT_RGBA8888:
                if (config != Bitmap.Config.ARGB_8888) {
                    result = bitmap.copy(Bitmap.Config.ARGB_8888, false);
                    if (result == null) {
                        throw new RuntimeException("Could not convert bitmap to frame-type " +
                                "RGBA8888!");
                    }
                }
                break;
            default:
                throw new IllegalArgumentException("Unsupported frame type '" + type + "' for " +
                        "bitmap assignment!");
        }
        return result;
!!!34783031.java!!!	validateBitmapSize(inout bitmap : Bitmap, inout dimensions : int) : void
        if (bitmap.getWidth() != dimensions[0] || bitmap.getHeight() != dimensions[1]) {
            throw new IllegalArgumentException("Cannot assign bitmap of size " + bitmap.getWidth()
                    + "x" + bitmap.getHeight() + " to frame of size " + dimensions[0] + "x"
                    + dimensions[1] + "!");
        }
!!!34783159.java!!!	gpuImageCopy(inout srcImage : FrameImage2D, inout dstImage : FrameImage2D, inout srcRect : RectF, inout dstRect : RectF) : void
        ImageShader idShader = RenderTarget.currentTarget().getIdentityShader();
        // We briefly modify the shader
        // TODO: Implement a safer way to save and restore a shared shader.
        idShader.setSourceRect(srcRect);
        idShader.setTargetRect(dstRect);
        idShader.process(srcImage, dstImage);
        // And reset it as others may use it as well
        idShader.setSourceRect(0f, 0f, 1f, 1f);
        idShader.setTargetRect(0f, 0f, 1f, 1f);
!!!34783287.java!!!	cpuImageCopy(inout srcImage : FrameImage2D, inout dstImage : FrameImage2D, inout srcRect : RectF, inout dstRect : RectF) : void
        // Convert rectangles to integer rectangles in image dimensions
        Rect srcIRect = new Rect((int) srcRect.left * srcImage.getWidth(),
                (int) srcRect.top * srcImage.getHeight(),
                (int) srcRect.right * srcImage.getWidth(),
                (int) srcRect.bottom * srcImage.getHeight());
        Rect dstIRect = new Rect((int) dstRect.left * srcImage.getWidth(),
                (int) dstRect.top * srcImage.getHeight(),
                (int) dstRect.right * srcImage.getWidth(),
                (int) dstRect.bottom * srcImage.getHeight());

        // Create target canvas
        Bitmap.Config config = Bitmap.Config.ARGB_8888;
        Bitmap dstBitmap = Bitmap.createBitmap(dstImage.getWidth(), dstImage.getHeight(), config);
        Canvas canvas = new Canvas(dstBitmap);

        // Draw source bitmap into target canvas
        Paint paint = new Paint();
        paint.setFilterBitmap(true);
        Bitmap srcBitmap = srcImage.toBitmap();
        canvas.drawBitmap(srcBitmap, srcIRect, dstIRect, paint);

        // Assign bitmap to output frame
        dstImage.setBitmap(dstBitmap);
