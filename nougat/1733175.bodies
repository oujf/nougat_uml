class CamFrameHandlerICS
!!!34751159.java!!!	setupServerFrame() : void
            setupPreviewTexture(mRunner.mCamera);
!!!34751287.java!!!	updateServerFrame() : void
            mPreviewSurfaceTexture.updateTexImage();
            distributeFrames();
!!!34751415.java!!!	onUpdateCameraOrientation(in orientation : int) : void
            super.onUpdateCameraOrientation(orientation);
            mRunner.mCamera.setDisplayOrientation(orientation);
            updateSurfaceTextureSizes();
!!!34751543.java!!!	onRegisterClient(inout client : CameraStreamer::FrameClient, inout context : EGLContext) : void
            final Set<FrameClient> clientTargets = clientsForContext(context);

            // Make sure we have texture, shader, and surfacetexture setup for this context.
            TextureSource clientTex = textureForContext(context);
            ImageShader copyShader = shaderForContext(context);
            SurfaceTexture surfTex = surfaceTextureForContext(context);

            // Listen to client-side surface texture updates
            surfTex.setOnFrameAvailableListener(new SurfaceTexture.OnFrameAvailableListener() {
                @Override
                public void onFrameAvailable(SurfaceTexture surfaceTexture) {
                    for (FrameClient clientTarget : clientTargets) {
                        clientTarget.onCameraFrameAvailable();
                    }
                }
            });
!!!34751671.java!!!	grabFrame(inout targetFrame : FrameImage2D) : void
            // Get the GL objects for the receiver's context
            EGLContext clientContext = RenderTarget.currentContext();
            TextureSource clientTex = textureForContext(clientContext);
            ImageShader copyShader = shaderForContext(clientContext);
            SurfaceTexture surfTex = surfaceTextureForContext(clientContext);
            if (clientTex == null || copyShader == null || surfTex == null) {
                throw new RuntimeException("Attempting to grab camera frame from unknown "
                    + "thread: " + Thread.currentThread() + "!");
            }

            // Copy from client ST to client tex
            surfTex.updateTexImage();
            targetFrame.resize(new int[] { mOutWidth, mOutHeight });
            copyShader.process(clientTex,
                               targetFrame.lockRenderTarget(),
                               mOutWidth,
                               mOutHeight);

            targetFrame.setTimestamp(mPreviewSurfaceTexture.getTimestamp());
            targetFrame.unlock();
!!!34751799.java!!!	release() : void
            if (mPreviewTexture != null) {
                mPreviewTexture.release();
                mPreviewTexture = null;
            }
            if (mPreviewSurfaceTexture != null) {
                mPreviewSurfaceTexture.release();
                mPreviewSurfaceTexture = null;
            }
!!!34751927.java!!!	createClientShader() : ImageShader
            return new ImageShader(mCopyShaderSource);
!!!34752055.java!!!	createClientTexture() : TextureSource
            return TextureSource.newExternalTexture();
!!!34752183.java!!!	distributeFrames() : void
            updateTransform(getCopyShader());
            updateShaderTargetRect(getCopyShader());

            for (SurfaceTexture clientTexture : mTargetSurfaceTextures.values()) {
                RenderTarget clientTarget = renderTargetFor(clientTexture);
                clientTarget.focus();
                getCopyShader().process(mPreviewTexture,
                                        clientTarget,
                                        mOutWidth,
                                        mOutHeight);
                GLToolbox.checkGlError("distribute frames");
                clientTarget.swapBuffers();
            }
!!!34752311.java!!!	renderTargetFor(inout surfaceTex : SurfaceTexture) : RenderTarget
            RenderTarget target = mClientRenderTargets.get(surfaceTex);
            if (target == null) {
                target = RenderTarget.currentTarget().forSurfaceTexture(surfaceTex);
                mClientRenderTargets.put(surfaceTex, target);
            }
            return target;
!!!34752439.java!!!	setupPreviewTexture(inout camera : Camera) : void
            if (mPreviewTexture == null) {
                mPreviewTexture = TextureSource.newExternalTexture();
            }
            if (mPreviewSurfaceTexture == null) {
                mPreviewSurfaceTexture = new SurfaceTexture(mPreviewTexture.getTextureId());
                try {
                    camera.setPreviewTexture(mPreviewSurfaceTexture);
                } catch (IOException e) {
                    throw new RuntimeException("Could not bind camera surface texture: " +
                                               e.getMessage() + "!");
                }
                mPreviewSurfaceTexture.setOnFrameAvailableListener(mOnCameraFrameListener);
            }
!!!34752567.java!!!	getCopyShader() : ImageShader
            if (mCopyShader == null) {
                mCopyShader = new ImageShader(mCopyShaderSource);
            }
            return mCopyShader;
!!!34752695.java!!!	surfaceTextureForContext(inout context : EGLContext) : SurfaceTexture
            SurfaceTexture surfTex = mTargetSurfaceTextures.get(context);
            if (surfTex == null) {
                TextureSource texture = textureForContext(context);
                if (texture != null) {
                    surfTex = new SurfaceTexture(texture.getTextureId());
                    surfTex.setDefaultBufferSize(mOutWidth, mOutHeight);
                    mTargetSurfaceTextures.put(context, surfTex);
                }
            }
            return surfTex;
!!!34752823.java!!!	updateShaderTargetRect(inout shader : ImageShader) : void
            if ((mRunner.mActualFacing == FACING_FRONT) && mRunner.mFlipFront) {
                shader.setTargetRect(1f, 0f, -1f, 1f);
            } else {
                shader.setTargetRect(0f, 0f, 1f, 1f);
            }
!!!34752951.java!!!	updateSurfaceTextureSizes() : void
            for (SurfaceTexture clientTexture : mTargetSurfaceTextures.values()) {
                clientTexture.setDefaultBufferSize(mOutWidth, mOutHeight);
            }
!!!34753079.java!!!	updateTransform(inout shader : ImageShader) : void
            mPreviewSurfaceTexture.getTransformMatrix(mCameraTransform);
            shader.setSourceTransform(mCameraTransform);
!!!34753207.java!!!	onCleanupContext(inout context : EGLContext) : void
            super.onCleanupContext(context);
            SurfaceTexture surfaceTex = mTargetSurfaceTextures.get(context);
            if (surfaceTex != null) {
                surfaceTex.release();
                mTargetSurfaceTextures.remove(context);
            }
