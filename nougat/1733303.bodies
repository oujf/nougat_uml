class CamFrameHandlerGB
!!!34753335.java!!!	readBuffer() : byte
            synchronized (mBufferLock) {
                return mWriteToBack ? mFrameBufferFront : mFrameBufferBack;
            }
!!!34753463.java!!!	writeBuffer() : byte
            synchronized (mBufferLock) {
                return mWriteToBack ? mFrameBufferBack : mFrameBufferFront;
            }
!!!34753591.java!!!	swapBuffers() : void
            synchronized (mBufferLock) {
                mWriteToBack = !mWriteToBack;
            }
!!!34753719.java!!!	setupServerFrame() : void
            checkCameraDimensions();
            Camera camera = mRunner.mCamera;
            int bufferSize = mCameraWidth * (mCameraHeight + mCameraHeight/2);
            mFrameBufferFront = new byte[bufferSize];
            mFrameBufferBack = new byte[bufferSize];
            camera.addCallbackBuffer(writeBuffer());
            camera.setPreviewCallbackWithBuffer(mPreviewCallback);
            SurfaceView previewDisplay = getPreviewDisplay();
            if (previewDisplay != null) {
                try {
                    camera.setPreviewDisplay(previewDisplay.getHolder());
                } catch (IOException e) {
                    throw new RuntimeException("Could not start camera with given preview " +
                            "display!");
                }
            }
!!!34753847.java!!!	checkCameraDimensions() : void
            if (mCameraWidth % 4 != 0) {
                throw new RuntimeException("Camera width must be a multiple of 4!");
            } else if (mCameraHeight % 2 != 0) {
                throw new RuntimeException("Camera height must be a multiple of 2!");
            }
!!!34753975.java!!!	updateServerFrame() : void
            // Server frame has been updated already, simply inform clients here.
            informClients();
!!!34754103.java!!!	grabFrame(inout targetFrame : FrameImage2D) : void
            EGLContext clientContext = RenderTarget.currentContext();

            // Copy camera data to the client YUV texture
            TextureSource clientTex = textureForContext(clientContext);
            int texWidth = mCameraWidth / 4;
            int texHeight = mCameraHeight + mCameraHeight / 2;
            synchronized(mBufferLock) {    // Don't swap buffers while we are reading
                ByteBuffer pixels = ByteBuffer.wrap(readBuffer());
                clientTex.allocateWithPixels(pixels, texWidth, texHeight);
            }
            clientTex.setParameter(GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);
            clientTex.setParameter(GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);

            // Setup the YUV-2-RGBA shader
            ImageShader transferShader = shaderForContext(clientContext);
            transferShader.setTargetCoords(mTargetCoords);
            updateShaderPixelSize(transferShader);

            // Convert pixels into target frame
            targetFrame.resize(new int[] { mOutWidth, mOutHeight });
            transferShader.process(clientTex,
                    targetFrame.lockRenderTarget(),
                    mOutWidth,
                    mOutHeight);
            targetFrame.unlock();
!!!34754231.java!!!	onUpdateCameraOrientation(in orientation : int) : void
            super.onUpdateCameraOrientation(orientation);
            if ((mRunner.mActualFacing == FACING_FRONT) && mRunner.mFlipFront) {
                switch (orientation) {
                    case 0:
                        mTargetCoords = new float[] { 1f, 0f, 0f, 0f, 1f, 1f, 0f, 1f };
                        break;
                    case 90:
                        mTargetCoords = new float[] { 0f, 0f, 0f, 1f, 1f, 0f, 1f, 1f };
                        break;
                    case 180:
                        mTargetCoords = new float[] { 0f, 1f, 1f, 1f, 0f, 0f, 1f, 0f };
                        break;
                    case 270:
                        mTargetCoords = new float[] { 1f, 1f, 1f, 0f, 0f, 1f, 0f, 0f };
                        break;
                }
            } else {
                switch (orientation) {
                    case 0:
                        mTargetCoords = new float[] { 0f, 0f, 1f, 0f, 0f, 1f, 1f, 1f };
                        break;
                    case 90:
                        mTargetCoords = new float[] { 1f, 0f, 1f, 1f, 0f, 0f, 0f, 1f };
                        break;
                    case 180:
                        mTargetCoords = new float[] { 1f, 1f, 0f, 1f, 1f, 0f, 0f, 0f };
                        break;
                    case 270:
                        mTargetCoords = new float[] { 0f, 1f, 0f, 0f, 1f, 1f, 1f, 0f };
                        break;
                }
            }
!!!34754359.java!!!	release() : void
            mFrameBufferBack = null;
            mFrameBufferFront = null;
!!!34754487.java!!!	isFrontMirrored() : boolean
            return false;
!!!34754615.java!!!	createClientShader() : ImageShader
            ImageShader shader = new ImageShader(mNV21ToRGBAVertex, mNV21ToRGBAFragment);
            // TODO: Make this a VBO
            float[] yCoords = new float[] {
                    0f, 0f,
                    1f, 0f,
                    0f, 2f / 3f,
                    1f, 2f / 3f };
            float[] uvCoords = new float[] {
                    0f, 2f / 3f,
                    1f, 2f / 3f,
                    0f, 1f,
                    1f, 1f };
            shader.setAttributeValues("a_y_texcoord", yCoords, 2);
            shader.setAttributeValues("a_vu_texcoord", uvCoords, 2);
            return shader;
!!!34754743.java!!!	createClientTexture() : TextureSource
            TextureSource texture = TextureSource.newTexture();
            texture.setParameter(GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);
            texture.setParameter(GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);
            return texture;
!!!34754871.java!!!	updateShaderPixelSize(inout shader : ImageShader) : void
            float[] pixCoords = new float[] {
                    0f, 0f,
                    mCameraWidth, 0f,
                    0f, mCameraHeight,
                    mCameraWidth, mCameraHeight };
            shader.setAttributeValues("a_pixcoord", pixCoords, 2);
!!!34754999.java!!!	getPreviewDisplay() : SurfaceView
            if (mSurfaceView == null) {
                mSurfaceView = mRunner.getContext().getDummySurfaceView();
            }
            return mSurfaceView;
!!!34755127.java!!!	informClients() : void
            synchronized (mClients) {
                for (FrameClient client : mClients) {
                    client.onCameraFrameAvailable();
                }
            }
