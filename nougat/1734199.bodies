class CropFilter
!!!34770615.java!!!	CropFilter(inout context : MffContext, inout name : String)
        super(context, name);
!!!34770743.java!!!	getSignature() : Signature
        FrameType imageIn = FrameType.image2D(FrameType.ELEMENT_RGBA8888, FrameType.READ_GPU);
        FrameType imageOut = FrameType.image2D(FrameType.ELEMENT_RGBA8888, FrameType.WRITE_GPU);
        return new Signature()
            .addInputPort("image", Signature.PORT_REQUIRED, imageIn)
            .addInputPort("cropRect", Signature.PORT_REQUIRED, FrameType.single(Quad.class))
            .addInputPort("outputWidth", Signature.PORT_OPTIONAL, FrameType.single(int.class))
            .addInputPort("outputHeight", Signature.PORT_OPTIONAL, FrameType.single(int.class))
            .addInputPort("useMipmaps", Signature.PORT_OPTIONAL, FrameType.single(boolean.class))
            .addOutputPort("image", Signature.PORT_REQUIRED, imageOut)
            .disallowOtherPorts();
!!!34770871.java!!!	onInputPortOpen(inout port : InputPort) : void
        if (port.getName().equals("cropRect")) {
            port.bindToFieldNamed("mCropRect");
            port.setAutoPullEnabled(true);
        } else if (port.getName().equals("outputWidth")) {
            port.bindToFieldNamed("mOutputWidth");
            port.setAutoPullEnabled(true);
        } else if (port.getName().equals("outputHeight")) {
            port.bindToFieldNamed("mOutputHeight");
            port.setAutoPullEnabled(true);
        } else  if (port.getName().equals("useMipmaps")) {
            port.bindToFieldNamed("mUseMipmaps");
            port.setAutoPullEnabled(true);
        }
!!!34770999.java!!!	onPrepare() : void
        if (isOpenGLSupported()) {
            mShader = ImageShader.createIdentity();
        }
!!!34771127.java!!!	onProcess() : void
        OutputPort outPort = getConnectedOutputPort("image");

        // Pull input frame
        FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
        int[] inDims = inputImage.getDimensions();
        int[] croppedDims = { (int)Math.ceil(mCropRect.xEdge().length() * inDims[0]),
                              (int)Math.ceil(mCropRect.yEdge().length() * inDims[1]) };
        int[] outDims = { getOutputWidth(croppedDims[0], croppedDims[1]),
                getOutputHeight(croppedDims[0], croppedDims[1]) };
        FrameImage2D outputImage = outPort.fetchAvailableFrame(outDims).asFrameImage2D();

        if (isOpenGLSupported()) {
            FrameImage2D sourceFrame;
            Quad sourceQuad = null;
            boolean scaleDown = (outDims[0] < croppedDims[0]) || (outDims[1] < croppedDims[1]);
            if (scaleDown && mUseMipmaps) {
                mPow2Frame = TransformUtils.makeMipMappedFrame(mPow2Frame, croppedDims);
                int[] extDims = mPow2Frame.getDimensions();
                float targetWidth = croppedDims[0] / (float)extDims[0];
                float targetHeight = croppedDims[1] / (float)extDims[1];
                Quad targetQuad = Quad.fromRect(0f, 0f, targetWidth, targetHeight);
                mShader.setSourceQuad(mCropRect);
                mShader.setTargetQuad(targetQuad);
                mShader.process(inputImage, mPow2Frame);
                TransformUtils.generateMipMaps(mPow2Frame);
                sourceFrame = mPow2Frame;
                sourceQuad = targetQuad;
            } else {
                sourceFrame = inputImage;
                sourceQuad = mCropRect;
            }

            mShader.setSourceQuad(sourceQuad);
            mShader.setTargetRect(0f, 0f, 1f, 1f);
            mShader.process(sourceFrame, outputImage);
        } else {
            // Convert quads to canvas coordinate space
            Quad sourceQuad = mCropRect.scale2(inDims[0], inDims[1]);
            Quad targetQuad = Quad.fromRect(0f, 0f, inDims[0], inDims[1]);

            // Calculate transform for crop
            Matrix transform = Quad.getTransform(sourceQuad, targetQuad);
            transform.postScale(outDims[0] / (float)inDims[0], outDims[1] / (float)inDims[1]);

            // Create target canvas
            Bitmap.Config config = Bitmap.Config.ARGB_8888;
            Bitmap cropped = Bitmap.createBitmap(outDims[0], outDims[1], config);
            Canvas canvas = new Canvas(cropped);

            // Draw source bitmap into target canvas
            Paint paint = new Paint();
            paint.setFilterBitmap(true);
            Bitmap sourceBitmap = inputImage.toBitmap();
            canvas.drawBitmap(sourceBitmap, transform, paint);

            // Assign bitmap to output frame
            outputImage.setBitmap(cropped);
        }

        outPort.pushFrame(outputImage);
!!!34771255.java!!!	onClose() : void
        if (mPow2Frame != null){
            mPow2Frame.release();
            mPow2Frame = null;
        }
!!!34771383.java!!!	getOutputWidth(in inWidth : int, in inHeight : int) : int
        return mOutputWidth <= 0 ? inWidth : mOutputWidth;
!!!34771511.java!!!	getOutputHeight(in inWidth : int, in inHeight : int) : int
        return mOutputHeight <= 0 ? inHeight : mOutputHeight;
