class Quad
!!!34875191.java!!!	unitQuad() : Quad
        return new Quad(0f, 0f, 1f, 0f, 0f, 1f, 1f, 1f);
!!!34875319.java!!!	fromRect(inout rect : RectF) : Quad
        return new Quad(new PointF(rect.left, rect.top),
                        new PointF(rect.right, rect.top),
                        new PointF(rect.left, rect.bottom),
                        new PointF(rect.right, rect.bottom));
!!!34875447.java!!!	fromRect(in x : float, in y : float, in width : float, in height : float) : Quad
        return new Quad(new PointF(x, y),
                        new PointF(x + width, y),
                        new PointF(x, y + height),
                        new PointF(x + width, y + height));
!!!34875575.java!!!	fromLineAndHeight(inout topLeft : PointF, inout topRight : PointF, in height : float) : Quad
        PointF dp = new PointF(topRight.x - topLeft.x, topRight.y - topLeft.y);
        float len = dp.length();
        PointF np = new PointF(height * (dp.y / len), height * (dp.x / len));
        PointF p2 = new PointF(topLeft.x - np.x, topLeft.y + np.y);
        PointF p3 = new PointF(topRight.x - np.x, topRight.y + np.y);
        return new Quad(topLeft, topRight, p2, p3);
!!!34875703.java!!!	fromRotatedRect(inout rect : RectF, in angle : float) : Quad
        return Quad.fromRect(rect).rotated(angle);
!!!34875831.java!!!	fromTransformedRect(inout rect : RectF, inout matrix : Matrix) : Quad
        return Quad.fromRect(rect).transformed(matrix);
!!!34875959.java!!!	getTransform(inout source : Quad, inout target : Quad) : Matrix
        // We only use the first 3 points as they sufficiently specify the transform
        Matrix transform = new Matrix();
        transform.setPolyToPoly(source.asCoords(), 0, target.asCoords(), 0, 3);
        return transform;
!!!34876087.java!!!	topLeft() : PointF
        return mTopLeft;
!!!34876215.java!!!	topRight() : PointF
        return mTopRight;
!!!34876343.java!!!	bottomLeft() : PointF
        return mBottomLeft;
!!!34876471.java!!!	bottomRight() : PointF
        return mBottomRight;
!!!34876599.java!!!	rotated(in angle : float) : Quad
        PointF center = center();
        float cosa = (float) Math.cos(angle);
        float sina = (float) Math.sin(angle);

        PointF topLeft = rotatePoint(topLeft(), center, cosa, sina);
        PointF topRight = rotatePoint(topRight(), center, cosa, sina);
        PointF bottomLeft = rotatePoint(bottomLeft(), center, cosa, sina);
        PointF bottomRight = rotatePoint(bottomRight(), center, cosa, sina);

        return new Quad(topLeft, topRight, bottomLeft, bottomRight);
!!!34876727.java!!!	transformed(inout matrix : Matrix) : Quad
        float[] points = asCoords();
        matrix.mapPoints(points);
        return new Quad(points);
!!!34876855.java!!!	center() : PointF
        // As the diagonals bisect each other, we can simply return the center of one of the
        // diagonals.
        return new PointF((mTopLeft.x + mBottomRight.x) / 2f,
                          (mTopLeft.y + mBottomRight.y) / 2f);
!!!34876983.java!!!	asCoords() : float
        return new float[] { mTopLeft.x, mTopLeft.y,
                             mTopRight.x, mTopRight.y,
                             mBottomLeft.x, mBottomLeft.y,
                             mBottomRight.x, mBottomRight.y };
!!!34877111.java!!!	grow(in factor : float) : Quad
        PointF pc = center();
        return new Quad(factor * (mTopLeft.x - pc.x) + pc.x,
                        factor * (mTopLeft.y - pc.y) + pc.y,
                        factor * (mTopRight.x - pc.x) + pc.x,
                        factor * (mTopRight.y - pc.y) + pc.y,
                        factor * (mBottomLeft.x - pc.x) + pc.x,
                        factor * (mBottomLeft.y - pc.y) + pc.y,
                        factor * (mBottomRight.x - pc.x) + pc.x,
                        factor * (mBottomRight.y - pc.y) + pc.y);
!!!34877239.java!!!	scale(in factor : float) : Quad
        return new Quad(mTopLeft.x * factor, mTopLeft.y * factor,
                        mTopRight.x * factor, mTopRight.y * factor,
                        mBottomLeft.x * factor, mBottomLeft.y * factor,
                        mBottomRight.x * factor, mBottomRight.y * factor);
!!!34877367.java!!!	scale2(in sx : float, in sy : float) : Quad
        return new Quad(mTopLeft.x * sx, mTopLeft.y * sy,
                        mTopRight.x * sx, mTopRight.y * sy,
                        mBottomLeft.x * sx, mBottomLeft.y * sy,
                        mBottomRight.x * sx, mBottomRight.y * sy);
!!!34877495.java!!!	xEdge() : PointF
        return new PointF(mTopRight.x - mTopLeft.x, mTopRight.y - mTopLeft.y);
!!!34877623.java!!!	yEdge() : PointF
        return new PointF(mBottomLeft.x - mTopLeft.x, mBottomLeft.y - mTopLeft.y);
!!!34877751.java!!!	toString() : String
        return "Quad(" + mTopLeft.x + ", " + mTopLeft.y + ", "
                       + mTopRight.x + ", " + mTopRight.y + ", "
                       + mBottomLeft.x + ", " + mBottomLeft.y + ", "
                       + mBottomRight.x + ", " + mBottomRight.y + ")";
!!!34877879.java!!!	Quad(inout topLeft : PointF, inout topRight : PointF, inout bottomLeft : PointF, inout bottomRight : PointF)
        mTopLeft = topLeft;
        mTopRight = topRight;
        mBottomLeft = bottomLeft;
        mBottomRight = bottomRight;
!!!34878007.java!!!	Quad(in x0 : float, in y0 : float, in x1 : float, in y1 : float, in x2 : float, in y2 : float, in x3 : float, in y3 : float)
        mTopLeft = new PointF(x0, y0);
        mTopRight = new PointF(x1, y1);
        mBottomLeft = new PointF(x2, y2);
        mBottomRight = new PointF(x3, y3);
!!!34878135.java!!!	Quad(inout points : float)
        mTopLeft = new PointF(points[0], points[1]);
        mTopRight = new PointF(points[2], points[3]);
        mBottomLeft = new PointF(points[4], points[5]);
        mBottomRight = new PointF(points[6], points[7]);
!!!34878263.java!!!	rotatePoint(inout p : PointF, inout c : PointF, in cosa : float, in sina : float) : PointF
        float x = (p.x - c.x) * cosa - (p.y - c.y) * sina + c.x;
        float y = (p.x - c.x) * sina + (p.y - c.y) * cosa + c.y;
        return new PointF(x,y);
