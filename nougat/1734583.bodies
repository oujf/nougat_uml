class GraphRunner
!!!34819639.java!!!	GraphRunner(inout context : MffContext)
        mContext = context;
        init(new Config());
!!!34819767.java!!!	GraphRunner(inout context : MffContext, inout config : GraphRunner::Config)
        mContext = context;
        init(config);
!!!34819895.java!!!	current() : GraphRunner
        return mThreadRunner.get();
!!!34820023.java!!!	getRunningGraph() : FilterGraph
        return mRunningGraph;
!!!34820151.java!!!	getContext() : MffContext
        return mContext;
!!!34820279.java!!!	start(inout graph : FilterGraph) : void
        if (graph.mRunner != this) {
            throw new IllegalArgumentException("Graph must be attached to runner!");
        }
        mRunningGraph = graph;
        mRunLoop.getStopCondition().close();
        mRunLoop.pushEvent(Event.PREPARE, graph);
!!!34820407.java!!!	enterSubGraph(inout graph : FilterGraph, inout listener : GraphRunner::SubListener) : void
        if (Thread.currentThread() != mRunThread) {
            throw new RuntimeException("enterSubGraph must be called from the runner's thread!");
        }
        mRunLoop.enterSubGraph(graph, listener);
!!!34820535.java!!!	waitUntilStop() : void
        mRunLoop.getStopCondition().block();
!!!34820663.java!!!	pause() : void
        mRunLoop.pushEvent(PAUSE_EVENT);
!!!34820791.java!!!	resume() : void
        mRunLoop.pushEvent(RESUME_EVENT);
!!!34820919.java!!!	stop() : void
        mRunLoop.pushEvent(STOP_EVENT);
!!!34821047.java!!!	isRunning() : boolean
        return !mRunLoop.checkState(State.STOPPED);
!!!34821175.java!!!	isPaused() : boolean
        return mRunLoop.checkState(State.PAUSED);
!!!34821303.java!!!	isStopped() : boolean
        return mRunLoop.checkState(State.STOPPED);
!!!34821431.java!!!	setSchedulerStrategy(in strategy : int) : void
        if (isRunning()) {
            throw new RuntimeException(
                    "Attempting to change scheduling strategy on running " + "GraphRunner!");
        }
        createScheduler(strategy);
!!!34821559.java!!!	getSchedulerStrategy() : int
        return mScheduler.getStrategy();
!!!34821687.java!!!	setIsVerbose(inout isVerbose : boolean) : void
        synchronized (mParams) {
            mParams.isVerbose = isVerbose;
        }
!!!34821815.java!!!	isVerbose() : boolean
        synchronized (mParams) {
            return mParams.isVerbose;
        }
!!!34821943.java!!!	isOpenGLSupported() : boolean
        return mRunLoop.isOpenGLAllowed() && mContext.isOpenGLSupported();
!!!34822071.java!!!	setFlushOnClose(inout flush : boolean) : void
        synchronized (mParams) {
            mParams.flushOnClose = flush;
        }
!!!34822199.java!!!	flushOnClose() : boolean
        synchronized (mParams) {
            return mParams.flushOnClose;
        }
!!!34822327.java!!!	setListener(inout listener : GraphRunner::Listener) : void
        synchronized (mParams) {
            mParams.listener = listener;
        }
!!!34822455.java!!!	getListener() : GraphRunner::Listener
        synchronized (mParams) {
            return mParams.listener;
        }
!!!34822583.java!!!	getFrameManager() : FrameManager
        return mFrameManager;
!!!34822711.java!!!	tearDown() : void
        synchronized (mGraphs) {
            if (!mGraphs.isEmpty()) {
                throw new IllegalStateException("Attempting to tear down runner with "
                        + mGraphs.size() + " graphs still attached!");
            }
        }
        mRunLoop.pushEvent(KILL_EVENT);
        // Wait for thread to complete, so that everything is torn down by the time we return.
        try {
            mRunThread.join();
        } catch (InterruptedException e) {
            Log.e("GraphRunner", "Error waiting for runner thread to finish!");
        }
!!!34822839.java!!!	releaseFrames() : void
        synchronized (mGraphs) {
            if (!mGraphs.isEmpty()) {
                throw new IllegalStateException("Attempting to release frames with "
                        + mGraphs.size() + " graphs still attached!");
            }
        }
        mRunLoop.pushEvent(RELEASE_FRAMES_EVENT);
!!!34822967.java!!!	attachGraph(inout graph : FilterGraph) : void
        synchronized (mGraphs) {
            mGraphs.add(graph);
        }
!!!34823095.java!!!	signalWakeUp() : void
        mRunLoop.pushWakeEvent(STEP_EVENT);
!!!34823223.java!!!	begin() : void
        mRunLoop.pushEvent(BEGIN_EVENT);
!!!34823351.java!!!	halt() : void
        mRunLoop.pushEvent(HALT_EVENT);
!!!34823479.java!!!	restart() : void
        mRunLoop.pushEvent(RESTART_EVENT);
!!!34823607.java!!!	tearDownGraph(inout graph : FilterGraph) : void
        if (graph.getRunner() != this) {
            throw new IllegalArgumentException("Attempting to tear down graph with foreign "
                    + "GraphRunner!");
        }
        mRunLoop.pushEvent(Event.TEARDOWN, graph);
        synchronized (mGraphs) {
            mGraphs.remove(graph);
        }
!!!34823735.java!!!	flushFrames() : void
        mRunLoop.pushEvent(FLUSH_EVENT);
!!!34823863.java!!!	init(inout config : GraphRunner::Config) : void
        mFrameManager = new FrameManager(this, FrameManager.FRAME_CACHE_LRU);
        createScheduler(STRATEGY_LRU);
        mRunLoop = new GraphRunLoop(config.allowOpenGL);
        mRunThread = new Thread(mRunLoop);
        mRunThread.setPriority(config.threadPriority);
        mRunThread.start();
        mContext.addRunner(this);
!!!34823991.java!!!	createScheduler(in strategy : int) : void
        switch (strategy) {
            case STRATEGY_LRU:
                mScheduler = new LruScheduler();
                break;
            case STRATEGY_LFU:
                mScheduler = new LfuScheduler();
                break;
            case STRATEGY_ONESHOT:
                mScheduler = new OneShotScheduler();
                break;
            default:
                throw new IllegalArgumentException(
                        "Unknown schedule-strategy constant " + strategy + "!");
        }
!!!34824119.java!!!	onRunnerStopped(in exception : Exception, in closed : boolean) : void
        mRunningGraph = null;
        synchronized (mParams) {
            if (mParams.listener != null) {
                getContext().postRunnable(new Runnable() {
                    @Override
                    public void run() {
                        if (exception == null) {
                            mParams.listener.onGraphRunnerStopped(GraphRunner.this);
                        } else {
                            mParams.listener.onGraphRunnerError(exception, closed);
                        }
                    }
                });
            } else if (exception != null) {
                Log.e("GraphRunner",
                        "Uncaught exception during graph execution! Stack Trace: ");
                exception.printStackTrace();
            }
        }
