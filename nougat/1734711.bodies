class Builder
!!!34772535.java!!!	Builder(inout context : MffContext)
            mContext = context;
!!!34772663.java!!!	addFilter(inout filter : Filter) : void
            if (mFilterMap.values().contains(filter)) {
                throw new IllegalArgumentException("Attempting to add filter " + filter + " that "
                    + "is in the graph already!");
            } else if (mFilterMap.containsKey(filter.getName())) {
                throw new IllegalArgumentException("Graph contains filter with name '"
                    + filter.getName() + "' already!");
            } else {
                mFilterMap.put(filter.getName(), filter);
            }
!!!34772791.java!!!	addVariable(inout name : String, inout value : Object) : VariableSource
            if (getFilter(name) != null) {
                throw new IllegalArgumentException("Filter named '" + name + "' exists already!");
            }
            VariableSource valueSource = new VariableSource(mContext, name);
            addFilter(valueSource);
            if (value != null) {
                valueSource.setValue(value);
            }
            return valueSource;
!!!34772919.java!!!	addFrameSlotSource(inout name : String, inout slotName : String) : FrameSlotSource
            FrameSlotSource filter = new FrameSlotSource(mContext, name, slotName);
            addFilter(filter);
            return filter;
!!!34773047.java!!!	addFrameSlotTarget(inout name : String, inout slotName : String) : FrameSlotTarget
            FrameSlotTarget filter = new FrameSlotTarget(mContext, name, slotName);
            addFilter(filter);
            return filter;
!!!34773175.java!!!	connect(inout sourceFilterName : String, inout sourcePort : String, inout targetFilterName : String, inout targetPort : String) : void
            Filter sourceFilter = getFilter(sourceFilterName);
            Filter targetFilter = getFilter(targetFilterName);
            if (sourceFilter == null) {
                throw new IllegalArgumentException("Unknown filter '" + sourceFilterName + "'!");
            } else if (targetFilter == null) {
                throw new IllegalArgumentException("Unknown filter '" + targetFilterName + "'!");
            }
            connect(sourceFilter, sourcePort, targetFilter, targetPort);
!!!34773303.java!!!	connect(inout sourceFilter : Filter, inout sourcePort : String, inout targetFilter : Filter, inout targetPort : String) : void
            sourceFilter.connect(sourcePort, targetFilter, targetPort);
!!!34773431.java!!!	getFilter(inout name : String) : Filter
            return mFilterMap.get(name);
!!!34773559.java!!!	build() : FilterGraph
            checkSignatures();
            return buildWithParent(null);
!!!34773687.java!!!	buildSubGraph(inout parentGraph : FilterGraph) : FilterGraph
            if (parentGraph == null) {
                throw new NullPointerException("Parent graph must be non-null!");
            }
            checkSignatures();
            return buildWithParent(parentGraph);
!!!34773815.java!!!	assignValueToFilterInput(inout value : Object, inout filterName : String, inout inputName : String) : VariableSource
            // Get filter to connect to
            Filter filter = getFilter(filterName);
            if (filter == null) {
                throw new IllegalArgumentException("Unknown filter '" + filterName + "'!");
            }

            // Construct a name for our value source and make sure it does not exist already
            String valueSourceName = filterName + "." + inputName;
            if (getFilter(valueSourceName) != null) {
                throw new IllegalArgumentException("VariableSource for '" + filterName + "' and "
                    + "input '" + inputName + "' exists already!");
            }

            // Create new VariableSource and connect it to the target filter and port
            VariableSource valueSource = new VariableSource(mContext, valueSourceName);
            addFilter(valueSource);
            try {
                ((Filter)valueSource).connect("value", filter, inputName);
            } catch (RuntimeException e) {
                throw new RuntimeException("Could not connect VariableSource to input '" + inputName
                    + "' of filter '" + filterName + "'!", e);
            }

            // Assign the value to the VariableSource
            if (value != null) {
                valueSource.setValue(value);
            }

            return valueSource;
!!!34773943.java!!!	assignVariableToFilterInput(inout varName : String, inout filterName : String, inout inputName : String) : VariableSource
            // Get filter to connect to
            Filter filter = getFilter(filterName);
            if (filter == null) {
                throw new IllegalArgumentException("Unknown filter '" + filterName + "'!");
            }

            // Get variable
            Filter variable = getFilter(varName);
            if (variable == null || !(variable instanceof VariableSource)) {
                throw new IllegalArgumentException("Unknown variable '" + varName + "'!");
            }

            // Connect variable (and possibly branch) variable to filter
            try {
                connectAndBranch(variable, "value", filter, inputName);
            } catch (RuntimeException e) {
                throw new RuntimeException("Could not connect VariableSource to input '" + inputName
                    + "' of filter '" + filterName + "'!", e);
            }

            return (VariableSource)variable;
!!!34774071.java!!!	buildWithParent(inout parent : FilterGraph) : FilterGraph
            FilterGraph graph = new FilterGraph(mContext, parent);
            graph.mFilterMap = mFilterMap;
            graph.mAllFilters = mFilterMap.values().toArray(new Filter[0]);
            for (Entry<String, Filter> filterEntry : mFilterMap.entrySet()) {
                filterEntry.getValue().insertIntoFilterGraph(graph);
            }
            return graph;
!!!34774199.java!!!	checkSignatures() : void
            checkSignaturesForFilters(mFilterMap.values());
!!!34774327.java!!!	connectAndBranch(inout sourceFilter : Filter, inout sourcePort : String, inout targetFilter : Filter, inout targetPort : String) : void
            String branchName = "__" + sourceFilter.getName() + "_" + sourcePort + "Branch";
            Filter branch = getFilter(branchName);
            if (branch == null) {
                branch = new BranchFilter(mContext, branchName, false);
                addFilter(branch);
                sourceFilter.connect(sourcePort, branch, "input");
            }
            String portName = "to" + targetFilter.getName() + "_" + targetPort;
            branch.connect(portName, targetFilter, targetPort);
