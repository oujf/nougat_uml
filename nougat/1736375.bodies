class PriorityBackingCache
!!!34785719.java!!!	PriorityBackingCache()
            mQueue = new PriorityQueue<Backing>(4, new Comparator<Backing>() {
                @Override
                public int compare(Backing left, Backing right) {
                    return left.cachePriority - right.cachePriority;
                }
            });
!!!34785847.java!!!	fetchBacking(in mode : int, in access : int, inout dimensions : int, in elemSize : int) : BackingStore::Backing
            for (Backing backing : mQueue) {
                int backingAccess = (mode == Frame.MODE_WRITE)
                    ? backing.writeAccess()
                    : backing.readAccess();
                if ((backingAccess & access) == access
                    && dimensionsCompatible(backing.getDimensions(), dimensions)
                    && (elemSize == backing.getElementSize())) {
                    mQueue.remove(backing);
                    mSize -= backing.getSize();
                    onFetchBacking(backing);
                    return backing;
                }
            }
            //Log.w("FrameManager", "Could not find backing for dimensions " + Arrays.toString(dimensions));
            return null;
!!!34785975.java!!!	cacheBacking(inout backing : BackingStore::Backing) : boolean
            if (reserve(backing.getSize())) {
                onCacheBacking(backing);
                mQueue.add(backing);
                return true;
            }
            return false;
!!!34786103.java!!!	clear() : void
            mQueue.clear();
            mSize = 0;
!!!34786231.java!!!	getSizeLeft() : int
            return mCacheMaxSize - mSize;
!!!34786615.java!!!	reserve(in size : int) : boolean
            //Log.i("FM", "Reserving " + size + " bytes (max: " + mCacheMaxSize + " bytes).");
            //Log.i("FM", "Current size " + mSize);
            if (size > mCacheMaxSize) {
                return false;
            }
            mSize += size;
            while (mSize > mCacheMaxSize) {
                Backing dropped = mQueue.poll();
                mSize -= dropped.getSize();
                //Log.i("FM", "Dropping  " + dropped + " with priority "
                //    + dropped.cachePriority + ". New size: " + mSize + "!");
                dropped.destroy();
            }
            return true;
