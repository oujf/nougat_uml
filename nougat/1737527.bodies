class GLToolbox
!!!34800951.java!!!	textureNone() : int
        return 0;
!!!34801079.java!!!	isTexture(in texId : int) : boolean
        return GLES20.glIsTexture(texId);
!!!34801207.java!!!	deleteTexture(in texId : int) : void
        int[] textures = new int[] { texId };
        assertNonUiThread("glDeleteTextures");
        GLES20.glDeleteTextures(1, textures, 0);
        checkGlError("glDeleteTextures");
!!!34801335.java!!!	deleteFbo(in fboId : int) : void
        int[] fbos = new int[] { fboId };
        assertNonUiThread("glDeleteFramebuffers");
        GLES20.glDeleteFramebuffers(1, fbos, 0);
        checkGlError("glDeleteFramebuffers");
!!!34801463.java!!!	generateTexture() : int
        int[] textures = new int[1];
        GLES20.glGenTextures(1, textures, 0);
        checkGlError("glGenTextures");
        return textures[0];
!!!34801591.java!!!	generateFbo() : int
        int[] fbos = new int[1];
        GLES20.glGenFramebuffers(1, fbos, 0);
        checkGlError("glGenFramebuffers");
        return fbos[0];
!!!34801719.java!!!	readFbo(in fboId : int, inout pixels : ByteBuffer, in width : int, in height : int) : void
        GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, fboId);
        GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, pixels);
        checkGlError("glReadPixels");
!!!34801847.java!!!	readTarget(inout target : RenderTarget, inout pixels : ByteBuffer, in width : int, in height : int) : void
        target.focus();
        GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, pixels);
        checkGlError("glReadPixels");
!!!34801975.java!!!	attachedTexture(in fboId : int) : int
        int[] params = new int[1];
        GLES20.glGetFramebufferAttachmentParameteriv(
            GLES20.GL_FRAMEBUFFER,
            GLES20.GL_COLOR_ATTACHMENT0,
            GLES20.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,
            params, 0);
        checkGlError("glGetFramebufferAttachmentParameteriv");
        return params[0];
!!!34802103.java!!!	attachTextureToFbo(in texId : int, in fboId : int) : void
        GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER, fboId);
        GLES20.glFramebufferTexture2D(GLES20.GL_FRAMEBUFFER,
                                      GLES20.GL_COLOR_ATTACHMENT0,
                                      GLES20.GL_TEXTURE_2D,
                                      texId,
                                      0);
        checkGlError("glFramebufferTexture2D");
!!!34802231.java!!!	allocateTexturePixels(in texId : int, in target : int, in width : int, in height : int) : void
        setTexturePixels(texId, target, (ByteBuffer)null, width, height);
!!!34802359.java!!!	setTexturePixels(in texId : int, in target : int, inout bitmap : Bitmap) : void
        GLES20.glBindTexture(target, texId);
        GLUtils.texImage2D(target, 0, bitmap, 0);
        checkGlError("glTexImage2D");
        setDefaultTexParams();
!!!34802487.java!!!	setTexturePixels(in texId : int, in target : int, inout pixels : ByteBuffer, in width : int, in height : int) : void
        GLES20.glBindTexture(target, texId);

        // For some devices, "pixels" being null causes system error.
        if (pixels == null) {
            pixels = ByteBuffer.allocateDirect(width * height * 4);
        }
        GLES20.glTexImage2D(target, 0, GLES20.GL_RGBA, width, height, 0,
                            GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, pixels);
        checkGlError("glTexImage2D");
        setDefaultTexParams();
!!!34802615.java!!!	setDefaultTexParams() : void
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,
                               GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,
                               GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,
                               GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,
                               GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
        checkGlError("glTexParameteri");
!!!34802743.java!!!	vboNone() : int
        return 0;
!!!34802871.java!!!	generateVbo() : int
        int[] vbos = new int[1];
        GLES20.glGenBuffers(1, vbos, 0);
        checkGlError("glGenBuffers");
        return vbos[0];
!!!34802999.java!!!	setVboData(in vboId : int, inout data : ByteBuffer) : void
        GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, vboId);
        GLES20.glBufferData(GLES20.GL_ARRAY_BUFFER, data.remaining(), data, GLES20.GL_STATIC_DRAW);
        checkGlError("glBufferData");
!!!34803127.java!!!	setVboFloats(in vboId : int, inout values : float) : void
        int len = values.length * 4;
        ByteBuffer buffer = ByteBuffer.allocateDirect(len).order(ByteOrder.nativeOrder());
        setVboData(vboId, buffer);
!!!34803255.java!!!	isVbo(in vboId : int) : boolean
        return GLES20.glIsBuffer(vboId);
!!!34803383.java!!!	deleteVbo(in vboId : int) : void
        int[] buffers = new int[] { vboId };
        GLES20.glDeleteBuffers(1, buffers, 0);
        checkGlError("glDeleteBuffers");
!!!34803511.java!!!	checkGlError(inout operation : String) : void
        int error;
        while ((error = GLES20.glGetError()) != GLES20.GL_NO_ERROR) {
            throw new RuntimeException("GL Operation '" + operation + "' caused error "
                + Integer.toHexString(error) + "!");
        }
!!!34803639.java!!!	assertNonUiThread(inout operation : String) : void
        if (Looper.getMainLooper().getThread() == Thread.currentThread()) {
            throw new RuntimeException("Attempting to perform GL operation '" + operation
                    + "' on UI thread!");
        }
