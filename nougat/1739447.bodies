class GraphDataHandler
!!!34809015.java!!!	GraphDataHandler(inout commandStack : GraphReader::CommandStack)
                mCommandStack = commandStack;
!!!34809143.java!!!	startElement(inout uri : String, inout localName : String, inout qName : String, inout attr : Attributes) : void
                if (localName.equals("graph")) {
                    beginGraph();
                } else {
                    assertInGraph(localName);
                    if (localName.equals("import")) {
                        addImportCommand(attr);
                    } else if (localName.equals("library")) {
                        addLibraryCommand(attr);
                    } else if (localName.equals("connect")) {
                        addConnectCommand(attr);
                    } else if (localName.equals("var")) {
                        addVarCommand(attr);
                    } else if (localName.equals("filter")) {
                        beginFilter(attr);
                    } else if (localName.equals("input")) {
                        addFilterInput(attr);
                    } else {
                        throw new SAXException("Unknown XML element '" + localName + "'!");
                    }
                }
!!!34809271.java!!!	endElement(inout uri : String, inout localName : String, inout qName : String) : void
                if (localName.equals("graph")) {
                    endGraph();
                } else if (localName.equals("filter")) {
                    endFilter();
                }
!!!34809399.java!!!	addImportCommand(inout attributes : Attributes) : void
                String packageName = getRequiredAttribute(attributes, "package");
                mCommandStack.append(new ImportPackageCommand(packageName));
!!!34809527.java!!!	addLibraryCommand(inout attributes : Attributes) : void
                String libraryName = getRequiredAttribute(attributes, "name");
                mCommandStack.append(new AddLibraryCommand(libraryName));
!!!34809655.java!!!	addConnectCommand(inout attributes : Attributes) : void
                String sourcePortName   = null;
                String sourceFilterName = null;
                String targetPortName   = null;
                String targetFilterName = null;

                // check for shorthand: <connect source="filter:port" target="filter:port"/>
                String sourceTag = attributes.getValue("source");
                if (sourceTag != null) {
                    String[] sourceParts = sourceTag.split(":");
                    if (sourceParts.length == 2) {
                        sourceFilterName = sourceParts[0];
                        sourcePortName   = sourceParts[1];
                    } else {
                        throw new RuntimeException(
                            "'source' tag needs to have format \"filter:port\"! " +
                            "Alternatively, you may use the form " +
                            "'sourceFilter=\"filter\" sourcePort=\"port\"'.");
                    }
                } else {
                    sourceFilterName = attributes.getValue("sourceFilter");
                    sourcePortName   = attributes.getValue("sourcePort");
                }

                String targetTag = attributes.getValue("target");
                if (targetTag != null) {
                    String[] targetParts = targetTag.split(":");
                    if (targetParts.length == 2) {
                        targetFilterName = targetParts[0];
                        targetPortName   = targetParts[1];
                    } else {
                        throw new RuntimeException(
                            "'target' tag needs to have format \"filter:port\"! " +
                            "Alternatively, you may use the form " +
                            "'targetFilter=\"filter\" targetPort=\"port\"'.");
                    }
                } else {
                    targetFilterName = attributes.getValue("targetFilter");
                    targetPortName   = attributes.getValue("targetPort");
                }

                String sourceSlotName = attributes.getValue("sourceSlot");
                String targetSlotName = attributes.getValue("targetSlot");
                if (sourceSlotName != null) {
                    sourceFilterName = "sourceSlot_" + sourceSlotName;
                    mCommandStack.append(new AddSourceSlotCommand(sourceFilterName,
                                                                  sourceSlotName));
                    sourcePortName = "frame";
                }
                if (targetSlotName != null) {
                    targetFilterName = "targetSlot_" + targetSlotName;
                    mCommandStack.append(new AddTargetSlotCommand(targetFilterName,
                                                                  targetSlotName));
                    targetPortName = "frame";
                }
                assertValueNotNull("sourceFilter", sourceFilterName);
                assertValueNotNull("sourcePort", sourcePortName);
                assertValueNotNull("targetFilter", targetFilterName);
                assertValueNotNull("targetPort", targetPortName);
                // TODO: Should slot connections auto-branch?
                mCommandStack.append(new ConnectCommand(sourceFilterName,
                                                        sourcePortName,
                                                        targetFilterName,
                                                        targetPortName));
!!!34809783.java!!!	addVarCommand(inout attributes : Attributes) : void
                String varName = getRequiredAttribute(attributes, "name");
                Object varValue = getAssignmentValue(attributes);
                mCommandStack.append(new AddVariableCommand(varName, varValue));
!!!34809911.java!!!	beginGraph() : void
                if (mInGraph) {
                    throw new SAXException("Found more than one graph element in XML!");
                }
                mInGraph = true;
!!!34810039.java!!!	endGraph() : void
                mInGraph = false;
!!!34810167.java!!!	beginFilter(inout attributes : Attributes) : void
                String className = getRequiredAttribute(attributes, "class");
                mCurFilterName = getRequiredAttribute(attributes, "name");
                mCommandStack.append(new AllocateFilterCommand(className, mCurFilterName));
!!!34810295.java!!!	endFilter() : void
                mCurFilterName = null;
!!!34810423.java!!!	addFilterInput(inout attributes : Attributes) : void
                // Make sure we are in a filter element
                if (mCurFilterName == null) {
                    throw new SAXException("Found 'input' element outside of 'filter' "
                        + "element!");
                }

                // Get input name and value
                String inputName = getRequiredAttribute(attributes, "name");
                Object inputValue = getAssignmentValue(attributes);
                if (inputValue == null) {
                    throw new SAXException("No value specified for input '" + inputName + "' "
                        + "of filter '" + mCurFilterName + "'!");
                }

                // Push commmand
                mCommandStack.append(new SetFilterInputCommand(mCurFilterName,
                                                               inputName,
                                                               inputValue));
!!!34810551.java!!!	assertInGraph(inout localName : String) : void
                if (!mInGraph) {
                    throw new SAXException("Encountered '" + localName + "' element outside of "
                        + "'graph' element!");
                }
!!!34810679.java!!!	getAssignmentValue(inout attributes : Attributes) : Object
                String strValue = null;
                if ((strValue = attributes.getValue("stringValue")) != null) {
                    return strValue;
                } else if ((strValue = attributes.getValue("booleanValue")) != null) {
                    return Boolean.parseBoolean(strValue);
                } else if ((strValue = attributes.getValue("intValue")) != null) {
                    return Integer.parseInt(strValue);
                } else if ((strValue = attributes.getValue("floatValue")) != null) {
                    return Float.parseFloat(strValue);
                } else if ((strValue = attributes.getValue("floatsValue")) != null) {
                    String[] floatStrings = TextUtils.split(strValue, ",");
                    float[] result = new float[floatStrings.length];
                    for (int i = 0; i < floatStrings.length; ++i) {
                        result[i] = Float.parseFloat(floatStrings[i]);
                    }
                    return result;
                } else if ((strValue = attributes.getValue("varValue")) != null) {
                    return new Variable(strValue);
                } else {
                    return null;
                }
!!!34810807.java!!!	getRequiredAttribute(inout attributes : Attributes, inout name : String) : String
                String result = attributes.getValue(name);
                if (result == null) {
                    throw new SAXException("Required attribute '" + name + "' not found!");
                }
                return result;
!!!34810935.java!!!	assertValueNotNull(inout valueName : String, inout value : Object) : void
                if (value == null) {
                    throw new NullPointerException("Required value '" + value + "' not specified!");
                }
