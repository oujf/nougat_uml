class VertexAttribute
!!!34824247.java!!!	VertexAttribute(inout name : String, in index : int)
            mName = name;
            mIndex = index;
            mLength = -1;
!!!34824375.java!!!	set(inout normalize : boolean, in stride : int, in components : int, in type : int, inout values : float) : void
            mIsConst = false;
            mShouldNormalize = normalize;
            mStride = stride;
            mComponents = components;
            mType = type;
            mVbo = 0;
            if (mLength != values.length){
                initBuffer(values);
                mLength = values.length;
            }
            copyValues(values);
!!!34824503.java!!!	set(inout normalize : boolean, in offset : int, in stride : int, in components : int, in type : int, in vbo : int) : void
            mIsConst = false;
            mShouldNormalize = normalize;
            mOffset = offset;
            mStride = stride;
            mComponents = components;
            mType = type;
            mVbo = vbo;
            mValues = null;
!!!34824631.java!!!	push() : boolean
            if (mIsConst) {
                switch (mComponents) {
                    case 1:
                        GLES20.glVertexAttrib1fv(mIndex, mValues);
                        break;
                    case 2:
                        GLES20.glVertexAttrib2fv(mIndex, mValues);
                        break;
                    case 3:
                        GLES20.glVertexAttrib3fv(mIndex, mValues);
                        break;
                    case 4:
                        GLES20.glVertexAttrib4fv(mIndex, mValues);
                        break;
                    default:
                        return false;
                }
                GLES20.glDisableVertexAttribArray(mIndex);
            } else {
                if (mValues != null) {
                    // Note that we cannot do any size checking here, as the correct component
                    // count depends on the drawing step. GL should catch such errors then, and
                    // we will report them to the user.
                    GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, 0);
                    GLES20.glVertexAttribPointer(mIndex,
                                                 mComponents,
                                                 mType,
                                                 mShouldNormalize,
                                                 mStride,
                                                 mValues);
                } else {
                    GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER, mVbo);
                    GLES20.glVertexAttribPointer(mIndex,
                                                 mComponents,
                                                 mType,
                                                 mShouldNormalize,
                                                 mStride,
                                                 mOffset);
                }
                GLES20.glEnableVertexAttribArray(mIndex);
            }
            GLToolbox.checkGlError("Set vertex-attribute values");
            return true;
!!!34824759.java!!!	toString() : String
            return mName;
!!!34824887.java!!!	initBuffer(inout values : float) : void
            mValues = ByteBuffer.allocateDirect(values.length * FLOAT_SIZE)
                .order(ByteOrder.nativeOrder()).asFloatBuffer();
!!!34825015.java!!!	copyValues(inout values : float) : void
            mValues.put(values).position(0);
