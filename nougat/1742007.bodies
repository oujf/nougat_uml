class NewChromaHistogramFilter
!!!34842679.java!!!	NewChromaHistogramFilter(inout context : MffContext, inout name : String)
        super(context, name);
!!!34842807.java!!!	getSignature() : Signature
        FrameType imageIn = FrameType.image2D(FrameType.ELEMENT_RGBA8888, FrameType.READ_CPU);
        FrameType dataOut = FrameType.buffer2D(FrameType.ELEMENT_FLOAT32);

        return new Signature()
            .addInputPort("image", Signature.PORT_REQUIRED, imageIn)
            .addInputPort("huebins", Signature.PORT_OPTIONAL, FrameType.single(int.class))
            .addInputPort("saturationbins", Signature.PORT_OPTIONAL, FrameType.single(int.class))
            .addInputPort("saturationthreshold", Signature.PORT_OPTIONAL,
                    FrameType.single(int.class))
            .addInputPort("valuethreshold", Signature.PORT_OPTIONAL, FrameType.single(int.class))
            .addOutputPort("histogram", Signature.PORT_REQUIRED, dataOut)
            .disallowOtherPorts();
!!!34842935.java!!!	onInputPortOpen(inout port : InputPort) : void
        if (port.getName().equals("huebins")) {
            port.bindToFieldNamed("mHueBins");
            port.setAutoPullEnabled(true);
        } else if (port.getName().equals("saturationbins")) {
            port.bindToFieldNamed("mSaturationBins");
            port.setAutoPullEnabled(true);
        } else if (port.getName().equals("saturationthreshold")) {
            port.bindToFieldNamed("mSaturationThreshold");
            port.setAutoPullEnabled(true);
        } else if (port.getName().equals("valuethreshold")) {
            port.bindToFieldNamed("mValueThreshold");
            port.setAutoPullEnabled(true);
        }
!!!34843063.java!!!	onProcess() : void
        FrameBuffer2D imageFrame = getConnectedInputPort("image").pullFrame().asFrameImage2D();
        OutputPort outPort = getConnectedOutputPort("histogram");

        mValueBins = mHueBins;
        int[] outDims = new int[] {mHueBins, mSaturationBins + 1};
        FrameBuffer2D histogramFrame = outPort.fetchAvailableFrame(outDims).asFrameBuffer2D();

        ByteBuffer imageBuffer  = imageFrame.lockBytes(Frame.MODE_READ);
        ByteBuffer histogramBuffer = histogramFrame.lockBytes(Frame.MODE_READ);
        histogramBuffer.order(ByteOrder.nativeOrder());
        FloatBuffer floatHistogram = histogramBuffer.asFloatBuffer();

        // Run native method
        extractChromaHistogram(imageBuffer, floatHistogram, mHueBins, mSaturationBins, mValueBins,
                mSaturationThreshold, mValueThreshold);

        imageFrame.unlock();
        histogramFrame.unlock();

        outPort.pushFrame(histogramFrame);
