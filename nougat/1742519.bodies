class RotateFilter
!!!34851383.java!!!	RotateFilter(inout context : MffContext, inout name : String)
        super(context, name);
!!!34851511.java!!!	getSignature() : Signature
        FrameType imageIn = FrameType.image2D(FrameType.ELEMENT_RGBA8888, FrameType.READ_GPU);
        FrameType imageOut = FrameType.image2D(FrameType.ELEMENT_RGBA8888, FrameType.WRITE_GPU);
        return new Signature()
            .addInputPort("image", Signature.PORT_REQUIRED, imageIn)
            .addInputPort("rotateAngle", Signature.PORT_REQUIRED, FrameType.single(float.class))
            .addInputPort("sourceRect", Signature.PORT_OPTIONAL, FrameType.single(Quad.class))
            .addOutputPort("image", Signature.PORT_REQUIRED, imageOut)
            .disallowOtherPorts();
!!!34851639.java!!!	onInputPortOpen(inout port : InputPort) : void
        if (port.getName().equals("rotateAngle")) {
            port.bindToFieldNamed("mRotateAngle");
            port.setAutoPullEnabled(true);
        } else if (port.getName().equals("sourceRect")) {
            port.bindToFieldNamed("mSourceRect");
            port.setAutoPullEnabled(true);
        }
!!!34851767.java!!!	onPrepare() : void
        mShader = ImageShader.createIdentity();
!!!34851895.java!!!	onProcess() : void
        OutputPort outPort = getConnectedOutputPort("image");
        FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
        int[] inDims = inputImage.getDimensions();

        FrameImage2D outputImage = outPort.fetchAvailableFrame(inDims).asFrameImage2D();
        mShader.setSourceQuad(mSourceRect);
        Quad targetQuad = mSourceRect.rotated((float) (mRotateAngle / 180 * Math.PI));
        mShader.setTargetQuad(targetQuad);
        mShader.process(inputImage, outputImage);
        outPort.pushFrame(outputImage);
