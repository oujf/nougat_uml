class SobelFilter
!!!34855351.java!!!	SobelFilter(inout context : MffContext, inout name : String)
        super(context, name);
!!!34855479.java!!!	getSignature() : Signature
        // TODO: we will address the issue of READ_GPU / WRITE_GPU when using CPU filters later.
        FrameType imageIn = FrameType.image2D(FrameType.ELEMENT_RGBA8888, FrameType.READ_GPU);
        FrameType imageOut = FrameType.image2D(FrameType.ELEMENT_RGBA8888, FrameType.WRITE_GPU);
        return new Signature().addInputPort("image", Signature.PORT_REQUIRED, imageIn)
                .addOutputPort("direction", Signature.PORT_OPTIONAL, imageOut)
                .addOutputPort("magnitude", Signature.PORT_OPTIONAL, imageOut).disallowOtherPorts();
!!!34855607.java!!!	onPrepare() : void
        if (isOpenGLSupported()) {
            mGradientXShader = new ImageShader(mGradientXSource);
            mGradientYShader = new ImageShader(mGradientYSource);
            mMagnitudeShader = new ImageShader(mMagnitudeSource);
            mDirectionShader = new ImageShader(mDirectionSource);
            mImageType = FrameType.image2D(
                    FrameType.ELEMENT_RGBA8888, FrameType.READ_GPU | FrameType.WRITE_GPU);
        }
!!!34855735.java!!!	onProcess() : void
        OutputPort magnitudePort = getConnectedOutputPort("magnitude");
        OutputPort directionPort = getConnectedOutputPort("direction");
        FrameImage2D inputImage = getConnectedInputPort("image").pullFrame().asFrameImage2D();
        int[] inputDims = inputImage.getDimensions();

        FrameImage2D magImage = (magnitudePort != null) ?
                magnitudePort.fetchAvailableFrame(inputDims).asFrameImage2D() : null;
        FrameImage2D dirImage = (directionPort != null) ?
                directionPort.fetchAvailableFrame(inputDims).asFrameImage2D() : null;
        if (isOpenGLSupported()) {
            FrameImage2D gxFrame = Frame.create(mImageType, inputDims).asFrameImage2D();
            FrameImage2D gyFrame = Frame.create(mImageType, inputDims).asFrameImage2D();
            mGradientXShader.setUniformValue("pix", new float[] {1f/inputDims[0], 1f/inputDims[1]});
            mGradientYShader.setUniformValue("pix", new float[] {1f/inputDims[0], 1f/inputDims[1]});
            mGradientXShader.process(inputImage, gxFrame);
            mGradientYShader.process(inputImage, gyFrame);
            FrameImage2D[] gradientFrames = new FrameImage2D[] { gxFrame, gyFrame };
            if (magnitudePort != null) {
                mMagnitudeShader.processMulti(gradientFrames, magImage);
            }
            if (directionPort != null) {
                mDirectionShader.processMulti(gradientFrames, dirImage);
            }
            gxFrame.release();
            gyFrame.release();
        } else {
            ByteBuffer inputBuffer  = inputImage.lockBytes(Frame.MODE_READ);
            ByteBuffer magBuffer  = (magImage != null) ?
                    magImage.lockBytes(Frame.MODE_WRITE) : null;
            ByteBuffer dirBuffer  = (dirImage != null) ?
                    dirImage.lockBytes(Frame.MODE_WRITE) : null;
            sobelOperator(inputImage.getWidth(), inputImage.getHeight(),
                    inputBuffer, magBuffer, dirBuffer);
            inputImage.unlock();
            if (magImage != null) {
                magImage.unlock();
            }
            if (dirImage != null) {
                dirImage.unlock();
            }
        }
        if (magImage != null) {
            magnitudePort.pushFrame(magImage);
        }
        if (dirImage != null) {
            directionPort.pushFrame(dirImage);
        }
