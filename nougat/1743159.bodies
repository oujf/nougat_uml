class SurfaceHolderTarget
!!!34857783.java!!!	SurfaceHolderTarget(inout context : MffContext, inout name : String)
        super(context, name);
!!!34857911.java!!!	onBindToView(inout view : View) : void
        if (view instanceof SurfaceView) {
            SurfaceHolder holder = ((SurfaceView)view).getHolder();
            if (holder == null) {
                throw new RuntimeException("Could not get SurfaceHolder from SurfaceView "
                    + view + "!");
            }
            setSurfaceHolder(holder);
        } else {
            throw new IllegalArgumentException("View must be a SurfaceView!");
        }
!!!34858039.java!!!	setSurfaceHolder(inout holder : SurfaceHolder) : void
        if (isRunning()) {
            throw new IllegalStateException("Cannot set SurfaceHolder while running!");
        }
        mSurfaceHolder = holder;
!!!34858167.java!!!	onDestroySurface() : void
        if (mRenderTarget != null) {
            mRenderTarget.release();
            mRenderTarget = null;
        }
        mHasSurface = false;
!!!34858295.java!!!	getSignature() : Signature
        FrameType imageType = FrameType.image2D(FrameType.ELEMENT_RGBA8888, FrameType.READ_GPU);
        return super.getSignature()
            .addInputPort("image", Signature.PORT_REQUIRED, imageType)
            .disallowOtherPorts();
!!!34858423.java!!!	onInputPortOpen(inout port : InputPort) : void
        super.connectViewInputs(port);
!!!34858551.java!!!	onPrepare() : void
        if (isOpenGLSupported()) {
            mShader = ImageShader.createIdentity();
        }
!!!34858679.java!!!	onOpen() : void
        mSurfaceHolder.addCallback(mSurfaceHolderListener);
        Surface surface = mSurfaceHolder.getSurface();
        mHasSurface = (surface != null) && surface.isValid();
!!!34858807.java!!!	onProcess() : void
        FrameImage2D image = getConnectedInputPort("image").pullFrame().asFrameImage2D();
        if (mHasSurface) {
            // Synchronize the surface holder in case another filter is accessing this surface.
            synchronized (mSurfaceHolder) {
                if (isOpenGLSupported()) {
                    renderGL(image);
                } else {
                    renderCanvas(image);
                }
            }
        }
!!!34858935.java!!!	renderGL(inout image : FrameImage2D) : void
        if (mRenderTarget == null) {
            mRenderTarget = RenderTarget.currentTarget().forSurfaceHolder(mSurfaceHolder);
            mRenderTarget.registerAsDisplaySurface();
        }
        Rect frameRect = new Rect(0, 0, image.getWidth(), image.getHeight());
        Rect surfRect = mSurfaceHolder.getSurfaceFrame();
        setupShader(mShader, frameRect, surfRect);
        mShader.process(image.lockTextureSource(),
                        mRenderTarget,
                        surfRect.width(),
                        surfRect.height());
        image.unlock();
        mRenderTarget.swapBuffers();
!!!34859063.java!!!	renderCanvas(inout image : FrameImage2D) : void
        Canvas canvas = mSurfaceHolder.lockCanvas();
        Bitmap bitmap = image.toBitmap();
        Rect sourceRect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());
        Rect surfaceRect = mSurfaceHolder.getSurfaceFrame();
        RectF targetRect = getTargetRect(sourceRect, surfaceRect);
        canvas.drawColor(Color.BLACK);
        if (targetRect.width() > 0 && targetRect.height() > 0) {
            canvas.scale(surfaceRect.width(), surfaceRect.height());
            canvas.drawBitmap(bitmap, sourceRect, targetRect, new Paint());
        }
        mSurfaceHolder.unlockCanvasAndPost(canvas);
!!!34859191.java!!!	onClose() : void
        if (mRenderTarget != null) {
            mRenderTarget.unregisterAsDisplaySurface();
            mRenderTarget.release();
            mRenderTarget = null;
        }
        if (mSurfaceHolder != null) {
            mSurfaceHolder.removeCallback(mSurfaceHolderListener);
        }
!!!34859319.java!!!	onSurfaceCreated(inout holder : SurfaceHolder) : void
        if (mSurfaceHolder != holder) {
            throw new RuntimeException("Unexpected Holder!");
        }
        mHasSurface = true;
