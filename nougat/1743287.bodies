class ViewFilter
!!!34856759.java!!!	ViewFilter(inout context : MffContext, inout name : String)
        super(context, name);
!!!34856887.java!!!	bindToView(inout view : View) : void
        if (isRunning()) {
            throw new IllegalStateException("Attempting to bind filter to view while it is "
                + "running!");
        }
        onBindToView(view);
!!!34857015.java!!!	setScaleMode(in scaleMode : int) : void
        if (isRunning()) {
            throw new IllegalStateException("Attempting to change scale mode while filter is "
                + "running!");
        }
        mScaleMode = scaleMode;
!!!34857143.java!!!	getSignature() : Signature
        return new Signature()
            .addInputPort("scaleMode", Signature.PORT_OPTIONAL, FrameType.single(String.class))
            .addInputPort("flip", Signature.PORT_OPTIONAL, FrameType.single(boolean.class));
!!!34857399.java!!!	getTargetRect(inout frameRect : Rect, inout bufferRect : Rect) : RectF
        RectF result = new RectF();
        if (bufferRect.width() > 0 && bufferRect.height() > 0) {
            float frameAR = (float)frameRect.width() / frameRect.height();
            float bufferAR = (float)bufferRect.width() / bufferRect.height();
            float relativeAR = bufferAR / frameAR;
            switch (mScaleMode) {
                case SCALE_STRETCH:
                    result.set(0f, 0f, 1f, 1f);
                    break;
                case SCALE_FIT:
                    if (relativeAR > 1.0f) {
                        float x = 0.5f - 0.5f / relativeAR;
                        float y = 0.0f;
                        result.set(x, y, x + 1.0f / relativeAR, y + 1.0f);
                    } else {
                        float x = 0.0f;
                        float y = 0.5f - 0.5f * relativeAR;
                        result.set(x, y, x + 1.0f, y + relativeAR);
                    }
                    break;
                case SCALE_FILL:
                    if (relativeAR > 1.0f) {
                        float x = 0.0f;
                        float y = 0.5f - 0.5f * relativeAR;
                        result.set(x, y, x + 1.0f, y + relativeAR);
                    } else {
                        float x = 0.5f - 0.5f / relativeAR;
                        float y = 0.0f;
                        result.set(x, y, x + 1.0f / relativeAR, y + 1.0f);
                    }
                    break;
            }
        }
        return result;
!!!34857527.java!!!	connectViewInputs(inout port : InputPort) : void
        if (port.getName().equals("scaleMode")) {
            port.bindToListener(mScaleModeListener);
            port.setAutoPullEnabled(true);
        } else if (port.getName().equals("flip")) {
            port.bindToFieldNamed("mFlipVertically");
            port.setAutoPullEnabled(true);
        }
!!!34857655.java!!!	setupShader(inout shader : ImageShader, inout frameRect : Rect, inout outputRect : Rect) : void
        shader.setTargetRect(getTargetRect(frameRect, outputRect));
        shader.setClearsOutput(true);
        shader.setClearColor(mClearColor);
        if (mFlipVertically) {
            shader.setSourceRect(0f, 1f, 1f, -1f);
        }
