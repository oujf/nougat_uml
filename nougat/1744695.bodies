class TrackDecoder
!!!34867255.java!!!	TrackDecoder(in trackIndex : int, inout mediaFormat : MediaFormat, inout listener : TrackDecoder::Listener)
        mTrackIndex = trackIndex;

        if (mediaFormat == null) {
            throw new NullPointerException("mediaFormat cannot be null");
        }
        mMediaFormat = mediaFormat;

        if (listener == null) {
            throw new NullPointerException("listener cannot be null");
        }
        mListener = listener;
!!!34867383.java!!!	init() : void
        mMediaCodec = initMediaCodec(mMediaFormat);
        mMediaCodec.start();
        mCodecInputBuffers = mMediaCodec.getInputBuffers();
        mCodecOutputBuffers = mMediaCodec.getOutputBuffers();
!!!34867511.java!!!	signalEndOfInput() : void
        mShouldEnqueueEndOfStream = true;
        tryEnqueueEndOfStream();
!!!34867639.java!!!	release() : void
        if (mMediaCodec != null) {
            mMediaCodec.stop();
            mMediaCodec.release();
        }
!!!34867767.java!!!	getMediaCodec() : MediaCodec
        return mMediaCodec;
!!!34867895.java!!!	notifyListener() : void
        mListener.onDecodedOutputAvailable(this);
!!!34868023.java!!!	feedInput(inout mediaExtractor : MediaExtractor) : boolean
        long presentationTimeUs = 0;

        int inputBufferIndex = mMediaCodec.dequeueInputBuffer(TIMEOUT_US);
        if (inputBufferIndex != NO_INPUT_BUFFER) {
            ByteBuffer destinationBuffer = mCodecInputBuffers[inputBufferIndex];
            int sampleSize = mediaExtractor.readSampleData(destinationBuffer, 0);
            // We don't expect to get a sample without any data, so this should never happen.
            if (sampleSize < 0) {
                Log.w(LOG_TAG, "Media extractor had sample but no data.");

                // Signal the end of the track immediately anyway, using the buffer.
                mMediaCodec.queueInputBuffer(
                        inputBufferIndex, 0, 0, 0, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
                return false;
            }

            presentationTimeUs = mediaExtractor.getSampleTime();
            mMediaCodec.queueInputBuffer(
                    inputBufferIndex,
                    0,
                    sampleSize,
                    presentationTimeUs,
                    0);

            return mediaExtractor.advance()
                    && mediaExtractor.getSampleTrackIndex() == mTrackIndex;
        }
        return false;
!!!34868151.java!!!	tryEnqueueEndOfStream() : void
        int inputBufferIndex = mMediaCodec.dequeueInputBuffer(TIMEOUT_US);
        // We will always eventually have an input buffer, because we keep trying until the last
        // decoded frame is output.
        // The EoS does not need to be signaled if the application stops decoding.
        if (inputBufferIndex != NO_INPUT_BUFFER) {
            mMediaCodec.queueInputBuffer(
                    inputBufferIndex, 0, 0, 0, MediaCodec.BUFFER_FLAG_END_OF_STREAM);
            mShouldEnqueueEndOfStream = false;
        }
!!!34868279.java!!!	drainOutputBuffer() : boolean
        BufferInfo outputInfo = new BufferInfo();
        int outputBufferIndex = mMediaCodec.dequeueOutputBuffer(outputInfo, TIMEOUT_US);

        if ((outputInfo.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
            mListener.onEndOfStream(this);
            return false;
        }
        if (mShouldEnqueueEndOfStream) {
            tryEnqueueEndOfStream();
        }
        if (outputBufferIndex >= 0) {
            return onDataAvailable(
                    mMediaCodec, mCodecOutputBuffers, outputBufferIndex, outputInfo);
        } else if (outputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
            mCodecOutputBuffers = mMediaCodec.getOutputBuffers();
            return true;
        } else if (outputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
            mOutputFormat = mMediaCodec.getOutputFormat();
            Log.d(LOG_TAG, "Output format has changed to " + mOutputFormat);
            return true;
        }
        return false;
