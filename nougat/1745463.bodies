class MediaDecoder
!!!34872759.java!!!	MediaDecoder(inout context : Context, inout uri : Uri, inout listener : MediaDecoder::Listener)
        this(context, uri, 0, listener);
!!!34872887.java!!!	MediaDecoder(inout context : Context, inout uri : Uri, in startMicros : long, inout listener : MediaDecoder::Listener)
        if (context == null) {
            throw new NullPointerException("context cannot be null");
        }
        mContext = context;

        if (uri == null) {
            throw new NullPointerException("uri cannot be null");
        }
        mUri = uri;

        if (startMicros < 0) {
            throw new IllegalArgumentException("startMicros cannot be negative");
        }
        mStartMicros = startMicros;

        if (listener == null) {
            throw new NullPointerException("listener cannot be null");
        }
        mListener = listener;

        mEventQueue = new LinkedBlockingQueue<Integer>(MAX_EVENTS);
        mDecoderThread = new Thread(this);
!!!34873015.java!!!	setOpenGLEnabled(inout enabled : boolean) : void
        // If event-queue already has events, we have started already.
        if (mEventQueue.isEmpty()) {
            mOpenGLEnabled = enabled;
        } else {
            throw new IllegalStateException(
                    "Must call setOpenGLEnabled() before calling start()!");
        }
!!!34873143.java!!!	isOpenGLEnabled() : boolean
        return mOpenGLEnabled;
!!!34873271.java!!!	start() : void
        mEventQueue.offer(EVENT_START);
        mDecoderThread.start();
!!!34873399.java!!!	stop() : void
        stop(true);
!!!34873527.java!!!	stop(inout manual : boolean) : void
        if (manual) {
            mEventQueue.offer(EVENT_STOP);
            mDecoderThread.interrupt();
        } else {
            mEventQueue.offer(EVENT_EOF);
        }
!!!34873655.java!!!	run() : void
        Integer event;
        try {
            while (true) {
                event = mEventQueue.poll();
                boolean shouldStop = false;
                if (event != null) {
                    switch (event) {
                        case EVENT_START:
                            onStart();
                            break;
                        case EVENT_EOF:
                            if (mVideoTrackDecoder != null) {
                                mVideoTrackDecoder.waitForFrameGrab();
                            }
                            // once the last frame has been grabbed, fall through and stop
                        case EVENT_STOP:
                            onStop(true);
                            shouldStop = true;
                            break;
                    }
                } else if (mStarted) {
                    decode();
                }
                if (shouldStop) {
                    break;
                }

            }
        } catch (Exception e) {
            mListener.onError(e);
            onStop(false);
        }
!!!34873783.java!!!	onStart() : void
        if (mOpenGLEnabled) {
            getRenderTarget().focus();
        }

        mMediaExtractor = new MediaExtractor();
        mMediaExtractor.setDataSource(mContext, mUri, null);

        mVideoTrackIndex = -1;
        mAudioTrackIndex = -1;

        for (int i = 0; i < mMediaExtractor.getTrackCount(); i++) {
            MediaFormat format = mMediaExtractor.getTrackFormat(i);
            if (DEBUG) {
                Log.i(LOG_TAG, "Uri " + mUri + ", track " + i + ": " + format);
            }
            if (DecoderUtil.isVideoFormat(format) && mVideoTrackIndex == -1) {
                mVideoTrackIndex = i;
            } else if (DecoderUtil.isAudioFormat(format) && mAudioTrackIndex == -1) {
                mAudioTrackIndex = i;
            }
        }

        if (mVideoTrackIndex == -1 && mAudioTrackIndex == -1) {
            throw new IllegalArgumentException(
                    "Couldn't find a video or audio track in the provided file");
        }

        if (mVideoTrackIndex != -1) {
            MediaFormat videoFormat = mMediaExtractor.getTrackFormat(mVideoTrackIndex);
            mVideoTrackDecoder = mOpenGLEnabled
                    ? new GpuVideoTrackDecoder(mVideoTrackIndex, videoFormat, this)
                    : new CpuVideoTrackDecoder(mVideoTrackIndex, videoFormat, this);
            mVideoTrackDecoder.init();
            mMediaExtractor.selectTrack(mVideoTrackIndex);
            if (Build.VERSION.SDK_INT >= 17) {
                retrieveDefaultRotation();
            }
        }

        if (mAudioTrackIndex != -1) {
            MediaFormat audioFormat = mMediaExtractor.getTrackFormat(mAudioTrackIndex);
            mAudioTrackDecoder = new AudioTrackDecoder(mAudioTrackIndex, audioFormat, this);
            mAudioTrackDecoder.init();
            mMediaExtractor.selectTrack(mAudioTrackIndex);
        }

        if (mStartMicros > 0) {
            mMediaExtractor.seekTo(mStartMicros, MediaExtractor.SEEK_TO_PREVIOUS_SYNC);
        }

        mStarted = true;
        mListener.onDecodingStarted();
!!!34873911.java!!!	retrieveDefaultRotation() : void
        MediaMetadataRetriever metadataRetriever = new MediaMetadataRetriever();
        metadataRetriever.setDataSource(mContext, mUri);
        String rotationString = metadataRetriever.extractMetadata(
                MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION);
        mDefaultRotation = rotationString == null ? 0 : Integer.parseInt(rotationString);
!!!34874039.java!!!	onStop(inout notifyListener : boolean) : void
        mMediaExtractor.release();
        mMediaExtractor = null;

        if (mVideoTrackDecoder != null) {
            mVideoTrackDecoder.release();
            mVideoTrackDecoder = null;
        }

        if (mAudioTrackDecoder != null) {
            mAudioTrackDecoder.release();
            mAudioTrackDecoder = null;
        }

        if (mOpenGLEnabled) {
            if (mRenderTarget != null) {
                getRenderTarget().release();
            }
            RenderTarget.focusNone();
        }

        mVideoTrackIndex = -1;
        mAudioTrackIndex = -1;

        mEventQueue.clear();
        mStarted = false;
        if (notifyListener) {
            mListener.onDecodingStopped();
        }
!!!34874167.java!!!	decode() : void
        int sampleTrackIndex = mMediaExtractor.getSampleTrackIndex();
        if (sampleTrackIndex >= 0) {
            if (sampleTrackIndex == mVideoTrackIndex) {
                mVideoTrackDecoder.feedInput(mMediaExtractor);
            } else if (sampleTrackIndex == mAudioTrackIndex) {
                mAudioTrackDecoder.feedInput(mMediaExtractor);
            }
        } else if (!mSignaledEndOfInput) {
            if (mVideoTrackDecoder != null) {
                mVideoTrackDecoder.signalEndOfInput();
            }
            if (mAudioTrackDecoder != null) {
                mAudioTrackDecoder.signalEndOfInput();
            }
            mSignaledEndOfInput = true;
        }

        if (mVideoTrackDecoder != null) {
            mVideoTrackDecoder.drainOutputBuffer();
        }
        if (mAudioTrackDecoder != null) {
            mAudioTrackDecoder.drainOutputBuffer();
        }
!!!34874295.java!!!	grabVideoFrame(inout outputVideoFrame : FrameImage2D) : void
        grabVideoFrame(outputVideoFrame, mDefaultRotation);
!!!34874423.java!!!	grabVideoFrame(inout outputVideoFrame : FrameImage2D, in videoRotation : int) : void
        if (mVideoTrackDecoder != null && outputVideoFrame != null) {
            mVideoTrackDecoder.grabFrame(outputVideoFrame, videoRotation);
        }
!!!34874551.java!!!	grabAudioSamples(inout outputAudioFrame : FrameValue) : void
        if (mAudioTrackDecoder != null) {
            if (outputAudioFrame != null) {
                mAudioTrackDecoder.grabSample(outputAudioFrame);
            } else {
                mAudioTrackDecoder.clearBuffer();
            }
        }
!!!34874679.java!!!	getDuration() : long
        if (!mStarted) {
            throw new IllegalStateException("MediaDecoder has not been started");
        }

        MediaFormat mediaFormat = mMediaExtractor.getTrackFormat(
                mVideoTrackIndex != -1 ? mVideoTrackIndex : mAudioTrackIndex);
        return mediaFormat.getLong(MediaFormat.KEY_DURATION) * 1000;
!!!34874807.java!!!	getRenderTarget() : RenderTarget
        if (mRenderTarget == null) {
            mRenderTarget = RenderTarget.newTarget(1, 1);
        }
        return mRenderTarget;
!!!34874935.java!!!	onDecodedOutputAvailable(inout decoder : TrackDecoder) : void
        if (decoder == mVideoTrackDecoder) {
            mListener.onVideoFrameAvailable();
        } else if (decoder == mAudioTrackDecoder) {
            mListener.onAudioSamplesAvailable();
        }
!!!34875063.java!!!	onEndOfStream(inout decoder : TrackDecoder) : void
        if (decoder == mAudioTrackDecoder) {
            mSeenEndOfAudioOutput = true;
        } else if (decoder == mVideoTrackDecoder) {
            mSeenEndOfVideoOutput = true;
        }

        if ((mAudioTrackDecoder == null || mSeenEndOfAudioOutput)
                && (mVideoTrackDecoder == null || mSeenEndOfVideoOutput)) {
            stop(false);
        }
