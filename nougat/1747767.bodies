class MotionSensorWTime
!!!34886071.java!!!	MotionSensorWTime(inout context : MffContext, inout name : String)
        super(context, name);
!!!34886199.java!!!	getSignature() : Signature
        return new Signature()
            .addOutputPort("values", Signature.PORT_REQUIRED, FrameType.array(float.class))
            .addOutputPort("timestamp", Signature.PORT_OPTIONAL, FrameType.single(long.class))
            .disallowOtherPorts();
!!!34886327.java!!!	onPrepare() : void
        mSensorManager = (SensorManager)getContext().getApplicationContext()
                            .getSystemService(Context.SENSOR_SERVICE);
        mSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);
        // TODO: currently, the type of sensor is hardcoded. Should be able to set the sensor
        //  type as filter input!
        mSensorManager.registerListener(this, mSensor, SensorManager.SENSOR_DELAY_UI);
!!!34886455.java!!!	onTearDown() : void
        mSensorManager.unregisterListener(this);
!!!34886583.java!!!	onAccuracyChanged(inout sensor : Sensor, in accuracy : int) : void
        // (Do we need to do something when sensor accuracy changes?)
!!!34886711.java!!!	onSensorChanged(inout event : SensorEvent) : void
        synchronized(mValues) {
            mValues[0] = event.values[0];
            mValues[1] = event.values[1];
            mValues[2] = event.values[2];
        }
!!!34886839.java!!!	onProcess() : void
        OutputPort outPort = getConnectedOutputPort("values");
        FrameValues outFrame = outPort.fetchAvailableFrame(null).asFrameValues();
        synchronized(mValues) {
            if (mCounter < 3 && mCounter >= 0) {
                mTemp[0][mCounter] = mValues[0];
                mTemp[1][mCounter] = mValues[1];
                mTemp[2][mCounter] = mValues[2];
            }

            mCounter = (mCounter + 1) % 3;

            mAvgValues[0] = (mTemp[0][0] + mTemp[0][1] + mTemp[0][2]) / 3;
            mAvgValues[1] = (mTemp[1][0] + mTemp[1][1] + mTemp[1][2]) / 3;
            mAvgValues[2] = (mTemp[2][0] + mTemp[2][1] + mTemp[2][2]) / 3;
            outFrame.setValues(mAvgValues);
        }
        outFrame.setTimestamp(System.currentTimeMillis() * 1000000L);
        outPort.pushFrame(outFrame);

        OutputPort timeOutPort = getConnectedOutputPort("timestamp");
        if (timeOutPort != null) {
            long timestamp = System.nanoTime();
            Log.v("MotionSensor", "Timestamp is: " + timestamp);
            FrameValue timeStampFrame = timeOutPort.fetchAvailableFrame(null).asFrameValue();
            timeStampFrame.setValue(timestamp);
            timeOutPort.pushFrame(timeStampFrame);
        }
