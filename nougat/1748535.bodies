class MffFilterTestCase
!!!34890679.java!!!	setUp() : void
        super.setUp();
        MffContext mffContext = getMffContext();
        FilterGraph.Builder graphBuilder = new FilterGraph.Builder(mffContext);
        Filter filterUnderTest = createFilter(mffContext);
        graphBuilder.addFilter(filterUnderTest);

        connectInputPorts(mffContext, graphBuilder, filterUnderTest);
        connectOutputPorts(mffContext, graphBuilder, filterUnderTest);

        mGraph = graphBuilder.build();
        mRunner = mGraph.getRunner();
        mRunner.setListener(new Listener() {
            @Override
            public void onGraphRunnerStopped(GraphRunner runner) {
                mProcessResult.set(null);
            }

            @Override
            public void onGraphRunnerError(Exception exception, boolean closedSuccessfully) {
                mProcessResult.setException(exception);
            }
        });

        mOutputFrames = new HashMap<String, Frame>();
        mProcessResult = SettableFuture.create();
!!!34890807.java!!!	tearDown() : void
        for (Frame frame : mOutputFrames.values()) {
            frame.release();
        }
        mOutputFrames = null;

        mRunner.stop();
        mRunner = null;
        mGraph = null;

        mProcessResult = null;
        super.tearDown();
!!!34890935.java!!!	injectInputFrame(inout portName : String, inout frame : Frame) : void
        FrameSourceFilter filter = (FrameSourceFilter) mGraph.getFilter("in_" + portName);
        filter.injectFrame(frame);
!!!34891063.java!!!	getOutputFrame(inout outputPortName : String) : Frame
        return mOutputFrames.get("out_" + outputPortName);
!!!34891191.java!!!	process(in timeoutMs : long) : void
        mRunner.start(mGraph);
        mProcessResult.get(timeoutMs, TimeUnit.MILLISECONDS);
!!!34891319.java!!!	process() : void
        process(DEFAULT_TIMEOUT_MS);
!!!34891447.java!!!	createFrame(inout type : FrameType, inout dimensions : int) : Frame
        return new Frame(type, dimensions, mRunner.getFrameManager());
!!!34891575.java!!!	connectInputPorts(inout mffContext : MffContext, inout graphBuilder : FilterGraph::Builder, inout filter : Filter) : void
        Signature signature = filter.getSignature();
        for (Entry<String, PortInfo> inputPortEntry : signature.getInputPorts().entrySet()) {
            Filter inputFilter = new FrameSourceFilter(mffContext, "in_" + inputPortEntry.getKey());
            graphBuilder.addFilter(inputFilter);
            graphBuilder.connect(inputFilter, "output", filter, inputPortEntry.getKey());
        }
!!!34891703.java!!!	connectOutputPorts(inout mffContext : MffContext, inout graphBuilder : FilterGraph::Builder, inout filter : Filter) : void
        Signature signature = filter.getSignature();
        mEmptyOutputPorts = new HashSet<String>();
        OutputFrameListener outputFrameListener = new OutputFrameListener();
        for (Entry<String, PortInfo> outputPortEntry : signature.getOutputPorts().entrySet()) {
            FrameTargetFilter outputFilter = new FrameTargetFilter(
                    mffContext, "out_" + outputPortEntry.getKey());
            graphBuilder.addFilter(outputFilter);
            graphBuilder.connect(filter, outputPortEntry.getKey(), outputFilter, "input");
            outputFilter.setListener(outputFrameListener);
            mEmptyOutputPorts.add("out_" + outputPortEntry.getKey());
        }
