format 76
"util" // nougat_src::frameworks::base::core::java::android::text::util
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/base/core/java/android/text/util/"
  java_package "android.text.util"
  classview 169911 "util"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 652983 "Linkify"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Linkify take a piece of text and a regular expression and turns all of the
 regex matches in the text into clickable links.  This is particularly
 useful for matching things like email addresses, web URLs, etc. and making
 them actionable.

 Alone with the pattern that is to be matched, a URL scheme prefix is also
 required.  Any pattern match that does not begin with the supplied scheme
 will have the scheme prepended to the matched text when the clickable URL
 is created.  For instance, if you are matching web URLs you would supply
 the scheme <code>http://</code>. If the pattern matches example.com, which
 does not have a URL scheme prefix, the supplied scheme will be prepended to
 create <code>http://example.com</code> when the clickable URL link is
 created."
      attribute 2002743 "WEB_URLS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x01"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit field indicating that web URLs should be matched in methods that
 take an options mask
"
      end

      attribute 2002871 "EMAIL_ADDRESSES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x02"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit field indicating that email addresses should be matched in methods
 that take an options mask
"
      end

      attribute 2002999 "PHONE_NUMBERS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x04"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit field indicating that phone numbers should be matched in methods that
 take an options mask
"
      end

      attribute 2003127 "MAP_ADDRESSES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x08"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit field indicating that street addresses should be matched in methods that
 take an options mask. Note that this uses the
 {@link android.webkit.WebView#findAddress(String) findAddress()} method in
 {@link android.webkit.WebView} for finding addresses, which has various
 limitations.
"
      end

      attribute 2003255 "ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " WEB_URLS | EMAIL_ADDRESSES | PHONE_NUMBERS | MAP_ADDRESSES"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit mask indicating that all available patterns should be matched in
 methods that take an options mask
"
      end

      attribute 2003383 "PHONE_NUMBER_MINIMUM_DIGITS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Don't treat anything with fewer than this many digits as a
phone number.
"
      end

      class 653111 "LinkifyMask"
	visibility public stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef(flag = true, value = { WEB_URLS, EMAIL_ADDRESSES, PHONE_NUMBERS, MAP_ADDRESSES, ALL })
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 653239 "MatchFilter"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 4635063 "acceptMatch"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "s" explicit_type "CharSequence"
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Examines the character span matched by the pattern and determines
 if the match should be turned into an actionable link.

 @param s        The body of text against which the pattern
                 was matched
 @param start    The index of the first character in s that was
                 matched by the pattern - inclusive
 @param end      The index of the last character in s that was
                 matched - exclusive

 @return         Whether this match should be turned into a link"
	end
      end

      classrelation 1971639 // sUrlMatchFilter (<unidirectional association>)
	relation 1971639 --->
	  a role_name "sUrlMatchFilter" init_value " new MatchFilter() {
        public final boolean acceptMatch(CharSequence s, int start, int end) {
            if (start == 0) {
                return true;
            }

            if (s.charAt(start - 1) == '@') {
                return false;
            }

            return true;
        }
    }" class_relation const_relation public
	    comment "
 Filters out web URL matches that occur after an at-sign (@).  This is
 to prevent turning the domain name in an email address into a web link.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1971639 // sUrlMatchFilter (<unidirectional association>)
	  b parent class_ref 653239 // MatchFilter
      end

      classrelation 1971767 // sPhoneNumberMatchFilter (<unidirectional association>)
	relation 1971767 --->
	  a role_name "sPhoneNumberMatchFilter" init_value " new MatchFilter() {
        public final boolean acceptMatch(CharSequence s, int start, int end) {
            int digitCount = 0;

            for (int i = start; i < end; i++) {
                if (Character.isDigit(s.charAt(i))) {
                    digitCount++;
                    if (digitCount >= PHONE_NUMBER_MINIMUM_DIGITS) {
                        return true;
                    }
                }
            }
            return false;
        }
    }" class_relation const_relation public
	    comment "
 Filters out URL matches that don't have enough digits to be a
 phone number.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1971767 // sPhoneNumberMatchFilter (<unidirectional association>)
	  b parent class_ref 653239 // MatchFilter
      end

      class 653367 "TransformFilter"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 4635191 "transformUrl"
	  public return_type class_ref 129591 // String
	  nparams 2
	    param in name "match" explicit_type "Matcher"
	    param inout name "url" type class_ref 129591 // String
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Examines the matched text and either passes it through or uses the
 data in the Matcher state to produce a replacement.

 @param match    The regex matcher state that found this URL text
 @param url      The text that was matched

 @return         The transformed form of the URL"
	end
      end

      classrelation 1971895 // sPhoneNumberTransformFilter (<unidirectional association>)
	relation 1971895 --->
	  a role_name "sPhoneNumberTransformFilter" init_value " new TransformFilter() {
        public final String transformUrl(final Matcher match, String url) {
            return Patterns.digitsAndPlusOnly(match);
        }
    }" class_relation const_relation public
	    comment "
 Transforms matched phone number text into something suitable
 to be used in a tel: URL.  It does this by removing everything
 but the digits and plus signs.  For instance:
 &apos;+1 (919) 555-1212&apos;
 becomes &apos;+19195551212&apos;

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1971895 // sPhoneNumberTransformFilter (<unidirectional association>)
	  b parent class_ref 653367 // TransformFilter
      end

      operation 4635319 "addLinks"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" type class_ref 270519 // Spannable
	  param in name "mask" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @LinkifyMask ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Scans the text of the provided Spannable and turns all occurrences
 of the link types indicated in the mask into clickable links.
 If the mask is nonzero, it also removes any existing URLSpans
 attached to the Spannable, to avoid problems if you call it
 repeatedly on the same text.

 @param text Spannable whose text is to be marked-up with links
 @param mask Mask to define which kinds of links will be searched.

 @return True if at least one link is found and applied."
      end

      operation 4635447 "addLinks"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" type class_ref 160439 // TextView
	  param in name "mask" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @LinkifyMask ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Scans the text of the provided TextView and turns all occurrences of
 the link types indicated in the mask into clickable links.  If matches
 are found the movement method for the TextView is set to
 LinkMovementMethod.

 @param text TextView whose text is to be marked-up with links
 @param mask Mask to define which kinds of links will be searched.

 @return True if at least one link is found and applied."
      end

      operation 4635575 "addLinkMovementMethod"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 160439 // TextView
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4635703 "addLinks"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "text" type class_ref 160439 // TextView
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "scheme" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Applies a regex to the text of a TextView turning the matches into
 links.  If links are found then UrlSpans are applied to the link
 text match areas, and the movement method for the text is changed
 to LinkMovementMethod.

 @param text         TextView whose text is to be marked-up with links
 @param pattern      Regex pattern to be used for finding links
 @param scheme       URL scheme string (eg <code>http://</code>) to be
                     prepended to the links that do not start with this scheme."
      end

      operation 4635831 "addLinks"
	class_operation public explicit_return_type "void"
	nparams 5
	  param inout name "text" type class_ref 160439 // TextView
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "scheme" type class_ref 129591 // String
	  param inout name "matchFilter" type class_ref 653239 // MatchFilter
	  param inout name "transformFilter" type class_ref 653367 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}, @Nullable ${t3} ${p3}, @Nullable ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Applies a regex to the text of a TextView turning the matches into
 links.  If links are found then UrlSpans are applied to the link
 text match areas, and the movement method for the text is changed
 to LinkMovementMethod.

 @param text         TextView whose text is to be marked-up with links
 @param pattern      Regex pattern to be used for finding links
 @param scheme       URL scheme string (eg <code>http://</code>) to be
                     prepended to the links that do not start with this scheme.
 @param matchFilter  The filter that is used to allow the client code
                     additional control over which pattern matches are
                     to be converted into links."
      end

      operation 4635959 "addLinks"
	class_operation public explicit_return_type "void"
	nparams 6
	  param inout name "text" type class_ref 160439 // TextView
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "defaultScheme" type class_ref 129591 // String
	  param inout name "schemes" type class_ref 129591 // String
	  param inout name "matchFilter" type class_ref 653239 // MatchFilter
	  param inout name "transformFilter" type class_ref 653367 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}, @Nullable ${t3}[] ${p3}, @Nullable ${t4} ${p4}, @Nullable ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Applies a regex to the text of a TextView turning the matches into
 links.  If links are found then UrlSpans are applied to the link
 text match areas, and the movement method for the text is changed
 to LinkMovementMethod.

 @param text TextView whose text is to be marked-up with links.
 @param pattern Regex pattern to be used for finding links.
 @param defaultScheme The default scheme to be prepended to links if the link does not
                      start with one of the <code>schemes</code> given.
 @param schemes Array of schemes (eg <code>http://</code>) to check if the link found
                contains a scheme. Passing a null or empty value means prepend defaultScheme
                to all links.
 @param matchFilter  The filter that is used to allow the client code additional control
                     over which pattern matches are to be converted into links.
 @param transformFilter Filter to allow the client code to update the link found."
      end

      operation 4636087 "addLinks"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param inout name "text" type class_ref 270519 // Spannable
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "scheme" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Applies a regex to a Spannable turning the matches into
 links.

 @param text         Spannable whose text is to be marked-up with links
 @param pattern      Regex pattern to be used for finding links
 @param scheme       URL scheme string (eg <code>http://</code>) to be
                     prepended to the links that do not start with this scheme."
      end

      operation 4636215 "addLinks"
	class_operation public explicit_return_type "boolean"
	nparams 5
	  param inout name "spannable" type class_ref 270519 // Spannable
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "scheme" type class_ref 129591 // String
	  param inout name "matchFilter" type class_ref 653239 // MatchFilter
	  param inout name "transformFilter" type class_ref 653367 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}, @Nullable ${t3} ${p3}, @Nullable ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a regex to a Spannable turning the matches into
links.

@param spannable    Spannable whose text is to be marked-up with links
@param pattern      Regex pattern to be used for finding links
@param scheme       URL scheme string (eg <code>http://</code>) to be
                    prepended to the links that do not start with this scheme.
@param matchFilter  The filter that is used to allow the client code
                    additional control over which pattern matches are
                    to be converted into links.
@param transformFilter Filter to allow the client code to update the link found.

@return True if at least one link is found and applied."
      end

      operation 4636343 "addLinks"
	class_operation public explicit_return_type "boolean"
	nparams 6
	  param inout name "spannable" type class_ref 270519 // Spannable
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "defaultScheme" type class_ref 129591 // String
	  param inout name "schemes" type class_ref 129591 // String
	  param inout name "matchFilter" type class_ref 653239 // MatchFilter
	  param inout name "transformFilter" type class_ref 653367 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}, @Nullable ${t3}[] ${p3}, @Nullable ${t4} ${p4}, @Nullable ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a regex to a Spannable turning the matches into links.

@param spannable Spannable whose text is to be marked-up with links.
@param pattern Regex pattern to be used for finding links.
@param defaultScheme The default scheme to be prepended to links if the link does not
                     start with one of the <code>schemes</code> given.
@param schemes Array of schemes (eg <code>http://</code>) to check if the link found
               contains a scheme. Passing a null or empty value means prepend defaultScheme
               to all links.
@param matchFilter  The filter that is used to allow the client code additional control
                    over which pattern matches are to be converted into links.
@param transformFilter Filter to allow the client code to update the link found.

@return True if at least one link is found and applied."
      end

      operation 4636471 "applyLink"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "url" type class_ref 129591 // String
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param inout name "text" type class_ref 270519 // Spannable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4636599 "makeUrl"
	class_operation private return_type class_ref 129591 // String
	nparams 4
	  param inout name "url" type class_ref 129591 // String
	  param inout name "prefixes" type class_ref 129591 // String
	  param inout name "matcher" explicit_type "Matcher"
	  param inout name "filter" type class_ref 653367 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1}[] ${p1}, ${t2} ${p2}, @Nullable ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4636727 "gatherLinks"
	class_operation private explicit_return_type "void"
	nparams 6
	  param inout name "links" explicit_type "ArrayList<LinkSpec>"
	  param inout name "s" type class_ref 270519 // Spannable
	  param inout name "pattern" explicit_type "Pattern"
	  param inout name "schemes" type class_ref 129591 // String
	  param inout name "matchFilter" type class_ref 653239 // MatchFilter
	  param inout name "transformFilter" type class_ref 653367 // TransformFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4636855 "gatherTelLinks"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "links" explicit_type "ArrayList<LinkSpec>"
	  param inout name "s" type class_ref 270519 // Spannable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4636983 "gatherMapLinks"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "links" explicit_type "ArrayList<LinkSpec>"
	  param inout name "s" type class_ref 270519 // Spannable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4637111 "pruneOverlaps"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "links" explicit_type "ArrayList<LinkSpec>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 653495 "LinkSpec"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1972023 // url (<unidirectional association>)
	relation 1972023 --->
	  a role_name "url" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1972023 // url (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 2003511 "start"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2003639 "end"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 653623 "Rfc822Token"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class stores an RFC 822-like name, address, and comment,
and provides methods to convert them to quoted strings."
      classrelation 1972151 // mName (<unidirectional association>)
	relation 1972151 --->
	  a role_name "mName" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Nullable
"
	    classrelation_ref 1972151 // mName (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1972279 // mAddress (<unidirectional association>)
	relation 1972279 --->
	  a role_name "mAddress" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Nullable
"
	    classrelation_ref 1972279 // mAddress (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 1972407 // mComment (<unidirectional association>)
	relation 1972407 --->
	  a role_name "mComment" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Nullable
"
	    classrelation_ref 1972407 // mComment (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      operation 4637239 "Rfc822Token"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 129591 // String
	  param inout name "address" type class_ref 129591 // String
	  param inout name "comment" type class_ref 129591 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}@Nullable ${t0} ${p0}, @Nullable ${t1} ${p1}, @Nullable ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new Rfc822Token with the specified name, address,
and comment."
      end

      operation 4637367 "getName"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "Returns the name part."
      end

      operation 4637495 "getAddress"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "Returns the address part."
      end

      operation 4637623 "getComment"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "Returns the comment part."
      end

      operation 4637751 "setName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the name to the specified name."
      end

      operation 4637879 "setAddress"
	public explicit_return_type "void"
	nparams 1
	  param inout name "address" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the address to the specified address."
      end

      operation 4638007 "setComment"
	public explicit_return_type "void"
	nparams 1
	  param inout name "comment" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@Nullable ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the comment to the specified comment."
      end

      operation 4638135 "toString"
	public return_type class_ref 129591 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name (with quoting added if necessary),
the comment (in parentheses), and the address (in angle brackets).
This should be suitable for inclusion in an RFC 822 address list."
      end

      operation 4638263 "quoteNameIfNecessary"
	class_operation public return_type class_ref 129591 // String
	nparams 1
	  param inout name "name" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name, conservatively quoting it if there are any
characters that are likely to cause trouble outside of a
quoted string, or returning it literally if it seems safe."
      end

      operation 4638391 "quoteName"
	class_operation public return_type class_ref 129591 // String
	nparams 1
	  param inout name "name" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name, with internal backslashes and quotation marks
preceded by backslashes.  The outer quote marks themselves are not
added by this method."
      end

      operation 4638519 "quoteComment"
	class_operation public return_type class_ref 129591 // String
	nparams 1
	  param inout name "comment" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comment, with internal backslashes and parentheses
preceded by backslashes.  The outer parentheses themselves are
not added by this method."
      end

      operation 4638647 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4638775 "stringEquals"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "a" type class_ref 129591 // String
	  param inout name "b" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4638903 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 653751 "Rfc822Tokenizer"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class works as a Tokenizer for MultiAutoCompleteTextView for
address list fields, and also provides a method for converting
a string of addresses (such as might be typed into such a field)
into a series of Rfc822Tokens."
      classrelation 1975351 // <realization>
	relation 1975351 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1975351 // <realization>
	  b parent class_ref 654007 // Tokenizer
      end

      operation 4652343 "tokenize"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param inout name "out" explicit_type "Collection<Rfc822Token>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This constructor will try to take a string like
\"Foo Bar (something) &lt;foo\\@google.com&gt;,
blah\\@google.com (something)\"
and convert it into one or more Rfc822Tokens, output into the supplied
collection.

It does *not* decode MIME encoded-words; charset conversion
must already have taken place if necessary.
It will try to be tolerant of broken syntax instead of
returning an error.
"
      end

      operation 4652471 "tokenize"
	class_operation public return_type class_ref 653623 // Rfc822Token
	nparams 1
	  param inout name "text" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method will try to take a string like
\"Foo Bar (something) &lt;foo\\@google.com&gt;,
blah\\@google.com (something)\"
and convert it into one or more Rfc822Tokens.
It does *not* decode MIME encoded-words; charset conversion
must already have taken place if necessary.
It will try to be tolerant of broken syntax instead of
returning an error."
      end

      operation 4652599 "crunch"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "sb" explicit_type "StringBuilder"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4652727 "findTokenStart"
	public explicit_return_type "int"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "cursor" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}"
      end

      operation 4652855 "findTokenEnd"
	public explicit_return_type "int"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "cursor" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}"
      end

      operation 4652983 "terminateToken"
	public explicit_return_type "CharSequence"
	nparams 1
	  param inout name "text" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Terminates the specified address with a comma and space.
This assumes that the specified text already has valid syntax.
The Adapter subclass's convertToString() method must make that
guarantee."
      end
    end

    class 820023 "LinkifyBenchmark"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 2535735 // MATCHING_STR (<unidirectional association>)
	relation 2535735 --->
	  a role_name "MATCHING_STR" init_value " \" http://user:pass@host.com:5432/path?k=v#f \" +
            \"host.com:5432/path?k=v#f \"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2535735 // MATCHING_STR (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 2535863 // NONMATCHING_STR (<unidirectional association>)
	relation 2535863 --->
	  a role_name "NONMATCHING_STR" init_value " \" Neque porro quisquam est qui dolorem ipsum \" +
            \"quia dolor sit amet, consectetur, adipisci velit \"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2535863 // NONMATCHING_STR (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 2791991 "BASIC_PATTERN"
	class_attribute const_attribute private explicit_type "Pattern"
	init_value " Pattern.compile(
            \"(?:\\\\b|$|^)http://[a-zA-Z0-9:\\\\.@\\\\?=#/]+(?:\\\\b|$|^)\")"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " this pattern does not recognize strings without http scheme therefore is expected to be
 faster in MATCHING_STR case."
      end

      classrelation 2535991 // mParamCopyAmount (<unidirectional association>)
	relation 2535991 --->
	  a role_name "mParamCopyAmount" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Param({\"1\", \"4\", \"16\", \"64\", \"256\"})
"
	    classrelation_ref 2535991 // mParamCopyAmount (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 2536119 // mParamBasicText (<unidirectional association>)
	relation 2536119 --->
	  a role_name "mParamBasicText" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Param({MATCHING_STR, NONMATCHING_STR})
"
	    classrelation_ref 2536119 // mParamBasicText (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 2536247 // mTestSpannable (<unidirectional association>)
	relation 2536247 --->
	  a role_name "mTestSpannable" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2536247 // mTestSpannable (<unidirectional association>)
	  b parent class_ref 270519 // Spannable
      end

      operation 6549431 "setUp"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@BeforeExperiment
"
	
	
	
      end

      operation 6549559 "tearDown"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@AfterExperiment
"
	
	
	
      end

      operation 6549687 "timeNewRegEx"
	public explicit_return_type "void"
	nparams 1
	  param in name "reps" explicit_type "int"
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Benchmark
"
	
	
	
      end

      operation 6549815 "timeOldRegEx"
	public explicit_return_type "void"
	nparams 1
	  param in name "reps" explicit_type "int"
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Benchmark
"
	
	
	
      end

      operation 6549943 "timeBasicRegEx"
	public explicit_return_type "void"
	nparams 1
	  param in name "reps" explicit_type "int"
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Benchmark
"
	
	
	
      end
    end

    class 874935 "LinkifyTest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "LinkifyTest tests {@link Linkify}."
      classrelation 2670647 // <generalisation>
	relation 2670647 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2670647 // <generalisation>
	  b parent class_ref 627895 // AndroidTestCase
      end

      operation 6896439 "testNothing"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6896567 "testNormal"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end

      operation 6896695 "testUnclickable"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  explicit_exception "Exception"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SmallTest
"
	
	
	
      end
    end
  end

  deploymentview 158007 "util"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 389431 "Linkify"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.IntDef;
import android.annotation.NonNull;
import android.annotation.Nullable;
import android.telephony.PhoneNumberUtils;
import android.text.method.LinkMovementMethod;
import android.text.method.MovementMethod;
import android.text.style.URLSpan;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.Spanned;
import android.util.Patterns;
import android.webkit.WebView;
import android.widget.TextView;
import java.io.UnsupportedEncodingException;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.android.i18n.phonenumbers.PhoneNumberMatch;
import com.android.i18n.phonenumbers.PhoneNumberUtil;
import com.android.i18n.phonenumbers.PhoneNumberUtil.Leniency;
import libcore.util.EmptyArray;
${definition}"
      associated_classes
	class_ref 652983 // Linkify
	class_ref 653495 // LinkSpec
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 389559 "Rfc822Token"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.Nullable;
${definition}"
      associated_classes
	class_ref 653623 // Rfc822Token
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 389943 "Rfc822Tokenizer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.widget.MultiAutoCompleteTextView;
import java.util.ArrayList;
import java.util.Collection;
${definition}"
      associated_classes
	class_ref 653751 // Rfc822Tokenizer
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 478647 "LinkifyBenchmark"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.google.caliper.AfterExperiment;
import com.google.caliper.BeforeExperiment;
import com.google.caliper.Benchmark;
import com.google.caliper.Param;
import android.text.Spannable;
import android.text.SpannableString;
import android.util.Patterns;
import java.util.regex.Pattern;
${definition}"
      associated_classes
	class_ref 820023 // LinkifyBenchmark
      end
      comment "Copyright (C) 2016 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 508855 "LinkifyTest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.test.AndroidTestCase;
import android.test.suitebuilder.annotation.SmallTest;
import android.text.method.LinkMovementMethod;
import android.widget.TextView;
${definition}"
      associated_classes
	class_ref 874935 // LinkifyTest
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
