class FakeFrame
!!!34994615.java!!!	FakeFrame(inout renderer : ThreadedRenderer, inout targetFrame : View, inout targetBack : View)
            mRenderer = renderer;
            mTargetFrame = targetFrame;

            mTargetBack = targetBack;
            mFrameContent = new ColorPulse(0xFF101010, 0xFF707070, new Rect(0, 0, WIDTH, HEIGHT));
            mBackContent = new ColorPulse(0xFF909090, 0xFFe0e0e0, null);
!!!34994743.java!!!	run() : void
            Rect currentFrameBounds = new Rect();
            Rect currentBackBounds = new Rect();
            Rect newBounds = new Rect();
            int[] surfaceOrigin = new int[2];
            RenderNode nodeFrame = null;
            RenderNode nodeBack = null;

            // Since we are overriding the window painting logic we need to at least fill the
            // surface with some window content (otherwise the world will go black).
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
            }

            if (mTargetBack != null) {
                nodeBack = RenderNode.create("FakeBackdrop", null);
                nodeBack.setClipToBounds(true);
                mRenderer.addRenderNode(nodeBack, true);
            }

            if (mTargetFrame != null) {
                nodeFrame = RenderNode.create("FakeFrame", null);
                nodeFrame.setClipToBounds(true);
                mRenderer.addRenderNode(nodeFrame, false);
            }

            while (mRunning) {
                // Get the surface position to draw to within our surface.
                surfaceOrigin[0] = 0;
                surfaceOrigin[1] = 0;
                // This call should be done while the rendernode's displaylist is produced.
                // For simplicity of this test we do this before we kick off the draw.
                mContent.getLocationInSurface(surfaceOrigin);
                mRenderer.setContentDrawBounds(surfaceOrigin[0], surfaceOrigin[1],
                        surfaceOrigin[0] + mContent.getWidth(),
                        surfaceOrigin[1] + mContent.getHeight());
                // Determine new position for frame.
                if (nodeFrame != null) {
                    surfaceOrigin[0] = 0;
                    surfaceOrigin[1] = 0;
                    mTargetFrame.getLocationInSurface(surfaceOrigin);
                    newBounds.set(surfaceOrigin[0], surfaceOrigin[1],
                            surfaceOrigin[0] + mTargetFrame.getWidth(),
                            surfaceOrigin[1] + mTargetFrame.getHeight());
                    if (!currentFrameBounds.equals(newBounds)) {
                        currentFrameBounds.set(newBounds);
                        nodeFrame.setLeftTopRightBottom(currentFrameBounds.left,
                                currentFrameBounds.top,
                                currentFrameBounds.right, currentFrameBounds.bottom);
                    }

                    // Draw frame
                    DisplayListCanvas canvas = nodeFrame.start(currentFrameBounds.width(),
                            currentFrameBounds.height());
                    mFrameContent.draw(canvas);
                    nodeFrame.end(canvas);
                }

                // Determine new position for backdrop
                if (nodeBack != null) {
                    surfaceOrigin[0] = 0;
                    surfaceOrigin[1] = 0;
                    mTargetBack.getLocationInSurface(surfaceOrigin);
                    newBounds.set(surfaceOrigin[0], surfaceOrigin[1],
                            surfaceOrigin[0] + mTargetBack.getWidth(),
                            surfaceOrigin[1] + mTargetBack.getHeight());
                    if (!currentBackBounds.equals(newBounds)) {
                        currentBackBounds.set(newBounds);
                        nodeBack.setLeftTopRightBottom(currentBackBounds.left,
                                currentBackBounds.top,
                                currentBackBounds.right, currentBackBounds.bottom);
                    }

                    // Draw Backdrop
                    DisplayListCanvas canvas = nodeBack.start(currentBackBounds.width(),
                            currentBackBounds.height());
                    mBackContent.draw(canvas);
                    nodeBack.end(canvas);
                }

                // we need to only render one guy - the rest will happen automatically (I think).
                if (nodeFrame != null) {
                    mRenderer.drawRenderNode(nodeFrame);
                }
                if (nodeBack != null) {
                    mRenderer.drawRenderNode(nodeBack);
                }
                try {
                    Thread.sleep(5);
                } catch (InterruptedException e) {}
            }
            if (nodeFrame != null) {
                mRenderer.removeRenderNode(nodeFrame);
            }
            if (nodeBack != null) {
                mRenderer.removeRenderNode(nodeBack);
            }
!!!34994871.java!!!	destroy() : void
            mRunning = false;
            try {
                join();
            } catch (InterruptedException e) {}
