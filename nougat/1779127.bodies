class ColorPulse
!!!34994999.java!!!	ColorPulse(in color1 : int, in color2 : int, inout rect : Rect)
            mColorStart = color1;
            mColorEnd = color2;
            if (rect != null) {
                mRect = new Rect(rect.left + BORDER_WIDTH / 2, rect.top + BORDER_WIDTH / 2,
                                 rect.right - BORDER_WIDTH / 2, rect.bottom - BORDER_WIDTH / 2);
            }
!!!34995127.java!!!	evaluate(in fraction : float, in startInt : int, in endInt : int) : int
            int startA = (startInt >> 24) & 0xff;
            int startR = (startInt >> 16) & 0xff;
            int startG = (startInt >> 8) & 0xff;
            int startB = startInt & 0xff;

            int endA = (endInt >> 24) & 0xff;
            int endR = (endInt >> 16) & 0xff;
            int endG = (endInt >> 8) & 0xff;
            int endB = endInt & 0xff;

            return (int)((startA + (int)(fraction * (endA - startA))) << 24) |
                    (int)((startR + (int)(fraction * (endR - startR))) << 16) |
                    (int)((startG + (int)(fraction * (endG - startG))) << 8) |
                    (int)((startB + (int)(fraction * (endB - startB))));
!!!34995255.java!!!	draw(inout canvas : Canvas) : void
            float frac = mStep / 50.0f;
            int color = evaluate(frac, mColorStart, mColorEnd);
            if (mRect != null && !mRect.isEmpty()) {
                mPaint.setStyle(Paint.Style.STROKE);
                mPaint.setStrokeWidth(BORDER_WIDTH);
                mPaint.setColor(color);
                canvas.drawRect(mRect, mPaint);
            } else {
                canvas.drawColor(color);
            }

            mStep++;
            if (mStep >= 50) {
                mStep = 0;
                int tmp = mColorStart;
                mColorStart = mColorEnd;
                mColorEnd = tmp;
            }
            invalidateSelf();
!!!34995639.java!!!	getOpacity() : int
            return mRect == null || mRect.isEmpty() ? PixelFormat.OPAQUE : PixelFormat.TRANSLUCENT;
