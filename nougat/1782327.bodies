class ProjectedView
!!!35001655.java!!!	ProjectedView(inout context : Context)
            this(context, null);
!!!35001783.java!!!	ProjectedView(inout context : Context, inout attrs : AttributeSet)
            this(context, attrs, 0);
!!!35001911.java!!!	ProjectedView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
            super(context, attrs, defStyleAttr);

            setOnClickListener(new OnClickListener() {
                boolean toggle = false;
                @Override
                public void onClick(View v) {
                    toggle = !toggle;
                    setProject(toggle);
                }
            });
!!!35002039.java!!!	setProject(inout value : boolean) : void
            RenderNode renderNode = updateDisplayListIfDirty();
            if (renderNode != null) {
                renderNode.setProjectBackwards(value);
            }
            // NOTE: we can't invalidate ProjectedView for the redraw because:
            // 1) the view won't preserve displayList properties that it doesn't know about
            // 2) the damage rect won't be big enough

            // instead, twiddle properties on the container, so that enough area of the screen is
            // redrawn without rerecording any DisplayLists.
            container.setTranslationX(100f);
            container.setTranslationX(0.0f);
!!!35002167.java!!!	onDraw(inout canvas : Canvas) : void
            // TODO: set projection flag
            final int w = getWidth();
            final int h = getHeight();
            mRectF.set(0, -h, w, 2 * h);
            mPaint.setAntiAlias(true);
            mPaint.setColor(0x5f00ff00);
            canvas.drawOval(mRectF, mPaint);
