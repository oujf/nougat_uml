class Fragment
!!!35050935.java!!!	instantiate(inout context : Context, inout fname : String) : Fragment
        return instantiate(context, fname, null);
!!!35051063.java!!!	instantiate(inout context : Context, inout fname : String, inout args : Bundle) : Fragment
        try {
            Class<?> clazz = sClassMap.get(fname);
            if (clazz == null) {
                // Class not found in the cache, see if it's real, and try to add it
                clazz = context.getClassLoader().loadClass(fname);
                sClassMap.put(fname, clazz);
            }
            Fragment f = (Fragment)clazz.newInstance();
            if (args != null) {
                args.setClassLoader(f.getClass().getClassLoader());
                f.mArguments = args;
            }
            return f;
        } catch (ClassNotFoundException e) {
            throw new InstantiationException("Unable to instantiate fragment " + fname
                    + ": make sure class name exists, is public, and has an"
                    + " empty constructor that is public", e);
        } catch (java.lang.InstantiationException e) {
            throw new InstantiationException("Unable to instantiate fragment " + fname
                    + ": make sure class name exists, is public, and has an"
                    + " empty constructor that is public", e);
        } catch (IllegalAccessException e) {
            throw new InstantiationException("Unable to instantiate fragment " + fname
                    + ": make sure class name exists, is public, and has an"
                    + " empty constructor that is public", e);
        }
!!!35051191.java!!!	isSupportFragmentClass(inout context : Context, inout fname : String) : boolean
        try {
            Class<?> clazz = sClassMap.get(fname);
            if (clazz == null) {
                // Class not found in the cache, see if it's real, and try to add it
                clazz = context.getClassLoader().loadClass(fname);
                sClassMap.put(fname, clazz);
            }
            return Fragment.class.isAssignableFrom(clazz);
        } catch (ClassNotFoundException e) {
            return false;
        }
!!!35051319.java!!!	restoreViewState(inout savedInstanceState : Bundle) : void
        if (mSavedViewState != null) {
            mInnerView.restoreHierarchyState(mSavedViewState);
            mSavedViewState = null;
        }
        mCalled = false;
        onViewStateRestored(savedInstanceState);
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onViewStateRestored()");
        }
!!!35051447.java!!!	setIndex(in index : int, inout parent : Fragment) : void
        mIndex = index;
        if (parent != null) {
            mWho = parent.mWho + ":" + mIndex;
        } else {
            mWho = "android:fragment:" + mIndex;
        }
!!!35051575.java!!!	isInBackStack() : boolean
        return mBackStackNesting > 0;
!!!35051703.java!!!	equals(inout o : Object) : boolean
        return super.equals(o);
!!!35051831.java!!!	hashCode() : int
        return super.hashCode();
!!!35051959.java!!!	toString() : String
        StringBuilder sb = new StringBuilder(128);
        DebugUtils.buildShortClassTag(this, sb);
        if (mIndex >= 0) {
            sb.append(" #");
            sb.append(mIndex);
        }
        if (mFragmentId != 0) {
            sb.append(" id=0x");
            sb.append(Integer.toHexString(mFragmentId));
        }
        if (mTag != null) {
            sb.append(" ");
            sb.append(mTag);
        }
        sb.append('}');
        return sb.toString();
!!!35052087.java!!!	getId() : int
        return mFragmentId;
!!!35052215.java!!!	getTag() : String
        return mTag;
!!!35052343.java!!!	setArguments(inout args : Bundle) : void
        if (mIndex >= 0) {
            throw new IllegalStateException("Fragment already active");
        }
        mArguments = args;
!!!35052471.java!!!	getArguments() : Bundle
        return mArguments;
!!!35052599.java!!!	setInitialSavedState(inout state : Fragment::SavedState) : void
        if (mIndex >= 0) {
            throw new IllegalStateException("Fragment already active");
        }
        mSavedFragmentState = state != null && state.mState != null
                ? state.mState : null;
!!!35052727.java!!!	setTargetFragment(inout fragment : Fragment, in requestCode : int) : void
        mTarget = fragment;
        mTargetRequestCode = requestCode;
!!!35052855.java!!!	getTargetFragment() : Fragment
        return mTarget;
!!!35052983.java!!!	getTargetRequestCode() : int
        return mTargetRequestCode;
!!!35053111.java!!!	getContext() : Context
        return mHost == null ? null : mHost.getContext();
!!!35053239.java!!!	getActivity() : FragmentActivity
        return mHost == null ? null : (FragmentActivity) mHost.getActivity();
!!!35053367.java!!!	getHost() : Object
        return mHost == null ? null : mHost.onGetHost();
!!!35053495.java!!!	getResources() : Resources
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        return mHost.getContext().getResources();
!!!35053623.java!!!	getText(in resId : int) : CharSequence
        return getResources().getText(resId);
!!!35053751.java!!!	getString(in resId : int) : String
        return getResources().getString(resId);
!!!35053879.java!!!	getString(in resId : int, inout  : Object...formatArgs) : String
        return getResources().getString(resId, formatArgs);
!!!35054007.java!!!	getFragmentManager() : FragmentManager
        return mFragmentManager;
!!!35054135.java!!!	getChildFragmentManager() : FragmentManager
        if (mChildFragmentManager == null) {
            instantiateChildFragmentManager();
            if (mState >= RESUMED) {
                mChildFragmentManager.dispatchResume();
            } else if (mState >= STARTED) {
                mChildFragmentManager.dispatchStart();
            } else if (mState >= ACTIVITY_CREATED) {
                mChildFragmentManager.dispatchActivityCreated();
            } else if (mState >= CREATED) {
                mChildFragmentManager.dispatchCreate();
            }
        }
        return mChildFragmentManager;
!!!35054263.java!!!	getParentFragment() : Fragment
        return mParentFragment;
!!!35054391.java!!!	isAdded() : boolean
        return mHost != null && mAdded;
!!!35054519.java!!!	isDetached() : boolean
        return mDetached;
!!!35054647.java!!!	isRemoving() : boolean
        return mRemoving;
!!!35054775.java!!!	isInLayout() : boolean
        return mInLayout;
!!!35054903.java!!!	isResumed() : boolean
        return mState >= RESUMED;
!!!35055031.java!!!	isVisible() : boolean
        return isAdded() && !isHidden() && mView != null
                && mView.getWindowToken() != null && mView.getVisibility() == View.VISIBLE;
!!!35055159.java!!!	isHidden() : boolean
        return mHidden;
!!!35055287.java!!!	hasOptionsMenu() : boolean
        return mHasMenu;
!!!35055415.java!!!	isMenuVisible() : boolean
        return mMenuVisible;
!!!35055671.java!!!	setRetainInstance(inout retain : boolean) : void
        mRetainInstance = retain;
!!!35055799.java!!!	getRetainInstance() : boolean
        return mRetainInstance;
!!!35055927.java!!!	setHasOptionsMenu(inout hasMenu : boolean) : void
        if (mHasMenu != hasMenu) {
            mHasMenu = hasMenu;
            if (isAdded() && !isHidden()) {
                mHost.onSupportInvalidateOptionsMenu();
            }
        }
!!!35056055.java!!!	setMenuVisibility(inout menuVisible : boolean) : void
        if (mMenuVisible != menuVisible) {
            mMenuVisible = menuVisible;
            if (mHasMenu && isAdded() && !isHidden()) {
                mHost.onSupportInvalidateOptionsMenu();
            }
        }
!!!35056183.java!!!	setUserVisibleHint(inout isVisibleToUser : boolean) : void
        if (!mUserVisibleHint && isVisibleToUser && mState < STARTED
                && mFragmentManager != null && isAdded()) {
            mFragmentManager.performPendingDeferredStart(this);
        }
        mUserVisibleHint = isVisibleToUser;
        mDeferStart = mState < STARTED && !isVisibleToUser;
!!!35056311.java!!!	getUserVisibleHint() : boolean
        return mUserVisibleHint;
!!!35056439.java!!!	getLoaderManager() : LoaderManager
        if (mLoaderManager != null) {
            return mLoaderManager;
        }
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        mCheckedForLoaderManager = true;
        mLoaderManager = mHost.getLoaderManager(mWho, mLoadersStarted, true);
        return mLoaderManager;
!!!35056567.java!!!	startActivity(inout intent : Intent) : void
        startActivity(intent, null);
!!!35056695.java!!!	startActivity(inout intent : Intent, inout options : Bundle) : void
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        mHost.onStartActivityFromFragment(this /*fragment*/, intent, -1, options);
!!!35056823.java!!!	startActivityForResult(inout intent : Intent, in requestCode : int) : void
        startActivityForResult(intent, requestCode, null);
!!!35056951.java!!!	startActivityForResult(inout intent : Intent, in requestCode : int, inout options : Bundle) : void
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        mHost.onStartActivityFromFragment(this /*fragment*/, intent, requestCode, options);
!!!35057079.java!!!	startIntentSenderForResult(inout intent : IntentSender, in requestCode : int, inout fillInIntent : Intent, in flagsMask : int, in flagsValues : int, in extraFlags : int, inout options : Bundle) : void
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        mHost.onStartIntentSenderFromFragment(this, intent, requestCode, fillInIntent, flagsMask,
                flagsValues, extraFlags, options);
!!!35057335.java!!!	requestPermissions(inout permissions : String, in requestCode : int) : void
        if (mHost == null) {
            throw new IllegalStateException("Fragment " + this + " not attached to Activity");
        }
        mHost.onRequestPermissionsFromFragment(this, permissions, requestCode);
!!!35057463.java!!!	onRequestPermissionsResult(in requestCode : int, inout permissions : String, inout grantResults : int) : void
        /* callback - do nothing */
!!!35057591.java!!!	shouldShowRequestPermissionRationale(inout permission : String) : boolean
        if (mHost != null) {
            return mHost.onShouldShowRequestPermissionRationale(permission);
        }
        return false;
!!!35057719.java!!!	getLayoutInflater(inout savedInstanceState : Bundle) : LayoutInflater
        LayoutInflater result = mHost.onGetLayoutInflater();
        getChildFragmentManager(); // Init if needed; use raw implementation below.
        LayoutInflaterCompat.setFactory(result, mChildFragmentManager.getLayoutInflaterFactory());
        return result;
!!!35057847.java!!!	onInflate(inout context : Context, inout attrs : AttributeSet, inout savedInstanceState : Bundle) : void
        mCalled = true;
        final Activity hostActivity = mHost == null ? null : mHost.getActivity();
        if (hostActivity != null) {
            mCalled = false;
            onInflate(hostActivity, attrs, savedInstanceState);
        }
!!!35057975.java!!!	onInflate(inout activity : Activity, inout attrs : AttributeSet, inout savedInstanceState : Bundle) : void
        mCalled = true;
!!!35058231.java!!!	onAttach(inout context : Context) : void
        mCalled = true;
        final Activity hostActivity = mHost == null ? null : mHost.getActivity();
        if (hostActivity != null) {
            mCalled = false;
            onAttach(hostActivity);
        }
!!!35058359.java!!!	onAttach(inout activity : Activity) : void
        mCalled = true;
!!!35058487.java!!!	onCreateAnimation(in transit : int, inout enter : boolean, in nextAnim : int) : Animation
        return null;
!!!35058615.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        mCalled = true;
        restoreChildFragmentState(savedInstanceState);
        if (mChildFragmentManager != null
                && !mChildFragmentManager.isStateAtLeast(Fragment.CREATED)) {
            mChildFragmentManager.dispatchCreate();
        }
!!!35058743.java!!!	restoreChildFragmentState(inout savedInstanceState : Bundle) : void
        if (savedInstanceState != null) {
            Parcelable p = savedInstanceState.getParcelable(
                    FragmentActivity.FRAGMENTS_TAG);
            if (p != null) {
                if (mChildFragmentManager == null) {
                    instantiateChildFragmentManager();
                }
                mChildFragmentManager.restoreAllState(p, mChildNonConfig);
                mChildNonConfig = null;
                mChildFragmentManager.dispatchCreate();
            }
        }
!!!35058871.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        return null;
!!!35059127.java!!!	getView() : View
        return mView;
!!!35059255.java!!!	onActivityCreated(inout savedInstanceState : Bundle) : void
        mCalled = true;
!!!35059383.java!!!	onViewStateRestored(inout savedInstanceState : Bundle) : void
        mCalled = true;
!!!35059511.java!!!	onStart() : void
        mCalled = true;

        if (!mLoadersStarted) {
            mLoadersStarted = true;
            if (!mCheckedForLoaderManager) {
                mCheckedForLoaderManager = true;
                mLoaderManager = mHost.getLoaderManager(mWho, mLoadersStarted, false);
            }
            if (mLoaderManager != null) {
                mLoaderManager.doStart();
            }
        }
!!!35059639.java!!!	onResume() : void
        mCalled = true;
!!!35060151.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
        mCalled = true;
!!!35060279.java!!!	onPause() : void
        mCalled = true;
!!!35060407.java!!!	onStop() : void
        mCalled = true;
!!!35060535.java!!!	onLowMemory() : void
        mCalled = true;
!!!35060663.java!!!	onDestroyView() : void
        mCalled = true;
!!!35060791.java!!!	onDestroy() : void
        mCalled = true;
        //Log.v("foo", "onDestroy: mCheckedForLoaderManager=" + mCheckedForLoaderManager
        //        + " mLoaderManager=" + mLoaderManager);
        if (!mCheckedForLoaderManager) {
            mCheckedForLoaderManager = true;
            mLoaderManager = mHost.getLoaderManager(mWho, mLoadersStarted, false);
        }
        if (mLoaderManager != null) {
            mLoaderManager.doDestroy();
        }
!!!35060919.java!!!	initState() : void
        mIndex = -1;
        mWho = null;
        mAdded = false;
        mRemoving = false;
        mFromLayout = false;
        mInLayout = false;
        mRestored = false;
        mBackStackNesting = 0;
        mFragmentManager = null;
        mChildFragmentManager = null;
        mHost = null;
        mFragmentId = 0;
        mContainerId = 0;
        mTag = null;
        mHidden = false;
        mDetached = false;
        mRetaining = false;
        mLoaderManager = null;
        mLoadersStarted = false;
        mCheckedForLoaderManager = false;
!!!35061047.java!!!	onDetach() : void
        mCalled = true;
!!!35061559.java!!!	onOptionsItemSelected(inout item : MenuItem) : boolean
        return false;
!!!35061815.java!!!	onCreateContextMenu(inout menu : ContextMenu, inout v : View, inout menuInfo : ContextMenu::ContextMenuInfo) : void
        getActivity().onCreateContextMenu(menu, v, menuInfo);
!!!35061943.java!!!	registerForContextMenu(inout view : View) : void
        view.setOnCreateContextMenuListener(this);
!!!35062071.java!!!	unregisterForContextMenu(inout view : View) : void
        view.setOnCreateContextMenuListener(null);
!!!35062199.java!!!	onContextItemSelected(inout item : MenuItem) : boolean
        return false;
!!!35062327.java!!!	setEnterSharedElementCallback(inout callback : SharedElementCallback) : void
        mEnterTransitionCallback = callback;
!!!35062455.java!!!	setExitSharedElementCallback(inout callback : SharedElementCallback) : void
        mExitTransitionCallback = callback;
!!!35062583.java!!!	setEnterTransition(inout transition : Object) : void
        mEnterTransition = transition;
!!!35062711.java!!!	getEnterTransition() : Object
        return mEnterTransition;
!!!35062839.java!!!	setReturnTransition(inout transition : Object) : void
        mReturnTransition = transition;
!!!35062967.java!!!	getReturnTransition() : Object
        return mReturnTransition == USE_DEFAULT_TRANSITION ? getEnterTransition()
                : mReturnTransition;
!!!35063095.java!!!	setExitTransition(inout transition : Object) : void
        mExitTransition = transition;
!!!35063223.java!!!	getExitTransition() : Object
        return mExitTransition;
!!!35063351.java!!!	setReenterTransition(inout transition : Object) : void
        mReenterTransition = transition;
!!!35063479.java!!!	getReenterTransition() : Object
        return mReenterTransition == USE_DEFAULT_TRANSITION ? getExitTransition()
                : mReenterTransition;
!!!35063607.java!!!	setSharedElementEnterTransition(inout transition : Object) : void
        mSharedElementEnterTransition = transition;
!!!35063735.java!!!	getSharedElementEnterTransition() : Object
        return mSharedElementEnterTransition;
!!!35063863.java!!!	setSharedElementReturnTransition(inout transition : Object) : void
        mSharedElementReturnTransition = transition;
!!!35063991.java!!!	getSharedElementReturnTransition() : Object
        return mSharedElementReturnTransition == USE_DEFAULT_TRANSITION ?
                getSharedElementEnterTransition() : mSharedElementReturnTransition;
!!!35064119.java!!!	setAllowEnterTransitionOverlap(inout allow : boolean) : void
        mAllowEnterTransitionOverlap = allow;
!!!35064247.java!!!	getAllowEnterTransitionOverlap() : boolean
        return (mAllowEnterTransitionOverlap == null) ? true : mAllowEnterTransitionOverlap;
!!!35064375.java!!!	setAllowReturnTransitionOverlap(inout allow : boolean) : void
        mAllowReturnTransitionOverlap = allow;
!!!35064503.java!!!	getAllowReturnTransitionOverlap() : boolean
        return (mAllowReturnTransitionOverlap == null) ? true : mAllowReturnTransitionOverlap;
!!!35064631.java!!!	dump(inout prefix : String, inout fd : FileDescriptor, inout writer : PrintWriter, inout args : String) : void
        writer.print(prefix); writer.print("mFragmentId=#");
                writer.print(Integer.toHexString(mFragmentId));
                writer.print(" mContainerId=#");
                writer.print(Integer.toHexString(mContainerId));
                writer.print(" mTag="); writer.println(mTag);
        writer.print(prefix); writer.print("mState="); writer.print(mState);
                writer.print(" mIndex="); writer.print(mIndex);
                writer.print(" mWho="); writer.print(mWho);
                writer.print(" mBackStackNesting="); writer.println(mBackStackNesting);
        writer.print(prefix); writer.print("mAdded="); writer.print(mAdded);
                writer.print(" mRemoving="); writer.print(mRemoving);
                writer.print(" mFromLayout="); writer.print(mFromLayout);
                writer.print(" mInLayout="); writer.println(mInLayout);
        writer.print(prefix); writer.print("mHidden="); writer.print(mHidden);
                writer.print(" mDetached="); writer.print(mDetached);
                writer.print(" mMenuVisible="); writer.print(mMenuVisible);
                writer.print(" mHasMenu="); writer.println(mHasMenu);
        writer.print(prefix); writer.print("mRetainInstance="); writer.print(mRetainInstance);
                writer.print(" mRetaining="); writer.print(mRetaining);
                writer.print(" mUserVisibleHint="); writer.println(mUserVisibleHint);
        if (mFragmentManager != null) {
            writer.print(prefix); writer.print("mFragmentManager=");
                    writer.println(mFragmentManager);
        }
        if (mHost != null) {
            writer.print(prefix); writer.print("mHost=");
                    writer.println(mHost);
        }
        if (mParentFragment != null) {
            writer.print(prefix); writer.print("mParentFragment=");
                    writer.println(mParentFragment);
        }
        if (mArguments != null) {
            writer.print(prefix); writer.print("mArguments="); writer.println(mArguments);
        }
        if (mSavedFragmentState != null) {
            writer.print(prefix); writer.print("mSavedFragmentState=");
                    writer.println(mSavedFragmentState);
        }
        if (mSavedViewState != null) {
            writer.print(prefix); writer.print("mSavedViewState=");
                    writer.println(mSavedViewState);
        }
        if (mTarget != null) {
            writer.print(prefix); writer.print("mTarget="); writer.print(mTarget);
                    writer.print(" mTargetRequestCode=");
                    writer.println(mTargetRequestCode);
        }
        if (mNextAnim != 0) {
            writer.print(prefix); writer.print("mNextAnim="); writer.println(mNextAnim);
        }
        if (mContainer != null) {
            writer.print(prefix); writer.print("mContainer="); writer.println(mContainer);
        }
        if (mView != null) {
            writer.print(prefix); writer.print("mView="); writer.println(mView);
        }
        if (mInnerView != null) {
            writer.print(prefix); writer.print("mInnerView="); writer.println(mView);
        }
        if (mAnimatingAway != null) {
            writer.print(prefix); writer.print("mAnimatingAway="); writer.println(mAnimatingAway);
            writer.print(prefix); writer.print("mStateAfterAnimating=");
                    writer.println(mStateAfterAnimating);
        }
        if (mLoaderManager != null) {
            writer.print(prefix); writer.println("Loader Manager:");
            mLoaderManager.dump(prefix + "  ", fd, writer, args);
        }
        if (mChildFragmentManager != null) {
            writer.print(prefix); writer.println("Child " + mChildFragmentManager + ":");
            mChildFragmentManager.dump(prefix + "  ", fd, writer, args);
        }
!!!35064759.java!!!	findFragmentByWho(inout who : String) : Fragment
        if (who.equals(mWho)) {
            return this;
        }
        if (mChildFragmentManager != null) {
            return mChildFragmentManager.findFragmentByWho(who);
        }
        return null;
!!!35064887.java!!!	instantiateChildFragmentManager() : void
        mChildFragmentManager = new FragmentManagerImpl();
        mChildFragmentManager.attachController(mHost, new FragmentContainer() {
            @Override
            @Nullable
            public View onFindViewById(int id) {
                if (mView == null) {
                    throw new IllegalStateException("Fragment does not have a view");
                }
                return mView.findViewById(id);
            }

            @Override
            public boolean onHasView() {
                return (mView != null);
            }
        }, this);
!!!35065015.java!!!	performCreate(inout savedInstanceState : Bundle) : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.noteStateNotSaved();
        }
        mState = CREATED;
        mCalled = false;
        onCreate(savedInstanceState);
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onCreate()");
        }
!!!35065143.java!!!	performCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        if (mChildFragmentManager != null) {
            mChildFragmentManager.noteStateNotSaved();
        }
        return onCreateView(inflater, container, savedInstanceState);
!!!35065271.java!!!	performActivityCreated(inout savedInstanceState : Bundle) : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.noteStateNotSaved();
        }
        mState = ACTIVITY_CREATED;
        mCalled = false;
        onActivityCreated(savedInstanceState);
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onActivityCreated()");
        }
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchActivityCreated();
        }
!!!35065399.java!!!	performStart() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.noteStateNotSaved();
            mChildFragmentManager.execPendingActions();
        }
        mState = STARTED;
        mCalled = false;
        onStart();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onStart()");
        }
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchStart();
        }
        if (mLoaderManager != null) {
            mLoaderManager.doReportStart();
        }
!!!35065527.java!!!	performResume() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.noteStateNotSaved();
            mChildFragmentManager.execPendingActions();
        }
        mState = RESUMED;
        mCalled = false;
        onResume();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onResume()");
        }
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchResume();
            mChildFragmentManager.execPendingActions();
        }
!!!35065655.java!!!	performMultiWindowModeChanged(inout isInMultiWindowMode : boolean) : void
        onMultiWindowModeChanged(isInMultiWindowMode);
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchMultiWindowModeChanged(isInMultiWindowMode);
        }
!!!35065783.java!!!	performPictureInPictureModeChanged(inout isInPictureInPictureMode : boolean) : void
        onPictureInPictureModeChanged(isInPictureInPictureMode);
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchPictureInPictureModeChanged(isInPictureInPictureMode);
        }
!!!35065911.java!!!	performConfigurationChanged(inout newConfig : Configuration) : void
        onConfigurationChanged(newConfig);
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchConfigurationChanged(newConfig);
        }
!!!35066039.java!!!	performLowMemory() : void
        onLowMemory();
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchLowMemory();
        }
!!!35066167.java!!!	performCreateOptionsMenu(inout menu : Menu, inout inflater : MenuInflater) : boolean
        boolean show = false;
        if (!mHidden) {
            if (mHasMenu && mMenuVisible) {
                show = true;
                onCreateOptionsMenu(menu, inflater);
            }
            if (mChildFragmentManager != null) {
                show |= mChildFragmentManager.dispatchCreateOptionsMenu(menu, inflater);
            }
        }
        return show;
!!!35066295.java!!!	performPrepareOptionsMenu(inout menu : Menu) : boolean
        boolean show = false;
        if (!mHidden) {
            if (mHasMenu && mMenuVisible) {
                show = true;
                onPrepareOptionsMenu(menu);
            }
            if (mChildFragmentManager != null) {
                show |= mChildFragmentManager.dispatchPrepareOptionsMenu(menu);
            }
        }
        return show;
!!!35066423.java!!!	performOptionsItemSelected(inout item : MenuItem) : boolean
        if (!mHidden) {
            if (mHasMenu && mMenuVisible) {
                if (onOptionsItemSelected(item)) {
                    return true;
                }
            }
            if (mChildFragmentManager != null) {
                if (mChildFragmentManager.dispatchOptionsItemSelected(item)) {
                    return true;
                }
            }
        }
        return false;
!!!35066551.java!!!	performContextItemSelected(inout item : MenuItem) : boolean
        if (!mHidden) {
            if (onContextItemSelected(item)) {
                return true;
            }
            if (mChildFragmentManager != null) {
                if (mChildFragmentManager.dispatchContextItemSelected(item)) {
                    return true;
                }
            }
        }
        return false;
!!!35066679.java!!!	performOptionsMenuClosed(inout menu : Menu) : void
        if (!mHidden) {
            if (mHasMenu && mMenuVisible) {
                onOptionsMenuClosed(menu);
            }
            if (mChildFragmentManager != null) {
                mChildFragmentManager.dispatchOptionsMenuClosed(menu);
            }
        }
!!!35066807.java!!!	performSaveInstanceState(inout outState : Bundle) : void
        onSaveInstanceState(outState);
        if (mChildFragmentManager != null) {
            Parcelable p = mChildFragmentManager.saveAllState();
            if (p != null) {
                outState.putParcelable(FragmentActivity.FRAGMENTS_TAG, p);
            }
        }
!!!35066935.java!!!	performPause() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchPause();
        }
        mState = STARTED;
        mCalled = false;
        onPause();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onPause()");
        }
!!!35067063.java!!!	performStop() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchStop();
        }
        mState = STOPPED;
        mCalled = false;
        onStop();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onStop()");
        }
!!!35067191.java!!!	performReallyStop() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchReallyStop();
        }
        mState = ACTIVITY_CREATED;
        if (mLoadersStarted) {
            mLoadersStarted = false;
            if (!mCheckedForLoaderManager) {
                mCheckedForLoaderManager = true;
                mLoaderManager = mHost.getLoaderManager(mWho, mLoadersStarted, false);
            }
            if (mLoaderManager != null) {
                if (mHost.getRetainLoaders()) {
                    mLoaderManager.doRetain();
                } else {
                    mLoaderManager.doStop();
                }
            }
        }
!!!35067319.java!!!	performDestroyView() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchDestroyView();
        }
        mState = CREATED;
        mCalled = false;
        onDestroyView();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onDestroyView()");
        }
        if (mLoaderManager != null) {
            mLoaderManager.doReportNextStart();
        }
!!!35067447.java!!!	performDestroy() : void
        if (mChildFragmentManager != null) {
            mChildFragmentManager.dispatchDestroy();
        }
        mState = INITIALIZING;
        mCalled = false;
        onDestroy();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onDestroy()");
        }
        mChildFragmentManager = null;
!!!35067575.java!!!	performDetach() : void
        mCalled = false;
        onDetach();
        if (!mCalled) {
            throw new SuperNotCalledException("Fragment " + this
                    + " did not call through to super.onDetach()");
        }

        // Destroy the child FragmentManager if we still have it here.
        // We won't unless we're retaining our instance and if we do,
        // our child FragmentManager instance state will have already been saved.
        if (mChildFragmentManager != null) {
            if (!mRetaining) {
                throw new IllegalStateException("Child FragmentManager of " + this + " was not "
                        + " destroyed and this fragment is not retaining instance");
            }
            mChildFragmentManager.dispatchDestroy();
            mChildFragmentManager = null;
        }
