class DrawerArrowDrawable
!!!35090231.java!!!	DrawerArrowDrawable(inout context : Context)
        mPaint.setStyle(Paint.Style.STROKE);
        mPaint.setStrokeJoin(Paint.Join.MITER);
        mPaint.setStrokeCap(Paint.Cap.BUTT);
        mPaint.setAntiAlias(true);

        final TypedArray a = context.getTheme().obtainStyledAttributes(null,
                R.styleable.DrawerArrowToggle, R.attr.drawerArrowStyle,
                R.style.Base_Widget_AppCompat_DrawerArrowToggle);

        setColor(a.getColor(R.styleable.DrawerArrowToggle_color, 0));
        setBarThickness(a.getDimension(R.styleable.DrawerArrowToggle_thickness, 0));
        setSpinEnabled(a.getBoolean(R.styleable.DrawerArrowToggle_spinBars, true));
        // round this because having this floating may cause bad measurements
        setGapSize(Math.round(a.getDimension(R.styleable.DrawerArrowToggle_gapBetweenBars, 0)));

        mSize = a.getDimensionPixelSize(R.styleable.DrawerArrowToggle_drawableSize, 0);
        // round this because having this floating may cause bad measurements
        mBarLength = Math.round(a.getDimension(R.styleable.DrawerArrowToggle_barLength, 0));
        // round this because having this floating may cause bad measurements
        mArrowHeadLength = Math.round(a.getDimension(
                R.styleable.DrawerArrowToggle_arrowHeadLength, 0));
        mArrowShaftLength = a.getDimension(R.styleable.DrawerArrowToggle_arrowShaftLength, 0);
        a.recycle();
!!!35090359.java!!!	setArrowHeadLength(in length : float) : void
        if (mArrowHeadLength != length) {
            mArrowHeadLength = length;
            invalidateSelf();
        }
!!!35090487.java!!!	getArrowHeadLength() : float
        return mArrowHeadLength;
!!!35090615.java!!!	setArrowShaftLength(in length : float) : void
        if (mArrowShaftLength != length) {
            mArrowShaftLength = length;
            invalidateSelf();
        }
!!!35090743.java!!!	getArrowShaftLength() : float
        return mArrowShaftLength;
!!!35090871.java!!!	getBarLength() : float
        return mBarLength;
!!!35090999.java!!!	setBarLength(in length : float) : void
        if (mBarLength != length) {
            mBarLength = length;
            invalidateSelf();
        }
!!!35091127.java!!!	setColor(in color : int) : void
        if (color != mPaint.getColor()) {
            mPaint.setColor(color);
            invalidateSelf();
        }
!!!35091255.java!!!	getColor() : int
        return mPaint.getColor();
!!!35091383.java!!!	setBarThickness(in width : float) : void
        if (mPaint.getStrokeWidth() != width) {
            mPaint.setStrokeWidth(width);
            mMaxCutForBarSize = (float) (width / 2 * Math.cos(ARROW_HEAD_ANGLE));
            invalidateSelf();
        }
!!!35091511.java!!!	getBarThickness() : float
        return mPaint.getStrokeWidth();
!!!35091639.java!!!	getGapSize() : float
        return mBarGap;
!!!35091767.java!!!	setGapSize(in gap : float) : void
        if (gap != mBarGap) {
            mBarGap = gap;
            invalidateSelf();
        }
!!!35091895.java!!!	setDirection(in direction : int) : void
        if (direction != mDirection) {
            mDirection = direction;
            invalidateSelf();
        }
!!!35092023.java!!!	isSpinEnabled() : boolean
        return mSpin;
!!!35092151.java!!!	setSpinEnabled(inout enabled : boolean) : void
        if (mSpin != enabled) {
            mSpin = enabled;
            invalidateSelf();
        }
!!!35092279.java!!!	getDirection() : int
        return mDirection;
!!!35092407.java!!!	setVerticalMirror(inout verticalMirror : boolean) : void
        if (mVerticalMirror != verticalMirror) {
            mVerticalMirror = verticalMirror;
            invalidateSelf();
        }
!!!35092535.java!!!	draw(inout canvas : Canvas) : void
        Rect bounds = getBounds();

        final boolean flipToPointRight;
        switch (mDirection) {
            case ARROW_DIRECTION_LEFT:
                flipToPointRight = false;
                break;
            case ARROW_DIRECTION_RIGHT:
                flipToPointRight = true;
                break;
            case ARROW_DIRECTION_END:
                flipToPointRight = DrawableCompat.getLayoutDirection(this)
                        == ViewCompat.LAYOUT_DIRECTION_LTR;
                break;
            case ARROW_DIRECTION_START:
            default:
                flipToPointRight = DrawableCompat.getLayoutDirection(this)
                        == ViewCompat.LAYOUT_DIRECTION_RTL;
                break;
        }

        // Interpolated widths of arrow bars

        float arrowHeadBarLength = (float) Math.sqrt(mArrowHeadLength * mArrowHeadLength * 2);
        arrowHeadBarLength = lerp(mBarLength, arrowHeadBarLength, mProgress);
        final float arrowShaftLength = lerp(mBarLength, mArrowShaftLength, mProgress);
        // Interpolated size of middle bar
        final float arrowShaftCut = Math.round(lerp(0, mMaxCutForBarSize, mProgress));
        // The rotation of the top and bottom bars (that make the arrow head)
        final float rotation = lerp(0, ARROW_HEAD_ANGLE, mProgress);

        // The whole canvas rotates as the transition happens
        final float canvasRotate = lerp(flipToPointRight ? 0 : -180,
                flipToPointRight ? 180 : 0, mProgress);

        final float arrowWidth = Math.round(arrowHeadBarLength * Math.cos(rotation));
        final float arrowHeight = Math.round(arrowHeadBarLength * Math.sin(rotation));

        mPath.rewind();
        final float topBottomBarOffset = lerp(mBarGap + mPaint.getStrokeWidth(), -mMaxCutForBarSize,
                mProgress);

        final float arrowEdge = -arrowShaftLength / 2;
        // draw middle bar
        mPath.moveTo(arrowEdge + arrowShaftCut, 0);
        mPath.rLineTo(arrowShaftLength - arrowShaftCut * 2, 0);

        // bottom bar
        mPath.moveTo(arrowEdge, topBottomBarOffset);
        mPath.rLineTo(arrowWidth, arrowHeight);

        // top bar
        mPath.moveTo(arrowEdge, -topBottomBarOffset);
        mPath.rLineTo(arrowWidth, -arrowHeight);

        mPath.close();

        canvas.save();

        // Rotate the whole canvas if spinning, if not, rotate it 180 to get
        // the arrow pointing the other way for RTL.
        final float barThickness = mPaint.getStrokeWidth();
        final int remainingSpace = (int) (bounds.height() - barThickness * 3 - mBarGap * 2);
        float yOffset = (remainingSpace / 4) * 2; // making sure it is a multiple of 2.
        yOffset += barThickness * 1.5 + mBarGap;

        canvas.translate(bounds.centerX(), yOffset);
        if (mSpin) {
            canvas.rotate(canvasRotate * ((mVerticalMirror ^ flipToPointRight) ? -1 : 1));
        } else if (flipToPointRight) {
            canvas.rotate(180);
        }
        canvas.drawPath(mPath, mPaint);

        canvas.restore();
!!!35092663.java!!!	setAlpha(in alpha : int) : void
        if (alpha != mPaint.getAlpha()) {
            mPaint.setAlpha(alpha);
            invalidateSelf();
        }
!!!35092791.java!!!	setColorFilter(inout colorFilter : ColorFilter) : void
        mPaint.setColorFilter(colorFilter);
        invalidateSelf();
!!!35092919.java!!!	getIntrinsicHeight() : int
        return mSize;
!!!35093047.java!!!	getIntrinsicWidth() : int
        return mSize;
!!!35093175.java!!!	getOpacity() : int
        return PixelFormat.TRANSLUCENT;
!!!35093303.java!!!	getProgress() : float
        return mProgress;
!!!35093431.java!!!	setProgress(in progress : float) : void
        if (mProgress != progress) {
            mProgress = progress;
            invalidateSelf();
        }
!!!35093559.java!!!	getPaint() : Paint
        return mPaint;
!!!35093687.java!!!	lerp(in a : float, in b : float, in t : float) : float
        return a + (b - a) * t;
