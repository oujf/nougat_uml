class LocalRenderer
!!!35130423.java!!!	LocalRenderer(inout context : Context, inout params : Bundle)
        super(context, params);
        mContext = context;
        mAudioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
!!!35130551.java!!!	initFeatures(inout params : Bundle) : void
        for (String feature : SUPPORTED_FEATURES) {
            mFeatures.add(feature);
        }
!!!35130679.java!!!	onDestroy() : void
        synchronized (mErrorLock) {
            if (DEBUG) {
                Log.d(TAG, "onDestroy, error retriever? " + mErrorRetriever + " safe to close? "
                        + mSafeToCloseClient + " client? " + mHttpClient);
            }
            if (mErrorRetriever != null) {
                mErrorRetriever.cancelRequestLocked(true);
                mErrorRetriever = null;
            }
            // Increment the error id to ensure no errors are sent after this
            // point.
            mErrorId++;
            if (mSafeToCloseClient) {
                mHttpClient.close();
                mHttpClient = null;
            }
        }
!!!35130807.java!!!	onPrepared(inout player : MediaPlayer) : void
        if (!isCurrentPlayer(player)) {
            return;
        }
        setState(STATE_READY);
        if (DEBUG) {
            Log.d(TAG, mDebugId + ": Finished preparing, seekOnReady is " + mSeekOnReady);
        }
        if (mSeekOnReady >= 0) {
            onSeekTo(mSeekOnReady);
            mSeekOnReady = -1;
        }
        if (mPlayOnReady) {
            player.start();
            setState(STATE_PLAYING);
        }
!!!35130935.java!!!	onBufferingUpdate(inout player : MediaPlayer, in percent : int) : void
        if (!isCurrentPlayer(player)) {
            return;
        }
        pushOnBufferingUpdate(percent);
!!!35131063.java!!!	onCompletion(inout player : MediaPlayer) : void
        if (!isCurrentPlayer(player)) {
            return;
        }
        if (DEBUG) {
            Log.d(TAG, mDebugId + ": Completed item. Have next item? " + (mNextPlayer != null));
        }
        if (mNextPlayer != null) {
            if (mPlayer != null) {
                mPlayer.release();
            }
            mPlayer = mNextPlayer;
            mContent = mNextContent;
            mNextPlayer = null;
            mNextContent = null;
            pushOnNextStarted();
            return;
        }
        setState(STATE_ENDED);
!!!35131191.java!!!	onError(inout player : MediaPlayer, in what : int, in extra : int) : boolean
        if (!isCurrentPlayer(player)) {
            return false;
        }
        if (DEBUG) {
            Log.d(TAG, mDebugId + ": Entered error state, what: " + what + " extra: " + extra);
        }
        synchronized (mErrorLock) {
            ++mErrorId;
            mError = new PlaybackError();
            mError.type = what;
            mError.extra = extra;
        }

        if (what == MediaPlayer.MEDIA_ERROR_UNKNOWN && extra == MediaPlayer.MEDIA_ERROR_IO
                && mContent != null && mContent.source.startsWith("http")) {
            HttpGet request = new HttpGet(mContent.source);
            if (mContent.headers != null) {
                for (String key : mContent.headers.keySet()) {
                    request.addHeader(key, mContent.headers.get(key));
                }
            }
            synchronized (mErrorLock) {
                if (mErrorRetriever != null) {
                    mErrorRetriever.cancelRequestLocked(false);
                }
                mErrorRetriever = new AsyncErrorRetriever(mErrorId);
                mErrorRetriever.execute(request);
            }
        } else {
            setError(what, extra, null, null);
        }
        return true;
!!!35131319.java!!!	onAudioFocusChange(in focusChange : int) : void
        // TODO figure out appropriate logic for handling focus loss at the TUQ
        // level.
        switch (focusChange) {
            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:
            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:
                if (mState == STATE_PLAYING) {
                    onPause();
                    mPlayOnReady = true;
                }
                mHasAudioFocus = false;
                break;
            case AudioManager.AUDIOFOCUS_LOSS:
                if (mState == STATE_PLAYING) {
                    onPause();
                    mPlayOnReady = false;
                }
                pushOnFocusLost();
                mHasAudioFocus = false;
                break;
            case AudioManager.AUDIOFOCUS_GAIN:
                mHasAudioFocus = true;
                if (mPlayOnReady) {
                    onPlay();
                }
                break;
            default:
                Log.d(TAG, "Unknown focus change event " + focusChange);
                break;
        }
!!!35131447.java!!!	setContent(inout request : Bundle) : void
        setContent(request, null);
!!!35131575.java!!!	setContent(inout request : Bundle, inout holder : SurfaceHolder) : void
        String source = request.getString(RequestUtils.EXTRA_KEY_SOURCE);
        Map<String, String> headers = null; // request.mHeaders;
        boolean playOnReady = true; // request.mPlayOnReady;
        if (DEBUG) {
            Log.d(TAG, mDebugId + ": Settings new content. Have a player? " + (mPlayer != null)
                    + " have a next player? " + (mNextPlayer != null));
        }
        cleanUpPlayer();
        setState(STATE_PREPARING);
        mPlayOnReady = playOnReady;
        mSeekOnReady = -1;
        final MediaPlayer newPlayer = new MediaPlayer();

        requestAudioFocus();

        mPlayer = newPlayer;
        mContent = new PlayerContent(source, headers);
        try {
            if (headers != null) {
                Uri sourceUri = Uri.parse(source);
                newPlayer.setDataSource(mContext, sourceUri, headers);
            } else {
                newPlayer.setDataSource(source);
            }
        } catch (Exception e) {
            setError(Listener.ERROR_LOAD_FAILED, 0, null, e);
            return;
        }
        if (isHolderReady(holder, newPlayer)) {
            preparePlayer(newPlayer, true);
        }
!!!35131703.java!!!	setNextContent(inout request : Bundle) : void
        String source = request.getString(RequestUtils.EXTRA_KEY_SOURCE);
        Map<String, String> headers = null; // request.mHeaders;

        // TODO support video

        if (DEBUG) {
            Log.d(TAG, mDebugId + ": Setting next content. Have player? " + (mPlayer != null)
                    + " have next player? " + (mNextPlayer != null));
        }

        if (mPlayer == null) {
            // The manager isn't being used to play anything, don't try to
            // set a next.
            return;
        }
        if (mNextPlayer != null) {
            // Before setting up the new one clear out the old one and release
            // it to ensure it doesn't play.
            mPlayer.setNextMediaPlayer(null);
            mNextPlayer.release();
            mNextPlayer = null;
            mNextContent = null;
        }
        if (source == null) {
            // If there's no new content we're done
            return;
        }
        final MediaPlayer newPlayer = new MediaPlayer();

        try {
            if (headers != null) {
                Uri sourceUri = Uri.parse(source);
                newPlayer.setDataSource(mContext, sourceUri, headers);
            } else {
                newPlayer.setDataSource(source);
            }
        } catch (Exception e) {
            newPlayer.release();
            // Don't return an error until we get to this item in playback
            return;
        }

        if (preparePlayer(newPlayer, false)) {
            mPlayer.setNextMediaPlayer(newPlayer);
            mNextPlayer = newPlayer;
            mNextContent = new PlayerContent(source, headers);
        }
!!!35131831.java!!!	requestAudioFocus() : void
        int result = mAudioManager.requestAudioFocus(this, AudioManager.STREAM_MUSIC,
                AudioManager.AUDIOFOCUS_GAIN);
        mHasAudioFocus = result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED;
!!!35131959.java!!!	onPlay() : boolean
        MediaPlayer player = mPlayer;
        if (player != null && mState == STATE_PLAYING) {
            // already playing, just return
            return true;
        }
        if (!mHasAudioFocus) {
            requestAudioFocus();
        }
        if (player != null && canPlay()) {
            player.start();
            setState(STATE_PLAYING);
        } else if (canReadyPlay()) {
            mPlayOnReady = true;
        } else if (!isPlaying()) {
            return false;
        }
        return true;
!!!35132087.java!!!	onPause() : boolean
        MediaPlayer player = mPlayer;
        // If the user paused us make sure we won't start playing again until
        // asked to
        mPlayOnReady = false;
        if (player != null && (mState & CAN_PAUSE) != 0) {
            player.pause();
            setState(STATE_PAUSED);
        } else if (!isPaused()) {
            return false;
        }
        return true;
!!!35132215.java!!!	onSeekTo(in position : int) : boolean
        MediaPlayer player = mPlayer;
        if (player != null && (mState & CAN_SEEK) != 0) {
            if (position < 0 || position >= getDuration()) {
                return false;
            } else {
                if (mState == STATE_ENDED) {
                    player.start();
                    player.pause();
                    setState(STATE_PAUSED);
                }
                player.seekTo(position);
            }
        } else if ((mState & CAN_READY_SEEK) != 0) {
            mSeekOnReady = position;
        } else {
            return false;
        }
        return true;
!!!35132343.java!!!	onStop() : boolean
        cleanUpPlayer();
        setState(STATE_STOPPED);
        return true;
!!!35132471.java!!!	isPlaying() : boolean
        return mState == STATE_PLAYING;
!!!35132599.java!!!	isPaused() : boolean
        return mState == STATE_PAUSED;
!!!35132727.java!!!	getSeekPosition() : long
        return ((mState & CAN_GET_POSITION) == 0) ? -1 : mPlayer.getCurrentPosition();
!!!35132855.java!!!	getDuration() : long
        return ((mState & CAN_GET_POSITION) == 0) ? -1 : mPlayer.getDuration();
!!!35132983.java!!!	canPlay() : boolean
        return ((mState & CAN_PLAY) != 0) && mHasAudioFocus;
!!!35133111.java!!!	canReadyPlay() : boolean
        return (mState & CAN_PLAY) != 0 || (mState & CAN_READY_PLAY) != 0;
!!!35133239.java!!!	setState(in state : int) : void
        if (state == mState) {
            return;
        }
        Log.d(TAG, "Entering state " + state + " from state " + mState);
        mState = state;
        if (state != STATE_ERROR) {
            // Don't notify error here, it'll get sent via onError
            pushOnStateChanged(state);
        }
!!!35133367.java!!!	preparePlayer(in player : MediaPlayer, inout current : boolean) : boolean
        player.setOnPreparedListener(this);
        player.setOnBufferingUpdateListener(this);
        player.setOnCompletionListener(this);
        player.setOnErrorListener(this);
        try {
            player.prepareAsync();
            if (current) {
                setState(STATE_PREPARING);
            }
        } catch (IllegalStateException e) {
            if (current) {
                setError(Listener.ERROR_PREPARE_ERROR, 0, null, e);
            }
            return false;
        }
        return true;
!!!35133495.java!!!	setError(in type : int, in extra : int, inout extras : Bundle, inout e : Exception) : void
        setState(STATE_ERROR);
        pushOnError(type, extra, extras, e);
        cleanUpPlayer();
        return;
!!!35133623.java!!!	isHolderReady(in holder : SurfaceHolder, in player : MediaPlayer) : boolean
        mHolder = holder;
        if (holder != null) {
            if (holder.getSurface() != null && holder.getSurface().isValid()) {
                player.setDisplay(holder);
                return true;
            } else {
                Log.w(TAG, "Holder not null, waiting for it to be ready");
                // If the holder isn't ready yet add a callback to set the
                // holder when it's ready.
                SurfaceHolder.Callback cb = new SurfaceHolder.Callback() {
                        @Override
                    public void surfaceDestroyed(SurfaceHolder arg0) {
                    }

                        @Override
                    public void surfaceCreated(SurfaceHolder arg0) {
                        if (player.equals(mPlayer)) {
                            player.setDisplay(arg0);
                            preparePlayer(player, true);
                        }
                    }

                        @Override
                    public void surfaceChanged(SurfaceHolder arg0, int arg1, int arg2, int arg3) {
                    }
                };
                mHolderCB = cb;
                holder.addCallback(cb);
                return false;
            }
        }
        return true;
!!!35133751.java!!!	cleanUpPlayer() : void
        if (DEBUG) {
            Log.d(TAG, mDebugId + ": Cleaning up current player");
        }
        synchronized (mErrorLock) {
            mError = null;
            if (mErrorRetriever != null) {
                mErrorRetriever.cancelRequestLocked(false);
                // Don't set to null as we may need to cancel again with true if
                // the object gets destroyed.
            }
        }
        mAudioManager.abandonAudioFocus(this);

        SurfaceHolder.Callback cb = mHolderCB;
        mHolderCB = null;
        SurfaceHolder holder = mHolder;
        mHolder = null;
        if (holder != null && cb != null) {
            holder.removeCallback(cb);
        }

        MediaPlayer player = mPlayer;
        mPlayer = null;
        if (player != null) {
            player.reset();
            player.release();
        }
!!!35133879.java!!!	isCurrentPlayer(inout player : MediaPlayer) : boolean
        return player.equals(mPlayer);
