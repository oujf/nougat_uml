format 76
"params" // nougat_src::frameworks::base::core::java::org::apache::http::params
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/base/core/java/org/apache/http/params/"
  java_package "org.apache.http.params"
  classview 175287 "params"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 816055 "HttpParams"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Represents a collection of HTTP protocol and framework parameters.
  
@author <a href=\"mailto:oleg at ural.ru\">Oleg Kalnichevski</a>

@version $Revision: 610763 $

@since 4.0

@deprecated Please use {@link java.net.URL#openConnection} instead.
    Please visit <a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\">this webpage</a>
    for further details."
      operation 6533815 "getParameter"
	public return_type class_ref 132663 // Object
	nparams 1
	  param inout name "name" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the value of the given parameter.

@param name the parent name.

@return  an object that represents the value of the parameter,
         <code>null</code> if the parameter is not set or if it
         is explicitly set to <code>null</code>

@see #setParameter(String, Object)"
      end

      operation 6533943 "setParameter"
	public return_type class_ref 816055 // HttpParams
	nparams 2
	  param inout name "name" type class_ref 129591 // String
	  param inout name "value" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the value to the parameter with the given name.

@param name parameter name
@param value parameter value"
      end

      operation 6534071 "copy"
	public return_type class_ref 816055 // HttpParams
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a copy of these parameters.

@return  a new set of parameters holding the same values as this one"
      end

      operation 6534199 "removeParameter"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the parameter with the specified name.

@param name parameter name

@return true if the parameter existed and has been removed, false else."
      end

      operation 6534327 "getLongParameter"
	public explicit_return_type "long"
	nparams 2
	  param inout name "name" type class_ref 129591 // String
	  param in name "defaultValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Long} parameter value with the given name. 
If the parameter is not explicitly set, the default value is returned.  

@param name the parent name.
@param defaultValue the default value.

@return a {@link Long} that represents the value of the parameter.

@see #setLongParameter(String, long)"
      end

      operation 6534455 "setLongParameter"
	public return_type class_ref 816055 // HttpParams
	nparams 2
	  param inout name "name" type class_ref 129591 // String
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns a {@link Long} to the parameter with the given name

@param name parameter name
@param value parameter value"
      end

      operation 6534583 "getIntParameter"
	public explicit_return_type "int"
	nparams 2
	  param inout name "name" type class_ref 129591 // String
	  param in name "defaultValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@link Integer} parameter value with the given name. 
If the parameter is not explicitly set, the default value is returned.  

@param name the parent name.
@param defaultValue the default value.

@return a {@link Integer} that represents the value of the parameter.

@see #setIntParameter(String, int)"
      end

      operation 6534711 "setIntParameter"
	public return_type class_ref 816055 // HttpParams
	nparams 2
	  param inout name "name" type class_ref 129591 // String
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns an {@link Integer} to the parameter with the given name

@param name parameter name
@param value parameter value"
      end

      operation 6534839 "getDoubleParameter"
	public explicit_return_type "double"
	nparams 2
	  param inout name "name" type class_ref 129591 // String
	  param in name "defaultValue" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Double} parameter value with the given name. 
If the parameter is not explicitly set, the default value is returned.  

@param name the parent name.
@param defaultValue the default value.

@return a {@link Double} that represents the value of the parameter.

@see #setDoubleParameter(String, double)"
      end

      operation 6534967 "setDoubleParameter"
	public return_type class_ref 816055 // HttpParams
	nparams 2
	  param inout name "name" type class_ref 129591 // String
	  param in name "value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns a {@link Double} to the parameter with the given name

@param name parameter name
@param value parameter value"
      end

      operation 6535095 "getBooleanParameter"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 129591 // String
	  param inout name "defaultValue" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Boolean} parameter value with the given name. 
If the parameter is not explicitly set, the default value is returned.  

@param name the parent name.
@param defaultValue the default value.

@return a {@link Boolean} that represents the value of the parameter.

@see #setBooleanParameter(String, boolean)"
      end

      operation 6535223 "setBooleanParameter"
	public return_type class_ref 816055 // HttpParams
	nparams 2
	  param inout name "name" type class_ref 129591 // String
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns a {@link Boolean} to the parameter with the given name

@param name parameter name
@param value parameter value"
      end

      operation 6535351 "isParameterTrue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if a boolean parameter is set to <code>true</code>.

@param name parameter name

@return <tt>true</tt> if the parameter is set to value <tt>true</tt>,
        <tt>false</tt> if it is not set or set to <code>false</code>"
      end

      operation 6535479 "isParameterFalse"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if a boolean parameter is not set or <code>false</code>.

@param name parameter name

@return <tt>true</tt> if the parameter is either not set or
        set to value <tt>false</tt>,
        <tt>false</tt> if it is set to <code>true</code>"
      end
    end

    class 817207 "CoreConnectionPNames"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Defines parameter names for connections in HttpCore.

@version $Revision: 576077 $

@since 4.0

@deprecated Please use {@link java.net.URL#openConnection} instead.
    Please visit <a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\">this webpage</a>
    for further details."
      classrelation 2526775 // SO_TIMEOUT (<unidirectional association>)
	relation 2526775 --->
	  a role_name "SO_TIMEOUT" init_value " \"http.socket.timeout\"" class_relation const_relation public
	    comment "
Defines the default socket timeout (<tt>SO_TIMEOUT</tt>) in milliseconds which is the 
timeout for waiting for data. A timeout value of zero is interpreted as an infinite 
timeout. This value is used when no socket timeout is set in the 
method parameters. 
<p>
This parameter expects a value of type {@link Integer}.
</p>
@see java.net.SocketOptions#SO_TIMEOUT

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2526775 // SO_TIMEOUT (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 2526903 // TCP_NODELAY (<unidirectional association>)
	relation 2526903 --->
	  a role_name "TCP_NODELAY" init_value " \"http.tcp.nodelay\"" class_relation const_relation public
	    comment "
Determines whether Nagle's algorithm is to be used. The Nagle's algorithm 
tries to conserve bandwidth by minimizing the number of segments that are 
sent. When applications wish to decrease network latency and increase 
performance, they can disable Nagle's algorithm (that is enable TCP_NODELAY). 
Data will be sent earlier, at the cost of an increase in bandwidth consumption. 
<p>
This parameter expects a value of type {@link Boolean}.
</p>
@see java.net.SocketOptions#TCP_NODELAY

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2526903 // TCP_NODELAY (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 2527031 // SOCKET_BUFFER_SIZE (<unidirectional association>)
	relation 2527031 --->
	  a role_name "SOCKET_BUFFER_SIZE" init_value " \"http.socket.buffer-size\"" class_relation const_relation public
	    comment "
Determines the size of the internal socket buffer used to buffer data
while receiving / transmitting HTTP messages.
<p>
This parameter expects a value of type {@link Integer}.
</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2527031 // SOCKET_BUFFER_SIZE (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 2527159 // SO_LINGER (<unidirectional association>)
	relation 2527159 --->
	  a role_name "SO_LINGER" init_value " \"http.socket.linger\"" class_relation const_relation public
	    comment "
Sets SO_LINGER with the specified linger time in seconds. The maximum timeout 
value is platform specific. Value <tt>0</tt> implies that the option is disabled.
Value <tt>-1</tt> implies that the JRE default is used. The setting only affects 
socket close.  
<p>
This parameter expects a value of type {@link Integer}.
</p>
@see java.net.SocketOptions#SO_LINGER

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2527159 // SO_LINGER (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 2527287 // CONNECTION_TIMEOUT (<unidirectional association>)
	relation 2527287 --->
	  a role_name "CONNECTION_TIMEOUT" init_value " \"http.connection.timeout\"" class_relation const_relation public
	    comment "
Determines the timeout until a connection is etablished. A value of zero 
means the timeout is not used. The default value is zero.
<p>
This parameter expects a value of type {@link Integer}.
</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2527287 // CONNECTION_TIMEOUT (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 2527415 // STALE_CONNECTION_CHECK (<unidirectional association>)
	relation 2527415 --->
	  a role_name "STALE_CONNECTION_CHECK" init_value " \"http.connection.stalecheck\"" class_relation const_relation public
	    comment "
Determines whether stale connection check is to be used. Disabling 
stale connection check may result in slight performance improvement 
at the risk of getting an I/O error when executing a request over a
connection that has been closed at the server side. 
<p>
This parameter expects a value of type {@link Boolean}.
</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2527415 // STALE_CONNECTION_CHECK (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 2527543 // MAX_LINE_LENGTH (<unidirectional association>)
	relation 2527543 --->
	  a role_name "MAX_LINE_LENGTH" init_value " \"http.connection.max-line-length\"" class_relation const_relation public
	    comment "
Determines the maximum line length limit. If set to a positive value, any HTTP 
line exceeding this limit will cause an IOException. A negative or zero value
will effectively disable the check.
<p>
This parameter expects a value of type {@link Integer}.
</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2527543 // MAX_LINE_LENGTH (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 2527671 // MAX_HEADER_COUNT (<unidirectional association>)
	relation 2527671 --->
	  a role_name "MAX_HEADER_COUNT" init_value " \"http.connection.max-header-count\"" class_relation const_relation public
	    comment "
Determines the maximum HTTP header count allowed. If set to a positive value, 
the number of HTTP headers received from the data stream exceeding this limit 
will cause an IOException. A negative or zero value will effectively disable 
the check. 
<p>
This parameter expects a value of type {@link Integer}.
</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2527671 // MAX_HEADER_COUNT (<unidirectional association>)
	  b parent class_ref 129591 // String
      end
    end

    class 817335 "HttpConnectionParams"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An adaptor for accessing connection parameters in {@link HttpParams}.
<br/>
Note that the <i>implements</i> relation to {@link CoreConnectionPNames}
is for compatibility with existing application code only. References to
the parameter names should use the interface, not this class.

@author <a href=\"mailto:oleg at ural.ru\">Oleg Kalnichevski</a>

@version $Revision: 576089 $

@since 4.0

@deprecated Please use {@link java.net.URL#openConnection} instead.
    Please visit <a href=\"http://android-developers.blogspot.com/2011/09/androids-http-clients.html\">this webpage</a>
    for further details."
      classrelation 2527799 // <realization>
	relation 2527799 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 2527799 // <realization>
	  b parent class_ref 817207 // CoreConnectionPNames
      end

      operation 6532151 "HttpConnectionParams"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6532279 "getSoTimeout"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "params" type class_ref 816055 // HttpParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default socket timeout (<tt>SO_TIMEOUT</tt>) in milliseconds which is the 
timeout for waiting for data. A timeout value of zero is interpreted as an infinite 
timeout. This value is used when no socket timeout is set in the 
method parameters. 

@return timeout in milliseconds"
      end

      operation 6532407 "setSoTimeout"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "params" type class_ref 816055 // HttpParams
	  param in name "timeout" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the default socket timeout (<tt>SO_TIMEOUT</tt>) in milliseconds which is the 
timeout for waiting for data. A timeout value of zero is interpreted as an infinite 
timeout. This value is used when no socket timeout is set in the 
method parameters. 

@param timeout Timeout in milliseconds"
      end

      operation 6532535 "getTcpNoDelay"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "params" type class_ref 816055 // HttpParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if Nagle's algorithm is to be used.  

@return <tt>true</tt> if the Nagle's algorithm is to NOT be used
  (that is enable TCP_NODELAY), <tt>false</tt> otherwise."
      end

      operation 6532663 "setTcpNoDelay"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "params" type class_ref 816055 // HttpParams
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether Nagle's algorithm is to be used. The Nagle's algorithm 
tries to conserve bandwidth by minimizing the number of segments that are 
sent. When applications wish to decrease network latency and increase 
performance, they can disable Nagle's algorithm (that is enable TCP_NODELAY). 
Data will be sent earlier, at the cost of an increase in bandwidth consumption. 

@param value <tt>true</tt> if the Nagle's algorithm is to NOT be used
  (that is enable TCP_NODELAY), <tt>false</tt> otherwise."
      end

      operation 6532791 "getSocketBufferSize"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "params" type class_ref 816055 // HttpParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6532919 "setSocketBufferSize"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "params" type class_ref 816055 // HttpParams
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6533047 "getLinger"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "params" type class_ref 816055 // HttpParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns linger-on-close timeout. Value <tt>0</tt> implies that the option is 
disabled. Value <tt>-1</tt> implies that the JRE default is used.

@return the linger-on-close timeout"
      end

      operation 6533175 "setLinger"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "params" type class_ref 816055 // HttpParams
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns linger-on-close timeout. This option disables/enables immediate return 
from a close() of a TCP Socket. Enabling this option with a non-zero Integer 
timeout means that a close() will block pending the transmission and 
acknowledgement of all data written to the peer, at which point the socket is 
closed gracefully. Value <tt>0</tt> implies that the option is 
disabled. Value <tt>-1</tt> implies that the JRE default is used.

@param value the linger-on-close timeout"
      end

      operation 6533303 "getConnectionTimeout"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "params" type class_ref 816055 // HttpParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the timeout until a connection is etablished. A value of zero 
means the timeout is not used. The default value is zero.

@return timeout in milliseconds."
      end

      operation 6533431 "setConnectionTimeout"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "params" type class_ref 816055 // HttpParams
	  param in name "timeout" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the timeout until a connection is etablished. A value of zero 
means the timeout is not used. The default value is zero.

@param timeout Timeout in milliseconds."
      end

      operation 6533559 "isStaleCheckingEnabled"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "params" type class_ref 816055 // HttpParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether stale connection check is to be used. Disabling 
stale connection check may result in slight performance improvement 
at the risk of getting an I/O error when executing a request over a
connection that has been closed at the server side. 

@return <tt>true</tt> if stale connection check is to be used, 
  <tt>false</tt> otherwise."
      end

      operation 6533687 "setStaleCheckingEnabled"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "params" type class_ref 816055 // HttpParams
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines whether stale connection check is to be used. Disabling 
stale connection check may result in slight performance improvement 
at the risk of getting an I/O error when executing a request over a
connection that has been closed at the server side. 

@param value <tt>true</tt> if stale connection check is to be used, 
  <tt>false</tt> otherwise."
      end
    end
  end

  deploymentview 162359 "params"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 476599 "CoreConnectionPNames"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 817207 // CoreConnectionPNames
      end
      comment "$HeadURL: http://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk/module-main/src/main/java/org/apache/http/params/CoreConnectionPNames.java $
$Revision: 576077 $
$Date: 2007-09-16 04:50:22 -0700 (Sun, 16 Sep 2007) $

====================================================================
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
\"License\"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.
"
    end

    artifact 476727 "HttpConnectionParams"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 817335 // HttpConnectionParams
      end
      comment "$HeadURL: http://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk/module-main/src/main/java/org/apache/http/params/HttpConnectionParams.java $
$Revision: 576089 $
$Date: 2007-09-16 05:39:56 -0700 (Sun, 16 Sep 2007) $

====================================================================
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
\"License\"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.
"
    end

    artifact 476855 "HttpParams"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 816055 // HttpParams
      end
      comment "$HeadURL: http://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk/module-main/src/main/java/org/apache/http/params/HttpParams.java $
$Revision: 610763 $
$Date: 2008-01-10 04:01:13 -0800 (Thu, 10 Jan 2008) $

====================================================================
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
\"License\"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
====================================================================

This software consists of voluntary contributions made by many
individuals on behalf of the Apache Software Foundation.  For more
information on the Apache Software Foundation, please see
<http://www.apache.org/>.
"
    end
  end
end
