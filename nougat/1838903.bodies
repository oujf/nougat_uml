class Resources_Delegate
!!!35232183.java!!!	initSystem(inout context : BridgeContext, inout assets : AssetManager, inout metrics : DisplayMetrics, inout config : Configuration, inout layoutlibCallback : LayoutlibCallback) : Resources
        Resources resources = new Resources(assets, metrics, config);
        resources.mContext = context;
        resources.mLayoutlibCallback = layoutlibCallback;
        return Resources.mSystem = resources;
!!!35232311.java!!!	disposeSystem() : void
        Resources.mSystem.mContext = null;
        Resources.mSystem.mLayoutlibCallback = null;
        Resources.mSystem = null;
!!!35232439.java!!!	newTypeArray(inout resources : Resources, in numEntries : int, inout platformFile : boolean) : BridgeTypedArray
        return new BridgeTypedArray(resources, resources.mContext, numEntries, platformFile);
!!!35232567.java!!!	getResourceInfo(inout resources : Resources, in id : int, inout platformResFlag_out : boolean) : String
        // first get the String related to this id in the framework
        Pair<ResourceType, String> resourceInfo = Bridge.resolveResourceId(id);

        // Set the layoutlib callback and context for resources
        if (resources != Resources.mSystem && resources.mLayoutlibCallback == null) {
            resources.mLayoutlibCallback = Resources.mSystem.mLayoutlibCallback;
            resources.mContext = Resources.mSystem.mContext;
        }

        if (resourceInfo != null) {
            platformResFlag_out[0] = true;
            return resourceInfo;
        }

        // didn't find a match in the framework? look in the project.
        if (resources.mLayoutlibCallback != null) {
            resourceInfo = resources.mLayoutlibCallback.resolveResourceId(id);

            if (resourceInfo != null) {
                platformResFlag_out[0] = false;
                return resourceInfo;
            }
        }
        return null;
!!!35232695.java!!!	getResourceValue(inout resources : Resources, in id : int, inout platformResFlag_out : boolean) : String
        Pair<ResourceType, String> resourceInfo =
                getResourceInfo(resources, id, platformResFlag_out);

        if (resourceInfo != null) {
            String attributeName = resourceInfo.getSecond();
            RenderResources renderResources = resources.mContext.getRenderResources();
            return Pair.of(attributeName, platformResFlag_out[0] ?
                    renderResources.getFrameworkResource(resourceInfo.getFirst(), attributeName) :
                    renderResources.getProjectResource(resourceInfo.getFirst(), attributeName));
        }

        return null;
!!!35232823.java!!!	getDrawable(inout resources : Resources, in id : int) : Drawable
        return getDrawable(resources, id, null);
!!!35232951.java!!!	getDrawable(inout resources : Resources, in id : int, inout theme : Resources::Theme) : Drawable
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            return ResourceHelper.getDrawable(value.getSecond(), resources.mContext, theme);
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return null;
!!!35233079.java!!!	getColor(inout resources : Resources, in id : int) : int
        return getColor(resources, id, null);
!!!35233207.java!!!	getColor(inout resources : Resources, in id : int, inout theme : Resources::Theme) : int
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            ResourceValue resourceValue = value.getSecond();
            try {
                return ResourceHelper.getColor(resourceValue.getValue());
            } catch (NumberFormatException e) {
                // Check if the value passed is a file. If it is, mostly likely, user is referencing
                // a color state list from a place where they should reference only a pure color.
                String message;
                if (new File(resourceValue.getValue()).isFile()) {
                    String resource = (resourceValue.isFramework() ? "@android:" : "@") + "color/"
                            + resourceValue.getName();
                    message = "Hexadecimal color expected, found Color State List for " + resource;
                } else {
                    message = e.getMessage();
                }
                Bridge.getLog().error(LayoutLog.TAG_RESOURCES_FORMAT, message, e, null);
                return 0;
            }
        }

        // Suppress possible NPE. getColorStateList will never return null, it will instead
        // throw an exception, but intelliJ can't figure that out
        //noinspection ConstantConditions
        return getColorStateList(resources, id, theme).getDefaultColor();
!!!35233335.java!!!	getColorStateList(inout resources : Resources, in id : int) : ColorStateList
        return getColorStateList(resources, id, null);
!!!35233463.java!!!	getColorStateList(inout resources : Resources, in id : int, inout theme : Resources::Theme) : ColorStateList
        Pair<String, ResourceValue> resValue =
                getResourceValue(resources, id, mPlatformResourceFlag);

        if (resValue != null) {
            ColorStateList stateList = ResourceHelper.getColorStateList(resValue.getSecond(),
                    resources.mContext);
            if (stateList != null) {
                return stateList.obtainForTheme(theme);
            }
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return null;
!!!35233591.java!!!	getText(inout resources : Resources, in id : int, inout def : CharSequence) : CharSequence
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            ResourceValue resValue = value.getSecond();

            assert resValue != null;
            if (resValue != null) {
                String v = resValue.getValue();
                if (v != null) {
                    return v;
                }
            }
        }

        return def;
!!!35233719.java!!!	getText(inout resources : Resources, in id : int) : CharSequence
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            ResourceValue resValue = value.getSecond();

            assert resValue != null;
            if (resValue != null) {
                String v = resValue.getValue();
                if (v != null) {
                    return v;
                }
            }
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return null;
!!!35233847.java!!!	getTextArray(inout resources : Resources, in id : int) : CharSequence
        ResourceValue resValue = getArrayResourceValue(resources, id);
        if (resValue == null) {
            // Error already logged by getArrayResourceValue.
            return new CharSequence[0];
        } else if (!(resValue instanceof ArrayResourceValue)) {
            return new CharSequence[]{
                    resolveReference(resources, resValue.getValue(), resValue.isFramework())};
        }
        ArrayResourceValue arv = ((ArrayResourceValue) resValue);
        return fillValues(resources, arv, new CharSequence[arv.getElementCount()]);
!!!35233975.java!!!	getStringArray(inout resources : Resources, in id : int) : String
        ResourceValue resValue = getArrayResourceValue(resources, id);
        if (resValue == null) {
            // Error already logged by getArrayResourceValue.
            return new String[0];
        } else if (!(resValue instanceof ArrayResourceValue)) {
            return new String[]{
                    resolveReference(resources, resValue.getValue(), resValue.isFramework())};
        }
        ArrayResourceValue arv = ((ArrayResourceValue) resValue);
        return fillValues(resources, arv, new String[arv.getElementCount()]);
!!!35234103.java!!!	fillValues(inout resources : Resources, inout resValue : ArrayResourceValue, inout values : T) : T
        int i = 0;
        for (Iterator<String> iterator = resValue.iterator(); iterator.hasNext(); i++) {
            @SuppressWarnings("unchecked")
            T s = (T) resolveReference(resources, iterator.next(), resValue.isFramework());
            values[i] = s;
        }
        return values;
!!!35234231.java!!!	getIntArray(inout resources : Resources, in id : int) : int
        ResourceValue rv = getArrayResourceValue(resources, id);
        if (rv == null) {
            // Error already logged by getArrayResourceValue.
            return new int[0];
        } else if (!(rv instanceof ArrayResourceValue)) {
            // This is an older IDE that can only give us the first element of the array.
            String firstValue = resolveReference(resources, rv.getValue(), rv.isFramework());
            try {
                return new int[]{getInt(firstValue)};
            } catch (NumberFormatException e) {
                Bridge.getLog().error(LayoutLog.TAG_RESOURCES_FORMAT,
                        "Integer resource array contains non-integer value: " +
                                firstValue, null);
                return new int[1];
            }
        }
        ArrayResourceValue resValue = ((ArrayResourceValue) rv);
        int[] values = new int[resValue.getElementCount()];
        int i = 0;
        for (Iterator<String> iterator = resValue.iterator(); iterator.hasNext(); i++) {
            String element = resolveReference(resources, iterator.next(), resValue.isFramework());
            try {
                values[i] = getInt(element);
            } catch (NumberFormatException e) {
                Bridge.getLog().error(LayoutLog.TAG_RESOURCES_FORMAT,
                        "Integer resource array contains non-integer value: " + element, null);
            }
        }
        return values;
!!!35234359.java!!!	getArrayResourceValue(inout resources : Resources, in id : int) : ResourceValue
        Pair<String, ResourceValue> v = getResourceValue(resources, id, mPlatformResourceFlag);

        if (v != null) {
            ResourceValue resValue = v.getSecond();

            assert resValue != null;
            if (resValue != null) {
                final ResourceType type = resValue.getResourceType();
                if (type != ResourceType.ARRAY) {
                    Bridge.getLog().error(LayoutLog.TAG_RESOURCES_RESOLVE,
                            String.format(
                                    "Resource with id 0x%1$X is not an array resource, but %2$s",
                                    id, type == null ? "null" : type.getDisplayName()),
                            null);
                    return null;
                }
                if (!(resValue instanceof ArrayResourceValue)) {
                    Bridge.getLog().warning(LayoutLog.TAG_UNSUPPORTED,
                            "Obtaining resource arrays via getTextArray, getStringArray or getIntArray is not fully supported in this version of the IDE.",
                            null);
                }
                return resValue;
            }
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return null;
!!!35234487.java!!!	resolveReference(inout resources : Resources, inout ref : String, inout forceFrameworkOnly : boolean) : String
        if (ref.startsWith(SdkConstants.PREFIX_RESOURCE_REF) || ref.startsWith
                (SdkConstants.PREFIX_THEME_REF)) {
            ResourceValue rv =
                    resources.mContext.getRenderResources().findResValue(ref, forceFrameworkOnly);
            rv = resources.mContext.getRenderResources().resolveResValue(rv);
            if (rv != null) {
                return rv.getValue();
            } else {
                Bridge.getLog().error(LayoutLog.TAG_RESOURCES_RESOLVE,
                        "Unable to resolve resource " + ref, null);
            }
        }
        // Not a reference.
        return ref;
!!!35234615.java!!!	getLayout(inout resources : Resources, in id : int) : XmlResourceParser
        Pair<String, ResourceValue> v = getResourceValue(resources, id, mPlatformResourceFlag);

        if (v != null) {
            ResourceValue value = v.getSecond();
            XmlPullParser parser = null;

            try {
                // check if the current parser can provide us with a custom parser.
                if (!mPlatformResourceFlag[0]) {
                    parser = resources.mLayoutlibCallback.getParser(value);
                }

                // create a new one manually if needed.
                if (parser == null) {
                    File xml = new File(value.getValue());
                    if (xml.isFile()) {
                        // we need to create a pull parser around the layout XML file, and then
                        // give that to our XmlBlockParser
                        parser = ParserFactory.create(xml, true);
                    }
                }

                if (parser != null) {
                    return new BridgeXmlBlockParser(parser, resources.mContext,
                            mPlatformResourceFlag[0]);
                }
            } catch (XmlPullParserException e) {
                Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                        "Failed to configure parser for " + value.getValue(), e, null /*data*/);
                // we'll return null below.
            } catch (FileNotFoundException e) {
                // this shouldn't happen since we check above.
            }

        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return null;
!!!35234743.java!!!	getAnimation(inout resources : Resources, in id : int) : XmlResourceParser
        Pair<String, ResourceValue> v = getResourceValue(resources, id, mPlatformResourceFlag);

        if (v != null) {
            ResourceValue value = v.getSecond();
            XmlPullParser parser;

            try {
                File xml = new File(value.getValue());
                if (xml.isFile()) {
                    // we need to create a pull parser around the layout XML file, and then
                    // give that to our XmlBlockParser
                    parser = ParserFactory.create(xml);

                    return new BridgeXmlBlockParser(parser, resources.mContext,
                            mPlatformResourceFlag[0]);
                }
            } catch (XmlPullParserException e) {
                Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                        "Failed to configure parser for " + value.getValue(), e, null /*data*/);
                // we'll return null below.
            } catch (FileNotFoundException e) {
                // this shouldn't happen since we check above.
            }

        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return null;
!!!35234871.java!!!	obtainAttributes(inout resources : Resources, inout set : AttributeSet, inout attrs : int) : TypedArray
        return resources.mContext.obtainStyledAttributes(set, attrs);
!!!35234999.java!!!	obtainAttributes(inout resources : Resources, inout theme : Resources::Theme, inout set : AttributeSet, inout attrs : int) : TypedArray
        return Resources.obtainAttributes_Original(resources, theme, set, attrs);
!!!35235127.java!!!	obtainTypedArray(inout resources : Resources, in id : int) : TypedArray
        throw new UnsupportedOperationException();
!!!35235255.java!!!	getDimension(inout resources : Resources, in id : int) : float
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            ResourceValue resValue = value.getSecond();

            assert resValue != null;
            if (resValue != null) {
                String v = resValue.getValue();
                if (v != null) {
                    if (v.equals(BridgeConstants.MATCH_PARENT) ||
                            v.equals(BridgeConstants.FILL_PARENT)) {
                        return LayoutParams.MATCH_PARENT;
                    } else if (v.equals(BridgeConstants.WRAP_CONTENT)) {
                        return LayoutParams.WRAP_CONTENT;
                    }
                    TypedValue tmpValue = new TypedValue();
                    if (ResourceHelper.parseFloatAttribute(
                            value.getFirst(), v, tmpValue, true /*requireUnit*/) &&
                            tmpValue.type == TypedValue.TYPE_DIMENSION) {
                        return tmpValue.getDimension(resources.getDisplayMetrics());
                    }
                }
            }
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return 0;
!!!35235383.java!!!	getDimensionPixelOffset(inout resources : Resources, in id : int) : int
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            ResourceValue resValue = value.getSecond();

            assert resValue != null;
            if (resValue != null) {
                String v = resValue.getValue();
                if (v != null) {
                    TypedValue tmpValue = new TypedValue();
                    if (ResourceHelper.parseFloatAttribute(
                            value.getFirst(), v, tmpValue, true /*requireUnit*/) &&
                            tmpValue.type == TypedValue.TYPE_DIMENSION) {
                        return TypedValue.complexToDimensionPixelOffset(tmpValue.data,
                                resources.getDisplayMetrics());
                    }
                }
            }
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return 0;
!!!35235511.java!!!	getDimensionPixelSize(inout resources : Resources, in id : int) : int
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            ResourceValue resValue = value.getSecond();

            assert resValue != null;
            if (resValue != null) {
                String v = resValue.getValue();
                if (v != null) {
                    TypedValue tmpValue = new TypedValue();
                    if (ResourceHelper.parseFloatAttribute(
                            value.getFirst(), v, tmpValue, true /*requireUnit*/) &&
                            tmpValue.type == TypedValue.TYPE_DIMENSION) {
                        return TypedValue.complexToDimensionPixelSize(tmpValue.data,
                                resources.getDisplayMetrics());
                    }
                }
            }
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return 0;
!!!35235639.java!!!	getInteger(inout resources : Resources, in id : int) : int
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            ResourceValue resValue = value.getSecond();

            assert resValue != null;
            if (resValue != null) {
                String v = resValue.getValue();
                if (v != null) {
                    try {
                        return getInt(v);
                    } catch (NumberFormatException e) {
                        // return exception below
                    }
                }
            }
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return 0;
!!!35235767.java!!!	getBoolean(inout resources : Resources, in id : int) : boolean
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            ResourceValue resValue = value.getSecond();

            if (resValue != null) {
                String v = resValue.getValue();
                if (v != null) {
                    return Boolean.parseBoolean(v);
                }
            }
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return false;
!!!35235895.java!!!	getResourceEntryName(inout resources : Resources, in resid : int) : String
        Pair<ResourceType, String> resourceInfo = getResourceInfo(resources, resid, new boolean[1]);
        if (resourceInfo != null) {
            return resourceInfo.getSecond();
        }
        throwException(resid, null);
        return null;

!!!35236023.java!!!	getResourceName(inout resources : Resources, in resid : int) : String
        boolean[] platformOut = new boolean[1];
        Pair<ResourceType, String> resourceInfo = getResourceInfo(resources, resid, platformOut);
        String packageName;
        if (resourceInfo != null) {
            if (platformOut[0]) {
                packageName = SdkConstants.ANDROID_NS_NAME;
            } else {
                packageName = resources.mContext.getPackageName();
                packageName = packageName == null ? SdkConstants.APP_PREFIX : packageName;
            }
            return packageName + ':' + resourceInfo.getFirst().getName() + '/' +
                    resourceInfo.getSecond();
        }
        throwException(resid, null);
        return null;
!!!35236151.java!!!	getResourcePackageName(inout resources : Resources, in resid : int) : String
        boolean[] platformOut = new boolean[1];
        Pair<ResourceType, String> resourceInfo = getResourceInfo(resources, resid, platformOut);
        if (resourceInfo != null) {
            if (platformOut[0]) {
                return SdkConstants.ANDROID_NS_NAME;
            }
            String packageName = resources.mContext.getPackageName();
            return packageName == null ? SdkConstants.APP_PREFIX : packageName;
        }
        throwException(resid, null);
        return null;
!!!35236279.java!!!	getResourceTypeName(inout resources : Resources, in resid : int) : String
        Pair<ResourceType, String> resourceInfo = getResourceInfo(resources, resid, new boolean[1]);
        if (resourceInfo != null) {
            return resourceInfo.getFirst().getName();
        }
        throwException(resid, null);
        return null;
!!!35236407.java!!!	getString(inout resources : Resources, in id : int, inout  : Object...formatArgs) : String
        String s = getString(resources, id);
        if (s != null) {
            return String.format(s, formatArgs);

        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return null;
!!!35236535.java!!!	getString(inout resources : Resources, in id : int) : String
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null && value.getSecond().getValue() != null) {
            return value.getSecond().getValue();
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return null;
!!!35236663.java!!!	getValue(inout resources : Resources, in id : int, inout outValue : TypedValue, inout resolveRefs : boolean) : void
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            ResourceValue resVal = value.getSecond();
            String v = resVal.getValue();

            if (v != null) {
                if (ResourceHelper.parseFloatAttribute(value.getFirst(), v, outValue,
                        false /*requireUnit*/)) {
                    return;
                }
                if (resVal instanceof DensityBasedResourceValue) {
                    outValue.density =
                            ((DensityBasedResourceValue) resVal).getResourceDensity().getDpiValue();
                }

                // else it's a string
                outValue.type = TypedValue.TYPE_STRING;
                outValue.string = v;
                return;
            }
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);
!!!35236791.java!!!	getValue(inout resources : Resources, inout name : String, inout outValue : TypedValue, inout resolveRefs : boolean) : void
        throw new UnsupportedOperationException();
!!!35236919.java!!!	getXml(inout resources : Resources, in id : int) : XmlResourceParser
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            String v = value.getSecond().getValue();

            if (v != null) {
                // check this is a file
                File f = new File(v);
                if (f.isFile()) {
                    try {
                        XmlPullParser parser = ParserFactory.create(f);

                        return new BridgeXmlBlockParser(parser, resources.mContext,
                                mPlatformResourceFlag[0]);
                    } catch (XmlPullParserException e) {
                        NotFoundException newE = new NotFoundException();
                        newE.initCause(e);
                        throw newE;
                    } catch (FileNotFoundException e) {
                        NotFoundException newE = new NotFoundException();
                        newE.initCause(e);
                        throw newE;
                    }
                }
            }
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return null;
!!!35237047.java!!!	loadXmlResourceParser(inout resources : Resources, in id : int, inout type : String) : XmlResourceParser
        return resources.loadXmlResourceParser_Original(id, type);
!!!35237175.java!!!	loadXmlResourceParser(inout resources : Resources, inout file : String, in id : int, in assetCookie : int, inout type : String) : XmlResourceParser
        // even though we know the XML file to load directly, we still need to resolve the
        // id so that we can know if it's a platform or project resource.
        // (mPlatformResouceFlag will get the result and will be used later).
        getResourceValue(resources, id, mPlatformResourceFlag);

        File f = new File(file);
        try {
            XmlPullParser parser = ParserFactory.create(f);

            return new BridgeXmlBlockParser(parser, resources.mContext, mPlatformResourceFlag[0]);
        } catch (XmlPullParserException e) {
            NotFoundException newE = new NotFoundException();
            newE.initCause(e);
            throw newE;
        } catch (FileNotFoundException e) {
            NotFoundException newE = new NotFoundException();
            newE.initCause(e);
            throw newE;
        }
!!!35237303.java!!!	openRawResource(inout resources : Resources, in id : int) : InputStream
        Pair<String, ResourceValue> value = getResourceValue(resources, id, mPlatformResourceFlag);

        if (value != null) {
            String path = value.getSecond().getValue();

            if (path != null) {
                // check this is a file
                File f = new File(path);
                if (f.isFile()) {
                    try {
                        // if it's a nine-patch return a custom input stream so that
                        // other methods (mainly bitmap factory) can detect it's a 9-patch
                        // and actually load it as a 9-patch instead of a normal bitmap
                        if (path.toLowerCase().endsWith(NinePatch.EXTENSION_9PATCH)) {
                            return new NinePatchInputStream(f);
                        }
                        return new FileInputStream(f);
                    } catch (FileNotFoundException e) {
                        NotFoundException newE = new NotFoundException();
                        newE.initCause(e);
                        throw newE;
                    }
                }
            }
        }

        // id was not found or not resolved. Throw a NotFoundException.
        throwException(resources, id);

        // this is not used since the method above always throws
        return null;
!!!35237431.java!!!	openRawResource(inout resources : Resources, in id : int, inout value : TypedValue) : InputStream
        getValue(resources, id, value, true);

        String path = value.string.toString();

        File f = new File(path);
        if (f.isFile()) {
            try {
                // if it's a nine-patch return a custom input stream so that
                // other methods (mainly bitmap factory) can detect it's a 9-patch
                // and actually load it as a 9-patch instead of a normal bitmap
                if (path.toLowerCase().endsWith(NinePatch.EXTENSION_9PATCH)) {
                    return new NinePatchInputStream(f);
                }
                return new FileInputStream(f);
            } catch (FileNotFoundException e) {
                NotFoundException exception = new NotFoundException();
                exception.initCause(e);
                throw exception;
            }
        }

        throw new NotFoundException();
!!!35237559.java!!!	openRawResourceFd(inout resources : Resources, in id : int) : AssetFileDescriptor
        throw new UnsupportedOperationException();
!!!35237687.java!!!	throwException(inout resources : Resources, in id : int) : void
        throwException(id, getResourceInfo(resources, id, new boolean[1]));
!!!35237815.java!!!	throwException(in id : int, inout resourceInfo : Pair<ResourceType, String>) : void
        String message;
        if (resourceInfo != null) {
            message = String.format(
                    "Could not find %1$s resource matching value 0x%2$X (resolved name: %3$s) in current configuration.",
                    resourceInfo.getFirst(), id, resourceInfo.getSecond());
        } else {
            message = String.format("Could not resolve resource value: 0x%1$X.", id);
        }

        throw new NotFoundException(message);
!!!35237943.java!!!	getInt(inout v : String) : int
        int radix = 10;
        if (v.startsWith("0x")) {
            v = v.substring(2);
            radix = 16;
        } else if (v.startsWith("0")) {
            radix = 8;
        }
        return Integer.parseInt(v, radix);
