class BitmapShaderPaint
!!!35249335.java!!!	BitmapShaderPaint(inout image : BufferedImage, inout tileModeX : Shader::TileMode, inout tileModeY : Shader::TileMode)
            mImage = image;
            mTileModeX = tileModeX;
            mTileModeY = tileModeY;
!!!35249463.java!!!	createContext(inout colorModel : ColorModel, inout deviceBounds : Rectangle, inout userBounds : Rectangle2D, inout xform : AffineTransform, inout hints : RenderingHints) : PaintContext
            AffineTransform canvasMatrix;
            try {
                canvasMatrix = xform.createInverse();
            } catch (NoninvertibleTransformException e) {
                Bridge.getLog().fidelityWarning(LayoutLog.TAG_MATRIX_INVERSE,
                        "Unable to inverse matrix in BitmapShader", e, null /*data*/);
                canvasMatrix = new AffineTransform();
            }

            AffineTransform localMatrix = getLocalMatrix();
            try {
                localMatrix = localMatrix.createInverse();
            } catch (NoninvertibleTransformException e) {
                Bridge.getLog().fidelityWarning(LayoutLog.TAG_MATRIX_INVERSE,
                        "Unable to inverse matrix in BitmapShader", e, null /*data*/);
                localMatrix = new AffineTransform();
            }

            if (!colorModel.isCompatibleRaster(mImage.getRaster())) {
                // Fallback to the default ARGB color model
                colorModel = ColorModel.getRGBdefault();
            }

            return new BitmapShaderContext(canvasMatrix, localMatrix, colorModel);
!!!35250103.java!!!	getColor(in fx : float, in fy : float) : int
            int x = getCoordinate(Math.round(fx), mImage.getWidth(), mTileModeX);
            int y = getCoordinate(Math.round(fy), mImage.getHeight(), mTileModeY);

            return mImage.getRGB(x, y);
!!!35250231.java!!!	getCoordinate(in i : int, in size : int, inout mode : Shader::TileMode) : int
            if (i < 0) {
                switch (mode) {
                    case CLAMP:
                        i = 0;
                        break;
                    case REPEAT:
                        i = size - 1 - (-i % size);
                        break;
                    case MIRROR:
                        // this is the same as the positive side, just make the value positive
                        // first.
                        i = -i;
                        int count = i / size;
                        i = i % size;

                        if ((count % 2) == 1) {
                            i = size - 1 - i;
                        }
                        break;
                }
            } else if (i >= size) {
                switch (mode) {
                    case CLAMP:
                        i = size - 1;
                        break;
                    case REPEAT:
                        i = i % size;
                        break;
                    case MIRROR:
                        int count = i / size;
                        i = i % size;

                        if ((count % 2) == 1) {
                            i = size - 1 - i;
                        }
                        break;
                }
            }

            return i;
!!!35250359.java!!!	getTransparency() : int
            return java.awt.Paint.TRANSLUCENT;
