class Canvas_Delegate
!!!35253559.java!!!	getDelegate(inout canvas : Canvas) : Canvas_Delegate
        return sManager.getDelegate(canvas.getNativeCanvasWrapper());
!!!35253687.java!!!	getDelegate(in native_canvas : long) : Canvas_Delegate
        return sManager.getDelegate(native_canvas);
!!!35253815.java!!!	getSnapshot() : GcSnapshot
        return mSnapshot;
!!!35253943.java!!!	getDrawFilter() : DrawFilter_Delegate
        return mDrawFilter;
!!!35254071.java!!!	freeCaches() : void
        // nothing to be done here.
!!!35254199.java!!!	freeTextLayoutCaches() : void
        // nothing to be done here yet.
!!!35254327.java!!!	initRaster(inout bitmap : Bitmap) : long
        long nativeBitmapOrZero = 0;
        if (bitmap != null) {
            nativeBitmapOrZero = bitmap.refSkPixelRef();
        }
        if (nativeBitmapOrZero > 0) {
            // get the Bitmap from the int
            Bitmap_Delegate bitmapDelegate = Bitmap_Delegate.getDelegate(nativeBitmapOrZero);

            // create a new Canvas_Delegate with the given bitmap and return its new native int.
            Canvas_Delegate newDelegate = new Canvas_Delegate(bitmapDelegate);

            return sManager.addNewDelegate(newDelegate);
        }

        // create a new Canvas_Delegate and return its new native int.
        Canvas_Delegate newDelegate = new Canvas_Delegate();

        return sManager.addNewDelegate(newDelegate);
!!!35254455.java!!!	native_setBitmap(in canvas : long, inout bitmap : Bitmap) : void
        Canvas_Delegate canvasDelegate = sManager.getDelegate(canvas);
        Bitmap_Delegate bitmapDelegate = Bitmap_Delegate.getDelegate(bitmap);
        if (canvasDelegate == null || bitmapDelegate==null) {
            return;
        }
        canvasDelegate.mBitmap = bitmapDelegate;
        canvasDelegate.mSnapshot = GcSnapshot.createDefaultSnapshot(bitmapDelegate);
!!!35254583.java!!!	native_isOpaque(in nativeCanvas : long) : boolean
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return false;
        }

        return canvasDelegate.mBitmap.getConfig() == Config.RGB_565;
!!!35254839.java!!!	native_getWidth(in nativeCanvas : long) : int
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return 0;
        }

        return canvasDelegate.mBitmap.getImage().getWidth();
!!!35254967.java!!!	native_getHeight(in nativeCanvas : long) : int
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return 0;
        }

        return canvasDelegate.mBitmap.getImage().getHeight();
!!!35255095.java!!!	native_save(in nativeCanvas : long, in saveFlags : int) : int
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return 0;
        }

        return canvasDelegate.save(saveFlags);
!!!35255223.java!!!	native_saveLayer(in nativeCanvas : long, in l : float, in t : float, in r : float, in b : float, in paint : long, in layerFlags : int) : int
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return 0;
        }

        Paint_Delegate paintDelegate = Paint_Delegate.getDelegate(paint);
        if (paintDelegate == null) {
            return 0;
        }

        return canvasDelegate.saveLayer(new RectF(l, t, r, b),
                paintDelegate, layerFlags);
!!!35255351.java!!!	native_saveLayerAlpha(in nativeCanvas : long, in l : float, in t : float, in r : float, in b : float, in alpha : int, in layerFlags : int) : int
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return 0;
        }

        return canvasDelegate.saveLayerAlpha(new RectF(l, t, r, b), alpha, layerFlags);
!!!35255479.java!!!	native_restore(in nativeCanvas : long, inout throwOnUnderflow : boolean) : void
        // FIXME: implement throwOnUnderflow.
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return;
        }

        canvasDelegate.restore();
!!!35255607.java!!!	native_restoreToCount(in nativeCanvas : long, in saveCount : int, inout throwOnUnderflow : boolean) : void
        // FIXME: implement throwOnUnderflow.
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return;
        }

        canvasDelegate.restoreTo(saveCount);
!!!35255735.java!!!	native_getSaveCount(in nativeCanvas : long) : int
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return 0;
        }

        return canvasDelegate.getSnapshot().size();
!!!35255863.java!!!	native_translate(in nativeCanvas : long, in dx : float, in dy : float) : void
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return;
        }

        canvasDelegate.getSnapshot().translate(dx, dy);
!!!35255991.java!!!	native_scale(in nativeCanvas : long, in sx : float, in sy : float) : void
            // get the delegate from the native int.
            Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
            if (canvasDelegate == null) {
                return;
            }

            canvasDelegate.getSnapshot().scale(sx, sy);
!!!35256119.java!!!	native_rotate(in nativeCanvas : long, in degrees : float) : void
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return;
        }

        canvasDelegate.getSnapshot().rotate(Math.toRadians(degrees));
!!!35256247.java!!!	native_skew(in nativeCanvas : long, in kx : float, in ky : float) : void
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return;
        }

        // get the current top graphics2D object.
        GcSnapshot g = canvasDelegate.getSnapshot();

        // get its current matrix
        AffineTransform currentTx = g.getTransform();
        // get the AffineTransform for the given skew.
        float[] mtx = Matrix_Delegate.getSkew(kx, ky);
        AffineTransform matrixTx = Matrix_Delegate.getAffineTransform(mtx);

        // combine them so that the given matrix is applied after.
        currentTx.preConcatenate(matrixTx);

        // give it to the graphics2D as a new matrix replacing all previous transform
        g.setTransform(currentTx);
!!!35256375.java!!!	native_concat(in nCanvas : long, in nMatrix : long) : void
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nCanvas);
        if (canvasDelegate == null) {
            return;
        }

        Matrix_Delegate matrixDelegate = Matrix_Delegate.getDelegate(nMatrix);
        if (matrixDelegate == null) {
            return;
        }

        // get the current top graphics2D object.
        GcSnapshot snapshot = canvasDelegate.getSnapshot();

        // get its current matrix
        AffineTransform currentTx = snapshot.getTransform();
        // get the AffineTransform of the given matrix
        AffineTransform matrixTx = matrixDelegate.getAffineTransform();

        // combine them so that the given matrix is applied after.
        currentTx.concatenate(matrixTx);

        // give it to the graphics2D as a new matrix replacing all previous transform
        snapshot.setTransform(currentTx);
!!!35256503.java!!!	native_setMatrix(in nCanvas : long, in nMatrix : long) : void
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nCanvas);
        if (canvasDelegate == null) {
            return;
        }

        Matrix_Delegate matrixDelegate = Matrix_Delegate.getDelegate(nMatrix);
        if (matrixDelegate == null) {
            return;
        }

        // get the current top graphics2D object.
        GcSnapshot snapshot = canvasDelegate.getSnapshot();

        // get the AffineTransform of the given matrix
        AffineTransform matrixTx = matrixDelegate.getAffineTransform();

        // give it to the graphics2D as a new matrix replacing all previous transform
        snapshot.setTransform(matrixTx);

        if (matrixDelegate.hasPerspective()) {
            assert false;
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_MATRIX_AFFINE,
                    "android.graphics.Canvas#setMatrix(android.graphics.Matrix) only " +
                    "supports affine transformations.", null, null /*data*/);
        }
!!!35256631.java!!!	native_clipRect(in nCanvas : long, in left : float, in top : float, in right : float, in bottom : float, in regionOp : int) : boolean
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nCanvas);
        if (canvasDelegate == null) {
            return false;
        }

        return canvasDelegate.clipRect(left, top, right, bottom, regionOp);
!!!35256759.java!!!	native_clipPath(in nativeCanvas : long, in nativePath : long, in regionOp : int) : boolean
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return true;
        }

        Path_Delegate pathDelegate = Path_Delegate.getDelegate(nativePath);
        if (pathDelegate == null) {
            return true;
        }

        return canvasDelegate.mSnapshot.clip(pathDelegate.getJavaShape(), regionOp);
!!!35256887.java!!!	native_clipRegion(in nativeCanvas : long, in nativeRegion : long, in regionOp : int) : boolean
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return true;
        }

        Region_Delegate region = Region_Delegate.getDelegate(nativeRegion);
        if (region == null) {
            return true;
        }

        return canvasDelegate.mSnapshot.clip(region.getJavaArea(), regionOp);
!!!35257015.java!!!	nativeSetDrawFilter(in nativeCanvas : long, in nativeFilter : long) : void
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return;
        }

        canvasDelegate.mDrawFilter = DrawFilter_Delegate.getDelegate(nativeFilter);

        if (canvasDelegate.mDrawFilter != null && !canvasDelegate.mDrawFilter.isSupported()) {
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_DRAWFILTER,
                    canvasDelegate.mDrawFilter.getSupportMessage(), null, null /*data*/);
        }
!!!35257143.java!!!	native_getClipBounds(in nativeCanvas : long, inout bounds : Rect) : boolean
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return false;
        }

        Rectangle rect = canvasDelegate.getSnapshot().getClip().getBounds();
        if (rect != null && !rect.isEmpty()) {
            bounds.left = rect.x;
            bounds.top = rect.y;
            bounds.right = rect.x + rect.width;
            bounds.bottom = rect.y + rect.height;
            return true;
        }

        return false;
!!!35257271.java!!!	native_getCTM(in canvas : long, in matrix : long) : void
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(canvas);
        if (canvasDelegate == null) {
            return;
        }

        Matrix_Delegate matrixDelegate = Matrix_Delegate.getDelegate(matrix);
        if (matrixDelegate == null) {
            return;
        }

        AffineTransform transform = canvasDelegate.getSnapshot().getTransform();
        matrixDelegate.set(Matrix_Delegate.makeValues(transform));
!!!35257399.java!!!	native_quickReject(in nativeCanvas : long, in path : long) : boolean
        // FIXME properly implement quickReject
        return false;
!!!35257527.java!!!	native_quickReject(in nativeCanvas : long, in left : float, in top : float, in right : float, in bottom : float) : boolean
        // FIXME properly implement quickReject
        return false;
!!!35257655.java!!!	native_drawColor(in nativeCanvas : long, in color : int, in mode : int) : void
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return;
        }

        final int w = canvasDelegate.mBitmap.getImage().getWidth();
        final int h = canvasDelegate.mBitmap.getImage().getHeight();
        draw(nativeCanvas, new GcSnapshot.Drawable() {

            @Override
            public void draw(Graphics2D graphics, Paint_Delegate paint) {
                // reset its transform just in case
                graphics.setTransform(new AffineTransform());

                // set the color
                graphics.setColor(new Color(color, true /*alpha*/));

                Composite composite = PorterDuffUtility.getComposite(
                        PorterDuffUtility.getPorterDuffMode(mode), 0xFF);
                if (composite != null) {
                    graphics.setComposite(composite);
                }

                graphics.fillRect(0, 0, w, h);
            }
        });
!!!35257783.java!!!	native_drawPaint(in nativeCanvas : long, in paint : long) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Canvas.drawPaint is not supported.", null, null /*data*/);
!!!35257911.java!!!	native_drawPoint(in nativeCanvas : long, in x : float, in y : float, in nativePaint : long) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Canvas.drawPoint is not supported.", null, null /*data*/);
!!!35258039.java!!!	native_drawPoints(in nativeCanvas : long, inout pts : float, in offset : int, in count : int, in nativePaint : long) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Canvas.drawPoint is not supported.", null, null /*data*/);
!!!35258167.java!!!	native_drawLine(in nativeCanvas : long, in startX : float, in startY : float, in stopX : float, in stopY : float, in paint : long) : void
        draw(nativeCanvas, paint, false /*compositeOnly*/, false /*forceSrcMode*/,
                new GcSnapshot.Drawable() {
                    @Override
                    public void draw(Graphics2D graphics, Paint_Delegate paintDelegate) {
                        graphics.drawLine((int)startX, (int)startY, (int)stopX, (int)stopY);
                    }
        });
!!!35258295.java!!!	native_drawLines(in nativeCanvas : long, in pts : float, in offset : int, in count : int, in nativePaint : long) : void
        draw(nativeCanvas, nativePaint, false /*compositeOnly*/,
                false /*forceSrcMode*/, new GcSnapshot.Drawable() {
                    @Override
                    public void draw(Graphics2D graphics, Paint_Delegate paintDelegate) {
                        for (int i = 0; i < count; i += 4) {
                            graphics.drawLine((int) pts[i + offset], (int) pts[i + offset + 1],
                                    (int) pts[i + offset + 2], (int) pts[i + offset + 3]);
                        }
                    }
                });
!!!35258423.java!!!	native_drawRect(in nativeCanvas : long, in left : float, in top : float, in right : float, in bottom : float, in paint : long) : void

        draw(nativeCanvas, paint, false /*compositeOnly*/, false /*forceSrcMode*/,
                new GcSnapshot.Drawable() {
                    @Override
                    public void draw(Graphics2D graphics, Paint_Delegate paintDelegate) {
                        int style = paintDelegate.getStyle();

                        // draw
                        if (style == Paint.Style.FILL.nativeInt ||
                                style == Paint.Style.FILL_AND_STROKE.nativeInt) {
                            graphics.fillRect((int)left, (int)top,
                                    (int)(right-left), (int)(bottom-top));
                        }

                        if (style == Paint.Style.STROKE.nativeInt ||
                                style == Paint.Style.FILL_AND_STROKE.nativeInt) {
                            graphics.drawRect((int)left, (int)top,
                                    (int)(right-left), (int)(bottom-top));
                        }
                    }
        });
!!!35258551.java!!!	native_drawOval(in nativeCanvas : long, in left : float, in top : float, in right : float, in bottom : float, in paint : long) : void
        if (right > left && bottom > top) {
            draw(nativeCanvas, paint, false /*compositeOnly*/, false /*forceSrcMode*/,
                    new GcSnapshot.Drawable() {
                        @Override
                        public void draw(Graphics2D graphics, Paint_Delegate paintDelegate) {
                            int style = paintDelegate.getStyle();

                            // draw
                            if (style == Paint.Style.FILL.nativeInt ||
                                    style == Paint.Style.FILL_AND_STROKE.nativeInt) {
                                graphics.fillOval((int)left, (int)top,
                                        (int)(right - left), (int)(bottom - top));
                            }

                            if (style == Paint.Style.STROKE.nativeInt ||
                                    style == Paint.Style.FILL_AND_STROKE.nativeInt) {
                                graphics.drawOval((int)left, (int)top,
                                        (int)(right - left), (int)(bottom - top));
                            }
                        }
            });
        }
!!!35258679.java!!!	native_drawCircle(in nativeCanvas : long, in cx : float, in cy : float, in radius : float, in paint : long) : void
        native_drawOval(nativeCanvas,
                cx - radius, cy - radius, cx + radius, cy + radius,
                paint);
!!!35258807.java!!!	native_drawArc(in nativeCanvas : long, in left : float, in top : float, in right : float, in bottom : float, in startAngle : float, in sweep : float, in useCenter : boolean, in paint : long) : void
        if (right > left && bottom > top) {
            draw(nativeCanvas, paint, false /*compositeOnly*/, false /*forceSrcMode*/,
                    new GcSnapshot.Drawable() {
                        @Override
                        public void draw(Graphics2D graphics, Paint_Delegate paintDelegate) {
                            int style = paintDelegate.getStyle();

                            Arc2D.Float arc = new Arc2D.Float(
                                    left, top, right - left, bottom - top,
                                    -startAngle, -sweep,
                                    useCenter ? Arc2D.PIE : Arc2D.OPEN);

                            // draw
                            if (style == Paint.Style.FILL.nativeInt ||
                                    style == Paint.Style.FILL_AND_STROKE.nativeInt) {
                                graphics.fill(arc);
                            }

                            if (style == Paint.Style.STROKE.nativeInt ||
                                    style == Paint.Style.FILL_AND_STROKE.nativeInt) {
                                graphics.draw(arc);
                            }
                        }
            });
        }
!!!35258935.java!!!	native_drawRoundRect(in nativeCanvas : long, in left : float, in top : float, in right : float, in bottom : float, in rx : float, in ry : float, in paint : long) : void
        draw(nativeCanvas, paint, false /*compositeOnly*/, false /*forceSrcMode*/,
                new GcSnapshot.Drawable() {
                    @Override
                    public void draw(Graphics2D graphics, Paint_Delegate paintDelegate) {
                        int style = paintDelegate.getStyle();

                        // draw
                        if (style == Paint.Style.FILL.nativeInt ||
                                style == Paint.Style.FILL_AND_STROKE.nativeInt) {
                            graphics.fillRoundRect(
                                    (int)left, (int)top,
                                    (int)(right - left), (int)(bottom - top),
                                    2 * (int)rx, 2 * (int)ry);
                        }

                        if (style == Paint.Style.STROKE.nativeInt ||
                                style == Paint.Style.FILL_AND_STROKE.nativeInt) {
                            graphics.drawRoundRect(
                                    (int)left, (int)top,
                                    (int)(right - left), (int)(bottom - top),
                                    2 * (int)rx, 2 * (int)ry);
                        }
                    }
        });
!!!35259063.java!!!	native_drawPath(in nativeCanvas : long, in path : long, in paint : long) : void
        final Path_Delegate pathDelegate = Path_Delegate.getDelegate(path);
        if (pathDelegate == null) {
            return;
        }

        draw(nativeCanvas, paint, false /*compositeOnly*/, false /*forceSrcMode*/,
                new GcSnapshot.Drawable() {
                    @Override
                    public void draw(Graphics2D graphics, Paint_Delegate paintDelegate) {
                        Shape shape = pathDelegate.getJavaShape();
                        Rectangle2D bounds = shape.getBounds2D();
                        if (bounds.isEmpty()) {
                            // Apple JRE 1.6 doesn't like drawing empty shapes.
                            // http://b.android.com/178278

                            if (pathDelegate.isEmpty()) {
                                // This means that the path doesn't have any lines or curves so
                                // nothing to draw.
                                return;
                            }

                            // The stroke width is not consider for the size of the bounds so,
                            // for example, a horizontal line, would be considered as an empty
                            // rectangle.
                            // If the strokeWidth is not 0, we use it to consider the size of the
                            // path as well.
                            float strokeWidth = paintDelegate.getStrokeWidth();
                            if (strokeWidth <= 0.0f) {
                                return;
                            }
                            bounds.setRect(bounds.getX(), bounds.getY(),
                                    Math.max(strokeWidth, bounds.getWidth()),
                                    Math.max(strokeWidth, bounds.getHeight()));
                        }

                        int style = paintDelegate.getStyle();

                        if (style == Paint.Style.FILL.nativeInt ||
                                style == Paint.Style.FILL_AND_STROKE.nativeInt) {
                            graphics.fill(shape);
                        }

                        if (style == Paint.Style.STROKE.nativeInt ||
                                style == Paint.Style.FILL_AND_STROKE.nativeInt) {
                            graphics.draw(shape);
                        }
                    }
        });
!!!35259191.java!!!	native_drawRegion(in nativeCanvas : long, in nativeRegion : long, in nativePaint : long) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Some canvas paths may not be drawn", null, null);
!!!35259319.java!!!	native_drawNinePatch(inout thisCanvas : Canvas, in nativeCanvas : long, in nativeBitmap : long, in ninePatch : long, in dstLeft : float, in dstTop : float, in dstRight : float, in dstBottom : float, in nativePaintOrZero : long, in screenDensity : int, in bitmapDensity : int) : void

        // get the delegate from the native int.
        final Bitmap_Delegate bitmapDelegate = Bitmap_Delegate.getDelegate(nativeBitmap);
        if (bitmapDelegate == null) {
            return;
        }

        byte[] c = NinePatch_Delegate.getChunk(ninePatch);
        if (c == null) {
            // not a 9-patch?
            BufferedImage image = bitmapDelegate.getImage();
            drawBitmap(nativeCanvas, bitmapDelegate, nativePaintOrZero, 0, 0, image.getWidth(),
                    image.getHeight(), (int) dstLeft, (int) dstTop, (int) dstRight,
                    (int) dstBottom);
            return;
        }

        final NinePatchChunk chunkObject = NinePatch_Delegate.getChunk(c);
        assert chunkObject != null;
        if (chunkObject == null) {
            return;
        }

        Canvas_Delegate canvasDelegate = Canvas_Delegate.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return;
        }

        // this one can be null
        Paint_Delegate paintDelegate = Paint_Delegate.getDelegate(nativePaintOrZero);

        canvasDelegate.getSnapshot().draw(new GcSnapshot.Drawable() {
            @Override
            public void draw(Graphics2D graphics, Paint_Delegate paint) {
                chunkObject.draw(bitmapDelegate.getImage(), graphics, (int) dstLeft, (int) dstTop,
                        (int) (dstRight - dstLeft), (int) (dstBottom - dstTop), screenDensity,
                        bitmapDensity);
            }
        }, paintDelegate, true, false);

!!!35259447.java!!!	native_drawBitmap(inout thisCanvas : Canvas, in nativeCanvas : long, inout bitmap : Bitmap, in left : float, in top : float, in nativePaintOrZero : long, in canvasDensity : int, in screenDensity : int, in bitmapDensity : int) : void
        // get the delegate from the native int.
        Bitmap_Delegate bitmapDelegate = Bitmap_Delegate.getDelegate(bitmap);
        if (bitmapDelegate == null) {
            return;
        }

        BufferedImage image = bitmapDelegate.getImage();
        float right = left + image.getWidth();
        float bottom = top + image.getHeight();

        drawBitmap(nativeCanvas, bitmapDelegate, nativePaintOrZero,
                0, 0, image.getWidth(), image.getHeight(),
                (int)left, (int)top, (int)right, (int)bottom);
!!!35259575.java!!!	native_drawBitmap(inout thisCanvas : Canvas, in nativeCanvas : long, inout bitmap : Bitmap, in srcLeft : float, in srcTop : float, in srcRight : float, in srcBottom : float, in dstLeft : float, in dstTop : float, in dstRight : float, in dstBottom : float, in nativePaintOrZero : long, in screenDensity : int, in bitmapDensity : int) : void
        // get the delegate from the native int.
        Bitmap_Delegate bitmapDelegate = Bitmap_Delegate.getDelegate(bitmap);
        if (bitmapDelegate == null) {
            return;
        }

        drawBitmap(nativeCanvas, bitmapDelegate, nativePaintOrZero,
                (int)srcLeft, (int)srcTop, (int)srcRight, (int)srcBottom,
                (int)dstLeft, (int)dstTop, (int)dstRight, (int)dstBottom);
!!!35259703.java!!!	native_drawBitmap(in nativeCanvas : long, inout colors : int, in offset : int, in stride : int, in x : float, in y : float, in width : int, in height : int, inout hasAlpha : boolean, in nativePaintOrZero : long) : void
        // create a temp BufferedImage containing the content.
        final BufferedImage image = new BufferedImage(width, height,
                hasAlpha ? BufferedImage.TYPE_INT_ARGB : BufferedImage.TYPE_INT_RGB);
        image.setRGB(0, 0, width, height, colors, offset, stride);

        draw(nativeCanvas, nativePaintOrZero, true /*compositeOnly*/, false /*forceSrcMode*/,
                new GcSnapshot.Drawable() {
                    @Override
                    public void draw(Graphics2D graphics, Paint_Delegate paint) {
                        if (paint != null && paint.isFilterBitmap()) {
                            graphics.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);
                        }

                        graphics.drawImage(image, (int) x, (int) y, null);
                    }
        });
!!!35259831.java!!!	nativeDrawBitmapMatrix(in nCanvas : long, inout bitmap : Bitmap, in nMatrix : long, in nPaint : long) : void
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nCanvas);
        if (canvasDelegate == null) {
            return;
        }

        // get the delegate from the native int, which can be null
        Paint_Delegate paintDelegate = Paint_Delegate.getDelegate(nPaint);

        // get the delegate from the native int.
        Bitmap_Delegate bitmapDelegate = Bitmap_Delegate.getDelegate(bitmap);
        if (bitmapDelegate == null) {
            return;
        }

        final BufferedImage image = getImageToDraw(bitmapDelegate, paintDelegate, sBoolOut);

        Matrix_Delegate matrixDelegate = Matrix_Delegate.getDelegate(nMatrix);
        if (matrixDelegate == null) {
            return;
        }

        final AffineTransform mtx = matrixDelegate.getAffineTransform();

        canvasDelegate.getSnapshot().draw(new GcSnapshot.Drawable() {
                @Override
                public void draw(Graphics2D graphics, Paint_Delegate paint) {
                    if (paint != null && paint.isFilterBitmap()) {
                        graphics.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                                RenderingHints.VALUE_INTERPOLATION_BILINEAR);
                    }

                    //FIXME add support for canvas, screen and bitmap densities.
                    graphics.drawImage(image, mtx, null);
                }
        }, paintDelegate, true /*compositeOnly*/, false /*forceSrcMode*/);
!!!35259959.java!!!	nativeDrawBitmapMesh(in nCanvas : long, inout bitmap : Bitmap, in meshWidth : int, in meshHeight : int, inout verts : float, in vertOffset : int, inout colors : int, in colorOffset : int, in nPaint : long) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Canvas.drawBitmapMesh is not supported.", null, null /*data*/);
!!!35260087.java!!!	nativeDrawVertices(in nCanvas : long, in mode : int, in n : int, inout verts : float, in vertOffset : int, inout texs : float, in texOffset : int, inout colors : int, in colorOffset : int, inout indices : short, in indexOffset : int, in indexCount : int, in nPaint : long) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Canvas.drawVertices is not supported.", null, null /*data*/);
!!!35260215.java!!!	native_drawText(in nativeCanvas : long, inout text : char, in index : int, in count : int, in startX : float, in startY : float, in flags : int, in paint : long, in typeface : long) : void
        drawText(nativeCanvas, text, index, count, startX, startY, (flags & 1) != 0,
                paint, typeface);
!!!35260343.java!!!	native_drawText(in nativeCanvas : long, inout text : String, in start : int, in end : int, in x : float, in y : float, in flags : int, in paint : long, in typeface : long) : void
        int count = end - start;
        char[] buffer = TemporaryBuffer.obtain(count);
        TextUtils.getChars(text, start, end, buffer, 0);

        native_drawText(nativeCanvas, buffer, 0, count, x, y, flags, paint, typeface);
!!!35260471.java!!!	native_drawTextRun(in nativeCanvas : long, inout text : String, in start : int, in end : int, in contextStart : int, in contextEnd : int, in x : float, in y : float, inout isRtl : boolean, in paint : long, in typeface : long) : void
        int count = end - start;
        char[] buffer = TemporaryBuffer.obtain(count);
        TextUtils.getChars(text, start, end, buffer, 0);

        drawText(nativeCanvas, buffer, 0, count, x, y, isRtl, paint, typeface);
!!!35260599.java!!!	native_drawTextRun(in nativeCanvas : long, inout text : char, in start : int, in count : int, in contextStart : int, in contextCount : int, in x : float, in y : float, inout isRtl : boolean, in paint : long, in typeface : long) : void
        drawText(nativeCanvas, text, start, count, x, y, isRtl, paint, typeface);
!!!35260727.java!!!	native_drawTextOnPath(in nativeCanvas : long, inout text : char, in index : int, in count : int, in path : long, in hOffset : float, in vOffset : float, in bidiFlags : int, in paint : long, in typeface : long) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Canvas.drawTextOnPath is not supported.", null, null /*data*/);
!!!35260855.java!!!	native_drawTextOnPath(in nativeCanvas : long, inout text : String, in path : long, in hOffset : float, in vOffset : float, in bidiFlags : int, in paint : long, in typeface : long) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Canvas.drawTextOnPath is not supported.", null, null /*data*/);
!!!35260983.java!!!	getNativeFinalizer() : long
        synchronized (Canvas_Delegate.class) {
            if (sFinalizer == -1) {
                sFinalizer = NativeAllocationRegistry_Delegate.createFinalizer(nativePtr -> {
                    Canvas_Delegate delegate = sManager.getDelegate(nativePtr);
                    if (delegate != null) {
                        delegate.dispose();
                    }
                    sManager.removeJavaReferenceFor(nativePtr);
                });
            }
        }
        return sFinalizer;
!!!35261111.java!!!	draw(in nCanvas : long, in nPaint : long, inout compositeOnly : boolean, inout forceSrcMode : boolean, inout drawable : GcSnapshot::Drawable) : void
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nCanvas);
        if (canvasDelegate == null) {
            return;
        }

        // get the paint which can be null if nPaint is 0;
        Paint_Delegate paintDelegate = Paint_Delegate.getDelegate(nPaint);

        canvasDelegate.getSnapshot().draw(drawable, paintDelegate, compositeOnly, forceSrcMode);
!!!35261239.java!!!	draw(in nCanvas : long, inout drawable : GcSnapshot::Drawable) : void
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nCanvas);
        if (canvasDelegate == null) {
            return;
        }

        canvasDelegate.mSnapshot.draw(drawable);
!!!35261367.java!!!	drawText(in nativeCanvas : long, in text : char, in index : int, in count : int, in startX : float, in startY : float, in isRtl : boolean, in paint : long, in typeface : long) : void

        draw(nativeCanvas, paint, false /*compositeOnly*/, false /*forceSrcMode*/,
                new GcSnapshot.Drawable() {
            @Override
            public void draw(Graphics2D graphics, Paint_Delegate paintDelegate) {
                // WARNING: the logic in this method is similar to Paint_Delegate.measureText.
                // Any change to this method should be reflected in Paint.measureText

                // assert that the typeface passed is actually the one stored in paint.
                assert (typeface == paintDelegate.mNativeTypeface);

                // Paint.TextAlign indicates how the text is positioned relative to X.
                // LEFT is the default and there's nothing to do.
                float x = startX;
                int limit = index + count;
                if (paintDelegate.getTextAlign() != Paint.Align.LEFT.nativeInt) {
                    RectF bounds = paintDelegate.measureText(text, index, count, null, 0,
                            isRtl);
                    float m = bounds.right - bounds.left;
                    if (paintDelegate.getTextAlign() == Paint.Align.CENTER.nativeInt) {
                        x -= m / 2;
                    } else if (paintDelegate.getTextAlign() == Paint.Align.RIGHT.nativeInt) {
                        x -= m;
                    }
                }

                new BidiRenderer(graphics, paintDelegate, text).setRenderLocation(x, startY)
                        .renderText(index, limit, isRtl, null, 0, true);
            }
        });
!!!35261495.java!!!	Canvas_Delegate(inout bitmap : Bitmap_Delegate)
        mSnapshot = GcSnapshot.createDefaultSnapshot(mBitmap = bitmap);
!!!35261623.java!!!	Canvas_Delegate()
        mSnapshot = GcSnapshot.createDefaultSnapshot(null /*image*/);
!!!35261751.java!!!	dispose() : void
        mSnapshot.dispose();
!!!35261879.java!!!	save(in saveFlags : int) : int
        // get the current save count
        int count = mSnapshot.size();

        mSnapshot = mSnapshot.save(saveFlags);

        // return the old save count
        return count;
!!!35262007.java!!!	saveLayerAlpha(inout rect : RectF, in alpha : int, in saveFlags : int) : int
        Paint_Delegate paint = new Paint_Delegate();
        paint.setAlpha(alpha);
        return saveLayer(rect, paint, saveFlags);
!!!35262135.java!!!	saveLayer(inout rect : RectF, inout paint : Paint_Delegate, in saveFlags : int) : int
        // get the current save count
        int count = mSnapshot.size();

        mSnapshot = mSnapshot.saveLayer(rect, paint, saveFlags);

        // return the old save count
        return count;
!!!35262263.java!!!	restoreTo(in saveCount : int) : void
        mSnapshot = mSnapshot.restoreTo(saveCount);
!!!35262391.java!!!	restore() : void
        mSnapshot = mSnapshot.restore();
!!!35262519.java!!!	clipRect(in left : float, in top : float, in right : float, in bottom : float, in regionOp : int) : boolean
        return mSnapshot.clipRect(left, top, right, bottom, regionOp);
!!!35262647.java!!!	drawBitmap(in nativeCanvas : long, inout bitmap : Bitmap_Delegate, in nativePaintOrZero : long, in sleft : int, in stop : int, in sright : int, in sbottom : int, in dleft : int, in dtop : int, in dright : int, in dbottom : int) : void
        // get the delegate from the native int.
        Canvas_Delegate canvasDelegate = sManager.getDelegate(nativeCanvas);
        if (canvasDelegate == null) {
            return;
        }

        // get the paint, which could be null if the int is 0
        Paint_Delegate paintDelegate = Paint_Delegate.getDelegate(nativePaintOrZero);

        final BufferedImage image = getImageToDraw(bitmap, paintDelegate, sBoolOut);

        draw(nativeCanvas, nativePaintOrZero, true /*compositeOnly*/, sBoolOut[0],
                new GcSnapshot.Drawable() {
                    @Override
                    public void draw(Graphics2D graphics, Paint_Delegate paint) {
                        if (paint != null && paint.isFilterBitmap()) {
                            graphics.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);
                        }

                        //FIXME add support for canvas, screen and bitmap densities.
                        graphics.drawImage(image, dleft, dtop, dright, dbottom,
                                sleft, stop, sright, sbottom, null);
                    }
        });
!!!35262775.java!!!	getImageToDraw(inout bitmap : Bitmap_Delegate, inout paint : Paint_Delegate, inout forceSrcMode : boolean) : BufferedImage
        BufferedImage image = bitmap.getImage();
        forceSrcMode[0] = false;

        // if the bitmap config is alpha_8, then we erase all color value from it
        // before drawing it.
        if (bitmap.getConfig() == Bitmap.Config.ALPHA_8) {
            fixAlpha8Bitmap(image);
        } else if (!bitmap.hasAlpha()) {
            // hasAlpha is merely a rendering hint. There can in fact be alpha values
            // in the bitmap but it should be ignored at drawing time.
            // There is two ways to do this:
            // - override the composite to be SRC. This can only be used if the composite
            //   was going to be SRC or SRC_OVER in the first place
            // - Create a different bitmap to draw in which all the alpha channel values is set
            //   to 0xFF.
            if (paint != null) {
                Xfermode_Delegate xfermodeDelegate = paint.getXfermode();
                if (xfermodeDelegate instanceof PorterDuffXfermode_Delegate) {
                    PorterDuff.Mode mode =
                        ((PorterDuffXfermode_Delegate)xfermodeDelegate).getMode();

                    forceSrcMode[0] = mode == PorterDuff.Mode.SRC_OVER ||
                            mode == PorterDuff.Mode.SRC;
                }
            }

            // if we can't force SRC mode, then create a temp bitmap of TYPE_RGB
            if (!forceSrcMode[0]) {
                image = Bitmap_Delegate.createCopy(image, BufferedImage.TYPE_INT_RGB, 0xFF);
            }
        }

        return image;
!!!35262903.java!!!	fixAlpha8Bitmap(in image : BufferedImage) : void
        int w = image.getWidth();
        int h = image.getHeight();
        int[] argb = new int[w * h];
        image.getRGB(0, 0, image.getWidth(), image.getHeight(), argb, 0, image.getWidth());

        final int length = argb.length;
        for (int i = 0 ; i < length; i++) {
            argb[i] &= 0xFF000000;
        }
        image.setRGB(0, 0, w, h, argb, 0, w);
