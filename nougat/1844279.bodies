class GradientPaint
!!!35271351.java!!!	GradientPaint(inout colors : int, inout positions : float, inout tileMode : Shader::TileMode)
            mColors = colors;
            mPositions = positions;
            mTileMode = tileMode;
!!!35271479.java!!!	getTransparency() : int
            return java.awt.Paint.TRANSLUCENT;
!!!35271607.java!!!	precomputeGradientColors() : void
            if (mGradient == null) {
                // actually create an array with an extra size, so that we can really go
                // from 0 to SIZE (100%), or currentPos in the loop below will never equal 1.0
                mGradient = new int[GRADIENT_SIZE+1];

                int prevPos = 0;
                int nextPos = 1;
                for (int i  = 0 ; i <= GRADIENT_SIZE ; i++) {
                    // compute current position
                    float currentPos = (float)i/GRADIENT_SIZE;
                    while (currentPos > mPositions[nextPos]) {
                        prevPos = nextPos++;
                    }

                    float percent = (currentPos - mPositions[prevPos]) /
                            (mPositions[nextPos] - mPositions[prevPos]);

                    mGradient[i] = computeColor(mColors[prevPos], mColors[nextPos], percent);
                }
            }
!!!35271735.java!!!	getGradientColor(in pos : float) : int
            if (pos < 0.f) {
                if (mTileMode != null) {
                    switch (mTileMode) {
                        case CLAMP:
                            pos = 0.f;
                            break;
                        case REPEAT:
                            // remove the integer part to stay in the [0,1] range.
                            // we also need to invert the value from [-1,0] to [0, 1]
                            pos = pos - (float)Math.floor(pos);
                            break;
                        case MIRROR:
                            // this is the same as the positive side, just make the value positive
                            // first.
                            pos = Math.abs(pos);

                            // get the integer and the decimal part
                            int intPart = (int)Math.floor(pos);
                            pos = pos - intPart;
                            // 0 -> 1 : normal order
                            // 1 -> 2: mirrored
                            // etc..
                            // this means if the intpart is odd we invert
                            if ((intPart % 2) == 1) {
                                pos = 1.f - pos;
                            }
                            break;
                    }
                } else {
                    pos = 0.0f;
                }
            } else if (pos > 1f) {
                if (mTileMode != null) {
                    switch (mTileMode) {
                        case CLAMP:
                            pos = 1.f;
                            break;
                        case REPEAT:
                            // remove the integer part to stay in the [0,1] range
                            pos = pos - (float)Math.floor(pos);
                            break;
                        case MIRROR:
                            // get the integer and the decimal part
                            int intPart = (int)Math.floor(pos);
                            pos = pos - intPart;
                            // 0 -> 1 : normal order
                            // 1 -> 2: mirrored
                            // etc..
                            // this means if the intpart is odd we invert
                            if ((intPart % 2) == 1) {
                                pos = 1.f - pos;
                            }
                            break;
                    }
                } else {
                    pos = 1.0f;
                }
            }

            int index = (int)((pos * GRADIENT_SIZE) + .5);

            return mGradient[index];
!!!35271863.java!!!	computeColor(in c1 : int, in c2 : int, in percent : float) : int
            int a = computeChannel((c1 >> 24) & 0xFF, (c2 >> 24) & 0xFF, percent);
            int r = computeChannel((c1 >> 16) & 0xFF, (c2 >> 16) & 0xFF, percent);
            int g = computeChannel((c1 >>  8) & 0xFF, (c2 >>  8) & 0xFF, percent);
            int b = computeChannel((c1      ) & 0xFF, (c2      ) & 0xFF, percent);
            return a << 24 | r << 16 | g << 8 | b;
!!!35271991.java!!!	computeChannel(in c1 : int, in c2 : int, in percent : float) : int
            return c1 + (int)((percent * (c2-c1)) + .5);
