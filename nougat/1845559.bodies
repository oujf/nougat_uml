class Typeface_Delegate
!!!35319863.java!!!	getDelegate(in nativeTypeface : long) : Typeface_Delegate
        return sManager.getDelegate(nativeTypeface);
!!!35319991.java!!!	getFonts(inout variant : FontFamily_Delegate::FontVariant) : List<Font>
        assert variant != FontVariant.NONE;

        // Calculate the required weight based on style and weight of this typeface.
        int weight = mWeight + ((mStyle & Font.BOLD) == 0 ? 0 : FontFamily_Delegate.BOLD_FONT_WEIGHT_DELTA);
        if (weight > 900) {
            weight = 900;
        }
        final boolean isItalic = (mStyle & Font.ITALIC) != 0;
        List<Font> fonts = new ArrayList<Font>(mFontFamilies.length);
        for (int i = 0; i < mFontFamilies.length; i++) {
            FontFamily_Delegate ffd = mFontFamilies[i];
            if (ffd != null && ffd.isValid()) {
                Font font = ffd.getFont(weight, isItalic);
                if (font != null) {
                    FontVariant ffdVariant = ffd.getVariant();
                    if (ffdVariant == FontVariant.NONE) {
                        fonts.add(font);
                        continue;
                    }
                    // We cannot open each font and get locales supported, etc to match the fonts.
                    // As a workaround, we hardcode certain assumptions like Elegant and Compact
                    // always appear in pairs.
                    assert i < mFontFamilies.length - 1;
                    FontFamily_Delegate ffd2 = mFontFamilies[++i];
                    assert ffd2 != null;
                    FontVariant ffd2Variant = ffd2.getVariant();
                    Font font2 = ffd2.getFont(weight, isItalic);
                    assert ffd2Variant != FontVariant.NONE && ffd2Variant != ffdVariant
                            && font2 != null;
                    // Add the font with the matching variant to the list.
                    if (variant == ffd.getVariant()) {
                        fonts.add(font);
                    } else {
                        fonts.add(font2);
                    }
                } else {
                    // The FontFamily is valid but doesn't contain any matching font. This means
                    // that the font failed to load. We add null to the list of fonts. Don't throw
                    // the warning just yet. If this is a non-english font, we don't want to warn
                    // users who are trying to render only english text.
                    fonts.add(null);
                }
            }
        }
        return fonts;
!!!35320119.java!!!	resetDefaults() : void
        // Sometimes this is called before the Bridge is initialized. In that case, we don't want to
        // initialize Typeface because the SDK fonts location hasn't been set.
        if (FontFamily_Delegate.getFontLocation() != null) {
            Typeface.sDefaults = null;
        }
!!!35320247.java!!!	nativeCreateFromTypeface(in native_instance : long, in style : int) : long
        Typeface_Delegate delegate = sManager.getDelegate(native_instance);
        if (delegate == null) {
            delegate = sManager.getDelegate(sDefaultTypeface);
        }
        if (delegate == null) {
            return 0;
        }

        return sManager.addNewDelegate(new Typeface_Delegate(delegate.mFontFamilies, style,
                delegate.mWeight));
!!!35320375.java!!!	nativeCreateWeightAlias(in native_instance : long, in weight : int) : long
        Typeface_Delegate delegate = sManager.getDelegate(native_instance);
        if (delegate == null) {
            delegate = sManager.getDelegate(sDefaultTypeface);
        }
        if (delegate == null) {
            return 0;
        }
        Typeface_Delegate weightAlias =
                new Typeface_Delegate(delegate.mFontFamilies, delegate.mStyle, weight);
        return sManager.addNewDelegate(weightAlias);
!!!35320503.java!!!	nativeCreateFromArray(inout familyArray : long) : long
        FontFamily_Delegate[] fontFamilies = new FontFamily_Delegate[familyArray.length];
        for (int i = 0; i < familyArray.length; i++) {
            fontFamilies[i] = FontFamily_Delegate.getDelegate(familyArray[i]);
        }
        Typeface_Delegate delegate = new Typeface_Delegate(fontFamilies, Typeface.NORMAL);
        return sManager.addNewDelegate(delegate);
!!!35320631.java!!!	nativeUnref(in native_instance : long) : void
        sManager.removeJavaReferenceFor(native_instance);
!!!35320759.java!!!	nativeGetStyle(in native_instance : long) : int
        Typeface_Delegate delegate = sManager.getDelegate(native_instance);
        if (delegate == null) {
            return 0;
        }

        return delegate.mStyle;
!!!35320887.java!!!	nativeSetDefault(in native_instance : long) : void
        sDefaultTypeface = native_instance;
!!!35321015.java!!!	getSystemFontConfigLocation() : File
        return new File(getFontLocation());
!!!35321143.java!!!	makeFamilyFromParsed(inout family : FontListParser::Family, inout bufferForPath : Map<String, ByteBuffer>) : FontFamily
        FontFamily fontFamily = new FontFamily(family.lang, family.variant);
        for (FontListParser.Font font : family.fonts) {
            FontFamily_Delegate.addFont(fontFamily.mNativePtr, font.fontName, font.weight,
                    font.isItalic);
        }
        return fontFamily;
!!!35321271.java!!!	Typeface_Delegate(inout fontFamilies : FontFamily_Delegate, in style : int)
        this(fontFamilies, style, FontFamily_Delegate.DEFAULT_FONT_WEIGHT);
!!!35321399.java!!!	Typeface_Delegate(inout fontFamilies : FontFamily_Delegate, in style : int, in weight : int)
        mFontFamilies = fontFamilies;
        mStyle = style;
        mWeight = weight;
