class CachedPathIteratorFactory
!!!35516343.java!!!	CachedPathIteratorFactory(inout iterator : PathIterator)
        mWindingRule = iterator.getWindingRule();

        ArrayList<Integer> typesArray = Lists.newArrayList();
        ArrayList<float[]> pointsArray = Lists.newArrayList();
        float[] points = new float[6];
        while (!iterator.isDone()) {
            int type = iterator.currentSegment(points);
            int nPoints = getNumberOfPoints(type) * 2; // 2 coordinates per point

            typesArray.add(type);
            float[] itemPoints = new float[nPoints];
            System.arraycopy(points, 0, itemPoints, 0, nPoints);
            pointsArray.add(itemPoints);
            iterator.next();
        }

        mTypes = new int[typesArray.size()];
        mCoordinates = new float[mTypes.length][];
        for (int i = 0; i < typesArray.size(); i++) {
            mTypes[i] = typesArray.get(i);
            mCoordinates[i] = pointsArray.get(i);
        }

        // Do measurement
        mSegmentsLength = new float[mTypes.length];

        // Curves that we can reuse to estimate segments length
        CubicCurve2D.Float cubicCurve = new CubicCurve2D.Float();
        QuadCurve2D.Float quadCurve = new QuadCurve2D.Float();
        float lastX = 0;
        float lastY = 0;
        float totalLength = 0;
        for (int i = 0; i < mTypes.length; i++) {
            switch (mTypes[i]) {
                case PathIterator.SEG_CUBICTO:
                    cubicCurve.setCurve(lastX, lastY,
                            mCoordinates[i][0], mCoordinates[i][1], mCoordinates[i][2],
                            mCoordinates[i][3], lastX = mCoordinates[i][4],
                            lastY = mCoordinates[i][5]);
                    mSegmentsLength[i] =
                            getFlatPathLength(cubicCurve.getPathIterator(null, PRECISION));
                    break;
                case PathIterator.SEG_QUADTO:
                    quadCurve.setCurve(lastX, lastY, mCoordinates[i][0], mCoordinates[i][1],
                            lastX = mCoordinates[i][2], lastY = mCoordinates[i][3]);
                    mSegmentsLength[i] =
                            getFlatPathLength(quadCurve.getPathIterator(null, PRECISION));
                    break;
                case PathIterator.SEG_CLOSE:
                    mSegmentsLength[i] = (float) Point2D.distance(lastX, lastY,
                            lastX = mCoordinates[0][0],
                            lastY = mCoordinates[0][1]);
                    mCoordinates[i] = new float[2];
                    // We convert a SEG_CLOSE segment to a SEG_LINETO so we do not have to worry
                    // about this special case in the rest of the code.
                    mTypes[i] = PathIterator.SEG_LINETO;
                    mCoordinates[i][0] = mCoordinates[0][0];
                    mCoordinates[i][1] = mCoordinates[0][1];
                    break;
                case PathIterator.SEG_MOVETO:
                    mSegmentsLength[i] = 0;
                    lastX = mCoordinates[i][0];
                    lastY = mCoordinates[i][1];
                    break;
                case PathIterator.SEG_LINETO:
                    mSegmentsLength[i] = (float) Point2D.distance(lastX, lastY, mCoordinates[i][0],
                            mCoordinates[i][1]);
                    lastX = mCoordinates[i][0];
                    lastY = mCoordinates[i][1];
                default:
            }
            totalLength += mSegmentsLength[i];
        }

        mTotalLength = totalLength;
!!!35516471.java!!!	quadCurveSegment(inout coords : float, in t0 : float, in t1 : float) : void
        // Calculate X and Y at 0.5 (We'll use this to reconstruct the control point later)
        float mt = t0 + (t1 - t0) / 2;
        float mu = 1 - mt;
        float mx = mu * mu * coords[0] + 2 * mu * mt * coords[2] + mt * mt * coords[4];
        float my = mu * mu * coords[1] + 2 * mu * mt * coords[3] + mt * mt * coords[5];

        float u0 = 1 - t0;
        float u1 = 1 - t1;

        // coords at t0
        coords[0] = coords[0] * u0 * u0 + coords[2] * 2 * t0 * u0 + coords[4] * t0 * t0;
        coords[1] = coords[1] * u0 * u0 + coords[3] * 2 * t0 * u0 + coords[5] * t0 * t0;

        // coords at t1
        coords[4] = coords[0] * u1 * u1 + coords[2] * 2 * t1 * u1 + coords[4] * t1 * t1;
        coords[5] = coords[1] * u1 * u1 + coords[3] * 2 * t1 * u1 + coords[5] * t1 * t1;

        // estimated control point at t'=0.5
        coords[2] = 2 * mx - coords[0] / 2 - coords[4] / 2;
        coords[3] = 2 * my - coords[1] / 2 - coords[5] / 2;
!!!35516599.java!!!	cubicCurveSegment(inout coords : float, in t0 : float, in t1 : float) : void
        // http://stackoverflow.com/questions/11703283/cubic-bezier-curve-segment
        float u0 = 1 - t0;
        float u1 = 1 - t1;

        // Calculate the points at t0 and t1 for the quadratic curves formed by (P0, P1, P2) and
        // (P1, P2, P3)
        float qxa = coords[0] * u0 * u0 + coords[2] * 2 * t0 * u0 + coords[4] * t0 * t0;
        float qxb = coords[0] * u1 * u1 + coords[2] * 2 * t1 * u1 + coords[4] * t1 * t1;
        float qxc = coords[2] * u0 * u0 + coords[4] * 2 * t0 * u0 + coords[6] * t0 * t0;
        float qxd = coords[2] * u1 * u1 + coords[4] * 2 * t1 * u1 + coords[6] * t1 * t1;

        float qya = coords[1] * u0 * u0 + coords[3] * 2 * t0 * u0 + coords[5] * t0 * t0;
        float qyb = coords[1] * u1 * u1 + coords[3] * 2 * t1 * u1 + coords[5] * t1 * t1;
        float qyc = coords[3] * u0 * u0 + coords[5] * 2 * t0 * u0 + coords[7] * t0 * t0;
        float qyd = coords[3] * u1 * u1 + coords[5] * 2 * t1 * u1 + coords[7] * t1 * t1;

        // Linear interpolation
        coords[0] = qxa * u0 + qxc * t0;
        coords[1] = qya * u0 + qyc * t0;

        coords[2] = qxa * u1 + qxc * t1;
        coords[3] = qya * u1 + qyc * t1;

        coords[4] = qxb * u0 + qxd * t0;
        coords[5] = qyb * u0 + qyd * t0;

        coords[6] = qxb * u1 + qxd * t1;
        coords[7] = qyb * u1 + qyd * t1;
!!!35516727.java!!!	getShapeEndPoint(in type : int, inout coords : float, inout point : float) : void
        // start index of the end point for the segment type
        int pointIndex = (getNumberOfPoints(type) - 1) * 2;
        point[0] = coords[pointIndex];
        point[1] = coords[pointIndex + 1];
!!!35516855.java!!!	getNumberOfPoints(in segmentType : int) : int
        switch (segmentType) {
            case PathIterator.SEG_QUADTO:
                return 2;
            case PathIterator.SEG_CUBICTO:
                return 3;
            case PathIterator.SEG_CLOSE:
                return 0;
            default:
                return 1;
        }
!!!35516983.java!!!	getFlatPathLength(inout iterator : PathIterator) : float
        float segment[] = new float[6];
        float totalLength = 0;
        float[] previousPoint = new float[2];
        boolean isFirstPoint = true;

        while (!iterator.isDone()) {
            int type = iterator.currentSegment(segment);
            assert type == PathIterator.SEG_LINETO || type == PathIterator.SEG_CLOSE || type ==
                    PathIterator.SEG_MOVETO;

            // MoveTo shouldn't affect the length
            if (!isFirstPoint && type != PathIterator.SEG_MOVETO) {
                totalLength += Point2D.distance(previousPoint[0], previousPoint[1], segment[0],
                        segment[1]);
            } else {
                isFirstPoint = false;
            }
            previousPoint[0] = segment[0];
            previousPoint[1] = segment[1];
            iterator.next();
        }

        return totalLength;
!!!35517111.java!!!	getPointAtLength(in type : int, inout coords : float, in lastX : float, in lastY : float, in t : float, inout point : float) : void
        if (type == PathIterator.SEG_LINETO) {
            point[0] = lastX + (coords[0] - lastX) * t;
            point[1] = lastY + (coords[1] - lastY) * t;
            // Return here, since we do not need a shape to estimate
            return;
        }

        float[] curve = new float[8];
        int lastPointIndex = (getNumberOfPoints(type) - 1) * 2;

        System.arraycopy(coords, 0, curve, 2, coords.length);
        curve[0] = lastX;
        curve[1] = lastY;
        if (type == PathIterator.SEG_CUBICTO) {
            cubicCurveSegment(curve, 0f, t);
        } else {
            quadCurveSegment(curve, 0f, t);
        }

        point[0] = curve[2 + lastPointIndex];
        point[1] = curve[2 + lastPointIndex + 1];
!!!35517239.java!!!	iterator() : CachedPathIteratorFactory::CachedPathIterator
        return new CachedPathIterator();
