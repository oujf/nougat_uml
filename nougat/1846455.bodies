class PorterDuffColorFilter_Delegate
!!!35309495.java!!!	isSupported() : boolean
        return true;
!!!35309623.java!!!	getSupportMessage() : String
        return "PorterDuff Color Filter is not supported for mode: " + mMode.name() + ".";
!!!35309751.java!!!	applyFilter(inout g : Graphics2D, in width : int, in height : int) : void
        g.setComposite(getComposite(mMode, 0xFF));
        g.setColor(mSrcColor);
        g.fillRect(0, 0, width, height);
!!!35309879.java!!!	native_CreatePorterDuffFilter(in srcColor : int, in porterDuffMode : int) : long
        PorterDuffColorFilter_Delegate newDelegate =
                new PorterDuffColorFilter_Delegate(srcColor, porterDuffMode);
        return sManager.addNewDelegate(newDelegate);
!!!35310007.java!!!	PorterDuffColorFilter_Delegate(in srcColor : int, in mode : int)
        mSrcColor = new java.awt.Color(srcColor, true /* hasAlpha */);
        mMode = getCompatibleMode(getPorterDuffMode(mode));
!!!35310135.java!!!	getCompatibleMode(inout mode : PorterDuff::Mode) : PorterDuff::Mode
        Mode m = mode;
        // Modes that are directly supported:
        // CLEAR, DST, SRC_IN, DST_IN, DST_OUT, SRC_ATOP, DARKEN, LIGHTEN, MULTIPLY, SCREEN,
        // ADD, OVERLAY
        switch (mode) {
        // Modes that can be mapped to one of the supported modes.
        case SRC:
            m = Mode.SRC_IN;
            break;
        case SRC_OVER:
            m = Mode.SRC_ATOP;
            break;
        case DST_OVER:
            m = Mode.DST;
            break;
        case SRC_OUT:
            m = Mode.CLEAR;
            break;
        case DST_ATOP:
            m = Mode.DST_IN;
            break;
        case XOR:
            m = Mode.DST_OUT;
            break;
        }
        return m;
