class SweepGradientPaintContext
!!!35319351.java!!!	SweepGradientPaintContext(inout canvasMatrix : java.awt.geom.AffineTransform, inout localMatrix : java.awt.geom.AffineTransform, inout colorModel : java.awt.image.ColorModel)
                mCanvasMatrix = canvasMatrix;
                mLocalMatrix = localMatrix;
                mColorModel = colorModel;
!!!35319607.java!!!	getColorModel() : java.awt.image.ColorModel
                return mColorModel;
!!!35319735.java!!!	getRaster(in x : int, in y : int, in w : int, in h : int) : java.awt.image.Raster
                java.awt.image.BufferedImage image = new java.awt.image.BufferedImage(
                    mColorModel, mColorModel.createCompatibleWritableRaster(w, h),
                    mColorModel.isAlphaPremultiplied(), null);

                int[] data = new int[w*h];

                // compute angle from each point to the center, and figure out the distance from
                // it.
                int index = 0;
                float[] pt1 = new float[2];
                float[] pt2 = new float[2];
                for (int iy = 0 ; iy < h ; iy++) {
                    for (int ix = 0 ; ix < w ; ix++) {
                        // handle the canvas transform
                        pt1[0] = x + ix;
                        pt1[1] = y + iy;
                        mCanvasMatrix.transform(pt1, 0, pt2, 0, 1);

                        // handle the local matrix
                        pt1[0] = pt2[0] - mCx;
                        pt1[1] = pt2[1] - mCy;
                        mLocalMatrix.transform(pt1, 0, pt2, 0, 1);

                        float dx = pt2[0];
                        float dy = pt2[1];

                        float angle;
                        if (dx == 0) {
                            angle = (float) (dy < 0 ? 3 * Math.PI / 2 : Math.PI / 2);
                        } else if (dy == 0) {
                            angle = (float) (dx < 0 ? Math.PI : 0);
                        } else {
                            angle = (float) Math.atan(dy / dx);
                            if (dx > 0) {
                                if (dy < 0) {
                                    angle += Math.PI * 2;
                                }
                            } else {
                                angle += Math.PI;
                            }
                        }

                        // convert to 0-1. value and get color
                        data[index++] = getGradientColor((float) (angle / (2 * Math.PI)));
                    }
                }

                image.setRGB(0 /*startX*/, 0 /*startY*/, w, h, data, 0 /*offset*/, w /*scansize*/);

                return image.getRaster();
