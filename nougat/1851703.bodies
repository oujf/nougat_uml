class StaticLayout_Delegate
!!!35338807.java!!!	nNewBuilder() : long
        return sBuilderManager.addNewDelegate(new Builder());
!!!35338935.java!!!	nFreeBuilder(in nativeBuilder : long) : void
        sBuilderManager.removeJavaReferenceFor(nativeBuilder);
!!!35339191.java!!!	nLoadHyphenator(inout buf : ByteBuffer, in offset : int) : long
        return Hyphenator_Delegate.loadHyphenator(buf, offset);
!!!35339319.java!!!	nSetLocale(in nativeBuilder : long, inout locale : String, in nativeHyphenator : long) : void
        Builder builder = sBuilderManager.getDelegate(nativeBuilder);
        if (builder != null) {
            builder.mLocale = locale;
            builder.mNativeHyphenator = nativeHyphenator;
        }
!!!35339447.java!!!	nSetIndents(in nativeBuilder : long, inout indents : int) : void
        // TODO.
!!!35339575.java!!!	nSetupParagraph(in nativeBuilder : long, inout text : char, in length : int, in firstWidth : float, in firstWidthLineCount : int, in restWidth : float, inout variableTabStops : int, in defaultTabStop : int, in breakStrategy : int, in hyphenationFrequency : int) : void
        Builder builder = sBuilderManager.getDelegate(nativeBuilder);
        if (builder == null) {
            return;
        }

        builder.mText = text;
        builder.mWidths = new float[length];
        builder.mLineWidth = new LineWidth(firstWidth, firstWidthLineCount, restWidth);
        builder.mTabStopCalculator = new TabStops(variableTabStops, defaultTabStop);
!!!35339703.java!!!	nAddStyleRun(in nativeBuilder : long, in nativePaint : long, in nativeTypeface : long, in start : int, in end : int, inout isRtl : boolean) : float
        Builder builder = sBuilderManager.getDelegate(nativeBuilder);

        int bidiFlags = isRtl ? Paint.BIDI_FORCE_RTL : Paint.BIDI_FORCE_LTR;
        return builder == null ? 0 :
                measureText(nativePaint, builder.mText, start, end - start, builder.mWidths,
                        bidiFlags);
!!!35339831.java!!!	nAddMeasuredRun(in nativeBuilder : long, in start : int, in end : int, inout widths : float) : void
        Builder builder = sBuilderManager.getDelegate(nativeBuilder);
        if (builder != null) {
            System.arraycopy(widths, start, builder.mWidths, start, end - start);
        }
!!!35339959.java!!!	nAddReplacementRun(in nativeBuilder : long, in start : int, in end : int, in width : float) : void
        Builder builder = sBuilderManager.getDelegate(nativeBuilder);
        if (builder == null) {
            return;
        }
        builder.mWidths[start] = width;
        Arrays.fill(builder.mWidths, start + 1, end, 0.0f);
!!!35340087.java!!!	nGetWidths(in nativeBuilder : long, inout floatsArray : float) : void
        Builder builder = sBuilderManager.getDelegate(nativeBuilder);
        if (builder != null) {
            System.arraycopy(builder.mWidths, 0, floatsArray, 0, builder.mWidths.length);
        }
!!!35340215.java!!!	nComputeLineBreaks(in nativeBuilder : long, inout recycle : StaticLayout::LineBreaks, inout recycleBreaks : int, inout recycleWidths : float, inout recycleFlags : int, in recycleLength : int) : int

        Builder builder = sBuilderManager.getDelegate(nativeBuilder);
        if (builder == null) {
            return 0;
        }

        // compute all possible breakpoints.
        int length = builder.mWidths.length;
        BreakIterator it = BreakIterator.getLineInstance(new ULocale(builder.mLocale));
        it.setText(new Segment(builder.mText, 0, length));

        // average word length in english is 5. So, initialize the possible breaks with a guess.
        List<Integer> breaks = new ArrayList<Integer>((int) Math.ceil(length / 5d));
        int loc;
        it.first();
        while ((loc = it.next()) != BreakIterator.DONE) {
            breaks.add(loc);
        }

        List<Primitive> primitives =
                computePrimitives(builder.mText, builder.mWidths, length, breaks);
        switch (builder.mBreakStrategy) {
            case Layout.BREAK_STRATEGY_SIMPLE:
                builder.mLineBreaker = new GreedyLineBreaker(primitives, builder.mLineWidth,
                        builder.mTabStopCalculator);
                break;
            case Layout.BREAK_STRATEGY_HIGH_QUALITY:
                // TODO
//                break;
            case Layout.BREAK_STRATEGY_BALANCED:
                builder.mLineBreaker = new OptimizingLineBreaker(primitives, builder.mLineWidth,
                        builder.mTabStopCalculator);
                break;
            default:
                throw new AssertionError("Unknown break strategy: " + builder.mBreakStrategy);
        }
        builder.mLineBreaker.computeBreaks(recycle);
        return recycle.breaks.length;
!!!35340343.java!!!	computePrimitives(inout text : char, inout widths : float, in length : int, inout breaks : List<Integer>) : Primitive
        // Initialize the list with a guess of the number of primitives:
        // 2 Primitives per non-whitespace char and approx 5 chars per word (i.e. 83% chars)
        List<Primitive> primitives = new ArrayList<Primitive>(((int) Math.ceil(length * 1.833)));
        int breaksSize = breaks.size();
        int breakIndex = 0;
        for (int i = 0; i < length; i++) {
            char c = text[i];
            if (c == CHAR_SPACE || c == CHAR_ZWSP) {
                primitives.add(PrimitiveType.GLUE.getNewPrimitive(i, widths[i]));
            } else if (c == CHAR_TAB) {
                primitives.add(PrimitiveType.VARIABLE.getNewPrimitive(i));
            } else if (c != CHAR_NEWLINE) {
                while (breakIndex < breaksSize && breaks.get(breakIndex) < i) {
                    breakIndex++;
                }
                Primitive p;
                if (widths[i] != 0) {
                    if (breakIndex < breaksSize && breaks.get(breakIndex) == i) {
                        p = PrimitiveType.PENALTY.getNewPrimitive(i, 0, 0);
                    } else {
                        p = PrimitiveType.WORD_BREAK.getNewPrimitive(i, 0);
                    }
                    primitives.add(p);
                }

                primitives.add(PrimitiveType.BOX.getNewPrimitive(i, widths[i]));
            }
        }
        // final break at end of everything
        primitives.add(
                PrimitiveType.PENALTY.getNewPrimitive(length, 0, -PrimitiveType.PENALTY_INFINITY));
        return primitives;
!!!35340471.java!!!	measureText(in nativePaint : long, inout text : char, in index : int, in count : int, inout widths : float, in bidiFlags : int) : float
        Paint_Delegate paint = Paint_Delegate.getDelegate(nativePaint);
        RectF bounds = new BidiRenderer(null, paint, text)
            .renderText(index, index + count, bidiFlags, widths, 0, false);
        return bounds.right - bounds.left;
