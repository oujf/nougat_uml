class PathParser_Delegate
!!!35343415.java!!!	getDelegate(in nativePtr : long) : PathParser_Delegate
        return sManager.getDelegate(nativePtr);
!!!35343543.java!!!	PathParser_Delegate(inout nodes : PathParser_Delegate::PathDataNode)
        mPathDataNodes = nodes;
!!!35343671.java!!!	getPathDataNodes() : PathParser_Delegate::PathDataNode
        return mPathDataNodes;
!!!35343799.java!!!	nParseStringForPath(in pathPtr : long, inout pathString : String, in stringLength : int) : void
        Path_Delegate path_delegate = Path_Delegate.getDelegate(pathPtr);
        if (path_delegate == null) {
            return;
        }
        assert pathString.length() == stringLength;
        PathDataNode.nodesToPath(createNodesFromPathData(pathString), path_delegate);
!!!35343927.java!!!	nCreatePathFromPathData(in outPathPtr : long, in pathData : long) : void
        Path_Delegate path_delegate = Path_Delegate.getDelegate(outPathPtr);
        PathParser_Delegate source = sManager.getDelegate(outPathPtr);
        if (source == null || path_delegate == null) {
            return;
        }
        PathDataNode.nodesToPath(source.mPathDataNodes, path_delegate);
!!!35344055.java!!!	nCreateEmptyPathData() : long
        PathParser_Delegate newDelegate = new PathParser_Delegate(new PathDataNode[0]);
        return sManager.addNewDelegate(newDelegate);
!!!35344183.java!!!	nCreatePathData(in nativePtr : long) : long
        PathParser_Delegate source = sManager.getDelegate(nativePtr);
        if (source == null) {
            return 0;
        }
        PathParser_Delegate dest = new PathParser_Delegate(deepCopyNodes(source.mPathDataNodes));
        return sManager.addNewDelegate(dest);
!!!35344311.java!!!	nCreatePathDataFromString(inout pathString : String, in stringLength : int) : long
        assert pathString.length() == stringLength : "Inconsistent path string length.";
        PathDataNode[] nodes = createNodesFromPathData(pathString);
        PathParser_Delegate delegate = new PathParser_Delegate(nodes);
        return sManager.addNewDelegate(delegate);

!!!35344439.java!!!	nInterpolatePathData(in outDataPtr : long, in fromDataPtr : long, in toDataPtr : long, in fraction : float) : boolean
        PathParser_Delegate out = sManager.getDelegate(outDataPtr);
        PathParser_Delegate from = sManager.getDelegate(fromDataPtr);
        PathParser_Delegate to = sManager.getDelegate(toDataPtr);
        if (out == null || from == null || to == null) {
            return false;
        }
        int length = from.mPathDataNodes.length;
        if (length != to.mPathDataNodes.length) {
            Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                    "Cannot interpolate path data with different lengths (from " + length + " to " +
                            to.mPathDataNodes.length + ").", null);
            return false;
        }
        if (out.mPathDataNodes.length != length) {
            out.mPathDataNodes = new PathDataNode[length];
        }
        for (int i = 0; i < length; i++) {
            if (out.mPathDataNodes[i] == null) {
                out.mPathDataNodes[i] = new PathDataNode(from.mPathDataNodes[i]);
            }
            out.mPathDataNodes[i].interpolatePathDataNode(from.mPathDataNodes[i],
                        to.mPathDataNodes[i], fraction);
        }
        return true;
!!!35344567.java!!!	nFinalize(in nativePtr : long) : void
        sManager.removeJavaReferenceFor(nativePtr);
!!!35344695.java!!!	nCanMorph(in fromDataPtr : long, in toDataPtr : long) : boolean
        PathParser_Delegate fromPath = PathParser_Delegate.getDelegate(fromDataPtr);
        PathParser_Delegate toPath = PathParser_Delegate.getDelegate(toDataPtr);
        if (fromPath == null || toPath == null || fromPath.getPathDataNodes() == null || toPath
                .getPathDataNodes() == null) {
            return true;
        }
        return PathParser_Delegate.canMorph(fromPath.getPathDataNodes(), toPath.getPathDataNodes());
!!!35344823.java!!!	nSetPathData(in outDataPtr : long, in fromDataPtr : long) : void
        PathParser_Delegate out = sManager.getDelegate(outDataPtr);
        PathParser_Delegate from = sManager.getDelegate(fromDataPtr);
        if (from == null || out == null) {
            return;
        }
        out.mPathDataNodes = deepCopyNodes(from.mPathDataNodes);
!!!35344951.java!!!	createNodesFromPathData(inout pathData : String) : PathParser_Delegate::PathDataNode
        int start = 0;
        int end = 1;

        ArrayList<PathDataNode> list = new ArrayList<PathDataNode>();
        while (end < pathData.length()) {
            end = nextStart(pathData, end);
            String s = pathData.substring(start, end).trim();
            if (s.length() > 0) {
                float[] val = getFloats(s);
                addNode(list, s.charAt(0), val);
            }

            start = end;
            end++;
        }
        if ((end - start) == 1 && start < pathData.length()) {
            addNode(list, pathData.charAt(start), new float[0]);
        }
        return list.toArray(new PathDataNode[list.size()]);
!!!35345079.java!!!	deepCopyNodes(inout source : PathParser_Delegate::PathDataNode) : PathParser_Delegate::PathDataNode
        PathDataNode[] copy = new PathDataNode[source.length];
        for (int i = 0; i < source.length; i++) {
            copy[i] = new PathDataNode(source[i]);
        }
        return copy;
!!!35345207.java!!!	canMorph(inout nodesFrom : PathParser_Delegate::PathDataNode, inout nodesTo : PathParser_Delegate::PathDataNode) : boolean
        if (nodesFrom == null || nodesTo == null) {
            return false;
        }

        if (nodesFrom.length != nodesTo.length) {
            return false;
        }

        for (int i = 0; i < nodesFrom.length; i ++) {
            if (nodesFrom[i].mType != nodesTo[i].mType
                    || nodesFrom[i].mParams.length != nodesTo[i].mParams.length) {
                return false;
            }
        }
        return true;
!!!35345335.java!!!	updateNodes(inout target : PathParser_Delegate::PathDataNode, inout source : PathParser_Delegate::PathDataNode) : void
        for (int i = 0; i < source.length; i ++) {
            target[i].mType = source[i].mType;
            for (int j = 0; j < source[i].mParams.length; j ++) {
                target[i].mParams[j] = source[i].mParams[j];
            }
        }
!!!35345463.java!!!	nextStart(inout s : String, in end : int) : int
        char c;

        while (end < s.length()) {
            c = s.charAt(end);
            // Note that 'e' or 'E' are not valid path commands, but could be
            // used for floating point numbers' scientific notation.
            // Therefore, when searching for next command, we should ignore 'e'
            // and 'E'.
            if ((((c - 'A') * (c - 'Z') <= 0) || ((c - 'a') * (c - 'z') <= 0))
                    && c != 'e' && c != 'E') {
                return end;
            }
            end++;
        }
        return end;
!!!35345591.java!!!	extract(inout s : String, in start : int, inout result : PathParser_Delegate::ExtractFloatResult) : void
        // Now looking for ' ', ',', '.' or '-' from the start.
        int currentIndex = start;
        boolean foundSeparator = false;
        result.mEndWithNegOrDot = false;
        boolean secondDot = false;
        boolean isExponential = false;
        for (; currentIndex < s.length(); currentIndex++) {
            boolean isPrevExponential = isExponential;
            isExponential = false;
            char currentChar = s.charAt(currentIndex);
            switch (currentChar) {
                case ' ':
                case ',':
                    foundSeparator = true;
                    break;
                case '-':
                    // The negative sign following a 'e' or 'E' is not a separator.
                    if (currentIndex != start && !isPrevExponential) {
                        foundSeparator = true;
                        result.mEndWithNegOrDot = true;
                    }
                    break;
                case '.':
                    if (!secondDot) {
                        secondDot = true;
                    } else {
                        // This is the second dot, and it is considered as a separator.
                        foundSeparator = true;
                        result.mEndWithNegOrDot = true;
                    }
                    break;
                case 'e':
                case 'E':
                    isExponential = true;
                    break;
            }
            if (foundSeparator) {
                break;
            }
        }
        // When there is nothing found, then we put the end position to the end
        // of the string.
        result.mEndPosition = currentIndex;
!!!35345719.java!!!	getFloats(inout s : String) : float
        if (s.charAt(0) == 'z' || s.charAt(0) == 'Z') {
            return new float[0];
        }
        try {
            float[] results = new float[s.length()];
            int count = 0;
            int startPosition = 1;
            int endPosition;

            ExtractFloatResult result = new ExtractFloatResult();
            int totalLength = s.length();

            // The startPosition should always be the first character of the
            // current number, and endPosition is the character after the current
            // number.
            while (startPosition < totalLength) {
                extract(s, startPosition, result);
                endPosition = result.mEndPosition;

                if (startPosition < endPosition) {
                    results[count++] = Float.parseFloat(
                            s.substring(startPosition, endPosition));
                }

                if (result.mEndWithNegOrDot) {
                    // Keep the '-' or '.' sign with next number.
                    startPosition = endPosition;
                } else {
                    startPosition = endPosition + 1;
                }
            }
            return Arrays.copyOf(results, count);
        } catch (NumberFormatException e) {
            throw new RuntimeException("error in parsing \"" + s + "\"", e);
        }
!!!35345847.java!!!	addNode(inout list : ArrayList<PathDataNode>, in cmd : char, inout val : float) : void
        list.add(new PathDataNode(cmd, val));
