class Choreographer_Delegate
!!!35349559.java!!!	getInstance() : Choreographer
        if (mInstance.get() == null) {
            mInstance.compareAndSet(null, Choreographer.getInstance_Original());
        }

        return mInstance.get();
!!!35349687.java!!!	getRefreshRate() : float
        return 60.f;
!!!35349815.java!!!	scheduleVsyncLocked(inout thisChoreographer : Choreographer) : void
        // do nothing
!!!35349943.java!!!	doFrame(in frameTimeNanos : long) : void
        Choreographer thisChoreographer = Choreographer.getInstance();

        thisChoreographer.mLastFrameTimeNanos = frameTimeNanos;

        thisChoreographer.mFrameInfo.markInputHandlingStart();
        thisChoreographer.doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos);

        thisChoreographer.mFrameInfo.markAnimationsStart();
        thisChoreographer.doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos);

        thisChoreographer.mFrameInfo.markPerformTraversalsStart();
        thisChoreographer.doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos);

        thisChoreographer.doCallbacks(Choreographer.CALLBACK_COMMIT, frameTimeNanos);
!!!35350071.java!!!	dispose() : void
        try {
            Field threadInstanceField = Choreographer.class.getDeclaredField("sThreadInstance");
            threadInstanceField.setAccessible(true);
            @SuppressWarnings("unchecked") ThreadLocal<Choreographer> threadInstance =
                    (ThreadLocal<Choreographer>) threadInstanceField.get(null);
            threadInstance.remove();
        } catch (ReflectiveOperationException e) {
            assert false;
            Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                    "Unable to clear Choreographer memory.", e, null);
        }
