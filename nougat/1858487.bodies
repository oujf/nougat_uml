class BridgeXmlBlockParser
!!!35449911.java!!!	BridgeXmlBlockParser(inout parser : XmlPullParser, inout context : BridgeContext, inout platformFile : boolean)
        if (ParserFactory.LOG_PARSER) {
            System.out.println("CRTE " + parser.toString());
        }

        mParser = parser;
        mContext = context;
        mPlatformFile = platformFile;
        mAttrib = new BridgeXmlPullAttributes(parser, context, mPlatformFile);

        if (mContext != null) {
            mContext.pushParser(this);
            mPopped = false;
        }
!!!35450039.java!!!	getParser() : XmlPullParser
        return mParser;
!!!35450167.java!!!	isPlatformFile() : boolean
        return mPlatformFile;
!!!35450295.java!!!	getViewCookie() : Object
        if (mParser instanceof ILayoutPullParser) {
            return ((ILayoutPullParser)mParser).getViewCookie();
        }

        return null;
!!!35450423.java!!!	ensurePopped() : void
        if (mContext != null && mPopped == false) {
            mContext.popParser();
            mPopped = true;
        }
!!!35450551.java!!!	setFeature(inout name : String, inout state : boolean) : void
        if (FEATURE_PROCESS_NAMESPACES.equals(name) && state) {
            return;
        }
        if (FEATURE_REPORT_NAMESPACE_ATTRIBUTES.equals(name) && state) {
            return;
        }
        throw new XmlPullParserException("Unsupported feature: " + name);
!!!35450679.java!!!	getFeature(inout name : String) : boolean
        if (FEATURE_PROCESS_NAMESPACES.equals(name)) {
            return true;
        }
        if (FEATURE_REPORT_NAMESPACE_ATTRIBUTES.equals(name)) {
            return true;
        }
        return false;
!!!35450807.java!!!	setProperty(inout name : String, inout value : Object) : void
        throw new XmlPullParserException("setProperty() not supported");
!!!35450935.java!!!	getProperty(inout name : String) : Object
        return null;
!!!35451063.java!!!	setInput(inout in : Reader) : void
        mParser.setInput(in);
!!!35451191.java!!!	setInput(inout inputStream : InputStream, inout inputEncoding : String) : void
        mParser.setInput(inputStream, inputEncoding);
!!!35451319.java!!!	defineEntityReplacementText(inout entityName : String, inout replacementText : String) : void
        throw new XmlPullParserException(
                "defineEntityReplacementText() not supported");
!!!35451447.java!!!	getNamespacePrefix(in pos : int) : String
        throw new XmlPullParserException("getNamespacePrefix() not supported");
!!!35451575.java!!!	getInputEncoding() : String
        return null;
!!!35451703.java!!!	getNamespace(inout prefix : String) : String
        throw new RuntimeException("getNamespace() not supported");
!!!35451831.java!!!	getNamespaceCount(in depth : int) : int
        throw new XmlPullParserException("getNamespaceCount() not supported");
!!!35451959.java!!!	getPositionDescription() : String
        return "Binary XML file line #" + getLineNumber();
!!!35452087.java!!!	getNamespaceUri(in pos : int) : String
        throw new XmlPullParserException("getNamespaceUri() not supported");
!!!35452215.java!!!	getColumnNumber() : int
        return -1;
!!!35452343.java!!!	getDepth() : int
        return mParser.getDepth();
!!!35452471.java!!!	getText() : String
        return mParser.getText();
!!!35452599.java!!!	getLineNumber() : int
        return mParser.getLineNumber();
!!!35452727.java!!!	getEventType() : int
        return mEventType;
!!!35452855.java!!!	isWhitespace() : boolean
        // Original comment: whitespace was stripped by aapt.
        return mParser.isWhitespace();
!!!35452983.java!!!	getPrefix() : String
        throw new RuntimeException("getPrefix not supported");
!!!35453111.java!!!	getTextCharacters(inout holderForStartAndLength : int) : char
        String txt = getText();
        char[] chars = null;
        if (txt != null) {
            holderForStartAndLength[0] = 0;
            holderForStartAndLength[1] = txt.length();
            chars = new char[txt.length()];
            txt.getChars(0, txt.length(), chars, 0);
        }
        return chars;
!!!35453239.java!!!	getNamespace() : String
        return mParser.getNamespace();
!!!35453367.java!!!	getName() : String
        return mParser.getName();
!!!35453495.java!!!	getAttributeNamespace(in index : int) : String
        return mParser.getAttributeNamespace(index);
!!!35453623.java!!!	getAttributeName(in index : int) : String
        return mParser.getAttributeName(index);
!!!35453751.java!!!	getAttributePrefix(in index : int) : String
        throw new RuntimeException("getAttributePrefix not supported");
!!!35453879.java!!!	isEmptyElementTag() : boolean
        // XXX Need to detect this.
        return false;
!!!35454007.java!!!	getAttributeCount() : int
        return mParser.getAttributeCount();
!!!35454135.java!!!	getAttributeValue(in index : int) : String
        return mParser.getAttributeValue(index);
!!!35454263.java!!!	getAttributeType(in index : int) : String
        return "CDATA";
!!!35454391.java!!!	isAttributeDefault(in index : int) : boolean
        return false;
!!!35454519.java!!!	nextToken() : int
        return next();
!!!35454647.java!!!	getAttributeValue(inout namespace : String, inout name : String) : String
        return mParser.getAttributeValue(namespace, name);
!!!35454775.java!!!	next() : int
        if (!mStarted) {
            mStarted = true;

            if (ParserFactory.LOG_PARSER) {
                System.out.println("STRT " + mParser.toString());
            }

            return START_DOCUMENT;
        }

        int ev = mParser.next();

        if (ParserFactory.LOG_PARSER) {
            System.out.println("NEXT " + mParser.toString() + " " +
                    eventTypeToString(mEventType) + " -> " + eventTypeToString(ev));
        }

        if (ev == END_TAG && mParser.getDepth() == 1) {
            // done with parser remove it from the context stack.
            ensurePopped();

            if (ParserFactory.LOG_PARSER) {
                System.out.println("");
            }
        }

        mEventType = ev;
        return ev;
!!!35454903.java!!!	eventTypeToString(in eventType : int) : String
        switch (eventType) {
            case START_DOCUMENT:
                return "START_DOC";
            case END_DOCUMENT:
                return "END_DOC";
            case START_TAG:
                return "START_TAG";
            case END_TAG:
                return "END_TAG";
            case TEXT:
                return "TEXT";
            case CDSECT:
                return "CDSECT";
            case ENTITY_REF:
                return "ENTITY_REF";
            case IGNORABLE_WHITESPACE:
                return "IGNORABLE_WHITESPACE";
            case PROCESSING_INSTRUCTION:
                return "PROCESSING_INSTRUCTION";
            case COMMENT:
                return "COMMENT";
            case DOCDECL:
                return "DOCDECL";
        }

        return "????";
!!!35455031.java!!!	require(in type : int, inout namespace : String, inout name : String) : void
        if (type != getEventType()
                || (namespace != null && !namespace.equals(getNamespace()))
                || (name != null && !name.equals(getName())))
            throw new XmlPullParserException("expected " + TYPES[type]
                    + getPositionDescription());
!!!35455159.java!!!	nextText() : String
        if (getEventType() != START_TAG) {
            throw new XmlPullParserException(getPositionDescription()
                    + ": parser must be on START_TAG to read next text", this,
                    null);
        }
        int eventType = next();
        if (eventType == TEXT) {
            String result = getText();
            eventType = next();
            if (eventType != END_TAG) {
                throw new XmlPullParserException(
                        getPositionDescription()
                                + ": event TEXT it must be immediately followed by END_TAG",
                        this, null);
            }
            return result;
        } else if (eventType == END_TAG) {
            return "";
        } else {
            throw new XmlPullParserException(getPositionDescription()
                    + ": parser must be on START_TAG or TEXT to read text",
                    this, null);
        }
!!!35455287.java!!!	nextTag() : int
        int eventType = next();
        if (eventType == TEXT && isWhitespace()) { // skip whitespace
            eventType = next();
        }
        if (eventType != START_TAG && eventType != END_TAG) {
            throw new XmlPullParserException(getPositionDescription()
                    + ": expected start or end tag", this, null);
        }
        return eventType;
!!!35455415.java!!!	close() : void
        // pass
!!!35455543.java!!!	getAttributeBooleanValue(in index : int, inout defaultValue : boolean) : boolean
        return mAttrib.getAttributeBooleanValue(index, defaultValue);
!!!35455671.java!!!	getAttributeBooleanValue(inout namespace : String, inout attribute : String, inout defaultValue : boolean) : boolean
        return mAttrib.getAttributeBooleanValue(namespace, attribute, defaultValue);
!!!35455799.java!!!	getAttributeFloatValue(in index : int, in defaultValue : float) : float
        return mAttrib.getAttributeFloatValue(index, defaultValue);
!!!35455927.java!!!	getAttributeFloatValue(inout namespace : String, inout attribute : String, in defaultValue : float) : float
        return mAttrib.getAttributeFloatValue(namespace, attribute, defaultValue);
!!!35456055.java!!!	getAttributeIntValue(in index : int, in defaultValue : int) : int
        return mAttrib.getAttributeIntValue(index, defaultValue);
!!!35456183.java!!!	getAttributeIntValue(inout namespace : String, inout attribute : String, in defaultValue : int) : int
        return mAttrib.getAttributeIntValue(namespace, attribute, defaultValue);
!!!35456311.java!!!	getAttributeListValue(in index : int, inout options : String, in defaultValue : int) : int
        return mAttrib.getAttributeListValue(index, options, defaultValue);
!!!35456439.java!!!	getAttributeListValue(inout namespace : String, inout attribute : String, inout options : String, in defaultValue : int) : int
        return mAttrib.getAttributeListValue(namespace, attribute, options, defaultValue);
!!!35456567.java!!!	getAttributeNameResource(in index : int) : int
        return mAttrib.getAttributeNameResource(index);
!!!35456695.java!!!	getAttributeResourceValue(in index : int, in defaultValue : int) : int
        return mAttrib.getAttributeResourceValue(index, defaultValue);
!!!35456823.java!!!	getAttributeResourceValue(inout namespace : String, inout attribute : String, in defaultValue : int) : int
        return mAttrib.getAttributeResourceValue(namespace, attribute, defaultValue);
!!!35456951.java!!!	getAttributeUnsignedIntValue(in index : int, in defaultValue : int) : int
        return mAttrib.getAttributeUnsignedIntValue(index, defaultValue);
!!!35457079.java!!!	getAttributeUnsignedIntValue(inout namespace : String, inout attribute : String, in defaultValue : int) : int
        return mAttrib.getAttributeUnsignedIntValue(namespace, attribute, defaultValue);
!!!35457207.java!!!	getClassAttribute() : String
        return mAttrib.getClassAttribute();
!!!35457335.java!!!	getIdAttribute() : String
        return mAttrib.getIdAttribute();
!!!35457463.java!!!	getIdAttributeResourceValue(in defaultValue : int) : int
        return mAttrib.getIdAttributeResourceValue(defaultValue);
!!!35457591.java!!!	getStyleAttribute() : int
        return mAttrib.getStyleAttribute();
