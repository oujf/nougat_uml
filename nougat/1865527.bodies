class FakeExpandableAdapter
!!!35511991.java!!!	FakeExpandableAdapter(inout adapterRef : ResourceReference, inout binding : AdapterBinding, inout callback : LayoutlibCallback)
        mAdapterRef = adapterRef;
        mCallback = callback;

        createItems(binding, binding.getItemCount(), binding.getRepeatCount(), mGroupTypes, 1);
!!!35512119.java!!!	createItems(inout iterable : Iterable<DataBindingItem>, in itemCount : int, in repeatCount : int, inout types : List<ResourceReference>, in depth : int) : void
        // Need an array to count for each type.
        // This is likely too big, but is the max it can be.
        int[] typeCount = new int[itemCount];

        // we put several repeating sets.
        for (int r = 0 ; r < repeatCount ; r++) {
            // loop on the type of list items, and add however many for each type.
            for (DataBindingItem dataBindingItem : iterable) {
                ResourceReference viewRef = dataBindingItem.getViewReference();
                int typeIndex = types.indexOf(viewRef);
                if (typeIndex == -1) {
                    typeIndex = types.size();
                    types.add(viewRef);
                }

                List<DataBindingItem> children = dataBindingItem.getChildren();
                int count = dataBindingItem.getCount();

                // if there are children, we use the count as a repeat count for the children.
                if (children.size() > 0) {
                    count = 1;
                }

                int index = typeCount[typeIndex];
                typeCount[typeIndex] += count;

                for (int k = 0 ; k < count ; k++) {
                    AdapterItem item = new AdapterItem(dataBindingItem, typeIndex, mItems.size(),
                            index++);
                    mItems.add(item);

                    if (children.size() > 0) {
                        createItems(dataBindingItem, depth + 1);
                    }
                }
            }
        }
!!!35512247.java!!!	createItems(inout item : DataBindingItem, in depth : int) : void
        if (depth == 2) {
            createItems(item, item.getChildren().size(), item.getCount(), mChildrenTypes, depth);
        }
!!!35512375.java!!!	getChildItem(in groupPosition : int, in childPosition : int) : AdapterItem
        AdapterItem item = mItems.get(groupPosition);

        List<AdapterItem> children = item.getChildren();
        return children.get(childPosition);
!!!35512503.java!!!	getGroupCount() : int
        return mItems.size();
!!!35512631.java!!!	getChildrenCount(in groupPosition : int) : int
        AdapterItem item = mItems.get(groupPosition);
        return item.getChildren().size();
!!!35512759.java!!!	getGroup(in groupPosition : int) : Object
        return mItems.get(groupPosition);
!!!35512887.java!!!	getChild(in groupPosition : int, in childPosition : int) : Object
        return getChildItem(groupPosition, childPosition);
!!!35513015.java!!!	getGroupView(in groupPosition : int, inout isExpanded : boolean, inout convertView : View, inout parent : ViewGroup) : View
        // we don't care about recycling here because we never scroll.
        AdapterItem item = mItems.get(groupPosition);
        Pair<View, Boolean> pair = AdapterHelper.getView(item, null /*parentItem*/, parent,
                mCallback, mAdapterRef, mSkipCallbackParser);
        mSkipCallbackParser = pair.getSecond();
        return pair.getFirst();
!!!35513143.java!!!	getChildView(in groupPosition : int, in childPosition : int, inout isLastChild : boolean, inout convertView : View, inout parent : ViewGroup) : View
        // we don't care about recycling here because we never scroll.
        AdapterItem parentItem = mItems.get(groupPosition);
        AdapterItem item = getChildItem(groupPosition, childPosition);
        Pair<View, Boolean> pair = AdapterHelper.getView(item, parentItem, parent, mCallback,
                mAdapterRef, mSkipCallbackParser);
        mSkipCallbackParser = pair.getSecond();
        return pair.getFirst();
!!!35513271.java!!!	getGroupId(in groupPosition : int) : long
        return groupPosition;
!!!35513399.java!!!	getChildId(in groupPosition : int, in childPosition : int) : long
        return childPosition;
!!!35513527.java!!!	getCombinedGroupId(in groupId : long) : long
        return groupId << 16 | 0x0000FFFF;
!!!35513655.java!!!	getCombinedChildId(in groupId : long, in childId : long) : long
        return groupId << 16 | childId;
!!!35513783.java!!!	isChildSelectable(in groupPosition : int, in childPosition : int) : boolean
        return true;
!!!35513911.java!!!	onGroupCollapsed(in groupPosition : int) : void
        // pass
!!!35514039.java!!!	onGroupExpanded(in groupPosition : int) : void
        // pass
!!!35514167.java!!!	registerDataSetObserver(inout observer : DataSetObserver) : void
        // pass
!!!35514295.java!!!	unregisterDataSetObserver(inout observer : DataSetObserver) : void
        // pass
!!!35514423.java!!!	hasStableIds() : boolean
        return true;
!!!35514551.java!!!	areAllItemsEnabled() : boolean
        return true;
!!!35514679.java!!!	isEmpty() : boolean
        return mItems.isEmpty();
!!!35514807.java!!!	getChildType(in groupPosition : int, in childPosition : int) : int
        return getChildItem(groupPosition, childPosition).getType();
!!!35514935.java!!!	getChildTypeCount() : int
        return mChildrenTypes.size();
!!!35515063.java!!!	getGroupType(in groupPosition : int) : int
        return mItems.get(groupPosition).getType();
!!!35515191.java!!!	getGroupTypeCount() : int
        return mGroupTypes.size();
