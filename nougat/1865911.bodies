class CachedPathIterator
!!!35517367.java!!!	CachedPathIterator()
            next();
!!!35517495.java!!!	getCurrentSegmentLength() : float
            return mCurrentSegmentLength;
!!!35517623.java!!!	getWindingRule() : int
            return mWindingRule;
!!!35517751.java!!!	isDone() : boolean
            return isIteratorDone;
!!!35517879.java!!!	next() : void
            if (mNextIndex >= mTypes.length) {
                isIteratorDone = true;
                return;
            }

            if (mNextIndex >= 1) {
                // We've already called next() once so there is a previous segment in this path.
                // We want to get the coordinates where the path ends.
                getShapeEndPoint(mCurrentType, mCurrentCoords, mLastPoint);
            } else {
                // This is the first segment, no previous point so initialize to 0, 0
                mLastPoint[0] = mLastPoint[1] = 0f;
            }
            mCurrentType = mTypes[mNextIndex];
            mCurrentSegmentLength = mSegmentsLength[mNextIndex] - mOffsetLength;

            if (mOffsetLength > 0f && (mCurrentType == SEG_CUBICTO || mCurrentType == SEG_QUADTO)) {
                // We need to skip part of the start of the current segment (because
                // mOffsetLength > 0)
                float[] points = new float[8];

                if (mNextIndex < 1) {
                    points[0] = points[1] = 0f;
                } else {
                    getShapeEndPoint(mTypes[mNextIndex - 1], mCoordinates[mNextIndex - 1], points);
                }

                System.arraycopy(mCoordinates[mNextIndex], 0, points, 2,
                        mCoordinates[mNextIndex].length);
                float t0 = (mSegmentsLength[mNextIndex] - mCurrentSegmentLength) /
                        mSegmentsLength[mNextIndex];
                if (mCurrentType == SEG_CUBICTO) {
                    cubicCurveSegment(points, t0, 1f);
                } else {
                    quadCurveSegment(points, t0, 1f);
                }
                System.arraycopy(points, 2, mCurrentCoords, 0, mCoordinates[mNextIndex].length);
            } else {
                System.arraycopy(mCoordinates[mNextIndex], 0, mCurrentCoords, 0,
                        mCoordinates[mNextIndex].length);
            }

            mOffsetLength = 0f;
            mNextIndex++;
!!!35518007.java!!!	currentSegment(inout coords : float) : int
            System.arraycopy(mCurrentCoords, 0, coords, 0, getNumberOfPoints(mCurrentType) * 2);
            return mCurrentType;
!!!35518135.java!!!	currentSegment(inout coords : double) : int
            throw new UnsupportedOperationException();
!!!35518263.java!!!	getCurrentSegmentEnd(inout point : float) : void
            point[0] = mLastPoint[0];
            point[1] = mLastPoint[1];
!!!35518391.java!!!	jumpToSegment(in length : float) : void
            isIteratorDone = false;
            if (length <= 0f) {
                mNextIndex = 0;
                return;
            }

            float accLength = 0;
            float lastPoint[] = new float[2];
            for (mNextIndex = 0; mNextIndex < mTypes.length; mNextIndex++) {
                float segmentLength = mSegmentsLength[mNextIndex];
                if (accLength + segmentLength >= length && mTypes[mNextIndex] != SEG_MOVETO) {
                    float[] estimatedPoint = new float[2];
                    getPointAtLength(mTypes[mNextIndex],
                            mCoordinates[mNextIndex], lastPoint[0], lastPoint[1],
                            (length - accLength) / segmentLength,
                            estimatedPoint);

                    // This segment makes us go further than length so we go back one step,
                    // set a moveto and offset the length of the next segment by the length
                    // of this segment that we've already used.
                    mCurrentType = PathIterator.SEG_MOVETO;
                    mCurrentCoords[0] = estimatedPoint[0];
                    mCurrentCoords[1] = estimatedPoint[1];
                    mCurrentSegmentLength = 0;

                    // We need to offset next path length to account for the segment we've just
                    // skipped.
                    mOffsetLength = length - accLength;
                    return;
                }
                accLength += segmentLength;
                getShapeEndPoint(mTypes[mNextIndex], mCoordinates[mNextIndex], lastPoint);
            }
!!!35518519.java!!!	currentSegment(inout coords : float, in length : float) : int
            int type = currentSegment(coords);
            // If the length is greater than the current segment length, no need to find
            // the cut point. Same if this is a SEG_MOVETO.
            if (mCurrentSegmentLength <= length || type == SEG_MOVETO) {
                return type;
            }

            float t = length / getCurrentSegmentLength();

            // We find at which offset the end point is located within the coords array and set
            // a new end point to cut the segment short
            switch (type) {
                case SEG_CUBICTO:
                case SEG_QUADTO:
                    float[] curve = new float[8];
                    curve[0] = mLastPoint[0];
                    curve[1] = mLastPoint[1];
                    System.arraycopy(coords, 0, curve, 2, coords.length);
                    if (type == SEG_CUBICTO) {
                        cubicCurveSegment(curve, 0f, t);
                    } else {
                        quadCurveSegment(curve, 0f, t);
                    }
                    System.arraycopy(curve, 2, coords, 0, coords.length);
                    break;
                default:
                    float[] point = new float[2];
                    getPointAtLength(type, coords, mLastPoint[0], mLastPoint[1], t, point);
                    coords[0] = point[0];
                    coords[1] = point[1];
            }

            return type;
!!!35518647.java!!!	getTotalLength() : float
            return mTotalLength;
