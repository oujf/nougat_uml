class MemoryMappedFile_Delegate
!!!35529911.java!!!	mmapRO(inout path : String) : MemoryMappedFile
        if (!path.startsWith(TARGET_PATH)) {
            throw new ErrnoException("Custom timezone data files are not supported.", 1);
        }
        if (sRootPath == null) {
            throw new ErrnoException("Bridge has not been initialized properly.", 1);
        }
        path = path.substring(TARGET_PATH.length());
        try {
            File f = new File(sRootPath, path);
            if (!f.exists()) {
                throw new ErrnoException("File not found: " + f.getPath(), 1);
            }
            RandomAccessFile file = new RandomAccessFile(f, "r");
            try {
                long size = file.length();
                MemoryMappedFile_Delegate newDelegate = new MemoryMappedFile_Delegate(file);
                long filePointer = file.getFilePointer();
                MemoryMappedFile mmFile = new MemoryMappedFile(filePointer, size);
                long delegateIndex = sManager.addNewDelegate(newDelegate);
                sMemoryMappedFileMap.put(mmFile, delegateIndex);
                return mmFile;
            } finally {
                file.close();
            }
        } catch (IOException e) {
            throw new ErrnoException("mmapRO", 1, e);
        }
!!!35530039.java!!!	close(inout thisFile : MemoryMappedFile) : void
        Long index = sMemoryMappedFileMap.get(thisFile);
        if (index != null) {
            sMemoryMappedFileMap.remove(thisFile);
            sManager.removeJavaReferenceFor(index);
        }
!!!35530167.java!!!	bigEndianIterator(inout file : MemoryMappedFile) : BufferIterator
        MemoryMappedFile_Delegate delegate = getDelegate(file);
        return new BridgeBufferIterator(delegate.mSize, delegate.mMappedByteBuffer.duplicate());
!!!35530295.java!!!	MemoryMappedFile_Delegate(inout file : RandomAccessFile)
        mSize = file.length();
        // It's weird that map() takes size as long, but returns MappedByteBuffer which uses an int
        // to store the marker to the position.
        mMappedByteBuffer = file.getChannel().map(MapMode.READ_ONLY, 0, mSize);
        assert mMappedByteBuffer.order() == ByteOrder.BIG_ENDIAN;
!!!35530423.java!!!	setDataDir(inout path : File) : void
        sRootPath = path;
!!!35530551.java!!!	getDelegate(inout file : MemoryMappedFile) : MemoryMappedFile_Delegate
        Long index = sMemoryMappedFileMap.get(file);
        return index == null ? null : sManager.getDelegate(index);
