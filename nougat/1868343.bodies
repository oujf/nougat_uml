class LayoutParserWrapperTest
!!!35535159.java!!!	testDataBindingLayout() : void
        LayoutParserWrapper parser = getParserFromString(sDataBindingLayout);
        parser.peekTillLayoutStart();
        assertEquals("Expected START_TAG", START_TAG, parser.next());
        assertEquals("RelativeLayout", parser.getName());
        for (int next = parser.next(); next != START_TAG && next != END_DOCUMENT;
             next = parser.next());
        assertEquals("Expected START_TAG", START_TAG, parser.getEventType());
        assertEquals("TextView", parser.getName());
        assertEquals("layout_width incorrect for first text view.", "wrap_content",
                parser.getAttributeValue(NS_RESOURCES, "layout_width"));
        // Ensure that data-binding part is stripped.
        assertEquals("Bound attribute android:text incorrect", "World",
                parser.getAttributeValue(NS_RESOURCES, "text"));
        assertEquals("resource attribute 'id' for first text view incorrect.", "@+id/first",
                parser.getAttributeValue(NS_RESOURCES, "id"));
        for (int next = parser.next();
             (next != END_TAG || !"RelativeLayout".equals(parser.getName())) && next != END_DOCUMENT;
             next = parser.next());
        assertNotSame("Unexpected end of document", END_DOCUMENT, parser.getEventType());
        assertEquals("Document didn't end when expected.", END_DOCUMENT, parser.next());
!!!35535287.java!!!	testNonDataBindingLayout() : void
        LayoutParserWrapper parser = getParserFromString(sNonDataBindingLayout);
        parser.peekTillLayoutStart();
        assertEquals("Expected START_TAG", START_TAG, parser.next());
        assertEquals("RelativeLayout", parser.getName());
        for (int next = parser.next(); next != START_TAG && next != END_DOCUMENT;
             next = parser.next());
        assertEquals("Expected START_TAG", START_TAG, parser.getEventType());
        assertEquals("TextView", parser.getName());
        assertEquals("layout_width incorrect for first text view.", "wrap_content",
                parser.getAttributeValue(NS_RESOURCES, "layout_width"));
        // Ensure that value isn't modified.
        assertEquals("Bound attribute android:text incorrect", "@{user.firstName,default=World}",
                parser.getAttributeValue(NS_RESOURCES, "text"));
        assertEquals("resource attribute 'id' for first text view incorrect.", "@+id/first",
                parser.getAttributeValue(NS_RESOURCES, "id"));
        for (int next = parser.next();
             (next != END_TAG || !"RelativeLayout".equals(parser.getName())) && next != END_DOCUMENT;
             next = parser.next());
        assertNotSame("Unexpected end of document", END_DOCUMENT, parser.getEventType());
        assertEquals("Document didn't end when expected.", END_DOCUMENT, parser.next());
!!!35535415.java!!!	getParserFromString(inout layoutContent : String) : LayoutParserWrapper
        XmlPullParser parser = new KXmlParser();
        parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, true);
        parser.setInput(new StringReader(layoutContent));
        return new LayoutParserWrapper(parser);
