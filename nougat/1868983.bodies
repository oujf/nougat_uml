class ConfigGenerator
!!!35540663.java!!!	getFolderConfig() : FolderConfiguration
        FolderConfiguration config = new FolderConfiguration();
        config.createDefault();
        config.setDensityQualifier(new DensityQualifier(mDensity));
        config.setNavigationMethodQualifier(new NavigationMethodQualifier(mNavigation));
        if (mScreenWidth > mScreenHeight) {
            config.setScreenDimensionQualifier(new ScreenDimensionQualifier(mScreenWidth,
                    mScreenHeight));
        } else {
            config.setScreenDimensionQualifier(new ScreenDimensionQualifier(mScreenHeight,
                    mScreenWidth));
        }
        config.setScreenRatioQualifier(new ScreenRatioQualifier(mRatio));
        config.setScreenSizeQualifier(new ScreenSizeQualifier(mSize));
        config.setTextInputMethodQualifier(new TextInputMethodQualifier(mKeyboard));
        config.setTouchTypeQualifier(new TouchScreenQualifier(mTouchScreen));
        config.setKeyboardStateQualifier(new KeyboardStateQualifier(mKeyboardState));
        config.setScreenOrientationQualifier(new ScreenOrientationQualifier(mOrientation));

        config.updateScreenWidthAndHeight();

        // some default qualifiers.
        config.setUiModeQualifier(new UiModeQualifier(UiMode.NORMAL));
        config.setNightModeQualifier(new NightModeQualifier(NightMode.NOTNIGHT));
        config.setCountryCodeQualifier(new CountryCodeQualifier());
        config.setLayoutDirectionQualifier(new LayoutDirectionQualifier());
        config.setNetworkCodeQualifier(new NetworkCodeQualifier());
        config.setLocaleQualifier(new LocaleQualifier());
        config.setVersionQualifier(new VersionQualifier());
        return config;
!!!35540791.java!!!	getHardwareConfig() : HardwareConfig
        return new HardwareConfig(mScreenWidth, mScreenHeight, mDensity, mXdpi, mYdpi, mSize,
                mOrientation, null, mSoftButtons);
!!!35540919.java!!!	loadProperties(inout path : File) : String
        Properties p = new Properties();
        Map<String, String> map = Maps.newHashMap();
        try {
            p.load(new FileInputStream(path));
            for (String key : p.stringPropertyNames()) {
                map.put(key, p.getProperty(key));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return map;
!!!35541047.java!!!	getEnumMap(inout path : File) : String
        Map<String, Map<String, Integer>> map = Maps.newHashMap();
        try {
            XmlPullParser xmlPullParser = XmlPullParserFactory.newInstance().newPullParser();
            xmlPullParser.setInput(new FileInputStream(path), null);
            int eventType = xmlPullParser.getEventType();
            String attr = null;
            while (eventType != XmlPullParser.END_DOCUMENT) {
                if (eventType == XmlPullParser.START_TAG) {
                    if (TAG_ATTR.equals(xmlPullParser.getName())) {
                        attr = xmlPullParser.getAttributeValue(null, ATTR_NAME);
                    } else if (TAG_ENUM.equals(xmlPullParser.getName())
                            || TAG_FLAG.equals(xmlPullParser.getName())) {
                        String name = xmlPullParser.getAttributeValue(null, ATTR_NAME);
                        String value = xmlPullParser.getAttributeValue(null, ATTR_VALUE);
                        // Integer.decode cannot handle "ffffffff", see JDK issue 6624867
                        int i = (int) (long) Long.decode(value);
                        assert attr != null;
                        Map<String, Integer> attributeMap = map.get(attr);
                        if (attributeMap == null) {
                            attributeMap = Maps.newHashMap();
                            map.put(attr, attributeMap);
                        }
                        attributeMap.put(name, i);
                    }
                } else if (eventType == XmlPullParser.END_TAG) {
                    if (TAG_ATTR.equals(xmlPullParser.getName())) {
                        attr = null;
                    }
                }
                eventType = xmlPullParser.next();
            }
        } catch (XmlPullParserException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return map;
!!!35541175.java!!!	setScreenHeight(in height : int) : ConfigGenerator
        mScreenHeight = height;
        return this;
!!!35541303.java!!!	setScreenWidth(in width : int) : ConfigGenerator
        mScreenWidth = width;
        return this;
!!!35541431.java!!!	setXdpi(in xdpi : int) : ConfigGenerator
        mXdpi = xdpi;
        return this;
!!!35541559.java!!!	setYdpi(in ydpi : int) : ConfigGenerator
        mYdpi = ydpi;
        return this;
!!!35541687.java!!!	setOrientation(inout orientation : ScreenOrientation) : ConfigGenerator
        mOrientation = orientation;
        return this;
!!!35541815.java!!!	setDensity(inout density : Density) : ConfigGenerator
        mDensity = density;
        return this;
!!!35541943.java!!!	setRatio(inout ratio : ScreenRatio) : ConfigGenerator
        mRatio = ratio;
        return this;
!!!35542071.java!!!	setSize(inout size : ScreenSize) : ConfigGenerator
        mSize = size;
        return this;
!!!35542199.java!!!	setKeyboard(inout keyboard : Keyboard) : ConfigGenerator
        mKeyboard = keyboard;
        return this;
!!!35542327.java!!!	setTouchScreen(inout touchScreen : TouchScreen) : ConfigGenerator
        mTouchScreen = touchScreen;
        return this;
!!!35542455.java!!!	setKeyboardState(inout state : KeyboardState) : ConfigGenerator
        mKeyboardState = state;
        return this;
!!!35542583.java!!!	setSoftButtons(inout softButtons : boolean) : ConfigGenerator
        mSoftButtons = softButtons;
        return this;
!!!35542711.java!!!	setNavigation(inout navigation : Navigation) : ConfigGenerator
        mNavigation = navigation;
        return this;
