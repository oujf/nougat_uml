class AbstractClassAdapter
!!!35545911.java!!!	AbstractClassAdapter(inout cv : ClassVisitor)
        super(Main.ASM_VERSION, cv);
!!!35546039.java!!!	renameTypeDesc(inout desc : String) : String
        if (desc == null) {
            return null;
        }

        return renameType(Type.getType(desc));
!!!35546167.java!!!	renameType(inout type : Type) : String
        if (type == null) {
            return null;
        }

        if (type.getSort() == Type.OBJECT) {
            String in = type.getInternalName();
            return "L" + renameInternalType(in) + ";";
        } else if (type.getSort() == Type.ARRAY) {
            StringBuilder sb = new StringBuilder();
            for (int n = type.getDimensions(); n > 0; n--) {
                sb.append('[');
            }
            sb.append(renameType(type.getElementType()));
            return sb.toString();
        }
        return type.getDescriptor();
!!!35546295.java!!!	renameTypeAsType(inout type : Type) : Type
        if (type == null) {
            return null;
        }

        if (type.getSort() == Type.OBJECT) {
            String in = type.getInternalName();
            String newIn = renameInternalType(in);
            if (!newIn.equals(in)) {
                return Type.getType("L" + newIn + ";");
            }
        } else if (type.getSort() == Type.ARRAY) {
            StringBuilder sb = new StringBuilder();
            for (int n = type.getDimensions(); n > 0; n--) {
                sb.append('[');
            }
            sb.append(renameType(type.getElementType()));
            return Type.getType(sb.toString());
        }
        return type;
!!!35546423.java!!!	renameMethodDesc(inout desc : String) : String
        if (desc == null) {
            return null;
        }

        Type[] args = Type.getArgumentTypes(desc);

        StringBuilder sb = new StringBuilder("(");
        for (Type arg : args) {
            String name = renameType(arg);
            sb.append(name);
        }
        sb.append(')');

        Type ret = Type.getReturnType(desc);
        String name = renameType(ret);
        sb.append(name);

        return sb.toString();
!!!35546551.java!!!	renameTypeSignature(inout sig : String) : String
        if (sig == null) {
            return null;
        }
        SignatureReader reader = new SignatureReader(sig);
        SignatureWriter writer = new SignatureWriter();
        reader.accept(new RenameSignatureAdapter(writer));
        sig = writer.toString();
        return sig;
!!!35546679.java!!!	renameFieldSignature(inout sig : String) : String
        return renameTypeSignature(sig);
!!!35546807.java!!!	visit(in version : int, in access : int, inout name : String, inout signature : String, inout superName : String, inout interfaces : String) : void
        name = renameInternalType(name);
        superName = renameInternalType(superName);
        signature = renameTypeSignature(signature);
        if (interfaces != null) {
            for (int i = 0; i < interfaces.length; ++i) {
                interfaces[i] = renameInternalType(interfaces[i]);
            }
        }

        super.visit(version, access, name, signature, superName, interfaces);
!!!35546935.java!!!	visitInnerClass(inout name : String, inout outerName : String, inout innerName : String, in access : int) : void
        name = renameInternalType(name);
        outerName = renameInternalType(outerName);
        super.visitInnerClass(name, outerName, innerName, access);
!!!35547063.java!!!	visitOuterClass(inout owner : String, inout name : String, inout desc : String) : void
        super.visitOuterClass(renameInternalType(owner), name, renameTypeDesc(desc));
!!!35547191.java!!!	visitMethod(in access : int, inout name : String, inout desc : String, inout signature : String, inout exceptions : String) : MethodVisitor
        desc = renameMethodDesc(desc);
        signature = renameTypeSignature(signature);
        MethodVisitor mw = super.visitMethod(access, name, desc, signature, exceptions);
        return new RenameMethodAdapter(mw);
!!!35547319.java!!!	visitAnnotation(inout desc : String, inout visible : boolean) : AnnotationVisitor
        desc = renameTypeDesc(desc);
        return super.visitAnnotation(desc, visible);
!!!35547447.java!!!	visitField(in access : int, inout name : String, inout desc : String, inout signature : String, inout value : Object) : FieldVisitor
        desc = renameTypeDesc(desc);
        return super.visitField(access, name, desc, signature, value);
