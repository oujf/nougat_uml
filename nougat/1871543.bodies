class DependencyVisitor
!!!35552695.java!!!	DependencyVisitor(inout zipClasses : Map<String, ClassReader>, inout inKeep : Map<String, ClassReader>, inout outKeep : Map<String, ClassReader>, inout inDeps : Map<String,ClassReader>, inout outDeps : Map<String,ClassReader>)
            super(Main.ASM_VERSION);
            mZipClasses = zipClasses;
            mInKeep = inKeep;
            mOutKeep = outKeep;
            mInDeps = inDeps;
            mOutDeps = outDeps;
!!!35552823.java!!!	setClassName(inout className : String) : void
            mClassName = className;
!!!35552951.java!!!	considerName(inout className : String) : void
            if (className == null) {
                return;
            }

            className = internalToBinaryClassName(className);

            // exclude classes that have already been found or are marked to be excluded
            if (mInKeep.containsKey(className) ||
                    mOutKeep.containsKey(className) ||
                    mInDeps.containsKey(className) ||
                    mOutDeps.containsKey(className) ||
                    mExcludedClasses.contains(getOuterClassName(className))) {
                return;
            }

            // exclude classes that are not part of the JAR file being examined
            ClassReader cr = mZipClasses.get(className);
            if (cr == null) {
                return;
            }

            try {
                // exclude classes that are part of the default JRE (the one executing this program)
                if (className.startsWith("java.") ||
                        getClass().getClassLoader().loadClass(className) != null) {
                    return;
                }
            } catch (ClassNotFoundException e) {
                // ignore
            }

            // accept this class:
            // - android classes are added to dependencies
            // - non-android classes are added to the list of classes to keep as-is (they don't need
            //   to be stubbed).
            if (className.contains("android")) {  // TODO make configurable
                mOutDeps.put(className, cr);
            } else {
                mOutKeep.put(className, cr);
            }
!!!35553079.java!!!	considerNames(inout classNames : String) : void
            if (classNames != null) {
                for (String className : classNames) {
                    considerName(className);
                }
            }
!!!35553207.java!!!	considerSignature(inout signature : String) : void
            if (signature != null) {
                SignatureReader sr = new SignatureReader(signature);
                // SignatureReader.accept will call accessType so we don't really have
                // to differentiate where the signature comes from.
                sr.accept(new MySignatureVisitor());
            }
!!!35553335.java!!!	considerType(inout t : Type) : void
            if (t != null) {
                if (t.getSort() == Type.ARRAY) {
                    t = t.getElementType();
                }
                if (t.getSort() == Type.OBJECT) {
                    considerName(t.getInternalName());
                }
            }
!!!35553463.java!!!	considerDesc(inout desc : String) : void
            if (desc != null) {
                try {
                    Type t = Type.getType(desc);
                    considerType(t);
                } catch (ArrayIndexOutOfBoundsException e) {
                    // ignore, not a valid type.
                }
            }
!!!35553591.java!!!	visit(in version : int, in access : int, inout name : String, inout signature : String, inout superName : String, inout interfaces : String) : void
            // signature is the signature of this class. May be null if the class is not a generic
            // one, and does not extend or implement generic classes or interfaces.

            if (signature != null) {
                considerSignature(signature);
            }

            // superName is the internal of name of the super class (see getInternalName).
            // For interfaces, the super class is Object. May be null but only for the Object class.
            considerName(superName);

            // interfaces is the internal names of the class's interfaces (see getInternalName).
            // May be null.
            considerNames(interfaces);
!!!35553719.java!!!	visitAnnotation(inout desc : String, inout visible : boolean) : AnnotationVisitor
            // desc is the class descriptor of the annotation class.
            considerDesc(desc);
            return new MyAnnotationVisitor();
!!!35553847.java!!!	visitAttribute(inout attr : Attribute) : void
            // pass
!!!35553975.java!!!	visitEnd() : void
            // pass
!!!35554615.java!!!	visitField(in access : int, inout name : String, inout desc : String, inout signature : String, inout value : Object) : FieldVisitor
            // desc is the field's descriptor (see Type).
            considerDesc(desc);

            // signature is the field's signature. May be null if the field's type does not use
            // generic types.
            considerSignature(signature);

            return new MyFieldVisitor();
!!!35554743.java!!!	visitInnerClass(inout name : String, inout outerName : String, inout innerName : String, in access : int) : void
            // name is the internal name of an inner class (see getInternalName).
            considerName(name);
!!!35554871.java!!!	visitMethod(in access : int, inout name : String, inout desc : String, inout signature : String, inout exceptions : String) : MethodVisitor
            // desc is the method's descriptor (see Type).
            considerDesc(desc);
            // signature is the method's signature. May be null if the method parameters, return
            // type and exceptions do not use generic types.
            considerSignature(signature);

            return new MyMethodVisitor(mClassName);
!!!35554999.java!!!	visitOuterClass(inout owner : String, inout name : String, inout desc : String) : void
            // pass
!!!35555127.java!!!	visitSource(inout source : String, inout debug : String) : void
            // pass
