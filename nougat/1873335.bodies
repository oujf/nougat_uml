class DependencyVisitor
!!!35572023.java!!!	DependencyVisitor()
            super(Main.ASM_VERSION);
!!!35572151.java!!!	setDependencySet(inout set : Set<String>) : void
            mCurrentDepSet = set;
!!!35572279.java!!!	considerName(inout className : String) : void
            if (className == null) {
                return;
            }

            className = internalToBinaryClassName(className);

            try {
                // exclude classes that are part of the default JRE (the one executing this program)
                // or in java package (we won't be able to load them anyway).
                if (className.startsWith("java.") ||
                        getClass().getClassLoader().loadClass(className) != null) {
                    return;
                }
            } catch (ClassNotFoundException e) {
                // ignore
            }

            // Add it to the dependency set for the currently visited class, as needed.
            assert mCurrentDepSet != null;
            mCurrentDepSet.add(className);
!!!35572407.java!!!	considerNames(inout classNames : String) : void
            if (classNames != null) {
                for (String className : classNames) {
                    considerName(className);
                }
            }
!!!35572535.java!!!	considerSignature(inout signature : String) : void
            if (signature != null) {
                SignatureReader sr = new SignatureReader(signature);
                // SignatureReader.accept will call accessType so we don't really have
                // to differentiate where the signature comes from.
                sr.accept(new MySignatureVisitor());
            }
!!!35572663.java!!!	considerType(inout t : Type) : void
            if (t != null) {
                if (t.getSort() == Type.ARRAY) {
                    t = t.getElementType();
                }
                if (t.getSort() == Type.OBJECT) {
                    considerName(t.getInternalName());
                }
            }
!!!35572791.java!!!	considerDesc(inout desc : String) : boolean
            if (desc != null) {
                try {
                    if (desc.length() > 0 && desc.charAt(0) == '(') {
                        // This is a method descriptor with arguments and a return type.
                        Type t = Type.getReturnType(desc);
                        considerType(t);

                        for (Type arg : Type.getArgumentTypes(desc)) {
                            considerType(arg);
                        }

                    } else {
                        Type t = Type.getType(desc);
                        considerType(t);
                    }
                    return true;
                } catch (ArrayIndexOutOfBoundsException e) {
                    // ignore, not a valid type.
                }
            }
            return false;
!!!35572919.java!!!	visit(in version : int, in access : int, inout name : String, inout signature : String, inout superName : String, inout interfaces : String) : void
            // signature is the signature of this class. May be null if the class is not a generic
            // one, and does not extend or implement generic classes or interfaces.

            if (signature != null) {
                considerSignature(signature);
            }

            // superName is the internal of name of the super class (see getInternalName).
            // For interfaces, the super class is Object. May be null but only for the Object class.
            considerName(superName);

            // interfaces is the internal names of the class's interfaces (see getInternalName).
            // May be null.
            considerNames(interfaces);
!!!35573047.java!!!	visitAnnotation(inout desc : String, inout visible : boolean) : AnnotationVisitor
            // desc is the class descriptor of the annotation class.
            considerDesc(desc);
            return new MyAnnotationVisitor();
!!!35573175.java!!!	visitAttribute(inout attr : Attribute) : void
            // pass
!!!35573303.java!!!	visitEnd() : void
            // pass
!!!35573943.java!!!	visitField(in access : int, inout name : String, inout desc : String, inout signature : String, inout value : Object) : FieldVisitor
            // desc is the field's descriptor (see Type).
            considerDesc(desc);

            // signature is the field's signature. May be null if the field's type does not use
            // generic types.
            considerSignature(signature);

            return new MyFieldVisitor();
!!!35574071.java!!!	visitInnerClass(inout name : String, inout outerName : String, inout innerName : String, in access : int) : void
            // name is the internal name of an inner class (see getInternalName).
            // Note: outerName/innerName seems to be null when we're reading the
            // _Original_ClassName classes generated by layoutlib_create.
            if (outerName != null) {
                considerName(name);
            }
!!!35574199.java!!!	visitMethod(in access : int, inout name : String, inout desc : String, inout signature : String, inout exceptions : String) : MethodVisitor
            // desc is the method's descriptor (see Type).
            considerDesc(desc);
            // signature is the method's signature. May be null if the method parameters, return
            // type and exceptions do not use generic types.
            considerSignature(signature);

            return new MyMethodVisitor();
!!!35574327.java!!!	visitOuterClass(inout owner : String, inout name : String, inout desc : String) : void
            // pass
!!!35574455.java!!!	visitSource(inout source : String, inout debug : String) : void
            // pass
