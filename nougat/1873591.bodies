class MyMethodVisitor
!!!35574583.java!!!	MyMethodVisitor()
                super(Main.ASM_VERSION);
!!!35574711.java!!!	visitAnnotationDefault() : AnnotationVisitor
                return new MyAnnotationVisitor();
!!!35574839.java!!!	visitCode() : void
                // pass
!!!35574967.java!!!	visitFieldInsn(in opcode : int, inout owner : String, inout name : String, inout desc : String) : void
                // owner is the class that declares the field.
                considerName(owner);
                // desc is the field's descriptor (see Type).
                considerDesc(desc);
!!!35575095.java!!!	visitFrame(in type : int, in local : int, inout local2 : Object, in stack : int, inout stack2 : Object) : void
                // pass
!!!35575223.java!!!	visitIincInsn(in var : int, in increment : int) : void
                // pass -- an IINC instruction
!!!35575351.java!!!	visitInsn(in opcode : int) : void
                // pass -- a zero operand instruction
!!!35575479.java!!!	visitIntInsn(in opcode : int, in operand : int) : void
                // pass -- a single int operand instruction
!!!35575607.java!!!	visitJumpInsn(in opcode : int, inout label : Label) : void
                // pass -- a jump instruction
!!!35575735.java!!!	visitLabel(inout label : Label) : void
                // pass -- a label target
!!!35575863.java!!!	visitLdcInsn(inout cst : Object) : void
                if (cst instanceof Type) {
                    considerType((Type) cst);
                }
!!!35575991.java!!!	visitLineNumber(in line : int, inout start : Label) : void
                // pass
!!!35576119.java!!!	visitLocalVariable(inout name : String, inout desc : String, inout signature : String, inout start : Label, inout end : Label, in index : int) : void
                // desc is the type descriptor of this local variable.
                considerDesc(desc);
                // signature is the type signature of this local variable. May be null if the local
                // variable type does not use generic types.
                considerSignature(signature);
!!!35576247.java!!!	visitLookupSwitchInsn(inout dflt : Label, inout keys : int, inout labels : Label) : void
                // pass -- a lookup switch instruction
!!!35576375.java!!!	visitMaxs(in maxStack : int, in maxLocals : int) : void
                // pass
!!!35576503.java!!!	visitMethodInsn(in opcode : int, inout owner : String, inout name : String, inout desc : String, inout itf : boolean) : void

                // owner is the internal name of the method's owner class
                if (!considerDesc(owner) && owner.indexOf('/') != -1) {
                    considerName(owner);
                }
                // desc is the method's descriptor (see Type).
                considerDesc(desc);
!!!35576631.java!!!	visitMultiANewArrayInsn(inout desc : String, in dims : int) : void

                // desc an array type descriptor.
                considerDesc(desc);
!!!35576759.java!!!	visitParameterAnnotation(in parameter : int, inout desc : String, inout visible : boolean) : AnnotationVisitor
                // desc is the class descriptor of the annotation class.
                considerDesc(desc);
                return new MyAnnotationVisitor();
!!!35576887.java!!!	visitTableSwitchInsn(in min : int, in max : int, inout dflt : Label, inout labels : Label) : void
                // pass -- table switch instruction

!!!35577015.java!!!	visitTryCatchBlock(inout start : Label, inout end : Label, inout handler : Label, inout type : String) : void
                // type is the internal name of the type of exceptions handled by the handler,
                // or null to catch any exceptions (for "finally" blocks).
                considerName(type);
!!!35577143.java!!!	visitTypeInsn(in opcode : int, inout type : String) : void
                // type is the operand of the instruction to be visited. This operand must be the
                // internal name of an object or array class.
                considerName(type);
!!!35577271.java!!!	visitVarInsn(in opcode : int, in var : int) : void
                // pass -- local variable instruction
