class ClassLoader2
!!!35602871.java!!!	ClassLoader2()
            super(null);
!!!35602999.java!!!	add(inout className : String, inout definition : byte) : DelegateClassAdapterTest::ClassLoader2
            mClassDefs.put(className, definition);
            return this;
!!!35603127.java!!!	add(inout className : String, inout rewrittenClass : ClassWriter) : DelegateClassAdapterTest::ClassLoader2
            mClassDefs.put(className, rewrittenClass.toByteArray());
            return this;
!!!35603255.java!!!	getByteCode() : Set<Entry<String, byte[]>>
            return mClassDefs.entrySet();
!!!35603383.java!!!	findClass(inout name : String) : Class
            try {
                return super.findClass(name);
            } catch (ClassNotFoundException e) {

                byte[] def = mClassDefs.get(name);
                if (def != null) {
                    // Load the modified ClassWithNative from its bytes representation.
                    return defineClass(name, def, 0, def.length);
                }

                try {
                    // Load everything else from the original definition into the new class loader.
                    ClassReader cr = new ClassReader(name);
                    ClassWriter cw = new ClassWriter(0);
                    cr.accept(cw, 0);
                    byte[] bytes = cw.toByteArray();
                    return defineClass(name, bytes, 0, bytes.length);

                } catch (IOException ioe) {
                    throw new RuntimeException(ioe);
                }
            }
!!!35603511.java!!!	callGet(inout instance : Object, in a : int, in b : long) : int
            Method m = instance.getClass().getMethod("get",
                    int.class, long.class);

            Object result = m.invoke(instance, a, b);
            return (Integer) result;
!!!35603639.java!!!	callGet_Original(inout instance : Object, in a : int, in b : long) : int
            Method m = instance.getClass().getMethod("get_Original",
                    int.class, long.class);

            Object result = m.invoke(instance, a, b);
            return (Integer) result;
!!!35603767.java!!!	callMethod(inout instance : Object, inout methodName : String, inout makePublic : boolean) : T
            Method m = instance.getClass().getDeclaredMethod(methodName, (Class<?>[])null);

            boolean wasAccessible = m.isAccessible();
            if (makePublic && !wasAccessible) {
                m.setAccessible(true);
            }

            Object result = m.invoke(instance, (Object[])null);

            if (makePublic && !wasAccessible) {
                m.setAccessible(false);
            }

            return (T) result;
!!!35603895.java!!!	callAdd(inout instance : Object, in a : int, in b : int) : int
            Method m = instance.getClass().getMethod("add",
                    int.class, int.class);

            Object result = m.invoke(instance, a, b);
            return (Integer) result;
!!!35604023.java!!!	callCallNativeInstance(inout instance : Object, in a : int, in d : double, inout o : Object) : int
            Method m = instance.getClass().getMethod("callNativeInstance",
                    int.class, double.class, Object[].class);

            Object result = m.invoke(instance, a, d, o);
            return (Integer) result;
