class StubMethodAdapterTest
!!!35606455.java!!!	testBoolean() : void
        final String methodName = "returnTrue";
        // First don't change the method and assert that it returns true
        testBoolean((name, type) -> false, Assert::assertTrue, methodName);
        // Change the method now and assert that it returns false.
        testBoolean((name, type) -> methodName.equals(name) &&
                Type.BOOLEAN_TYPE.equals(type.getReturnType()), Assert::assertFalse, methodName);
!!!35606583.java!!!	testBoolean(inout methodPredicate : BiPredicate<String, Type>, inout assertion : Consumer<Boolean>, inout methodName : String) : void
        ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_MAXS);
        // Always rename the class to avoid conflict with the original class.
        String newClassName = STUB_CLASS_NAME + '_';
        new ClassReader(STUB_CLASS_NAME).accept(
                new ClassAdapter(newClassName, writer, methodPredicate), 0);
        MyClassLoader myClassLoader = new MyClassLoader(newClassName, writer.toByteArray());
        Class<?> aClass = myClassLoader.loadClass(newClassName);
        assertTrue("StubClass not loaded by the classloader. Likely a bug in the test.",
                myClassLoader.findClassCalled);
        Method method = aClass.getMethod(methodName);
        Object o = aClass.newInstance();
        assertion.accept((Boolean) method.invoke(o));
