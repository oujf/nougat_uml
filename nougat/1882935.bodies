class Operation
!!!35615927.java!!!	Operation(inout process : Proc, inout loadedClass : LoadedClass, in startTimeNanos : long, in index : int, inout type : Operation::Type)
        this.process = process;
        this.loadedClass = loadedClass;
        this.startTimeNanos = startTimeNanos;
        this.index = index;
        this.type = type;
!!!35616055.java!!!	inclusiveTimeNanos() : long
        if (endTimeNanos == -1) {
            throw new IllegalStateException("End time hasn't been set yet: "
                    + loadedClass.name);
        }

        return endTimeNanos - startTimeNanos;
!!!35616183.java!!!	exclusiveTimeMicros() : int
        long exclusive = inclusiveTimeNanos();

        for (Operation child : subops) {
            exclusive -= child.inclusiveTimeNanos();
        }

        if (exclusive < 0) {
            throw new AssertionError(loadedClass.name);
        }

        return nanosToMicros(exclusive);
!!!35616311.java!!!	medianExclusiveTimeMicros() : int
        switch (type) {
            case LOAD: return loadedClass.medianLoadTimeMicros();
            case INIT: return loadedClass.medianInitTimeMicros();
            default: throw new AssertionError();
        }
!!!35616439.java!!!	nanosToMicros(in nanos : long) : int
        long micros = nanos / 1000;
        int microsInt = (int) micros;
        if (microsInt != micros) {
            throw new RuntimeException("Integer overflow: " + nanos);
        }
        return microsInt;
!!!35616567.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
        sb.append(type.toString());
        sb.append(' ');
        sb.append(loadedClass.toString());
        if (subops.size() > 0) {
            sb.append(" (");
            sb.append(subops.size());
            sb.append(" sub ops)");
        }
        return sb.toString();
