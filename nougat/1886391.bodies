class DumpDataIO
!!!35626807.java!!!	serialize(inout data : Collection<DumpData>) : String
      // We'll do this by hand, constructing a DOM or similar is too complicated for our simple
      // use case.

      StringBuilder sb = new StringBuilder();
      sb.append("<preloaded-classes-data>\n");

      for (DumpData d : data) {
          serialize(d, sb);
      }

      sb.append("</preloaded-classes-data>\n");
      return sb.toString();
!!!35626935.java!!!	serialize(inout d : DumpData, inout sb : StringBuilder) : void
      sb.append("<data package=\"" + d.packageName + "\" date=\"" +
              DateFormat.getDateTimeInstance().format(d.date) +"\">\n");

      for (Map.Entry<String, String> e : d.dumpData.entrySet()) {
          sb.append("<class name=\"" + e.getKey() + "\" classloader=\"" + e.getValue() + "\"/>\n");
      }

      sb.append("</data>\n");
!!!35627063.java!!!	deserialize(inout f : File) : DumpData
      // Use SAX parsing. Our format is very simple. Don't do any schema validation or such.

      SAXParserFactory spf = SAXParserFactory.newInstance();
      spf.setNamespaceAware(false);
      SAXParser saxParser = spf.newSAXParser();

      XMLReader xmlReader = saxParser.getXMLReader();
      DumpDataContentHandler ddch = new DumpDataContentHandler();
      xmlReader.setContentHandler(ddch);
      xmlReader.parse(new InputSource(new FileReader(f)));

      return ddch.data;
