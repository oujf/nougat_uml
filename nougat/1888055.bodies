class ComputeThresholdAction
!!!35630903.java!!!	ComputeThresholdAction(inout name : String, inout dataTableModel : DumpTableModel, in threshold : int, inout blacklist : String)
        super(name);
        this.dataTableModel = dataTableModel;
        this.threshold = threshold;
        if (blacklist != null) {
            this.blacklist = Pattern.compile(blacklist);
        }
!!!35631031.java!!!	actionPerformed(inout e : ActionEvent) : void
        List<DumpData> data = dataTableModel.getData();
        if (data.size() == 0) {
            Main.getUI().showMessageDialog("No data available, please scan packages or run "
                    + "monkeys.");
            return;
        }
        if (data.size() == 1) {
            Main.getUI().showMessageDialog("Cannot compute list from only one data set, please "
                    + "scan packages or run monkeys.");
            return;
        }

        new Thread(this).start();
!!!35631159.java!!!	run() : void
        Main.getUI().showWaitDialog();

        Map<String, Set<String>> uses = new HashMap<String, Set<String>>();
        for (DumpData d : dataTableModel.getData()) {
            Main.getUI().updateWaitDialog("Merging " + d.getPackageName());
            updateClassUse(d.getPackageName(), uses, getBootClassPathClasses(d.getDumpData()));
        }

        Main.getUI().updateWaitDialog("Computing thresholded set");
        Set<String> result = fromThreshold(uses, blacklist, threshold);
        Main.getUI().hideWaitDialog();

        boolean ret = Main.getUI().showConfirmDialog("Computed a set with " + result.size()
                + " classes, would you like to save to disk?", "Save?");
        if (ret) {
            JFileChooser jfc = new JFileChooser();
            int ret2 = jfc.showSaveDialog(Main.getUI());
            if (ret2 == JFileChooser.APPROVE_OPTION) {
                File f = jfc.getSelectedFile();
                saveSet(result, f);
            }
        }
!!!35631287.java!!!	fromThreshold(inout classUses : Map<String, Set<String>>, inout blacklist : Pattern, in threshold : int) : String
        TreeSet<String> ret = new TreeSet<>(); // TreeSet so it's nicely ordered by name.

        for (Map.Entry<String, Set<String>> e : classUses.entrySet()) {
            if (e.getValue().size() >= threshold) {
                if (blacklist == null || !blacklist.matcher(e.getKey()).matches()) {
                    ret.add(e.getKey());
                }
            }
        }

        return ret;
!!!35631415.java!!!	updateClassUse(inout pkg : String, inout classUses : Map<String, Set<String>>, inout classes : Set<String>) : void
        for (String className : classes) {
            Set<String> old = classUses.get(className);
            if (old == null) {
                classUses.put(className, new HashSet<String>());
            }
            classUses.get(className).add(pkg);
        }
!!!35631543.java!!!	getBootClassPathClasses(inout source : Map<String, String>) : String
        Set<String> ret = new HashSet<>();
        for (Map.Entry<String, String> e : source.entrySet()) {
            if (e.getValue() == null) {
                ret.add(e.getKey());
            }
        }
        return ret;
!!!35631671.java!!!	saveSet(inout result : Set<String>, inout f : File) : void
        try {
            PrintWriter out = new PrintWriter(f);
            for (String s : result) {
                out.println(s);
            }
            out.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
