class Bits
!!!643383.java!!!	Bits()
        // This space intentionally left blank.
!!!643511.java!!!	makeBitSet(in max : int) : int
        int size = (max + 0x1f) >> 5;
        return new int[size];
!!!643639.java!!!	getMax(inout bits : int) : int
        return bits.length * 0x20;
!!!643767.java!!!	get(inout bits : int, in idx : int) : boolean
        int arrayIdx = idx >> 5;
        int bit = 1 << (idx & 0x1f);
        return (bits[arrayIdx] & bit) != 0;
!!!643895.java!!!	set(inout bits : int, in idx : int, inout value : boolean) : void
        int arrayIdx = idx >> 5;
        int bit = 1 << (idx & 0x1f);

        if (value) {
            bits[arrayIdx] |= bit;
        } else {
            bits[arrayIdx] &= ~bit;
        }
!!!644023.java!!!	set(inout bits : int, in idx : int) : void
        int arrayIdx = idx >> 5;
        int bit = 1 << (idx & 0x1f);
        bits[arrayIdx] |= bit;
!!!644151.java!!!	clear(inout bits : int, in idx : int) : void
        int arrayIdx = idx >> 5;
        int bit = 1 << (idx & 0x1f);
        bits[arrayIdx] &= ~bit;
!!!644279.java!!!	isEmpty(inout bits : int) : boolean
        int len = bits.length;

        for (int i = 0; i < len; i++) {
            if (bits[i] != 0) {
                return false;
            }
        }

        return true;
!!!644407.java!!!	bitCount(inout bits : int) : int
        int len = bits.length;
        int count = 0;

        for (int i = 0; i < len; i++) {
            count += Integer.bitCount(bits[i]);
        }

        return count;
!!!644535.java!!!	anyInRange(inout bits : int, in start : int, in end : int) : boolean
        int idx = findFirst(bits, start);
        return (idx >= 0) && (idx < end);
!!!644663.java!!!	findFirst(inout bits : int, in idx : int) : int
        int len = bits.length;
        int minBit = idx & 0x1f;

        for (int arrayIdx = idx >> 5; arrayIdx < len; arrayIdx++) {
            int word = bits[arrayIdx];
            if (word != 0) {
                int bitIdx = findFirst(word, minBit);
                if (bitIdx >= 0) {
                    return (arrayIdx << 5) + bitIdx;
                }
            }
            minBit = 0;
        }

        return -1;
!!!644791.java!!!	findFirst(in value : int, in idx : int) : int
        value &= ~((1 << idx) - 1); // Mask off too-low bits.
        int result = Integer.numberOfTrailingZeros(value);
        return (result == 32) ? -1 : result;
!!!644919.java!!!	or(inout a : int, inout b : int) : void
        for (int i = 0; i < b.length; i++) {
            a[i] |= b[i];
        }
!!!645047.java!!!	toHuman(inout bits : int) : String
        StringBuilder sb = new StringBuilder();

        boolean needsComma = false;

        sb.append('{');

        int bitsLength = 32 * bits.length;
        for (int i = 0; i < bitsLength; i++) {
            if (Bits.get(bits, i)) {
                if (needsComma) {
                    sb.append(',');
                }
                needsComma = true;
                sb.append(i);
            }
        }
        sb.append('}');

        return sb.toString();
