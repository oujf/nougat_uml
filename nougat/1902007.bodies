class WifiP2pGroupList
!!!35732279.java!!!	WifiP2pGroupList()
        this(null, null);
!!!35732407.java!!!	WifiP2pGroupList(inout source : WifiP2pGroupList, inout listener : WifiP2pGroupList::GroupDeleteListener)
        mListener = listener;
        mGroups = new LruCache<Integer, WifiP2pGroup>(CREDENTIAL_MAX_NUM) {
            @Override
            protected void entryRemoved(boolean evicted, Integer netId,
                    WifiP2pGroup oldValue, WifiP2pGroup newValue) {
                if (mListener != null && !isClearCalled) {
                    mListener.onDeleteGroup(oldValue.getNetworkId());
                }
            }
        };

        if (source != null) {
            for (Map.Entry<Integer, WifiP2pGroup> item : source.mGroups.snapshot().entrySet()) {
                mGroups.put(item.getKey(), item.getValue());
            }
        }
!!!35732535.java!!!	getGroupList() : WifiP2pGroup
        return mGroups.snapshot().values();
!!!35732663.java!!!	add(inout group : WifiP2pGroup) : void
        mGroups.put(group.getNetworkId(), group);
!!!35732791.java!!!	remove(in netId : int) : void
        mGroups.remove(netId);
!!!35732919.java!!!	remove(inout deviceAddress : String) : void
        remove(getNetworkId(deviceAddress));
!!!35733047.java!!!	clear() : boolean
        if (mGroups.size() == 0) return false;
        isClearCalled = true;
        mGroups.evictAll();
        isClearCalled = false;
        return true;
!!!35733175.java!!!	getNetworkId(inout deviceAddress : String) : int
        if (deviceAddress == null) return -1;

        final Collection<WifiP2pGroup> groups = mGroups.snapshot().values();
        for (WifiP2pGroup grp: groups) {
            if (deviceAddress.equalsIgnoreCase(grp.getOwner().deviceAddress)) {
                // update cache ordered.
                mGroups.get(grp.getNetworkId());
                return grp.getNetworkId();
            }
        }
        return -1;
!!!35733303.java!!!	getNetworkId(inout deviceAddress : String, inout ssid : String) : int
        if (deviceAddress == null || ssid == null) {
            return -1;
        }

        final Collection<WifiP2pGroup> groups = mGroups.snapshot().values();
        for (WifiP2pGroup grp: groups) {
            if (deviceAddress.equalsIgnoreCase(grp.getOwner().deviceAddress) &&
                    ssid.equals(grp.getNetworkName())) {
                // update cache ordered.
                mGroups.get(grp.getNetworkId());
                return grp.getNetworkId();
            }
        }

        return -1;
!!!35733431.java!!!	getOwnerAddr(in netId : int) : String
        WifiP2pGroup grp = mGroups.get(netId);
        if (grp != null) {
            return grp.getOwner().deviceAddress;
        }
        return null;
!!!35733559.java!!!	contains(in netId : int) : boolean
        final Collection<WifiP2pGroup> groups = mGroups.snapshot().values();
        for (WifiP2pGroup grp: groups) {
            if (netId == grp.getNetworkId()) {
                return true;
            }
        }
        return false;
!!!35733687.java!!!	toString() : String
        StringBuffer sbuf = new StringBuffer();

        final Collection<WifiP2pGroup> groups = mGroups.snapshot().values();
        for (WifiP2pGroup grp: groups) {
            sbuf.append(grp).append("\n");
        }
        return sbuf.toString();
!!!35733815.java!!!	describeContents() : int
        return 0;
!!!35733943.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        final Collection<WifiP2pGroup> groups = mGroups.snapshot().values();
        dest.writeInt(groups.size());
        for(WifiP2pGroup group : groups) {
            dest.writeParcelable(group, flags);
        }
