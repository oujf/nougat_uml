class WifiP2pUpnpServiceResponse
!!!35754167.java!!!	getVersion() : int
        return mVersion;
!!!35754295.java!!!	getUniqueServiceNames() : String
        return mUniqueServiceNames;
!!!35754423.java!!!	WifiP2pUpnpServiceResponse(in status : int, in transId : int, inout dev : WifiP2pDevice, inout data : byte)
        super(WifiP2pServiceInfo.SERVICE_TYPE_UPNP,
                status, transId, dev, data);
        if (!parse()) {
            throw new IllegalArgumentException("Malformed upnp service response");
        }
!!!35754551.java!!!	parse() : boolean
        /*
         * The data format is as follows.
         *
         * ______________________________________________________
         * |  Version (1)  |          USN (Variable)            |
         */
        if (mData == null) {
            // the empty is OK.
            return true;
        }

        if (mData.length < 1) {
            return false;
        }

        mVersion = mData[0] & 0xff;
        String[] names = new String(mData, 1, mData.length-1).split(",");
        mUniqueServiceNames = new ArrayList<String>();
        for (String name : names) {
            mUniqueServiceNames.add(name);
        }
        return true;
!!!35754679.java!!!	toString() : String
        StringBuffer sbuf = new StringBuffer();
        sbuf.append("serviceType:UPnP(").append(mServiceType).append(")");
        sbuf.append(" status:").append(Status.toString(mStatus));
        sbuf.append(" srcAddr:").append(mDevice.deviceAddress);
        sbuf.append(" version:").append(String.format("%02x", mVersion));
        if (mUniqueServiceNames != null) {
            for (String name : mUniqueServiceNames) {
                sbuf.append(" usn:").append(name);
            }
        }
        return sbuf.toString();
!!!35754807.java!!!	newInstance(in status : int, in transId : int, inout device : WifiP2pDevice, inout data : byte) : WifiP2pUpnpServiceResponse
        if (status != WifiP2pServiceResponse.Status.SUCCESS) {
            return new WifiP2pUpnpServiceResponse(status, transId, device, null);
        }

        try {
            return new WifiP2pUpnpServiceResponse(status, transId, device, data);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }
        return null;
