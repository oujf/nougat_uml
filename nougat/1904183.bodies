class WifiP2pDnsSdServiceResponse
!!!35751863.java!!!	getDnsQueryName() : String
        return mDnsQueryName;
!!!35751991.java!!!	getDnsType() : int
        return mDnsType;
!!!35752119.java!!!	getVersion() : int
        return mVersion;
!!!35752247.java!!!	getInstanceName() : String
        return mInstanceName;
!!!35752375.java!!!	getTxtRecord() : String
        return mTxtRecord;
!!!35752503.java!!!	toString() : String
        StringBuffer sbuf = new StringBuffer();
        sbuf.append("serviceType:DnsSd(").append(mServiceType).append(")");
        sbuf.append(" status:").append(Status.toString(mStatus));
        sbuf.append(" srcAddr:").append(mDevice.deviceAddress);
        sbuf.append(" version:").append(String.format("%02x", mVersion));
        sbuf.append(" dnsName:").append(mDnsQueryName);
        sbuf.append(" TxtRecord:");
        for (String key : mTxtRecord.keySet()) {
            sbuf.append(" key:").append(key).append(" value:").append(mTxtRecord.get(key));
        }
        if (mInstanceName != null) {
            sbuf.append(" InsName:").append(mInstanceName);
        }
        return sbuf.toString();
!!!35752631.java!!!	WifiP2pDnsSdServiceResponse(in status : int, in tranId : int, inout dev : WifiP2pDevice, inout data : byte)
        super(WifiP2pServiceInfo.SERVICE_TYPE_BONJOUR,
                status, tranId, dev, data);
        if (!parse()) {
            throw new IllegalArgumentException("Malformed bonjour service response");
        }
!!!35752759.java!!!	parse() : boolean
        /*
         * The data format from Wi-Fi Direct spec is as follows.
         * ________________________________________________
         * |  encoded and compressed dns name (variable)  |
         * ________________________________________________
         * |       dnstype(2byte)      |  version(1byte)  |
         * ________________________________________________
         * |              RDATA (variable)                |
         */
        if (mData == null) {
            // the empty is OK.
            return true;
        }

        DataInputStream dis = new DataInputStream(new ByteArrayInputStream(mData));

        mDnsQueryName = readDnsName(dis);
        if (mDnsQueryName == null) {
            return false;
        }

        try {
            mDnsType = dis.readUnsignedShort();
            mVersion = dis.readUnsignedByte();
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }

        if (mDnsType == WifiP2pDnsSdServiceInfo.DNS_TYPE_PTR) {
            String rData = readDnsName(dis);
            if (rData == null) {
                return false;
            }
            if (rData.length() <= mDnsQueryName.length()) {
                return false;
            }

            mInstanceName = rData.substring(0,
                    rData.length() - mDnsQueryName.length() -1);
        } else if (mDnsType == WifiP2pDnsSdServiceInfo.DNS_TYPE_TXT) {
            return readTxtData(dis);
        } else {
            return false;
        }

        return true;
!!!35752887.java!!!	readDnsName(inout dis : DataInputStream) : String
        StringBuffer sb = new StringBuffer();

        // copy virtual memory packet.
        HashMap<Integer, String> vmpack = new HashMap<Integer, String>(sVmpack);
        if (mDnsQueryName != null) {
            vmpack.put(0x27, mDnsQueryName);
        }
        try {
            while (true) {
                int i = dis.readUnsignedByte();
                if (i == 0x00) {
                    return sb.toString();
                } else if (i == 0xc0) {
                    // refer to pointer.
                    String ref = vmpack.get(dis.readUnsignedByte());
                    if (ref == null) {
                        //invalid.
                        return null;
                    }
                    sb.append(ref);
                    return sb.toString();
                } else {
                    byte[] data = new byte[i];
                    dis.readFully(data);
                    sb.append(new String(data));
                    sb.append(".");
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
!!!35753015.java!!!	readTxtData(inout dis : DataInputStream) : boolean
        try {
            while (dis.available() > 0) {
                int len = dis.readUnsignedByte();
                if (len == 0) {
                    break;
                }
                byte[] data = new byte[len];
                dis.readFully(data);
                String[] keyVal = new String(data).split("=");
                if (keyVal.length != 2) {
                    return false;
                }
                mTxtRecord.put(keyVal[0], keyVal[1]);
            }
            return true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
!!!35753143.java!!!	newInstance(in status : int, in transId : int, inout dev : WifiP2pDevice, inout data : byte) : WifiP2pDnsSdServiceResponse
        if (status != WifiP2pServiceResponse.Status.SUCCESS) {
            return new WifiP2pDnsSdServiceResponse(status,
                    transId, dev, null);
        }
        try {
            return new WifiP2pDnsSdServiceResponse(status,
                    transId, dev, data);
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        }
        return null;
