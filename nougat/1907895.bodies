class BaseCompilationTest
!!!35761847.java!!!	copyResourceTo(inout name : String, inout path : String) : void
        copyResourceTo(name, new File(testFolder, path));
!!!35761975.java!!!	copyResourceTo(inout name : String, inout path : String, inout replacements : Map<String, String>) : void
        copyResourceTo(name, new File(testFolder, path), replacements);
!!!35762103.java!!!	copyResourceDirectory(inout name : String, inout targetPath : String) : void
        URL dir = getClass().getResource(name);
        assertNotNull(dir);
        assertEquals("file", dir.getProtocol());
        File folder = new File(dir.toURI());
        assertTrue(folder.isDirectory());
        File target = new File(testFolder, targetPath);
        int len = folder.getAbsolutePath().length() + 1;
        for (File item : FileUtils.listFiles(folder, null, true)) {
            if (item.getAbsolutePath().equals(folder.getAbsolutePath())) {
                continue;
            }
            String resourcePath = item.getAbsolutePath().substring(len);

            copyResourceTo(name + "/" + resourcePath, new File(target, resourcePath));
        }
!!!35762231.java!!!	clear() : void
        if (testFolder.exists()) {
            FileUtils.forceDelete(testFolder);
        }
!!!35762359.java!!!	extract(inout pathInApp : String, inout location : Location) : String
        File file = new File(testFolder, pathInApp);
        assertTrue(file.exists());
        StringBuilder result = new StringBuilder();
        List<String> lines = FileUtils.readLines(file);
        for (int i = location.startLine; i <= location.endLine; i++) {
            if (i > location.startLine) {
                result.append("\n");
            }
            String line = lines.get(i);
            int start = 0;
            if (i == location.startLine) {
                start = location.startOffset;
            }
            int end = line.length() - 1; // inclusive
            if (i == location.endLine) {
                end = location.endOffset;
            }
            result.append(line.substring(start, end + 1));
        }
        return result.toString();
!!!35762487.java!!!	copyResourceTo(inout name : String, inout targetFile : File) : void
        File directory = targetFile.getParentFile();
        FileUtils.forceMkdir(directory);
        InputStream contents = getClass().getResourceAsStream(name);
        FileOutputStream fos = new FileOutputStream(targetFile);
        IOUtils.copy(contents, fos);
        IOUtils.closeQuietly(fos);
        IOUtils.closeQuietly(contents);
!!!35762615.java!!!	toMap(inout  : String...keysAndValues) : String
        assertEquals(0, keysAndValues.length % 2);
        Map<String, String> map = new HashMap<String, String>();
        for (int i = 0; i < keysAndValues.length; i += 2) {
            map.put(keysAndValues[i], keysAndValues[i + 1]);
        }
        return map;
!!!35762743.java!!!	copyResourceTo(inout name : String, inout targetFile : File, inout replacements : Map<String, String>) : void
        if (replacements.isEmpty()) {
            copyResourceTo(name, targetFile);
        }
        InputStream inputStream = getClass().getResourceAsStream(name);
        final String contents = IOUtils.toString(inputStream);
        IOUtils.closeQuietly(inputStream);

        StringBuilder out = new StringBuilder(contents.length());
        final Matcher matcher = VARIABLES.matcher(contents);
        int location = 0;
        while (matcher.find()) {
            int start = matcher.start();
            if (start > location) {
                out.append(contents, location, start);
            }
            final String key = matcher.group(1);
            final String replacement = replacements.get(key);
            if (replacement != null) {
                out.append(replacement);
            }
            location = matcher.end();
        }
        if (location < contents.length()) {
            out.append(contents, location, contents.length());
        }

        FileUtils.writeStringToFile(targetFile, out.toString());
!!!35762871.java!!!	prepareProject() : void
        prepareApp(null);
!!!35762999.java!!!	addDefaults(inout map : Map<String, String>) : String
        if (map == null) {
            map = new HashMap<String, String>();
        }
        if (!map.containsKey(KEY_MANIFEST_PACKAGE)) {
            map.put(KEY_MANIFEST_PACKAGE, DEFAULT_APP_PACKAGE);
        }
        if (!map.containsKey(KEY_SETTINGS_INCLUDES)) {
            map.put(KEY_SETTINGS_INCLUDES, "include ':app'");
        }
        return map;
!!!35763127.java!!!	prepareApp(inout replacements : Map<String, String>) : void
        replacements = addDefaults(replacements);
        // how to get build folder, pass from gradle somehow ?
        FileUtils.forceMkdir(testFolder);
        copyResourceTo("/AndroidManifest.xml",
                new File(testFolder, "app/src/main/AndroidManifest.xml"), replacements);
        copyResourceTo("/project_build.gradle", new File(testFolder, "build.gradle"), replacements);
        copyResourceTo("/app_build.gradle", new File(testFolder, "app/build.gradle"), replacements);
        copyResourceTo("/settings.gradle", new File(testFolder, "settings.gradle"), replacements);
        File localProperties = new File("../local.properties");
        if (localProperties.exists()) {
            FileUtils.copyFile(localProperties, new File(testFolder, "local.properties"));
        }
        FileUtils.copyFile(new File("../propLoader.gradle"),
                new File(testFolder, "propLoaderClone.gradle"));
        FileUtils.copyFile(new File("../gradlew"), new File(testFolder, "gradlew"));
        FileUtils.copyDirectory(new File("../gradle"), new File(testFolder, "gradle"));
!!!35763255.java!!!	prepareModule(inout moduleName : String, inout packageName : String, inout replacements : Map<String, String>) : void
        replacements = addDefaults(replacements);
        replacements.put(KEY_MANIFEST_PACKAGE, packageName);
        File moduleFolder = new File(testFolder, moduleName);
        if (moduleFolder.exists()) {
            FileUtils.forceDelete(moduleFolder);
        }
        FileUtils.forceMkdir(moduleFolder);
        copyResourceTo("/AndroidManifest.xml",
                new File(moduleFolder, "src/main/AndroidManifest.xml"), replacements);
        copyResourceTo("/module_build.gradle", new File(moduleFolder, "build.gradle"),
                replacements);
!!!35763383.java!!!	runGradle(inout  : String...params) : CompilationResult
        setExecutable();
        File pathToExecutable = new File(testFolder, "gradlew");
        List<String> args = new ArrayList<String>();
        args.add(pathToExecutable.getAbsolutePath());
        args.add("-P" + PRINT_ENCODED_ERRORS_PROPERTY + "=true");
        if ("true".equals(System.getProperties().getProperty("useReleaseVersion", "false"))) {
            args.add("-PuseReleaseVersion=true");
        }
        if ("true".equals(System.getProperties().getProperty("addRemoteRepos", "false"))) {
            args.add("-PaddRemoteRepos=true");
        }
        args.add("--project-cache-dir");
        args.add(new File("../.caches/", name.getMethodName()).getAbsolutePath());
        Collections.addAll(args, params);
        ProcessBuilder builder = new ProcessBuilder(args);
        builder.environment().putAll(System.getenv());
        String javaHome = System.getProperty("java.home");
        if (StringUtils.isNotBlank(javaHome)) {
            builder.environment().put("JAVA_HOME", javaHome);
        }
        builder.directory(testFolder);
        Process process = builder.start();
        String output = collect(process.getInputStream());
        String error = collect(process.getErrorStream());
        int result = process.waitFor();
        return new CompilationResult(result, output, error);
!!!35763511.java!!!	setExecutable() : void
        File gw = new File(testFolder, "gradlew");
        gw.setExecutable(true);
!!!35763639.java!!!	collect(inout stream : InputStream) : String
        StringBuilder sb = new StringBuilder();
        String line;
        final BufferedReader reader = new BufferedReader(new InputStreamReader(stream));
        while ((line = reader.readLine()) != null) {
            sb.append(line).append("\n");
        }
        return sb.toString();
