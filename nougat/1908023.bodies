class Location
!!!35989815.java!!!	Location()
        startOffset = endOffset = startLine = endLine = NaN;
!!!35989943.java!!!	Location(inout other : Location)
        startOffset = other.startOffset;
        endOffset = other.endOffset;
        startLine = other.startLine;
        endLine = other.endLine;
!!!35990071.java!!!	Location(inout start : Token, inout end : Token)
        if (start == null) {
            startLine = startOffset = NaN;
        } else {
            startLine = start.getLine() - 1; //token lines start from 1
            startOffset = start.getCharPositionInLine();
        }

        if (end == null) {
            endLine = endOffset = NaN;
        } else {
            endLine = end.getLine() - 1; // token lines start from 1
            String endText = end.getText();
            int lastLineStart = endText.lastIndexOf(StringUtils.LINE_SEPARATOR);
            String lastLine = lastLineStart < 0 ? endText : endText.substring(lastLineStart + 1);
            endOffset = end.getCharPositionInLine() + lastLine.length() - 1;//end is inclusive
        }
!!!35990199.java!!!	Location(inout context : ParserRuleContext)
        this(context == null ? null : context.getStart(),
                context == null ? null : context.getStop());
!!!35990327.java!!!	Location(in startLine : int, in startOffset : int, in endLine : int, in endOffset : int)
        this.startOffset = startOffset;
        this.startLine = startLine;
        this.endLine = endLine;
        this.endOffset = endOffset;
!!!35990455.java!!!	toString() : String
        return "Location{" +
                "startLine=" + startLine +
                ", startOffset=" + startOffset +
                ", endLine=" + endLine +
                ", endOffset=" + endOffset +
                ", parentLocation=" + parentLocation +
                '}';
!!!35990583.java!!!	setParentLocation(inout parentLocation : Location) : void
        this.parentLocation = parentLocation;
!!!35990711.java!!!	equals(inout o : Object) : boolean
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        Location location = (Location) o;

        if (endLine != location.endLine) {
            return false;
        }
        if (endOffset != location.endOffset) {
            return false;
        }
        if (startLine != location.startLine) {
            return false;
        }
        if (startOffset != location.startOffset) {
            return false;
        }
        return !(parentLocation != null ? !parentLocation.equals(location.parentLocation)
                : location.parentLocation != null);

!!!35990839.java!!!	hashCode() : int
        int result = startLine;
        result = 31 * result + startOffset;
        result = 31 * result + endLine;
        result = 31 * result + endOffset;
        return result;
!!!35990967.java!!!	isValid() : boolean
        return startLine != NaN && endLine != NaN && startOffset != NaN && endOffset != NaN;
!!!35991095.java!!!	contains(inout other : Location) : boolean
        if (startLine > other.startLine) {
            return false;
        }
        if (startLine == other.startLine && startOffset > other.startOffset) {
            return false;
        }
        if (endLine < other.endLine) {
            return false;
        }
        return !(endLine == other.endLine && endOffset < other.endOffset);
!!!35991223.java!!!	getValidParentAbsoluteLocation() : Location
        if (parentLocation == null) {
            return null;
        }
        if (parentLocation.isValid()) {
            return parentLocation.toAbsoluteLocation();
        }
        return parentLocation.getValidParentAbsoluteLocation();
!!!35991351.java!!!	toAbsoluteLocation() : Location
        Location absoluteParent = getValidParentAbsoluteLocation();
        if (absoluteParent == null) {
            return this;
        }
        Location copy = new Location(this);
        boolean sameLine = copy.startLine == copy.endLine;
        if (copy.startLine == 0) {
            copy.startOffset += absoluteParent.startOffset;
        }
        if (sameLine) {
            copy.endOffset += absoluteParent.startOffset;
        }

        copy.startLine += absoluteParent.startLine;
        copy.endLine += absoluteParent.startLine;
        return copy;
!!!35991479.java!!!	toUserReadableString() : String
        return startLine + ":" + startOffset + " - " + endLine + ":" + endOffset;
!!!35991607.java!!!	fromUserReadableString(inout str : String) : Location
        int glue = str.indexOf('-');
        if (glue == -1) {
            return new Location();
        }
        String start = str.substring(0, glue);
        String end = str.substring(glue + 1);
        int[] point = new int[]{-1, -1};
        Location location = new Location();
        parsePoint(start, point);
        location.startLine = point[0];
        location.startOffset = point[1];
        point[0] = point[1] = -1;
        parsePoint(end, point);
        location.endLine = point[0];
        location.endOffset = point[1];
        return location;
!!!35991735.java!!!	parsePoint(inout content : String, inout into : int) : boolean
        int index = content.indexOf(':');
        if (index == -1) {
            return false;
        }
        into[0] = Integer.parseInt(content.substring(0, index).trim());
        into[1] = Integer.parseInt(content.substring(index + 1).trim());
        return true;
!!!35991863.java!!!	createScope() : LocationScopeProvider
        return new LocationScopeProvider() {
            @Override
            public List<Location> provideScopeLocation() {
                return Collections.singletonList(Location.this);
            }
        };
