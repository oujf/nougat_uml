class ScopedException
!!!35985719.java!!!	ScopedException(inout message : String, inout  : Object...args)
        super(message == null ? "unknown data binding exception" :
                args.length == 0 ? message : String.format(message, args));
        mScopedErrorReport = Scope.createReport();
        mScopeLog = L.isDebugEnabled() ? Scope.produceScopeLog() : null;
!!!35985847.java!!!	ScopedException(inout message : String, inout scopedErrorReport : ScopedErrorReport)
        super(message);
        mScopedErrorReport = scopedErrorReport;
!!!35985975.java!!!	getBareMessage() : String
        return super.getMessage();
!!!35986103.java!!!	getMessage() : String
        return sEncodeOutput ? createEncodedMessage() : createHumanReadableMessage();
!!!35986231.java!!!	createHumanReadableMessage() : String
        ScopedErrorReport scopedError = getScopedErrorReport();
        StringBuilder sb = new StringBuilder();
        sb.append(super.getMessage()).append("\n")
                .append("file://").append(scopedError.getFilePath());
        if (scopedError.getLocations() != null && scopedError.getLocations().size() > 0) {
            sb.append(" Line:");
            sb.append(scopedError.getLocations().get(0).startLine);
        }
        sb.append("\n");
        return sb.toString();
!!!35986359.java!!!	createEncodedMessage() : String
        ScopedErrorReport scopedError = getScopedErrorReport();
        StringBuilder sb = new StringBuilder();
        sb.append(ERROR_LOG_PREFIX)
                .append(MSG_KEY).append(super.getMessage()).append("\n")
                .append(FILE_KEY).append(scopedError.getFilePath()).append("\n");
        if (scopedError.getLocations() != null) {
            for (Location location : scopedError.getLocations()) {
                sb.append(LOCATION_KEY).append(location.toUserReadableString()).append("\n");
            }
        }
        sb.append(ERROR_LOG_SUFFIX);
        return Joiner.on(' ').join(Splitter.on(StringUtils.LINE_SEPARATOR).split(sb));
!!!35986487.java!!!	getScopedErrorReport() : ScopedErrorReport
        return mScopedErrorReport;
!!!35986615.java!!!	isValid() : boolean
        return mScopedErrorReport.isValid();
!!!35986743.java!!!	createFromOutput(inout output : String) : ScopedException
        String message = "";
        String file = "";
        List<Location> locations = new ArrayList<Location>();
        int msgStart = output.indexOf(MSG_KEY);
        if (msgStart < 0) {
            message = output;
        } else {
            int fileStart = output.indexOf(FILE_KEY, msgStart + MSG_KEY.length());
            if (fileStart < 0) {
                message = output;
            } else {
                message = output.substring(msgStart + MSG_KEY.length(), fileStart);
                int locStart = output.indexOf(LOCATION_KEY, fileStart + FILE_KEY.length());
                if (locStart < 0) {
                    file = output.substring(fileStart + FILE_KEY.length());
                } else {
                    file = output.substring(fileStart + FILE_KEY.length(), locStart);
                    int nextLoc = 0;
                    while(nextLoc >= 0) {
                        nextLoc = output.indexOf(LOCATION_KEY, locStart + LOCATION_KEY.length());
                        Location loc;
                        if (nextLoc < 0) {
                            loc = Location.fromUserReadableString(
                                    output.substring(locStart + LOCATION_KEY.length()));
                        } else {
                            loc = Location.fromUserReadableString(
                                    output.substring(locStart + LOCATION_KEY.length(), nextLoc));
                        }
                        if (loc != null && loc.isValid()) {
                            locations.add(loc);
                        }
                        locStart = nextLoc;
                    }
                }
            }
        }
        return new ScopedException(message.trim(),
                new ScopedErrorReport(Strings.isNullOrEmpty(file) ? null : file.trim(), locations));
!!!35986871.java!!!	extractErrors(inout output : String) : ScopedException
        List<ScopedException> errors = new ArrayList<ScopedException>();
        int index = output.indexOf(ERROR_LOG_PREFIX);
        final int limit = output.length();
        while (index >= 0 && index < limit) {
            int end = output.indexOf(ERROR_LOG_SUFFIX, index + ERROR_LOG_PREFIX.length());
            if (end == -1) {
                errors.add(createFromOutput(output.substring(index + ERROR_LOG_PREFIX.length())));
                break;
            } else {
                errors.add(createFromOutput(output.substring(index + ERROR_LOG_PREFIX.length(),
                        end)));
                index = output.indexOf(ERROR_LOG_PREFIX, end + ERROR_LOG_SUFFIX.length());
            }
        }
        return errors;
!!!35986999.java!!!	encodeOutput(inout encodeOutput : boolean) : void
        sEncodeOutput = encodeOutput;
!!!35987127.java!!!	issEncodeOutput() : boolean
        return sEncodeOutput;
