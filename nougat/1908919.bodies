class ProcessBindable
!!!35770295.java!!!	onHandleStep(inout roundEnv : RoundEnvironment, inout processingEnv : ProcessingEnvironment, inout buildInfo : BindingBuildInfo) : boolean
        if (mProperties == null) {
            mProperties = new IntermediateV1(buildInfo.modulePackage());
            mergeLayoutVariables();
            mLayoutVariables.clear();
            TypeElement observableType = processingEnv.getElementUtils().
                    getTypeElement("android.databinding.Observable");
            Types typeUtils = processingEnv.getTypeUtils();
            for (Element element : AnnotationUtil
                    .getElementsAnnotatedWith(roundEnv, Bindable.class)) {
                Element enclosingElement = element.getEnclosingElement();
                ElementKind kind = enclosingElement.getKind();
                if (kind != ElementKind.CLASS && kind != ElementKind.INTERFACE) {
                    L.e("Bindable must be on a member field or method. The enclosing type is %s",
                            enclosingElement.getKind());
                }
                TypeElement enclosing = (TypeElement) enclosingElement;
                if (!typeUtils.isAssignable(enclosing.asType(), observableType.asType())) {
                    L.e("Bindable must be on a member in an Observable class. %s is not Observable",
                            enclosingElement.getSimpleName());
                }
                String name = getPropertyName(element);
                if (name != null) {
                    Preconditions
                            .checkNotNull(mProperties, "Must receive app / library info before "
                                    + "Bindable fields.");
                    mProperties.addProperty(enclosing.getQualifiedName().toString(), name);
                }
            }
            GenerationalClassUtil.writeIntermediateFile(processingEnv,
                    mProperties.getPackage(),
                    createIntermediateFileName(mProperties.getPackage()), mProperties);
            generateBRClasses(!buildInfo.isLibrary(), mProperties.getPackage());
        }
        return false;
!!!35770423.java!!!	addVariable(inout variableName : String, inout containingClassName : String) : void
        HashSet<String> variableNames = mLayoutVariables.get(containingClassName);
        if (variableNames == null) {
            variableNames = new HashSet<String>();
            mLayoutVariables.put(containingClassName, variableNames);
        }
        variableNames.add(variableName);
!!!35770679.java!!!	createIntermediateFileName(inout appPkg : String) : String
        return appPkg + GenerationalClassUtil.ExtensionFilter.BR.getExtension();
!!!35770807.java!!!	generateBRClasses(inout useFinalFields : boolean, inout pkg : String) : void
        L.d("************* Generating BR file %s. use final: %s", pkg, useFinalFields);
        HashSet<String> properties = new HashSet<String>();
        mProperties.captureProperties(properties);
        List<Intermediate> previousIntermediates = loadPreviousBRFiles();
        for (Intermediate intermediate : previousIntermediates) {
            intermediate.captureProperties(properties);
        }
        final JavaFileWriter writer = getWriter();
        BRWriter brWriter = new BRWriter(properties, useFinalFields);
        writer.writeToFile(pkg + ".BR", brWriter.write(pkg));
        //writeBRClass(useFinalFields, pkg, properties);
        if (useFinalFields) {
            // generate BR for all previous packages
            for (Intermediate intermediate : previousIntermediates) {
                writer.writeToFile(intermediate.getPackage() + ".BR",
                        brWriter.write(intermediate.getPackage()));
            }
        }
        mCallback.onBrWriterReady(brWriter);
!!!35770935.java!!!	getPropertyName(inout element : Element) : String
        switch (element.getKind()) {
            case FIELD:
                return stripPrefixFromField((VariableElement) element);
            case METHOD:
                return stripPrefixFromMethod((ExecutableElement) element);
            default:
                L.e("@Bindable is not allowed on %s", element.getKind());
                return null;
        }
!!!35771063.java!!!	stripPrefixFromField(inout element : VariableElement) : String
        Name name = element.getSimpleName();
        if (name.length() >= 2) {
            char firstChar = name.charAt(0);
            char secondChar = name.charAt(1);
            if (name.length() > 2 && firstChar == 'm' && secondChar == '_') {
                char thirdChar = name.charAt(2);
                if (Character.isJavaIdentifierStart(thirdChar)) {
                    return "" + Character.toLowerCase(thirdChar) +
                            name.subSequence(3, name.length());
                }
            } else if ((firstChar == 'm' && Character.isUpperCase(secondChar)) ||
                    (firstChar == '_' && Character.isJavaIdentifierStart(secondChar))) {
                return "" + Character.toLowerCase(secondChar) + name.subSequence(2, name.length());
            }
        }
        return name.toString();
!!!35771191.java!!!	stripPrefixFromMethod(inout element : ExecutableElement) : String
        Name name = element.getSimpleName();
        CharSequence propertyName;
        if (isGetter(element) || isSetter(element)) {
            propertyName = name.subSequence(3, name.length());
        } else if (isBooleanGetter(element)) {
            propertyName = name.subSequence(2, name.length());
        } else {
            L.e("@Bindable associated with method must follow JavaBeans convention %s", element);
            return null;
        }
        char firstChar = propertyName.charAt(0);
        return "" + Character.toLowerCase(firstChar) +
                propertyName.subSequence(1, propertyName.length());
!!!35771319.java!!!	mergeLayoutVariables() : void
        for (String containingClass : mLayoutVariables.keySet()) {
            for (String variable : mLayoutVariables.get(containingClass)) {
                mProperties.addProperty(containingClass, variable);
            }
        }
!!!35771447.java!!!	prefixes(inout sequence : CharSequence, inout prefix : String) : boolean
        boolean prefixes = false;
        if (sequence.length() > prefix.length()) {
            int count = prefix.length();
            prefixes = true;
            for (int i = 0; i < count; i++) {
                if (sequence.charAt(i) != prefix.charAt(i)) {
                    prefixes = false;
                    break;
                }
            }
        }
        return prefixes;
!!!35771575.java!!!	isGetter(inout element : ExecutableElement) : boolean
        Name name = element.getSimpleName();
        return prefixes(name, "get") &&
                Character.isJavaIdentifierStart(name.charAt(3)) &&
                element.getParameters().isEmpty() &&
                element.getReturnType().getKind() != TypeKind.VOID;
!!!35771703.java!!!	isSetter(inout element : ExecutableElement) : boolean
        Name name = element.getSimpleName();
        return prefixes(name, "set") &&
                Character.isJavaIdentifierStart(name.charAt(3)) &&
                element.getParameters().size() == 1 &&
                element.getReturnType().getKind() == TypeKind.VOID;
!!!35771831.java!!!	isBooleanGetter(inout element : ExecutableElement) : boolean
        Name name = element.getSimpleName();
        return prefixes(name, "is") &&
                Character.isJavaIdentifierStart(name.charAt(2)) &&
                element.getParameters().isEmpty() &&
                element.getReturnType().getKind() == TypeKind.BOOLEAN;
!!!35771959.java!!!	loadPreviousBRFiles() : ProcessBindable::Intermediate
        return GenerationalClassUtil
                .loadObjects(GenerationalClassUtil.ExtensionFilter.BR);
