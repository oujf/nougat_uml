class ProcessDataBinding
!!!35767223.java!!!	process(inout annotations : Set<? extends TypeElement>, inout roundEnv : RoundEnvironment) : boolean
        if (mProcessingSteps == null) {
            initProcessingSteps();
        }
        final BindingBuildInfo buildInfo = BuildInfoUtil.load(roundEnv);
        if (buildInfo == null) {
            return false;
        }
        boolean done = true;
        for (ProcessingStep step : mProcessingSteps) {
            try {
                done = step.runStep(roundEnv, processingEnv, buildInfo) && done;
            } catch (JAXBException e) {
                L.e(e, "Exception while handling step %s", step);
            }
        }
        if (roundEnv.processingOver()) {
            for (ProcessingStep step : mProcessingSteps) {
                step.onProcessingOver(roundEnv, processingEnv, buildInfo);
            }
        }
        Scope.assertNoError();
        return done;
!!!35767351.java!!!	getSupportedSourceVersion() : SourceVersion
        return SourceVersion.latest();
!!!35767479.java!!!	initProcessingSteps() : void
        final ProcessBindable processBindable = new ProcessBindable();
        mProcessingSteps = Arrays.asList(
                new ProcessMethodAdapters(),
                new ProcessExpressions(),
                processBindable
        );
        Callback dataBinderWriterCallback = new Callback() {
            CompilerChef mChef;
            BRWriter mBRWriter;
            boolean mLibraryProject;
            int mMinSdk;

            @Override
            public void onChefReady(CompilerChef chef, boolean libraryProject, int minSdk) {
                Preconditions.checkNull(mChef, "Cannot set compiler chef twice");
                chef.addBRVariables(processBindable);
                mChef = chef;
                mLibraryProject = libraryProject;
                mMinSdk = minSdk;
                considerWritingMapper();
                mChef.writeDynamicUtil();
            }

            private void considerWritingMapper() {
                if (mLibraryProject || mChef == null || mBRWriter == null) {
                    return;
                }
                mChef.writeDataBinderMapper(mMinSdk, mBRWriter);
            }

            @Override
            public void onBrWriterReady(BRWriter brWriter) {
                Preconditions.checkNull(mBRWriter, "Cannot set br writer twice");
                mBRWriter = brWriter;
                considerWritingMapper();
            }
        };
        AnnotationJavaFileWriter javaFileWriter = new AnnotationJavaFileWriter(processingEnv);
        for (ProcessingStep step : mProcessingSteps) {
            step.mJavaFileWriter = javaFileWriter;
            step.mCallback = dataBinderWriterCallback;
        }
!!!35767607.java!!!	init(inout processingEnv : ProcessingEnvironment) : void
        super.init(processingEnv);
        ModelAnalyzer.setProcessingEnvironment(processingEnv);
