class CompilerChef
!!!35768631.java!!!	createChef(inout bundle : ResourceBundle, inout fileWriter : JavaFileWriter) : CompilerChef
        CompilerChef chef = new CompilerChef();

        chef.mResourceBundle = bundle;
        chef.mFileWriter = fileWriter;
        chef.mResourceBundle.validateMultiResLayouts();
        return chef;
!!!35768759.java!!!	getResourceBundle() : ResourceBundle
        return mResourceBundle;
!!!35768887.java!!!	ensureDataBinder() : void
        if (mDataBinder == null) {
            mDataBinder = new DataBinder(mResourceBundle);
            mDataBinder.setFileWriter(mFileWriter);
        }
!!!35769015.java!!!	hasAnythingToGenerate() : boolean
        L.d("checking if we have anything to generate. bundle size: %s",
                mResourceBundle == null ? -1 : mResourceBundle.getLayoutBundles().size());
        return mResourceBundle != null && mResourceBundle.getLayoutBundles().size() > 0;
!!!35769143.java!!!	writeDataBinderMapper(in minSdk : int, inout brWriter : BRWriter) : void
        ensureDataBinder();
        final String pkg = "android.databinding";
        DataBinderWriter dbr = new DataBinderWriter(pkg, mResourceBundle.getAppPackage(),
                "DataBinderMapper", mDataBinder.getLayoutBinders(), minSdk);
        mFileWriter.writeToFile(pkg + "." + dbr.getClassName(), dbr.write(brWriter));
!!!35769271.java!!!	writeDynamicUtil() : void
        DynamicUtilWriter dynamicUtil = new DynamicUtilWriter();
        // TODO: Replace this with targetSDK check from plugin
        ModelClass versionCodes = ModelAnalyzer.getInstance().findClass(
                "android.os.Build.VERSION_CODES", null);
        Preconditions.checkNotNull(versionCodes, "Could not find compile SDK");
        int compileVersion = 1;
        for (int i = VERSION_CODES.length - 1; i >= 0; i--) {
            if (versionCodes.findGetterOrField(VERSION_CODES[i], true) != null) {
                compileVersion = i + 1;
                break;
            }
        }
        mFileWriter.writeToFile("android.databinding.DynamicUtil",
                dynamicUtil.write(compileVersion).generate());
!!!35769399.java!!!	addBRVariables(inout bindables : CompilerChef::BindableHolder) : void
        ensureDataBinder();
        for (LayoutBinder layoutBinder : mDataBinder.mLayoutBinders) {
            for (String variableName : layoutBinder.getUserDefinedVariables().keySet()) {
                bindables.addVariable(variableName, layoutBinder.getClassName());
            }
        }
!!!35769527.java!!!	sealModels() : void
        ensureDataBinder();
        mDataBinder.sealModels();
!!!35769655.java!!!	writeViewBinderInterfaces(inout isLibrary : boolean) : void
        ensureDataBinder();
        mDataBinder.writerBaseClasses(isLibrary);
!!!35769783.java!!!	writeViewBinders(in minSdk : int) : void
        ensureDataBinder();
        mDataBinder.writeBinders(minSdk);
!!!35769911.java!!!	writeComponent() : void
        ensureDataBinder();
        mDataBinder.writeComponent();
!!!35770039.java!!!	getWrittenClassNames() : String
        ensureDataBinder();
        return mDataBinder.getWrittenClassNames();
