class DataBinder
!!!35801783.java!!!	DataBinder(inout resourceBundle : ResourceBundle)
        L.d("reading resource bundle into data binder");
        for (Map.Entry<String, List<ResourceBundle.LayoutFileBundle>> entry :
                resourceBundle.getLayoutBundles().entrySet()) {
            for (ResourceBundle.LayoutFileBundle bundle : entry.getValue()) {
                try {
                    mLayoutBinders.add(new LayoutBinder(bundle));
                } catch (ScopedException ex) {
                    Scope.defer(ex);
                }
            }
        }
!!!35801911.java!!!	getLayoutBinders() : LayoutBinder
        return mLayoutBinders;
!!!35802039.java!!!	sealModels() : void
        for (LayoutBinder layoutBinder : mLayoutBinders) {
            layoutBinder.sealModel();
        }
!!!35802167.java!!!	writerBaseClasses(inout isLibrary : boolean) : void
        for (LayoutBinder layoutBinder : mLayoutBinders) {
            try {
                Scope.enter(layoutBinder);
                if (isLibrary || layoutBinder.hasVariations()) {
                    String className = layoutBinder.getClassName();
                    String canonicalName = layoutBinder.getPackage() + "." + className;
                    if (writtenClasses.contains(canonicalName)) {
                        continue;
                    }
                    L.d("writing data binder base %s", canonicalName);
                    mFileWriter.writeToFile(canonicalName,
                            layoutBinder.writeViewBinderBaseClass(isLibrary));
                    writtenClasses.add(canonicalName);
                }
            } catch (ScopedException ex){
                Scope.defer(ex);
            } finally {
                Scope.exit();
            }
        }
!!!35802295.java!!!	writeBinders(in minSdk : int) : void
        for (LayoutBinder layoutBinder : mLayoutBinders) {
            try {
                Scope.enter(layoutBinder);
                String className = layoutBinder.getImplementationName();
                String canonicalName = layoutBinder.getPackage() + "." + className;
                L.d("writing data binder %s", canonicalName);
                writtenClasses.add(canonicalName);
                mFileWriter.writeToFile(canonicalName, layoutBinder.writeViewBinder(minSdk));
            } catch (ScopedException ex) {
                Scope.defer(ex);
            } finally {
                Scope.exit();
            }
        }
!!!35802423.java!!!	writeComponent() : void
        ComponentWriter componentWriter = new ComponentWriter();

        writtenClasses.add(COMPONENT_CLASS);
        mFileWriter.writeToFile(COMPONENT_CLASS, componentWriter.createComponent());
!!!35802551.java!!!	getWrittenClassNames() : String
        return writtenClasses;
!!!35802679.java!!!	setFileWriter(inout fileWriter : JavaFileWriter) : void
        mFileWriter = fileWriter;
!!!35802807.java!!!	getFileWriter() : JavaFileWriter
        return mFileWriter;
