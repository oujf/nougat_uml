class Binding
!!!35776951.java!!!	Binding(inout target : BindingTarget, inout name : String, inout expr : Expr)
        this(target, name, expr, null);
!!!35777079.java!!!	Binding(inout target : BindingTarget, inout name : String, inout expr : Expr, inout setterCall : SetterStore::BindingSetterCall)
        mTarget = target;
        mName = name;
        mExpr = expr;
        mSetterCall = setterCall;
!!!35777207.java!!!	provideScopeLocation() : Location
        return mExpr.getLocations();
!!!35777335.java!!!	resolveListeners() : void
        final ModelClass listenerParameter = getListenerParameter(mTarget, mName, mExpr);
        Expr listenerExpr = mExpr.resolveListeners(listenerParameter, null);
        if (listenerExpr != mExpr) {
            listenerExpr.setBindingExpression(true);
            mExpr = listenerExpr;
        }
!!!35777463.java!!!	resolveTwoWayExpressions() : void
        Expr expr = mExpr.resolveTwoWayExpressions(null);
        if (expr != mExpr) {
            mExpr = expr;
        }
!!!35777591.java!!!	getSetterCall() : SetterStore::BindingSetterCall
        if (mSetterCall == null) {
            try {
                Scope.enter(getTarget());
                Scope.enter(this);
                resolveSetterCall();
                if (mSetterCall == null) {
                    L.e(ErrorMessages.CANNOT_FIND_SETTER_CALL, mName, mExpr.getResolvedType());
                }
            } finally {
                Scope.exit();
                Scope.exit();
            }
        }
        return mSetterCall;
!!!35777719.java!!!	resolveSetterCall() : void
        ModelClass viewType = mTarget.getResolvedType();
        if (viewType != null && viewType.extendsViewStub()) {
            if (isListenerAttribute(mName)) {
                ModelAnalyzer modelAnalyzer = ModelAnalyzer.getInstance();
                ModelClass viewStubProxy = modelAnalyzer.
                        findClass("android.databinding.ViewStubProxy", null);
                mSetterCall = SetterStore.get(modelAnalyzer).getSetterCall(mName,
                        viewStubProxy, mExpr.getResolvedType(), mExpr.getModel().getImports());
            } else if (isViewStubAttribute(mName)) {
                mSetterCall = new ViewStubDirectCall(mName, viewType, mExpr);
            } else {
                mSetterCall = new ViewStubSetterCall(mName);
            }
        } else {
            final SetterStore setterStore = SetterStore.get(ModelAnalyzer.getInstance());
            mSetterCall = setterStore.getSetterCall(mName,
                    viewType, mExpr.getResolvedType(), mExpr.getModel().getImports());
        }
!!!35777847.java!!!	getListenerParameter(inout target : BindingTarget, inout name : String, inout expr : Expr) : ModelClass
        ModelClass viewType = target.getResolvedType();
        SetterCall setterCall;
        ModelAnalyzer modelAnalyzer = ModelAnalyzer.getInstance();
        ModelClass objectParameter = modelAnalyzer.findClass(Object.class);
        SetterStore setterStore = SetterStore.get(modelAnalyzer);
        if (viewType != null && viewType.extendsViewStub()) {
            if (isListenerAttribute(name)) {
                ModelClass viewStubProxy = modelAnalyzer.
                        findClass("android.databinding.ViewStubProxy", null);
                setterCall = SetterStore.get(modelAnalyzer).getSetterCall(name,
                        viewStubProxy, objectParameter, expr.getModel().getImports());
            } else if (isViewStubAttribute(name)) {
                setterCall = new ViewStubDirectCall(name, viewType, expr);
            } else {
                setterCall = new ViewStubSetterCall(name);
            }
        } else {
            setterCall = setterStore.getSetterCall(name, viewType, objectParameter,
                    expr.getModel().getImports());
        }
        if (setterCall != null) {
            return setterCall.getParameterTypes()[0];
        }
        List<SetterStore.MultiAttributeSetter> setters =
                setterStore.getMultiAttributeSetterCalls(new String[]{name}, viewType,
                new ModelClass[] {modelAnalyzer.findClass(Object.class)});
        if (setters.isEmpty()) {
            return null;
        } else {
            return setters.get(0).getParameterTypes()[0];
        }
!!!35777975.java!!!	getTarget() : BindingTarget
        return mTarget;
!!!35778103.java!!!	toJavaCode(inout targetViewName : String, inout bindingComponent : String) : String
        final String currentValue = requiresOldValue()
                ? "this." + LayoutBinderWriterKt.getOldValueName(mExpr) : null;
        final String argCode = getExpr().toCode().generate();
        return getSetterCall().toJava(bindingComponent, targetViewName, currentValue, argCode);
!!!35778231.java!!!	getBindingAdapterInstanceClass() : String
        return getSetterCall().getBindingAdapterInstanceClass();
!!!35778359.java!!!	getComponentExpressions() : Expr
        return new Expr[] { mExpr };
!!!35778487.java!!!	requiresOldValue() : boolean
        return getSetterCall().requiresOldValue();
!!!35778615.java!!!	getMinApi() : int
        return getSetterCall().getMinApi();
!!!35778743.java!!!	getName() : String
        return mName;
!!!35778871.java!!!	getExpr() : Expr
        return mExpr;
!!!35778999.java!!!	isViewStubAttribute(inout name : String) : boolean
        return ("android:inflatedId".equals(name) ||
                "android:layout".equals(name) ||
                "android:visibility".equals(name) ||
                "android:layoutInflater".equals(name));
!!!35779127.java!!!	isListenerAttribute(inout name : String) : boolean
        return ("android:onInflate".equals(name) ||
                "android:onInflateListener".equals(name));
