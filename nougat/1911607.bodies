class Expr
!!!35823031.java!!!	Expr(inout children : Iterable<Expr>)
        for (Expr expr : children) {
            mChildren.add(expr);
        }
        addParents();
!!!35823159.java!!!	Expr(inout  : Expr...children)
        Collections.addAll(mChildren, children);
        addParents();
!!!35823287.java!!!	getId() : int
        Preconditions.check(mId != NO_ID, "if getId is called on an expression, it should have"
                + " an id: %s", this);
        return mId;
!!!35823415.java!!!	setId(in id : int) : void
        Preconditions.check(mId == NO_ID, "ID is already set on %s", this);
        mId = id;
!!!35823543.java!!!	addLocation(inout location : Location) : void
        mLocations.add(location);
!!!35823671.java!!!	getLocations() : Location
        return mLocations;
!!!35823799.java!!!	getModel() : ExprModel
        return mModel;
!!!35823927.java!!!	getInvalidFlags() : BitSet
        if (mInvalidFlags == null) {
            mInvalidFlags = resolveInvalidFlags();
        }
        return mInvalidFlags;
!!!35824055.java!!!	resolveInvalidFlags() : BitSet
        BitSet bitSet = (BitSet) mModel.getInvalidateAnyBitSet().clone();
        if (mCanBeInvalidated) {
            bitSet.set(getId(), true);
        }
        for (Dependency dependency : getDependencies()) {
            // TODO optional optimization: do not invalidate for conditional flags
            bitSet.or(dependency.getOther().getInvalidFlags());
        }
        return bitSet;
!!!35824183.java!!!	setBindingExpression(inout isBindingExpression : boolean) : void
        mIsBindingExpression = isBindingExpression;
!!!35824311.java!!!	isBindingExpression() : boolean
        return mIsBindingExpression;
!!!35824439.java!!!	canBeEvaluatedToAVariable() : boolean
        return true; // anything except arg expr can be evaluated to a variable
!!!35824567.java!!!	isObservable() : boolean
        return getResolvedType().isObservable();
!!!35824695.java!!!	resolveListeners(inout valueType : ModelClass, inout parent : Expr) : Expr
        for (int i = mChildren.size() - 1; i >= 0; i--) {
            Expr child = mChildren.get(i);
            child.resolveListeners(valueType, this);
        }
        resetResolvedType();
        return this;
!!!35824823.java!!!	resolveTwoWayExpressions(inout parent : Expr) : Expr
        for (int i = mChildren.size() - 1; i >= 0; i--) {
            final Expr child = mChildren.get(i);
            child.resolveTwoWayExpressions(this);
        }
        return this;
!!!35824951.java!!!	resetResolvedType() : void
        mResolvedType = null;
!!!35825079.java!!!	getShouldReadFlags() : BitSet
        if (mShouldReadFlags == null) {
            getShouldReadFlagsWithConditionals();
            mShouldReadFlags = resolveShouldReadFlags();
        }
        return mShouldReadFlags;
!!!35825207.java!!!	getShouldReadFlagsWithConditionals() : BitSet
        if (mShouldReadWithConditionals == null) {
            mShouldReadWithConditionals = resolveShouldReadWithConditionals();
        }
        return mShouldReadWithConditionals;
!!!35825335.java!!!	setModel(inout model : ExprModel) : void
        mModel = model;
!!!35825463.java!!!	setTwoWay(inout isTwoWay : boolean) : void
        mIsTwoWay = isTwoWay;
!!!35825591.java!!!	isTwoWay() : boolean
        return mIsTwoWay;
!!!35825719.java!!!	addTwoWay(inout uniqueKey : String) : String
        if (mIsTwoWay) {
            return "twoWay(" + uniqueKey + ")";
        } else {
            return "oneWay(" + uniqueKey + ")";
        }
!!!35825847.java!!!	resolveShouldReadWithConditionals() : BitSet
        // ensure we have invalid flags
        BitSet bitSet = new BitSet();
        // if i'm invalid, that DOES NOT mean i should be read :/.
        if (mIsBindingExpression) {
            bitSet.or(getInvalidFlags());
        }

        for (Dependency dependency : getDependants()) {
            if (dependency.getCondition() == null) {
                bitSet.or(dependency.getDependant().getShouldReadFlagsWithConditionals());
            } else {
                bitSet.set(dependency.getDependant()
                        .getRequirementFlagIndex(dependency.getExpectedOutput()));
            }
        }
        return bitSet;
!!!35825975.java!!!	resolveShouldReadFlags() : BitSet
        // ensure we have invalid flags
        BitSet bitSet = new BitSet();
        if (isRead()) {
            return bitSet;
        }
        if (mIsBindingExpression) {
            bitSet.or(getInvalidFlags());
        }
        for (Dependency dependency : getDependants()) {
            final boolean isUnreadElevated = isUnreadElevated(dependency);
            if (dependency.isConditional()) {
                continue; // will be resolved later when conditional is elevated
            }
            if (isUnreadElevated) {
                bitSet.set(dependency.getDependant()
                        .getRequirementFlagIndex(dependency.getExpectedOutput()));
            } else {
                bitSet.or(dependency.getDependant().getShouldReadFlags());
            }
        }
        bitSet.and(mShouldReadWithConditionals);
        bitSet.andNot(mReadSoFar);
        return bitSet;
!!!35826103.java!!!	isUnreadElevated(inout input : Dependency) : boolean
        return input.isElevated() && !input.getDependant().isRead();
!!!35826231.java!!!	addParents() : void
        for (Expr expr : mChildren) {
            expr.mParents.add(this);
        }
!!!35826359.java!!!	onSwappedWith(inout existing : Expr) : void
        for (Expr child : mChildren) {
            child.onParentSwapped(this, existing);
        }
!!!35826487.java!!!	onParentSwapped(inout oldParent : Expr, inout newParent : Expr) : void
        Preconditions.check(mParents.remove(oldParent), "trying to remove non-existent parent %s"
                + " from %s", oldParent, mParents);
        mParents.add(newParent);
!!!35826615.java!!!	getChildren() : Expr
        return mChildren;
!!!35826743.java!!!	getParents() : Expr
        return mParents;
!!!35826871.java!!!	isDynamic() : boolean
        if (mIsDynamic == null) {
            mIsDynamic = isAnyChildDynamic();
        }
        return mIsDynamic;
!!!35826999.java!!!	isAnyChildDynamic() : boolean
        for (Expr expr : mChildren) {
            if (expr.isDynamic()) {
                return true;
            }
        }
        return false;
!!!35827127.java!!!	getResolvedType() : ModelClass
        if (mResolvedType == null) {
            // TODO not get instance
            try {
                Scope.enter(this);
                mResolvedType = resolveType(ModelAnalyzer.getInstance());
                if (mResolvedType == null) {
                    L.e(ErrorMessages.CANNOT_RESOLVE_TYPE, this);
                }
            } finally {
                Scope.exit();
            }
        }
        return mResolvedType;
!!!35827511.java!!!	constructDynamicChildrenDependencies() : Dependency
        List<Dependency> dependencies = new ArrayList<Dependency>();
        for (Expr node : mChildren) {
            if (!node.isDynamic()) {
                continue;
            }
            dependencies.add(new Dependency(this, node));
        }
        return dependencies;
!!!35827639.java!!!	getDependencies() : Dependency
        if (mDependencies == null) {
            mDependencies = constructDependencies();
        }
        return mDependencies;
!!!35827767.java!!!	addDependant(inout dependency : Dependency) : void
        mDependants.add(dependency);
!!!35827895.java!!!	getDependants() : Dependency
        return mDependants;
!!!35828023.java!!!	getUniqueKey() : String
        if (mUniqueKey == null) {
            mUniqueKey = computeUniqueKey();
            Preconditions.checkNotNull(mUniqueKey,
                    "if there are no children, you must override computeUniqueKey");
            Preconditions.check(!mUniqueKey.trim().equals(""),
                    "if there are no children, you must override computeUniqueKey");
        }
        return mUniqueKey;
!!!35828151.java!!!	computeUniqueKey() : String
        return computeChildrenKey();
!!!35828279.java!!!	computeChildrenKey() : String
        return join(mChildren);
!!!35828407.java!!!	enableDirectInvalidation() : void
        mCanBeInvalidated = true;
!!!35828535.java!!!	canBeInvalidated() : boolean
        return mCanBeInvalidated;
!!!35828663.java!!!	trimShouldReadFlags(inout bitSet : BitSet) : void
        mShouldReadFlags.andNot(bitSet);
!!!35828791.java!!!	isConditional() : boolean
        return false;
!!!35828919.java!!!	getRequirementId() : int
        return mRequirementId;
!!!35829047.java!!!	setRequirementId(in requirementId : int) : void
        mRequirementId = requirementId;
!!!35829175.java!!!	getRequirementFlagIndex(inout expectedOutput : boolean) : int
        Preconditions.check(mRequirementId != NO_ID, "If this is an expression w/ conditional"
                + " dependencies, it must be assigned a requirement ID. %s", this);
        return expectedOutput ? mRequirementId + 1 : mRequirementId;
!!!35829303.java!!!	hasId() : boolean
        return mId != NO_ID;
!!!35829431.java!!!	markFlagsAsRead(inout flags : BitSet) : void
        mReadSoFar.or(flags);
!!!35829559.java!!!	isRead() : boolean
        return mRead;
!!!35829687.java!!!	considerElevatingConditionals(inout justRead : Expr) : boolean
        boolean elevated = false;
        for (Dependency dependency : mDependencies) {
            if (dependency.isConditional() && dependency.getCondition() == justRead) {
                dependency.elevate();
                elevated = true;
            }
        }
        return elevated;
!!!35829815.java!!!	invalidateReadFlags() : void
        mShouldReadFlags = null;
        mVersion ++;
!!!35829943.java!!!	getVersion() : int
        return mVersion;
!!!35830071.java!!!	hasNestedCannotRead() : boolean
        if (isRead()) {
            return false;
        }
        if (getShouldReadFlags().isEmpty()) {
            return true;
        }
        for (Dependency dependency : getDependencies()) {
            if (hasNestedCannotRead(dependency)) {
                return true;
            }
        }
        return false;
!!!35830199.java!!!	hasNestedCannotRead(inout input : Dependency) : boolean
        return input.isConditional() || input.getOther().hasNestedCannotRead();
!!!35830327.java!!!	markAsReadIfDone() : boolean
        if (mRead) {
            return false;
        }
        // TODO avoid clone, we can calculate this iteratively
        BitSet clone = (BitSet) mShouldReadWithConditionals.clone();

        clone.andNot(mReadSoFar);
        mRead = clone.isEmpty();

        if (!mRead && !mReadSoFar.isEmpty()) {
            // check if remaining dependencies can be satisfied w/ existing values
            // for predicate flags, this expr may already be calculated to get the predicate
            // to detect them, traverse them later on, see which flags should be calculated to calculate
            // them. If any of them is completely covered w/ our non-conditional flags, no reason
            // to add them to the list since we'll already be calculated due to our non-conditional
            // flags
            boolean allCovered = true;
            for (int i = clone.nextSetBit(0); i != -1; i = clone.nextSetBit(i + 1)) {
                final Expr expr = mModel.findFlagExpression(i);
                if (expr == null) {
                    continue;
                }
                if (!expr.isConditional()) {
                    allCovered = false;
                    break;
                }
                final BitSet readForConditional = (BitSet) expr.findConditionalFlags().clone();

                // FIXME: this does not do full traversal so misses some cases
                // to calculate that conditional, i should've read /readForConditional/ flags
                // if my read-so-far bits cover that; that means i would've already
                // read myself
                readForConditional.andNot(mReadSoFar);
                if (!readForConditional.isEmpty()) {
                    allCovered = false;
                    break;
                }
            }
            mRead = allCovered;
        }
        if (mRead) {
            mShouldReadFlags = null; // if we've been marked as read, clear should read flags
        }
        return mRead;
!!!35830455.java!!!	findConditionalFlags() : BitSet
        Preconditions.check(isConditional(), "should not call this on a non-conditional expr");
        if (mConditionalFlags == null) {
            mConditionalFlags = new BitSet();
            resolveConditionalFlags(mConditionalFlags);
        }
        return mConditionalFlags;
!!!35830583.java!!!	resolveConditionalFlags(inout flags : BitSet) : void
        flags.or(getPredicateInvalidFlags());
        // if i have only 1 dependency which is conditional, traverse it as well
        if (getDependants().size() == 1) {
            final Dependency dependency = getDependants().get(0);
            if (dependency.getCondition() != null) {
                flags.or(dependency.getDependant().findConditionalFlags());
                flags.set(dependency.getDependant()
                        .getRequirementFlagIndex(dependency.getExpectedOutput()));
            }
        }
!!!35830711.java!!!	toString() : String
        return getUniqueKey();
!!!35830839.java!!!	getReadSoFar() : BitSet
        return mReadSoFar;
!!!35830967.java!!!	getAllCalculationPaths() : Expr::Node
        if (mCalculationPaths == null) {
            Node node = new Node();
            if (isConditional()) {
                node.mBitSet.or(getPredicateInvalidFlags());
            } else {
                node.mBitSet.or(getInvalidFlags());
            }
            for (Dependency dependency : getDependants()) {
                final Expr dependant = dependency.getDependant();
                if (dependency.getCondition() != null) {
                    Node cond = new Node();
                    cond.setConditionFlag(
                            dependant.getRequirementFlagIndex(dependency.getExpectedOutput()));
                    cond.mParents.add(dependant.getAllCalculationPaths());
                    node.mParents.add(cond);
                } else {
                    node.mParents.add(dependant.getAllCalculationPaths());
                }
            }
            mCalculationPaths = node;
        }
        return mCalculationPaths;
!!!35831095.java!!!	getDefaultValue() : String
        return ModelAnalyzer.getInstance().getDefaultValue(getResolvedType().toJavaCode());
!!!35831223.java!!!	getPredicateInvalidFlags() : BitSet
        throw new IllegalStateException(
                "must override getPredicateInvalidFlags in " + getClass().getSimpleName());
!!!35831351.java!!!	shouldReadNow(in justRead : List<Expr>) : boolean
        if (getShouldReadFlags().isEmpty()) {
            return false;
        }
        for (Dependency input : getDependencies()) {
            boolean dependencyReady = input.getOther().isRead() || (justRead != null &&
                    justRead.contains(input.getOther()));
            if(!dependencyReady) {
                return false;
            }
        }
        return true;
!!!35831479.java!!!	isEqualityCheck() : boolean
        return false;
!!!35831607.java!!!	setIsUsed(inout isUsed : boolean) : void
        mIsUsed = isUsed;
        for (Expr child : getChildren()) {
            child.setIsUsed(isUsed);
        }
!!!35831735.java!!!	isUsed() : boolean
        return mIsUsed;
!!!35831863.java!!!	updateExpr(inout modelAnalyzer : ModelAnalyzer) : void
        final Map<String, Expr> exprMap = mModel.getExprMap();
        for (int i = mParents.size() - 1; i >= 0; i--) {
            final Expr parent = mParents.get(i);
            if (exprMap.get(parent.getUniqueKey()) != parent) {
                mParents.remove(i);
            }
        }
        for (Expr child : mChildren) {
            child.updateExpr(modelAnalyzer);
        }
!!!35831991.java!!!	join(inout  : String...items) : String
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < items.length; i ++) {
            if (i > 0) {
                result.append(KEY_JOIN);
            }
            result.append(items[i]);
        }
        return result.toString();
!!!35832119.java!!!	join(inout items : List<Expr>) : String
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < items.size(); i ++) {
            if (i > 0) {
                result.append(KEY_JOIN);
            }
            result.append(items.get(i).getUniqueKey());
        }
        return result.toString();
!!!35832247.java!!!	asPackage() : String
        return null;
!!!35832375.java!!!	provideScopeLocation() : Location
        return mLocations;
!!!35832503.java!!!	toCode() : KCode
        return toCode(false);
!!!35832631.java!!!	toCode(inout expand : boolean) : KCode
        if (!expand && isDynamic()) {
            return new KCode(LayoutBinderWriterKt.getExecutePendingLocalName(this));
        }
        return generateCode(expand);
!!!35832759.java!!!	toFullCode() : KCode
        return generateCode(false);
!!!35833015.java!!!	toInverseCode(inout value : KCode) : KCode
        throw new IllegalStateException("expression does not support two-way binding");
!!!35833143.java!!!	assertIsInvertible() : void
        final String errorMessage = getInvertibleError();
        if (errorMessage != null) {
            L.e(ErrorMessages.EXPRESSION_NOT_INVERTIBLE, toFullCode().generate(),
                    errorMessage);
        }
!!!35833399.java!!!	hasConditionalDependant() : boolean
        for (Dependency dependency : getDependants()) {
            Expr dependant = dependency.getDependant();
            if (dependant.isConditional() && dependant instanceof TernaryExpr) {
                TernaryExpr ternary = (TernaryExpr) dependant;
                return ternary.getPred() == this;
            }
        }
        return false;
