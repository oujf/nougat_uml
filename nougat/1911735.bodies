class BindingTarget
!!!35799095.java!!!	BindingTarget(inout bundle : ResourceBundle::BindingTargetBundle)
        mBundle = bundle;
!!!35799223.java!!!	isUsed() : boolean
        return mBundle.isUsed();
!!!35799351.java!!!	addBinding(inout name : String, inout expr : Expr) : void
        if (SetterStore.get(ModelAnalyzer.getInstance()).isTwoWayEventAttribute(name)) {
            L.e(ErrorMessages.TWO_WAY_EVENT_ATTRIBUTE, name);
        }
        mBindings.add(new Binding(this, name, expr));
        if (expr.isTwoWay()) {
            try {
                Scope.enter(expr);
                expr.assertIsInvertible();
                final InverseBinding inverseBinding = new InverseBinding(this, name, expr);
                mInverseBindings.add(inverseBinding);
                mBindings.add(new Binding(this, inverseBinding.getEventAttribute(),
                        mModel.twoWayListenerExpr(inverseBinding),
                        inverseBinding.getEventSetter()));
            } finally {
                Scope.exit();
            }
        }
!!!35799479.java!!!	getInterfaceType() : String
        return mBundle.getInterfaceType() == null ? mBundle.getFullClassName() : mBundle.getInterfaceType();
!!!35799607.java!!!	addInverseBinding(inout name : String, inout call : SetterStore::BindingGetterCall) : InverseBinding
        final InverseBinding inverseBinding = new InverseBinding(this, name, null);
        inverseBinding.setGetterCall(call);
        mInverseBindings.add(inverseBinding);
        mBindings.add(new Binding(this, inverseBinding.getEventAttribute(),
                mModel.twoWayListenerExpr(inverseBinding)));
        return inverseBinding;
!!!35799735.java!!!	provideScopeLocation() : Location
        return mBundle.provideScopeLocation();
!!!35799863.java!!!	getId() : String
        return mBundle.getId();
!!!35799991.java!!!	getTag() : String
        return mBundle.getTag();
!!!35800119.java!!!	getOriginalTag() : String
        return mBundle.getOriginalTag();
!!!35800247.java!!!	getViewClass() : String
        return mBundle.getFullClassName();
!!!35800375.java!!!	getResolvedType() : ModelClass
        if (mResolvedClass == null) {
            if (mBundle.isBinder()) {
                mResolvedClass = ModelAnalyzer.getInstance().
                        findClass(ModelAnalyzer.VIEW_DATA_BINDING, mModel.getImports());
            } else {
                mResolvedClass = ModelAnalyzer.getInstance().findClass(mBundle.getFullClassName(),
                        mModel.getImports());
            }
        }
        return mResolvedClass;
!!!35800503.java!!!	getIncludedLayout() : String
        return mBundle.getIncludedLayout();
!!!35800631.java!!!	isBinder() : boolean
        return getIncludedLayout() != null;
!!!35800759.java!!!	supportsTag() : boolean
        return !SetterStore.get(ModelAnalyzer.getInstance())
                .isUntaggable(mBundle.getFullClassName());
!!!35800887.java!!!	getBindings() : Binding
        return mBindings;
!!!35801015.java!!!	getInverseBindings() : InverseBinding
        return mInverseBindings;
!!!35801143.java!!!	getModel() : ExprModel
        return mModel;
!!!35801271.java!!!	setModel(inout model : ExprModel) : void
        mModel = model;
!!!35801399.java!!!	resolveListeners() : void
        for (Binding binding : mBindings) {
            binding.resolveListeners();
        }
!!!35801527.java!!!	resolveTwoWayExpressions() : void
        for (Binding binding : mBindings) {
            binding.resolveTwoWayExpressions();
        }
!!!35801655.java!!!	resolveMultiSetters() : void
        L.d("resolving multi setters for %s", getId());
        final SetterStore setterStore = SetterStore.get(ModelAnalyzer.getInstance());
        final String[] attributes = new String[mBindings.size()];
        final ModelClass[] types = new ModelClass[mBindings.size()];
        for (int i = 0; i < mBindings.size(); i ++) {
            Binding binding = mBindings.get(i);
            try {
                Scope.enter(binding);
                attributes[i] = binding.getName();
                types[i] = binding.getExpr().getResolvedType();
            } finally {
                Scope.exit();
            }
        }
        final List<SetterStore.MultiAttributeSetter> multiAttributeSetterCalls = setterStore
                .getMultiAttributeSetterCalls(attributes, getResolvedType(), types);
        if (multiAttributeSetterCalls.isEmpty()) {
            return;
        }
        final Map<String, Binding> lookup = new HashMap<String, Binding>();
        for (Binding binding : mBindings) {
            String name = binding.getName();
            if (name.startsWith("android:")) {
                lookup.put(name, binding);
            } else {
                int ind = name.indexOf(":");
                if (ind == -1) {
                    lookup.put(name, binding);
                } else {
                    lookup.put(name.substring(ind + 1), binding);
                }
            }
        }
        List<MergedBinding> mergeBindings = new ArrayList<MergedBinding>();
        for (final SetterStore.MultiAttributeSetter setter : multiAttributeSetterCalls) {
            L.d("resolved %s", setter);
            final List<Binding> mergedBindings = new ArrayList<Binding>();
            for (String attribute : setter.attributes) {
                Binding binding = lookup.get(attribute);
                Preconditions.checkNotNull(binding, "cannot find binding for %s", attribute);
                mergedBindings.add(binding);
            }

            for (Binding binding : mergedBindings) {
                binding.getExpr().setBindingExpression(false);
                mBindings.remove(binding);
            }
            MergedBinding mergedBinding = new MergedBinding(getModel(), setter, this,
                    mergedBindings);
            mergeBindings.add(mergedBinding);
        }
        for (MergedBinding binding : mergeBindings) {
            mBindings.add(binding);
        }
