class ModelClass
!!!35871031.java!!!	isList() : boolean
        for (ModelClass listType : ModelAnalyzer.getInstance().getListTypes()) {
            if (listType != null) {
                if (listType.isAssignableFrom(this)) {
                    return true;
                }
            }
        }
        return false;
!!!35871159.java!!!	isMap() : boolean
        return ModelAnalyzer.getInstance().getMapType().isAssignableFrom(erasure());
!!!35871287.java!!!	isString() : boolean
        return ModelAnalyzer.getInstance().getStringType().equals(this);
!!!35873207.java!!!	isObject() : boolean
        return ModelAnalyzer.getInstance().getObjectType().equals(this);
!!!35873463.java!!!	isViewDataBinding() : boolean
        return ModelAnalyzer.getInstance().getViewDataBindingType().isAssignableFrom(this);
!!!35873591.java!!!	extendsViewStub() : boolean
        return ModelAnalyzer.getInstance().getViewStubType().isAssignableFrom(this);
!!!35873719.java!!!	isObservable() : boolean
        ModelAnalyzer modelAnalyzer = ModelAnalyzer.getInstance();
        return modelAnalyzer.getObservableType().isAssignableFrom(this) ||
                modelAnalyzer.getObservableListType().isAssignableFrom(this) ||
                modelAnalyzer.getObservableMapType().isAssignableFrom(this);

!!!35873847.java!!!	isObservableField() : boolean
        ModelClass erasure = erasure();
        for (ModelClass observableField : ModelAnalyzer.getInstance().getObservableFieldTypes()) {
            if (observableField.isAssignableFrom(erasure)) {
                return true;
            }
        }
        return false;
!!!35874487.java!!!	getMethods(inout name : String, inout args : List<ModelClass>, inout staticOnly : boolean) : ModelMethod
        ModelMethod[] methods = getDeclaredMethods();
        ArrayList<ModelMethod> matching = new ArrayList<ModelMethod>();
        for (ModelMethod method : methods) {
            if (method.isPublic() && (!staticOnly || method.isStatic()) &&
                    name.equals(method.getName()) && method.acceptsArguments(args)) {
                matching.add(method);
            }
        }
        return matching.toArray(new ModelMethod[matching.size()]);
!!!35874615.java!!!	getMethods(inout name : String, in numParameters : int) : ModelMethod
        ModelMethod[] methods = getDeclaredMethods();
        ArrayList<ModelMethod> matching = new ArrayList<ModelMethod>();
        for (ModelMethod method : methods) {
            if (method.isPublic() && !method.isStatic() &&
                    name.equals(method.getName()) &&
                    method.getParameterTypes().length == numParameters) {
                matching.add(method);
            }
        }
        return matching.toArray(new ModelMethod[matching.size()]);
!!!35874743.java!!!	getMethod(inout name : String, inout args : List<ModelClass>, inout staticOnly : boolean) : ModelMethod
        ModelMethod[] methods = getMethods(name, args, staticOnly);
        L.d("looking methods for %s. static only ? %s . method count: %d", name, staticOnly,
                methods.length);
        for (ModelMethod method : methods) {
            L.d("method: %s, %s", method.getName(), method.isStatic());
        }
        if (methods.length == 0) {
            return null;
        }
        ModelMethod bestMethod = methods[0];
        for (int i = 1; i < methods.length; i++) {
            if (methods[i].isBetterArgMatchThan(bestMethod, args)) {
                bestMethod = methods[i];
            }
        }
        return bestMethod;
!!!35874999.java!!!	getCanonicalName() : String
        return erasure().toJavaCode();
!!!35875127.java!!!	getSimpleName() : String
        final String canonicalName = getCanonicalName();
        final int dotIndex = canonicalName.lastIndexOf('.');
        if (dotIndex >= 0) {
            return canonicalName.substring(dotIndex + 1);
        }
        return canonicalName;
!!!35875383.java!!!	getMinApi() : int
        return SdkUtil.getMinApi(this);
!!!35875639.java!!!	getAbstractMethods() : ModelMethod
        ArrayList<ModelMethod> abstractMethods = new ArrayList<ModelMethod>();
        ModelMethod[] methods = getDeclaredMethods();
        for (ModelMethod method : methods) {
            if (method.isAbstract()) {
                abstractMethods.add(method);
            }
        }
        return abstractMethods;
!!!35875767.java!!!	findGetterOrField(inout name : String, inout staticOnly : boolean) : Callable
        if ("length".equals(name) && isArray()) {
            return new Callable(Type.FIELD, name, null,
                    ModelAnalyzer.getInstance().loadPrimitive("int"), 0, 0);
        }
        String capitalized = StringUtils.capitalize(name);
        String[] methodNames = {
                "get" + capitalized,
                "is" + capitalized,
                name
        };
        for (String methodName : methodNames) {
            ModelMethod[] methods = getMethods(methodName, new ArrayList<ModelClass>(), staticOnly);
            for (ModelMethod method : methods) {
                if (method.isPublic() && (!staticOnly || method.isStatic()) &&
                        !method.getReturnType(Arrays.asList(method.getParameterTypes())).isVoid()) {
                    int flags = DYNAMIC;
                    if (method.isStatic()) {
                        flags |= STATIC;
                    }
                    if (method.isBindable()) {
                        flags |= CAN_BE_INVALIDATED;
                    } else {
                        // if method is not bindable, look for a backing field
                        final ModelField backingField = getField(name, true, method.isStatic());
                        L.d("backing field for method %s is %s", method.getName(),
                                backingField == null ? "NOT FOUND" : backingField.getName());
                        if (backingField != null && backingField.isBindable()) {
                            flags |= CAN_BE_INVALIDATED;
                        }
                    }
                    final ModelMethod setterMethod = findSetter(method, name);
                    final String setterName = setterMethod == null ? null : setterMethod.getName();
                    final Callable result = new Callable(Callable.Type.METHOD, methodName,
                            setterName, method.getReturnType(null), method.getParameterTypes().length,
                            flags);
                    return result;
                }
            }
        }

        // could not find a method. Look for a public field
        ModelField publicField = null;
        if (staticOnly) {
            publicField = getField(name, false, true);
        } else {
            // first check non-static
            publicField = getField(name, false, false);
            if (publicField == null) {
                // check for static
                publicField = getField(name, false, true);
            }
        }
        if (publicField == null) {
            return null;
        }
        ModelClass fieldType = publicField.getFieldType();
        int flags = 0;
        String setterFieldName = name;
        if (publicField.isStatic()) {
            flags |= STATIC;
        }
        if (!publicField.isFinal()) {
            setterFieldName = null;
            flags |= DYNAMIC;
        }
        if (publicField.isBindable()) {
            flags |= CAN_BE_INVALIDATED;
        }
        return new Callable(Callable.Type.FIELD, name, setterFieldName, fieldType, 0, flags);
!!!35875895.java!!!	findInstanceGetter(inout name : String) : ModelMethod
        String capitalized = StringUtils.capitalize(name);
        String[] methodNames = {
                "get" + capitalized,
                "is" + capitalized,
                name
        };
        for (String methodName : methodNames) {
            ModelMethod[] methods = getMethods(methodName, new ArrayList<ModelClass>(), false);
            for (ModelMethod method : methods) {
                if (method.isPublic() && !method.isStatic() &&
                        !method.getReturnType(Arrays.asList(method.getParameterTypes())).isVoid()) {
                    return method;
                }
            }
        }
        return null;
!!!35876023.java!!!	getField(inout name : String, inout allowPrivate : boolean, inout isStatic : boolean) : ModelField
        ModelField[] fields = getDeclaredFields();
        for (ModelField field : fields) {
            boolean nameMatch = name.equals(field.getName()) ||
                    name.equals(stripFieldName(field.getName()));
            if (nameMatch && field.isStatic() == isStatic &&
                    (allowPrivate || field.isPublic())) {
                return field;
            }
        }
        return null;
!!!35876151.java!!!	findSetter(inout getter : ModelMethod, inout originalName : String) : ModelMethod
        final String capitalized = StringUtils.capitalize(originalName);
        final String[] possibleNames;
        if (originalName.equals(getter.getName())) {
            possibleNames = new String[] { originalName, "set" + capitalized };
        } else if (getter.getName().startsWith("is")){
            possibleNames = new String[] { "set" + capitalized, "setIs" + capitalized };
        } else {
            possibleNames = new String[] { "set" + capitalized };
        }
        for (String name : possibleNames) {
            List<ModelMethod> methods = findMethods(name, getter.isStatic());
            if (methods != null) {
                ModelClass param = getter.getReturnType(null);
                for (ModelMethod method : methods) {
                    ModelClass[] parameterTypes = method.getParameterTypes();
                    if (parameterTypes != null && parameterTypes.length == 1 &&
                            parameterTypes[0].equals(param) &&
                            method.isStatic() == getter.isStatic()) {
                        return method;
                    }
                }
            }
        }
        return null;
!!!35876279.java!!!	findMethods(inout name : String, inout staticOnly : boolean) : ModelMethod
        ModelMethod[] methods = getDeclaredMethods();
        ArrayList<ModelMethod> matching = new ArrayList<ModelMethod>();
        for (ModelMethod method : methods) {
            if (method.getName().equals(name) && (!staticOnly || method.isStatic()) &&
                    method.isPublic()) {
                matching.add(method);
            }
        }
        if (matching.isEmpty()) {
            return null;
        }
        return matching;
!!!35876407.java!!!	isIncomplete() : boolean
        if (isTypeVar() || isWildcard()) {
            return true;
        }
        List<ModelClass> typeArgs = getTypeArguments();
        if (typeArgs != null) {
            for (ModelClass typeArg : typeArgs) {
                if (typeArg.isIncomplete()) {
                    return true;
                }
            }
        }
        return false;
!!!35876791.java!!!	stripFieldName(inout fieldName : String) : String
        // TODO: Make this configurable through IntelliJ
        if (fieldName.length() > 2) {
            final char start = fieldName.charAt(2);
            if (fieldName.startsWith("m_") && Character.isJavaIdentifierStart(start)) {
                return Character.toLowerCase(start) + fieldName.substring(3);
            }
        }
        if (fieldName.length() > 1) {
            final char start = fieldName.charAt(1);
            final char fieldIdentifier = fieldName.charAt(0);
            final boolean strip;
            if (fieldIdentifier == '_') {
                strip = true;
            } else if (fieldIdentifier == 'm' && Character.isJavaIdentifierStart(start) &&
                    !Character.isLowerCase(start)) {
                strip = true;
            } else {
                strip = false; // not mUppercase format
            }
            if (strip) {
                return Character.toLowerCase(start) + fieldName.substring(2);
            }
        }
        return fieldName;
