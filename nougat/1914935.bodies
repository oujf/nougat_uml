class InverseBinding
!!!35815223.java!!!	InverseBinding(inout target : BindingTarget, inout name : String, inout expr : Expr)
        mTarget = target;
        mName = name;
        mExpr = expr;
!!!35815351.java!!!	provideScopeLocation() : Location
        if (mExpr != null) {
            return mExpr.getLocations();
        } else {
            return mChainedExpressions.get(0).getLocations();
        }
!!!35815479.java!!!	setGetterCall(inout getterCall : SetterStore::BindingGetterCall) : void
        mGetterCall = getterCall;
!!!35815607.java!!!	addChainedExpression(inout expr : FieldAccessExpr) : void
        mChainedExpressions.add(expr);
!!!35815735.java!!!	isOnBinder() : boolean
        return mTarget.getResolvedType().isViewDataBinding();
!!!35815863.java!!!	getGetterCall() : SetterStore::BindingGetterCall
        if (mGetterCall == null) {
            if (mExpr != null) {
                mExpr.getResolvedType(); // force resolve of ObservableFields
            }
            try {
                Scope.enter(mTarget);
                Scope.enter(this);
                resolveGetterCall();
                if (mGetterCall == null) {
                    L.e(ErrorMessages.CANNOT_FIND_GETTER_CALL, mName,
                            mExpr == null ? "Unknown" : mExpr.getResolvedType(),
                            mTarget.getResolvedType());
                }
            } finally {
                Scope.exit();
                Scope.exit();
            }
        }
        return mGetterCall;
!!!35815991.java!!!	resolveGetterCall() : void
        ModelClass viewType = mTarget.getResolvedType();
        final SetterStore setterStore = SetterStore.get(ModelAnalyzer.getInstance());
        final ModelClass resolvedType = mExpr == null ? null : mExpr.getResolvedType();
        mGetterCall = setterStore.getGetterCall(mName, viewType, resolvedType,
                getModel().getImports());
!!!35816119.java!!!	getTarget() : BindingTarget
        return mTarget;
!!!35816247.java!!!	toJavaCode(inout bindingComponent : String, in flagField : FlagSet) : KCode
        final String targetViewName = LayoutBinderWriterKt.getFieldName(getTarget());
        KCode code = new KCode();
        // A chained expression will have substituted its chained value for the expression
        // unless the attribute has no expression. Therefore, chaining and expressions are
        // mutually exclusive.
        Preconditions.check((mExpr == null) != mChainedExpressions.isEmpty(),
                "Chained expressions are only against unbound attributes.");
        if (mExpr != null) {
            code.app("", mExpr.toInverseCode(new KCode(getGetterCall().toJava(bindingComponent,
                    targetViewName))));
        } else { // !mChainedExpressions.isEmpty())
            final String fieldName = flagField.getLocalName();
            FlagSet flagSet = new FlagSet();
            for (FieldAccessExpr expr : mChainedExpressions) {
                flagSet = flagSet.or(new FlagSet(expr.getId()));
            }
            final FlagSet allFlags = flagSet;
            code.nl(new KCode("synchronized(this) {"));
            code.tab(LayoutBinderWriterKt
                    .mapOr(flagField, flagSet, new Function2<String, Integer, KCode>() {
                        @Override
                        public KCode invoke(String suffix, Integer index) {
                            return new KCode(fieldName)
                                    .app(suffix)
                                    .app(" |= ")
                                    .app(LayoutBinderWriterKt.binaryCode(allFlags, index))
                                    .app(";");
                        }
                    }));
            code.nl(new KCode("}"));
            code.nl(new KCode("requestRebind()"));
        }
        return code;
!!!35816375.java!!!	getBindingAdapterInstanceClass() : String
        return getGetterCall().getBindingAdapterInstanceClass();
!!!35816503.java!!!	getMinApi() : int
        final BindingGetterCall getterCall = getGetterCall();
        return Math.max(getterCall.getMinApi(), getterCall.getEvent().getMinApi());
!!!35816631.java!!!	getEventSetter() : SetterStore::BindingSetterCall
        final BindingGetterCall getterCall = getGetterCall();
        return getterCall.getEvent();
!!!35816759.java!!!	getName() : String
        return mName;
!!!35816887.java!!!	getEventAttribute() : String
        return getGetterCall().getEventAttribute();
!!!35817015.java!!!	getModel() : ExprModel
        if (mExpr != null) {
            return mExpr.getModel();
        }
        return mChainedExpressions.get(0).getModel();
