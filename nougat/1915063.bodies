class ExprModel
!!!35843767.java!!!	register(inout expr : T) : T
        Preconditions.check(!mSealed, "Cannot add expressions to a model after it is sealed");
        Location location = null;
        if (mCurrentParserContext != null) {
            location = new Location(mCurrentParserContext);
            location.setParentLocation(mCurrentLocationInFile);
        }
        T existing = (T) mExprMap.get(expr.getUniqueKey());
        if (existing != null) {
            Preconditions.check(expr.getParents().isEmpty(),
                    "If an expression already exists, it should've never been added to a parent,"
                            + "if thats the case, somewhere we are creating an expression w/o"
                            + "calling expression model");
            // tell the expr that it is being swapped so that if it was added to some other expr
            // as a parent, those can swap their references
            expr.onSwappedWith(existing);
            if (location != null) {
                existing.addLocation(location);
            }
            return existing;
        }
        mExprMap.put(expr.getUniqueKey(), expr);
        expr.setModel(this);
        if (location != null) {
            expr.addLocation(location);
        }
        return expr;
!!!35843895.java!!!	setCurrentParserContext(inout currentParserContext : ParserRuleContext) : void
        mCurrentParserContext = currentParserContext;
!!!35844023.java!!!	getExprMap() : String
        return mExprMap;
!!!35844151.java!!!	size() : int
        return mExprMap.size();
!!!35844279.java!!!	comparison(inout op : String, inout left : Expr, inout right : Expr) : ComparisonExpr
        return register(new ComparisonExpr(op, left, right));
!!!35844407.java!!!	instanceOfOp(inout expr : Expr, inout type : String) : InstanceOfExpr
        return register(new InstanceOfExpr(expr, type));
!!!35844535.java!!!	field(inout parent : Expr, inout name : String) : FieldAccessExpr
        return register(new FieldAccessExpr(parent, name));
!!!35844663.java!!!	observableField(inout parent : Expr, inout name : String) : FieldAccessExpr
        return register(new FieldAccessExpr(parent, name, true));
!!!35844791.java!!!	symbol(inout text : String, inout type : Class) : SymbolExpr
        return register(new SymbolExpr(text, type));
!!!35844919.java!!!	ternary(inout pred : Expr, inout ifTrue : Expr, inout ifFalse : Expr) : TernaryExpr
        return register(new TernaryExpr(pred, ifTrue, ifFalse));
!!!35845047.java!!!	identifier(inout name : String) : IdentifierExpr
        return register(new IdentifierExpr(name));
!!!35845175.java!!!	staticIdentifier(inout name : String) : StaticIdentifierExpr
        return register(new StaticIdentifierExpr(name));
!!!35845303.java!!!	builtInVariable(inout name : String, inout type : String, inout accessCode : String) : BuiltInVariableExpr
        return register(new BuiltInVariableExpr(name, type, accessCode));
!!!35845431.java!!!	viewFieldExpr(inout bindingTarget : BindingTarget) : ViewFieldExpr
        return register(new ViewFieldExpr(bindingTarget));
!!!35845559.java!!!	staticIdentifierFor(in modelClass : ModelClass) : StaticIdentifierExpr
        final String type = modelClass.getCanonicalName();
        // check for existing
        for (Expr expr : mExprMap.values()) {
            if (expr instanceof StaticIdentifierExpr) {
                StaticIdentifierExpr id = (StaticIdentifierExpr) expr;
                if (id.getUserDefinedType().equals(type)) {
                    return id;
                }
            }
        }

        // does not exist. Find a name for it.
        int cnt = 0;
        int dotIndex = type.lastIndexOf(".");
        String baseName;
        Preconditions.check(dotIndex < type.length() - 1, "Invalid type %s", type);
        if (dotIndex == -1) {
            baseName = type;
        } else {
            baseName = type.substring(dotIndex + 1);
        }
        while (true) {
            String candidate = cnt == 0 ? baseName : baseName + cnt;
            if (!mImports.containsKey(candidate)) {
                return addImport(candidate, type, null);
            }
            cnt ++;
            Preconditions.check(cnt < 100, "Failed to create an import for " + type);
        }
!!!35845687.java!!!	methodCall(inout target : Expr, inout name : String, inout args : List<Expr>) : MethodCallExpr
        return register(new MethodCallExpr(target, name, args));
!!!35845815.java!!!	math(inout left : Expr, inout op : String, inout right : Expr) : MathExpr
        return register(new MathExpr(left, op, right));
!!!35845943.java!!!	logical(inout left : Expr, inout op : String, inout right : Expr) : TernaryExpr
        if ("&&".equals(op)) {
            // left && right
            // left ? right : false
            return register(new TernaryExpr(left, right, symbol("false", boolean.class)));
        } else {
            // left || right
            // left ? true : right
            return register(new TernaryExpr(left, symbol("true", boolean.class), right));
        }
!!!35846071.java!!!	bitshift(inout left : Expr, inout op : String, inout right : Expr) : BitShiftExpr
        return register(new BitShiftExpr(left, op, right));
!!!35846199.java!!!	unary(inout op : String, inout expr : Expr) : UnaryExpr
        return register(new UnaryExpr(op, expr));
!!!35846327.java!!!	group(inout grouped : Expr) : Expr
        return register(new GroupExpr(grouped));
!!!35846455.java!!!	resourceExpr(inout packageName : String, inout resourceType : String, inout resourceName : String, inout args : List<Expr>) : Expr
        return register(new ResourceExpr(packageName, resourceType, resourceName, args));
!!!35846583.java!!!	bracketExpr(inout variableExpr : Expr, inout argExpr : Expr) : Expr
        return register(new BracketExpr(variableExpr, argExpr));
!!!35846711.java!!!	castExpr(inout type : String, inout expr : Expr) : Expr
        return register(new CastExpr(type, expr));
!!!35846839.java!!!	twoWayListenerExpr(inout inverseBinding : InverseBinding) : TwoWayListenerExpr
        return register(new TwoWayListenerExpr(inverseBinding));
!!!35846967.java!!!	getBindingExpressions() : Expr
        return mBindingExpressions;
!!!35847095.java!!!	addImport(inout alias : String, inout type : String, inout location : Location) : StaticIdentifierExpr
        Preconditions.check(!mImports.containsKey(alias),
                "%s has already been defined as %s", alias, type);
        final StaticIdentifierExpr id = staticIdentifier(alias);
        L.d("adding import %s as %s klass: %s", type, alias, id.getClass().getSimpleName());
        id.setUserDefinedType(type);
        if (location != null) {
            id.addLocation(location);
        }
        mImports.put(alias, type);
        return id;
!!!35847223.java!!!	getImports() : String
        return mImports;
!!!35847351.java!!!	bindingExpr(inout bindingExpr : Expr) : Expr
        Preconditions.check(mExprMap.containsKey(bindingExpr.getUniqueKey()),
                "Main expression should already be registered");
        if (!mBindingExpressions.contains(bindingExpr)) {
            mBindingExpressions.add(bindingExpr);
        }
        return bindingExpr;
!!!35847479.java!!!	removeExpr(inout expr : Expr) : void
        Preconditions.check(!mSealed, "Can't modify the expression list after sealing the model.");
        mBindingExpressions.remove(expr);
        mExprMap.remove(expr.computeUniqueKey());
!!!35847607.java!!!	getObservables() : Expr
        return mObservables;
!!!35847735.java!!!	seal() : void
        L.d("sealing model");
        List<Expr> notifiableExpressions = new ArrayList<Expr>();
        //ensure class analyzer. We need to know observables at this point
        final ModelAnalyzer modelAnalyzer = ModelAnalyzer.getInstance();
        updateExpressions(modelAnalyzer);

        int counter = 0;
        final Iterable<Expr> observables = filterObservables(modelAnalyzer);
        List<String> flagMapping = new ArrayList<String>();
        mObservables = new ArrayList<Expr>();
        for (Expr expr : observables) {
            // observables gets initial ids
            flagMapping.add(expr.getUniqueKey());
            expr.setId(counter++);
            mObservables.add(expr);
            notifiableExpressions.add(expr);
            L.d("observable %s", expr.getUniqueKey());
        }

        // non-observable identifiers gets next ids
        final Iterable<Expr> nonObservableIds = filterNonObservableIds(modelAnalyzer);
        for (Expr expr : nonObservableIds) {
            flagMapping.add(expr.getUniqueKey());
            expr.setId(counter++);
            notifiableExpressions.add(expr);
            L.d("non-observable %s", expr.getUniqueKey());
        }

        // descendants of observables gets following ids
        for (Expr expr : observables) {
            for (Expr parent : expr.getParents()) {
                if (parent.hasId()) {
                    continue;// already has some id, means observable
                }
                // only fields earn an id
                if (parent instanceof FieldAccessExpr) {
                    FieldAccessExpr fae = (FieldAccessExpr) parent;
                    L.d("checking field access expr %s. getter: %s", fae,fae.getGetter());
                    if (fae.isDynamic() && fae.getGetter().canBeInvalidated()) {
                        flagMapping.add(parent.getUniqueKey());
                        parent.setId(counter++);
                        notifiableExpressions.add(parent);
                        L.d("notifiable field %s : %s for %s : %s", parent.getUniqueKey(),
                                Integer.toHexString(System.identityHashCode(parent)),
                                expr.getUniqueKey(),
                                Integer.toHexString(System.identityHashCode(expr)));
                    }
                }
            }
        }

        // now all 2-way bound view fields
        for (Expr expr : mExprMap.values()) {
            if (expr instanceof FieldAccessExpr) {
                FieldAccessExpr fieldAccessExpr = (FieldAccessExpr) expr;
                if (fieldAccessExpr.getChild() instanceof ViewFieldExpr) {
                    flagMapping.add(fieldAccessExpr.getUniqueKey());
                    fieldAccessExpr.setId(counter++);
                }
            }
        }

        // non-dynamic binding expressions receive some ids so that they can be invalidated
        L.d("list of binding expressions");
        for (int i = 0; i < mBindingExpressions.size(); i++) {
            L.d("[%d] %s", i, mBindingExpressions.get(i));
        }
        // we don't assign ids to constant binding expressions because now invalidateAll has its own
        // flag.

        for (Expr expr : notifiableExpressions) {
            expr.enableDirectInvalidation();
        }

        // make sure all dependencies are resolved to avoid future race conditions
        for (Expr expr : mExprMap.values()) {
            expr.getDependencies();
        }
        mInvalidateAnyFlagIndex = counter ++;
        flagMapping.add("INVALIDATE ANY");
        mInvalidateableFieldLimit = counter;
        mInvalidateableFlags = new BitSet();
        for (int i = 0; i < mInvalidateableFieldLimit; i++) {
            mInvalidateableFlags.set(i, true);
        }

        // make sure all dependencies are resolved to avoid future race conditions
        for (Expr expr : mExprMap.values()) {
            if (expr.isConditional()) {
                L.d("requirement id for %s is %d", expr, counter);
                expr.setRequirementId(counter);
                flagMapping.add(expr.getUniqueKey() + FALSE_KEY_SUFFIX);
                flagMapping.add(expr.getUniqueKey() + TRUE_KEY_SUFFIX);
                counter += 2;
            }
        }
        mConditionalFlags = new BitSet();
        for (int i = mInvalidateableFieldLimit; i < counter; i++) {
            mConditionalFlags.set(i, true);
        }
        mRequirementIdCount = (counter - mInvalidateableFieldLimit) / 2;

        // everybody gets an id
        for (Map.Entry<String, Expr> entry : mExprMap.entrySet()) {
            final Expr value = entry.getValue();
            if (!value.hasId()) {
                value.setId(counter++);
            }
        }

        mFlagMapping = new String[flagMapping.size()];
        flagMapping.toArray(mFlagMapping);

        mFlagBucketCount = 1 + (getTotalFlagCount() / FlagSet.sBucketSize);
        mInvalidateAnyFlags = new BitSet();
        mInvalidateAnyFlags.set(mInvalidateAnyFlagIndex, true);

        for (Expr expr : mExprMap.values()) {
            expr.getShouldReadFlagsWithConditionals();
        }

        for (Expr expr : mExprMap.values()) {
            // ensure all types are calculated
            expr.getResolvedType();
        }

        mSealed = true;
!!!35847863.java!!!	updateExpressions(inout modelAnalyzer : ModelAnalyzer) : void
        int startSize = -1;
        while (startSize != mExprMap.size()) {
            startSize = mExprMap.size();
            ArrayList<Expr> exprs = new ArrayList<Expr>(mBindingExpressions);
            for (Expr expr : exprs) {
                expr.updateExpr(modelAnalyzer);
            }
        }
!!!35847991.java!!!	getFlagBucketCount() : int
        return mFlagBucketCount;
!!!35848119.java!!!	getTotalFlagCount() : int
        return mRequirementIdCount * 2 + mInvalidateableFieldLimit;
!!!35848247.java!!!	getInvalidateableFieldLimit() : int
        return mInvalidateableFieldLimit;
!!!35848375.java!!!	getFlagMapping() : String
        return mFlagMapping;
!!!35848503.java!!!	getFlag(in id : int) : String
        return mFlagMapping[id];
!!!35848631.java!!!	filterNonObservableIds(in modelAnalyzer : ModelAnalyzer) : Expr
        List<Expr> result = new ArrayList<Expr>();
        for (Expr input : mExprMap.values()) {
            if (input instanceof IdentifierExpr
                    && !input.hasId()
                    && !input.isObservable()
                    && input.isDynamic()) {
                result.add(input);
            }
        }
        return result;
!!!35848759.java!!!	filterObservables(in modelAnalyzer : ModelAnalyzer) : Expr
        List<Expr> result = new ArrayList<Expr>();
        for (Expr input : mExprMap.values()) {
            if (input.isObservable()) {
                result.add(input);
            }
        }
        return result;
!!!35848887.java!!!	getPendingExpressions() : Expr
        if (mPendingExpressions == null) {
            mPendingExpressions = new ArrayList<Expr>();
            for (Expr expr : mExprMap.values()) {
                // if an expression is NOT dynanic but has conditional dependants, still return it
                // so that conditional flags can be set
                if (!expr.isRead() && (expr.isDynamic() || expr.hasConditionalDependant())) {
                    mPendingExpressions.add(expr);
                }
            }
        }
        return mPendingExpressions;
!!!35849015.java!!!	markBitsRead() : boolean
        // each has should read flags, we set them back on them
        List<Expr> markedSomeFlagsRead = new ArrayList<Expr>();
        for (Expr expr : filterShouldRead(getPendingExpressions())) {
            expr.markFlagsAsRead(expr.getShouldReadFlags());
            markedSomeFlagsRead.add(expr);
        }
        return pruneDone(markedSomeFlagsRead);
!!!35849143.java!!!	pruneDone(inout markedSomeFlagsAsRead : List<Expr>) : boolean
        boolean marked = true;
        List<Expr> markedAsReadList = new ArrayList<Expr>();
        while (marked) {
            marked = false;
            for (Expr expr : mExprMap.values()) {
                if (expr.isRead()) {
                    continue;
                }
                if (expr.markAsReadIfDone()) {
                    L.d("marked %s as read ", expr.getUniqueKey());
                    marked = true;
                    markedAsReadList.add(expr);
                    markedSomeFlagsAsRead.remove(expr);
                }
            }
        }
        boolean elevated = false;
        for (Expr markedAsRead : markedAsReadList) {
            for (Dependency dependency : markedAsRead.getDependants()) {
                if (dependency.getDependant().considerElevatingConditionals(markedAsRead)) {
                    elevated = true;
                }
            }
        }
        for (Expr partialRead : markedSomeFlagsAsRead) {
            // even if all paths are not satisfied, we can elevate certain conditional dependencies
            // if all of their paths are satisfied.
            for (Dependency dependency : partialRead.getDependants()) {
                Expr dependant = dependency.getDependant();
                if (dependant.isConditional() && dependant.getAllCalculationPaths()
                        .areAllPathsSatisfied(partialRead.mReadSoFar)) {
                    if (dependant.considerElevatingConditionals(partialRead)) {
                        elevated = true;
                    }
                }
            }
        }
        if (elevated) {
            // some conditionals are elevated. We should re-calculate flags
            for (Expr expr : getPendingExpressions()) {
                if (!expr.isRead()) {
                    expr.invalidateReadFlags();
                }
            }
            mPendingExpressions = null;
        }
        return elevated;
!!!35849271.java!!!	hasConditionalOrNestedCannotReadDependency(inout expr : Expr) : boolean
        for (Dependency dependency : expr.getDependencies()) {
            if (dependency.isConditional() || dependency.getOther().hasNestedCannotRead()) {
                return true;
            }
        }
        return false;
!!!35849399.java!!!	filterShouldRead(inout exprs : Iterable<Expr>) : Expr
        List<Expr> result = new ArrayList<Expr>();
        for (Expr expr : exprs) {
            if (!expr.getShouldReadFlags().isEmpty() &&
                    !hasConditionalOrNestedCannotReadDependency(expr)) {
                result.add(expr);
            }
        }
        return result;
!!!35849527.java!!!	findFlagExpression(in flag : int) : Expr
        if (mInvalidateAnyFlags.get(flag)) {
            return null;
        }
        final String key = mFlagMapping[flag];
        if (mExprMap.containsKey(key)) {
            return mExprMap.get(key);
        }
        int falseIndex = key.indexOf(FALSE_KEY_SUFFIX);
        if (falseIndex > -1) {
            final String trimmed = key.substring(0, falseIndex);
            return mExprMap.get(trimmed);
        }
        int trueIndex = key.indexOf(TRUE_KEY_SUFFIX);
        if (trueIndex > -1) {
            final String trimmed = key.substring(0, trueIndex);
            return mExprMap.get(trimmed);
        }
        // log everything we call
        StringBuilder error = new StringBuilder();
        error.append("cannot find flag:").append(flag).append("\n");
        error.append("invalidate any flag:").append(mInvalidateAnyFlags).append("\n");
        error.append("key:").append(key).append("\n");
        error.append("flag mapping:").append(Arrays.toString(mFlagMapping));
        L.e(error.toString());
        return null;
!!!35849655.java!!!	getInvalidateAnyBitSet() : BitSet
        return mInvalidateAnyFlags;
!!!35849783.java!!!	getInvalidateAnyFlagIndex() : int
        return mInvalidateAnyFlagIndex;
!!!35849911.java!!!	argListExpr(inout expressions : Iterable<Expr>) : Expr
        return register(new ArgListExpr(mArgListIdCounter ++, expressions));
!!!35850039.java!!!	setCurrentLocationInFile(inout location : Location) : void
        mCurrentLocationInFile = location;
!!!35850167.java!!!	listenerExpr(inout expression : Expr, inout name : String, inout listenerType : ModelClass, inout listenerMethod : ModelMethod) : Expr
        return register(new ListenerExpr(expression, name, listenerType, listenerMethod));
