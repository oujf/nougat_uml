class LayoutBinder
!!!35817271.java!!!	LayoutBinder(inout layoutBundle : ResourceBundle::LayoutFileBundle)
        try {
            Scope.enter(this);
            mExprModel = new ExprModel();
            mExpressionParser = new ExpressionParser(mExprModel);
            mBindingTargets = new ArrayList<BindingTarget>();
            mBundle = layoutBundle;
            mModulePackage = layoutBundle.getModulePackage();
            HashSet<String> names = new HashSet<String>();
            // copy over data.
            for (ResourceBundle.VariableDeclaration variable : mBundle.getVariables()) {
                addVariable(variable.name, variable.type, variable.location, variable.declared);
                names.add(variable.name);
            }

            for (ResourceBundle.NameTypeLocation userImport : mBundle.getImports()) {
                mExprModel.addImport(userImport.name, userImport.type, userImport.location);
                names.add(userImport.name);
            }
            if (!names.contains("context")) {
                mExprModel.builtInVariable("context", "android.content.Context",
                        "getRoot().getContext()");
                names.add("context");
            }
            for (String javaLangClass : sJavaLangClasses) {
                mExprModel.addImport(javaLangClass, "java.lang." + javaLangClass, null);
            }
            // First resolve all the View fields
            // Ensure there are no conflicts with variable names
            for (BindingTargetBundle targetBundle : mBundle.getBindingTargetBundles()) {
                try {
                    Scope.enter(targetBundle);
                    final BindingTarget bindingTarget = createBindingTarget(targetBundle);
                    if (bindingTarget.getId() != null) {
                        final String fieldName = LayoutBinderWriterKt.
                                getReadableName(bindingTarget);
                        if (names.contains(fieldName)) {
                            L.w("View field %s collides with a variable or import", fieldName);
                        } else {
                            names.add(fieldName);
                            mExprModel.viewFieldExpr(bindingTarget);
                        }
                    }
                } finally {
                    Scope.exit();
                }
            }

            for (BindingTarget bindingTarget : mBindingTargets) {
                try {
                    Scope.enter(bindingTarget.mBundle);
                    for (BindingTargetBundle.BindingBundle bindingBundle : bindingTarget.mBundle
                            .getBindingBundleList()) {
                        try {
                            Scope.enter(bindingBundle.getValueLocation());
                            bindingTarget.addBinding(bindingBundle.getName(),
                                    parse(bindingBundle.getExpr(), bindingBundle.isTwoWay(),
                                            bindingBundle.getValueLocation()));
                        } finally {
                            Scope.exit();
                        }
                    }
                    bindingTarget.resolveTwoWayExpressions();
                    bindingTarget.resolveMultiSetters();
                    bindingTarget.resolveListeners();
                } finally {
                    Scope.exit();
                }
            }
            mSortedBindingTargets = new ArrayList<BindingTarget>(mBindingTargets);
            Collections.sort(mSortedBindingTargets, COMPARE_FIELD_NAME);
        } finally {
            Scope.exit();
        }
!!!35817399.java!!!	resolveWhichExpressionsAreUsed() : void
        List<Expr> used = new ArrayList<Expr>();
        for (BindingTarget target : mBindingTargets) {
            for (Binding binding : target.getBindings()) {
                binding.getExpr().setIsUsed(true);
                used.add(binding.getExpr());
            }
        }
        while (!used.isEmpty()) {
            Expr e = used.remove(used.size() - 1);
            for (Dependency dep : e.getDependencies()) {
                if (!dep.getOther().isUsed()) {
                    used.add(dep.getOther());
                    dep.getOther().setIsUsed(true);
                }
            }
        }
!!!35817527.java!!!	addVariable(inout name : String, inout type : String, inout location : Location, inout declared : boolean) : IdentifierExpr
        Preconditions.check(!mUserDefinedVariables.containsKey(name),
                "%s has already been defined as %s", name, type);
        final IdentifierExpr id = mExprModel.identifier(name);
        id.setUserDefinedType(type);
        id.enableDirectInvalidation();
        if (location != null) {
            id.addLocation(location);
        }
        mUserDefinedVariables.put(name, type);
        if (declared) {
            id.setDeclared();
        }
        return id;
!!!35817655.java!!!	getUserDefinedVariables() : String
        return mUserDefinedVariables;
!!!35817783.java!!!	createBindingTarget(inout targetBundle : ResourceBundle::BindingTargetBundle) : BindingTarget
        final BindingTarget target = new BindingTarget(targetBundle);
        mBindingTargets.add(target);
        target.setModel(mExprModel);
        return target;
!!!35817911.java!!!	parse(inout input : String, inout isTwoWay : boolean, inout locationInFile : Location) : Expr
        final Expr parsed = mExpressionParser.parse(input, locationInFile);
        parsed.setBindingExpression(true);
        parsed.setTwoWay(isTwoWay);
        return parsed;
!!!35818039.java!!!	getBindingTargets() : BindingTarget
        return mBindingTargets;
!!!35818167.java!!!	getSortedTargets() : BindingTarget
        return mSortedBindingTargets;
!!!35818295.java!!!	isEmpty() : boolean
        return mExprModel.size() == 0;
!!!35818423.java!!!	getModel() : ExprModel
        return mExprModel;
!!!35818551.java!!!	ensureWriter() : void
        if (mWriter == null) {
            mWriter = new LayoutBinderWriter(this);
        }
!!!35818679.java!!!	sealModel() : void
        mExprModel.seal();
!!!35818807.java!!!	writeViewBinderBaseClass(inout forLibrary : boolean) : String
        ensureWriter();
        return mWriter.writeBaseClass(forLibrary);
!!!35818935.java!!!	writeViewBinder(in minSdk : int) : String
        ensureWriter();
        Preconditions.checkNotNull(getPackage(), "package cannot be null");
        Preconditions.checkNotNull(getClassName(), "base class name cannot be null");
        return mWriter.write(minSdk);
!!!35819063.java!!!	getPackage() : String
        return mBundle.getBindingClassPackage();
!!!35819191.java!!!	isMerge() : boolean
        return mBundle.isMerge();
!!!35819319.java!!!	getModulePackage() : String
        return mModulePackage;
!!!35819447.java!!!	getLayoutname() : String
        return mBundle.getFileName();
!!!35819575.java!!!	getImplementationName() : String
        if (hasVariations()) {
            return mBundle.getBindingClassName() + mBundle.getConfigName() + "Impl";
        } else {
            return mBundle.getBindingClassName();
        }
!!!35819703.java!!!	getClassName() : String
        return mBundle.getBindingClassName();
!!!35819831.java!!!	getTag() : String
        return mBundle.getDirectory() + "/" + mBundle.getFileName();
!!!35819959.java!!!	hasVariations() : boolean
        return mBundle.hasVariations();
!!!35820087.java!!!	provideScopeFilePath() : String
        return mBundle.getAbsoluteFilePath();
