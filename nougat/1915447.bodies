class ExpressionParser
!!!35802935.java!!!	ExpressionParser(inout model : ExprModel)
        mModel = model;
        visitor = new ExpressionVisitor(mModel);
!!!35803063.java!!!	parse(inout input : String, inout locationInFile : Location) : Expr
        ANTLRInputStream inputStream = new ANTLRInputStream(input);
        BindingExpressionLexer lexer = new BindingExpressionLexer(inputStream);
        CommonTokenStream tokenStream = new CommonTokenStream(lexer);
        final BindingExpressionParser parser = new BindingExpressionParser(tokenStream);
        parser.addErrorListener(new BaseErrorListener() {
            @Override
            public <T extends Token> void syntaxError(Recognizer<T, ?> recognizer,
                    @Nullable T offendingSymbol, int line, int charPositionInLine, String msg,
                    @Nullable RecognitionException e) {
                L.e(ErrorMessages.SYNTAX_ERROR, msg);
            }
        });
        BindingExpressionParser.BindingSyntaxContext root = parser.bindingSyntax();
        try {
            mModel.setCurrentLocationInFile(locationInFile);
            visitor.setParseTreeListener(new ParseTreeListener() {
                List<ParserRuleContext> mStack = new ArrayList<ParserRuleContext>();
                @Override
                public void visitTerminal(TerminalNode node) {
                }

                @Override
                public void visitErrorNode(ErrorNode node) {
                }

                @Override
                public void enterEveryRule(ParserRuleContext ctx) {
                    mStack.add(ctx);
                    mModel.setCurrentParserContext(ctx);
                }

                @Override
                public void exitEveryRule(ParserRuleContext ctx) {
                    Preconditions.check(ctx == mStack.get(mStack.size() - 1),
                            "Inconsistent exit from context. Received %s, expecting %s",
                            ctx.toInfoString(parser),
                            mStack.get(mStack.size() - 1).toInfoString(parser));
                    mStack.remove(mStack.size() - 1);
                    if (mStack.size() > 0) {
                        mModel.setCurrentParserContext(mStack.get(mStack.size() - 1));
                    } else {
                        mModel.setCurrentParserContext(null);
                    }
                }
            });
            return root.accept(visitor);
        } finally {
            mModel.setCurrentLocationInFile(null);
        }
!!!35803191.java!!!	getModel() : ExprModel
        return mModel;
