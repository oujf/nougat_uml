class ExpressionVisitor
!!!35812279.java!!!	ExpressionVisitor(inout model : ExprModel)
        mModel = model;
!!!35812407.java!!!	setParseTreeListener(inout parseTreeListener : ParseTreeListener) : void
        mParseTreeListener = parseTreeListener;
!!!35812535.java!!!	onEnter(inout context : ParserRuleContext) : void
        if (mParseTreeListener != null) {
            mParseTreeListener.enterEveryRule(context);
        }
!!!35812663.java!!!	onExit(inout context : ParserRuleContext) : void
        if (mParseTreeListener != null) {
            mParseTreeListener.exitEveryRule(context);
        }
!!!35812791.java!!!	visitStringLiteral(inout ctx : BindingExpressionParser::StringLiteralContext) : Expr
        try {
            onEnter(ctx);
            final String javaString;
            if (ctx.SingleQuoteString() != null) {
                String str = ctx.SingleQuoteString().getText();
                String contents = str.substring(1, str.length() - 1);
                contents = contents.replace("\"", "\\\"").replace("\\`", "`");
                javaString = '"' + contents + '"';
            } else {
                javaString = ctx.DoubleQuoteString().getText();
            }
            return mModel.symbol(javaString, String.class);
        } finally {
            onExit(ctx);
        }
!!!35812919.java!!!	visitGrouping(inout ctx : BindingExpressionParser::GroupingContext) : Expr
        try {
            onEnter(ctx);
            Preconditions.check(ctx.children.size() == 3, "Grouping expression should have"
                    + " 3 children. # of children: %d", ctx.children.size());
            return mModel.group(ctx.children.get(1).accept(this));
        } finally {
            onExit(ctx);
        }
!!!35813047.java!!!	visitBindingSyntax(inout ctx : BindingExpressionParser::BindingSyntaxContext) : Expr
        try {
            onEnter(ctx);
            // TODO handle defaults
            return mModel.bindingExpr(ctx.expression().accept(this));
        } catch (Exception e) {
            System.out.println("Error while parsing! " + ctx.getText());
            e.printStackTrace();
            throw new RuntimeException(e);
        } finally {
            onExit(ctx);
        }
!!!35813175.java!!!	visitDotOp(inout ctx : BindingExpressionParser::DotOpContext) : Expr
        try {
            onEnter(ctx);
            ModelAnalyzer analyzer = ModelAnalyzer.getInstance();
            ModelClass modelClass = analyzer.findClass(ctx.getText(), mModel.getImports());
            if (modelClass == null) {
                return mModel.field(ctx.expression().accept(this),
                        ctx.Identifier().getSymbol().getText());
            } else {
                String name = modelClass.toJavaCode();
                StaticIdentifierExpr expr = mModel.staticIdentifier(name);
                expr.setUserDefinedType(name);
                return expr;
            }
        } finally {
            onExit(ctx);
        }
!!!35813303.java!!!	visitQuestionQuestionOp(inout ctx : BindingExpressionParser::QuestionQuestionOpContext) : Expr
        try {
            onEnter(ctx);
            final Expr left = ctx.left.accept(this);
            return mModel.ternary(mModel.comparison("==", left, mModel.symbol("null", Object.class)),
                    ctx.right.accept(this), left);
        } finally {
            onExit(ctx);
        }
!!!35813431.java!!!	visitTerminal(inout node : TerminalNode) : Expr
        try {
            onEnter((ParserRuleContext) node.getParent().getRuleContext());
            final int type = node.getSymbol().getType();
            Class classType;
            switch (type) {
                case BindingExpressionParser.IntegerLiteral:
                    classType = int.class;
                    break;
                case BindingExpressionParser.FloatingPointLiteral:
                    classType = float.class;
                    break;
                case BindingExpressionParser.BooleanLiteral:
                    classType = boolean.class;
                    break;
                case BindingExpressionParser.CharacterLiteral:
                    classType = char.class;
                    break;
                case BindingExpressionParser.SingleQuoteString:
                case BindingExpressionParser.DoubleQuoteString:
                    classType = String.class;
                    break;
                case BindingExpressionParser.NullLiteral:
                    classType = Object.class;
                    break;
                default:
                    throw new RuntimeException("cannot create expression from terminal node " +
                            node.toString());
            }
            return mModel.symbol(node.getText(), classType);
        } finally {
            onExit((ParserRuleContext) node.getParent().getRuleContext());
        }
!!!35813559.java!!!	visitComparisonOp(inout ctx : BindingExpressionParser::ComparisonOpContext) : Expr
        try {
            onEnter(ctx);
            return mModel.comparison(ctx.op.getText(), ctx.left.accept(this), ctx.right.accept(this));
        } finally {
            onExit(ctx);
        }
!!!35813687.java!!!	visitIdentifier(inout ctx : BindingExpressionParser::IdentifierContext) : Expr
        try {
            onEnter(ctx);
            return mModel.identifier(ctx.getText());
        } finally {
            onExit(ctx);
        }
!!!35813815.java!!!	visitTernaryOp(inout ctx : BindingExpressionParser::TernaryOpContext) : Expr
        try {
            onEnter(ctx);
            return mModel.ternary(ctx.left.accept(this), ctx.iftrue.accept(this),
                    ctx.iffalse.accept(this));
        } finally {
            onExit(ctx);
        }

!!!35813943.java!!!	visitMethodInvocation(inout ctx : BindingExpressionParser::MethodInvocationContext) : Expr
        try {
            onEnter(ctx);
            List<Expr> args = new ArrayList<Expr>();
            if (ctx.args != null) {
                for (ParseTree item : ctx.args.children) {
                    if (Objects.equal(item.getText(), ",")) {
                        continue;
                    }
                    args.add(item.accept(this));
                }
            }
            return mModel.methodCall(ctx.target.accept(this),
                    ctx.Identifier().getText(), args);
        } finally {
            onExit(ctx);
        }
!!!35814071.java!!!	visitMathOp(inout ctx : BindingExpressionParser::MathOpContext) : Expr
        try {
            onEnter(ctx);
            return mModel.math(ctx.left.accept(this), ctx.op.getText(), ctx.right.accept(this));
        } finally {
            onExit(ctx);
        }
!!!35814199.java!!!	visitAndOrOp(inout ctx : BindingExpressionParser::AndOrOpContext) : Expr
        try {
            onEnter(ctx);
            return mModel.logical(ctx.left.accept(this), ctx.op.getText(), ctx.right.accept(this));
        } finally {
            onExit(ctx);
        }
!!!35814327.java!!!	visitBinaryOp(inout ctx : BindingExpressionParser::BinaryOpContext) : Expr
        try {
            onEnter(ctx);
            return mModel.math(ctx.left.accept(this), ctx.op.getText(), ctx.right.accept(this));
        } finally {
            onExit(ctx);
        }
!!!35814455.java!!!	visitBitShiftOp(inout ctx : BindingExpressionParser::BitShiftOpContext) : Expr
        try {
            onEnter(ctx);
            return mModel.bitshift(ctx.left.accept(this), ctx.op.getText(), ctx.right.accept(this));
        } finally {
            onExit(ctx);
        }
!!!35814583.java!!!	visitInstanceOfOp(inout ctx : BindingExpressionParser::InstanceOfOpContext) : Expr
        try {
            onEnter(ctx);
            return mModel.instanceOfOp(ctx.expression().accept(this), ctx.type().getText());
        } finally {
            onExit(ctx);
        }
!!!35814711.java!!!	visitUnaryOp(inout ctx : BindingExpressionParser::UnaryOpContext) : Expr
        try {
            onEnter(ctx);
            return mModel.unary(ctx.op.getText(), ctx.expression().accept(this));
        } finally {
            onExit(ctx);
        }
!!!35814839.java!!!	visitResources(inout ctx : BindingExpressionParser::ResourcesContext) : Expr
        try {
            onEnter(ctx);
            final List<Expr> args = new ArrayList<Expr>();
            if (ctx.resourceParameters() != null) {
                for (ParseTree item : ctx.resourceParameters().expressionList().children) {
                    if (Objects.equal(item.getText(), ",")) {
                        continue;
                    }
                    args.add(item.accept(this));
                }
            }
            final String resourceReference = ctx.ResourceReference().getText();
            final int colonIndex = resourceReference.indexOf(':');
            final int slashIndex = resourceReference.indexOf('/');
            final String packageName = colonIndex < 0 ? null :
                    resourceReference.substring(1, colonIndex).trim();
            final int startIndex = Math.max(1, colonIndex + 1);
            final String resourceType = resourceReference.substring(startIndex, slashIndex).trim();
            final String resourceName = resourceReference.substring(slashIndex + 1).trim();
            return mModel.resourceExpr(packageName, resourceType, resourceName, args);
        } finally {
            onExit(ctx);
        }
!!!35814967.java!!!	visitBracketOp(inout ctx : BindingExpressionParser::BracketOpContext) : Expr
        try {
            onEnter(ctx);
            return mModel.bracketExpr(visit(ctx.expression(0)), visit(ctx.expression(1)));
        } finally {
            onExit(ctx);
        }
!!!35815095.java!!!	visitCastOp(inout ctx : BindingExpressionParser::CastOpContext) : Expr
        try {
            onEnter(ctx);
            return mModel.castExpr(ctx.type().getText(), visit(ctx.expression()));
        } finally {
            onExit(ctx);
        }
