class FlagSet
!!!35894327.java!!!	FlagSet(inout bitSet : BitSet, in bucketCount : int)
        buckets = new long[bucketCount];
        for (int i = bitSet.nextSetBit(0);
                i != -1; i = bitSet.nextSetBit(i + 1)) {
            buckets[i / sBucketSize] |= 1L << (i % sBucketSize);
        }
        type = "long";
!!!35894455.java!!!	FlagSet(inout buckets : long)
        this.buckets = new long[buckets.length];
        System.arraycopy(buckets, 0, this.buckets, 0, buckets.length);
        type = "long";
!!!35894583.java!!!	FlagSet(inout buckets : long, in minBucketCount : int)
        this.buckets = new long[Math.max(buckets.length, minBucketCount)];
        System.arraycopy(buckets, 0, this.buckets, 0, buckets.length);
        type = "long";
!!!35894711.java!!!	FlagSet(inout  : int...bits)
        int max = 0;
        for (int i = 0 ; i < bits.length; i ++) {
            max = Math.max(i, bits[i]);
        }
        buckets = new long[1 + (max / sBucketSize)];
        for (int x = 0 ; x < bits.length; x ++) {
            final int i = bits[x];
            buckets[i / sBucketSize] |= 1L << (i % sBucketSize);
        }
        type = "long";
!!!35894839.java!!!	intersect(inout other : FlagSet, in bucketIndex : int) : boolean
        return (buckets[bucketIndex] & other.buckets[bucketIndex]) != 0;
!!!35894967.java!!!	getLocalName() : String
        return mLocalName;
!!!35895095.java!!!	setLocalName(inout localName : String) : void
        mLocalName = localName;
!!!35895223.java!!!	hasLocalName() : boolean
        return mLocalName != null;
!!!35895351.java!!!	isDynamic() : boolean
        return mIsDynamic;
!!!35895479.java!!!	setDynamic(inout isDynamic : boolean) : void
        mIsDynamic = isDynamic;
!!!35895607.java!!!	andNot(inout other : FlagSet) : FlagSet
        FlagSet result = new FlagSet(buckets);
        final int min = Math.min(buckets.length, other.buckets.length);
        for (int i = 0; i < min; i ++) {
            result.buckets[i] &= ~(other.buckets[i]);
        }
        return result;
!!!35895735.java!!!	or(inout other : FlagSet) : FlagSet
        final FlagSet result = new FlagSet(buckets, other.buckets.length);
        for (int i = 0; i < other.buckets.length; i ++) {
            result.buckets[i] |= other.buckets[i];
        }
        return result;
!!!35895863.java!!!	isEmpty() : boolean
        for (int i = 0; i < buckets.length; i ++) {
            if (buckets[i] != 0) {
                return false;
            }
        }
        return true;
!!!35895991.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < buckets.length; i ++) {
            sb.append(Long.toBinaryString(buckets[i])).append(" ");
        }
        return sb.toString();
!!!35896119.java!!!	getBucket(in bucketIndex : int) : long
        if (bucketIndex >= buckets.length) {
            return 0;
        }
        return buckets[bucketIndex];
!!!35896247.java!!!	bitsEqual(inout other : FlagSet) : boolean
        final int max = Math.max(buckets.length, other.buckets.length);
        for (int i = 0; i < max; i ++) {
            if (getBucket(i) != other.getBucket(i)) {
                return false;
            }
        }
        return true;
!!!35896375.java!!!	hashCode() : int
        int hash = 1;
        for (long bucket : buckets) {
            hash = (hash * 7) ^ (int)(bucket >>> 32);
            hash = (hash * 13) ^ (int)(bucket & 0xFFFF);
        }
        return hash;
!!!35896503.java!!!	equals(inout obj : Object) : boolean
        if (obj instanceof FlagSet) {
            FlagSet other = (FlagSet) obj;
            if (other.buckets.length != buckets.length) {
                return false;
            }
            for (int i = 0; i < buckets.length; i++) {
                if (buckets[i] != other.buckets[i]) {
                    return false;
                }
            }
            return true;
        } else {
            return false;
        }
