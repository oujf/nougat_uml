class LayoutFileBundle
!!!35993271.java!!!	inheritConfigurationFrom(inout other : ResourceBundle::LayoutFileBundle) : void
            mFileName = other.mFileName;
            mModulePackage = other.mModulePackage;
            mBindingClass = other.mBindingClass;
            mFullBindingClass = other.mFullBindingClass;
            mBindingClassName = other.mBindingClassName;
            mBindingPackage = other.mBindingPackage;
            mHasVariations = other.mHasVariations;
            mIsMerge = other.mIsMerge;
!!!35993399.java!!!	LayoutFileBundle(inout file : File, inout fileName : String, inout directory : String, inout modulePackage : String, inout isMerge : boolean)
            mFileName = fileName;
            mDirectory = directory;
            mModulePackage = modulePackage;
            mIsMerge = isMerge;
            mAbsoluteFilePath = file.getAbsolutePath();
!!!35993527.java!!!	getClassNameLocationProvider() : LocationScopeProvider
            if (mClassNameLocationProvider == null && mClassNameLocation != null
                    && mClassNameLocation.isValid()) {
                mClassNameLocationProvider = mClassNameLocation.createScope();
            }
            return mClassNameLocationProvider;
!!!35993655.java!!!	addVariable(inout name : String, inout type : String, inout location : Location, inout declared : boolean) : void
            Preconditions.check(!NameTypeLocation.contains(mVariables, name),
                    "Cannot use same variable name twice. %s in %s", name, location);
            mVariables.add(new VariableDeclaration(name, type, location, declared));
!!!35993783.java!!!	addImport(inout alias : String, inout type : String, inout location : Location) : void
            Preconditions.check(!NameTypeLocation.contains(mImports, alias),
                    "Cannot import same alias twice. %s in %s", alias, location);
            mImports.add(new NameTypeLocation(alias, type, location));
!!!35993911.java!!!	createBindingTarget(inout id : String, inout viewName : String, inout used : boolean, inout tag : String, inout originalTag : String, inout location : Location) : ResourceBundle::BindingTargetBundle
            BindingTargetBundle target = new BindingTargetBundle(id, viewName, used, tag,
                    originalTag, location);
            mBindingTargetBundles.add(target);
            return target;
!!!35994039.java!!!	isEmpty() : boolean
            return mVariables.isEmpty() && mImports.isEmpty() && mBindingTargetBundles.isEmpty();
!!!35994167.java!!!	getBindingTargetById(inout key : String) : ResourceBundle::BindingTargetBundle
            for (BindingTargetBundle target : mBindingTargetBundles) {
                if (key.equals(target.mId)) {
                    return target;
                }
            }
            return null;
!!!35994295.java!!!	getFileName() : String
            return mFileName;
!!!35994423.java!!!	getConfigName() : String
            return mConfigName;
!!!35994551.java!!!	getDirectory() : String
            return mDirectory;
!!!35994679.java!!!	hasVariations() : boolean
            return mHasVariations;
!!!35994807.java!!!	getVariables() : ResourceBundle::VariableDeclaration
            return mVariables;
!!!35994935.java!!!	getImports() : ResourceBundle::NameTypeLocation
            return mImports;
!!!35995063.java!!!	isMerge() : boolean
            return mIsMerge;
!!!35995191.java!!!	getBindingClassName() : String
            if (mBindingClassName == null) {
                String fullClass = getFullBindingClass();
                int dotIndex = fullClass.lastIndexOf('.');
                mBindingClassName = fullClass.substring(dotIndex + 1);
            }
            return mBindingClassName;
!!!35995319.java!!!	setBindingClass(inout bindingClass : String, inout location : Location) : void
            mBindingClass = bindingClass;
            mClassNameLocation = location;
!!!35995447.java!!!	getBindingClassPackage() : String
            if (mBindingPackage == null) {
                String fullClass = getFullBindingClass();
                int dotIndex = fullClass.lastIndexOf('.');
                mBindingPackage = fullClass.substring(0, dotIndex);
            }
            return mBindingPackage;
!!!35995575.java!!!	getFullBindingClass() : String
            if (mFullBindingClass == null) {
                if (mBindingClass == null) {
                    mFullBindingClass = getModulePackage() + ".databinding." +
                            ParserHelper.toClassName(getFileName()) + "Binding";
                } else if (mBindingClass.startsWith(".")) {
                    mFullBindingClass = getModulePackage() + mBindingClass;
                } else if (mBindingClass.indexOf('.') < 0) {
                    mFullBindingClass = getModulePackage() + ".databinding." + mBindingClass;
                } else {
                    mFullBindingClass = mBindingClass;
                }
            }
            return mFullBindingClass;
!!!35995703.java!!!	getBindingTargetBundles() : ResourceBundle::BindingTargetBundle
            return mBindingTargetBundles;
!!!35995831.java!!!	equals(inout o : Object) : boolean
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }

            LayoutFileBundle bundle = (LayoutFileBundle) o;

            if (mConfigName != null ? !mConfigName.equals(bundle.mConfigName)
                    : bundle.mConfigName != null) {
                return false;
            }
            if (mDirectory != null ? !mDirectory.equals(bundle.mDirectory)
                    : bundle.mDirectory != null) {
                return false;
            }
            return !(mFileName != null ? !mFileName.equals(bundle.mFileName)
                    : bundle.mFileName != null);

!!!35995959.java!!!	hashCode() : int
            int result = mFileName != null ? mFileName.hashCode() : 0;
            result = 31 * result + (mConfigName != null ? mConfigName.hashCode() : 0);
            result = 31 * result + (mDirectory != null ? mDirectory.hashCode() : 0);
            return result;
!!!35996087.java!!!	toString() : String
            return "LayoutFileBundle{" +
                    "mHasVariations=" + mHasVariations +
                    ", mDirectory='" + mDirectory + '\'' +
                    ", mConfigName='" + mConfigName + '\'' +
                    ", mModulePackage='" + mModulePackage + '\'' +
                    ", mFileName='" + mFileName + '\'' +
                    '}';
!!!35996215.java!!!	getModulePackage() : String
            return mModulePackage;
!!!35996343.java!!!	getAbsoluteFilePath() : String
            return mAbsoluteFilePath;
!!!35996471.java!!!	provideScopeFilePath() : String
            return mAbsoluteFilePath;
!!!35996599.java!!!	toXML() : String
            StringWriter writer = new StringWriter();
            getMarshaller().marshal(this, writer);
            return writer.getBuffer().toString();
!!!35996727.java!!!	fromXML(inout inputStream : InputStream) : ResourceBundle::LayoutFileBundle
            return (LayoutFileBundle) getUnmarshaller().unmarshal(inputStream);
!!!35996855.java!!!	getMarshaller() : Marshaller
            if (sMarshaller == null) {
                JAXBContext context = JAXBContext
                        .newInstance(ResourceBundle.LayoutFileBundle.class);
                sMarshaller = context.createMarshaller();
            }
            return sMarshaller;
!!!35996983.java!!!	getUnmarshaller() : Unmarshaller
            if (sUmarshaller == null) {
                JAXBContext context = JAXBContext
                        .newInstance(ResourceBundle.LayoutFileBundle.class);
                sUmarshaller = context.createUnmarshaller();
            }
            return sUmarshaller;
