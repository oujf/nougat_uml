class BracketExpr
!!!35835831.java!!!	BracketExpr(inout target : Expr, inout arg : Expr)
        super(target, arg);
!!!35835959.java!!!	resolveType(inout modelAnalyzer : ModelAnalyzer) : ModelClass
        ModelClass targetType = getTarget().getResolvedType();
        if (targetType.isArray()) {
            mAccessor = BracketAccessor.ARRAY;
        } else if (targetType.isList()) {
            mAccessor = BracketAccessor.LIST;
        } else if (targetType.isMap()) {
            mAccessor = BracketAccessor.MAP;
        } else {
            throw new IllegalArgumentException("Cannot determine variable type used in [] " +
                    "expression. Cast the value to List, Map, " +
                    "or array. Type detected: " + targetType.toJavaCode());
        }
        return targetType.getComponentType();
!!!35836087.java!!!	constructDependencies() : Dependency
        final List<Dependency> dependencies = constructDynamicChildrenDependencies();
        for (Dependency dependency : dependencies) {
            if (dependency.getOther() == getTarget()) {
                dependency.setMandatory(true);
            }
        }
        return dependencies;
!!!35836215.java!!!	computeUniqueKey() : String
        final String targetKey = getTarget().computeUniqueKey();
        return addTwoWay(join(targetKey, "$", getArg().computeUniqueKey(), "$"));
!!!35836343.java!!!	getInvertibleError() : String
        return null;
!!!35836471.java!!!	getTarget() : Expr
        return getChildren().get(0);
!!!35836599.java!!!	getArg() : Expr
        return getChildren().get(1);
!!!35836727.java!!!	getAccessor() : BracketExpr::BracketAccessor
        return mAccessor;
!!!35836855.java!!!	argCastsInteger() : boolean
        return mAccessor != BracketAccessor.MAP && getArg().getResolvedType().isObject();
!!!35836983.java!!!	generateCode(inout expand : boolean) : KCode
        String cast = argCastsInteger() ? "(Integer) " : "";
        switch (getAccessor()) {
            case ARRAY: {
                return new KCode().
                        app("getFromArray(", getTarget().toCode()).
                        app(", ").
                        app(cast, getArg().toCode()).app(")");
            }
            case LIST: {
                ModelClass listType = ModelAnalyzer.getInstance().findClass(java.util.List.class).
                        erasure();
                ModelClass targetType = getTarget().getResolvedType().erasure();
                if (listType.isAssignableFrom(targetType)) {
                    return new KCode().
                            app("getFromList(", getTarget().toCode()).
                            app(", ").
                            app(cast, getArg().toCode()).
                            app(")");
                } else {
                    return new KCode().
                            app("", getTarget().toCode()).
                            app(".get(").
                            app(cast, getArg().toCode()).
                            app(")");
                }
            }
            case MAP:
                return new KCode().
                        app("", getTarget().toCode()).
                        app(".get(", getArg().toCode()).
                        app(")");
        }
        throw new IllegalStateException("Invalid BracketAccessor type");
!!!35837111.java!!!	toInverseCode(inout value : KCode) : KCode
        String cast = argCastsInteger() ? "(Integer) " : "";
        return new KCode().
                app("setTo(", getTarget().toCode(true)).
                app(", ").
                app(cast, getArg().toCode(true)).
                app(", ", value).app(");");
