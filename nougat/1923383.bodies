class TernaryExpr
!!!35862583.java!!!	TernaryExpr(inout pred : Expr, inout ifTrue : Expr, inout ifFalse : Expr)
        super(pred, ifTrue, ifFalse);
!!!35862711.java!!!	getPred() : Expr
        return getChildren().get(0);
!!!35862839.java!!!	getIfTrue() : Expr
        return getChildren().get(1);
!!!35862967.java!!!	getIfFalse() : Expr
        return getChildren().get(2);
!!!35863095.java!!!	computeUniqueKey() : String
        return "?:" + super.computeUniqueKey();
!!!35863223.java!!!	getInvertibleError() : String
        if (getPred().isDynamic()) {
            return "The condition of a ternary operator must be constant: " +
                    getPred().toFullCode();
        }
        final String trueInvertible = getIfTrue().getInvertibleError();
        if (trueInvertible != null) {
            return trueInvertible;
        } else {
            return getIfFalse().getInvertibleError();
        }
!!!35863351.java!!!	resolveType(inout modelAnalyzer : ModelAnalyzer) : ModelClass
        final Expr ifTrue = getIfTrue();
        final Expr ifFalse = getIfFalse();
        if (isNullLiteral(ifTrue)) {
            return ifFalse.getResolvedType();
        } else if (isNullLiteral(ifFalse)) {
            return ifTrue.getResolvedType();
        }
        return modelAnalyzer.findCommonParentOf(getIfTrue().getResolvedType(),
                getIfFalse().getResolvedType());
!!!35863479.java!!!	isNullLiteral(inout expr : Expr) : boolean
        final ModelClass type = expr.getResolvedType();
        return (type.isObject() && (expr instanceof SymbolExpr) &&
                "null".equals(((SymbolExpr)expr).getText()));
!!!35863607.java!!!	constructDependencies() : Dependency
        List<Dependency> deps = new ArrayList<Dependency>();
        Expr predExpr = getPred();
        final Dependency pred = new Dependency(this, predExpr);
        pred.setMandatory(true);
        deps.add(pred);

        Expr ifTrueExpr = getIfTrue();
        if (ifTrueExpr.isDynamic()) {
            deps.add(new Dependency(this, ifTrueExpr, predExpr, true));
        }
        Expr ifFalseExpr = getIfFalse();
        if (ifFalseExpr.isDynamic()) {
            deps.add(new Dependency(this, ifFalseExpr, predExpr, false));
        }
        return deps;
!!!35863735.java!!!	getPredicateInvalidFlags() : BitSet
        return getPred().getInvalidFlags();
!!!35863863.java!!!	generateCode(inout expand : boolean) : KCode
        return new KCode()
                .app("", getPred().toCode(expand))
                .app(" ? ", getIfTrue().toCode(expand))
                .app(" : ", getIfFalse().toCode(expand));

!!!35863991.java!!!	toInverseCode(inout variable : KCode) : KCode
        return new KCode()
                .app("if (", getPred().toCode(true))
                .app(") {")
                .tab(getIfTrue().toInverseCode(variable))
                .nl(new KCode("} else {"))
                .tab(getIfFalse().toInverseCode(variable))
                .nl(new KCode("}"));
!!!35864119.java!!!	isConditional() : boolean
        return true;
