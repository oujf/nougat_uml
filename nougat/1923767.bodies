class MethodCallExpr
!!!35857847.java!!!	concat(inout e : Expr, inout list : List<Expr>) : Expr
        List<Expr> merged = new ArrayList<Expr>();
        merged.add(e);
        merged.addAll(list);
        return merged;
!!!35857975.java!!!	MethodCallExpr(inout target : Expr, inout name : String, inout args : List<Expr>)
        super(concat(target, args));
        mName = name;
!!!35858103.java!!!	updateExpr(inout modelAnalyzer : ModelAnalyzer) : void
        try {
            Scope.enter(this);
            resolveType(modelAnalyzer);
            super.updateExpr(modelAnalyzer);
        } finally {
            Scope.exit();
        }
!!!35858231.java!!!	generateCode(inout expand : boolean) : KCode
        KCode code = new KCode()
        .app("", getTarget().toCode(expand))
        .app(".")
        .app(getGetter().name)
        .app("(");
        boolean first = true;
        for (Expr arg : getArgs()) {
            if (first) {
                first = false;
            } else {
                code.app(", ");
            }
            code.app("", arg.toCode(expand));
        }
        code.app(")");
        return code;
!!!35858359.java!!!	resolveType(inout modelAnalyzer : ModelAnalyzer) : ModelClass
        if (mGetter == null) {
            List<ModelClass> args = new ArrayList<ModelClass>();
            for (Expr expr : getArgs()) {
                args.add(expr.getResolvedType());
            }

            Expr target = getTarget();
            boolean isStatic = target instanceof StaticIdentifierExpr;
            ModelMethod method = target.getResolvedType().getMethod(mName, args, isStatic);
            if (method == null) {
                String message = "cannot find method '" + mName + "' in class " +
                        target.getResolvedType().toJavaCode();
                IllegalArgumentException e = new IllegalArgumentException(message);
                L.e(e, "cannot find method %s in class %s", mName,
                        target.getResolvedType().toJavaCode());
                throw e;
            }
            if (!isStatic && method.isStatic()) {
                // found a static method on an instance. Use class instead
                target.getParents().remove(this);
                getChildren().remove(target);
                StaticIdentifierExpr staticId = getModel()
                        .staticIdentifierFor(target.getResolvedType());
                getChildren().add(staticId);
                staticId.getParents().add(this);
                // make sure we update this in case we access it below
                target = getTarget();
            }
            int flags = DYNAMIC;
            if (method.isStatic()) {
                flags |= STATIC;
            }
            mGetter = new Callable(Type.METHOD, method.getName(), null, method.getReturnType(args),
                    method.getParameterTypes().length, flags);
        }
        return mGetter.resolvedType;
!!!35858487.java!!!	constructDependencies() : Dependency
        final List<Dependency> dependencies = constructDynamicChildrenDependencies();
        for (Dependency dependency : dependencies) {
            if (dependency.getOther() == getTarget()) {
                dependency.setMandatory(true);
            }
        }
        return dependencies;
!!!35858615.java!!!	computeUniqueKey() : String
        return join(getTarget().computeUniqueKey(), mName,
                super.computeUniqueKey());
!!!35858743.java!!!	getTarget() : Expr
        return getChildren().get(0);
!!!35858871.java!!!	getName() : String
        return mName;
!!!35858999.java!!!	getArgs() : Expr
        return getChildren().subList(1, getChildren().size());
!!!35859127.java!!!	getGetter() : Callable
        return mGetter;
!!!35859255.java!!!	getInvertibleError() : String
        return "Method calls may not be used in two-way expressions";
