class MathExpr
!!!35856311.java!!!	MathExpr(inout left : Expr, inout op : String, inout right : Expr)
        super(left, right);
        mOp = op;
!!!35856439.java!!!	computeUniqueKey() : String
        return addTwoWay(join(getLeft().getUniqueKey(), mOp, getRight().getUniqueKey()));
!!!35856567.java!!!	resolveType(inout modelAnalyzer : ModelAnalyzer) : ModelClass
        if ("+".equals(mOp)) {
            // TODO we need upper casting etc.
            if (getLeft().getResolvedType().isString()
                    || getRight().getResolvedType().isString()) {
                return modelAnalyzer.findClass(String.class);
            }
        }
        return modelAnalyzer.findCommonParentOf(getLeft().getResolvedType(),
                getRight().getResolvedType());
!!!35856695.java!!!	constructDependencies() : Dependency
        return constructDynamicChildrenDependencies();
!!!35856823.java!!!	getOp() : String
        return mOp;
!!!35856951.java!!!	getLeft() : Expr
        return getChildren().get(0);
!!!35857079.java!!!	getRight() : Expr
        return getChildren().get(1);
!!!35857207.java!!!	generateCode(inout expand : boolean) : KCode
        return new KCode().app("", getLeft().toCode(expand)).app(mOp, getRight().toCode(expand));
!!!35857335.java!!!	getInvertibleError() : String
        if (mOp.equals("%")) {
            return "The modulus operator (%) is not supported in two-way binding.";
        } else if (getResolvedType().isString()) {
            return "String concatenation operator (+) is not supported in two-way binding.";
        }
        if (!getLeft().isDynamic()) {
            return getRight().getInvertibleError();
        } else if (!getRight().isDynamic()) {
            return getLeft().getInvertibleError();
        } else {
            return "Arithmetic operator " + mOp + " is not supported with two dynamic expressions.";
        }
!!!35857463.java!!!	inverseCast() : String
        if (!getLeft().isDynamic()) {
            return inverseCast(getRight());
        } else {
            return inverseCast(getLeft());
        }
!!!35857591.java!!!	inverseCast(inout expr : Expr) : String
        if (!expr.getResolvedType().isAssignableFrom(getResolvedType())) {
            return "(" + getResolvedType() + ")";
        }
        return null;
!!!35857719.java!!!	toInverseCode(inout value : KCode) : KCode
        if (!isDynamic()) {
            return toCode();
        }
        final Expr left = getLeft();
        final Expr right = getRight();
        final Expr constExpr = left.isDynamic() ? right : left;
        final Expr varExpr = left.isDynamic() ? left : right;
        final String cast = inverseCast();
        if (cast != null) {
            value = new KCode(cast).app("(", value).app(")");
        }
        switch (mOp.charAt(0)) {
            case '+': // const + x = value  => x = value - const
                return varExpr.toInverseCode(value.app(" - (", constExpr.toCode()).app(")"));
            case '*': // const * x = value => x = value / const
                return varExpr.toInverseCode(value.app(" / (", constExpr.toCode()).app(")"));
            case '-':
                if (!left.isDynamic()) { // const - x = value => x = const - value)
                    return varExpr.toInverseCode(new KCode()
                            .app("(", constExpr.toCode())
                            .app(") - (", value)
                            .app(")"));
                } else { // x - const = value => x = value + const)
                    return varExpr.toInverseCode(value.app(" + ", constExpr.toCode()));
                }
            case '/':
                if (!left.isDynamic()) { // const / x = value => x = const / value
                    return varExpr.toInverseCode(new KCode("(")
                            .app("", constExpr.toCode())
                            .app(") / (", value)
                            .app(")"));
                } else { // x / const = value => x = value * const
                    return varExpr.toInverseCode(new KCode("(")
                            .app("", value)
                            .app(") * (", constExpr.toCode())
                            .app(")"));
                }
        }
        throw new IllegalStateException("Invalid math operation is not invertible: " + mOp);
