class ListenerExpr
!!!35855031.java!!!	ListenerExpr(inout expr : Expr, inout name : String, inout listenerType : ModelClass, inout method : ModelMethod)
        super(expr);
        mName = name;
        mListenerType = listenerType;
        mMethod = method;
!!!35855159.java!!!	resolveType(inout modelAnalyzer : ModelAnalyzer) : ModelClass
        return mListenerType;
!!!35855287.java!!!	getMethod() : ModelMethod
        return mMethod;
!!!35855415.java!!!	getChild() : Expr
        return getChildren().get(0);
!!!35855543.java!!!	getName() : String
        return mName;
!!!35855671.java!!!	isDynamic() : boolean
        return getChild().isDynamic();
!!!35855799.java!!!	constructDependencies() : Dependency
        final List<Dependency> dependencies = new ArrayList<Dependency>();
        Dependency dependency = new Dependency(this, getChild());
        dependency.setMandatory(true);
        dependencies.add(dependency);
        return dependencies;
!!!35855927.java!!!	computeUniqueKey() : String
        return join(getResolvedType().getCanonicalName(), getChild().computeUniqueKey(), mName);
!!!35856055.java!!!	generateCode(inout expand : boolean) : KCode
        KCode code = new KCode("(");
        final int minApi = Math.max(mListenerType.getMinApi(), mMethod.getMinApi());
        if (minApi > 1) {
            code.app("(getBuildSdkInt() < " + minApi + ") ? null : ");
        }
        final String fieldName = LayoutBinderWriterKt.getFieldName(this);
        final String listenerClassName = LayoutBinderWriterKt.getListenerClassName(this);
        final KCode value = getChild().toCode();
            code.app("((")
                    .app(fieldName)
                    .app(" == null) ? (")
                    .app(fieldName)
                    .app(" = new ")
                    .app(listenerClassName)
                    .app("()) : ")
                    .app(fieldName)
                    .app(")");
        if (getChild().isDynamic()) {
            code.app(".setValue(", value)
                    .app(")");
        }
        code.app(")");
        return code;
!!!35856183.java!!!	getInvertibleError() : String
        return "Listeners cannot be the target of a two-way binding";
