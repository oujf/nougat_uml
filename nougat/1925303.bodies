class ApiChecker
!!!35880503.java!!!	ApiChecker(inout apiFile : File)
            InputStream inputStream = null;
            try {
                if (apiFile == null || !apiFile.exists()) {
                    inputStream = getClass().getClassLoader().getResourceAsStream("api-versions.xml");
                } else {
                    inputStream = FileUtils.openInputStream(apiFile);
                }
                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                DocumentBuilder builder = factory.newDocumentBuilder();
                mDoc = builder.parse(inputStream);
                XPathFactory xPathFactory = XPathFactory.newInstance();
                mXPath = xPathFactory.newXPath();
                buildFullLookup();
            } catch (Throwable t) {
                L.e(t, "cannot load api descriptions from %s", apiFile);
            } finally {
                IOUtils.closeQuietly(inputStream);
            }
!!!35880631.java!!!	buildFullLookup() : void
            NodeList allClasses = mDoc.getChildNodes().item(0).getChildNodes();
            mFullLookup = new HashMap<String, Integer>(allClasses.getLength() * 4);
            for (int j = 0; j < allClasses.getLength(); j++) {
                Node node = allClasses.item(j);
                if (node.getNodeType() != Node.ELEMENT_NODE || !"class"
                        .equals(node.getNodeName())) {
                    continue;
                }
                //L.d("checking node %s", node.getAttributes().getNamedItem("name").getNodeValue());
                int classSince = getSince(node);
                String classDesc = node.getAttributes().getNamedItem("name").getNodeValue();

                final NodeList childNodes = node.getChildNodes();
                for (int i = 0; i < childNodes.getLength(); i++) {
                    Node child = childNodes.item(i);
                    if (child.getNodeType() != Node.ELEMENT_NODE || !"method"
                            .equals(child.getNodeName())) {
                        continue;
                    }
                    int methodSince = getSince(child);
                    int since = Math.max(classSince, methodSince);
                    String methodDesc = child.getAttributes().getNamedItem("name")
                            .getNodeValue();
                    String key = cacheKey(classDesc, methodDesc);
                    mFullLookup.put(key, since);
                }
            }
!!!35880759.java!!!	getMinApi(inout classDesc : String, inout methodOrFieldDesc : String) : int
            if (mDoc == null || mXPath == null) {
                return 1;
            }
            if (classDesc == null || classDesc.isEmpty()) {
                return 1;
            }
            final String key = cacheKey(classDesc, methodOrFieldDesc);
            Integer since = mFullLookup.get(key);
            return since == null ? 0 : since;
!!!35880887.java!!!	cacheKey(inout classDesc : String, inout methodOrFieldDesc : String) : String
            return classDesc + "~" + methodOrFieldDesc;
!!!35881015.java!!!	getSince(inout node : Node) : int
            final Node since = node.getAttributes().getNamedItem("since");
            if (since != null) {
                final String nodeValue = since.getNodeValue();
                if (nodeValue != null && !nodeValue.isEmpty()) {
                    try {
                        return Integer.parseInt(nodeValue);
                    } catch (Throwable t) {
                    }
                }
            }

            return 1;
