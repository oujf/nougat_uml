class AnnotationClass
!!!35883063.java!!!	AnnotationClass(inout typeMirror : TypeMirror)
        mTypeMirror = typeMirror;
!!!35883191.java!!!	toJavaCode() : String
        if (isIncomplete()) {
            return getCanonicalName();
        }
        return mTypeMirror.toString();
!!!35883319.java!!!	isArray() : boolean
        return mTypeMirror.getKind() == TypeKind.ARRAY;
!!!35883447.java!!!	getComponentType() : AnnotationClass
        TypeMirror component = null;
        if (isArray()) {
            component = ((ArrayType) mTypeMirror).getComponentType();
        } else if (isList()) {
            for (ModelMethod method : getMethods("get", 1)) {
                ModelClass parameter = method.getParameterTypes()[0];
                if (parameter.isInt() || parameter.isLong()) {
                    ArrayList<ModelClass> parameters = new ArrayList<ModelClass>(1);
                    parameters.add(parameter);
                    return (AnnotationClass) method.getReturnType(parameters);
                }
            }
            // no "get" call found!
            return null;
        } else {
            AnnotationClass mapClass = (AnnotationClass) ModelAnalyzer.getInstance().getMapType();
            DeclaredType mapType = findInterface(mapClass.mTypeMirror);
            if (mapType == null) {
                return null;
            }
            component = mapType.getTypeArguments().get(1);
        }

        return new AnnotationClass(component);
!!!35883575.java!!!	findInterface(inout interfaceType : TypeMirror) : DeclaredType
        Types typeUtil = getTypeUtils();
        TypeMirror foundInterface = null;
        if (typeUtil.isSameType(interfaceType, typeUtil.erasure(mTypeMirror))) {
            foundInterface = mTypeMirror;
        } else {
            ArrayList<TypeMirror> toCheck = new ArrayList<TypeMirror>();
            toCheck.add(mTypeMirror);
            while (!toCheck.isEmpty()) {
                TypeMirror typeMirror = toCheck.remove(0);
                if (typeUtil.isSameType(interfaceType, typeUtil.erasure(typeMirror))) {
                    foundInterface = typeMirror;
                    break;
                } else {
                    toCheck.addAll(typeUtil.directSupertypes(typeMirror));
                }
            }
            if (foundInterface == null) {
                L.e("Detected " + interfaceType + " type for " + mTypeMirror +
                        ", but not able to find the implemented interface.");
                return null;
            }
        }
        if (foundInterface.getKind() != TypeKind.DECLARED) {
            L.e("Found " + interfaceType + " type for " + mTypeMirror +
                    ", but it isn't a declared type: " + foundInterface);
            return null;
        }
        return (DeclaredType) foundInterface;
!!!35883703.java!!!	isNullable() : boolean
        switch (mTypeMirror.getKind()) {
            case ARRAY:
            case DECLARED:
            case NULL:
                return true;
            default:
                return false;
        }
!!!35883831.java!!!	isPrimitive() : boolean
        switch (mTypeMirror.getKind()) {
            case BOOLEAN:
            case BYTE:
            case SHORT:
            case INT:
            case LONG:
            case CHAR:
            case FLOAT:
            case DOUBLE:
                return true;
            default:
                return false;
        }
!!!35883959.java!!!	isBoolean() : boolean
        return mTypeMirror.getKind() == TypeKind.BOOLEAN;
!!!35884087.java!!!	isChar() : boolean
        return mTypeMirror.getKind() == TypeKind.CHAR;
!!!35884215.java!!!	isByte() : boolean
        return mTypeMirror.getKind() == TypeKind.BYTE;
!!!35884343.java!!!	isShort() : boolean
        return mTypeMirror.getKind() == TypeKind.SHORT;
!!!35884471.java!!!	isInt() : boolean
        return mTypeMirror.getKind() == TypeKind.INT;
!!!35884599.java!!!	isLong() : boolean
        return mTypeMirror.getKind() == TypeKind.LONG;
!!!35884727.java!!!	isFloat() : boolean
        return mTypeMirror.getKind() == TypeKind.FLOAT;
!!!35884855.java!!!	isDouble() : boolean
        return mTypeMirror.getKind() == TypeKind.DOUBLE;
!!!35884983.java!!!	isGeneric() : boolean
        boolean isGeneric = false;
        if (mTypeMirror.getKind() == TypeKind.DECLARED) {
            DeclaredType declaredType = (DeclaredType) mTypeMirror;
            List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
            isGeneric = typeArguments != null && !typeArguments.isEmpty();
        }
        return isGeneric;
!!!35885111.java!!!	getMinApi() : int
        if (mTypeMirror.getKind() == TypeKind.DECLARED) {
            DeclaredType declaredType = (DeclaredType) mTypeMirror;
            List<? extends AnnotationMirror> annotations =
                    getElementUtils().getAllAnnotationMirrors(declaredType.asElement());

            TypeElement targetApi = getElementUtils().getTypeElement("android.annotation.TargetApi");
            TypeMirror targetApiType = targetApi.asType();
            Types typeUtils = getTypeUtils();
            for (AnnotationMirror annotation : annotations) {
                if (typeUtils.isAssignable(annotation.getAnnotationType(), targetApiType)) {
                    for (AnnotationValue value : annotation.getElementValues().values()) {
                        return (Integer) value.getValue();
                    }
                }
            }
        }
        return super.getMinApi();
!!!35885239.java!!!	getTypeArguments() : ModelClass
        List<ModelClass> types = null;
        if (mTypeMirror.getKind() == TypeKind.DECLARED) {
            DeclaredType declaredType = (DeclaredType) mTypeMirror;
            List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();
            if (typeArguments != null && !typeArguments.isEmpty()) {
                types = new ArrayList<ModelClass>();
                for (TypeMirror typeMirror : typeArguments) {
                    types.add(new AnnotationClass(typeMirror));
                }
            }
        }
        return types;
!!!35885367.java!!!	isTypeVar() : boolean
        return mTypeMirror.getKind() == TypeKind.TYPEVAR;
!!!35885495.java!!!	isWildcard() : boolean
        return mTypeMirror.getKind() == TypeKind.WILDCARD;
!!!35885623.java!!!	isInterface() : boolean
        return mTypeMirror.getKind() == TypeKind.DECLARED &&
                ((DeclaredType)mTypeMirror).asElement().getKind() == ElementKind.INTERFACE;
!!!35885751.java!!!	isVoid() : boolean
        return mTypeMirror.getKind() == TypeKind.VOID;
!!!35885879.java!!!	unbox() : AnnotationClass
        if (!isNullable()) {
            return this;
        }
        try {
            return new AnnotationClass(getTypeUtils().unboxedType(mTypeMirror));
        } catch (IllegalArgumentException e) {
            // I'm being lazy. This is much easier than checking every type.
            return this;
        }
!!!35886007.java!!!	box() : AnnotationClass
        if (!isPrimitive()) {
            return this;
        }
        return new AnnotationClass(getTypeUtils().boxedClass((PrimitiveType) mTypeMirror).asType());
!!!35886135.java!!!	isAssignableFrom(inout that : ModelClass) : boolean
        if (that == null) {
            return false;
        }
        AnnotationClass thatAnnotationClass = (AnnotationClass) that;
        return getTypeUtils().isAssignable(thatAnnotationClass.mTypeMirror, this.mTypeMirror);
!!!35886263.java!!!	getDeclaredMethods() : ModelMethod
        final ModelMethod[] declaredMethods;
        if (mTypeMirror.getKind() == TypeKind.DECLARED) {
            DeclaredType declaredType = (DeclaredType) mTypeMirror;
            Elements elementUtils = getElementUtils();
            TypeElement typeElement = (TypeElement) declaredType.asElement();
            List<? extends Element> members = elementUtils.getAllMembers(typeElement);
            List<ExecutableElement> methods = ElementFilter.methodsIn(members);
            declaredMethods = new ModelMethod[methods.size()];
            for (int i = 0; i < declaredMethods.length; i++) {
                declaredMethods[i] = new AnnotationMethod(declaredType, methods.get(i));
            }
        } else {
            declaredMethods = new ModelMethod[0];
        }
        return declaredMethods;
!!!35886391.java!!!	getSuperclass() : AnnotationClass
        if (mTypeMirror.getKind() == TypeKind.DECLARED) {
            DeclaredType declaredType = (DeclaredType) mTypeMirror;
            TypeElement typeElement = (TypeElement) declaredType.asElement();
            TypeMirror superClass = typeElement.getSuperclass();
            if (superClass.getKind() == TypeKind.DECLARED) {
                return new AnnotationClass(superClass);
            }
        }
        return null;
!!!35886519.java!!!	getCanonicalName() : String
        return getTypeUtils().erasure(mTypeMirror).toString();
!!!35886647.java!!!	erasure() : ModelClass
        final TypeMirror erasure = getTypeUtils().erasure(mTypeMirror);
        if (erasure == mTypeMirror) {
            return this;
        } else {
            return new AnnotationClass(erasure);
        }
!!!35886775.java!!!	getJniDescription() : String
        return TypeUtil.getInstance().getDescription(this);
!!!35886903.java!!!	getDeclaredFields() : ModelField
        final ModelField[] declaredFields;
        if (mTypeMirror.getKind() == TypeKind.DECLARED) {
            DeclaredType declaredType = (DeclaredType) mTypeMirror;
            Elements elementUtils = getElementUtils();
            TypeElement typeElement = (TypeElement) declaredType.asElement();
            List<? extends Element> members = elementUtils.getAllMembers(typeElement);
            List<VariableElement> fields = ElementFilter.fieldsIn(members);
            declaredFields = new ModelField[fields.size()];
            for (int i = 0; i < declaredFields.length; i++) {
                declaredFields[i] = new AnnotationField(typeElement, fields.get(i));
            }
        } else {
            declaredFields = new ModelField[0];
        }
        return declaredFields;
!!!35887031.java!!!	equals(inout obj : Object) : boolean
        if (obj instanceof AnnotationClass) {
            return getTypeUtils().isSameType(mTypeMirror, ((AnnotationClass) obj).mTypeMirror);
        } else {
            return false;
        }
!!!35887159.java!!!	hashCode() : int
        return mTypeMirror.toString().hashCode();
!!!35887287.java!!!	getTypeUtils() : Types
        return AnnotationAnalyzer.get().mProcessingEnv.getTypeUtils();
!!!35887415.java!!!	getElementUtils() : Elements
        return AnnotationAnalyzer.get().mProcessingEnv.getElementUtils();
!!!35887543.java!!!	toString() : String
        return mTypeMirror.toString();
