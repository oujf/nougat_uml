class AnnotationMethod
!!!35888823.java!!!	AnnotationMethod(inout declaringType : DeclaredType, inout executableElement : ExecutableElement)
        mDeclaringType = declaringType;
        mExecutableElement = executableElement;
        Types typeUtils = AnnotationAnalyzer.get().getTypeUtils();
        mMethod = (ExecutableType) typeUtils.asMemberOf(declaringType, executableElement);
!!!35888951.java!!!	getDeclaringClass() : ModelClass
        if (mReceiverType == null) {
            mReceiverType = findReceiverType(mDeclaringType);
            if (mReceiverType == null) {
                mReceiverType = new AnnotationClass(mDeclaringType);
            }
        }
        return mReceiverType;
!!!35889079.java!!!	findReceiverType(inout subType : DeclaredType) : ModelClass
        List<? extends TypeMirror> supers = getTypeUtils().directSupertypes(subType);
        for (TypeMirror superType : supers) {
            if (superType.getKind() == TypeKind.DECLARED) {
                DeclaredType declaredType = (DeclaredType) superType;
                ModelClass inSuper = findReceiverType(declaredType);
                if (inSuper != null) {
                    return inSuper;
                } else if (hasExecutableMethod(declaredType)) {
                    return new AnnotationClass(declaredType);
                }
            }
        }
        return null;
!!!35889207.java!!!	hasExecutableMethod(inout declaredType : DeclaredType) : boolean
        Elements elementUtils = getElementUtils();
        TypeElement enclosing = (TypeElement) mExecutableElement.getEnclosingElement();
        TypeElement typeElement = (TypeElement) declaredType.asElement();
        for (Element element : typeElement.getEnclosedElements()) {
            if (element.getKind() == ElementKind.METHOD) {
                ExecutableElement executableElement = (ExecutableElement) element;
                if (executableElement.equals(mExecutableElement) ||
                        elementUtils.overrides(mExecutableElement, executableElement, enclosing)) {
                    return true;
                }
            }
        }
        return false;
!!!35889335.java!!!	getParameterTypes() : ModelClass
        List<? extends TypeMirror> parameters = mMethod.getParameterTypes();
        ModelClass[] parameterTypes = new ModelClass[parameters.size()];
        for (int i = 0; i < parameters.size(); i++) {
            parameterTypes[i] = new AnnotationClass(parameters.get(i));
        }
        return parameterTypes;
!!!35889463.java!!!	getName() : String
        return mExecutableElement.getSimpleName().toString();
!!!35889591.java!!!	getReturnType(inout args : List<ModelClass>) : ModelClass
        TypeMirror returnType = mMethod.getReturnType();
        // TODO: support argument-supplied types
        // for example: public T[] toArray(T[] arr)
        return new AnnotationClass(returnType);
!!!35889719.java!!!	isVoid() : boolean
        return mMethod.getReturnType().getKind() == TypeKind.VOID;
!!!35889847.java!!!	isPublic() : boolean
        return mExecutableElement.getModifiers().contains(Modifier.PUBLIC);
!!!35889975.java!!!	isStatic() : boolean
        return mExecutableElement.getModifiers().contains(Modifier.STATIC);
!!!35890103.java!!!	isAbstract() : boolean
        return mExecutableElement.getModifiers().contains(Modifier.ABSTRACT);
!!!35890231.java!!!	isBindable() : boolean
        return mExecutableElement.getAnnotation(Bindable.class) != null;
!!!35890359.java!!!	getMinApi() : int
        if (mApiLevel == -1) {
            mApiLevel = SdkUtil.getMinApi(this);
        }
        return mApiLevel;
!!!35890487.java!!!	getJniDescription() : String
        return TypeUtil.getInstance().getDescription(this);
!!!35890615.java!!!	isVarArgs() : boolean
        return mExecutableElement.isVarArgs();
!!!35890743.java!!!	getTypeUtils() : Types
        return AnnotationAnalyzer.get().mProcessingEnv.getTypeUtils();
!!!35890871.java!!!	getElementUtils() : Elements
        return AnnotationAnalyzer.get().mProcessingEnv.getElementUtils();
!!!35890999.java!!!	toString() : String
        return "AnnotationMethod{" +
                "mMethod=" + mMethod +
                ", mDeclaringType=" + mDeclaringType +
                ", mExecutableElement=" + mExecutableElement +
                ", mApiLevel=" + mApiLevel +
                '}';
