class GenerationalClassUtil
!!!35892535.java!!!	loadObjects(inout filter : GenerationalClassUtil::ExtensionFilter) : List<T>
        if (sCache == null) {
            buildCache();
        }
        //noinspection unchecked
        return sCache[filter.ordinal()];
!!!35892663.java!!!	buildCache() : void
        L.d("building generational class cache");
        ClassLoader classLoader = GenerationalClassUtil.class.getClassLoader();
        Preconditions.check(classLoader instanceof URLClassLoader, "Class loader must be an"
                + "instance of URLClassLoader. %s", classLoader);
        //noinspection ConstantConditions
        final URLClassLoader urlClassLoader = (URLClassLoader) classLoader;
        sCache = new List[ExtensionFilter.values().length];
        for (ExtensionFilter filter : ExtensionFilter.values()) {
            sCache[filter.ordinal()] = new ArrayList();
        }
        for (URL url : urlClassLoader.getURLs()) {
            L.d("checking url %s for intermediate data", url);
            try {
                final File file = new File(url.toURI());
                if (!file.exists()) {
                    L.d("cannot load file for %s", url);
                    continue;
                }
                if (file.isDirectory()) {
                    // probably exported classes dir.
                    loadFromDirectory(file);
                } else {
                    // assume it is a zip file
                    loadFomZipFile(file);
                }
            } catch (IOException e) {
                L.d("cannot open zip file from %s", url);
            } catch (URISyntaxException e) {
                L.d("cannot open zip file from %s", url);
            }
        }
!!!35892791.java!!!	loadFromDirectory(inout directory : File) : void
        for (File file : FileUtils.listFiles(directory, TrueFileFilter.INSTANCE,
                TrueFileFilter.INSTANCE)) {
            for (ExtensionFilter filter : ExtensionFilter.values()) {
                if (filter.accept(file.getName())) {
                    InputStream inputStream = null;
                    try {
                        inputStream = FileUtils.openInputStream(file);
                        Serializable item = fromInputStream(inputStream);
                        if (item != null) {
                            //noinspection unchecked
                            sCache[filter.ordinal()].add(item);
                            L.d("loaded item %s from file", item);
                        }
                    } catch (IOException e) {
                        L.e(e, "Could not merge in Bindables from %s", file.getAbsolutePath());
                    } catch (ClassNotFoundException e) {
                        L.e(e, "Could not read Binding properties intermediate file. %s",
                                file.getAbsolutePath());
                    } finally {
                        IOUtils.closeQuietly(inputStream);
                    }
                }
            }
        }
!!!35892919.java!!!	loadFomZipFile(inout file : File) : void
        ZipFile zipFile = new ZipFile(file);
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        while (entries.hasMoreElements()) {
            ZipEntry entry = entries.nextElement();
            for (ExtensionFilter filter : ExtensionFilter.values()) {
                if (!filter.accept(entry.getName())) {
                    continue;
                }
                InputStream inputStream = null;
                try {
                    inputStream = zipFile.getInputStream(entry);
                    Serializable item = fromInputStream(inputStream);
                    L.d("loaded item %s from zip file", item);
                    if (item != null) {
                        //noinspection unchecked
                        sCache[filter.ordinal()].add(item);
                    }
                } catch (IOException e) {
                    L.e(e, "Could not merge in Bindables from %s", file.getAbsolutePath());
                } catch (ClassNotFoundException e) {
                    L.e(e, "Could not read Binding properties intermediate file. %s",
                            file.getAbsolutePath());
                } finally {
                    IOUtils.closeQuietly(inputStream);
                }
            }
        }
!!!35893047.java!!!	fromInputStream(inout inputStream : InputStream) : Serializable
        ObjectInputStream in = new ObjectInputStream(inputStream);
        return (Serializable) in.readObject();

!!!35893175.java!!!	writeIntermediateFile(inout processingEnv : ProcessingEnvironment, inout packageName : String, inout fileName : String, inout object : Serializable) : void
        ObjectOutputStream oos = null;
        try {
            FileObject intermediate = processingEnv.getFiler().createResource(
                    StandardLocation.CLASS_OUTPUT, packageName,
                    fileName);
            OutputStream ios = intermediate.openOutputStream();
            oos = new ObjectOutputStream(ios);
            oos.writeObject(object);
            oos.close();
            L.d("wrote intermediate bindable file %s %s", packageName, fileName);
        } catch (IOException e) {
            L.e(e, "Could not write to intermediate file: %s", fileName);
        } finally {
            IOUtils.closeQuietly(oos);
        }
