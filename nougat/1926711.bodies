class BindingExpressionParserTest
!!!35896631.java!!!	testSingleQuoteStringLiteral() : void
        String expr = "`test`";
        LiteralContext literal = parseLiteral(expr);
        assertNotNull(literal);
        StringLiteralContext stringLiteral = literal.stringLiteral();
        assertNotNull(stringLiteral);
        TerminalNode singleQuote = stringLiteral.SingleQuoteString();
        Token token = singleQuote.getSymbol();
        assertEquals("`test`", token.getText());
!!!35896759.java!!!	testDoubleQuoteStringLiteral() : void
        String expr = "\"test\"";

        LiteralContext literal = parseLiteral(expr);
        StringLiteralContext stringLiteral = literal.stringLiteral();
        TerminalNode singleQuote = stringLiteral.DoubleQuoteString();
        Token token = singleQuote.getSymbol();
        assertEquals("\"test\"", token.getText());
!!!35896887.java!!!	testSingleQuoteEscapeStringLiteral() : void
        String expr = "`\"t\\`est\"`";
        LiteralContext literal = parseLiteral(expr);
        StringLiteralContext stringLiteral = literal.stringLiteral();
        TerminalNode singleQuote = stringLiteral.SingleQuoteString();
        Token token = singleQuote.getSymbol();
        assertEquals("`\"t\\`est\"`", token.getText());
!!!35897015.java!!!	testCharLiteral() : void
        LiteralContext literal = parseLiteral("'c'");
        assertEquals("'c'", literal.getText());
        literal = parseLiteral("'\\u0054'");
        assertEquals("'\\u0054'", literal.getText());
        literal = parseLiteral("'\\''");
        assertEquals("'\\''", literal.getText());
!!!35897143.java!!!	testIntLiterals() : void
        compareIntLiteral("123");
        compareIntLiteral("123l");
        compareIntLiteral("1_2_3l");
        compareIntLiteral("123L");
        compareIntLiteral("0xdeadbeef");
        compareIntLiteral("0xdeadbeefl");
        compareIntLiteral("0Xdeadbeef");
        compareIntLiteral("0xdead_beefl");
        compareIntLiteral("0xdead_beefL");
        compareIntLiteral("01234567");
        compareIntLiteral("01234567L");
        compareIntLiteral("01234567l");
        compareIntLiteral("0123_45_67l");
        compareIntLiteral("0b0101");
        compareIntLiteral("0b0101_0101");
        compareIntLiteral("0B0101_0101");
        compareIntLiteral("0B0101_0101L");
        compareIntLiteral("0B0101_0101l");
!!!35897271.java!!!	testFloatLiterals() : void
        compareFloatLiteral("0.12345");
        compareFloatLiteral("0.12345f");
        compareFloatLiteral("0.12345F");
        compareFloatLiteral("132450.12345F");
        compareFloatLiteral("132450.12345");
        compareFloatLiteral("132450e123");
        compareFloatLiteral("132450.4e123");
!!!35897399.java!!!	testBoolLiterals() : void
        compareBoolLiteral("true");
        compareBoolLiteral("false");
!!!35897527.java!!!	testNullLiteral() : void
        LiteralContext literal = parseLiteral("null");
        String token = literal.getText();
        assertEquals("null", token);
!!!35897655.java!!!	testVoidExtraction() : void
        PrimaryContext primary = parsePrimary("void.class");
        assertNotNull(primary.classExtraction());
        assertNull(primary.classExtraction().type());
        assertEquals("void", primary.classExtraction().getChild(0).getText());
!!!35897783.java!!!	testPrimitiveClassExtraction() : void
        PrimaryContext primary = parsePrimary("int.class");
        PrimitiveTypeContext type = primary.classExtraction().type().primitiveType();
        assertEquals("int", type.getText());
!!!35897911.java!!!	testIdentifier() : void
        PrimaryContext primary = parsePrimary("abcdEfg");
        assertEquals("abcdEfg", primary.identifier().getText());
!!!35898039.java!!!	testUnaryOperators() : void
        compareUnaryOperators("+");
        compareUnaryOperators("-");
        compareUnaryOperators("!");
        compareUnaryOperators("~");
!!!35898167.java!!!	testMathOperators() : void
        compareMathOperators("+");
        compareMathOperators("-");
        compareMathOperators("*");
        compareMathOperators("/");
        compareMathOperators("%");
!!!35898295.java!!!	testBitShiftOperators() : void
        compareBitShiftOperators(">>>");
        compareBitShiftOperators("<<");
        compareBitShiftOperators(">>");
!!!35898423.java!!!	testComparisonShiftOperators() : void
        compareComparisonOperators("<");
        compareComparisonOperators(">");
        compareComparisonOperators("<=");
        compareComparisonOperators(">=");
        compareComparisonOperators("==");
        compareComparisonOperators("!=");
!!!35898551.java!!!	testAndOrOperators() : void
        compareAndOrOperators("&&");
        compareAndOrOperators("||");
!!!35898679.java!!!	testBinaryOperators() : void
        compareBinaryOperators("&");
        compareBinaryOperators("|");
        compareBinaryOperators("^");
!!!35898807.java!!!	testTernaryOperator() : void
        TernaryOpContext expression = parseExpression("true ? 1 : 0");
        assertEquals(5, expression.getChildCount());
        assertEquals("true",
                ((PrimaryContext) expression.left).literal().javaLiteral().getText());
        assertEquals("?", expression.op.getText());
        assertEquals("1",
                ((PrimaryContext) expression.iftrue).literal().javaLiteral().getText());
        assertEquals(":", expression.getChild(3).getText());
        assertEquals("0", ((PrimaryContext) expression.iffalse).literal().javaLiteral().getText());
!!!35898935.java!!!	testDot() : void
        DotOpContext expression = parseExpression("one.two.three");
        assertEquals(3, expression.getChildCount());
        assertEquals("three", expression.Identifier().getText());
        assertEquals(".", expression.getChild(1).getText());
        DotOpContext left = (DotOpContext) expression.expression();
        assertEquals("two", left.Identifier().getText());
        assertEquals(".", left.getChild(1).getText());
        assertEquals("one", ((PrimaryContext) left.expression()).identifier().getText());
!!!35899063.java!!!	testQuestionQuestion() : void
        QuestionQuestionOpContext expression = parseExpression("one ?? two");
        assertEquals(3, expression.getChildCount());
        assertEquals("one", ((PrimaryContext) expression.left).identifier().getText());
        assertEquals("two", ((PrimaryContext) expression.right).identifier().getText());
        assertEquals("??", expression.op.getText());
!!!35899191.java!!!	testResourceReference() : void
        compareResource("@id/foo_bar");
        compareResource("@transition/foo_bar");
        compareResource("@anim/foo_bar");
        compareResource("@animator/foo_bar");
        compareResource("@android:id/foo_bar");
        compareResource("@app:id/foo_bar");
!!!35899319.java!!!	testDefaults() : void
        BindingSyntaxContext syntax = parseExpressionString("foo.bar, default = @id/foo_bar");
        DefaultsContext defaults = syntax.defaults();
        assertEquals("@id/foo_bar", defaults.constantValue().ResourceReference().getText());
!!!35899447.java!!!	testParentheses() : void
        GroupingContext grouping = parseExpression("(1234)");
        assertEquals("1234", grouping.expression().getText());
!!!35899575.java!!!	compareResource(inout value : String) : void
        ResourceContext resourceContext = parseExpression(value);
        assertEquals(value, resourceContext.getText());
!!!35899703.java!!!	compareUnaryOperators(inout op : String) : void
        UnaryOpContext expression = parseExpression(op + " 2");
        assertEquals(2, expression.getChildCount());
        assertEquals(op, expression.op.getText());
        assertEquals("2",
                ((PrimaryContext) expression.expression()).literal().javaLiteral()
                        .getText());
!!!35899831.java!!!	compareBinaryOperators(inout op : String) : void
        BinaryOpContext expression = parseExpression("1 " + op + " 2");
        assertEquals(3, expression.getChildCount());
        assertTrue(expression.left instanceof ExpressionContext);
        String one = ((PrimaryContext) expression.left).literal().javaLiteral().getText();
        assertEquals("1", one);
        assertEquals(op, expression.op.getText());
        assertTrue(expression.right instanceof ExpressionContext);
        String two = ((PrimaryContext) expression.right).literal().javaLiteral().getText();
        assertEquals("2", two);
!!!35899959.java!!!	compareMathOperators(inout op : String) : void
        MathOpContext expression = parseExpression("1 " + op + " 2");
        assertEquals(3, expression.getChildCount());
        assertTrue(expression.left instanceof ExpressionContext);
        String one = ((PrimaryContext) expression.left).literal().javaLiteral().getText();
        assertEquals("1", one);
        assertEquals(op, expression.op.getText());
        assertTrue(expression.right instanceof ExpressionContext);
        String two = ((PrimaryContext) expression.right).literal().javaLiteral().getText();
        assertEquals("2", two);
!!!35900087.java!!!	compareBitShiftOperators(inout op : String) : void
        BitShiftOpContext expression = parseExpression("1 " + op + " 2");
        assertEquals(3, expression.getChildCount());
        assertTrue(expression.left instanceof ExpressionContext);
        String one = ((PrimaryContext) expression.left).literal().javaLiteral().getText();
        assertEquals("1", one);
        assertEquals(op, expression.op.getText());
        assertTrue(expression.right instanceof ExpressionContext);
        String two = ((PrimaryContext) expression.right).literal().javaLiteral().getText();
        assertEquals("2", two);
!!!35900215.java!!!	compareComparisonOperators(inout op : String) : void
        ComparisonOpContext expression = parseExpression("1 " + op + " 2");
        assertEquals(3, expression.getChildCount());
        assertTrue(expression.left instanceof ExpressionContext);
        String one = ((PrimaryContext) expression.left).literal().javaLiteral().getText();
        assertEquals("1", one);
        assertEquals(op, expression.op.getText());
        assertTrue(expression.right instanceof ExpressionContext);
        String two = ((PrimaryContext) expression.right).literal().javaLiteral().getText();
        assertEquals("2", two);
!!!35900343.java!!!	compareAndOrOperators(inout op : String) : void
        AndOrOpContext expression = parseExpression("1 " + op + " 2");
        assertEquals(3, expression.getChildCount());
        assertTrue(expression.left instanceof ExpressionContext);
        String one = ((PrimaryContext) expression.left).literal().javaLiteral().getText();
        assertEquals("1", one);
        assertEquals(op, expression.op.getText());
        assertTrue(expression.right instanceof ExpressionContext);
        String two = ((PrimaryContext) expression.right).literal().javaLiteral().getText();
        assertEquals("2", two);
!!!35900471.java!!!	compareIntLiteral(inout constant : String) : void
        LiteralContext literal = parseLiteral(constant);
        String token = literal.javaLiteral().getText();
        assertEquals(constant, token);
!!!35900599.java!!!	compareFloatLiteral(inout constant : String) : void
        LiteralContext literal = parseLiteral(constant);
        String token = literal.javaLiteral().getText();
        assertEquals(constant, token);
!!!35900727.java!!!	compareBoolLiteral(inout constant : String) : void
        LiteralContext literal = parseLiteral(constant);
        String token = literal.javaLiteral().getText();
        assertEquals(constant, token);
!!!35900855.java!!!	parse(inout value : String) : BindingExpressionParser::BindingSyntaxContext
        return parseExpressionString(value);
!!!35900983.java!!!	parseExpression(inout value : String) : T
        ExpressionContext expressionContext = parse(value).expression();
        return (T) expressionContext;
!!!35901111.java!!!	parsePrimary(inout value : String) : BindingExpressionParser::PrimaryContext
        return parseExpression(value);
!!!35901239.java!!!	parseLiteral(inout value : String) : BindingExpressionParser::LiteralContext
        return parsePrimary(value).literal();
!!!35901367.java!!!	parseExpressionString(inout s : String) : BindingExpressionParser::BindingSyntaxContext
        ANTLRInputStream input = new ANTLRInputStream(new StringReader(s));
        BindingExpressionLexer lexer = new BindingExpressionLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        BindingExpressionParser parser = new BindingExpressionParser(tokens);
        return parser.bindingSyntax();
