class ExpressionVisitorTest
!!!35902903.java!!!	setUp() : void
        JavaAnalyzer.initForTests();
!!!35903031.java!!!	parse(inout input : String, inout klass : Class) : T
        final Expr parsed = mParser.parse(input, null);
        assertSame(klass, parsed.getClass());
        return (T) parsed;
!!!35903159.java!!!	testSymbol() : void
        final SymbolExpr res = parse("null", SymbolExpr.class);
        assertEquals(1, mParser.getModel().size());
        assertEquals("null", res.getText());
        assertEquals(new JavaClass(Object.class),res.getResolvedType());
        assertEquals(0, res.getDependencies().size());
!!!35903799.java!!!	testSimpleFieldAccess() : void
        final FieldAccessExpr expr = parse("a.b", FieldAccessExpr.class);
        assertEquals(2, mParser.mModel.size());
        assertEquals("b", expr.getName());
        assertEquals(1, expr.getChildren().size());
        final Expr parent = expr.getChildren().get(0);
        assertTrue(parent instanceof IdentifierExpr);
        final IdentifierExpr id = (IdentifierExpr) parent;
        assertEquals("a", id.getName());
        assertEquals(0, id.getDependencies().size());
        assertEquals(1, expr.getDependencies().size());
!!!35903927.java!!!	testIdentifier() : void
        final IdentifierExpr id = parse("myStr", IdentifierExpr.class);
        assertEquals(1, mParser.mModel.size());
        assertEquals("myStr", id.getName());
        id.setUserDefinedType("java.lang.String");
        assertEquals(new JavaClass(String.class), id.getResolvedType());
!!!35904055.java!!!	testTernary() : void
        final TernaryExpr parsed = parse("a > b ? 5 : 4", TernaryExpr.class);
        assertEquals(6, mParser.getModel().size());
        assertTrue(parsed.getPred() instanceof ComparisonExpr);
        assertTrue(parsed.getIfTrue() instanceof SymbolExpr);
        assertTrue(parsed.getIfFalse() instanceof SymbolExpr);
        ComparisonExpr pred = (ComparisonExpr) parsed.getPred();
        SymbolExpr ifTrue = (SymbolExpr) parsed.getIfTrue();
        SymbolExpr ifFalse = (SymbolExpr) parsed.getIfFalse();
        assertEquals("5", ifTrue.getText());
        assertEquals("4", ifFalse.getText());
        assertEquals(1, parsed.getDependencies().size());
        for (Dependency dependency : parsed.getDependencies()) {
            assertEquals(dependency.getOther() != pred, dependency.isConditional());
        }
!!!35904183.java!!!	testInheritedFieldResolution() : void
        final FieldAccessExpr parsed = parse("myStr.length", FieldAccessExpr.class);
        assertTrue(parsed.getChild() instanceof IdentifierExpr);
        final IdentifierExpr id = (IdentifierExpr) parsed.getChild();
        id.setUserDefinedType("java.lang.String");
        assertEquals(new JavaClass(int.class), parsed.getResolvedType());
        Callable getter = parsed.getGetter();
        assertEquals(Callable.Type.METHOD, getter.type);
        assertEquals("length", getter.name);
        assertEquals(1, parsed.getDependencies().size());
        final Dependency dep = parsed.getDependencies().get(0);
        assertSame(id, dep.getOther());
        assertFalse(dep.isConditional());
!!!35904311.java!!!	testGetterResolution() : void
        final FieldAccessExpr parsed = parse("myStr.bytes", FieldAccessExpr.class);
        assertTrue(parsed.getChild() instanceof IdentifierExpr);
        final IdentifierExpr id = (IdentifierExpr) parsed.getChild();
        id.setUserDefinedType("java.lang.String");
        assertEquals(new JavaClass(byte[].class), parsed.getResolvedType());
        Callable getter = parsed.getGetter();
        assertEquals(Callable.Type.METHOD, getter.type);
        assertEquals("getBytes", getter.name);
        assertEquals(1, parsed.getDependencies().size());
        final Dependency dep = parsed.getDependencies().get(0);
        assertSame(id, dep.getOther());
        assertFalse(dep.isConditional());
!!!35904439.java!!!	testMethodCall() : void
        final MethodCallExpr parsed = parse("user.getName()", MethodCallExpr.class);
        assertTrue(parsed.getTarget() instanceof IdentifierExpr);
        assertEquals("getName", parsed.getName());
        assertEquals(0, parsed.getArgs().size());
        assertEquals(1, parsed.getDependencies().size());
        final Dependency dep = parsed.getDependencies().get(0);
        assertSame(mParser.parse("user", null), dep.getOther());
        assertFalse(dep.isConditional());
!!!35904567.java!!!	testMethodCallWithArgs() : void
        final MethodCallExpr parsed = parse("str.substring(1, a)", MethodCallExpr.class);
        assertTrue(parsed.getTarget() instanceof IdentifierExpr);
        assertEquals("substring", parsed.getName());
        final List<Expr> args = parsed.getArgs();
        assertEquals(2, args.size());
        assertTrue(args.get(0) instanceof SymbolExpr);
        assertTrue(args.get(1) instanceof IdentifierExpr);
        final List<Dependency> deps = parsed.getDependencies();
        assertEquals(2, deps.size());
