class ExprTest
!!!35913911.java!!!	setUp() : void
        JavaAnalyzer.initForTests();
!!!35914039.java!!!	testBadExpr() : void
        Expr expr = new Expr() {
            @Override
            protected ModelClass resolveType(ModelAnalyzer modelAnalyzer) {
                return modelAnalyzer.findClass(Integer.class);
            }

            @Override
            protected List<Dependency> constructDependencies() {
                return constructDynamicChildrenDependencies();
            }

            @Override
            protected KCode generateCode(boolean full) {
                return new KCode();
            }

            @Override
            protected String getInvertibleError() {
                return null;
            }
        };
        expr.getUniqueKey();
!!!35914167.java!!!	testBasicInvalidationFlag() : void
        LayoutBinder lb = new MockLayoutBinder();
        ExprModel model = lb.getModel();
        model.seal();
        DummyExpr d = new DummyExpr("a");
        d.setModel(model);
        d.setId(3);
        d.enableDirectInvalidation();
        assertTrue(d.getInvalidFlags().get(3));
        BitSet clone = (BitSet) model.getInvalidateAnyBitSet().clone();
        clone.and(d.getInvalidFlags());
        assertEquals(1, clone.cardinality());
!!!35914295.java!!!	testCannotBeInvalidated() : void
        LayoutBinder lb = new MockLayoutBinder();
        ExprModel model = lb.getModel();
        model.seal();
        DummyExpr d = new DummyExpr("a");
        d.setModel(model);
        d.setId(3);
        // +1 for invalidate all flag
        assertEquals(1, d.getInvalidFlags().cardinality());
        assertEquals(model.getInvalidateAnyBitSet(), d.getInvalidFlags());
!!!35914423.java!!!	testInvalidationInheritance() : void
        ExprModel model = new ExprModel();
        DummyExpr a = model.register(new DummyExpr("a"));
        DummyExpr b = model.register(new DummyExpr("b"));
        DummyExpr c = model.register(new DummyExpr("c", a, b));
        a.enableDirectInvalidation();
        b.enableDirectInvalidation();
        c.setBindingExpression(true);
        model.seal();
        assertFlags(c, a, b);
!!!35914551.java!!!	testInvalidationInheritance2() : void
        ExprModel model = new ExprModel();
        DummyExpr a = model.register(new DummyExpr("a"));
        DummyExpr b = model.register(new DummyExpr("b", a));
        DummyExpr c = model.register(new DummyExpr("c", b));
        a.enableDirectInvalidation();
        b.enableDirectInvalidation();
        c.setBindingExpression(true);
        model.seal();
        assertFlags(c, a, b);
!!!35914679.java!!!	testShouldReadFlags() : void
        ExprModel model = new ExprModel();
        DummyExpr a = model.register(new DummyExpr("a"));
        a.enableDirectInvalidation();
        a.setBindingExpression(true);
        model.seal();
        assertFlags(a, a);
!!!35914807.java!!!	testShouldReadDependencyFlags() : void
        ExprModel model = new ExprModel();
        DummyExpr a = model.register(new DummyExpr("a"));
        DummyExpr b = model.register(new DummyExpr("b", a));
        DummyExpr c = model.register(new DummyExpr("c", b));
        a.enableDirectInvalidation();
        b.enableDirectInvalidation();
        b.setBindingExpression(true);
        c.setBindingExpression(true);
        model.seal();
        assertFlags(b, a, b);
        assertFlags(c, a, b);
!!!35914935.java!!!	assertFlags(inout a : Expr, inout  : Expr...exprs) : void
        BitSet bitSet = a.getShouldReadFlags();
        for (Expr expr : exprs) {
            BitSet clone = (BitSet) bitSet.clone();
            clone.and(expr.getInvalidFlags());
            assertEquals("should read flags of " + a.getUniqueKey() + " should include " + expr
                    .getUniqueKey(), expr.getInvalidFlags(), clone);
        }

        BitSet composite = new BitSet();
        for (Expr expr : exprs) {
            composite.or(expr.getInvalidFlags());
        }
        assertEquals("composite flags should match", composite, bitSet);
