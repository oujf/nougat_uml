class JavaAnalyzer
!!!35915703.java!!!	JavaAnalyzer(inout classLoader : ClassLoader)
        setInstance(this);
        mClassLoader = classLoader;
!!!35915831.java!!!	loadPrimitive(inout className : String) : JavaClass
        Class clazz = PRIMITIVE_TYPES.get(className);
        if (clazz == null) {
            return null;
        } else {
            return new JavaClass(clazz);
        }
!!!35915959.java!!!	getObservableFieldTypes() : ModelClass
        return new ModelClass[0];
!!!35916087.java!!!	findClass(inout className : String, inout imports : Map<String, String>) : ModelClass
        // TODO handle imports
        JavaClass loaded = mClassCache.get(className);
        if (loaded != null) {
            return loaded;
        }
        L.d("trying to load class %s from %s", className, mClassLoader.toString());
        loaded = loadPrimitive(className);
        if (loaded == null) {
            try {
                if (className.startsWith("[") && className.contains("L")) {
                    int indexOfL = className.indexOf('L');
                    JavaClass baseClass = (JavaClass) findClass(
                            className.substring(indexOfL + 1, className.length() - 1), null);
                    String realClassName = className.substring(0, indexOfL + 1) +
                            baseClass.mClass.getCanonicalName() + ';';
                    loaded = new JavaClass(Class.forName(realClassName, false, mClassLoader));
                    mClassCache.put(className, loaded);
                } else {
                    loaded = loadRecursively(className);
                    mClassCache.put(className, loaded);
                }

            } catch (Throwable t) {
//                L.e(t, "cannot load class " + className);
            }
        }
        // expr visitor may call this to resolve statics. Sometimes, it is OK not to find a class.
        if (loaded == null) {
            return null;
        }
        L.d("loaded class %s", loaded.mClass.getCanonicalName());
        return loaded;
!!!35916215.java!!!	findClass(inout classType : Class) : ModelClass
        return new JavaClass(classType);
!!!35916343.java!!!	createTypeUtil() : TypeUtil
        return new JavaTypeUtil();
!!!35916471.java!!!	loadRecursively(inout className : String) : JavaClass
        try {
            L.d("recursively checking %s", className);
            return new JavaClass(mClassLoader.loadClass(className));
        } catch (ClassNotFoundException ex) {
            int lastIndexOfDot = className.lastIndexOf(".");
            if (lastIndexOfDot == -1) {
                throw ex;
            }
            return loadRecursively(className.substring(0, lastIndexOfDot) + "$" + className
                    .substring(lastIndexOfDot + 1));
        }
!!!35916599.java!!!	loadAndroidHome() : String
        Map<String, String> env = System.getenv();
        for (Map.Entry<String, String> entry : env.entrySet()) {
            L.d("%s %s", entry.getKey(), entry.getValue());
        }
        if(env.containsKey("ANDROID_HOME")) {
            return env.get("ANDROID_HOME");
        }
        // check for local.properties file
        File folder = new File(".").getAbsoluteFile();
        while (folder != null && folder.exists()) {
            File f = new File(folder, "local.properties");
            if (f.exists() && f.canRead()) {
                try {
                    for (String line : FileUtils.readLines(f)) {
                        List<String> keyValue = Splitter.on('=').splitToList(line);
                        if (keyValue.size() == 2) {
                            String key = keyValue.get(0).trim();
                            if (key.equals("sdk.dir")) {
                                return keyValue.get(1).trim();
                            }
                        }
                    }
                } catch (IOException ignored) {}
            }
            folder = folder.getParentFile();
        }

        return null;
!!!35916727.java!!!	initForTests() : void
        String androidHome = loadAndroidHome();
        if (Strings.isNullOrEmpty(androidHome) || !new File(androidHome).exists()) {
            throw new IllegalStateException(
                    "you need to have ANDROID_HOME set in your environment"
                            + " to run compiler tests");
        }
        File androidJar = new File(androidHome + "/platforms/android-21/android.jar");
        if (!androidJar.exists() || !androidJar.canRead()) {
            throw new IllegalStateException(
                    "cannot find android jar at " + androidJar.getAbsolutePath());
        }
        // now load android data binding library as well

        try {
            ClassLoader classLoader = new URLClassLoader(new URL[]{androidJar.toURI().toURL()},
                    ModelAnalyzer.class.getClassLoader());
            new JavaAnalyzer(classLoader);
        } catch (MalformedURLException e) {
            throw new RuntimeException("cannot create class loader", e);
        }

        SdkUtil.initialize(8, new File(androidHome));
