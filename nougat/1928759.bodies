class JavaClass
!!!35916855.java!!!	JavaClass(inout clazz : Class)
        mClass = clazz;
!!!35916983.java!!!	toJavaCode() : String
        return toJavaCode(mClass);
!!!35917111.java!!!	toJavaCode(inout aClass : Class) : String
        if (aClass.isArray()) {
            Class component = aClass.getComponentType();
            return toJavaCode(component) + "[]";
        } else {
            return aClass.getCanonicalName().replace('$', '.');
        }
!!!35917239.java!!!	isArray() : boolean
        return mClass.isArray();
!!!35917367.java!!!	getComponentType() : ModelClass
        if (mClass.isArray()) {
            return new JavaClass(mClass.getComponentType());
        } else if (isList() || isMap()) {
            return new JavaClass(Object.class);
        } else {
            return null;
        }
!!!35917495.java!!!	isNullable() : boolean
        return Object.class.isAssignableFrom(mClass);
!!!35917623.java!!!	isPrimitive() : boolean
        return mClass.isPrimitive();
!!!35917751.java!!!	isBoolean() : boolean
        return boolean.class.equals(mClass);
!!!35917879.java!!!	isChar() : boolean
        return char.class.equals(mClass);
!!!35918007.java!!!	isByte() : boolean
        return byte.class.equals(mClass);
!!!35918135.java!!!	isShort() : boolean
        return short.class.equals(mClass);
!!!35918263.java!!!	isInt() : boolean
        return int.class.equals(mClass);
!!!35918391.java!!!	isLong() : boolean
        return long.class.equals(mClass);
!!!35918519.java!!!	isFloat() : boolean
        return float.class.equals(mClass);
!!!35918647.java!!!	isDouble() : boolean
        return double.class.equals(mClass);
!!!35918775.java!!!	isGeneric() : boolean
        return false;
!!!35918903.java!!!	getTypeArguments() : ModelClass
        return null;
!!!35919031.java!!!	isTypeVar() : boolean
        return false;
!!!35919159.java!!!	isWildcard() : boolean
        return false;
!!!35919287.java!!!	isInterface() : boolean
        return mClass.isInterface();
!!!35919415.java!!!	isVoid() : boolean
        return void.class.equals(mClass);
!!!35919543.java!!!	unbox() : ModelClass
        if (mClass.isPrimitive()) {
            return this;
        }
        if (Integer.class.equals(mClass)) {
            return new JavaClass(int.class);
        } else if (Long.class.equals(mClass)) {
            return new JavaClass(long.class);
        } else if (Short.class.equals(mClass)) {
            return new JavaClass(short.class);
        } else if (Byte.class.equals(mClass)) {
            return new JavaClass(byte.class);
        } else if (Character.class.equals(mClass)) {
            return new JavaClass(char.class);
        } else if (Double.class.equals(mClass)) {
            return new JavaClass(double.class);
        } else if (Float.class.equals(mClass)) {
            return new JavaClass(float.class);
        } else if (Boolean.class.equals(mClass)) {
            return new JavaClass(boolean.class);
        } else {
            // not a boxed type
            return this;
        }

!!!35919671.java!!!	box() : JavaClass
        if (!mClass.isPrimitive()) {
            return this;
        }
        if (int.class.equals(mClass)) {
            return new JavaClass(Integer.class);
        } else if (long.class.equals(mClass)) {
            return new JavaClass(Long.class);
        } else if (short.class.equals(mClass)) {
            return new JavaClass(Short.class);
        } else if (byte.class.equals(mClass)) {
            return new JavaClass(Byte.class);
        } else if (char.class.equals(mClass)) {
            return new JavaClass(Character.class);
        } else if (double.class.equals(mClass)) {
            return new JavaClass(Double.class);
        } else if (float.class.equals(mClass)) {
            return new JavaClass(Float.class);
        } else if (boolean.class.equals(mClass)) {
            return new JavaClass(Boolean.class);
        } else {
            // not a valid type?
            return this;
        }
!!!35919799.java!!!	isAssignableFrom(inout that : ModelClass) : boolean
        Class thatClass = ((JavaClass) that).mClass;
        return mClass.isAssignableFrom(thatClass);
!!!35919927.java!!!	getSuperclass() : ModelClass
        if (mClass.getSuperclass() == null) {
            return null;
        }
        return new JavaClass(mClass.getSuperclass());
!!!35920055.java!!!	getCanonicalName() : String
        return mClass.getCanonicalName();
!!!35920183.java!!!	erasure() : ModelClass
        return this;
!!!35920311.java!!!	getJniDescription() : String
        return TypeUtil.getInstance().getDescription(this);
!!!35920439.java!!!	getDeclaredFields() : ModelField
        Field[] fields = mClass.getDeclaredFields();
        ModelField[] modelFields;
        if (fields == null) {
            modelFields = new ModelField[0];
        } else {
            modelFields = new ModelField[fields.length];
            for (int i = 0; i < fields.length; i++) {
                modelFields[i] = new JavaField(fields[i]);
            }
        }
        return modelFields;
!!!35920567.java!!!	getDeclaredMethods() : ModelMethod
        Method[] methods = mClass.getDeclaredMethods();
        if (methods == null) {
            return new ModelMethod[0];
        } else {
            ModelMethod[] classMethods = new ModelMethod[methods.length];
            for (int i = 0; i < methods.length; i++) {
                classMethods[i] = new JavaMethod(methods[i]);
            }
            return classMethods;
        }
!!!35920695.java!!!	equals(inout obj : Object) : boolean
        if (obj instanceof JavaClass) {
            return mClass.equals(((JavaClass) obj).mClass);
        } else {
            return false;
        }
!!!35920823.java!!!	hashCode() : int
        return mClass.hashCode();
