class DataBindingBuilder
!!!35976503.java!!!	getCompilerVersion() : String
        return getVersions().compiler;
!!!35976631.java!!!	getBaseLibraryVersion(inout compilerVersion : String) : String
        return getVersions().baseLibrary;
!!!35976759.java!!!	getLibraryVersion(inout compilerVersion : String) : String
        return getVersions().extensions;
!!!35976887.java!!!	getBaseAdaptersVersion(inout compilerVersion : String) : String
        return getVersions().extensions;
!!!35977015.java!!!	setPrintMachineReadableOutput(inout machineReadableOutput : boolean) : void
        ScopedException.encodeOutput(machineReadableOutput);
!!!35977143.java!!!	getPrintMachineReadableOutput() : boolean
        return ScopedException.issEncodeOutput();
!!!35977271.java!!!	setDebugLogEnabled(inout enableDebugLogs : boolean) : void
        L.setDebugLog(enableDebugLogs);
!!!35977399.java!!!	isDebugLogEnabled() : boolean
        return L.isDebugEnabled();
!!!35977527.java!!!	getVersions() : DataBindingBuilder::Versions
        if (mVersions != null) {
            return mVersions;
        }
        try {
            Properties props = new Properties();
            InputStream stream = getClass().getResourceAsStream("/data_binding_version_info.properties");
            try {
                props.load(stream);
                mVersions = new Versions(props);
            } finally {
                IOUtils.closeQuietly(stream);
            }
        } catch (IOException exception) {
            L.e(exception, "Cannot read data binding version");
        }
        return mVersions;
!!!35977655.java!!!	getJarExcludeList(inout layoutXmlProcessor : LayoutXmlProcessor, inout generatedClassListFile : File) : String
        List<String> excludes = new ArrayList<String>();
        String appPkgAsClass = layoutXmlProcessor.getPackage().replace('.', '/');
        String infoClassAsClass = layoutXmlProcessor.getInfoClassFullName().replace('.', '/');

        excludes.add(infoClassAsClass + ".class");
        excludes.add(EXCLUDE_PATTERN);
        excludes.add(appPkgAsClass + "/BR.*");
        excludes.add("android/databinding/DynamicUtil.class");
        if (generatedClassListFile != null) {
            List<String> generatedClasses = readGeneratedClasses(generatedClassListFile);
            for (String klass : generatedClasses) {
                excludes.add(klass.replace('.', '/') + ".class");
            }
        }
        Scope.assertNoError();
        return excludes;
!!!35977783.java!!!	readGeneratedClasses(inout generatedClassListFile : File) : String
        Preconditions.checkNotNull(generatedClassListFile, "Data binding exclude generated task"
                + " is not configured properly");
        Preconditions.check(generatedClassListFile.exists(),
                "Generated class list does not exist %s", generatedClassListFile.getAbsolutePath());
        FileInputStream fis = null;
        try {
            fis = new FileInputStream(generatedClassListFile);
            return IOUtils.readLines(fis);
        } catch (FileNotFoundException e) {
            L.e(e, "Unable to read generated class list from %s",
                    generatedClassListFile.getAbsoluteFile());
        } catch (IOException e) {
            L.e(e, "Unexpected exception while reading %s",
                    generatedClassListFile.getAbsoluteFile());
        } finally {
            IOUtils.closeQuietly(fis);
        }
        L.e("Could not read data binding generated class list");
        return null;
!!!35977911.java!!!	createJavaFileWriter(inout outFolder : File) : JavaFileWriter
        return new GradleFileWriter(outFolder.getAbsolutePath());
