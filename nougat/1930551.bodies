class LayoutXmlProcessor
!!!35978423.java!!!	LayoutXmlProcessor(inout applicationPackage : String, inout fileWriter : JavaFileWriter, in minSdk : int, inout isLibrary : boolean, inout originalFileLookup : LayoutXmlProcessor::OriginalFileLookup)
        mFileWriter = fileWriter;
        mResourceBundle = new ResourceBundle(applicationPackage);
        mMinSdk = minSdk;
        mIsLibrary = isLibrary;
        mOriginalFileLookup = originalFileLookup;
!!!35978551.java!!!	processIncrementalInputFiles(inout input : LayoutXmlProcessor::ResourceInput, inout callback : LayoutXmlProcessor::ProcessFileCallback) : void
        processExistingIncrementalFiles(input.getRootInputFolder(), input.getAdded(), callback);
        processExistingIncrementalFiles(input.getRootInputFolder(), input.getChanged(), callback);
        processRemovedIncrementalFiles(input.getRootInputFolder(), input.getRemoved(), callback);
!!!35978679.java!!!	processExistingIncrementalFiles(inout inputRoot : File, inout files : List<File>, inout callback : LayoutXmlProcessor::ProcessFileCallback) : void
        for (File file : files) {
            File parent = file.getParentFile();
            if (inputRoot.equals(parent)) {
                callback.processOtherRootFile(file);
            } else if (layoutFolderFilter.accept(parent, parent.getName())) {
                callback.processLayoutFile(file);
            } else {
                callback.processOtherFile(parent, file);
            }
        }
!!!35978807.java!!!	processRemovedIncrementalFiles(inout inputRoot : File, inout files : List<File>, inout callback : LayoutXmlProcessor::ProcessFileCallback) : void
        for (File file : files) {
            File parent = file.getParentFile();
            if (inputRoot.equals(parent)) {
                callback.processRemovedOtherRootFile(file);
            } else if (layoutFolderFilter.accept(parent, parent.getName())) {
                callback.processRemovedLayoutFile(file);
            } else {
                callback.processRemovedOtherFile(parent, file);
            }
        }
!!!35978935.java!!!	processAllInputFiles(inout input : LayoutXmlProcessor::ResourceInput, inout callback : LayoutXmlProcessor::ProcessFileCallback) : void
        FileUtils.deleteDirectory(input.getRootOutputFolder());
        Preconditions.check(input.getRootOutputFolder().mkdirs(), "out dir should be re-created");
        Preconditions.check(input.getRootInputFolder().isDirectory(), "it must be a directory");
        for (File firstLevel : input.getRootInputFolder().listFiles()) {
            if (firstLevel.isDirectory()) {
                if (layoutFolderFilter.accept(firstLevel, firstLevel.getName())) {
                    callback.processLayoutFolder(firstLevel);
                    for (File xmlFile : firstLevel.listFiles(xmlFileFilter)) {
                        callback.processLayoutFile(xmlFile);
                    }
                } else {
                    callback.processOtherFolder(firstLevel);
                    for (File file : firstLevel.listFiles()) {
                        callback.processOtherFile(firstLevel, file);
                    }
                }
            } else {
                callback.processOtherRootFile(firstLevel);
            }

        }
!!!35979063.java!!!	getResourceBundle() : ResourceBundle
        return mResourceBundle;
!!!35979191.java!!!	processResources(in input : LayoutXmlProcessor::ResourceInput) : boolean
        if (mProcessingComplete) {
            return false;
        }
        final LayoutFileParser layoutFileParser = new LayoutFileParser();
        final URI inputRootUri = input.getRootInputFolder().toURI();
        ProcessFileCallback callback = new ProcessFileCallback() {
            private File convertToOutFile(File file) {
                final String subPath = toSystemDependentPath(inputRootUri
                        .relativize(file.toURI()).getPath());
                return new File(input.getRootOutputFolder(), subPath);
            }
            @Override
            public void processLayoutFile(File file)
                    throws ParserConfigurationException, SAXException, XPathExpressionException,
                    IOException {
                final File output = convertToOutFile(file);
                final ResourceBundle.LayoutFileBundle bindingLayout = layoutFileParser
                        .parseXml(file, output, mResourceBundle.getAppPackage(), mOriginalFileLookup);
                if (bindingLayout != null && !bindingLayout.isEmpty()) {
                    mResourceBundle.addLayoutBundle(bindingLayout);
                }
            }

            @Override
            public void processOtherFile(File parentFolder, File file) throws IOException {
                final File outParent = convertToOutFile(parentFolder);
                FileUtils.copyFile(file, new File(outParent, file.getName()));
            }

            @Override
            public void processRemovedLayoutFile(File file) {
                mResourceBundle.addRemovedFile(file);
                final File out = convertToOutFile(file);
                FileUtils.deleteQuietly(out);
            }

            @Override
            public void processRemovedOtherFile(File parentFolder, File file) throws IOException {
                final File outParent = convertToOutFile(parentFolder);
                FileUtils.deleteQuietly(new File(outParent, file.getName()));
            }

            @Override
            public void processOtherFolder(File folder) {
                //noinspection ResultOfMethodCallIgnored
                convertToOutFile(folder).mkdirs();
            }

            @Override
            public void processLayoutFolder(File folder) {
                //noinspection ResultOfMethodCallIgnored
                convertToOutFile(folder).mkdirs();
            }

            @Override
            public void processOtherRootFile(File file) throws IOException {
                final File outFile = convertToOutFile(file);
                if (file.isDirectory()) {
                    FileUtils.copyDirectory(file, outFile);
                } else {
                    FileUtils.copyFile(file, outFile);
                }
            }

            @Override
            public void processRemovedOtherRootFile(File file) throws IOException {
                final File outFile = convertToOutFile(file);
                FileUtils.deleteQuietly(outFile);
            }
        };
        if (input.isIncremental()) {
            processIncrementalInputFiles(input, callback);
        } else {
            processAllInputFiles(input, callback);
        }
        mProcessingComplete = true;
        return true;
!!!35979319.java!!!	toSystemDependentPath(inout path : String) : String
        if (File.separatorChar != '/') {
            path = path.replace('/', File.separatorChar);
        }
        return path;
!!!35979447.java!!!	writeLayoutInfoFiles(inout xmlOutDir : File) : void
        if (mWritten) {
            return;
        }
        for (List<ResourceBundle.LayoutFileBundle> layouts : mResourceBundle.getLayoutBundles()
                .values()) {
            for (ResourceBundle.LayoutFileBundle layout : layouts) {
                writeXmlFile(xmlOutDir, layout);
            }
        }
        for (File file : mResourceBundle.getRemovedFiles()) {
            String exportFileName = generateExportFileName(file);
            FileUtils.deleteQuietly(new File(xmlOutDir, exportFileName));
        }
        mWritten = true;
!!!35979575.java!!!	writeXmlFile(inout xmlOutDir : File, inout layout : ResourceBundle::LayoutFileBundle) : void
        String filename = generateExportFileName(layout);
        mFileWriter.writeToFile(new File(xmlOutDir, filename), layout.toXML());
!!!35979703.java!!!	getInfoClassFullName() : String
        return RESOURCE_BUNDLE_PACKAGE + "." + CLASS_NAME;
!!!35979831.java!!!	generateExportFileName(inout layout : ResourceBundle::LayoutFileBundle) : String
        return generateExportFileName(layout.getFileName(), layout.getDirectory());
!!!35979959.java!!!	generateExportFileName(inout file : File) : String
        final String fileName = file.getName();
        return generateExportFileName(fileName.substring(0, fileName.lastIndexOf('.')),
                file.getParentFile().getName());
!!!35980087.java!!!	generateExportFileName(inout fileName : String, inout dirName : String) : String
        return fileName + '-' + dirName + ".xml";
!!!35980215.java!!!	exportLayoutNameFromInfoFileName(inout infoFileName : String) : String
        return infoFileName.substring(0, infoFileName.indexOf('-'));
!!!35980343.java!!!	writeInfoClass(inout sdkDir : File, inout xmlOutDir : File, inout exportClassListTo : File) : void
        writeInfoClass(sdkDir, xmlOutDir, exportClassListTo, false, false);
!!!35980471.java!!!	getPackage() : String
        return mResourceBundle.getAppPackage();
!!!35980599.java!!!	writeInfoClass(inout sdkDir : File, inout xmlOutDir : File, inout exportClassListTo : File, inout enableDebugLogs : boolean, inout printEncodedErrorLogs : boolean) : void
        Escaper javaEscaper = SourceCodeEscapers.javaCharEscaper();
        final String sdkPath = sdkDir == null ? null : javaEscaper.escape(sdkDir.getAbsolutePath());
        final Class annotation = BindingBuildInfo.class;
        final String layoutInfoPath = javaEscaper.escape(xmlOutDir.getAbsolutePath());
        final String exportClassListToPath = exportClassListTo == null ? "" :
                javaEscaper.escape(exportClassListTo.getAbsolutePath());
        String classString = "package " + RESOURCE_BUNDLE_PACKAGE + ";\n\n" +
                "import " + annotation.getCanonicalName() + ";\n\n" +
                "@" + annotation.getSimpleName() + "(buildId=\"" + mBuildId + "\", " +
                "modulePackage=\"" + mResourceBundle.getAppPackage() + "\", " +
                "sdkRoot=" + "\"" + (sdkPath == null ? "" : sdkPath) + "\"," +
                "layoutInfoDir=\"" + layoutInfoPath + "\"," +
                "exportClassListTo=\"" + exportClassListToPath + "\"," +
                "isLibrary=" + mIsLibrary + "," +
                "minSdk=" + mMinSdk + "," +
                "enableDebugLogs=" + enableDebugLogs + "," +
                "printEncodedError=" + printEncodedErrorLogs + ")\n" +
                "public class " + CLASS_NAME + " {}\n";
        mFileWriter.writeToFile(RESOURCE_BUNDLE_PACKAGE + "." + CLASS_NAME, classString);
