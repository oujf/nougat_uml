class Scope
!!!35983543.java!!!	enter(in location : Location) : void
        enter(new LocationScopeProvider() {
            @Override
            public List<Location> provideScopeLocation() {
                return Arrays.asList(location);
            }
        });
!!!35983671.java!!!	enter(inout scopeProvider : ScopeProvider) : void
        ScopeEntry peek = sScopeItems.get();
        ScopeEntry entry = new ScopeEntry(scopeProvider, peek);
        sScopeItems.set(entry);
!!!35983799.java!!!	exit() : void
        ScopeEntry entry = sScopeItems.get();
        Preconditions.checkNotNull(entry, "Inconsistent scope exit");
        sScopeItems.set(entry.mParent);
!!!35983927.java!!!	defer(inout exception : ScopedException) : void
        sDeferredExceptions.add(exception);
!!!35984055.java!!!	registerErrorInternal(inout msg : String, in scopeIndex : int, inout  : ScopeProvider...scopeProviders) : void
        if (scopeProviders == null || scopeProviders.length <= scopeIndex) {
            defer(new ScopedException(msg));
        } else if (scopeProviders[scopeIndex] == null) {
            registerErrorInternal(msg, scopeIndex + 1, scopeProviders);
        } else {
            try {
                Scope.enter(scopeProviders[scopeIndex]);
                registerErrorInternal(msg, scopeIndex + 1, scopeProviders);
            } finally {
                Scope.exit();
            }
        }
!!!35984183.java!!!	registerError(inout msg : String, inout  : ScopeProvider...scopeProviders) : void
        registerErrorInternal(msg, 0, scopeProviders);
!!!35984311.java!!!	assertNoError() : void
        if (sDeferredExceptions.isEmpty()) {
            return;
        }
        StringBuilder sb = new StringBuilder();
        HashSet<String> messages = new HashSet<String>();
        for (ScopedException ex : sDeferredExceptions) {
            final String message = ex.getMessage();
            if (!messages.contains(message)) {
                sb.append(message).append("\n");
                messages.add(message);
            }
        }
        throw new RuntimeException("Found data binding errors.\n" + sb.toString());
!!!35984439.java!!!	produceScopeLog() : String
        StringBuilder sb = new StringBuilder();
        sb.append("full scope log\n");
        ScopeEntry top = sScopeItems.get();
        while (top != null) {
            ScopeProvider provider = top.mProvider;
            sb.append("---").append(provider).append("\n");
            if (provider instanceof FileScopeProvider) {
                sb.append("file:").append(((FileScopeProvider) provider).provideScopeFilePath())
                        .append("\n");
            }
            if (provider instanceof LocationScopeProvider) {
                LocationScopeProvider loc = (LocationScopeProvider) provider;
                sb.append("loc:");
                List<Location> locations = loc.provideScopeLocation();
                if (locations == null) {
                    sb.append("null\n");
                } else {
                    for (Location location : locations) {
                        sb.append(location).append("\n");
                    }
                }
            }
            top = top.mParent;
        }
        sb.append("---\n");
        return sb.toString();
!!!35984567.java!!!	createReport() : ScopedErrorReport
        ScopeEntry top = sScopeItems.get();
        String filePath = null;
        List<Location> locations = null;
        while (top != null && (filePath == null || locations == null)) {
            ScopeProvider provider = top.mProvider;
            if (locations == null && provider instanceof LocationScopeProvider) {
                locations = findAbsoluteLocationFrom(top, (LocationScopeProvider) provider);
            }
            if (filePath == null && provider instanceof FileScopeProvider) {
                filePath = ((FileScopeProvider) provider).provideScopeFilePath();
            }
            top = top.mParent;
        }
        return new ScopedErrorReport(filePath, locations);
!!!35984695.java!!!	findAbsoluteLocationFrom(inout entry : Scope::ScopeEntry, inout top : LocationScopeProvider) : Location
        List<Location> locations = top.provideScopeLocation();
        if (locations == null || locations.isEmpty()) {
            return null;
        }
        if (locations.size() == 1) {
            return Arrays.asList(locations.get(0).toAbsoluteLocation());
        }
        // We have more than 1 location. Depending on the scope, we may or may not want all of them
        List<Location> chosen = new ArrayList<Location>();
        for (Location location : locations) {
            Location absLocation = location.toAbsoluteLocation();
            if (validatedContained(entry.mParent, absLocation)) {
                chosen.add(absLocation);
            }
        }
        return chosen.isEmpty() ? locations : chosen;
!!!35984823.java!!!	validatedContained(inout parent : Scope::ScopeEntry, inout absLocation : Location) : boolean
        if (parent == null) {
            return true;
        }
        ScopeProvider provider = parent.mProvider;
        if (!(provider instanceof LocationScopeProvider)) {
            return validatedContained(parent.mParent, absLocation);
        }
        List<Location> absoluteParents = findAbsoluteLocationFrom(parent,
                (LocationScopeProvider) provider);
        for (Location location : absoluteParents) {
            if (location.contains(absLocation)) {
                return true;
            }
        }
        return false;
