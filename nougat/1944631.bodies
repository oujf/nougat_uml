class ObservableParcelTest
!!!36046519.java!!!	testParcelInt() : void
        ObservableInt observableInt = new ObservableInt();
        observableInt.set(Integer.MAX_VALUE - 1);
        ObservableInt read = parcelAndUnparcel(observableInt, ObservableInt.class);
        assertEquals(Integer.MAX_VALUE - 1, read.get());
!!!36046647.java!!!	testParcelBoolean() : void
        ObservableBoolean obj = new ObservableBoolean(false);
        ObservableBoolean read = parcelAndUnparcel(obj, ObservableBoolean.class);
        assertFalse(read.get());

        ObservableBoolean obj2 = new ObservableBoolean(true);
        ObservableBoolean read2 = parcelAndUnparcel(obj2, ObservableBoolean.class);
        assertTrue(read2.get());
!!!36046775.java!!!	testParcelByte() : void
        ObservableByte obj = new ObservableByte((byte) 7);
        ObservableByte read = parcelAndUnparcel(obj, ObservableByte.class);
        assertEquals((byte) 7, read.get());
!!!36046903.java!!!	testParcelChar() : void
        ObservableChar obj = new ObservableChar('y');
        ObservableChar read = parcelAndUnparcel(obj, ObservableChar.class);
        assertEquals('y', read.get());
!!!36047031.java!!!	testParcelDouble() : void
        ObservableDouble obj = new ObservableDouble(Double.MAX_VALUE);
        ObservableDouble read = parcelAndUnparcel(obj, ObservableDouble.class);
        assertEquals(Double.MAX_VALUE, read.get());
!!!36047159.java!!!	testParcelFloat() : void
        ObservableFloat obj = new ObservableFloat(Float.MIN_VALUE);
        ObservableFloat read = parcelAndUnparcel(obj, ObservableFloat.class);
        assertEquals(Float.MIN_VALUE, read.get());
!!!36047287.java!!!	testParcelParcel() : void
        MyParcelable myParcelable = new MyParcelable(5, "foo");
        ObservableParcelable<MyParcelable> obj = new ObservableParcelable<>(myParcelable);
        ObservableParcelable read = parcelAndUnparcel(obj,
                ObservableParcelable.class);
        assertEquals(myParcelable, read.get());
!!!36047415.java!!!	testParcelLong() : void
        ObservableLong obj = new ObservableLong(Long.MAX_VALUE - 1);
        ObservableLong read = parcelAndUnparcel(obj, ObservableLong.class);
        assertEquals(Long.MAX_VALUE - 1, read.get());
!!!36047543.java!!!	testParcelShort() : void
        ObservableShort obj = new ObservableShort(Short.MIN_VALUE);
        ObservableShort read = parcelAndUnparcel(obj, ObservableShort.class);
        assertEquals(Short.MIN_VALUE, read.get());
!!!36047671.java!!!	testSerializeInt() : void
        ObservableInt observableInt = new ObservableInt();
        observableInt.set(Integer.MAX_VALUE - 1);
        ObservableInt read = serializeAndDeserialize(observableInt, ObservableInt.class);
        assertEquals(Integer.MAX_VALUE - 1, read.get());
!!!36047799.java!!!	testSerializeBoolean() : void
        ObservableBoolean obj = new ObservableBoolean(false);
        ObservableBoolean read = serializeAndDeserialize(obj, ObservableBoolean.class);
        assertFalse(read.get());
        ObservableBoolean obj2 = new ObservableBoolean(true);
        ObservableBoolean read2 = serializeAndDeserialize(obj2, ObservableBoolean.class);
        assertTrue(read2.get());
!!!36047927.java!!!	testSerializeByte() : void
        ObservableByte obj = new ObservableByte((byte) 7);
        ObservableByte read = serializeAndDeserialize(obj, ObservableByte.class);
        assertEquals((byte) 7, read.get());
!!!36048055.java!!!	testSerializeChar() : void
        ObservableChar obj = new ObservableChar('y');
        ObservableChar read = serializeAndDeserialize(obj, ObservableChar.class);
        assertEquals('y', read.get());
!!!36048183.java!!!	testSerializeDouble() : void
        ObservableDouble obj = new ObservableDouble(Double.MAX_VALUE);
        ObservableDouble read = serializeAndDeserialize(obj, ObservableDouble.class);
        assertEquals(Double.MAX_VALUE, read.get());
!!!36048311.java!!!	testSerializeFloat() : void
        ObservableFloat obj = new ObservableFloat(Float.MIN_VALUE);
        ObservableFloat read = serializeAndDeserialize(obj, ObservableFloat.class);
        assertEquals(Float.MIN_VALUE, read.get());
!!!36048439.java!!!	testSerializeParcel() : void
        MyParcelable myParcelable = new MyParcelable(5, "foo");
        ObservableParcelable<MyParcelable> obj = new ObservableParcelable<>(myParcelable);
        ObservableParcelable read = serializeAndDeserialize(obj,
                ObservableParcelable.class);
        assertEquals(myParcelable, read.get());
!!!36048567.java!!!	testSerializeField() : void
        MyParcelable myParcelable = new MyParcelable(5, "foo");
        ObservableField<MyParcelable> obj = new ObservableField<>(myParcelable);
        ObservableField read = serializeAndDeserialize(obj, ObservableField.class);
        assertEquals(myParcelable, read.get());
!!!36048695.java!!!	testSerializeLong() : void
        ObservableLong obj = new ObservableLong(Long.MAX_VALUE - 1);
        ObservableLong read = serializeAndDeserialize(obj, ObservableLong.class);
        assertEquals(Long.MAX_VALUE - 1, read.get());
!!!36048823.java!!!	testSerializeShort() : void
        ObservableShort obj = new ObservableShort(Short.MIN_VALUE);
        ObservableShort read = serializeAndDeserialize(obj, ObservableShort.class);
        assertEquals(Short.MIN_VALUE, read.get());
!!!36048951.java!!!	parcelAndUnparcel(inout t : T, inout klass : Class) : T
        Parcel parcel = Parcel.obtain();
        parcel.writeParcelable(t, 0);
        // we append a suffix to the parcelable to test out of bounds
        String parcelSuffix = UUID.randomUUID().toString();
        parcel.writeString(parcelSuffix);
        // get ready to read
        parcel.setDataPosition(0);
        Parcelable parcelable = parcel.readParcelable(getClass().getClassLoader());
        assertNotNull(parcelable);
        assertEquals(klass, parcelable.getClass());
        assertEquals(parcelSuffix, parcel.readString());
        return (T) parcelable;
!!!36049079.java!!!	serializeAndDeserialize(inout t : T, inout klass : Class) : T
        ObjectOutputStream oos = null;
        ByteArrayOutputStream bos = null;
        String suffix = UUID.randomUUID().toString();
        try {
            bos = new ByteArrayOutputStream();
            oos = new ObjectOutputStream(bos);
            oos.writeObject(t);
            oos.writeObject(suffix);
        } finally {
            closeQuietly(bos);
            closeQuietly(oos);
        }
        ByteArrayInputStream bis = null;
        ObjectInputStream ois = null;
        try {
            bis = new ByteArrayInputStream(bos.toByteArray());
            ois = new ObjectInputStream(bis);
            Object o = ois.readObject();
            assertEquals(klass, o.getClass());
            assertEquals(suffix, ois.readObject());
            return (T) o;
        } finally {
            closeQuietly(bis);
            closeQuietly(ois);
        }
!!!36049207.java!!!	closeQuietly(inout closeable : Closeable) : void
        try {
            if (closeable != null) {
                closeable.close();
            }
        } catch (IOException ignored) {
        }
