class ViewDataBinding
!!!36069815.java!!!	ViewDataBinding(inout bindingComponent : DataBindingComponent, inout root : View, in localFieldCount : int)
        mBindingComponent = bindingComponent;
        mLocalFieldObservers = new WeakListener[localFieldCount];
        this.mRoot = root;
        if (Looper.myLooper() == null) {
            throw new IllegalStateException("DataBinding must be created in view's UI Thread");
        }
        if (USE_CHOREOGRAPHER) {
            mChoreographer = Choreographer.getInstance();
            mFrameCallback = new Choreographer.FrameCallback() {
                @Override
                public void doFrame(long frameTimeNanos) {
                    mRebindRunnable.run();
                }
            };
        } else {
            mFrameCallback = null;
            mUIThreadHandler = new Handler(Looper.myLooper());
        }
!!!36069943.java!!!	setRootTag(inout view : View) : void
        if (USE_TAG_ID) {
            view.setTag(R.id.dataBinding, this);
        } else {
            view.setTag(this);
        }
!!!36070071.java!!!	setRootTag(inout views : View) : void
        if (USE_TAG_ID) {
            for (View view : views) {
                view.setTag(R.id.dataBinding, this);
            }
        } else {
            for (View view : views) {
                view.setTag(this);
            }
        }
!!!36070199.java!!!	getBuildSdkInt() : int
        return SDK_INT;
!!!36070583.java!!!	addOnRebindCallback(inout listener : OnRebindCallback) : void
        if (mRebindCallbacks == null) {
            mRebindCallbacks = new CallbackRegistry<OnRebindCallback, ViewDataBinding, Void>(REBIND_NOTIFIER);
        }
        mRebindCallbacks.add(listener);
!!!36070711.java!!!	removeOnRebindCallback(inout listener : OnRebindCallback) : void
        if (mRebindCallbacks != null) {
            mRebindCallbacks.remove(listener);
        }
!!!36070839.java!!!	executePendingBindings() : void
        if (mIsExecutingPendingBindings) {
            requestRebind();
            return;
        }
        if (!hasPendingBindings()) {
            return;
        }
        mIsExecutingPendingBindings = true;
        mRebindHalted = false;
        if (mRebindCallbacks != null) {
            mRebindCallbacks.notifyCallbacks(this, REBIND, null);

            // The onRebindListeners will change mPendingHalted
            if (mRebindHalted) {
                mRebindCallbacks.notifyCallbacks(this, HALTED, null);
            }
        }
        if (!mRebindHalted) {
            executeBindings();
            if (mRebindCallbacks != null) {
                mRebindCallbacks.notifyCallbacks(this, REBOUND, null);
            }
        }
        mIsExecutingPendingBindings = false;
!!!36070967.java!!!	forceExecuteBindings() : void
        executeBindings();
!!!36071479.java!!!	unbind() : void
        for (WeakListener weakListener : mLocalFieldObservers) {
            if (weakListener != null) {
                weakListener.unregister();
            }
        }
!!!36071607.java!!!	finalize() : void
        unbind();
!!!36071735.java!!!	getBinding(inout v : View) : ViewDataBinding
        if (v != null) {
            if (USE_TAG_ID) {
                return (ViewDataBinding) v.getTag(R.id.dataBinding);
            } else {
                final Object tag = v.getTag();
                if (tag instanceof ViewDataBinding) {
                    return (ViewDataBinding) tag;
                }
            }
        }
        return null;
!!!36071863.java!!!	getRoot() : View
        return mRoot;
!!!36071991.java!!!	handleFieldChange(in mLocalFieldId : int, inout object : Object, in fieldId : int) : void
        boolean result = onFieldChange(mLocalFieldId, object, fieldId);
        if (result) {
            requestRebind();
        }
!!!36072119.java!!!	unregisterFrom(in localFieldId : int) : boolean
        WeakListener listener = mLocalFieldObservers[localFieldId];
        if (listener != null) {
            return listener.unregister();
        }
        return false;
!!!36072247.java!!!	requestRebind() : void
        synchronized (this) {
            if (mPendingRebind) {
                return;
            }
            mPendingRebind = true;
        }
        if (USE_CHOREOGRAPHER) {
            mChoreographer.postFrameCallback(mFrameCallback);
        } else {
            mUIThreadHandler.post(mRebindRunnable);
        }

!!!36072375.java!!!	getObservedField(in localFieldId : int) : Object
        WeakListener listener = mLocalFieldObservers[localFieldId];
        if (listener == null) {
            return null;
        }
        return listener.getTarget();
!!!36072503.java!!!	updateRegistration(in localFieldId : int, inout observable : Object, inout listenerCreator : ViewDataBinding::CreateWeakListener) : boolean
        if (observable == null) {
            return unregisterFrom(localFieldId);
        }
        WeakListener listener = mLocalFieldObservers[localFieldId];
        if (listener == null) {
            registerTo(localFieldId, observable, listenerCreator);
            return true;
        }
        if (listener.getTarget() == observable) {
            return false;//nothing to do, same object
        }
        unregisterFrom(localFieldId);
        registerTo(localFieldId, observable, listenerCreator);
        return true;
!!!36072631.java!!!	updateRegistration(in localFieldId : int, inout observable : Observable) : boolean
        return updateRegistration(localFieldId, observable, CREATE_PROPERTY_LISTENER);
!!!36072759.java!!!	updateRegistration(in localFieldId : int, inout observable : ObservableList) : boolean
        return updateRegistration(localFieldId, observable, CREATE_LIST_LISTENER);
!!!36072887.java!!!	updateRegistration(in localFieldId : int, inout observable : ObservableMap) : boolean
        return updateRegistration(localFieldId, observable, CREATE_MAP_LISTENER);
!!!36073015.java!!!	ensureBindingComponentIsNotNull(inout oneExample : Class) : void
        if (mBindingComponent == null) {
            String errorMessage = "Required DataBindingComponent is null in class " +
                    getClass().getSimpleName() + ". A BindingAdapter in " +
                    oneExample.getCanonicalName() +
                    " is not static and requires an object to use, retrieved from the " +
                    "DataBindingComponent. If you don't use an inflation method taking a " +
                    "DataBindingComponent, use DataBindingUtil.setDefaultComponent or " +
                    "make all BindingAdapter methods static.";
            throw new IllegalStateException(errorMessage);
        }
!!!36073143.java!!!	registerTo(in localFieldId : int, inout observable : Object, inout listenerCreator : ViewDataBinding::CreateWeakListener) : void
        if (observable == null) {
            return;
        }
        WeakListener listener = mLocalFieldObservers[localFieldId];
        if (listener == null) {
            listener = listenerCreator.create(this, localFieldId);
            mLocalFieldObservers[localFieldId] = listener;
        }
        listener.setTarget(observable);
!!!36073271.java!!!	bind(inout bindingComponent : DataBindingComponent, inout view : View, in layoutId : int) : ViewDataBinding
        return DataBindingUtil.bind(bindingComponent, view, layoutId);
!!!36073399.java!!!	mapBindings(inout bindingComponent : DataBindingComponent, inout root : View, in numBindings : int, inout includes : ViewDataBinding::IncludedLayouts, inout viewsWithIds : SparseIntArray) : Object
        Object[] bindings = new Object[numBindings];
        mapBindings(bindingComponent, root, bindings, includes, viewsWithIds, true);
        return bindings;
!!!36073527.java!!!	getColorFromResource(in resourceId : int) : int
        if (VERSION.SDK_INT >= VERSION_CODES.M) {
            return getRoot().getContext().getColor(resourceId);
        } else {
            return getRoot().getResources().getColor(resourceId);
        }
!!!36073655.java!!!	getColorStateListFromResource(in resourceId : int) : ColorStateList
        if (VERSION.SDK_INT >= VERSION_CODES.M) {
            return getRoot().getContext().getColorStateList(resourceId);
        } else {
            return getRoot().getResources().getColorStateList(resourceId);
        }
!!!36073783.java!!!	getDrawableFromResource(in resourceId : int) : Drawable
        if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
            return getRoot().getContext().getDrawable(resourceId);
        } else {
            return getRoot().getResources().getDrawable(resourceId);
        }
!!!36073911.java!!!	getFromArray(inout arr : T, in index : int) : T
        if (arr == null || index < 0 || index >= arr.length) {
            return null;
        }
        return arr[index];
!!!36074039.java!!!	setTo(inout arr : T, in index : int, inout value : T) : void
        if (arr == null || index < 0 || index >= arr.length) {
            return;
        }
        arr[index] = value;
!!!36074167.java!!!	getFromArray(inout arr : boolean, in index : int) : boolean
        if (arr == null || index < 0 || index >= arr.length) {
            return false;
        }
        return arr[index];
!!!36074295.java!!!	setTo(inout arr : boolean, in index : int, inout value : boolean) : void
        if (arr == null || index < 0 || index >= arr.length) {
            return;
        }
        arr[index] = value;
!!!36074423.java!!!	getFromArray(inout arr : byte, in index : int) : byte
        if (arr == null || index < 0 || index >= arr.length) {
            return 0;
        }
        return arr[index];
!!!36074551.java!!!	setTo(inout arr : byte, in index : int, in value : byte) : void
        if (arr == null || index < 0 || index >= arr.length) {
            return;
        }
        arr[index] = value;
!!!36074679.java!!!	getFromArray(inout arr : short, in index : int) : short
        if (arr == null || index < 0 || index >= arr.length) {
            return 0;
        }
        return arr[index];
!!!36074807.java!!!	setTo(inout arr : short, in index : int, in value : short) : void
        if (arr == null || index < 0 || index >= arr.length) {
            return;
        }
        arr[index] = value;
!!!36074935.java!!!	getFromArray(inout arr : char, in index : int) : char
        if (arr == null || index < 0 || index >= arr.length) {
            return 0;
        }
        return arr[index];
!!!36075063.java!!!	setTo(inout arr : char, in index : int, in value : char) : void
        if (arr == null || index < 0 || index >= arr.length) {
            return;
        }
        arr[index] = value;
!!!36075191.java!!!	getFromArray(inout arr : int, in index : int) : int
        if (arr == null || index < 0 || index >= arr.length) {
            return 0;
        }
        return arr[index];
!!!36075319.java!!!	setTo(inout arr : int, in index : int, in value : int) : void
        if (arr == null || index < 0 || index >= arr.length) {
            return;
        }
        arr[index] = value;
!!!36075447.java!!!	getFromArray(inout arr : long, in index : int) : long
        if (arr == null || index < 0 || index >= arr.length) {
            return 0;
        }
        return arr[index];
!!!36075575.java!!!	setTo(inout arr : long, in index : int, in value : long) : void
        if (arr == null || index < 0 || index >= arr.length) {
            return;
        }
        arr[index] = value;
!!!36075703.java!!!	getFromArray(inout arr : float, in index : int) : float
        if (arr == null || index < 0 || index >= arr.length) {
            return 0;
        }
        return arr[index];
!!!36075831.java!!!	setTo(inout arr : float, in index : int, in value : float) : void
        if (arr == null || index < 0 || index >= arr.length) {
            return;
        }
        arr[index] = value;
!!!36075959.java!!!	getFromArray(inout arr : double, in index : int) : double
        if (arr == null || index < 0 || index >= arr.length) {
            return 0;
        }
        return arr[index];
!!!36076087.java!!!	setTo(inout arr : double, in index : int, in value : double) : void
        if (arr == null || index < 0 || index >= arr.length) {
            return;
        }
        arr[index] = value;
!!!36076215.java!!!	getFromList(inout list : List<T>, in index : int) : T
        if (list == null || index < 0 || index >= list.size()) {
            return null;
        }
        return list.get(index);
!!!36076343.java!!!	setTo(inout list : List<T>, in index : int, inout value : T) : void
        if (list == null || index < 0 || index >= list.size()) {
            return;
        }
        list.set(index, value);
!!!36076471.java!!!	getFromList(inout list : SparseArray, in index : int) : T
        if (list == null || index < 0) {
            return null;
        }
        return list.get(index);
!!!36076599.java!!!	setTo(inout list : SparseArray, in index : int, inout value : T) : void
        if (list == null || index < 0 || index >= list.size()) {
            return;
        }
        list.put(index, value);
!!!36076727.java!!!	getFromList(inout list : LongSparseArray, in index : int) : T
        if (list == null || index < 0) {
            return null;
        }
        return list.get(index);
!!!36076855.java!!!	setTo(inout list : LongSparseArray, in index : int, inout value : T) : void
        if (list == null || index < 0 || index >= list.size()) {
            return;
        }
        list.put(index, value);
!!!36076983.java!!!	getFromList(inout list : LongSparseArray, in index : int) : T
        if (list == null || index < 0) {
            return null;
        }
        return list.get(index);
!!!36077111.java!!!	setTo(inout list : LongSparseArray, in index : int, inout value : T) : void
        if (list == null || index < 0 || index >= list.size()) {
            return;
        }
        list.put(index, value);
!!!36077239.java!!!	getFromList(inout list : SparseBooleanArray, in index : int) : boolean
        if (list == null || index < 0) {
            return false;
        }
        return list.get(index);
!!!36077367.java!!!	setTo(inout list : SparseBooleanArray, in index : int, inout value : boolean) : void
        if (list == null || index < 0 || index >= list.size()) {
            return;
        }
        list.put(index, value);
!!!36077495.java!!!	getFromList(inout list : SparseIntArray, in index : int) : int
        if (list == null || index < 0) {
            return 0;
        }
        return list.get(index);
!!!36077623.java!!!	setTo(inout list : SparseIntArray, in index : int, in value : int) : void
        if (list == null || index < 0 || index >= list.size()) {
            return;
        }
        list.put(index, value);
!!!36077751.java!!!	getFromList(inout list : SparseLongArray, in index : int) : long
        if (list == null || index < 0) {
            return 0;
        }
        return list.get(index);
!!!36077879.java!!!	setTo(inout list : SparseLongArray, in index : int, in value : long) : void
        if (list == null || index < 0 || index >= list.size()) {
            return;
        }
        list.put(index, value);
!!!36078007.java!!!	getFrom(inout map : Map<K, T>, inout key : K) : T
        if (map == null) {
            return null;
        }
        return map.get(key);
!!!36078135.java!!!	setTo(inout map : Map<K, T>, inout key : K, inout value : T) : void
        if (map == null) {
            return;
        }
        map.put(key, value);
!!!36078263.java!!!	setBindingInverseListener(inout binder : ViewDataBinding, inout oldListener : InverseBindingListener, inout listener : ViewDataBinding::PropertyChangedInverseListener) : void
        if (oldListener != listener) {
            if (oldListener != null) {
                binder.removeOnPropertyChangedCallback(
                        (PropertyChangedInverseListener) oldListener);
            }
            if (listener != null) {
                binder.addOnPropertyChangedCallback(listener);
            }
        }
!!!36078391.java!!!	mapBindings(inout bindingComponent : DataBindingComponent, inout roots : View, in numBindings : int, inout includes : ViewDataBinding::IncludedLayouts, inout viewsWithIds : SparseIntArray) : Object
        Object[] bindings = new Object[numBindings];
        for (int i = 0; i < roots.length; i++) {
            mapBindings(bindingComponent, roots[i], bindings, includes, viewsWithIds, true);
        }
        return bindings;
!!!36078519.java!!!	mapBindings(inout bindingComponent : DataBindingComponent, inout view : View, inout bindings : Object, inout includes : ViewDataBinding::IncludedLayouts, inout viewsWithIds : SparseIntArray, inout isRoot : boolean) : void
        final int indexInIncludes;
        final ViewDataBinding existingBinding = getBinding(view);
        if (existingBinding != null) {
            return;
        }
        final String tag = (String) view.getTag();
        boolean isBound = false;
        if (isRoot && tag != null && tag.startsWith("layout")) {
            final int underscoreIndex = tag.lastIndexOf('_');
            if (underscoreIndex > 0 && isNumeric(tag, underscoreIndex + 1)) {
                final int index = parseTagInt(tag, underscoreIndex + 1);
                if (bindings[index] == null) {
                    bindings[index] = view;
                }
                indexInIncludes = includes == null ? -1 : index;
                isBound = true;
            } else {
                indexInIncludes = -1;
            }
        } else if (tag != null && tag.startsWith(BINDING_TAG_PREFIX)) {
            int tagIndex = parseTagInt(tag, BINDING_NUMBER_START);
            if (bindings[tagIndex] == null) {
                bindings[tagIndex] = view;
            }
            isBound = true;
            indexInIncludes = includes == null ? -1 : tagIndex;
        } else {
            // Not a bound view
            indexInIncludes = -1;
        }
        if (!isBound) {
            final int id = view.getId();
            if (id > 0) {
                int index;
                if (viewsWithIds != null && (index = viewsWithIds.get(id, -1)) >= 0 &&
                        bindings[index] == null) {
                    bindings[index] = view;
                }
            }
        }

        if (view instanceof  ViewGroup) {
            final ViewGroup viewGroup = (ViewGroup) view;
            final int count = viewGroup.getChildCount();
            int minInclude = 0;
            for (int i = 0; i < count; i++) {
                final View child = viewGroup.getChildAt(i);
                boolean isInclude = false;
                if (indexInIncludes >= 0) {
                    String childTag = (String) child.getTag();
                    if (childTag != null && childTag.endsWith("_0") &&
                            childTag.startsWith("layout") && childTag.indexOf('/') > 0) {
                        // This *could* be an include. Test against the expected includes.
                        int includeIndex = findIncludeIndex(childTag, minInclude,
                                includes, indexInIncludes);
                        if (includeIndex >= 0) {
                            isInclude = true;
                            minInclude = includeIndex + 1;
                            final int index = includes.indexes[indexInIncludes][includeIndex];
                            final int layoutId = includes.layoutIds[indexInIncludes][includeIndex];
                            int lastMatchingIndex = findLastMatching(viewGroup, i);
                            if (lastMatchingIndex == i) {
                                bindings[index] = DataBindingUtil.bind(bindingComponent, child,
                                        layoutId);
                            } else {
                                final int includeCount =  lastMatchingIndex - i + 1;
                                final View[] included = new View[includeCount];
                                for (int j = 0; j < includeCount; j++) {
                                    included[j] = viewGroup.getChildAt(i + j);
                                }
                                bindings[index] = DataBindingUtil.bind(bindingComponent, included,
                                        layoutId);
                                i += includeCount - 1;
                            }
                        }
                    }
                }
                if (!isInclude) {
                    mapBindings(bindingComponent, child, bindings, includes, viewsWithIds, false);
                }
            }
        }
!!!36078647.java!!!	findIncludeIndex(inout tag : String, in minInclude : int, inout included : ViewDataBinding::IncludedLayouts, in includedIndex : int) : int
        final int slashIndex = tag.indexOf('/');
        final CharSequence layoutName = tag.subSequence(slashIndex + 1, tag.length() - 2);

        final String[] layouts = included.layouts[includedIndex];
        final int length = layouts.length;
        for (int i = minInclude; i < length; i++) {
            final String layout = layouts[i];
            if (TextUtils.equals(layoutName, layout)) {
                return i;
            }
        }
        return -1;
!!!36078775.java!!!	findLastMatching(inout viewGroup : ViewGroup, in firstIncludedIndex : int) : int
        final View firstView = viewGroup.getChildAt(firstIncludedIndex);
        final String firstViewTag = (String) firstView.getTag();
        final String tagBase = firstViewTag.substring(0, firstViewTag.length() - 1); // don't include the "0"
        final int tagSequenceIndex = tagBase.length();

        final int count = viewGroup.getChildCount();
        int max = firstIncludedIndex;
        for (int i = firstIncludedIndex + 1; i < count; i++) {
            final View view = viewGroup.getChildAt(i);
            final String tag = (String) view.getTag();
            if (tag != null && tag.startsWith(tagBase)) {
                if (tag.length() == firstViewTag.length() && tag.charAt(tag.length() - 1) == '0') {
                    return max; // Found another instance of the include
                }
                if (isNumeric(tag, tagSequenceIndex)) {
                    max = i;
                }
            }
        }
        return max;
!!!36078903.java!!!	isNumeric(inout tag : String, in startIndex : int) : boolean
        int length = tag.length();
        if (length == startIndex) {
            return false; // no numerals
        }
        for (int i = startIndex; i < length; i++) {
            if (!Character.isDigit(tag.charAt(i))) {
                return false;
            }
        }
        return true;
!!!36079031.java!!!	parseTagInt(inout str : String, in startIndex : int) : int
        final int end = str.length();
        int val = 0;
        for (int i = startIndex; i < end; i++) {
            val *= 10;
            char c = str.charAt(i);
            val += (c - '0');
        }
        return val;
