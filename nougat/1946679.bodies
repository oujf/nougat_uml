class ObservableArrayMap
!!!36060855.java!!!	addOnMapChangedCallback(inout listener : ObservableMap::OnMapChangedCallback) : void
        if (mListeners == null) {
            mListeners = new MapChangeRegistry();
        }
        mListeners.add(listener);
!!!36060983.java!!!	removeOnMapChangedCallback(inout listener : ObservableMap::OnMapChangedCallback) : void
        if (mListeners != null) {
            mListeners.remove(listener);
        }
!!!36061111.java!!!	clear() : void
        boolean wasEmpty = isEmpty();
        if (!wasEmpty) {
            super.clear();
            notifyChange(null);
        }
!!!36061239.java!!!	put(inout k : K, inout v : V) : V
        V val = super.put(k, v);
        notifyChange(k);
        return v;
!!!36061367.java!!!	removeAll(inout collection : Collection<?>) : boolean
        boolean removed = false;
        for (Object key : collection) {
            int index = indexOfKey(key);
            if (index >= 0) {
                removed = true;
                removeAt(index);
            }
        }
        return removed;
!!!36061495.java!!!	retainAll(inout collection : Collection<?>) : boolean
        boolean removed = false;
        for (int i = size() - 1; i >= 0; i--) {
            Object key = keyAt(i);
            if (!collection.contains(key)) {
                removeAt(i);
                removed = true;
            }
        }
        return removed;
!!!36061623.java!!!	removeAt(in index : int) : V
        K key = keyAt(index);
        V value = super.removeAt(index);
        if (value != null) {
            notifyChange(key);
        }
        return value;
!!!36061751.java!!!	setValueAt(in index : int, inout value : V) : V
        K key = keyAt(index);
        V oldValue = super.setValueAt(index, value);
        notifyChange(key);
        return oldValue;
!!!36061879.java!!!	notifyChange(inout key : Object) : void
        if (mListeners != null) {
            mListeners.notifyCallbacks(this, 0, key);
        }
