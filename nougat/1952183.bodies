class BaseDataBinderTest
!!!36091703.java!!!	BaseDataBinderTest(in binderClass : Class)
        this(binderClass, ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
!!!36091831.java!!!	BaseDataBinderTest(in binderClass : Class, in orientation : int)
        super(TestActivity.class);
        mBinderClass = binderClass;
        mOrientation = orientation;
!!!36091959.java!!!	setUp() : void
        super.setUp();
        getActivity().setRequestedOrientation(mOrientation);
!!!36092087.java!!!	isMainThread() : boolean
        return Looper.myLooper() == Looper.getMainLooper();
!!!36092215.java!!!	getBinder() : T
        return mBinder;
!!!36092343.java!!!	initBinder() : T
        return initBinder(null);
!!!36092471.java!!!	runTestOnUiThread(inout r : Runnable) : void
        if (Looper.myLooper() == Looper.getMainLooper()) {
            r.run();
        } else {
            // ensure activity is created
            getActivity();
            super.runTestOnUiThread(r);
        }

!!!36092599.java!!!	initBinder(in init : Runnable) : T
        assertNull("should not initialize binder twice", mBinder);
        if (Looper.myLooper() != Looper.getMainLooper()) {
            getActivity();// ensure activity is created
            getInstrumentation().waitForIdleSync();
        }

        final Method[] method = {null};
        Throwable[] initError = new Throwable[1];
        try {
            runTestOnUiThread(new Runnable() {
                @Override
                public void run() {
                    try {
                        method[0] = mBinderClass.getMethod("inflate", LayoutInflater.class);
                        mBinder = (T) method[0].invoke(null, getActivity().getLayoutInflater());
                        getActivity().setContentView(mBinder.getRoot());
                        if (init != null) {
                            init.run();
                        }
                    } catch (Exception e) {
                        StringWriter sw = new StringWriter();
                        PrintWriter pw = new PrintWriter(sw);
                        e.printStackTrace(pw);
                        fail("Error creating binder: " + sw.toString());
                    }
                }
            });
        } catch (Throwable throwable) {
            initError[0] = throwable;
        }
        assertNull(initError[0]);
        assertNotNull(mBinder);
        return mBinder;
!!!36092727.java!!!	reCreateBinder(inout init : Runnable) : void
        mBinder = null;
        initBinder(init);
!!!36092855.java!!!	assertMethod(inout klass : Class, inout methodName : String) : void
        assertEquals(klass, mBinder.getClass().getDeclaredMethod(methodName).getReturnType());
!!!36092983.java!!!	assertField(inout klass : Class, inout fieldName : String) : void
        assertEquals(klass, mBinder.getClass().getDeclaredField(fieldName).getType());
!!!36093111.java!!!	assertPublicField(inout klass : Class, inout fieldName : String) : void
        assertEquals(klass, mBinder.getClass().getField(fieldName).getType());
!!!36093239.java!!!	assertNoField(inout fieldName : String) : void
        Exception[] ex = new Exception[1];
        try {
            mBinder.getClass().getField(fieldName);
        } catch (NoSuchFieldException e) {
            ex[0] = e;
        }
        assertNotNull(ex[0]);
