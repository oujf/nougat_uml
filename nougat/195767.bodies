class LineNumberList
!!!710967.java!!!	concat(inout list1 : LineNumberList, inout list2 : LineNumberList) : LineNumberList
        if (list1 == EMPTY) {
            // easy case
            return list2;
        }

        int sz1 = list1.size();
        int sz2 = list2.size();
        LineNumberList result = new LineNumberList(sz1 + sz2);

        for (int i = 0; i < sz1; i++) {
            result.set(i, list1.get(i));
        }

        for (int i = 0; i < sz2; i++) {
            result.set(sz1 + i, list2.get(i));
        }

        return result;
!!!711095.java!!!	LineNumberList(in count : int)
        super(count);
!!!711223.java!!!	get(in n : int) : LineNumberList::Item
        return (Item) get0(n);
!!!711351.java!!!	set(in n : int, inout item : LineNumberList::Item) : void
        if (item == null) {
            throw new NullPointerException("item == null");
        }

        set0(n, item);
!!!711479.java!!!	set(in n : int, in startPc : int, in lineNumber : int) : void
        set0(n, new Item(startPc, lineNumber));
!!!711607.java!!!	pcToLine(in pc : int) : int
        /*
         * Line number entries don't have to appear in any particular
         * order, so we have to do a linear search. TODO: If
         * this turns out to be a bottleneck, consider sorting the
         * list prior to use.
         */
        int sz = size();
        int bestPc = -1;
        int bestLine = -1;

        for (int i = 0; i < sz; i++) {
            Item one = get(i);
            int onePc = one.getStartPc();
            if ((onePc <= pc) && (onePc > bestPc)) {
                bestPc = onePc;
                bestLine = one.getLineNumber();
                if (bestPc == pc) {
                    // We can't do better than this
                    break;
                }
            }
        }

        return bestLine;
