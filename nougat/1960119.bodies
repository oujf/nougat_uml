class ListChangeRegistryTest
!!!36118711.java!!!	ListChangeRegistryTest()
        super(BasicBindingBinding.class);
!!!36118839.java!!!	setUp() : void
        super.setUp();
        mListChangeRegistry = new ListChangeRegistry();
        mCallCount = 0;
!!!36118967.java!!!	tearDown() : void
        super.tearDown();
        mListChangeRegistry = null;
!!!36119095.java!!!	testNotifyChangedAll() : void
        OnListChangedCallback listChangedCallback = new OnListChangedCallback() {
            @Override
            public void onChanged(ObservableList sender) {
                mCallCount++;
            }

            @Override
            public void onItemRangeChanged(ObservableList sender, int start, int count) {
                fail("onItemRangeChanged should not be called");
            }

            @Override
            public void onItemRangeInserted(ObservableList sender, int start, int count) {
                fail("onItemRangeInserted should not be called");
            }

            @Override
            public void onItemRangeMoved(ObservableList sender, int from, int to, int count) {
                fail("onItemRangeMoved should not be called");
            }

            @Override
            public void onItemRangeRemoved(ObservableList sender, int start, int count) {
                fail("onItemRangeRemoved should not be called");
            }
        };

        mListChangeRegistry.add(listChangedCallback);
        assertEquals(0, mCallCount);
        mListChangeRegistry.notifyChanged(null);
        assertEquals(1, mCallCount);
!!!36119223.java!!!	testNotifyChanged() : void
        final int expectedStart = 10;
        final int expectedCount = 3;

        OnListChangedCallback listChangedCallback = new OnListChangedCallback() {
            @Override
            public void onChanged(ObservableList sender) {
                fail("onChanged should not be called");
            }

            @Override
            public void onItemRangeChanged(ObservableList sender, int start, int count) {
                assertEquals(expectedStart, start);
                assertEquals(expectedCount, count);
                mCallCount++;
            }

            @Override
            public void onItemRangeInserted(ObservableList sender, int start, int count) {
                fail("onItemRangeInserted should not be called");
            }

            @Override
            public void onItemRangeMoved(ObservableList sender, int from, int to, int count) {
                fail("onItemRangeMoved should not be called");
            }

            @Override
            public void onItemRangeRemoved(ObservableList sender, int start, int count) {
                fail("onItemRangeRemoved should not be called");
            }
        };

        mListChangeRegistry.add(listChangedCallback);
        assertEquals(0, mCallCount);
        mListChangeRegistry.notifyChanged(null, expectedStart, expectedCount);
        assertEquals(1, mCallCount);
!!!36119351.java!!!	testNotifyInserted() : void
        final int expectedStart = 10;
        final int expectedCount = 3;

        OnListChangedCallback listChangedCallback = new OnListChangedCallback() {
            @Override
            public void onChanged(ObservableList sender) {
                fail("onChanged should not be called");
            }

            @Override
            public void onItemRangeChanged(ObservableList sender, int start, int count) {
                fail("onItemRangeChanged should not be called");
            }

            @Override
            public void onItemRangeInserted(ObservableList sender, int start, int count) {
                assertEquals(expectedStart, start);
                assertEquals(expectedCount, count);
                mCallCount++;
            }

            @Override
            public void onItemRangeMoved(ObservableList sender, int from, int to, int count) {
                fail("onItemRangeMoved should not be called");
            }

            @Override
            public void onItemRangeRemoved(ObservableList sender, int start, int count) {
                fail("onItemRangeRemoved should not be called");
            }
        };

        mListChangeRegistry.add(listChangedCallback);
        assertEquals(0, mCallCount);
        mListChangeRegistry.notifyInserted(null, expectedStart, expectedCount);
        assertEquals(1, mCallCount);
!!!36119479.java!!!	testNotifyMoved() : void
        final int expectedFrom = 10;
        final int expectedTo = 100;
        final int expectedCount = 3;

        OnListChangedCallback listChangedCallback = new OnListChangedCallback() {
            @Override
            public void onChanged(ObservableList sender) {
                fail("onChanged should not be called");
            }

            @Override
            public void onItemRangeChanged(ObservableList sender, int start, int count) {
                fail("onItemRangeChanged should not be called");
            }

            @Override
            public void onItemRangeInserted(ObservableList sender, int start, int count) {
                fail("onItemRangeInserted should not be called");
            }

            @Override
            public void onItemRangeMoved(ObservableList sender, int from, int to, int count) {
                assertEquals(expectedFrom, from);
                assertEquals(expectedTo, to);
                assertEquals(expectedCount, count);
                mCallCount++;
            }

            @Override
            public void onItemRangeRemoved(ObservableList sender, int start, int count) {
                fail("onItemRangeRemoved should not be called");
            }
        };

        mListChangeRegistry.add(listChangedCallback);
        assertEquals(0, mCallCount);
        mListChangeRegistry.notifyMoved(null, expectedFrom, expectedTo, expectedCount);
        assertEquals(1, mCallCount);
!!!36119607.java!!!	testNotifyRemoved() : void
        final int expectedStart = 10;
        final int expectedCount = 3;

        OnListChangedCallback listChangedCallback = new OnListChangedCallback() {
            @Override
            public void onChanged(ObservableList sender) {
                fail("onChanged should not be called");
            }

            @Override
            public void onItemRangeChanged(ObservableList sender, int start, int count) {
                fail("onItemRangeChanged should not be called");
            }

            @Override
            public void onItemRangeInserted(ObservableList sender, int start, int count) {
                fail("onItemRangeInserted should not be called");
            }

            @Override
            public void onItemRangeMoved(ObservableList sender, int from, int to, int count) {
                fail("onItemRangeMoved should not be called");
            }

            @Override
            public void onItemRangeRemoved(ObservableList sender, int start, int count) {
                assertEquals(expectedStart, start);
                assertEquals(expectedCount, count);
                mCallCount++;
            }
        };

        mListChangeRegistry.add(listChangedCallback);
        assertEquals(0, mCallCount);
        mListChangeRegistry.notifyRemoved(null, expectedStart, expectedCount);
        assertEquals(1, mCallCount);
