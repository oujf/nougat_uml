class ObservableArrayListTest
!!!36125111.java!!!	ObservableArrayListTest()
        super(BasicBindingBinding.class);
!!!36125239.java!!!	setUp() : void
        mNotifications.clear();
        mObservable = new ObservableArrayList<>();
!!!36125367.java!!!	testAddListener() : void
        mObservable.add("Hello");
        assertTrue(mNotifications.isEmpty());
        mObservable.addOnListChangedCallback(mListener);
        mObservable.add("World");
        assertFalse(mNotifications.isEmpty());
!!!36125495.java!!!	testRemoveListener() : void
        // test there is no exception when the listener isn't there
        mObservable.removeOnListChangedCallback(mListener);

        mObservable.addOnListChangedCallback(mListener);
        mObservable.add("Hello");
        mNotifications.clear();
        mObservable.removeOnListChangedCallback(mListener);
        mObservable.add("World");
        assertTrue(mNotifications.isEmpty());

        // test there is no exception when the listener isn't there
        mObservable.removeOnListChangedCallback(mListener);
!!!36125623.java!!!	testAdd() : void
        OnListChangedCallback listChangedListener = new OnListChangedCallback() {
            @Override
            public void onChanged(ObservableList sender) {
            }

            @Override
            public void onItemRangeChanged(ObservableList sender, int i, int i1) {

            }

            @Override
            public void onItemRangeInserted(ObservableList sender, int i, int i1) {

            }

            @Override
            public void onItemRangeMoved(ObservableList sender, int i, int i1, int i2) {

            }

            @Override
            public void onItemRangeRemoved(ObservableList sender, int i, int i1) {
            }
        };
        mObservable.addOnListChangedCallback(mListener);
        mObservable.addOnListChangedCallback(listChangedListener);
        mObservable.add("Hello");
        assertEquals(1, mNotifications.size());
        ListChange change = mNotifications.get(0);
        assertEquals(INSERT, change.change);
        assertEquals(0, change.start);
        assertEquals(1, change.count);
        assertEquals("Hello", mObservable.get(0));
!!!36125751.java!!!	testInsert() : void
        mObservable.addOnListChangedCallback(mListener);
        mObservable.add("Hello");
        mObservable.add(0, "World");
        mObservable.add(1, "Dang");
        mObservable.add(3, "End");
        assertEquals(4, mObservable.size());
        assertEquals("World", mObservable.get(0));
        assertEquals("Dang", mObservable.get(1));
        assertEquals("Hello", mObservable.get(2));
        assertEquals("End", mObservable.get(3));
        assertEquals(4, mNotifications.size());
        ListChange change = mNotifications.get(1);
        assertEquals(INSERT, change.change);
        assertEquals(0, change.start);
        assertEquals(1, change.count);
!!!36125879.java!!!	testAddAll() : void
        ArrayList<String> toAdd = new ArrayList<>();
        toAdd.add("Hello");
        toAdd.add("World");
        mObservable.add("First");
        mObservable.addOnListChangedCallback(mListener);
        mObservable.addAll(toAdd);
        assertEquals(3, mObservable.size());
        assertEquals("Hello", mObservable.get(1));
        assertEquals("World", mObservable.get(2));
        assertEquals(1, mNotifications.size());
        ListChange change = mNotifications.get(0);
        assertEquals(INSERT, change.change);
        assertEquals(1, change.start);
        assertEquals(2, change.count);
!!!36126007.java!!!	testInsertAll() : void
        ArrayList<String> toAdd = new ArrayList<>();
        toAdd.add("Hello");
        toAdd.add("World");
        mObservable.add("First");
        mObservable.addOnListChangedCallback(mListener);
        mObservable.addAll(0, toAdd);
        assertEquals(3, mObservable.size());
        assertEquals("Hello", mObservable.get(0));
        assertEquals("World", mObservable.get(1));
        assertEquals(1, mNotifications.size());
        ListChange change = mNotifications.get(0);
        assertEquals(INSERT, change.change);
        assertEquals(0, change.start);
        assertEquals(2, change.count);
!!!36126135.java!!!	testClear() : void
        mObservable.add("Hello");
        mObservable.add("World");
        mObservable.addOnListChangedCallback(mListener);
        mObservable.clear();
        assertEquals(1, mNotifications.size());
        ListChange change = mNotifications.get(0);
        assertEquals(REMOVE, change.change);
        assertEquals(0, change.start);
        assertEquals(2, change.count);

        mObservable.clear();
        // No notification when nothing is cleared.
        assertEquals(1, mNotifications.size());
!!!36126263.java!!!	testRemoveIndex() : void
        mObservable.add("Hello");
        mObservable.add("World");
        mObservable.addOnListChangedCallback(mListener);
        assertEquals("Hello", mObservable.remove(0));
        assertEquals(1, mNotifications.size());
        ListChange change = mNotifications.get(0);
        assertEquals(REMOVE, change.change);
        assertEquals(0, change.start);
        assertEquals(1, change.count);
!!!36126391.java!!!	testRemoveObject() : void
        mObservable.add("Hello");
        mObservable.add("World");
        mObservable.addOnListChangedCallback(mListener);
        assertTrue(mObservable.remove("Hello"));
        assertEquals(1, mNotifications.size());
        ListChange change = mNotifications.get(0);
        assertEquals(REMOVE, change.change);
        assertEquals(0, change.start);
        assertEquals(1, change.count);

        assertFalse(mObservable.remove("Hello"));
        // nothing removed, don't notify
        assertEquals(1, mNotifications.size());
!!!36126519.java!!!	testSet() : void
        mObservable.add("Hello");
        mObservable.add("World");
        mObservable.addOnListChangedCallback(mListener);
        assertEquals("Hello", mObservable.set(0, "Goodbye"));
        assertEquals("Goodbye", mObservable.get(0));
        assertEquals(2, mObservable.size());
        ListChange change = mNotifications.get(0);
        assertEquals(CHANGE, change.change);
        assertEquals(0, change.start);
        assertEquals(1, change.count);
