class ObservableArrayMapTest
!!!36126647.java!!!	ObservableArrayMapTest()
        super(BasicBindingBinding.class);
!!!36126775.java!!!	setUp() : void
        mNotifications.clear();
        mObservable = new ObservableArrayMap<>();
!!!36126903.java!!!	testAddListener() : void
        mObservable.put("Hello", "World");
        assertTrue(mNotifications.isEmpty());
        mObservable.addOnMapChangedCallback(mListener);
        mObservable.put("Hello", "Goodbye");
        assertFalse(mNotifications.isEmpty());
!!!36127031.java!!!	testRemoveListener() : void
        // test there is no exception when the listener isn't there
        mObservable.removeOnMapChangedCallback(mListener);

        mObservable.addOnMapChangedCallback(mListener);
        mObservable.put("Hello", "World");
        mNotifications.clear();
        mObservable.removeOnMapChangedCallback(mListener);
        mObservable.put("World", "Hello");
        assertTrue(mNotifications.isEmpty());

        // test there is no exception when the listener isn't there
        mObservable.removeOnMapChangedCallback(mListener);
!!!36127159.java!!!	testClear() : void
        mObservable.put("Hello", "World");
        mObservable.put("World", "Hello");
        mObservable.addOnMapChangedCallback(mListener);
        mObservable.clear();
        assertEquals(1, mNotifications.size());
        assertNull(mNotifications.get(0));
        assertEquals(0, mObservable.size());
        assertTrue(mObservable.isEmpty());

        mObservable.clear();
        // No notification when nothing is cleared.
        assertEquals(1, mNotifications.size());
!!!36127287.java!!!	testPut() : void
        mObservable.addOnMapChangedCallback(mListener);
        mObservable.put("Hello", "World");
        assertEquals(1, mNotifications.size());
        assertEquals("Hello", mNotifications.get(0));
        assertEquals("World", mObservable.get("Hello"));

        mObservable.put("Hello", "World2");
        assertEquals(2, mNotifications.size());
        assertEquals("Hello", mNotifications.get(1));
        assertEquals("World2", mObservable.get("Hello"));

        mObservable.put("World", "Hello");
        assertEquals(3, mNotifications.size());
        assertEquals("World", mNotifications.get(2));
        assertEquals("Hello", mObservable.get("World"));
!!!36127415.java!!!	testPutAll() : void
        Map<String, String> toAdd = new ArrayMap<>();
        toAdd.put("Hello", "World");
        toAdd.put("Goodbye", "Cruel World");
        mObservable.put("Cruel", "World");
        mObservable.addOnMapChangedCallback(mListener);
        mObservable.putAll(toAdd);
        assertEquals(3, mObservable.size());
        assertEquals("World", mObservable.get("Hello"));
        assertEquals("Cruel World", mObservable.get("Goodbye"));
        assertEquals(2, mNotifications.size());
        // order is not guaranteed
        assertTrue(mNotifications.contains("Hello"));
        assertTrue(mNotifications.contains("Goodbye"));
!!!36127543.java!!!	testPutAllSimpleArrayMap() : void
        SimpleArrayMap<String, String> toAdd = new ArrayMap<>();
        toAdd.put("Hello", "World");
        toAdd.put("Goodbye", "Cruel World");
        mObservable.put("Cruel", "World");
        mObservable.addOnMapChangedCallback(mListener);
        mObservable.putAll(toAdd);
        assertEquals(3, mObservable.size());
        assertEquals("World", mObservable.get("Hello"));
        assertEquals("Cruel World", mObservable.get("Goodbye"));
        assertEquals(2, mNotifications.size());
        // order is not guaranteed
        assertTrue(mNotifications.contains("Hello"));
        assertTrue(mNotifications.contains("Goodbye"));
!!!36127671.java!!!	testRemove() : void
        mObservable.put("Hello", "World");
        mObservable.put("Goodbye", "Cruel World");
        mObservable.addOnMapChangedCallback(mListener);
        assertEquals("World", mObservable.remove("Hello"));
        assertEquals(1, mNotifications.size());
        assertEquals("Hello", mNotifications.get(0));

        assertNull(mObservable.remove("Hello"));
        // nothing removed, don't notify
        assertEquals(1, mNotifications.size());
!!!36127799.java!!!	testRemoveAll() : void
        ArrayList<String> toRemove = new ArrayList<>();
        toRemove.add("Hello");
        toRemove.add("Goodbye");
        mObservable.put("Hello", "World");
        mObservable.put("Goodbye", "Cruel World");
        mObservable.put("Cruel", "World");
        mObservable.addOnMapChangedCallback(mListener);
        assertTrue(mObservable.removeAll(toRemove));
        assertEquals(2, mNotifications.size());
        // order is not guaranteed
        assertTrue(mNotifications.contains("Hello"));
        assertTrue(mNotifications.contains("Goodbye"));

        assertTrue(mObservable.containsKey("Cruel"));

        // Test nothing removed
        assertFalse(mObservable.removeAll(toRemove));
        assertEquals(2, mNotifications.size());
!!!36127927.java!!!	testRetainAll() : void
        ArrayList<String> toRetain = new ArrayList<>();
        toRetain.add("Hello");
        toRetain.add("Goodbye");
        mObservable.put("Hello", "World");
        mObservable.put("Goodbye", "Cruel World");
        mObservable.put("Cruel", "World");
        mObservable.addOnMapChangedCallback(mListener);
        assertTrue(mObservable.retainAll(toRetain));
        assertEquals(1, mNotifications.size());
        assertEquals("Cruel", mNotifications.get(0));
        assertTrue(mObservable.containsKey("Hello"));
        assertTrue(mObservable.containsKey("Goodbye"));

        // Test nothing removed
        assertFalse(mObservable.retainAll(toRetain));
        assertEquals(1, mNotifications.size());
!!!36128055.java!!!	testRemoveAt() : void
        mObservable.put("Hello", "World");
        mObservable.put("Goodbye", "Cruel World");
        mObservable.addOnMapChangedCallback(mListener);
        String key = mObservable.keyAt(0);
        String value = mObservable.valueAt(0);
        assertTrue("Hello".equals(key) || "Goodbye".equals(key));
        assertEquals(value, mObservable.removeAt(0));
        assertEquals(1, mNotifications.size());
        assertEquals(key, mNotifications.get(0));
!!!36128183.java!!!	testSetValueAt() : void
        mObservable.put("Hello", "World");
        mObservable.addOnMapChangedCallback(mListener);
        assertEquals("World", mObservable.setValueAt(0, "Cruel World"));
        assertEquals(1, mNotifications.size());
        assertEquals("Hello", mNotifications.get(0));
