class CameraAgent
!!!36191543.java!!!	openCamera(in handler : Handler, in cameraId : int, in callback : CameraAgent::CameraOpenCallback) : void
        try {
            getDispatchThread().runJob(new Runnable() {
                @Override
                public void run() {
                    getCameraHandler().obtainMessage(CameraActions.OPEN_CAMERA, cameraId, 0,
                            CameraOpenCallbackForward.getNewInstance(handler, callback)).sendToTarget();
                }
            });
        } catch (final RuntimeException ex) {
            getCameraExceptionHandler().onDispatchThreadException(ex);
        }
!!!36191671.java!!!	closeCamera(inout camera : CameraAgent::CameraProxy, inout synced : boolean) : void
        try {
            if (synced) {
                // Don't bother to wait since camera is in bad state.
                if (getCameraState().isInvalid()) {
                    return;
                }
                final WaitDoneBundle bundle = new WaitDoneBundle();

                getDispatchThread().runJobSync(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler().obtainMessage(CameraActions.RELEASE).sendToTarget();
                        getCameraHandler().post(bundle.mUnlockRunnable);
                    }}, bundle.mWaitLock, CAMERA_OPERATION_TIMEOUT_MS, "camera release");
            } else {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler().removeCallbacksAndMessages(null);
                        getCameraHandler().obtainMessage(CameraActions.RELEASE).sendToTarget();
                    }});
            }
        } catch (final RuntimeException ex) {
            getCameraExceptionHandler().onDispatchThreadException(ex);
        }
