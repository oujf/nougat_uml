class CameraProxy
!!!36193335.java!!!	reconnect(in handler : Handler, in cb : CameraAgent::CameraOpenCallback) : void
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler().obtainMessage(CameraActions.RECONNECT, getCameraId(), 0,
                                CameraOpenCallbackForward.getNewInstance(handler, cb)).sendToTarget();
                    }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36193463.java!!!	unlock() : void
            // Don't bother to wait since camera is in bad state.
            if (getCameraState().isInvalid()) {
                return;
            }
            final WaitDoneBundle bundle = new WaitDoneBundle();
            try {
                getDispatchThread().runJobSync(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler().sendEmptyMessage(CameraActions.UNLOCK);
                        getCameraHandler().post(bundle.mUnlockRunnable);
                    }
                }, bundle.mWaitLock, CAMERA_OPERATION_TIMEOUT_MS, "camera unlock");
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36193591.java!!!	lock() : void
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler().sendEmptyMessage(CameraActions.LOCK);
                    }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36193719.java!!!	setPreviewTexture(in surfaceTexture : SurfaceTexture) : void
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler()
                                .obtainMessage(CameraActions.SET_PREVIEW_TEXTURE_ASYNC, surfaceTexture)
                                .sendToTarget();
                    }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36193847.java!!!	setPreviewTextureSync(in surfaceTexture : SurfaceTexture) : void
            // Don't bother to wait since camera is in bad state.
            if (getCameraState().isInvalid()) {
                return;
            }
            final WaitDoneBundle bundle = new WaitDoneBundle();
            try {
                getDispatchThread().runJobSync(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler()
                                .obtainMessage(CameraActions.SET_PREVIEW_TEXTURE_ASYNC, surfaceTexture)
                                .sendToTarget();
                        getCameraHandler().post(bundle.mUnlockRunnable);
                    }}, bundle.mWaitLock, CAMERA_OPERATION_TIMEOUT_MS, "set preview texture");
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36193975.java!!!	setPreviewDisplay(in surfaceHolder : SurfaceHolder) : void
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler()
                                .obtainMessage(CameraActions.SET_PREVIEW_DISPLAY_ASYNC, surfaceHolder)
                                .sendToTarget();
                    }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36194103.java!!!	startPreview() : void
            try {
            getDispatchThread().runJob(new Runnable() {
                @Override
                public void run() {
                    getCameraHandler()
                            .obtainMessage(CameraActions.START_PREVIEW_ASYNC, null).sendToTarget();
                }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36194231.java!!!	startPreviewWithCallback(in h : Handler, in cb : CameraAgent::CameraStartPreviewCallback) : void
            try {
            getDispatchThread().runJob(new Runnable() {
                @Override
                public void run() {
                    getCameraHandler().obtainMessage(CameraActions.START_PREVIEW_ASYNC,
                            CameraStartPreviewCallbackForward.getNewInstance(h, cb))
                                    .sendToTarget();
                }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36194359.java!!!	stopPreview() : void
            // Don't bother to wait since camera is in bad state.
            if (getCameraState().isInvalid()) {
                return;
            }
            final WaitDoneBundle bundle = new WaitDoneBundle();
            try {
                getDispatchThread().runJobSync(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler().obtainMessage(CameraActions.STOP_PREVIEW, bundle)
                                .sendToTarget();
                    }}, bundle.mWaitLock, CAMERA_OPERATION_TIMEOUT_MS, "stop preview");
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36194871.java!!!	addCallbackBuffer(in callbackBuffer : byte) : void
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler()
                                .obtainMessage(CameraActions.ADD_CALLBACK_BUFFER, callbackBuffer)
                                .sendToTarget();
                        }
                    });
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36195127.java!!!	cancelAutoFocus() : void
             // Do not use the dispatch thread since we want to avoid a wait-cycle
             // between applySettingsHelper which waits until the state is not FOCUSING.
             // cancelAutoFocus should get executed asap, set the state back to idle.
            getCameraHandler().sendMessageAtFrontOfQueue(
                    getCameraHandler().obtainMessage(CameraActions.CANCEL_AUTO_FOCUS));
            getCameraHandler().sendEmptyMessage(CameraActions.CANCEL_AUTO_FOCUS_FINISH);
!!!36195511.java!!!	setDisplayOrientation(in degrees : int) : void
            setDisplayOrientation(degrees, true);
!!!36195639.java!!!	setDisplayOrientation(in degrees : int, in capture : boolean) : void
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler()
                                .obtainMessage(CameraActions.SET_DISPLAY_ORIENTATION, degrees,
                                        capture ? 1 : 0)
                                .sendToTarget();
                    }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36195767.java!!!	setJpegOrientation(in degrees : int) : void
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler()
                                .obtainMessage(CameraActions.SET_JPEG_ORIENTATION, degrees, 0)
                                .sendToTarget();
                    }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36196151.java!!!	startFaceDetection() : void
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler().sendEmptyMessage(CameraActions.START_FACE_DETECTION);
                    }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36196279.java!!!	stopFaceDetection() : void
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler().sendEmptyMessage(CameraActions.STOP_FACE_DETECTION);
                    }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36196791.java!!!	applySettingsHelper(inout settings : CameraSettings, in statesToAwait : int) : boolean
            if (settings == null) {
                Log.v(TAG, "null argument in applySettings()");
                return false;
            }
            if (!getCapabilities().supports(settings)) {
                Log.w(TAG, "Unsupported settings in applySettings()");
                return false;
            }

            final CameraSettings copyOfSettings = settings.copy();
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        CameraStateHolder cameraState = getCameraState();
                        // Don't bother to wait since camera is in bad state.
                        if (cameraState.isInvalid()) {
                            return;
                        }
                        cameraState.waitForStates(statesToAwait);
                        getCameraHandler().obtainMessage(CameraActions.APPLY_SETTINGS, copyOfSettings)
                                .sendToTarget();
                    }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
            return true;
!!!36197047.java!!!	refreshSettings() : void
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler().sendEmptyMessage(CameraActions.REFRESH_PARAMETERS);
                    }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36197175.java!!!	enableShutterSound(in enable : boolean) : void
            try {
                getDispatchThread().runJob(new Runnable() {
                    @Override
                    public void run() {
                        getCameraHandler()
                                .obtainMessage(CameraActions.ENABLE_SHUTTER_SOUND, (enable ? 1 : 0), 0)
                                .sendToTarget();
                    }});
            } catch (final RuntimeException ex) {
                getAgent().getCameraExceptionHandler().onDispatchThreadException(ex);
            }
