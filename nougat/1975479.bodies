class CameraCapabilities
!!!36210743.java!!!	CameraCapabilities(inout stringifier : CameraCapabilities::Stringifier)
        mStringifier = stringifier;
!!!36210871.java!!!	CameraCapabilities(inout src : CameraCapabilities)
        mSupportedPreviewFpsRange.addAll(src.mSupportedPreviewFpsRange);
        mSupportedPreviewSizes.addAll(src.mSupportedPreviewSizes);
        mSupportedPreviewFormats.addAll(src.mSupportedPreviewFormats);
        mSupportedVideoSizes.addAll(src.mSupportedVideoSizes);
        mSupportedPhotoSizes.addAll(src.mSupportedPhotoSizes);
        mSupportedPhotoFormats.addAll(src.mSupportedPhotoFormats);
        mSupportedSceneModes.addAll(src.mSupportedSceneModes);
        mSupportedFlashModes.addAll(src.mSupportedFlashModes);
        mSupportedFocusModes.addAll(src.mSupportedFocusModes);
        mSupportedWhiteBalances.addAll(src.mSupportedWhiteBalances);
        mSupportedFeatures.addAll(src.mSupportedFeatures);
        mPreferredPreviewSizeForVideo = src.mPreferredPreviewSizeForVideo;
        mMaxExposureCompensation = src.mMaxExposureCompensation;
        mMinExposureCompensation = src.mMinExposureCompensation;
        mExposureCompensationStep = src.mExposureCompensationStep;
        mMaxNumOfFacesSupported = src.mMaxNumOfFacesSupported;
        mMaxNumOfFocusAreas = src.mMaxNumOfFocusAreas;
        mMaxNumOfMeteringArea = src.mMaxNumOfMeteringArea;
        mMaxZoomRatio = src.mMaxZoomRatio;
        mHorizontalViewAngle = src.mHorizontalViewAngle;
        mVerticalViewAngle = src.mVerticalViewAngle;
        mStringifier = src.mStringifier;
!!!36210999.java!!!	getHorizontalViewAngle() : float
        return mHorizontalViewAngle;
!!!36211127.java!!!	getVerticalViewAngle() : float
        return mVerticalViewAngle;
!!!36211255.java!!!	getSupportedPhotoFormats() : Set<Integer>
        return new TreeSet<Integer>(mSupportedPhotoFormats);
!!!36211383.java!!!	getSupportedPreviewFormats() : Set<Integer>
        return new TreeSet<Integer>(mSupportedPreviewFormats);
!!!36211511.java!!!	getSupportedPhotoSizes() : Size
        return new ArrayList<Size>(mSupportedPhotoSizes);
!!!36211639.java!!!	getSupportedPreviewFpsRange() : List<int[]>
        return new ArrayList<int[]>(mSupportedPreviewFpsRange);
!!!36211767.java!!!	getSupportedPreviewSizes() : Size
        return new ArrayList<Size>(mSupportedPreviewSizes);
!!!36211895.java!!!	getPreferredPreviewSizeForVideo() : Size
        return new Size(mPreferredPreviewSizeForVideo);
!!!36212023.java!!!	getSupportedVideoSizes() : Size
        return new ArrayList<Size>(mSupportedVideoSizes);
!!!36212151.java!!!	getSupportedSceneModes() : CameraCapabilities::SceneMode
        return new HashSet<SceneMode>(mSupportedSceneModes);
!!!36212279.java!!!	supports(inout scene : CameraCapabilities::SceneMode) : boolean
        return (scene != null && mSupportedSceneModes.contains(scene));
!!!36212407.java!!!	supports(in settings : CameraSettings) : boolean
        if (zoomCheck(settings) && exposureCheck(settings) && focusCheck(settings) &&
                flashCheck(settings) && photoSizeCheck(settings) && previewSizeCheck(settings) &&
                videoStabilizationCheck(settings)) {
            return true;
        }
        return false;
!!!36212535.java!!!	getSupportedFlashModes() : CameraCapabilities::FlashMode
        return new HashSet<FlashMode>(mSupportedFlashModes);
!!!36212663.java!!!	supports(inout flash : CameraCapabilities::FlashMode) : boolean
        return (flash != null && mSupportedFlashModes.contains(flash));
!!!36212791.java!!!	getSupportedFocusModes() : CameraCapabilities::FocusMode
        return new HashSet<FocusMode>(mSupportedFocusModes);
!!!36212919.java!!!	supports(inout focus : CameraCapabilities::FocusMode) : boolean
        return (focus != null && mSupportedFocusModes.contains(focus));
!!!36213047.java!!!	getSupportedWhiteBalance() : CameraCapabilities::WhiteBalance
        return new HashSet<WhiteBalance>(mSupportedWhiteBalances);
!!!36213175.java!!!	supports(inout wb : CameraCapabilities::WhiteBalance) : boolean
        return (wb != null && mSupportedWhiteBalances.contains(wb));
!!!36213303.java!!!	getSupportedFeature() : CameraCapabilities::Feature
        return new HashSet<Feature>(mSupportedFeatures);
!!!36213431.java!!!	supports(inout ft : CameraCapabilities::Feature) : boolean
        return (ft != null && mSupportedFeatures.contains(ft));
!!!36213559.java!!!	getMaxZoomRatio() : float
        return mMaxZoomRatio;
!!!36213687.java!!!	getMinExposureCompensation() : int
        return mMinExposureCompensation;
!!!36213815.java!!!	getMaxExposureCompensation() : int
        return mMaxExposureCompensation;
!!!36213943.java!!!	getExposureCompensationStep() : float
        return mExposureCompensationStep;
!!!36214071.java!!!	getMaxNumOfFacesSupported() : int
        return mMaxNumOfFacesSupported;
!!!36214199.java!!!	getStringifier() : CameraCapabilities::Stringifier
        return mStringifier;
!!!36214327.java!!!	zoomCheck(in settings : CameraSettings) : boolean
        final float ratio = settings.getCurrentZoomRatio();
        if (!supports(Feature.ZOOM)) {
            if (ratio != ZOOM_RATIO_UNZOOMED) {
                Log.v(TAG, "Zoom is not supported");
                return false;
            }
        } else {
            if (settings.getCurrentZoomRatio() > getMaxZoomRatio()) {
                Log.v(TAG, "Zoom ratio is not supported: ratio = " +
                        settings.getCurrentZoomRatio());
                return false;
            }
        }
        return true;
!!!36214455.java!!!	exposureCheck(in settings : CameraSettings) : boolean
        final int index = settings.getExposureCompensationIndex();
        if (index > getMaxExposureCompensation() || index < getMinExposureCompensation()) {
            Log.v(TAG, "Exposure compensation index is not supported. Min = " +
                    getMinExposureCompensation() + ", max = " + getMaxExposureCompensation() + "," +
                    " setting = " + index);
            return false;
        }
        return true;
!!!36214583.java!!!	focusCheck(in settings : CameraSettings) : boolean
        FocusMode focusMode = settings.getCurrentFocusMode();
        if (!supports(focusMode)) {
            if (supports(FocusMode.FIXED)) {
                // Workaround for devices whose templates define defaults they don't really support
                // TODO: Remove workaround (b/17177436)
                Log.w(TAG, "Focus mode not supported... trying FIXED");
                settings.setFocusMode(FocusMode.FIXED);
            } else {
                Log.v(TAG, "Focus mode not supported:" +
                        (focusMode != null ? focusMode.name() : "null"));
                return false;
            }
        }
        return true;
!!!36214711.java!!!	flashCheck(in settings : CameraSettings) : boolean
        FlashMode flashMode = settings.getCurrentFlashMode();
        if (!supports(flashMode)) {
            Log.v(TAG,
                    "Flash mode not supported:" + (flashMode != null ? flashMode.name() : "null"));
            return false;
        }
        return true;
!!!36214839.java!!!	photoSizeCheck(in settings : CameraSettings) : boolean
        Size photoSize = settings.getCurrentPhotoSize();
        if (mSupportedPhotoSizes.contains(photoSize)) {
            return true;
        }
        Log.v(TAG, "Unsupported photo size:" + photoSize);
        return false;
!!!36214967.java!!!	previewSizeCheck(in settings : CameraSettings) : boolean
        final Size previewSize = settings.getCurrentPreviewSize();
        if (mSupportedPreviewSizes.contains(previewSize)) {
            return true;
        }
        Log.v(TAG, "Unsupported preview size:" + previewSize);
        return false;
!!!36215095.java!!!	videoStabilizationCheck(in settings : CameraSettings) : boolean
        if (!settings.isVideoStabilizationEnabled() || supports(Feature.VIDEO_STABILIZATION)) {
            return true;
        }
        Log.v(TAG, "Video stabilization is not supported");
        return false;
