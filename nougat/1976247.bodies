class AndroidCamera2ProxyImpl
!!!36200887.java!!!	AndroidCamera2ProxyImpl(inout agent : AndroidCamera2AgentImpl, in cameraIndex : int, inout camera : CameraDevice, inout characteristics : CameraDeviceInfo::Characteristics, inout properties : CameraCharacteristics)
            mCameraAgent = agent;
            mCameraIndex = cameraIndex;
            mCamera = camera;
            mCharacteristics = characteristics;
            mCapabilities = new AndroidCamera2Capabilities(properties);
            mLastSettings = null;
            mShutterSoundEnabled = true;
!!!36201015.java!!!	getCamera() : Camera
 return null;
!!!36201143.java!!!	getCameraId() : int
            return mCameraIndex;
!!!36201271.java!!!	getCharacteristics() : CameraDeviceInfo::Characteristics
            return mCharacteristics;
!!!36201399.java!!!	getCapabilities() : CameraCapabilities
            return mCapabilities;
!!!36201527.java!!!	getAgent() : CameraAgent
            return mCameraAgent;
!!!36201655.java!!!	getSpecializedCapabilities() : AndroidCamera2Capabilities
            return mCapabilities;
!!!36201783.java!!!	setPreviewTexture(inout surfaceTexture : SurfaceTexture) : void
            // Once the Surface has been selected, we configure the session and
            // are no longer able to change the sizes.
            getSettings().setSizesLocked(true);
            super.setPreviewTexture(surfaceTexture);
!!!36201911.java!!!	setPreviewTextureSync(inout surfaceTexture : SurfaceTexture) : void
            // Once the Surface has been selected, we configure the session and
            // are no longer able to change the sizes.
            getSettings().setSizesLocked(true);
            super.setPreviewTexture(surfaceTexture);
!!!36202551.java!!!	autoFocus(in handler : Handler, in cb : CameraAgent::CameraAFCallback) : void
            try {
                mDispatchThread.runJob(new Runnable() {
                    @Override
                    public void run() {
                        CameraAFCallback cbForward = null;
                        if (cb != null) {
                            cbForward = new CameraAFCallback() {
                                @Override
                                public void onAutoFocus(final boolean focused,
                                                        final CameraProxy camera) {
                                    handler.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            cb.onAutoFocus(focused, camera);
                                        }
                                    });
                                }
                            };
                        }

                        mCameraState.waitForStates(AndroidCamera2StateHolder.CAMERA_PREVIEW_ACTIVE |
                                AndroidCamera2StateHolder.CAMERA_FOCUS_LOCKED);
                        mCameraHandler.obtainMessage(CameraActions.AUTO_FOCUS, cbForward)
                                .sendToTarget();
                    }
                });
            } catch (RuntimeException ex) {
                mCameraAgent.getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36202679.java!!!	setAutoFocusMoveCallback(in handler : Handler, in cb : CameraAgent::CameraAFMoveCallback) : void
            try {
                mDispatchThread.runJob(new Runnable() {
                    @Override
                    public void run() {
                        CameraAFMoveCallback cbForward = null;
                        if (cb != null) {
                            cbForward = new CameraAFMoveCallback() {
                                @Override
                                public void onAutoFocusMoving(final boolean moving,
                                                              final CameraProxy camera) {
                                    handler.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            cb.onAutoFocusMoving(moving, camera);
                                        }
                                    });
                                }
                            };
                        }

                        mCameraHandler.obtainMessage(CameraActions.SET_AUTO_FOCUS_MOVE_CALLBACK,
                                cbForward).sendToTarget();
                    }
                });
            } catch (RuntimeException ex) {
                mCameraAgent.getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36202807.java!!!	takePicture(in handler : Handler, in shutter : CameraAgent::CameraShutterCallback, inout raw : CameraAgent::CameraPictureCallback, inout postview : CameraAgent::CameraPictureCallback, in jpeg : CameraAgent::CameraPictureCallback) : void
            // TODO: We never call raw or postview
            final CaptureAvailableListener picListener =
                    new CaptureAvailableListener() {
                @Override
                public void onCaptureStarted(CameraCaptureSession session, CaptureRequest request,
                                             long timestamp, long frameNumber) {
                    if (shutter != null) {
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                if (mShutterSoundEnabled) {
                                    mNoisemaker.play(MediaActionSound.SHUTTER_CLICK);
                                }
                                shutter.onShutter(AndroidCamera2ProxyImpl.this);
                            }});
                    }
                }

                @Override
                public void onImageAvailable(ImageReader reader) {
                    try (Image image = reader.acquireNextImage()) {
                        if (jpeg != null) {
                            ByteBuffer buffer = image.getPlanes()[0].getBuffer();
                            final byte[] pixels = new byte[buffer.remaining()];
                            buffer.get(pixels);
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    jpeg.onPictureTaken(pixels, AndroidCamera2ProxyImpl.this);
                                }});
                        }
                    }
                }};
            try {
                mDispatchThread.runJob(new Runnable() {
                    @Override
                    public void run() {
                        // Wait until PREVIEW_ACTIVE or better
                        mCameraState.waitForStates(
                                ~(AndroidCamera2StateHolder.CAMERA_PREVIEW_ACTIVE - 1));
                        mCameraHandler.obtainMessage(CameraActions.CAPTURE_PHOTO, picListener)
                                .sendToTarget();
                    }
                });
            } catch (RuntimeException ex) {
                mCameraAgent.getCameraExceptionHandler().onDispatchThreadException(ex);
            }
!!!36203575.java!!!	getParameters() : Camera::Parameters
 return null;
!!!36203703.java!!!	getSettings() : CameraSettings
            if (mLastSettings == null) {
                mLastSettings = mCameraHandler.buildSettings(mCapabilities);
            }
            return mLastSettings;
!!!36203831.java!!!	applySettings(inout settings : CameraSettings) : boolean
            if (settings == null) {
                Log.w(TAG, "null parameters in applySettings()");
                return false;
            }
            if (!(settings instanceof AndroidCamera2Settings)) {
                Log.e(TAG, "Provided settings not compatible with the backing framework API");
                return false;
            }

            // Wait for any state that isn't OPENED
            if (applySettingsHelper(settings, ~AndroidCamera2StateHolder.CAMERA_UNOPENED)) {
                mLastSettings = settings;
                return true;
            }
            return false;
!!!36203959.java!!!	enableShutterSound(inout enable : boolean) : void
            mShutterSoundEnabled = enable;
!!!36204087.java!!!	dumpDeviceSettings() : String
 return null;
!!!36204215.java!!!	getCameraHandler() : Handler
            return AndroidCamera2AgentImpl.this.getCameraHandler();
!!!36204343.java!!!	getDispatchThread() : DispatchThread
            return AndroidCamera2AgentImpl.this.getDispatchThread();
!!!36204471.java!!!	getCameraState() : CameraStateHolder
            return mCameraState;
