class AndroidCharacteristics2
!!!36208439.java!!!	AndroidCharacteristics2(inout cameraInfo : CameraCharacteristics)
                mCameraInfo = cameraInfo;
!!!36208567.java!!!	isFacingBack() : boolean
                return mCameraInfo.get(CameraCharacteristics.LENS_FACING)
                        .equals(CameraCharacteristics.LENS_FACING_BACK);
!!!36208695.java!!!	isFacingFront() : boolean
                return mCameraInfo.get(CameraCharacteristics.LENS_FACING)
                        .equals(CameraCharacteristics.LENS_FACING_FRONT);
!!!36208823.java!!!	getSensorOrientation() : int
                return mCameraInfo.get(CameraCharacteristics.SENSOR_ORIENTATION);
!!!36208951.java!!!	getPreviewTransform(in currentDisplayOrientation : int, inout surfaceDimensions : RectF, inout desiredBounds : RectF) : Matrix
                if (!orientationIsValid(currentDisplayOrientation)) {
                    return new Matrix();
                }

                // The system transparently transforms the image to fill the surface
                // when the device is in its natural orientation. We rotate the
                // coordinates of the rectangle's corners to be relative to the
                // original image, instead of to the current screen orientation.
                float[] surfacePolygon = rotate(convertRectToPoly(surfaceDimensions),
                        2 * currentDisplayOrientation / 90);
                float[] desiredPolygon = convertRectToPoly(desiredBounds);

                Matrix transform = new Matrix();
                // Use polygons instead of rectangles so that rotation will be
                // calculated, since that is not done by the new camera API.
                transform.setPolyToPoly(surfacePolygon, 0, desiredPolygon, 0, 4);
                return transform;
!!!36209079.java!!!	canDisableShutterSound() : boolean
                return true;
!!!36209207.java!!!	convertRectToPoly(inout rf : RectF) : float
                return new float[] {rf.left, rf.top, rf.right, rf.top,
                        rf.right, rf.bottom, rf.left, rf.bottom};
!!!36209335.java!!!	rotate(inout arr : float, in times : int) : float
                if (times < 0) {
                    times = times % arr.length + arr.length;
                }

                float[] res = new float[arr.length];
                for (int offset = 0; offset < arr.length; ++offset) {
                    res[offset] = arr[(times + offset) % arr.length];
                }
                return res;
