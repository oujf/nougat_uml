class Camera2UtilsTest
!!!36257207.java!!!	captureListenerSplitterAllCallbacksReceived(inout splitter : CameraCaptureSession::CaptureCallback, inout  : CaptureCallback...terminals) : void
        splitter.onCaptureCompleted(null, null, null);
        for (CaptureCallback each : terminals) {
            verify(each).onCaptureCompleted(null, null, null);
        }
        splitter.onCaptureFailed(null, null, null);
        for (CaptureCallback each : terminals) {
            verify(each).onCaptureFailed(null, null, null);
        }
        splitter.onCaptureProgressed(null, null, null);
        for (CaptureCallback each : terminals) {
            verify(each).onCaptureProgressed(null, null, null);
        }
        splitter.onCaptureSequenceAborted(null, 0);
        for (CaptureCallback each : terminals) {
            verify(each).onCaptureSequenceAborted(null, 0);
        }
        splitter.onCaptureSequenceCompleted(null, 0, 0L);
        for (CaptureCallback each : terminals) {
            verify(each).onCaptureSequenceCompleted(null, 0, 0L);
        }
        splitter.onCaptureStarted(null, null, 0L, 1L);
        for (CaptureCallback each : terminals) {
            verify(each).onCaptureStarted(null, null, 0L, 1L);
        }
!!!36257335.java!!!	captureListenerSplitter() : void
        CaptureCallback firstBackingListener = mock(CaptureCallback.class);
        CaptureCallback secondBackingListener = mock(CaptureCallback.class);
        captureListenerSplitterAllCallbacksReceived(
                new Camera2CaptureCallbackSplitter(firstBackingListener, secondBackingListener),
                firstBackingListener, secondBackingListener);
!!!36257463.java!!!	captureListenerSplitterEmpty() : void
        captureListenerSplitterAllCallbacksReceived(new Camera2CaptureCallbackSplitter());
!!!36257591.java!!!	captureListenerSplitterNoNpe() : void
        captureListenerSplitterAllCallbacksReceived(
                new Camera2CaptureCallbackSplitter((CaptureCallback) null));
!!!36257719.java!!!	captureListenerSplitterMultipleNulls() : void
        captureListenerSplitterAllCallbacksReceived(
                new Camera2CaptureCallbackSplitter(null, null, null));
!!!36257847.java!!!	captureListenerSplitterValidAndNull() : void
        CaptureCallback onlyRealBackingListener = mock(CaptureCallback.class);
        captureListenerSplitterAllCallbacksReceived(
                new Camera2CaptureCallbackSplitter(null, onlyRealBackingListener),
                onlyRealBackingListener);
!!!36257975.java!!!	requestSettingsSetAndForget(inout s : Camera2RequestSettingsSet, inout k : CaptureRequest::Key, inout v : T) : void
        s.set(k, v);
        assertEquals(v, s.get(k));
!!!36258103.java!!!	requestSettingsSet() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        // Try a boolean
        requestSettingsSetAndForget(setUp, CaptureRequest.CONTROL_AE_LOCK, false);
        requestSettingsSetAndForget(setUp, CaptureRequest.CONTROL_AE_LOCK, true);
        // Try an int
        requestSettingsSetAndForget(setUp, CaptureRequest.CONTROL_AE_MODE, 1);
        requestSettingsSetAndForget(setUp, CaptureRequest.CONTROL_AE_MODE, -1);
        requestSettingsSetAndForget(setUp, CaptureRequest.CONTROL_AE_MODE, 0);
        // Try an int[]
        requestSettingsSetAndForget(setUp, CaptureRequest.SENSOR_TEST_PATTERN_DATA, new int[] {1});
        requestSettingsSetAndForget(setUp, CaptureRequest.SENSOR_TEST_PATTERN_DATA,
                new int[] {2, 2});
!!!36258231.java!!!	requestSettingsSetNullValue() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        requestSettingsSetAndForget(setUp, CaptureRequest.SENSOR_TEST_PATTERN_DATA, new int[] {1});
        requestSettingsSetAndForget(setUp, CaptureRequest.SENSOR_TEST_PATTERN_DATA, null);
        requestSettingsSetAndForget(setUp, CaptureRequest.SENSOR_TEST_PATTERN_DATA,
                new int[] {2, 2});
!!!36258359.java!!!	requestSettingsSetUnsetAndContains() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        assertFalse(setUp.contains(CaptureRequest.CONTROL_AE_LOCK));
        setUp.set(CaptureRequest.CONTROL_AE_LOCK, false);
        assertTrue(setUp.contains(CaptureRequest.CONTROL_AE_LOCK));
        setUp.set(CaptureRequest.CONTROL_AE_LOCK, null);
        assertTrue(setUp.contains(CaptureRequest.CONTROL_AE_LOCK));
        setUp.unset(CaptureRequest.CONTROL_AE_LOCK);
        assertFalse(setUp.contains(CaptureRequest.CONTROL_AE_LOCK));

        setUp.set(CaptureRequest.CONTROL_AE_LOCK, null);
        assertTrue(setUp.contains(CaptureRequest.CONTROL_AE_LOCK));
        setUp.set(CaptureRequest.CONTROL_AE_LOCK, false);
        assertTrue(setUp.contains(CaptureRequest.CONTROL_AE_LOCK));
        setUp.unset(CaptureRequest.CONTROL_AE_LOCK);
        assertFalse(setUp.contains(CaptureRequest.CONTROL_AE_LOCK));
!!!36258487.java!!!	requestSettingsSetStartsWithoutChanges() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        assertEquals(0, setUp.getRevision());
!!!36258615.java!!!	requestSettingsSetAndAssertChanged(inout settings : Camera2RequestSettingsSet, inout key : CaptureRequest::Key, inout value : T, inout shouldHaveChanged : boolean) : void
        long revision = settings.getRevision();
        assertEquals(shouldHaveChanged, settings.set(key, value));
        assertEquals(shouldHaveChanged ? revision + 1 : revision, settings.getRevision());
!!!36258743.java!!!	requestSettingsSetChangesReportedCorrectly() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        requestSettingsSetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, false, true);
        requestSettingsSetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, false, false);
        requestSettingsSetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, true, true);
!!!36258871.java!!!	requestSettingsSetDetectsNoopChanges() : void
        Camera2RequestSettingsSet s = new Camera2RequestSettingsSet();
        int[] one = {1}, two = {2};

        requestSettingsSetAndAssertChanged(s, CaptureRequest.SENSOR_TEST_PATTERN_DATA, one, true);
        requestSettingsSetAndAssertChanged(s, CaptureRequest.SENSOR_TEST_PATTERN_DATA, one, false);

        requestSettingsSetAndAssertChanged(s, CaptureRequest.SENSOR_TEST_PATTERN_DATA, null, true);
        requestSettingsSetAndAssertChanged(s, CaptureRequest.SENSOR_TEST_PATTERN_DATA, null, false);

        requestSettingsSetAndAssertChanged(s, CaptureRequest.SENSOR_TEST_PATTERN_DATA, two, true);
        requestSettingsSetAndAssertChanged(s, CaptureRequest.SENSOR_TEST_PATTERN_DATA, two, false);
!!!36258999.java!!!	requestSettingsUnsetAndAssertChanged(inout settings : Camera2RequestSettingsSet, inout key : CaptureRequest::Key, inout shouldHaveChanged : boolean) : void
        long revision = settings.getRevision();
        assertEquals(shouldHaveChanged, settings.unset(key));
        assertEquals(shouldHaveChanged ? revision + 1 : revision, settings.getRevision());
!!!36259127.java!!!	requestSettingsSetUnsetMakesChangesAndDetectsNoops() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        requestSettingsUnsetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, false);

        requestSettingsSetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, false, true);
        requestSettingsUnsetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, true);

        requestSettingsSetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, false, true);
        requestSettingsSetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, false, false);
        requestSettingsUnsetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, true);
        requestSettingsUnsetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, false);

        requestSettingsSetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, false, true);
        requestSettingsSetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, true, true);
        requestSettingsUnsetAndAssertChanged(setUp, CaptureRequest.CONTROL_AE_LOCK, true);
!!!36259255.java!!!	requestSettingsSetNullArgToCopyConstructor() : void
        Camera2RequestSettingsSet flop = new Camera2RequestSettingsSet(null);
!!!36259383.java!!!	requestSettingsSetNullArgToSetKey() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        setUp.set(null, null);
!!!36259511.java!!!	requestSettingsSetNullArgToUnset() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        setUp.unset(null);
!!!36259639.java!!!	requestSettingsSetNullArgToContains() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        setUp.contains(null);
!!!36259767.java!!!	requestSettingsSetNullArgToGet() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        setUp.get(null);
!!!36259895.java!!!	requestSettingsSetMatchesPrimitives() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        assertTrue(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, null));
        assertFalse(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, false));
        assertFalse(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, true));

        setUp.set(CaptureRequest.CONTROL_AE_LOCK, null);
        assertTrue(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, null));
        assertFalse(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, false));
        assertFalse(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, true));

        setUp.set(CaptureRequest.CONTROL_AE_LOCK, false);
        assertFalse(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, null));
        assertTrue(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, false));
        assertFalse(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, true));

        setUp.set(CaptureRequest.CONTROL_AE_LOCK, true);
        assertFalse(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, null));
        assertFalse(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, false));
        assertTrue(setUp.matches(CaptureRequest.CONTROL_AE_LOCK, true));
!!!36260023.java!!!	requestSettingsSetMatchesReferences() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        assertTrue(setUp.matches(CaptureRequest.SCALER_CROP_REGION, null));
        assertFalse(setUp.matches(CaptureRequest.SCALER_CROP_REGION, new Rect(0, 0, 0, 0)));

        setUp.set(CaptureRequest.SCALER_CROP_REGION, null);
        assertTrue(setUp.matches(CaptureRequest.SCALER_CROP_REGION, null));
        assertFalse(setUp.matches(CaptureRequest.SCALER_CROP_REGION, new Rect(0, 0, 0, 0)));

        setUp.set(CaptureRequest.SCALER_CROP_REGION, new Rect(0, 0, 0, 0));
        assertFalse(setUp.matches(CaptureRequest.SCALER_CROP_REGION, null));
        assertTrue(setUp.matches(CaptureRequest.SCALER_CROP_REGION, new Rect(0, 0, 0, 0)));
        assertFalse(setUp.matches(CaptureRequest.SCALER_CROP_REGION, new Rect(0, 0, 1, 1)));
!!!36260151.java!!!	requestSettingsSetNullArgToCreateRequest0() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        setUp.createRequest(null, CameraDevice.TEMPLATE_PREVIEW);
!!!36260279.java!!!	requestSettingsSetNullArgToCreateRequest2() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        setUp.createRequest(mCamera, CameraDevice.TEMPLATE_PREVIEW, (Surface) null);
!!!36260407.java!!!	requestSettingsSetNullArgToCreateRequest02() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        setUp.createRequest(null, CameraDevice.TEMPLATE_PREVIEW, (Surface) null);
!!!36260535.java!!!	requestSettingsSetNullArgToUnion() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        assertFalse(setUp.union(null));
        assertEquals(0, setUp.getRevision());
!!!36260663.java!!!	requestSettingsSetSelfArgToUnion() : void
        Camera2RequestSettingsSet setUp = new Camera2RequestSettingsSet();
        assertFalse(setUp.union(setUp));
        assertEquals(0, setUp.getRevision());
!!!36260791.java!!!	requestSettingsSetCopyConstructor() : void
        Camera2RequestSettingsSet original = new Camera2RequestSettingsSet();
        Camera2RequestSettingsSet unchanged = new Camera2RequestSettingsSet(original);

        requestSettingsSetAndForget(original, CaptureRequest.CONTROL_AE_LOCK, true);
        Camera2RequestSettingsSet changed = new Camera2RequestSettingsSet(original);
        assertEquals(true, changed.get(CaptureRequest.CONTROL_AE_LOCK));
!!!36260919.java!!!	requestSettingsSetCopyConstructorPreservesChangedStatus() : void
        Camera2RequestSettingsSet original = new Camera2RequestSettingsSet();
        Camera2RequestSettingsSet unchanged = new Camera2RequestSettingsSet(original);
        assertEquals(original.getRevision(), unchanged.getRevision());

        requestSettingsSetAndAssertChanged(original, CaptureRequest.CONTROL_AE_LOCK, true, true);
        Camera2RequestSettingsSet changed = new Camera2RequestSettingsSet(original);
        assertEquals(original.getRevision(), changed.getRevision());
        assertNotSame(original.getRevision(), unchanged.getRevision());
!!!36261047.java!!!	requestSettingsSetCopyConstructorPerformsDeepCopy() : void
        Camera2RequestSettingsSet original = new Camera2RequestSettingsSet();
        requestSettingsSetAndForget(original, CaptureRequest.CONTROL_AE_LOCK, true);

        Camera2RequestSettingsSet changed = new Camera2RequestSettingsSet(original);
        requestSettingsSetAndForget(changed, CaptureRequest.CONTROL_AE_LOCK, false);
        assertEquals(true, original.get(CaptureRequest.CONTROL_AE_LOCK));
!!!36261175.java!!!	requestSettingsSetNullMeansDefault() : void
        Camera2RequestSettingsSet s = new Camera2RequestSettingsSet();
        CaptureRequest r1 = s.createRequest(mCamera, CameraDevice.TEMPLATE_PREVIEW);
        assertEquals((Object) CaptureRequest.CONTROL_CAPTURE_INTENT_PREVIEW,
                r1.get(CaptureRequest.CONTROL_CAPTURE_INTENT));

        requestSettingsSetAndForget(s, CaptureRequest.CONTROL_CAPTURE_INTENT,
                CaptureRequest.CONTROL_CAPTURE_INTENT_STILL_CAPTURE);
        CaptureRequest r2 = s.createRequest(mCamera, CameraDevice.TEMPLATE_PREVIEW);
        assertEquals((Object) CaptureRequest.CONTROL_CAPTURE_INTENT_STILL_CAPTURE,
                r2.get(CaptureRequest.CONTROL_CAPTURE_INTENT));

        requestSettingsSetAndForget(s, CaptureRequest.CONTROL_CAPTURE_INTENT, null);
        CaptureRequest r3 = s.createRequest(mCamera, CameraDevice.TEMPLATE_PREVIEW);
        assertEquals((Object) CaptureRequest.CONTROL_CAPTURE_INTENT_PREVIEW,
                r3.get(CaptureRequest.CONTROL_CAPTURE_INTENT));

        s.unset(CaptureRequest.CONTROL_CAPTURE_INTENT);
        CaptureRequest r4 = s.createRequest(mCamera, CameraDevice.TEMPLATE_PREVIEW);
        assertEquals((Object) CaptureRequest.CONTROL_CAPTURE_INTENT_PREVIEW,
                r4.get(CaptureRequest.CONTROL_CAPTURE_INTENT));
!!!36261303.java!!!	requestSettingsSetNullPreservedByUnions() : void
        Camera2RequestSettingsSet master = new Camera2RequestSettingsSet();
        requestSettingsSetAndForget(master, CaptureRequest.CONTROL_CAPTURE_INTENT,
                CaptureRequest.CONTROL_CAPTURE_INTENT_PREVIEW);

        Camera2RequestSettingsSet slave = new Camera2RequestSettingsSet();
        master.union(slave);
        assertEquals((Object) CaptureRequest.CONTROL_CAPTURE_INTENT_PREVIEW,
                master.get(CaptureRequest.CONTROL_CAPTURE_INTENT));

        requestSettingsSetAndForget(slave, CaptureRequest.CONTROL_CAPTURE_INTENT, null);
        master.union(slave);
        assertEquals(null, master.get(CaptureRequest.CONTROL_CAPTURE_INTENT));

        requestSettingsSetAndForget(slave, CaptureRequest.CONTROL_CAPTURE_INTENT,
                CaptureRequest.CONTROL_CAPTURE_INTENT_STILL_CAPTURE);
        master.union(slave);
        assertEquals((Object) CaptureRequest.CONTROL_CAPTURE_INTENT_STILL_CAPTURE,
                master.get(CaptureRequest.CONTROL_CAPTURE_INTENT));

        slave.unset(CaptureRequest.CONTROL_CAPTURE_INTENT);
        master.union(slave);
        assertEquals((Object) CaptureRequest.CONTROL_CAPTURE_INTENT_STILL_CAPTURE,
                master.get(CaptureRequest.CONTROL_CAPTURE_INTENT));
!!!36261431.java!!!	requestSettingsSetNullChangesRecorded() : void
        Camera2RequestSettingsSet s = new Camera2RequestSettingsSet();
        requestSettingsSetAndAssertChanged(s, CaptureRequest.CONTROL_CAPTURE_INTENT, null, true);
        requestSettingsSetAndAssertChanged(s, CaptureRequest.CONTROL_CAPTURE_INTENT,
                CaptureRequest.CONTROL_CAPTURE_INTENT_PREVIEW, true);
        requestSettingsSetAndAssertChanged(s, CaptureRequest.CONTROL_CAPTURE_INTENT, null, true);
        requestSettingsSetAndAssertChanged(s, CaptureRequest.CONTROL_CAPTURE_INTENT, null, false);
!!!36261559.java!!!	requestSettingsSetUnionChangesRecorded() : void
        Camera2RequestSettingsSet[] sets = { new Camera2RequestSettingsSet(),
                                             new Camera2RequestSettingsSet() };
        sets[0].union(sets[1]);
        assertEquals(1, sets[0].getRevision());
        assertEquals(0, sets[1].getRevision());
!!!36261687.java!!!	requestSettingsSetsCheckPairOfProperties(inout firstSet : Camera2RequestSettingsSet, inout secondSet : Camera2RequestSettingsSet, inout firstKey : CaptureRequest::Key, inout secondKey : CaptureRequest::Key, inout expectedFirstSetFirstValue : T, inout expectedFirstSetSecondValue : T, inout expectedSecondSetFirstValue : T, inout expectedSecondSetSecondValue : T) : void
        assertEquals(expectedFirstSetFirstValue, firstSet.get(firstKey));
        assertEquals(expectedFirstSetSecondValue, firstSet.get(secondKey));
        assertEquals(expectedSecondSetFirstValue, secondSet.get(firstKey));
        assertEquals(expectedSecondSetSecondValue, secondSet.get(secondKey));
!!!36261815.java!!!	requestSettingsSetUnionChangesReflected() : void
        Camera2RequestSettingsSet[] sets = { new Camera2RequestSettingsSet(),
                                             new Camera2RequestSettingsSet() };

        sets[0].set(CaptureRequest.CONTROL_AE_LOCK, true);
        sets[1].set(CaptureRequest.CONTROL_AWB_LOCK, true);
        sets[0].union(sets[1]);
        sets[1].set(CaptureRequest.CONTROL_AE_LOCK, false);
        requestSettingsSetsCheckPairOfProperties(sets[0], sets[1],
                CaptureRequest.CONTROL_AE_LOCK, CaptureRequest.CONTROL_AWB_LOCK,
                true, true, false, true);

        sets[0].union(sets[1]);
        requestSettingsSetsCheckPairOfProperties(sets[0], sets[1],
                CaptureRequest.CONTROL_AE_LOCK, CaptureRequest.CONTROL_AWB_LOCK,
                false, true, false, true);

        sets[1].set(CaptureRequest.CONTROL_AE_LOCK, false);
        sets[1].set(CaptureRequest.CONTROL_AWB_LOCK, false);
        sets[0].union(sets[1]);
        requestSettingsSetsCheckPairOfProperties(sets[0], sets[1],
                CaptureRequest.CONTROL_AE_LOCK, CaptureRequest.CONTROL_AWB_LOCK,
                false, false, false, false);
