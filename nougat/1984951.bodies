class CompositeCursorAdapter
!!!36268343.java!!!	CompositeCursorAdapter(inout context : Context)
        this(context, INITIAL_CAPACITY);
!!!36268471.java!!!	CompositeCursorAdapter(inout context : Context, in initialCapacity : int)
        mContext = context;
        mPartitions = new ArrayList<Partition>();
!!!36268599.java!!!	getContext() : Context
        return mContext;
!!!36268727.java!!!	addPartition(inout showIfEmpty : boolean, inout hasHeader : boolean) : void
        addPartition(new Partition(showIfEmpty, hasHeader));
!!!36268855.java!!!	addPartition(inout partition : CompositeCursorAdapter::Partition) : void
        mPartitions.add(partition);
        invalidate();
        notifyDataSetChanged();
!!!36268983.java!!!	addPartition(in location : int, inout partition : CompositeCursorAdapter::Partition) : void
        mPartitions.add(location, partition);
        invalidate();
        notifyDataSetChanged();
!!!36269111.java!!!	removePartition(in partitionIndex : int) : void
        Cursor cursor = mPartitions.get(partitionIndex).cursor;
        if (cursor != null && !cursor.isClosed()) {
            cursor.close();
        }
        mPartitions.remove(partitionIndex);
        invalidate();
        notifyDataSetChanged();
!!!36269239.java!!!	clearPartitions() : void
        for (Partition partition : mPartitions) {
            partition.cursor = null;
        }
        invalidate();
        notifyDataSetChanged();
!!!36269367.java!!!	close() : void
        for (Partition partition : mPartitions) {
            Cursor cursor = partition.cursor;
            if (cursor != null && !cursor.isClosed()) {
                cursor.close();
            }
        }
        mPartitions.clear();
        invalidate();
        notifyDataSetChanged();
!!!36269495.java!!!	setHasHeader(in partitionIndex : int, inout flag : boolean) : void
        mPartitions.get(partitionIndex).hasHeader = flag;
        invalidate();
!!!36269623.java!!!	setShowIfEmpty(in partitionIndex : int, inout flag : boolean) : void
        mPartitions.get(partitionIndex).showIfEmpty = flag;
        invalidate();
!!!36269751.java!!!	getPartition(in partitionIndex : int) : CompositeCursorAdapter::Partition
        return mPartitions.get(partitionIndex);
!!!36269879.java!!!	invalidate() : void
        mCacheValid = false;
!!!36270007.java!!!	getPartitionCount() : int
        return mPartitions.size();
!!!36270135.java!!!	ensureCacheValid() : void
        if (mCacheValid) {
            return;
        }

        mCount = 0;
        for (Partition partition : mPartitions) {
            Cursor cursor = partition.cursor;
            int count;
            if (cursor == null || cursor.isClosed()) {
                count = 0;
            } else {
                count = cursor.getCount();
            }
            if (partition.hasHeader) {
                if (count != 0 || partition.showIfEmpty) {
                    count++;
                }
            }
            partition.count = count;
            mCount += count;
        }

        mCacheValid = true;
!!!36270263.java!!!	hasHeader(in partition : int) : boolean
        return mPartitions.get(partition).hasHeader;
!!!36270391.java!!!	getCount() : int
        ensureCacheValid();
        return mCount;
!!!36270519.java!!!	getCursor(in partition : int) : Cursor
        return mPartitions.get(partition).cursor;
!!!36270647.java!!!	changeCursor(in partition : int, inout cursor : Cursor) : void
        Cursor prevCursor = mPartitions.get(partition).cursor;
        if (prevCursor != cursor) {
            if (prevCursor != null && !prevCursor.isClosed()) {
                prevCursor.close();
            }
            mPartitions.get(partition).cursor = cursor;
            if (cursor != null && !cursor.isClosed()) {
                mPartitions.get(partition).idColumnIndex = cursor.getColumnIndex("_id");
            }
            invalidate();
            notifyDataSetChanged();
        }
!!!36270775.java!!!	isPartitionEmpty(in partition : int) : boolean
        Cursor cursor = mPartitions.get(partition).cursor;
        return cursor == null || cursor.isClosed() || cursor.getCount() == 0;
!!!36270903.java!!!	getPartitionForPosition(in position : int) : int
        ensureCacheValid();
        int start = 0;
        for (int i = 0, n = mPartitions.size(); i < n; i++) {
            int end = start + mPartitions.get(i).count;
            if (position >= start && position < end) {
                return i;
            }
            start = end;
        }
        return -1;
!!!36271031.java!!!	getOffsetInPartition(in position : int) : int
        ensureCacheValid();
        int start = 0;
        for (Partition partition : mPartitions) {
            int end = start + partition.count;
            if (position >= start && position < end) {
                int offset = position - start;
                if (partition.hasHeader) {
                    offset--;
                }
                return offset;
            }
            start = end;
        }
        return -1;
!!!36271159.java!!!	getPositionForPartition(in partition : int) : int
        ensureCacheValid();
        int position = 0;
        for (int i = 0; i < partition; i++) {
            position += mPartitions.get(i).count;
        }
        return position;
!!!36271287.java!!!	getViewTypeCount() : int
        return getItemViewTypeCount() + 1;
!!!36271415.java!!!	getItemViewTypeCount() : int
        return 1;
!!!36271543.java!!!	getItemViewType(in partition : int, in position : int) : int
        return 1;
!!!36271671.java!!!	getItemViewType(in position : int) : int
        ensureCacheValid();
        int start = 0;
        for (int i = 0, n = mPartitions.size(); i < n; i++) {
            int end = start  + mPartitions.get(i).count;
            if (position >= start && position < end) {
                int offset = position - start;
                if (mPartitions.get(i).hasHeader) {
                    offset--;
                }
                if (offset == -1) {
                    return IGNORE_ITEM_VIEW_TYPE;
                } else {
                    return getItemViewType(i, offset);
                }
            }
            start = end;
        }

        throw new ArrayIndexOutOfBoundsException(position);
!!!36271799.java!!!	getView(in position : int, inout convertView : View, inout parent : ViewGroup) : View
        ensureCacheValid();
        int start = 0;
        for (int i = 0, n = mPartitions.size(); i < n; i++) {
            int end = start + mPartitions.get(i).count;
            if (position >= start && position < end) {
                int offset = position - start;
                if (mPartitions.get(i).hasHeader) {
                    offset--;
                }
                View view;
                if (offset == -1) {
                    view = getHeaderView(i, mPartitions.get(i).cursor, convertView, parent);
                } else {
                    if (!mPartitions.get(i).cursor.moveToPosition(offset)) {
                        throw new IllegalStateException("Couldn't move cursor to position "
                                + offset);
                    }
                    view = getView(i, mPartitions.get(i).cursor, offset, convertView, parent);
                }
                if (view == null) {
                    throw new NullPointerException("View should not be null, partition: " + i
                            + " position: " + offset);
                }
                return view;
            }
            start = end;
        }

        throw new ArrayIndexOutOfBoundsException(position);
!!!36271927.java!!!	getHeaderView(in partition : int, inout cursor : Cursor, inout convertView : View, inout parent : ViewGroup) : View
        View view = convertView != null
                ? convertView
                : newHeaderView(mContext, partition, cursor, parent);
        bindHeaderView(view, partition, cursor);
        return view;
!!!36272055.java!!!	newHeaderView(inout context : Context, in partition : int, inout cursor : Cursor, inout parent : ViewGroup) : View
        return null;
!!!36272311.java!!!	getView(in partition : int, inout cursor : Cursor, in position : int, inout convertView : View, inout parent : ViewGroup) : View
        View view;
        if (convertView != null) {
            view = convertView;
        } else {
            view = newView(mContext, partition, cursor, position, parent);
        }
        bindView(view, partition, cursor, position);
        return view;
!!!36272695.java!!!	getItem(in position : int) : Object
        ensureCacheValid();
        int start = 0;
        for (Partition mPartition : mPartitions) {
            int end = start + mPartition.count;
            if (position >= start && position < end) {
                int offset = position - start;
                if (mPartition.hasHeader) {
                    offset--;
                }
                if (offset == -1) {
                    return null;
                }
                Cursor cursor = mPartition.cursor;
                if (cursor == null || cursor.isClosed() || !cursor.moveToPosition(offset)) {
                    return null;
                }
                return cursor;
            }
            start = end;
        }

        return null;
!!!36272823.java!!!	getItemId(in position : int) : long
        ensureCacheValid();
        int start = 0;
        for (Partition mPartition : mPartitions) {
            int end = start + mPartition.count;
            if (position >= start && position < end) {
                int offset = position - start;
                if (mPartition.hasHeader) {
                    offset--;
                }
                if (offset == -1) {
                    return 0;
                }
                if (mPartition.idColumnIndex == -1) {
                    return 0;
                }

                Cursor cursor = mPartition.cursor;
                if (cursor == null || cursor.isClosed() || !cursor.moveToPosition(offset)) {
                    return 0;
                }
                return cursor.getLong(mPartition.idColumnIndex);
            }
            start = end;
        }

        return 0;
!!!36272951.java!!!	areAllItemsEnabled() : boolean
        for (Partition mPartition : mPartitions) {
            if (mPartition.hasHeader) {
                return false;
            }
        }
        return true;
!!!36273079.java!!!	isEnabled(in position : int) : boolean
        ensureCacheValid();
        int start = 0;
        for (int i = 0, n = mPartitions.size(); i < n; i++) {
            int end = start + mPartitions.get(i).count;
            if (position >= start && position < end) {
                int offset = position - start;
                if (mPartitions.get(i).hasHeader && offset == 0) {
                    return false;
                } else {
                    return isEnabled(i, offset);
                }
            }
            start = end;
        }

        return false;
!!!36273207.java!!!	isEnabled(in partition : int, in position : int) : boolean
        return true;
!!!36273335.java!!!	setNotificationsEnabled(inout flag : boolean) : void
        mNotificationsEnabled = flag;
        if (flag && mNotificationNeeded) {
            notifyDataSetChanged();
        }
!!!36273463.java!!!	notifyDataSetChanged() : void
        if (mNotificationsEnabled) {
            mNotificationNeeded = false;
            super.notifyDataSetChanged();
        } else {
            mNotificationNeeded = true;
        }
