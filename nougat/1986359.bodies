class SQLiteContentProvider
!!!36279479.java!!!	getMaxOperationsPerYield() : int
        return MAX_OPERATIONS_PER_YIELD_POINT;
!!!36279607.java!!!	onCreate() : boolean
        Context context = getContext();
        mOpenHelper = getDatabaseHelper(context);
        return true;
!!!36280375.java!!!	getDatabaseHelper() : SQLiteOpenHelper
        return mOpenHelper;
!!!36280503.java!!!	applyingBatch() : boolean
        return mApplyingBatch.get() != null && mApplyingBatch.get();
!!!36280631.java!!!	insert(inout uri : Uri, inout values : ContentValues) : Uri
        Uri result = null;
        boolean applyingBatch = applyingBatch();
        if (!applyingBatch) {
            mDb = mOpenHelper.getWritableDatabase();
            mDb.beginTransactionWithListener(this);
            try {
                result = insertInTransaction(uri, values);
                if (result != null) {
                    mNotifyChange = true;
                }
                mDb.setTransactionSuccessful();
            } finally {
                mDb.endTransaction();
            }

            onEndTransaction();
        } else {
            result = insertInTransaction(uri, values);
            if (result != null) {
                mNotifyChange = true;
            }
        }
        return result;
!!!36280759.java!!!	bulkInsert(inout uri : Uri, inout values : ContentValues) : int
        int numValues = values.length;
        mDb = mOpenHelper.getWritableDatabase();
        mDb.beginTransactionWithListener(this);
        try {
            for (int i = 0; i < numValues; i++) {
                Uri result = insertInTransaction(uri, values[i]);
                if (result != null) {
                    mNotifyChange = true;
                }
                boolean savedNotifyChange = mNotifyChange;
                SQLiteDatabase savedDb = mDb;
                mDb.yieldIfContendedSafely();
                mDb = savedDb;
                mNotifyChange = savedNotifyChange;
            }
            mDb.setTransactionSuccessful();
        } finally {
            mDb.endTransaction();
        }

        onEndTransaction();
        return numValues;
!!!36280887.java!!!	update(inout uri : Uri, inout values : ContentValues, inout selection : String, inout selectionArgs : String) : int
        int count = 0;
        boolean applyingBatch = applyingBatch();
        if (!applyingBatch) {
            mDb = mOpenHelper.getWritableDatabase();
            mDb.beginTransactionWithListener(this);
            try {
                count = updateInTransaction(uri, values, selection, selectionArgs);
                if (count > 0) {
                    mNotifyChange = true;
                }
                mDb.setTransactionSuccessful();
            } finally {
                mDb.endTransaction();
            }

            onEndTransaction();
        } else {
            count = updateInTransaction(uri, values, selection, selectionArgs);
            if (count > 0) {
                mNotifyChange = true;
            }
        }

        return count;
!!!36281015.java!!!	delete(inout uri : Uri, inout selection : String, inout selectionArgs : String) : int
        int count = 0;
        boolean applyingBatch = applyingBatch();
        if (!applyingBatch) {
            mDb = mOpenHelper.getWritableDatabase();
            mDb.beginTransactionWithListener(this);
            try {
                count = deleteInTransaction(uri, selection, selectionArgs);
                if (count > 0) {
                    mNotifyChange = true;
                }
                mDb.setTransactionSuccessful();
            } finally {
                mDb.endTransaction();
            }

            onEndTransaction();
        } else {
            count = deleteInTransaction(uri, selection, selectionArgs);
            if (count > 0) {
                mNotifyChange = true;
            }
        }
        return count;
!!!36281143.java!!!	applyBatch(inout operations : ArrayList<ContentProviderOperation>) : ContentProviderResult
        int ypCount = 0;
        int opCount = 0;
        mDb = mOpenHelper.getWritableDatabase();
        mDb.beginTransactionWithListener(this);
        try {
            mApplyingBatch.set(true);
            final int numOperations = operations.size();
            final ContentProviderResult[] results = new ContentProviderResult[numOperations];
            for (int i = 0; i < numOperations; i++) {
                if (++opCount > getMaxOperationsPerYield()) {
                    throw new OperationApplicationException(
                            "Too many content provider operations between yield points. "
                                    + "The maximum number of operations per yield point is "
                                    + MAX_OPERATIONS_PER_YIELD_POINT, ypCount);
                }
                final ContentProviderOperation operation = operations.get(i);
                if (i > 0 && operation.isYieldAllowed()) {
                    opCount = 0;
                    boolean savedNotifyChange = mNotifyChange;
                    if (mDb.yieldIfContendedSafely(SLEEP_AFTER_YIELD_DELAY)) {
                        mDb = mOpenHelper.getWritableDatabase();
                        mNotifyChange = savedNotifyChange;
                        ypCount++;
                    }
                }

                results[i] = operation.apply(this, results, i);
            }
            mDb.setTransactionSuccessful();
            return results;
        } finally {
            mApplyingBatch.set(false);
            mDb.endTransaction();
            onEndTransaction();
        }
!!!36281271.java!!!	onBegin() : void
        onBeginTransaction();
!!!36281399.java!!!	onCommit() : void
        beforeTransactionCommit();
!!!36281527.java!!!	onRollback() : void
        // not used
!!!36281911.java!!!	onEndTransaction() : void
        if (mNotifyChange) {
            mNotifyChange = false;
            notifyChange();
        }
