class EditStyledText
!!!36287159.java!!!	EditStyledText(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
        init();
!!!36287287.java!!!	EditStyledText(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        init();
!!!36287415.java!!!	EditStyledText(inout context : Context)
        super(context);
        init();
!!!36287543.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        boolean superResult;
        if (event.getAction() == MotionEvent.ACTION_UP) {
            cancelLongPress();
            boolean editting = isEditting();
            // If View is touched but not in Edit Mode, starts Edit Mode.
            if (!editting) {
                onStartEdit();
            }
            int oldSelStart = Selection.getSelectionStart(getText());
            int oldSelEnd = Selection.getSelectionEnd(getText());
            superResult = super.onTouchEvent(event);
            if (isFocused()) {
                // If selection is started, don't open soft key by
                // touching.
                if (getSelectState() == STATE_SELECT_OFF) {
                    if (editting) {
                        mManager.showSoftKey(Selection.getSelectionStart(getText()),
                                Selection.getSelectionEnd(getText()));
                    } else {
                        mManager.showSoftKey(oldSelStart, oldSelEnd);
                    }
                }
            }
            mManager.onCursorMoved();
            mManager.unsetTextComposingMask();
        } else {
            superResult = super.onTouchEvent(event);
        }
        sendOnTouchEvent(event);
        return superResult;
!!!36287671.java!!!	onSaveInstanceState() : Parcelable
        Parcelable superState = super.onSaveInstanceState();
        SavedStyledTextState ss = new SavedStyledTextState(superState);
        ss.mBackgroundColor = mManager.getBackgroundColor();
        return ss;
!!!36287799.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        if (!(state instanceof SavedStyledTextState)) {
            super.onRestoreInstanceState(state);
            return;
        }
        SavedStyledTextState ss = (SavedStyledTextState) state;
        super.onRestoreInstanceState(ss.getSuperState());
        setBackgroundColor(ss.mBackgroundColor);
!!!36287927.java!!!	drawableStateChanged() : void
        super.drawableStateChanged();
        if (mManager != null) {
            mManager.onRefreshStyles();
        }
!!!36288055.java!!!	onTextContextMenuItem(in id : int) : boolean
        boolean selection = getSelectionStart() != getSelectionEnd();
        switch (id) {
            case ID_SELECT_ALL:
                onStartSelectAll();
                return true;
            case ID_START_SELECTING_TEXT:
                onStartSelect();
                mManager.blockSoftKey();
                break;
            case ID_STOP_SELECTING_TEXT:
                onFixSelectedItem();
                break;
            case ID_PASTE:
                onStartPaste();
                return true;
            case ID_COPY:
                if (selection) {
                    onStartCopy();
                } else {
                    mManager.onStartSelectAll(false);
                    onStartCopy();
                }
                return true;
            case ID_CUT:
                if (selection) {
                    onStartCut();
                } else {
                    mManager.onStartSelectAll(false);
                    onStartCut();
                }
                return true;
            case ID_HORIZONTALLINE:
                onInsertHorizontalLine();
                return true;
            case ID_CLEARSTYLES:
                onClearStyles();
                return true;
            case ID_SHOWEDIT:
                onStartEdit();
                return true;
            case ID_HIDEEDIT:
                onEndEdit();
                return true;
        }
        return super.onTextContextMenuItem(id);
!!!36288183.java!!!	onCreateContextMenu(inout menu : ContextMenu) : void
        super.onCreateContextMenu(menu);
        MenuHandler handler = new MenuHandler();
        if (STR_HORIZONTALLINE != null) {
            menu.add(0, ID_HORIZONTALLINE, 0, STR_HORIZONTALLINE).setOnMenuItemClickListener(
                    handler);
        }
        if (isStyledText() && STR_CLEARSTYLES != null) {
            menu.add(0, ID_CLEARSTYLES, 0, STR_CLEARSTYLES)
                    .setOnMenuItemClickListener(handler);
        }
        if (mManager.canPaste()) {
            menu.add(0, ID_PASTE, 0, STR_PASTE)
                    .setOnMenuItemClickListener(handler).setAlphabeticShortcut('v');
        }
!!!36288311.java!!!	onTextChanged(inout text : CharSequence, in start : int, in before : int, in after : int) : void
        // onTextChanged will be called super's constructor.
        if (mManager != null) {
            mManager.updateSpanNextToCursor(getText(), start, before, after);
            mManager.updateSpanPreviousFromCursor(getText(), start, before, after);
            if (after > before) {
                mManager.setTextComposingMask(start, start + after);
            } else if (before < after) {
                mManager.unsetTextComposingMask();
            }
            if (mManager.isWaitInput()) {
                if (after > before) {
                    mManager.onCursorMoved();
                    onFixSelectedItem();
                } else if (after < before) {
                    mManager.onAction(MODE_RESET);
                }
            }
        }
        super.onTextChanged(text, start, before, after);
!!!36288439.java!!!	onCreateInputConnection(inout outAttrs : EditorInfo) : InputConnection
        mInputConnection =
                new StyledTextInputConnection(super.onCreateInputConnection(outAttrs), this);
        return mInputConnection;
!!!36288567.java!!!	onFocusChanged(inout focused : boolean, in direction : int, inout previouslyFocusedRect : Rect) : void
        super.onFocusChanged(focused, direction, previouslyFocusedRect);
        if (focused) {
            onStartEdit();
        } else if (!isButtonsFocused()) {
            onEndEdit();
        }
!!!36288695.java!!!	init() : void
        mConverter = new StyledTextConverter(this, new StyledTextHtmlStandard());
        mDialog = new StyledTextDialog(this);
        mManager = new EditorManager(this, mDialog);
        setMovementMethod(new StyledTextArrowKeyMethod(mManager));
        mDefaultBackground = getBackground();
        requestFocus();
!!!36289463.java!!!	setStyledTextHtmlConverter(inout html : EditStyledText::StyledTextHtmlConverter) : void
        mConverter.setStyledTextHtmlConverter(html);
!!!36290615.java!!!	addEditStyledTextListener(inout estInterface : EditStyledText::EditStyledTextNotifier) : void
        if (mESTNotifiers == null) {
            mESTNotifiers = new ArrayList<EditStyledTextNotifier>();
        }
        mESTNotifiers.add(estInterface);
!!!36290743.java!!!	removeEditStyledTextListener(inout estInterface : EditStyledText::EditStyledTextNotifier) : void
        if (mESTNotifiers != null) {
            int i = mESTNotifiers.indexOf(estInterface);

            if (i > 0) {
                mESTNotifiers.remove(i);
            }
        }
!!!36290871.java!!!	sendOnTouchEvent(inout event : MotionEvent) : void
        if (mESTNotifiers != null) {
            for (EditStyledTextNotifier notifier : mESTNotifiers) {
                notifier.sendOnTouchEvent(event);
            }
        }
!!!36290999.java!!!	isButtonsFocused() : boolean
        boolean retval = false;
        if (mESTNotifiers != null) {
            for (EditStyledTextNotifier notifier : mESTNotifiers) {
                retval |= notifier.isButtonsFocused();
            }
        }
        return retval;
!!!36291127.java!!!	showPreview() : void
        if (mESTNotifiers != null) {
            for (EditStyledTextNotifier notifier : mESTNotifiers) {
                if (notifier.showPreview()) {
                    break;
                }
            }
        }
!!!36291255.java!!!	cancelViewManagers() : void
        if (mESTNotifiers != null) {
            for (EditStyledTextNotifier notifier : mESTNotifiers) {
                notifier.cancelViewManager();
            }
        }
!!!36291383.java!!!	showInsertImageSelectAlertDialog() : void
        if (mESTNotifiers != null) {
            for (EditStyledTextNotifier notifier : mESTNotifiers) {
                if (notifier.showInsertImageSelectAlertDialog()) {
                    break;
                }
            }
        }
!!!36291511.java!!!	showMenuAlertDialog() : void
        if (mESTNotifiers != null) {
            for (EditStyledTextNotifier notifier : mESTNotifiers) {
                if (notifier.showMenuAlertDialog()) {
                    break;
                }
            }
        }
!!!36291639.java!!!	sendHintMessage(in msgId : int) : void
        if (mESTNotifiers != null) {
            for (EditStyledTextNotifier notifier : mESTNotifiers) {
                notifier.sendHintMsg(msgId);
            }
        }
!!!36291767.java!!!	notifyStateChanged(in mode : int, in state : int) : void
        if (mESTNotifiers != null) {
            for (EditStyledTextNotifier notifier : mESTNotifiers) {
                notifier.onStateChanged(mode, state);
            }
        }
!!!36291895.java!!!	onStartEdit() : void
        mManager.onAction(MODE_START_EDIT);
!!!36292023.java!!!	onEndEdit() : void
        mManager.onAction(MODE_END_EDIT);
!!!36292151.java!!!	onResetEdit() : void
        mManager.onAction(MODE_RESET);
!!!36292279.java!!!	onStartCopy() : void
        mManager.onAction(MODE_COPY);
!!!36292407.java!!!	onStartCut() : void
        mManager.onAction(MODE_CUT);
!!!36292535.java!!!	onStartPaste() : void
        mManager.onAction(MODE_PASTE);
!!!36292663.java!!!	onStartSize() : void
        mManager.onAction(MODE_SIZE);
!!!36292791.java!!!	onStartColor() : void
        mManager.onAction(MODE_COLOR);
!!!36292919.java!!!	onStartBackgroundColor() : void
        mManager.onAction(MODE_BGCOLOR);
!!!36293047.java!!!	onStartAlign() : void
        mManager.onAction(MODE_ALIGN);
!!!36293175.java!!!	onStartTelop() : void
        mManager.onAction(MODE_TELOP);
!!!36293303.java!!!	onStartSwing() : void
        mManager.onAction(MODE_SWING);
!!!36293431.java!!!	onStartMarquee() : void
        mManager.onAction(MODE_MARQUEE);
!!!36293559.java!!!	onStartSelect() : void
        mManager.onStartSelect(true);
!!!36293687.java!!!	onStartSelectAll() : void
        mManager.onStartSelectAll(true);
!!!36293815.java!!!	onStartShowPreview() : void
        mManager.onAction(MODE_PREVIEW);
!!!36293943.java!!!	onStartShowMenuAlertDialog() : void
        mManager.onStartShowMenuAlertDialog();
!!!36294071.java!!!	onStartAction(in mode : int, inout notifyStateChanged : boolean) : void
        mManager.onAction(mode, notifyStateChanged);
!!!36294199.java!!!	onFixSelectedItem() : void
        mManager.onFixSelectedItem();
!!!36294327.java!!!	onInsertImage() : void
        mManager.onAction(MODE_IMAGE);
!!!36294455.java!!!	onInsertImage(inout uri : Uri) : void
        mManager.onInsertImage(uri);
!!!36294583.java!!!	onInsertImage(in resId : int) : void
        mManager.onInsertImage(resId);
!!!36294711.java!!!	onInsertHorizontalLine() : void
        mManager.onAction(MODE_HORIZONTALLINE);
!!!36294839.java!!!	onClearStyles() : void
        mManager.onClearStyles();
!!!36294967.java!!!	onBlockSoftKey() : void
        mManager.blockSoftKey();
!!!36295095.java!!!	onUnblockSoftKey() : void
        mManager.unblockSoftKey();
!!!36295223.java!!!	onCancelViewManagers() : void
        mManager.onCancelViewManagers();
!!!36295351.java!!!	onRefreshStyles() : void
        mManager.onRefreshStyles();
!!!36295479.java!!!	onRefreshZeoWidthChar() : void
        mManager.onRefreshZeoWidthChar();
!!!36295607.java!!!	setItemSize(in size : int) : void
        mManager.setItemSize(size, true);
!!!36295735.java!!!	setItemColor(in color : int) : void
        mManager.setItemColor(color, true);
!!!36295863.java!!!	setAlignment(inout align : Layout::Alignment) : void
        mManager.setAlignment(align);
!!!36295991.java!!!	setBackgroundColor(in color : int) : void
        if (color != DEFAULT_TRANSPARENT_COLOR) {
            super.setBackgroundColor(color);
        } else {
            setBackgroundDrawable(mDefaultBackground);
        }
        mManager.setBackgroundColor(color);
        onRefreshStyles();
!!!36296119.java!!!	setMarquee(in marquee : int) : void
        mManager.setMarquee(marquee);
!!!36296247.java!!!	setHtml(inout html : String) : void
        mConverter.SetHtml(html);
!!!36296375.java!!!	setBuilder(inout builder : AlertDialog::Builder) : void
        mDialog.setBuilder(builder);
!!!36296503.java!!!	setColorAlertParams(inout colortitle : CharSequence, inout colornames : CharSequence, inout colorints : CharSequence, inout transparent : CharSequence) : void
        mDialog.setColorAlertParams(colortitle, colornames, colorints, transparent);
!!!36296631.java!!!	setSizeAlertParams(inout sizetitle : CharSequence, inout sizenames : CharSequence, inout sizedisplayints : CharSequence, inout sizesendints : CharSequence) : void
        mDialog.setSizeAlertParams(sizetitle, sizenames, sizedisplayints, sizesendints);
!!!36296759.java!!!	setAlignAlertParams(inout aligntitle : CharSequence, inout alignnames : CharSequence) : void
        mDialog.setAlignAlertParams(aligntitle, alignnames);
!!!36296887.java!!!	setMarqueeAlertParams(inout marqueetitle : CharSequence, inout marqueenames : CharSequence) : void
        mDialog.setMarqueeAlertParams(marqueetitle, marqueenames);
!!!36297015.java!!!	setContextMenuStrings(inout horizontalline : CharSequence, inout clearstyles : CharSequence, inout paste : CharSequence) : void
        STR_HORIZONTALLINE = horizontalline;
        STR_CLEARSTYLES = clearstyles;
        STR_PASTE = paste;
!!!36297143.java!!!	isEditting() : boolean
        return mManager.isEditting();
!!!36297271.java!!!	isStyledText() : boolean
        return mManager.isStyledText();
!!!36297399.java!!!	isSoftKeyBlocked() : boolean
        return mManager.isSoftKeyBlocked();
!!!36297527.java!!!	getEditMode() : int
        return mManager.getEditMode();
!!!36297655.java!!!	getSelectState() : int
        return mManager.getSelectState();
!!!36297783.java!!!	getHtml() : String
        return mConverter.getHtml(true);
!!!36297911.java!!!	getHtml(inout escapeFlag : boolean) : String
        return mConverter.getHtml(escapeFlag);
!!!36298039.java!!!	getHtml(inout uris : ArrayList<Uri>, inout escapeFlag : boolean) : String
        mConverter.getUriArray(uris, getText());
        return mConverter.getHtml(escapeFlag);
!!!36298167.java!!!	getPreviewHtml() : String
        return mConverter.getPreviewHtml();
!!!36298295.java!!!	getBackgroundColor() : int
        return mManager.getBackgroundColor();
!!!36298423.java!!!	getEditStyledTextManager() : EditStyledText::EditorManager
        return mManager;
!!!36298551.java!!!	getForegroundColor(in pos : int) : int
        if (pos < 0 || pos > getText().length()) {
            return DEFAULT_FOREGROUND_COLOR;
        } else {
            ForegroundColorSpan[] spans =
                    getText().getSpans(pos, pos, ForegroundColorSpan.class);
            if (spans.length > 0) {
                return spans[0].getForegroundColor();
            } else {
                return DEFAULT_FOREGROUND_COLOR;
            }
        }
!!!36298679.java!!!	finishComposingText() : void
        if (mInputConnection != null && !mManager.mTextIsFinishedFlag) {
            mInputConnection.finishComposingText();
            mManager.mTextIsFinishedFlag = true;
        }
!!!36298807.java!!!	getPaddingScale() : float
        if (mPaddingScale <= 0) {
            mPaddingScale = getContext().getResources().getDisplayMetrics().density;
        }
        return mPaddingScale;
!!!36298935.java!!!	dipToPx(in dip : int) : int
        if (mPaddingScale <= 0) {
            mPaddingScale = getContext().getResources().getDisplayMetrics().density;
        }
        return (int) ((float) dip * getPaddingScale() + 0.5);
!!!36299063.java!!!	getMaxImageWidthDip() : int
        return MAXIMAGEWIDTHDIP;
!!!36299191.java!!!	getMaxImageWidthPx() : int
        return dipToPx(MAXIMAGEWIDTHDIP);
!!!36299319.java!!!	addAction(in mode : int, inout action : EditStyledText::EditModeActions::EditModeActionBase) : void
        mManager.addAction(mode, action);
!!!36299447.java!!!	addInputExtra(inout create : boolean, inout extra : String) : void
        Bundle bundle = super.getInputExtras(create);
        if (bundle != null) {
            bundle.putBoolean(extra, true);
        }
!!!36299575.java!!!	startSelecting(inout view : View, inout content : Spannable) : void
        content.setSpan(SELECTING, 0, 0, PRESSED);
!!!36299703.java!!!	stopSelecting(inout view : View, inout content : Spannable) : void
        content.removeSpan(SELECTING);
