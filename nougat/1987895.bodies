class EditorManager
!!!36299831.java!!!	EditorManager(inout est : EditStyledText, inout dialog : EditStyledText::StyledTextDialog)
            mEST = est;
            mActions = new EditModeActions(mEST, this, dialog);
            mSkr = new SoftKeyReceiver(mEST);
!!!36299959.java!!!	addAction(in mode : int, inout action : EditStyledText::EditModeActions::EditModeActionBase) : void
            mActions.addAction(mode, action);
!!!36300087.java!!!	onAction(in mode : int) : void
            onAction(mode, true);
!!!36300215.java!!!	onAction(in mode : int, inout notifyStateChanged : boolean) : void
            mActions.onAction(mode);
            if (notifyStateChanged) {
                mEST.notifyStateChanged(mMode, mState);
            }
!!!36300343.java!!!	startEdit() : void
            resetEdit();
            showSoftKey();
!!!36300471.java!!!	onStartSelect(inout notifyStateChanged : boolean) : void
            if (DBG) {
                Log.d(LOG_TAG, "--- onClickSelect");
            }
            mMode = MODE_SELECT;
            if (mState == STATE_SELECT_OFF) {
                mActions.onSelectAction();
            } else {
                unsetSelect();
                mActions.onSelectAction();
            }
            if (notifyStateChanged) {
                mEST.notifyStateChanged(mMode, mState);
            }
!!!36300599.java!!!	onCursorMoved() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- onClickView");
            }
            if (mState == STATE_SELECT_ON || mState == STATE_SELECTED) {
                mActions.onSelectAction();
                mEST.notifyStateChanged(mMode, mState);
            }
!!!36300727.java!!!	onStartSelectAll(inout notifyStateChanged : boolean) : void
            if (DBG) {
                Log.d(LOG_TAG, "--- onClickSelectAll");
            }
            handleSelectAll();
            if (notifyStateChanged) {
                mEST.notifyStateChanged(mMode, mState);
            }
!!!36300855.java!!!	onStartShowMenuAlertDialog() : void
            mActions.onAction(MODE_SHOW_MENU);
            // don't call notify state changed because it have to continue
            // to the next action.
            // mEST.notifyStateChanged(mMode, mState);
!!!36300983.java!!!	onFixSelectedItem() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- onFixSelectedItem");
            }
            fixSelectionAndDoNextAction();
            mEST.notifyStateChanged(mMode, mState);
!!!36301111.java!!!	onInsertImage(inout uri : Uri) : void
            mActions.onAction(MODE_IMAGE, uri);
            mEST.notifyStateChanged(mMode, mState);
!!!36301239.java!!!	onInsertImage(in resId : int) : void
            mActions.onAction(MODE_IMAGE, resId);
            mEST.notifyStateChanged(mMode, mState);
!!!36301367.java!!!	insertImageFromUri(inout uri : Uri) : void
            insertImageSpan(new EditStyledTextSpans.RescalableImageSpan(mEST.getContext(),
                    uri, mEST.getMaxImageWidthPx()), mEST.getSelectionStart());
!!!36301495.java!!!	insertImageFromResId(in resId : int) : void
            insertImageSpan(new EditStyledTextSpans.RescalableImageSpan(mEST.getContext(),
                    resId, mEST.getMaxImageWidthDip()), mEST.getSelectionStart());
!!!36301623.java!!!	insertHorizontalLine() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- onInsertHorizontalLine:");
            }
            int curpos = mEST.getSelectionStart();
            if (curpos > 0 && mEST.getText().charAt(curpos - 1) != '\n') {
                mEST.getText().insert(curpos++, "\n");
            }
            insertImageSpan(
                    new HorizontalLineSpan(0xFF000000, mEST.getWidth(), mEST.getText()),
                    curpos++);
            mEST.getText().insert(curpos++, "\n");
            mEST.setSelection(curpos);
            mEST.notifyStateChanged(mMode, mState);
!!!36301751.java!!!	clearStyles(inout txt : CharSequence) : void
            if (DBG) {
                Log.d("EditStyledText", "--- onClearStyles");
            }
            int len = txt.length();
            if (txt instanceof Editable) {
                Editable editable = (Editable) txt;
                Object[] styles = editable.getSpans(0, len, Object.class);
                for (Object style : styles) {
                    if (style instanceof ParagraphStyle || style instanceof QuoteSpan
                            || style instanceof CharacterStyle
                            && !(style instanceof UnderlineSpan)) {
                        if (style instanceof ImageSpan || style instanceof HorizontalLineSpan) {
                            int start = editable.getSpanStart(style);
                            int end = editable.getSpanEnd(style);
                            editable.replace(start, end, "");
                        }
                        editable.removeSpan(style);
                    }
                }
            }
!!!36301879.java!!!	onClearStyles() : void
            mActions.onAction(MODE_CLEARSTYLES);
!!!36302007.java!!!	onCancelViewManagers() : void
            mActions.onAction(MODE_CANCEL);
!!!36302135.java!!!	clearStyles() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- onClearStyles");
            }
            clearStyles(mEST.getText());
            mEST.setBackgroundDrawable(mEST.mDefaultBackground);
            mBackgroundColor = DEFAULT_TRANSPARENT_COLOR;
            onRefreshZeoWidthChar();
!!!36302263.java!!!	onRefreshZeoWidthChar() : void
            Editable txt = mEST.getText();
            for (int i = 0; i < txt.length(); i++) {
                if (txt.charAt(i) == ZEROWIDTHCHAR) {
                    txt.replace(i, i + 1, "");
                    i--;
                }
            }
!!!36302391.java!!!	onRefreshStyles() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- onRefreshStyles");
            }
            Editable txt = mEST.getText();
            int len = txt.length();
            int width = mEST.getWidth();
            HorizontalLineSpan[] lines = txt.getSpans(0, len, HorizontalLineSpan.class);
            for (HorizontalLineSpan line : lines) {
                line.resetWidth(width);
            }
            MarqueeSpan[] marquees = txt.getSpans(0, len, MarqueeSpan.class);
            for (MarqueeSpan marquee : marquees) {
                marquee.resetColor(mEST.getBackgroundColor());
            }

            if (lines.length > 0) {
                // This is hack, bad needed for renewing View
                // by inserting new line.
                txt.replace(0, 1, "" + txt.charAt(0));
            }
!!!36302519.java!!!	setBackgroundColor(in color : int) : void
            mBackgroundColor = color;
!!!36302647.java!!!	setItemSize(in size : int, inout reset : boolean) : void
            if (DBG) {
                Log.d(LOG_TAG, "--- setItemSize");
            }
            if (isWaitingNextAction()) {
                mSizeWaitInput = size;
            } else if (mState == STATE_SELECTED || mState == STATE_SELECT_FIX) {
                if (size > 0) {
                    changeSizeSelectedText(size);
                }
                if (reset) {
                    resetEdit();
                }
            }
!!!36302775.java!!!	setItemColor(in color : int, inout reset : boolean) : void
            if (DBG) {
                Log.d(LOG_TAG, "--- setItemColor");
            }
            if (isWaitingNextAction()) {
                mColorWaitInput = color;
            } else if (mState == STATE_SELECTED || mState == STATE_SELECT_FIX) {
                if (color != DEFAULT_TRANSPARENT_COLOR) {
                    changeColorSelectedText(color);
                }
                if (reset) {
                    resetEdit();
                }
            }
!!!36302903.java!!!	setAlignment(inout align : Layout::Alignment) : void
            if (mState == STATE_SELECTED || mState == STATE_SELECT_FIX) {
                changeAlign(align);
                resetEdit();
            }
!!!36303031.java!!!	setTelop() : void
            if (mState == STATE_SELECTED || mState == STATE_SELECT_FIX) {
                addTelop();
                resetEdit();
            }
!!!36303159.java!!!	setSwing() : void
            if (mState == STATE_SELECTED || mState == STATE_SELECT_FIX) {
                addSwing();
                resetEdit();
            }
!!!36303287.java!!!	setMarquee(in marquee : int) : void
            if (mState == STATE_SELECTED || mState == STATE_SELECT_FIX) {
                addMarquee(marquee);
                resetEdit();
            }
!!!36303415.java!!!	setTextComposingMask(in start : int, in end : int) : void
            if (DBG) {
                Log.d(TAG, "--- setTextComposingMask:" + start + "," + end);
            }
            int min = Math.min(start, end);
            int max = Math.max(start, end);
            int foregroundColor;
            if (isWaitInput() && mColorWaitInput != DEFAULT_TRANSPARENT_COLOR) {
                foregroundColor = mColorWaitInput;
            } else {
                foregroundColor = mEST.getForegroundColor(min);
            }
            int backgroundColor = mEST.getBackgroundColor();
            if (DBG) {
                Log.d(TAG,
                        "--- fg:" + Integer.toHexString(foregroundColor) + ",bg:"
                                + Integer.toHexString(backgroundColor) + "," + isWaitInput()
                                + "," + "," + mMode);
            }
            if (foregroundColor == backgroundColor) {
                int maskColor = 0x80000000 | ~(backgroundColor | 0xFF000000);
                if (mComposingTextMask == null
                        || mComposingTextMask.getBackgroundColor() != maskColor) {
                    mComposingTextMask = new BackgroundColorSpan(maskColor);
                }
                mEST.getText().setSpan(mComposingTextMask, min, max,
                        Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            }
!!!36303543.java!!!	setEditMode(in mode : int) : void
            mMode = mode;
!!!36303671.java!!!	setSelectState(in state : int) : void
            mState = state;
!!!36303799.java!!!	unsetTextComposingMask() : void
            if (DBG) {
                Log.d(TAG, "--- unsetTextComposingMask");
            }
            if (mComposingTextMask != null) {
                mEST.getText().removeSpan(mComposingTextMask);
                mComposingTextMask = null;
            }
!!!36303927.java!!!	isEditting() : boolean
            return mEditFlag;
!!!36304055.java!!!	isStyledText() : boolean
            Editable txt = mEST.getText();
            int len = txt.length();
            if (txt.getSpans(0, len, ParagraphStyle.class).length > 0
                    || txt.getSpans(0, len, QuoteSpan.class).length > 0
                    || txt.getSpans(0, len, CharacterStyle.class).length > 0
                    || mBackgroundColor != DEFAULT_TRANSPARENT_COLOR) {
                return true;
            }
            return false;
!!!36304183.java!!!	isSoftKeyBlocked() : boolean
            return mSoftKeyBlockFlag;
!!!36304311.java!!!	isWaitInput() : boolean
            return mWaitInputFlag;
!!!36304439.java!!!	getBackgroundColor() : int
            return mBackgroundColor;
!!!36304567.java!!!	getEditMode() : int
            return mMode;
!!!36304695.java!!!	getSelectState() : int
            return mState;
!!!36304823.java!!!	getSelectionStart() : int
            return mCurStart;
!!!36304951.java!!!	getSelectionEnd() : int
            return mCurEnd;
!!!36305079.java!!!	getSizeWaitInput() : int
            return mSizeWaitInput;
!!!36305207.java!!!	getColorWaitInput() : int
            return mColorWaitInput;
!!!36305335.java!!!	setInternalSelection(in curStart : int, in curEnd : int) : void
            mCurStart = curStart;
            mCurEnd = curEnd;
!!!36305463.java!!!	updateSpanPreviousFromCursor(inout txt : Editable, in start : int, in before : int, in after : int) : void
            if (DBG) {
                Log.d(LOG_TAG, "updateSpanPrevious:" + start + "," + before + "," + after);
            }
            int end = start + after;
            int min = Math.min(start, end);
            int max = Math.max(start, end);
            Object[] spansBefore = txt.getSpans(min, min, Object.class);
            for (Object span : spansBefore) {
                if (span instanceof ForegroundColorSpan || span instanceof AbsoluteSizeSpan
                        || span instanceof MarqueeSpan || span instanceof AlignmentSpan) {
                    int spanstart = txt.getSpanStart(span);
                    int spanend = txt.getSpanEnd(span);
                    if (DBG) {
                        Log.d(LOG_TAG, "spantype:" + span.getClass() + "," + spanstart);
                    }
                    int tempmax = max;
                    if (span instanceof MarqueeSpan || span instanceof AlignmentSpan) {
                        // Line Span
                        tempmax = findLineEnd(mEST.getText(), max);
                    } else {
                        if (mKeepNonLineSpan) {
                            tempmax = spanend;
                        }
                    }
                    if (spanend < tempmax) {
                        if (DBG) {
                            Log.d(LOG_TAG, "updateSpanPrevious: extend span");
                        }
                        txt.setSpan(span, spanstart, tempmax,
                                Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
                    }
                } else if (span instanceof HorizontalLineSpan) {
                    int spanstart = txt.getSpanStart(span);
                    int spanend = txt.getSpanEnd(span);
                    if (before > after) {
                        // When text is deleted just after horizontalLineSpan, horizontalLineSpan
                        // has to be deleted, because the charactor just after horizontalLineSpan
                        // is '\n'.
                        txt.replace(spanstart, spanend, "");
                        txt.removeSpan(span);
                    } else {
                        // When text is added just after horizontalLineSpan add '\n' just after
                        // horizontalLineSpan.
                        if (spanend == end && end < txt.length()
                                && mEST.getText().charAt(end) != '\n') {
                            mEST.getText().insert(end, "\n");
                        }
                    }
                }
            }
!!!36305591.java!!!	updateSpanNextToCursor(inout txt : Editable, in start : int, in before : int, in after : int) : void
            if (DBG) {
                Log.d(LOG_TAG, "updateSpanNext:" + start + "," + before + "," + after);
            }
            int end = start + after;
            int min = Math.min(start, end);
            int max = Math.max(start, end);
            Object[] spansAfter = txt.getSpans(max, max, Object.class);
            for (Object span : spansAfter) {
                if (span instanceof MarqueeSpan || span instanceof AlignmentSpan) {
                    int spanstart = txt.getSpanStart(span);
                    int spanend = txt.getSpanEnd(span);
                    if (DBG) {
                        Log.d(LOG_TAG, "spantype:" + span.getClass() + "," + spanend);
                    }
                    int tempmin = min;
                    if (span instanceof MarqueeSpan || span instanceof AlignmentSpan) {
                        tempmin = findLineStart(mEST.getText(), min);
                    }
                    if (tempmin < spanstart && before > after) {
                        txt.removeSpan(span);
                    } else if (spanstart > min) {
                        txt.setSpan(span, min, spanend, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
                    }
                } else if (span instanceof HorizontalLineSpan) {
                    int spanstart = txt.getSpanStart(span);
                    // Whene text is changed just before horizontalLineSpan and there is no '\n'
                    // just before horizontalLineSpan add '\n'
                    if (spanstart == end && end > 0 && mEST.getText().charAt(end - 1) != '\n') {
                        mEST.getText().insert(end, "\n");
                        mEST.setSelection(end);
                    }
                }
            }
!!!36305719.java!!!	canPaste() : boolean
            return (mCopyBuffer != null && mCopyBuffer.length() > 0 && removeImageChar(
                    mCopyBuffer).length() == 0);
!!!36305847.java!!!	endEdit() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- handleCancel");
            }
            mMode = MODE_NOTHING;
            mState = STATE_SELECT_OFF;
            mEditFlag = false;
            mColorWaitInput = DEFAULT_TRANSPARENT_COLOR;
            mSizeWaitInput = 0;
            mWaitInputFlag = false;
            mSoftKeyBlockFlag = false;
            mKeepNonLineSpan = false;
            mTextIsFinishedFlag = false;
            unsetSelect();
            mEST.setOnClickListener(null);
            unblockSoftKey();
!!!36305975.java!!!	fixSelectionAndDoNextAction() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- handleComplete:" + mCurStart + "," + mCurEnd);
            }
            if (!mEditFlag) {
                return;
            }
            if (mCurStart == mCurEnd) {
                if (DBG) {
                    Log.d(LOG_TAG, "--- cancel handle complete:" + mCurStart);
                }
                resetEdit();
                return;
            }
            if (mState == STATE_SELECTED) {
                mState = STATE_SELECT_FIX;
            }
            // When the complete button is clicked, this should do action.
            mActions.doNext(mMode);
            //MetaKeyKeyListener.stopSelecting(mEST, mEST.getText());
            stopSelecting(mEST, mEST.getText());
!!!36306103.java!!!	removeImageChar(inout text : SpannableStringBuilder) : SpannableStringBuilder
            SpannableStringBuilder buf = new SpannableStringBuilder(text);
            DynamicDrawableSpan[] styles =
                    buf.getSpans(0, buf.length(), DynamicDrawableSpan.class);
            for (DynamicDrawableSpan style : styles) {
                if (style instanceof HorizontalLineSpan
                        || style instanceof RescalableImageSpan) {
                    int start = buf.getSpanStart(style);
                    int end = buf.getSpanEnd(style);
                    buf.replace(start, end, "");
                }
            }
            return buf;
!!!36306231.java!!!	copyToClipBoard() : void
            int min = Math.min(getSelectionStart(), getSelectionEnd());
            int max = Math.max(getSelectionStart(), getSelectionEnd());
            mCopyBuffer = (SpannableStringBuilder) mEST.getText().subSequence(min, max);
            SpannableStringBuilder clipboardtxt = removeImageChar(mCopyBuffer);
            ClipboardManager clip =
                    (ClipboardManager) getContext()
                            .getSystemService(Context.CLIPBOARD_SERVICE);
            clip.setText(clipboardtxt);
            if (DBG) {
                dumpSpannableString(clipboardtxt);
                dumpSpannableString(mCopyBuffer);
            }
!!!36306359.java!!!	cutToClipBoard() : void
            copyToClipBoard();
            int min = Math.min(getSelectionStart(), getSelectionEnd());
            int max = Math.max(getSelectionStart(), getSelectionEnd());
            mEST.getText().delete(min, max);
!!!36306487.java!!!	isClipBoardChanged(inout clipboardText : CharSequence) : boolean
            if (DBG) {
                Log.d(TAG, "--- isClipBoardChanged:" + clipboardText);
            }
            if (mCopyBuffer == null) {
                return true;
            }
            int len = clipboardText.length();
            CharSequence removedClipBoard = removeImageChar(mCopyBuffer);
            if (DBG) {
                Log.d(TAG, "--- clipBoard:" + len + "," + removedClipBoard + clipboardText);
            }
            if (len != removedClipBoard.length()) {
                return true;
            }
            for (int i = 0; i < len; ++i) {
                if (clipboardText.charAt(i) != removedClipBoard.charAt(i)) {
                    return true;
                }
            }
            return false;
!!!36306615.java!!!	pasteFromClipboard() : void
            int min = Math.min(mEST.getSelectionStart(), mEST.getSelectionEnd());
            int max = Math.max(mEST.getSelectionStart(), mEST.getSelectionEnd());
            // TODO: Find more smart way to set Span to Clipboard.
            Selection.setSelection(mEST.getText(), max);
            ClipboardManager clip =
                    (ClipboardManager) getContext()
                            .getSystemService(Context.CLIPBOARD_SERVICE);
            mKeepNonLineSpan = true;
            mEST.getText().replace(min, max, clip.getText());
            if (!isClipBoardChanged(clip.getText())) {
                if (DBG) {
                    Log.d(TAG, "--- handlePaste: startPasteImage");
                }
                DynamicDrawableSpan[] styles =
                        mCopyBuffer.getSpans(0, mCopyBuffer.length(),
                                DynamicDrawableSpan.class);
                for (DynamicDrawableSpan style : styles) {
                    int start = mCopyBuffer.getSpanStart(style);
                    if (style instanceof HorizontalLineSpan) {
                        insertImageSpan(new HorizontalLineSpan(0xFF000000, mEST.getWidth(),
                                mEST.getText()), min + start);
                    } else if (style instanceof RescalableImageSpan) {
                        insertImageSpan(
                                new RescalableImageSpan(mEST.getContext(),
                                        ((RescalableImageSpan) style).getContentUri(),
                                        mEST.getMaxImageWidthPx()), min + start);
                    }
                }
            }
!!!36306743.java!!!	handleSelectAll() : void
            if (!mEditFlag) {
                return;
            }
            mActions.onAction(MODE_SELECTALL);
!!!36306871.java!!!	selectAll() : void
            Selection.selectAll(mEST.getText());
            mCurStart = mEST.getSelectionStart();
            mCurEnd = mEST.getSelectionEnd();
            mMode = MODE_SELECT;
            mState = STATE_SELECT_FIX;
!!!36306999.java!!!	resetEdit() : void
            endEdit();
            mEditFlag = true;
            mEST.notifyStateChanged(mMode, mState);
!!!36307127.java!!!	setSelection() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- onSelect:" + mCurStart + "," + mCurEnd);
            }
            if (mCurStart >= 0 && mCurStart <= mEST.getText().length() && mCurEnd >= 0
                    && mCurEnd <= mEST.getText().length()) {
                if (mCurStart < mCurEnd) {
                    mEST.setSelection(mCurStart, mCurEnd);
                    mState = STATE_SELECTED;
                } else if (mCurStart > mCurEnd) {
                    mEST.setSelection(mCurEnd, mCurStart);
                    mState = STATE_SELECTED;
                } else {
                    mState = STATE_SELECT_ON;
                }
            } else {
                Log.e(LOG_TAG, "Select is on, but cursor positions are illigal.:"
                        + mEST.getText().length() + "," + mCurStart + "," + mCurEnd);
            }
!!!36307255.java!!!	unsetSelect() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- offSelect");
            }
            //MetaKeyKeyListener.stopSelecting(mEST, mEST.getText());
            stopSelecting(mEST, mEST.getText());
            int currpos = mEST.getSelectionStart();
            mEST.setSelection(currpos, currpos);
            mState = STATE_SELECT_OFF;
!!!36307383.java!!!	setSelectStartPos() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- setSelectStartPos");
            }
            mCurStart = mEST.getSelectionStart();
            mState = STATE_SELECT_ON;
!!!36307511.java!!!	setSelectEndPos() : void
            if (mEST.getSelectionEnd() == mCurStart) {
                setEndPos(mEST.getSelectionStart());
            } else {
                setEndPos(mEST.getSelectionEnd());
            }
!!!36307639.java!!!	setEndPos(in pos : int) : void
            if (DBG) {
                Log.d(LOG_TAG, "--- setSelectedEndPos:" + pos);
            }
            mCurEnd = pos;
            setSelection();
!!!36307767.java!!!	isWaitingNextAction() : boolean
            if (DBG) {
                Log.d(LOG_TAG, "--- waitingNext:" + mCurStart + "," + mCurEnd + "," + mState);
            }
            if (mCurStart == mCurEnd && mState == STATE_SELECT_FIX) {
                waitSelection();
                return true;
            } else {
                resumeSelection();
                return false;
            }
!!!36307895.java!!!	waitSelection() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- waitSelection");
            }
            mWaitInputFlag = true;
            if (mCurStart == mCurEnd) {
                mState = STATE_SELECT_ON;
            } else {
                mState = STATE_SELECTED;
            }
            //MetaKeyKeyListener.startSelecting(mEST, mEST.getText());
            startSelecting(mEST, mEST.getText());
!!!36308023.java!!!	resumeSelection() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- resumeSelection");
            }
            mWaitInputFlag = false;
            mState = STATE_SELECT_FIX;
            //MetaKeyKeyListener.stopSelecting(mEST, mEST.getText());
            stopSelecting(mEST, mEST.getText());
!!!36308151.java!!!	isTextSelected() : boolean
            return (mState == STATE_SELECTED || mState == STATE_SELECT_FIX);
!!!36308279.java!!!	setStyledTextSpan(inout span : Object, in start : int, in end : int) : void
            if (DBG) {
                Log.d(LOG_TAG, "--- setStyledTextSpan:" + mMode + "," + start + "," + end);
            }
            int min = Math.min(start, end);
            int max = Math.max(start, end);
            mEST.getText().setSpan(span, min, max, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            Selection.setSelection(mEST.getText(), max);
!!!36308407.java!!!	setLineStyledTextSpan(inout span : Object) : void
            int min = Math.min(mCurStart, mCurEnd);
            int max = Math.max(mCurStart, mCurEnd);
            int current = mEST.getSelectionStart();
            int start = findLineStart(mEST.getText(), min);
            int end = findLineEnd(mEST.getText(), max);
            if (start == end) {
                mEST.getText().insert(end, "\n");
                setStyledTextSpan(span, start, end + 1);
            } else {
                setStyledTextSpan(span, start, end);
            }
            Selection.setSelection(mEST.getText(), current);
!!!36308535.java!!!	changeSizeSelectedText(in size : int) : void
            if (mCurStart != mCurEnd) {
                setStyledTextSpan(new AbsoluteSizeSpan(size), mCurStart, mCurEnd);
            } else {
                Log.e(LOG_TAG, "---changeSize: Size of the span is zero");
            }
!!!36308663.java!!!	changeColorSelectedText(in color : int) : void
            if (mCurStart != mCurEnd) {
                setStyledTextSpan(new ForegroundColorSpan(color), mCurStart, mCurEnd);
            } else {
                Log.e(LOG_TAG, "---changeColor: Size of the span is zero");
            }
!!!36308791.java!!!	changeAlign(inout align : Layout::Alignment) : void
            setLineStyledTextSpan(new AlignmentSpan.Standard(align));
!!!36308919.java!!!	addTelop() : void
            addMarquee(MarqueeSpan.ALTERNATE);
!!!36309047.java!!!	addSwing() : void
            addMarquee(MarqueeSpan.SCROLL);
!!!36309175.java!!!	addMarquee(in marquee : int) : void
            if (DBG) {
                Log.d(LOG_TAG, "--- addMarquee:" + marquee);
            }
            setLineStyledTextSpan(new MarqueeSpan(marquee, mEST.getBackgroundColor()));
!!!36309303.java!!!	insertImageSpan(inout span : DynamicDrawableSpan, in curpos : int) : void
            if (DBG) {
                Log.d(LOG_TAG, "--- insertImageSpan:");
            }
            if (span != null && span.getDrawable() != null) {
                mEST.getText().insert(curpos, "" + IMAGECHAR);
                mEST.getText().setSpan(span, curpos, curpos + 1,
                        Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
                mEST.notifyStateChanged(mMode, mState);
            } else {
                Log.e(LOG_TAG, "--- insertImageSpan: null span was inserted");
                mEST.sendHintMessage(HINT_MSG_BIG_SIZE_ERROR);
            }
!!!36309431.java!!!	findLineStart(inout text : Editable, in current : int) : int
            int pos = current;
            for (; pos > 0; pos--) {
                if (text.charAt(pos - 1) == '\n') {
                    break;
                }
            }
            if (DBG) {
                Log.d(LOG_TAG, "--- findLineStart:" + current + "," + text.length() + ","
                        + pos);
            }
            return pos;
!!!36309559.java!!!	findLineEnd(inout text : Editable, in current : int) : int
            int pos = current;
            for (; pos < text.length(); pos++) {
                if (text.charAt(pos) == '\n') {
                    pos++;
                    break;
                }
            }
            if (DBG) {
                Log.d(LOG_TAG, "--- findLineEnd:" + current + "," + text.length() + "," + pos);
            }
            return pos;
!!!36309687.java!!!	dumpSpannableString(inout txt : CharSequence) : void
            if (txt instanceof Spannable) {
                Spannable spannable = (Spannable) txt;
                int len = spannable.length();
                if (DBG) {
                    Log.d(TAG, "--- dumpSpannableString, txt:" + spannable + ", len:" + len);
                }
                Object[] styles = spannable.getSpans(0, len, Object.class);
                for (Object style : styles) {
                    if (DBG) {
                        Log.d(TAG,
                                "--- dumpSpannableString, class:" + style + ","
                                        + spannable.getSpanStart(style) + ","
                                        + spannable.getSpanEnd(style) + ","
                                        + spannable.getSpanFlags(style));
                    }
                }
            }
!!!36309815.java!!!	showSoftKey() : void
            showSoftKey(mEST.getSelectionStart(), mEST.getSelectionEnd());
!!!36309943.java!!!	showSoftKey(in oldSelStart : int, in oldSelEnd : int) : void
            if (DBG) {
                Log.d(LOG_TAG, "--- showsoftkey");
            }
            if (!mEST.isFocused() || isSoftKeyBlocked()) {
                return;
            }
            mSkr.mNewStart = Selection.getSelectionStart(mEST.getText());
            mSkr.mNewEnd = Selection.getSelectionEnd(mEST.getText());
            InputMethodManager imm =
                    (InputMethodManager) getContext().getSystemService(
                            Context.INPUT_METHOD_SERVICE);
            if (imm.showSoftInput(mEST, 0, mSkr) && mSkr != null) {
                Selection.setSelection(getText(), oldSelStart, oldSelEnd);
            }
!!!36310071.java!!!	hideSoftKey() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- hidesoftkey");
            }
            if (!mEST.isFocused()) {
                return;
            }
            mSkr.mNewStart = Selection.getSelectionStart(mEST.getText());
            mSkr.mNewEnd = Selection.getSelectionEnd(mEST.getText());
            InputMethodManager imm =
                    (InputMethodManager) mEST.getContext().getSystemService(
                            Context.INPUT_METHOD_SERVICE);
            imm.hideSoftInputFromWindow(mEST.getWindowToken(), 0, mSkr);
!!!36310199.java!!!	blockSoftKey() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- blockSoftKey:");
            }
            hideSoftKey();
            mSoftKeyBlockFlag = true;
!!!36310327.java!!!	unblockSoftKey() : void
            if (DBG) {
                Log.d(LOG_TAG, "--- unblockSoftKey:");
            }
            mSoftKeyBlockFlag = false;
