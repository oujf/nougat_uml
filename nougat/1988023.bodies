class StyledTextConverter
!!!36311095.java!!!	StyledTextConverter(inout est : EditStyledText, inout html : EditStyledText::StyledTextHtmlConverter)
            mEST = est;
            mHtml = html;
!!!36311223.java!!!	setStyledTextHtmlConverter(inout html : EditStyledText::StyledTextHtmlConverter) : void
            mHtml = html;
!!!36311351.java!!!	getHtml(inout escapeFlag : boolean) : String
            mEST.clearComposingText();
            mEST.onRefreshZeoWidthChar();
            String htmlBody = mHtml.toHtml(mEST.getText(), escapeFlag);
            if (DBG) {
                Log.d(TAG, "--- getHtml:" + htmlBody);
            }
            return htmlBody;
!!!36311479.java!!!	getPreviewHtml() : String
            mEST.clearComposingText();
            mEST.onRefreshZeoWidthChar();
            String html =
                    mHtml.toHtml(mEST.getText(), true, getMaxImageWidthDip(),
                            getPaddingScale());
            int bgColor = mEST.getBackgroundColor();
            html =
                    String.format("<body bgcolor=\"#%02X%02X%02X\">%s</body>",
                            Color.red(bgColor), Color.green(bgColor), Color.blue(bgColor),
                            html);
            if (DBG) {
                Log.d(TAG, "--- getPreviewHtml:" + html + "," + mEST.getWidth());
            }
            return html;
!!!36311607.java!!!	getUriArray(inout uris : ArrayList<Uri>, inout text : Editable) : void
            uris.clear();
            if (DBG) {
                Log.d(TAG, "--- getUriArray:");
            }
            int len = text.length();
            int next;
            for (int i = 0; i < text.length(); i = next) {
                next = text.nextSpanTransition(i, len, ImageSpan.class);
                ImageSpan[] images = text.getSpans(i, next, ImageSpan.class);
                for (int j = 0; j < images.length; j++) {
                    if (DBG) {
                        Log.d(TAG, "--- getUriArray: foundArray" + images[j].getSource());
                    }
                    uris.add(Uri.parse(images[j].getSource()));
                }
            }
!!!36311735.java!!!	SetHtml(inout html : String) : void
            final Spanned spanned = mHtml.fromHtml(html, new Html.ImageGetter() {
                public Drawable getDrawable(String src) {
                    Log.d(TAG, "--- sethtml: src=" + src);
                    if (src.startsWith("content://")) {
                        Uri uri = Uri.parse(src);
                        try {
                            Drawable drawable = null;
                            Bitmap bitmap = null;
                            System.gc();
                            InputStream is =
                                    mEST.getContext().getContentResolver().openInputStream(uri);
                            BitmapFactory.Options opt = new BitmapFactory.Options();
                            opt.inJustDecodeBounds = true;
                            BitmapFactory.decodeStream(is, null, opt);
                            is.close();
                            is =  mEST.getContext().getContentResolver().openInputStream(uri);
                            int width, height;
                            width = opt.outWidth;
                            height = opt.outHeight;
                            if (opt.outWidth > getMaxImageWidthPx()) {
                                width = getMaxImageWidthPx();
                                height = height * getMaxImageWidthPx() / opt.outWidth;
                                Rect padding = new Rect(0, 0, width, height);
                                bitmap = BitmapFactory.decodeStream(is, padding, null);
                            } else {
                                bitmap = BitmapFactory.decodeStream(is);
                            }
                            drawable = new BitmapDrawable(
                                    mEST.getContext().getResources(), bitmap);
                            drawable.setBounds(0, 0, width, height);
                            is.close();
                            return drawable;
                        } catch (Exception e) {
                            Log.e(TAG, "--- set html: Failed to loaded content " + uri, e);
                            return null;
                        } catch (OutOfMemoryError e) {
                            Log.e(TAG, "OutOfMemoryError");
                            mEST.setHint(HINT_MSG_BIG_SIZE_ERROR);

                            return null;
                        }
                    }
                    return null;
                }
            }, null);
            mEST.setText(spanned);
