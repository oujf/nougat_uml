class StyledTextDialog
!!!36312503.java!!!	StyledTextDialog(inout est : EditStyledText)
            mEST = est;
!!!36312631.java!!!	setBuilder(inout builder : AlertDialog::Builder) : void
            mBuilder = builder;
!!!36312759.java!!!	setColorAlertParams(inout colortitle : CharSequence, inout colornames : CharSequence, inout colorInts : CharSequence, inout defaultColorMessage : CharSequence) : void
            mColorTitle = colortitle;
            mColorNames = colornames;
            mColorInts = colorInts;
            mColorDefaultMessage = defaultColorMessage;
!!!36312887.java!!!	setSizeAlertParams(inout sizetitle : CharSequence, inout sizenames : CharSequence, inout sizedisplayints : CharSequence, inout sizesendints : CharSequence) : void
            mSizeTitle = sizetitle;
            mSizeNames = sizenames;
            mSizeDisplayInts = sizedisplayints;
            mSizeSendInts = sizesendints;
!!!36313015.java!!!	setAlignAlertParams(inout aligntitle : CharSequence, inout alignnames : CharSequence) : void
            mAlignTitle = aligntitle;
            mAlignNames = alignnames;
!!!36313143.java!!!	setMarqueeAlertParams(inout marqueetitle : CharSequence, inout marqueenames : CharSequence) : void
            mMarqueeTitle = marqueetitle;
            mMarqueeNames = marqueenames;
!!!36313271.java!!!	checkColorAlertParams() : boolean
            if (DBG) {
                Log.d(TAG, "--- checkParams");
            }
            if (mBuilder == null) {
                Log.e(TAG, "--- builder is null.");
                return false;
            } else if (mColorTitle == null || mColorNames == null || mColorInts == null) {
                Log.e(TAG, "--- color alert params are null.");
                return false;
            } else if (mColorNames.length != mColorInts.length) {
                Log.e(TAG, "--- the length of color alert params are " + "different.");
                return false;
            }
            return true;
!!!36313399.java!!!	checkSizeAlertParams() : boolean
            if (DBG) {
                Log.d(TAG, "--- checkParams");
            }
            if (mBuilder == null) {
                Log.e(TAG, "--- builder is null.");
                return false;
            } else if (mSizeTitle == null || mSizeNames == null || mSizeDisplayInts == null
                    || mSizeSendInts == null) {
                Log.e(TAG, "--- size alert params are null.");
                return false;
            } else if (mSizeNames.length != mSizeDisplayInts.length
                    && mSizeSendInts.length != mSizeDisplayInts.length) {
                Log.e(TAG, "--- the length of size alert params are " + "different.");
                return false;
            }
            return true;
!!!36313527.java!!!	checkAlignAlertParams() : boolean
            if (DBG) {
                Log.d(TAG, "--- checkAlignAlertParams");
            }
            if (mBuilder == null) {
                Log.e(TAG, "--- builder is null.");
                return false;
            } else if (mAlignTitle == null) {
                Log.e(TAG, "--- align alert params are null.");
                return false;
            }
            return true;
!!!36313655.java!!!	checkMarqueeAlertParams() : boolean
            if (DBG) {
                Log.d(TAG, "--- checkMarqueeAlertParams");
            }
            if (mBuilder == null) {
                Log.e(TAG, "--- builder is null.");
                return false;
            } else if (mMarqueeTitle == null) {
                Log.e(TAG, "--- Marquee alert params are null.");
                return false;
            }
            return true;
!!!36313783.java!!!	buildDialogue(inout title : CharSequence, inout names : CharSequence, inout l : DialogInterface::OnClickListener) : void
            mBuilder.setTitle(title);
            mBuilder.setIcon(0);
            mBuilder.setPositiveButton(null, null);
            mBuilder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int which) {
                    mEST.onStartEdit();
                }
            });
            mBuilder.setItems(names, l);
            mBuilder.setView(null);
            mBuilder.setCancelable(true);
            mBuilder.setOnCancelListener(new OnCancelListener() {
                public void onCancel(DialogInterface arg0) {
                    if (DBG) {
                        Log.d(TAG, "--- oncancel");
                    }
                    mEST.onStartEdit();
                }
            });
            mBuilder.show();
!!!36313911.java!!!	buildAndShowColorDialogue(in type : int, inout title : CharSequence, inout colors : int) : void
            final int HORIZONTAL_ELEMENT_NUM = 5;
            final int BUTTON_SIZE = mEST.dipToPx(50);
            final int BUTTON_MERGIN = mEST.dipToPx(2);
            final int BUTTON_PADDING = mEST.dipToPx(15);
            mBuilder.setTitle(title);
            mBuilder.setIcon(0);
            mBuilder.setPositiveButton(null, null);
            mBuilder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int which) {
                    mEST.onStartEdit();
                }
            });
            mBuilder.setItems(null, null);
            LinearLayout verticalLayout = new LinearLayout(mEST.getContext());
            verticalLayout.setOrientation(LinearLayout.VERTICAL);
            verticalLayout.setGravity(Gravity.CENTER_HORIZONTAL);
            verticalLayout.setPadding(BUTTON_PADDING, BUTTON_PADDING, BUTTON_PADDING,
                    BUTTON_PADDING);
            LinearLayout horizontalLayout = null;
            for (int i = 0; i < colors.length; i++) {
                if (i % HORIZONTAL_ELEMENT_NUM == 0) {
                    horizontalLayout = new LinearLayout(mEST.getContext());
                    verticalLayout.addView(horizontalLayout);
                }
                Button button = new Button(mEST.getContext());
                button.setHeight(BUTTON_SIZE);
                button.setWidth(BUTTON_SIZE);
                ColorPaletteDrawable cp =
                        new ColorPaletteDrawable(colors[i], BUTTON_SIZE, BUTTON_SIZE,
                                BUTTON_MERGIN);
                button.setBackgroundDrawable(cp);
                button.setDrawingCacheBackgroundColor(colors[i]);
                if (type == TYPE_FOREGROUND) {
                    button.setOnClickListener(new View.OnClickListener() {
                        public void onClick(View view) {
                            mEST.setItemColor(view.getDrawingCacheBackgroundColor());
                            if (mAlertDialog != null) {
                                mAlertDialog.setView(null);
                                mAlertDialog.dismiss();
                                mAlertDialog = null;
                            } else {
                                Log.e(TAG,
                                        "--- buildAndShowColorDialogue: can't find alertDialog");
                            }
                        }
                    });
                } else if (type == TYPE_BACKGROUND) {
                    button.setOnClickListener(new View.OnClickListener() {
                        public void onClick(View view) {
                            mEST.setBackgroundColor(view.getDrawingCacheBackgroundColor());
                            if (mAlertDialog != null) {
                                mAlertDialog.setView(null);
                                mAlertDialog.dismiss();
                                mAlertDialog = null;
                            } else {
                                Log.e(TAG,
                                        "--- buildAndShowColorDialogue: can't find alertDialog");
                            }
                        }
                    });
                }
                horizontalLayout.addView(button);
            }

            if (type == TYPE_BACKGROUND) {
                mBuilder.setPositiveButton(mColorDefaultMessage,
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                mEST.setBackgroundColor(DEFAULT_TRANSPARENT_COLOR);
                            }
                        });
            } else if (type == TYPE_FOREGROUND) {
                mBuilder.setPositiveButton(mColorDefaultMessage,
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                mEST.setItemColor(DEFAULT_FOREGROUND_COLOR);
                            }
                        });
            }

            mBuilder.setView(verticalLayout);
            mBuilder.setCancelable(true);
            mBuilder.setOnCancelListener(new OnCancelListener() {
                public void onCancel(DialogInterface arg0) {
                    mEST.onStartEdit();
                }
            });
            mAlertDialog = mBuilder.show();
!!!36314039.java!!!	onShowForegroundColorAlertDialog() : void
            if (DBG) {
                Log.d(TAG, "--- onShowForegroundColorAlertDialog");
            }
            if (!checkColorAlertParams()) {
                return;
            }
            int[] colorints = new int[mColorInts.length];
            for (int i = 0; i < colorints.length; i++) {
                colorints[i] = Integer.parseInt((String) mColorInts[i], 16) - 0x01000000;
            }
            buildAndShowColorDialogue(TYPE_FOREGROUND, mColorTitle, colorints);
!!!36314167.java!!!	onShowBackgroundColorAlertDialog() : void
            if (DBG) {
                Log.d(TAG, "--- onShowBackgroundColorAlertDialog");
            }
            if (!checkColorAlertParams()) {
                return;
            }
            int[] colorInts = new int[mColorInts.length];
            for (int i = 0; i < colorInts.length; i++) {
                colorInts[i] = Integer.parseInt((String) mColorInts[i], 16) - 0x01000000;
            }
            buildAndShowColorDialogue(TYPE_BACKGROUND, mColorTitle, colorInts);
!!!36314295.java!!!	onShowSizeAlertDialog() : void
            if (DBG) {
                Log.d(TAG, "--- onShowSizeAlertDialog");
            }
            if (!checkSizeAlertParams()) {
                return;
            }
            buildDialogue(mSizeTitle, mSizeNames, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int which) {
                    Log.d(TAG, "mBuilder.onclick:" + which);
                    int size =
                            mEST.dipToPx(Integer.parseInt((String) mSizeDisplayInts[which]));
                    mEST.setItemSize(size);
                }
            });
!!!36314423.java!!!	onShowAlignAlertDialog() : void
            if (DBG) {
                Log.d(TAG, "--- onShowAlignAlertDialog");
            }
            if (!checkAlignAlertParams()) {
                return;
            }
            buildDialogue(mAlignTitle, mAlignNames, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int which) {
                    Layout.Alignment align = Layout.Alignment.ALIGN_NORMAL;
                    switch (which) {
                        case 0:
                            align = Layout.Alignment.ALIGN_NORMAL;
                            break;
                        case 1:
                            align = Layout.Alignment.ALIGN_CENTER;
                            break;
                        case 2:
                            align = Layout.Alignment.ALIGN_OPPOSITE;
                            break;
                        default:
                            Log.e(TAG, "--- onShowAlignAlertDialog: got illigal align.");
                            break;
                    }
                    mEST.setAlignment(align);
                }
            });
!!!36314551.java!!!	onShowMarqueeAlertDialog() : void
            if (DBG) {
                Log.d(TAG, "--- onShowMarqueeAlertDialog");
            }
            if (!checkMarqueeAlertParams()) {
                return;
            }
            buildDialogue(mMarqueeTitle, mMarqueeNames, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int which) {
                    if (DBG) {
                        Log.d(TAG, "mBuilder.onclick:" + which);
                    }
                    mEST.setMarquee(which);
                }
            });
