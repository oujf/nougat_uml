class StyledTextArrowKeyMethod
!!!36314807.java!!!	StyledTextArrowKeyMethod(inout manager : EditStyledText::EditorManager)
            super();
            mManager = manager;
!!!36314935.java!!!	onKeyDown(inout widget : TextView, inout buffer : Spannable, in keyCode : int, inout event : KeyEvent) : boolean
            if (DBG) {
                Log.d(LOG_TAG, "---onkeydown:" + keyCode);
            }
            mManager.unsetTextComposingMask();
            if (mManager.getSelectState() == STATE_SELECT_ON
                    || mManager.getSelectState() == STATE_SELECTED) {
                return executeDown(widget, buffer, keyCode);
            } else {
                return super.onKeyDown(widget, buffer, keyCode, event);
            }
!!!36315063.java!!!	getEndPos(inout widget : TextView) : int
            int end;
            if (widget.getSelectionStart() == mManager.getSelectionStart()) {
                end = widget.getSelectionEnd();
            } else {
                end = widget.getSelectionStart();
            }
            return end;
!!!36315191.java!!!	up(inout widget : TextView, inout buffer : Spannable) : boolean
            if (DBG) {
                Log.d(LOG_TAG, "--- up:");
            }
            Layout layout = widget.getLayout();
            int end = getEndPos(widget);
            int line = layout.getLineForOffset(end);
            if (line > 0) {
                int to;
                if (layout.getParagraphDirection(line) == layout
                        .getParagraphDirection(line - 1)) {
                    float h = layout.getPrimaryHorizontal(end);
                    to = layout.getOffsetForHorizontal(line - 1, h);
                } else {
                    to = layout.getLineStart(line - 1);
                }
                mManager.setEndPos(to);
                mManager.onCursorMoved();
            }
            return true;
!!!36315319.java!!!	down(inout widget : TextView, inout buffer : Spannable) : boolean
            if (DBG) {
                Log.d(LOG_TAG, "--- down:");
            }
            Layout layout = widget.getLayout();
            int end = getEndPos(widget);
            int line = layout.getLineForOffset(end);
            if (line < layout.getLineCount() - 1) {
                int to;
                if (layout.getParagraphDirection(line) == layout
                        .getParagraphDirection(line + 1)) {
                    float h = layout.getPrimaryHorizontal(end);
                    to = layout.getOffsetForHorizontal(line + 1, h);
                } else {
                    to = layout.getLineStart(line + 1);
                }
                mManager.setEndPos(to);
                mManager.onCursorMoved();
            }
            return true;
!!!36315447.java!!!	left(inout widget : TextView, inout buffer : Spannable) : boolean
            if (DBG) {
                Log.d(LOG_TAG, "--- left:");
            }
            Layout layout = widget.getLayout();
            int to = layout.getOffsetToLeftOf(getEndPos(widget));
            mManager.setEndPos(to);
            mManager.onCursorMoved();
            return true;
!!!36315575.java!!!	right(inout widget : TextView, inout buffer : Spannable) : boolean
            if (DBG) {
                Log.d(LOG_TAG, "--- right:");
            }
            Layout layout = widget.getLayout();
            int to = layout.getOffsetToRightOf(getEndPos(widget));
            mManager.setEndPos(to);
            mManager.onCursorMoved();
            return true;
!!!36315703.java!!!	executeDown(inout widget : TextView, inout buffer : Spannable, in keyCode : int) : boolean
            if (DBG) {
                Log.d(LOG_TAG, "--- executeDown: " + keyCode);
            }
            boolean handled = false;

            switch (keyCode) {
                case KeyEvent.KEYCODE_DPAD_UP:
                    handled |= up(widget, buffer);
                    break;
                case KeyEvent.KEYCODE_DPAD_DOWN:
                    handled |= down(widget, buffer);
                    break;
                case KeyEvent.KEYCODE_DPAD_LEFT:
                    handled |= left(widget, buffer);
                    break;
                case KeyEvent.KEYCODE_DPAD_RIGHT:
                    handled |= right(widget, buffer);
                    break;
                case KeyEvent.KEYCODE_DPAD_CENTER:
                    mManager.onFixSelectedItem();
                    handled = true;
                    break;
            }
            return handled;
