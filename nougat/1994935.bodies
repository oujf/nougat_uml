class FrameSequence
!!!36337079.java!!!	getWidth() : int
 return mWidth;
!!!36337207.java!!!	getHeight() : int
 return mHeight;
!!!36337335.java!!!	isOpaque() : boolean
 return mOpaque;
!!!36337463.java!!!	getFrameCount() : int
 return mFrameCount;
!!!36337591.java!!!	getDefaultLoopCount() : int
 return mDefaultLoopCount;
!!!36338615.java!!!	FrameSequence(in nativeFrameSequence : long, in width : int, in height : int, inout opaque : boolean, in frameCount : int, in defaultLoopCount : int)
        mNativeFrameSequence = nativeFrameSequence;
        mWidth = width;
        mHeight = height;
        mOpaque = opaque;
        mFrameCount = frameCount;
        mDefaultLoopCount = defaultLoopCount;
!!!36338743.java!!!	decodeByteArray(inout data : byte) : FrameSequence
        return decodeByteArray(data, 0, data.length);
!!!36338871.java!!!	decodeByteArray(inout data : byte, in offset : int, in length : int) : FrameSequence
        if (data == null) throw new IllegalArgumentException();
        if (offset < 0 || length < 0 || (offset + length > data.length)) {
            throw new IllegalArgumentException("invalid offset/length parameters");
        }
        return nativeDecodeByteArray(data, offset, length);
!!!36338999.java!!!	decodeByteBuffer(inout buffer : ByteBuffer) : FrameSequence
        if (buffer == null) throw new IllegalArgumentException();
        if (!buffer.isDirect()) {
            if (buffer.hasArray()) {
                byte[] byteArray = buffer.array();
                return decodeByteArray(byteArray, buffer.position(), buffer.remaining());
            } else {
                throw new IllegalArgumentException("Cannot have non-direct ByteBuffer with no byte array");
            }
        }
        return nativeDecodeByteBuffer(buffer, buffer.position(), buffer.remaining());
!!!36339127.java!!!	decodeStream(inout stream : InputStream) : FrameSequence
        if (stream == null) throw new IllegalArgumentException();
        byte[] tempStorage = new byte[16 * 1024]; // TODO: use buffer pool
        return nativeDecodeStream(stream, tempStorage);
!!!36339255.java!!!	createState() : FrameSequence::State
        if (mNativeFrameSequence == 0) {
            throw new IllegalStateException("attempted to use incorrectly built FrameSequence");
        }

        long nativeState = nativeCreateState(mNativeFrameSequence);
        if (nativeState == 0) {
            return null;
        }
        return new State(nativeState);
!!!36339383.java!!!	finalize() : void
        try {
            if (mNativeFrameSequence != 0) nativeDestroyFrameSequence(mNativeFrameSequence);
        } finally {
            super.finalize();
        }
