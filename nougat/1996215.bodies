class StochasticLinearRanker
!!!36349495.java!!!	StochasticLinearRanker()
        mNativeClassifier = initNativeClassifier();
!!!36349623.java!!!	resetRanker() : void
        deleteNativeClassifier(mNativeClassifier);
        mNativeClassifier = initNativeClassifier();
!!!36349751.java!!!	updateClassifier(inout keys_positive : String, inout values_positive : float, inout keys_negative : String, inout values_negative : float) : boolean
        return nativeUpdateClassifier(keys_positive, values_positive,
                                      keys_negative, values_negative,
                                      mNativeClassifier);
!!!36349879.java!!!	scoreSample(inout keys : String, inout values : float) : float
        return nativeScoreSample(keys, values, mNativeClassifier);
!!!36350007.java!!!	getUModel() : StochasticLinearRanker::Model
        Model slrModel = new Model();
        int len = nativeGetLengthClassifier(mNativeClassifier);
        String[] wKeys = new String[len];
        float[] wValues = new float[len];
        float wNormalizer = 1;
        nativeGetWeightClassifier(wKeys, wValues, wNormalizer, mNativeClassifier);
        slrModel.weightNormalizer = wNormalizer;
        for (int  i=0; i< wKeys.length ; i++)
            slrModel.weights.put(wKeys[i], wValues[i]);

        String[] paramKeys = new String[VAR_NUM];
        String[] paramValues = new String[VAR_NUM];
        nativeGetParameterClassifier(paramKeys, paramValues, mNativeClassifier);
        for (int  i=0; i< paramKeys.length ; i++)
            slrModel.parameters.put(paramKeys[i], paramValues[i]);
        return slrModel;
!!!36350135.java!!!	loadModel(inout model : StochasticLinearRanker::Model) : boolean
        String[] wKeys = new String[model.weights.size()];
        float[] wValues = new float[model.weights.size()];
        int i = 0 ;
        for (Map.Entry<String, Float> e : model.weights.entrySet()){
            wKeys[i] = e.getKey();
            wValues[i] = e.getValue();
            i++;
        }
        boolean res = setModelWeights(wKeys, wValues, model.weightNormalizer);
        if (!res)
            return false;

        for (Map.Entry<String, String> e : model.parameters.entrySet()){
            res = setModelParameter(e.getKey(), e.getValue());
            if (!res)
                return false;
        }
        return res;
!!!36350263.java!!!	setModelWeights(inout keys : String, inout values : float, in normalizer : float) : boolean
        return nativeSetWeightClassifier(keys, values, normalizer, mNativeClassifier);
!!!36350391.java!!!	setModelParameter(inout key : String, inout value : String) : boolean
        boolean res = nativeSetParameterClassifier(key, value, mNativeClassifier);
        return res;
!!!36350519.java!!!	print(inout model : StochasticLinearRanker::Model) : void
        String Sw = "";
        String Sp = "";
        for (Map.Entry<String, Float> e : model.weights.entrySet())
            Sw = Sw + "<" + e.getKey() + "," + e.getValue() + "> ";
        for (Map.Entry<String, String> e : model.parameters.entrySet())
            Sp = Sp + "<" + e.getKey() + "," + e.getValue() + "> ";
        Log.i(TAG, "Weights are " + Sw);
        Log.i(TAG, "Normalizer is " + model.weightNormalizer);
        Log.i(TAG, "Parameters are " + Sp);
!!!36350647.java!!!	finalize() : void
        deleteNativeClassifier(mNativeClassifier);
