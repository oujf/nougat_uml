class BaseCluster
!!!36354999.java!!!	BaseCluster(inout location : Location)
        mCenter = getLocationVector(location);
        mDuration = 0;
!!!36355127.java!!!	BaseCluster(inout semanticId : String, in longitude : double, in latitude : double, in duration : long)
        mSemanticId = semanticId;
        mCenter = getLocationVector(longitude, latitude);
        mDuration = duration;
!!!36355255.java!!!	getSemanticId() : String
        return mSemanticId;
!!!36355383.java!!!	generateSemanticId(in index : long) : void
        mSemanticId = "cluser: " + String.valueOf(index);
!!!36355511.java!!!	getDuration() : long
        return mDuration;
!!!36355639.java!!!	hasSemanticId() : boolean
        return mSemanticId != null;
!!!36355767.java!!!	getLocationVector(inout location : Location) : double
        return getLocationVector(location.getLongitude(), location.getLatitude());
!!!36355895.java!!!	getLocationVector(in longitude : double, in latitude : double) : double
        double vector[] = new double[VECTOR_LENGTH];
        double lambda = Math.toRadians(longitude);
        double phi = Math.toRadians(latitude);

        vector[0] = Math.cos(lambda) * Math.cos(phi);
        vector[1] = Math.sin(lambda) * Math.cos(phi);
        vector[2] = Math.sin(phi);
        return vector;
!!!36356023.java!!!	getCenterLongitude() : double
        // Because latitude ranges from -90 to 90 degrees, cosPhi >= 0.
        double cosPhi = Math.cos(Math.asin(mCenter[2]));
        double longitude = Math.toDegrees(Math.asin(mCenter[1] / cosPhi));
        if (mCenter[0] < 0) {
            longitude = (longitude > 0) ? 180f - longitude : -180 - longitude;
        }
        return longitude;
!!!36356151.java!!!	getCenterLatitude() : double
        return Math.toDegrees(Math.asin(mCenter[2]));
!!!36356279.java!!!	computeDistance(inout vector1 : double, inout vector2 : double) : double
        double product = 0f;
        for (int i = 0; i < VECTOR_LENGTH; ++i) {
            product += vector1[i] * vector2[i];
        }
        double radian = Math.acos(Math.min(product, 1f));
        return radian * EARTH_RADIUS;
!!!36356407.java!!!	distanceToCenter(inout location : Location) : float
        return (float) computeDistance(mCenter, getLocationVector(location));
!!!36356535.java!!!	distanceToCluster(inout cluster : BaseCluster) : float
        return (float) computeDistance(mCenter, cluster.mCenter);
!!!36356663.java!!!	absorbCluster(inout cluster : BaseCluster) : void
        averageCenter(cluster.mCenter, cluster.mDuration);
        absorbHistogram(cluster);
!!!36356791.java!!!	setCluster(inout cluster : BaseCluster) : void
        for (int i = 0; i < VECTOR_LENGTH; ++i) {
            mCenter[i] = cluster.mCenter[i];
        }
        mHistogram.clear();
        mHistogram.putAll(cluster.mHistogram);
        mDuration = cluster.mDuration;
!!!36356919.java!!!	absorbHistogram(inout cluster : BaseCluster) : void
        for (Map.Entry<String, Long> entry : cluster.mHistogram.entrySet()) {
            String timeLabel = entry.getKey();
            long duration = entry.getValue();

            if (mHistogram.containsKey(timeLabel)) {
                duration += mHistogram.get(timeLabel);
            }
            mHistogram.put(timeLabel, duration);
        }
        mDuration += cluster.mDuration;
!!!36357047.java!!!	passThreshold(in durationThreshold : long) : boolean
        // TODO: might want to keep semantic cluster
        return mDuration > durationThreshold;
!!!36357175.java!!!	getHistogram() : String
        return mHistogram;
!!!36357303.java!!!	setHistogram(inout histogram : Map<String, Long>) : void
        mHistogram.clear();
        mHistogram.putAll(histogram);

        mDuration = 0;
        if (mHistogram.containsKey(TimeStatsAggregator.WEEKEND)) {
            mDuration += mHistogram.get(TimeStatsAggregator.WEEKEND);
        }
        if (mHistogram.containsKey(TimeStatsAggregator.WEEKDAY)) {
            mDuration += mHistogram.get(TimeStatsAggregator.WEEKDAY);
        }
!!!36357431.java!!!	forgetPastHistory() : void
        mDuration *= FORGETTING_ENUMERATOR;
        mDuration /= FORGETTING_DENOMINATOR;

        for (Map.Entry<String, Long> entry : mHistogram.entrySet()) {
            String key = entry.getKey();
            long value = entry.getValue();

            value *= FORGETTING_ENUMERATOR;
            value /= FORGETTING_DENOMINATOR;

            mHistogram.put(key, value);
        }
!!!36357559.java!!!	normalizeCenter() : void
        double norm = 0;
        for (int i = 0; i < VECTOR_LENGTH; ++i) {
            norm += mCenter[i] * mCenter[i];
        }
        norm = Math.sqrt(norm);
        for (int i = 0; i < VECTOR_LENGTH; ++i) {
            mCenter[i] /= norm;
        }
!!!36357687.java!!!	averageCenter(inout newCenter : double, in newDuration : long) : void
        double weight = ((double) mDuration) / (mDuration + newDuration);
        double newWeight = 1f - weight;

        double norm = 0;
        for (int i = 0; i < VECTOR_LENGTH; ++i) {
            mCenter[i] = weight * mCenter[i] + newWeight * newCenter[i];
            norm += mCenter[i] * mCenter[i];
        }
        norm = Math.sqrt(norm);
        for (int i = 0; i < VECTOR_LENGTH; ++i) {
            mCenter[i] /= norm;
        }
