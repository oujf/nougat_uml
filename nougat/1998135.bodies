class BordeauxRanker
!!!36362039.java!!!	getArrayList(in sample : HashMap<String, Float>) : StringFloat
        ArrayList<StringFloat> stringfloat_sample = new ArrayList<StringFloat>();
        for (Map.Entry<String, Float> x : sample.entrySet()) {
           StringFloat v = new StringFloat();
           v.key = x.getKey();
           v.value = x.getValue();
           stringfloat_sample.add(v);
        }
        return stringfloat_sample;
!!!36362167.java!!!	retrieveRanker() : boolean
        if (mRanker == null)
            mRanker = BordeauxManagerService.getRanker(mContext, mName);
        // if classifier is not available, return false
        if (mRanker == null) {
            Log.e(TAG,"Ranker not available.");
            return false;
        }
        return true;
!!!36362295.java!!!	BordeauxRanker(inout context : Context)
        mContext = context;
        mName = "defaultRanker";
        mRanker = BordeauxManagerService.getRanker(context, mName);
!!!36362423.java!!!	BordeauxRanker(inout context : Context, inout name : String)
        mContext = context;
        mName = name;
        mRanker = BordeauxManagerService.getRanker(context, mName);
!!!36362551.java!!!	update(in sample1 : HashMap<String, Float>, in sample2 : HashMap<String, Float>) : boolean
        if (!retrieveRanker())
            return false;
        try {
            mRanker.UpdateClassifier(getArrayList(sample1), getArrayList(sample2));
        } catch (RemoteException e) {
            Log.e(TAG,"Exception: updateClassifier.");
            return false;
        }
        return true;
!!!36362679.java!!!	reset() : boolean
        if (!retrieveRanker()){
            Log.e(TAG,"Exception: Ranker is not availible");
            return false;
        }
        try {
            mRanker.ResetRanker();
            return true;
        } catch (RemoteException e) {
        }
        return false;
!!!36362807.java!!!	scoreSample(in sample : HashMap<String, Float>) : float
        if (!retrieveRanker())
            throw new RuntimeException(RANKER_NOTAVAILABLE);
        try {
            return mRanker.ScoreSample(getArrayList(sample));
        } catch (RemoteException e) {
            Log.e(TAG,"Exception: scoring the sample.");
            throw new RuntimeException(RANKER_NOTAVAILABLE);
        }
!!!36362935.java!!!	setPriorWeight(in sample : HashMap<String, Float>) : boolean
        if (!retrieveRanker())
            throw new RuntimeException(RANKER_NOTAVAILABLE);
        try {
            return mRanker.SetModelPriorWeight(getArrayList(sample));
        } catch (RemoteException e) {
            Log.e(TAG,"Exception: set prior Weights");
            throw new RuntimeException(RANKER_NOTAVAILABLE);
        }
!!!36363063.java!!!	setParameter(inout key : String, inout value : String) : boolean
        if (!retrieveRanker())
            throw new RuntimeException(RANKER_NOTAVAILABLE);
        try {
            return mRanker.SetModelParameter(key, value);
        } catch (RemoteException e) {
            Log.e(TAG,"Exception: Setting Parameter");
            throw new RuntimeException(RANKER_NOTAVAILABLE);
        }
