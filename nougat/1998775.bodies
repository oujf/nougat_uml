class LocationStatsAggregator
!!!36372919.java!!!	LocationStatsAggregator(in context : Context)
        mLocationManager =
            (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
        mAlarmManager =
            (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);

        setClusteringThread(context);

        mCriteria.setAccuracy(Criteria.ACCURACY_COARSE);
        mCriteria.setPowerRequirement(Criteria.POWER_LOW);
        /*
        mCriteria.setAltitudeRequired(false);
        mCriteria.setBearingRequired(false);
        mCriteria.setSpeedRequired(true);
        */
        mCriteria.setCostAllowed(true);


        IntentFilter filter = new IntentFilter(LocationUpdater.LOCATION_UPDATE);
        mLocationUpdater = new LocationUpdater();
        context.registerReceiver(mLocationUpdater, filter);

        Intent intent = new Intent(LocationUpdater.LOCATION_UPDATE);

        mContext = context;
        mPendingIntent = PendingIntent.getBroadcast(mContext, 0, intent, 0);

        mAlarmManager.setInexactRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP,
                                          SystemClock.elapsedRealtime() + 30000, //
                                          REPEAT_INTERVAL,
                                          mPendingIntent);
!!!36373047.java!!!	release() : void
        mContext.unregisterReceiver(mLocationUpdater);
        mAlarmManager.cancel(mPendingIntent);
!!!36373175.java!!!	getListOfFeatures() : String
        String[] list = { CURRENT_LOCATION } ;
        return list;
!!!36373303.java!!!	getFeatureValue(inout featureName : String) : String
        HashMap<String,String> feature = new HashMap<String,String>();

        if (featureName.equals(CURRENT_LOCATION)) {
            // TODO: check last known location first before sending out location request.
            /*
              Location location =
              mLocationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
            */
            String location = mClusterManager.getSemanticLocation();
            if (!location.equals(UNKNOWN_LOCATION)) {
                if (mFakeLocation != null) {
                    feature.put(CURRENT_LOCATION, mFakeLocation);
                } else {
                    feature.put(CURRENT_LOCATION, location);
                }
            }
        }
        return (Map) feature;
!!!36373431.java!!!	getClusterNames() : String
        return mClusterManager.getClusterNames();
!!!36373559.java!!!	setFakeLocation(inout name : String) : void
        if (name != null && name.length() != 0)
            mFakeLocation = name;
        else mFakeLocation = null;
!!!36373687.java!!!	getLastKnownLocation() : Location
        List<String> providers = mLocationManager.getAllProviders();
        Location bestResult = null;
        float bestAccuracy = Float.MAX_VALUE;
        long bestTime;

        // get the latest location data
        long currTime =  System.currentTimeMillis();
        for (String provider : providers) {
            Location location = mLocationManager.getLastKnownLocation(provider);

            if (location != null) {
                float accuracy = location.getAccuracy();
                long time = location.getTime();

                if (currTime - time < FRESH_THRESHOLD && accuracy < bestAccuracy) {
                    bestResult = location;
                    bestAccuracy = accuracy;
                    bestTime = time;
                }
            }
        }
        if (bestResult != null) {
            Log.i(TAG, "found location for free: " + bestResult);
        }
        return bestResult;
!!!36373943.java!!!	setClusteringThread(inout context : Context) : void
        mClusterManager = new ClusterManager(context);

        mHandlerThread = new HandlerThread("Location Handler",
                Process.THREAD_PRIORITY_BACKGROUND);
        mHandlerThread.start();
        mHandler = new Handler(mHandlerThread.getLooper()) {

            @Override
            public void handleMessage(Message msg) {
                if (!(msg.obj instanceof Location)) {
                    return;
                }
                Location location = (Location) msg.obj;
                switch(msg.what) {
                    case LOCATION_CHANGE:
                        mClusterManager.addSample(location);
                        break;
                    default:
                        super.handleMessage(msg);
                }
            }
        };
