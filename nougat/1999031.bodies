class BordeauxSessionStorage
!!!36365879.java!!!	BordeauxSessionStorage(in context : Context)
        try {
            mDbHelper = new SessionDBHelper(context);
            mDbSessions = mDbHelper.getWritableDatabase();
        } catch (SQLException e) {
            throw new RuntimeException("Can't open session database");
        }
!!!36366391.java!!!	createSessionEntry(inout key : String, inout learner : Class, inout model : byte) : ContentValues
        ContentValues entry = new ContentValues();
        entry.put(COLUMN_KEY, key);
        entry.put(COLUMN_TIME, System.currentTimeMillis());
        entry.put(COLUMN_MODEL, model);
        entry.put(COLUMN_CLASS, learner.getName());
        return entry;
!!!36366519.java!!!	saveSession(inout key : String, inout learner : Class, inout model : byte) : boolean
        ContentValues content = createSessionEntry(key, learner, model);
        long rowID =
                mDbSessions.insertWithOnConflict(SESSION_TABLE, null, content,
                                                 SQLiteDatabase.CONFLICT_REPLACE);
        return rowID >= 0;
!!!36366647.java!!!	getSessionFromCursor(inout cursor : Cursor) : BordeauxSessionManager::Session
        BordeauxSessionManager.Session session = new BordeauxSessionManager.Session();
        String className = cursor.getString(cursor.getColumnIndex(COLUMN_CLASS));
        try {
            session.learnerClass = Class.forName(className);
            session.learner = (IBordeauxLearner) session.learnerClass.getConstructor().newInstance();
        } catch (Exception e) {
            throw new RuntimeException("Can't instantiate class: " + className);
        }
        byte[] model = cursor.getBlob(cursor.getColumnIndex(COLUMN_MODEL));
        session.learner.setModel(model);
        return session;
!!!36366775.java!!!	getSession(inout key : String) : BordeauxSessionManager::Session
        Cursor cursor = mDbSessions.query(true, SESSION_TABLE,
                new String[]{COLUMN_KEY, COLUMN_CLASS, COLUMN_MODEL, COLUMN_TIME},
                COLUMN_KEY + "=\"" + key + "\"", null, null, null, null, null);
        if ((cursor == null) | (cursor.getCount() == 0)) {
            cursor.close();
            return null;
        }
        if (cursor.getCount() > 1) {
            cursor.close();
            throw new RuntimeException("Unexpected duplication in session table for key:" + key);
        }
        cursor.moveToFirst();
        BordeauxSessionManager.Session s = getSessionFromCursor(cursor);
        cursor.close();
        return s;
!!!36366903.java!!!	getAllSessions(inout sessions : ConcurrentHashMap<String, BordeauxSessionManager.Session>) : void
        Cursor cursor = mDbSessions.rawQuery("select * from ?;", new String[]{SESSION_TABLE});
        if (cursor == null) return;
        cursor.moveToFirst();
        do {
            String key = cursor.getString(cursor.getColumnIndex(COLUMN_KEY));
            BordeauxSessionManager.Session session = getSessionFromCursor(cursor);
            sessions.put(key, session);
        } while (cursor.moveToNext());
!!!36367031.java!!!	removeSessions(inout reKey : String) : int
        int nDeleteRows = mDbSessions.delete(SESSION_TABLE, "? like \"?\"",
                                             new String[]{COLUMN_KEY, reKey});
        Log.i(TAG, "Number of rows in session table deleted: " + nDeleteRows);
        return nDeleteRows;
