class FeatureAssembly
!!!36368183.java!!!	FeatureAssembly()
        mAggregatorManager = AggregatorManager.getInstance();
        mPossibleFeatures = Arrays.asList(mAggregatorManager.getListOfFeatures());
        mUseFeatures = new HashSet<String>();
        mUsePairedFeatures = new HashSet<Pair<String, String> >();
!!!36368311.java!!!	registerFeature(inout s : String) : boolean
        if (mPossibleFeatures.contains(s)) {
            mUseFeatures.add(s);
            return true;
        } else {
            return false;
        }
!!!36368439.java!!!	registerFeaturePair(inout features : String) : boolean
        if (features.length != 2 ||
            !mPossibleFeatures.contains(features[0]) ||
            !mPossibleFeatures.contains(features[1])) {
            return false;
        } else {
            mUseFeatures.add(features[0]);
            mUseFeatures.add(features[1]);
            mUsePairedFeatures.add(Pair.create(features[0], features[1]));
            return true;
        }
!!!36368567.java!!!	getUsedFeatures() : String
        return (Set) mUseFeatures;
!!!36368695.java!!!	getFeatureMap() : String
        HashMap<String, String> featureMap = new HashMap<String, String>();

        Iterator itr = mUseFeatures.iterator();
        while(itr.hasNext()) {
            String f = (String) itr.next();
            Map<String, String> features = mAggregatorManager.getDataMap(f);

            // TODO: sanity check for now.
            if (features.size() > 1) {
              throw new RuntimeException("Incorrect feature format extracted from aggregator.");
            }
            featureMap.putAll(features);
        }

        if (!mUsePairedFeatures.isEmpty()) {
            itr = mUsePairedFeatures.iterator();
            while(itr.hasNext()) {
                Pair<String, String> pair = (Pair<String, String>) itr.next();
                if (featureMap.containsKey(pair.first) &&
                    featureMap.containsKey(pair.second)) {
                    String key = pair.first + Predictor.FEATURE_SEPARATOR + pair.second;
                    String value = featureMap.get(pair.first) + Predictor.FEATURE_SEPARATOR +
                            featureMap.get(pair.second);
                    featureMap.put(key, value);
                }
            }
        }
        return (Map)featureMap;
!!!36368823.java!!!	augmentFeatureInputString(inout s : String) : String
        String fs = s;
        Iterator itr = mUseFeatures.iterator();
        while(itr.hasNext()) {
            String f = (String) itr.next();
            fs = fs + "+" + mAggregatorManager.getDataMap(f).get(f);
        }
        return fs;
