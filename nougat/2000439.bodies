class Learning_MulticlassPA
!!!36369591.java!!!	splitIntFloatArray(inout sample : List<IntFloat>) : Learning_MulticlassPA::IntFloatArray
        IntFloatArray splited = new IntFloatArray();
        ArrayList<IntFloat> s = (ArrayList<IntFloat>)sample;
        splited.indexArray = new int[s.size()];
        splited.floatArray = new float[s.size()];
        for (int i = 0; i < s.size(); i++) {
            splited.indexArray[i] = s.get(i).index;
            splited.floatArray[i] = s.get(i).value;
        }
        return splited;
!!!36369719.java!!!	Learning_MulticlassPA()
        mMulticlassPA_learner = new MulticlassPA(2, 2, 0.001f);
!!!36369847.java!!!	getModel() : byte
        return null;
!!!36369975.java!!!	setModel(in modelData : byte) : boolean
        return false;
!!!36370103.java!!!	getBinder() : IBinder
        return this;
!!!36370231.java!!!	setModelChangeCallback(inout callback : IBordeauxLearner::ModelChangeCallback) : void
        modelChangeCallback = callback;
!!!36370359.java!!!	TrainOneSample(inout sample : List<IntFloat>, in target : int) : void
        IntFloatArray splited = splitIntFloatArray(sample);
        mMulticlassPA_learner.sparseTrainOneExample(splited.indexArray,
                                                    splited.floatArray,
                                                    target);
        if (modelChangeCallback != null) {
            modelChangeCallback.modelChanged(this);
        }
!!!36370487.java!!!	Classify(inout sample : List<IntFloat>) : int
        IntFloatArray splited = splitIntFloatArray(sample);
        int prediction = mMulticlassPA_learner.sparseGetClass(splited.indexArray,
                                                              splited.floatArray);
        return prediction;
