class BasicBitmapDrawable
!!!36430519.java!!!	BasicBitmapDrawable(in res : Resources, in cache : BitmapCache, in limitDensity : boolean)
        mDensity = res.getDisplayMetrics().density;
        mCache = cache;
        mLimitDensity = limitDensity;
        mPaint.setFilterBitmap(true);
        mPaint.setAntiAlias(true);
        mPaint.setDither(true);
!!!36430647.java!!!	getKey() : RequestKey
        return mCurrKey;
!!!36430775.java!!!	getPreviousKey() : RequestKey
        return mPrevKey;
!!!36430903.java!!!	getBitmap() : ReusableBitmap
        return mBitmap;
!!!36431031.java!!!	setDecodeDimensions(in width : int, in height : int) : void
        if (mDecodeWidth == 0 || mDecodeHeight == 0) {
            mDecodeWidth = width;
            mDecodeHeight = height;
            setImage(mCurrKey);
        }
!!!36431159.java!!!	setLayoutDirectionLocal(in layoutDirection : int) : void
        if (mLayoutDirection != layoutDirection) {
            mLayoutDirection = layoutDirection;
            onLayoutDirectionChangeLocal(layoutDirection);
        }
!!!36431415.java!!!	getLayoutDirectionLocal() : int
        return mLayoutDirection;
!!!36431543.java!!!	bind(inout key : RequestKey) : void
        Trace.beginSection("bind");
        if (mCurrKey != null && mCurrKey.equals(key)) {
            Trace.endSection();
            return;
        }
        setImage(key);
        Trace.endSection();
!!!36431671.java!!!	unbind() : void
        unbind(false);
!!!36431799.java!!!	unbind(inout temporary : boolean) : void
        Trace.beginSection("unbind");
        setImage(null);
        if (!temporary) {
            mPrevKey = null;
        }
        Trace.endSection();
!!!36431927.java!!!	setImage(in key : RequestKey) : void
        Trace.beginSection("set image");
        Trace.beginSection("release reference");
        if (mBitmap != null) {
            mBitmap.releaseReference();
            mBitmap = null;
        }
        Trace.endSection();

        mPrevKey = mCurrKey;
        mCurrKey = key;

        if (mTask != null) {
            mTask.cancel();
            mTask = null;
        }
        if (mCreateFileDescriptorFactoryTask != null) {
            mCreateFileDescriptorFactoryTask.cancel();
            mCreateFileDescriptorFactoryTask = null;
        }

        if (key == null) {
            onDecodeFailed();
            Trace.endSection();
            return;
        }

        // find cached entry here and skip decode if found.
        final ReusableBitmap cached = mCache.get(key, true /* incrementRefCount */);
        if (cached != null) {
            setBitmap(cached);
            if (DEBUG) {
                Log.d(TAG, String.format("CACHE HIT key=%s", mCurrKey));
            }
        } else {
            loadFileDescriptorFactory();
            if (DEBUG) {
                Log.d(TAG, String.format(
                        "CACHE MISS key=%s\ncache=%s", mCurrKey, mCache.toDebugString()));
            }
        }
        Trace.endSection();
!!!36432055.java!!!	setBitmap(inout bmp : ReusableBitmap) : void
        if (hasBitmap()) {
            mBitmap.releaseReference();
        }
        mBitmap = bmp;
        invalidateSelf();
!!!36432183.java!!!	loadFileDescriptorFactory() : void
        if (mCurrKey == null || mDecodeWidth == 0 || mDecodeHeight == 0) {
            onDecodeFailed();
            return;
        }

        // Create file descriptor if request supports it.
        mCreateFileDescriptorFactoryTask = mCurrKey
                .createFileDescriptorFactoryAsync(mCurrKey, this);
        if (mCreateFileDescriptorFactoryTask == null) {
            // Use input stream if request does not.
            decode(null);
        }
!!!36432311.java!!!	fileDescriptorFactoryCreated(in key : RequestKey, in factory : RequestKey::FileDescriptorFactory) : void
        if (mCreateFileDescriptorFactoryTask == null) {
            // Cancelled.
            onDecodeFailed();
            return;
        }
        mCreateFileDescriptorFactoryTask = null;

        if (key.equals(mCurrKey)) {
            decode(factory);
        }
!!!36432439.java!!!	onDecodeFailed() : void
        invalidateSelf();
!!!36432567.java!!!	decode(in factory : RequestKey::FileDescriptorFactory) : void
        Trace.beginSection("decode");
        final int bufferW;
        final int bufferH;
        if (mLimitDensity) {
            final float scale =
                    Math.min(1f, (float) MAX_BITMAP_DENSITY / DisplayMetrics.DENSITY_DEFAULT
                            / mDensity);
            bufferW = (int) (mDecodeWidth * scale);
            bufferH = (int) (mDecodeHeight * scale);
        } else {
            bufferW = mDecodeWidth;
            bufferH = mDecodeHeight;
        }

        if (mTask != null) {
            mTask.cancel();
        }
        final DecodeOptions opts = new DecodeOptions(bufferW, bufferH, getDecodeHorizontalCenter(),
                getDecodeVerticalCenter(), getDecodeStrategy());
        mTask = new DecodeTask(mCurrKey, opts, factory, this, mCache);
        mTask.executeOnExecutor(getExecutor());
        Trace.endSection();
!!!36432695.java!!!	getDecodeStrategy() : int
        return DecodeOptions.STRATEGY_ROUND_NEAREST;
!!!36432823.java!!!	getExecutor() : Executor
        return EXECUTOR;
!!!36432951.java!!!	getDrawVerticalCenter() : float
        return VERTICAL_CENTER;
!!!36433079.java!!!	getDrawVerticalOffsetMultiplier() : float
        return NO_MULTIPLIER;
!!!36433207.java!!!	getDecodeHorizontalCenter() : float
        return HORIZONTAL_CENTER;
!!!36433335.java!!!	getDecodeVerticalCenter() : float
        return VERTICAL_CENTER;
!!!36433463.java!!!	draw(in canvas : Canvas) : void
        final Rect bounds = getBounds();
        if (bounds.isEmpty()) {
            return;
        }

        if (hasBitmap()) {
            BitmapUtils.calculateCroppedSrcRect(
                    mBitmap.getLogicalWidth(), mBitmap.getLogicalHeight(),
                    bounds.width(), bounds.height(),
                    bounds.height(), Integer.MAX_VALUE, getDecodeHorizontalCenter(),
                    getDrawVerticalCenter(), false /* absoluteFraction */,
                    getDrawVerticalOffsetMultiplier(), mRect);

            final int orientation = mBitmap.getOrientation();
            // calculateCroppedSrcRect() gave us the source rectangle "as if" the orientation has
            // been corrected. We need to decode the uncorrected source rectangle. Calculate true
            // coordinates.
            RectUtils.rotateRectForOrientation(orientation,
                    new Rect(0, 0, mBitmap.getLogicalWidth(), mBitmap.getLogicalHeight()),
                    mRect);

            // We may need to rotate the canvas, so we also have to rotate the bounds.
            final Rect rotatedBounds = new Rect(bounds);
            RectUtils.rotateRect(orientation, bounds.centerX(), bounds.centerY(), rotatedBounds);

            // Rotate the canvas.
            canvas.save();
            canvas.rotate(orientation, bounds.centerX(), bounds.centerY());
            onDrawBitmap(canvas, mRect, rotatedBounds);
            canvas.restore();
        }
!!!36433591.java!!!	hasBitmap() : boolean
        return mBitmap != null && mBitmap.bmp != null;
!!!36433719.java!!!	onDrawBitmap(in canvas : Canvas, in src : Rect, in dst : Rect) : void
        if (hasBitmap()) {
            canvas.drawBitmap(mBitmap.bmp, src, dst, mPaint);
        }
!!!36433847.java!!!	setAlpha(in alpha : int) : void
        final int old = mPaint.getAlpha();
        mPaint.setAlpha(alpha);
        if (alpha != old) {
            invalidateSelf();
        }
!!!36433975.java!!!	setColorFilter(inout cf : ColorFilter) : void
        mPaint.setColorFilter(cf);
        invalidateSelf();
!!!36434103.java!!!	getOpacity() : int
        return (hasBitmap() && (mBitmap.bmp.hasAlpha() || mPaint.getAlpha() < 255)) ?
                PixelFormat.TRANSLUCENT : PixelFormat.OPAQUE;
!!!36434359.java!!!	onDecodeComplete(in key : RequestKey, in result : ReusableBitmap) : void
        if (key.equals(mCurrKey)) {
            setBitmap(result);
        } else {
            // if the requests don't match (i.e. this request is stale), decrement the
            // ref count to allow the bitmap to be pooled
            if (result != null) {
                result.releaseReference();
            }
        }
!!!36434615.java!!!	invalidateDrawable(inout who : Drawable) : void
        invalidateSelf();
!!!36434743.java!!!	scheduleDrawable(inout who : Drawable, inout what : Runnable, in when : long) : void
        scheduleSelf(what, when);
!!!36434871.java!!!	unscheduleDrawable(inout who : Drawable, inout what : Runnable) : void
        unscheduleSelf(what);
