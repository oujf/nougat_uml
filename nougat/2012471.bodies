class UnrefedBitmapCache
!!!36429623.java!!!	UnrefedBitmapCache(in targetSizeBytes : int, in nonPooledFraction : float, in nullCapacity : int)
        super(targetSizeBytes, nonPooledFraction);

        if (nullCapacity > 0) {
            mNullRequests = new LruCache<RequestKey, NullReusableBitmap>(nullCapacity);
        }
!!!36429751.java!!!	setBlocking(in blocking : boolean) : void
        synchronized (mLock) {
            if (DEBUG) {
                Log.d(TAG, String.format("AltBitmapCache: block %b", blocking));
            }
            mBlocking = blocking;
            if (!mBlocking) {
                // no longer blocking. Notify every thread.
                mLock.notifyAll();
            }
        }
!!!36429879.java!!!	sizeOf(in value : ReusableBitmap) : int
        return value.getByteCount();
!!!36430007.java!!!	poll() : ReusableBitmap
        ReusableBitmap bitmap;
        synchronized (mLock) {
            while ((bitmap = super.poll()) == null && mBlocking) {
                if (DEBUG) {
                    Log.d(TAG, String.format(
                            "AltBitmapCache: %s waiting", Thread.currentThread().getName()));
                }
                Trace.beginSection("sleep");
                try {
                    // block
                    mLock.wait();
                    if (DEBUG) {
                        Log.d(TAG, String.format("AltBitmapCache: %s notified",
                                Thread.currentThread().getName()));
                    }
                } catch (InterruptedException ignored) {
                }
                Trace.endSection();
            }
        }
        return bitmap;
!!!36430135.java!!!	offer(in value : ReusableBitmap) : void
        synchronized (mLock) {
            super.offer(value);
            if (DEBUG) {
                Log.d(TAG, "AltBitmapCache: offer +1");
            }
            // new resource gained. Notify one thread.
            mLock.notify();
        }
!!!36430263.java!!!	get(in key : RequestKey, in incrementRefCount : boolean) : ReusableBitmap
        if (mNullRequests != null && mNullRequests.get(key) != null) {
            return NullReusableBitmap.getInstance();
        }
        return super.get(key, incrementRefCount);
!!!36430391.java!!!	put(in key : RequestKey, in value : ReusableBitmap) : ReusableBitmap
        if (mNullRequests != null && (value == null || value == NullReusableBitmap.getInstance())) {
            mNullRequests.put(key, NullReusableBitmap.getInstance());
            return null;
        }

        return super.put(key, value);
