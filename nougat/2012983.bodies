class ExtendedBitmapDrawable
!!!36435127.java!!!	ExtendedBitmapDrawable(in res : Resources, in cache : BitmapCache, in limitDensity : boolean, inout opts : ExtendedBitmapDrawable::ExtendedOptions)
        super(res, cache, limitDensity);
        mResources = res;
        if (opts == null) {
            opts = new ExtendedOptions(0);
        }
        mOpts = opts;

        onOptsChanged();
!!!36435255.java!!!	onOptsChanged() : void
        mOpts.validate();

        // Placeholder and progress.
        if ((mOpts.features & ExtendedOptions.FEATURE_STATE_CHANGES) != 0) {
            final int fadeOutDurationMs = mResources.getInteger(R.integer.bitmap_fade_animation_duration);
            mProgressDelayMs = mResources.getInteger(R.integer.bitmap_progress_animation_delay);

            // Placeholder is not optional because backgroundColor is part of it.
            Drawable placeholder = null;
            int placeholderWidth = mResources.getDimensionPixelSize(R.dimen.placeholder_size);
            int placeholderHeight = mResources.getDimensionPixelSize(R.dimen.placeholder_size);
            if (mOpts.placeholder != null) {
                ConstantState constantState = mOpts.placeholder.getConstantState();
                if (constantState != null) {
                    placeholder = constantState.newDrawable(mResources);
                } else {
                    placeholder = mOpts.placeholder;
                }

                Rect bounds = mOpts.placeholder.getBounds();
                if (bounds.width() != 0) {
                    placeholderWidth = bounds.width();
                } else if (placeholder.getIntrinsicWidth() != -1) {
                    placeholderWidth = placeholder.getIntrinsicWidth();
                }
                if (bounds.height() != 0) {
                    placeholderHeight = bounds.height();
                } else if (placeholder.getIntrinsicHeight() != -1) {
                    placeholderHeight = placeholder.getIntrinsicHeight();
                }
            }

            mPlaceholder = new Placeholder(placeholder, mResources, placeholderWidth, placeholderHeight,
                    fadeOutDurationMs, mOpts);
            mPlaceholder.setCallback(this);
            mPlaceholder.setBounds(getBounds());

            // Progress bar is optional.
            if (mOpts.progressBar != null) {
                int progressBarSize = mResources.getDimensionPixelSize(R.dimen.progress_bar_size);
                mProgress = new Progress(mOpts.progressBar.getConstantState().newDrawable(mResources), mResources,
                        progressBarSize, progressBarSize, fadeOutDurationMs, mOpts);
                mProgress.setCallback(this);
                mProgress.setBounds(getBounds());
            } else {
                mProgress = null;
            }
        }

        setLoadState(mLoadState);
!!!36435383.java!!!	setParallaxFraction(in fraction : float) : void
        mParallaxFraction = fraction;
        invalidateSelf();
!!!36435511.java!!!	getExtendedOptions() : ExtendedBitmapDrawable::ExtendedOptions
        return mOpts;
!!!36435639.java!!!	showStaticPlaceholder() : void
        setLoadState(LOAD_STATE_FAILED);
!!!36435767.java!!!	setExactDecodeDimensions(in width : int, in height : int) : void
        super.setDecodeDimensions(width, height);
!!!36435895.java!!!	setDecodeDimensions(in width : int, in height : int) : void
        super.setDecodeDimensions(width, (int) (height * mOpts.parallaxSpeedMultiplier));
!!!36436023.java!!!	setImage(in key : RequestKey) : void
        if (mCurrKey != null && getDecodeAggregator() != null) {
            getDecodeAggregator().forget(mCurrKey);
        }

        mHandler.removeCallbacks(this);
        // start from a clean slate on every bind
        // this allows the initial transition to be specially instantaneous, so e.g. a cache hit
        // doesn't unnecessarily trigger a fade-in
        setLoadState(LOAD_STATE_UNINITIALIZED);

        super.setImage(key);

        if (key == null) {
            showStaticPlaceholder();
        }
!!!36436151.java!!!	setBitmap(inout bmp : ReusableBitmap) : void
        if (bmp != null) {
            setLoadState(LOAD_STATE_LOADED);
        } else {
            onDecodeFailed();
        }

        super.setBitmap(bmp);
!!!36436279.java!!!	loadFileDescriptorFactory() : void
        boolean executeStateChange = shouldExecuteStateChange();
        if (mCurrKey == null || mDecodeWidth == 0 || mDecodeHeight == 0) {
          return;
        }

        if (executeStateChange) {
            setLoadState(LOAD_STATE_NOT_YET_LOADED);
        }

        super.loadFileDescriptorFactory();
!!!36436407.java!!!	onDecodeFailed() : void
        super.onDecodeFailed();

        setLoadState(LOAD_STATE_FAILED);
!!!36436535.java!!!	shouldExecuteStateChange() : boolean
        // TODO: AttachmentDrawable should override this method to match prev and curr request keys.
        return /* opts.stateChanges */ true;
!!!36436663.java!!!	getDrawVerticalCenter() : float
        return mParallaxFraction;
!!!36436791.java!!!	getDrawVerticalOffsetMultiplier() : float
        return mOpts.parallaxSpeedMultiplier;
!!!36436919.java!!!	getDecodeHorizontalCenter() : float
        return mOpts.decodeHorizontalCenter;
!!!36437047.java!!!	getDecodeVerticalCenter() : float
        return mOpts.decodeVerticalCenter;
!!!36437175.java!!!	getDecodeAggregator() : DecodeAggregator
        return mOpts.decodeAggregator;
!!!36437303.java!!!	draw(in canvas : Canvas) : void
        final Rect bounds = getBounds();
        if (bounds.isEmpty()) {
            return;
        }

        onDraw(canvas);

        // Draw the two possible overlay layers in reverse-priority order.
        // (each layer will no-op the draw when appropriate)
        // This ordering means cross-fade transitions are just fade-outs of each layer.
        if (mProgress != null) onDrawPlaceholderOrProgress(canvas, mProgress);
        if (mPlaceholder != null) onDrawPlaceholderOrProgress(canvas, mPlaceholder);
!!!36437431.java!!!	onDraw(in canvas : Canvas) : void
        super.draw(canvas);
!!!36437559.java!!!	onDrawPlaceholderOrProgress(in canvas : Canvas, in drawable : TileDrawable) : void
        drawable.draw(canvas);
!!!36437687.java!!!	setAlpha(in alpha : int) : void
        final int old = mPaint.getAlpha();
        super.setAlpha(alpha);
        if (mPlaceholder != null) mPlaceholder.setAlpha(alpha);
        if (mProgress != null) mProgress.setAlpha(alpha);
        if (alpha != old) {
            invalidateSelf();
        }
!!!36437815.java!!!	setColorFilter(inout cf : ColorFilter) : void
        super.setColorFilter(cf);
        if (mPlaceholder != null) mPlaceholder.setColorFilter(cf);
        if (mProgress != null) mProgress.setColorFilter(cf);
        invalidateSelf();
!!!36437943.java!!!	onBoundsChange(inout bounds : Rect) : void
        super.onBoundsChange(bounds);
        if (mPlaceholder != null) mPlaceholder.setBounds(bounds);
        if (mProgress != null) mProgress.setBounds(bounds);
!!!36438071.java!!!	onDecodeBegin(in key : RequestKey) : void
        if (getDecodeAggregator() != null) {
            getDecodeAggregator().expect(key, this);
        } else {
            onBecomeFirstExpected(key);
        }
        super.onDecodeBegin(key);
!!!36438199.java!!!	onBecomeFirstExpected(in key : RequestKey) : void
        if (!key.equals(mCurrKey)) {
            return;
        }
        // normally, we'd transition to the LOADING state now, but we want to delay that a bit
        // to minimize excess occurrences of the rotating spinner
        mHandler.postDelayed(this, mProgressDelayMs);
!!!36438327.java!!!	run() : void
        if (mLoadState == LOAD_STATE_NOT_YET_LOADED) {
            setLoadState(LOAD_STATE_LOADING);
        }
!!!36438455.java!!!	onDecodeComplete(in key : RequestKey, in result : ReusableBitmap) : void
        if (getDecodeAggregator() != null) {
            getDecodeAggregator().execute(key, new Runnable() {
                @Override
                public void run() {
                    ExtendedBitmapDrawable.super.onDecodeComplete(key, result);
                }

                @Override
                public String toString() {
                    return "DONE";
                }
            });
        } else {
            super.onDecodeComplete(key, result);
        }
!!!36438583.java!!!	onDecodeCancel(in key : RequestKey) : void
        if (getDecodeAggregator() != null) {
            getDecodeAggregator().forget(key);
        }
        super.onDecodeCancel(key);
!!!36438711.java!!!	getLoadState() : int
        return mLoadState;
!!!36438839.java!!!	setLoadState(in loadState : int) : void
        if (DEBUG) {
            Log.v(TAG, String.format("IN setLoadState. old=%s new=%s key=%s this=%s",
                    mLoadState, loadState, mCurrKey, this));
        }

        Trace.beginSection("set load state");
        switch (loadState) {
            // This state differs from LOADED in that the subsequent state transition away from
            // UNINITIALIZED will not have a fancy transition. This allows list item binds to
            // cached data to take immediate effect without unnecessary whizzery.
            case LOAD_STATE_UNINITIALIZED:
                if (mPlaceholder != null) mPlaceholder.reset();
                if (mProgress != null) mProgress.reset();
                break;
            case LOAD_STATE_NOT_YET_LOADED:
                if (mPlaceholder != null) {
                    mPlaceholder.setPulseEnabled(true);
                    mPlaceholder.setVisible(true);
                }
                if (mProgress != null) mProgress.setVisible(false);
                break;
            case LOAD_STATE_LOADING:
                if (mProgress == null) {
                    // Stay in same visual state as LOAD_STATE_NOT_YET_LOADED.
                    break;
                }
                if (mPlaceholder != null) mPlaceholder.setVisible(false);
                if (mProgress != null) mProgress.setVisible(true);
                break;
            case LOAD_STATE_LOADED:
                if (mPlaceholder != null) mPlaceholder.setVisible(false);
                if (mProgress != null) mProgress.setVisible(false);
                break;
            case LOAD_STATE_FAILED:
                if (mPlaceholder != null) {
                    mPlaceholder.setPulseEnabled(false);
                    mPlaceholder.setVisible(true);
                }
                if (mProgress != null) mProgress.setVisible(false);
                break;
        }
        Trace.endSection();

        mLoadState = loadState;
        boolean placeholderVisible = mPlaceholder != null && mPlaceholder.isVisible();
        boolean progressVisible = mProgress != null && mProgress.isVisible();

        if (DEBUG) {
            Log.v(TAG, String.format("OUT stateful setLoadState. new=%s placeholder=%s progress=%s",
                    loadState, placeholderVisible, progressVisible));
        }
