class TileDrawable
!!!36438967.java!!!	TileDrawable(inout inner : Drawable, in innerWidth : int, in innerHeight : int, in fadeOutDurationMs : int, inout opts : ExtendedBitmapDrawable::ExtendedOptions)
        mOpts = opts;
        mInner = inner != null ? inner.mutate() : null;
        mInnerWidth = innerWidth;
        mInnerHeight = innerHeight;
        if (inner != null) {
            mInner.setCallback(this);
        }

        mFadeOutAnimator = ValueAnimator.ofInt(255, 0)
                .setDuration(fadeOutDurationMs);
        mFadeOutAnimator.addUpdateListener(new AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                setAlpha((Integer) animation.getAnimatedValue());
            }
        });

        reset();
!!!36439095.java!!!	reset() : void
        setAlpha(0);
        setVisible(false);
!!!36439223.java!!!	getInnerDrawable() : Drawable
        return mInner;
!!!36439351.java!!!	onBoundsChange(inout bounds : Rect) : void
        super.onBoundsChange(bounds);

        if (mInner == null) {
            return;
        }

        if (bounds.isEmpty()) {
            mInner.setBounds(0, 0, 0, 0);
        } else {
            final int l = bounds.left + (bounds.width() / 2) - (mInnerWidth / 2);
            final int t = bounds.top + (bounds.height() / 2) - (mInnerHeight / 2);
            mInner.setBounds(l, t, l + mInnerWidth, t + mInnerHeight);
        }
!!!36439479.java!!!	draw(inout canvas : Canvas) : void
        if (!isVisible() && mPaint.getAlpha() == 0) {
            return;
        }
        final int alpha = mPaint.getAlpha();
        mPaint.setColor(mOpts.backgroundColor);
        mPaint.setAlpha(alpha);
        canvas.drawRect(getBounds(), mPaint);
        if (mInner != null) mInner.draw(canvas);
!!!36439607.java!!!	setAlpha(in alpha : int) : void
        final int old = mPaint.getAlpha();
        mPaint.setAlpha(alpha);
        setInnerAlpha(alpha);
        if (alpha != old) {
            invalidateSelf();
        }
!!!36439735.java!!!	setColorFilter(inout cf : ColorFilter) : void
        mPaint.setColorFilter(cf);
        if (mInner != null) mInner.setColorFilter(cf);
!!!36439863.java!!!	getOpacity() : int
        return 0;
!!!36439991.java!!!	getCurrentAlpha() : int
        return mPaint.getAlpha();
!!!36440119.java!!!	setVisible(inout visible : boolean) : boolean
        return setVisible(visible, true /* dontcare */);
!!!36440247.java!!!	setVisible(inout visible : boolean, inout restart : boolean) : boolean
        if (mInner != null) mInner.setVisible(visible, restart);
        final boolean changed = super.setVisible(visible, restart);
        if (changed) {
            if (isVisible()) {
                // pop in (no-op)
                // the transition will still be smooth if the previous state's layer fades out
                mFadeOutAnimator.cancel();
                setAlpha(255);
            } else {
                // fade out
                if (mPaint.getAlpha() == 255) {
                    mFadeOutAnimator.start();
                }
            }
        }
        return changed;
!!!36440375.java!!!	onLevelChange(in level : int) : boolean
        if (mInner != null)
            return mInner.setLevel(level);
        else {
            return super.onLevelChange(level);
        }
!!!36440503.java!!!	setInnerAlpha(in alpha : int) : void
        if (mInner != null) mInner.setAlpha(alpha);
!!!36440631.java!!!	invalidateDrawable(inout who : Drawable) : void
        invalidateSelf();
!!!36440759.java!!!	scheduleDrawable(inout who : Drawable, inout what : Runnable, in when : long) : void
        scheduleSelf(what, when);
!!!36440887.java!!!	unscheduleDrawable(inout who : Drawable, inout what : Runnable) : void
        unscheduleSelf(what);
