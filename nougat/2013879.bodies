class StyledCornersBitmapDrawable
!!!36443703.java!!!	StyledCornersBitmapDrawable(inout res : Resources, inout cache : BitmapCache, inout limitDensity : boolean, inout opts : ExtendedBitmapDrawable::ExtendedOptions, in cornerRoundRadius : float, in cornerFlapSide : float)
        super(res, cache, limitDensity, opts);

        mCornerRoundRadius = cornerRoundRadius;
        mCornerFlapSide = cornerFlapSide;

        mFlapPaint.setColor(Color.TRANSPARENT);
        mFlapPaint.setStyle(Style.FILL);
        mFlapPaint.setAntiAlias(true);

        mBorderPaint.setColor(Color.TRANSPARENT);
        mBorderPaint.setStyle(Style.STROKE);
        mBorderPaint.setStrokeWidth(mBorderWidth);
        mBorderPaint.setAntiAlias(true);

        mCompatibilityModeBackgroundPaint.setColor(Color.TRANSPARENT);
        mCompatibilityModeBackgroundPaint.setStyle(Style.FILL);
        mCompatibilityModeBackgroundPaint.setAntiAlias(true);

        mScrimColor = Color.TRANSPARENT;
!!!36443831.java!!!	setBorderWidth(in borderWidth : float) : void
        final boolean changed = mBorderPaint.getStrokeWidth() != borderWidth;
        mBorderPaint.setStrokeWidth(borderWidth);
        mBorderWidth = borderWidth;

        if (changed) {
            invalidateSelf();
        }
!!!36443959.java!!!	setBorderColor(in color : int) : void
        final boolean changed = mBorderPaint.getColor() != color;
        mBorderPaint.setColor(color);

        if (changed) {
            invalidateSelf();
        }
!!!36444087.java!!!	setCornerStylesRelative(in topStart : int, in topEnd : int, in bottomEnd : int, in bottomStart : int) : void
        mTopStartCornerStyle = topStart;
        mTopEndCornerStyle = topEnd;
        mBottomEndCornerStyle = bottomEnd;
        mBottomStartCornerStyle = bottomStart;
        resolveCornerStyles();
!!!36444215.java!!!	onLayoutDirectionChangeLocal(in layoutDirection : int) : void
        resolveCornerStyles();
!!!36444343.java!!!	getFlapColor() : int
        return mFlapPaint.getColor();
!!!36444471.java!!!	setFlapColor(in flapColor : int) : void
        boolean changed = mFlapPaint.getColor() != flapColor;
        mFlapPaint.setColor(flapColor);

        if (changed) {
            invalidateSelf();
        }
!!!36444599.java!!!	getScrimColor() : int
        return mScrimColor;
!!!36444727.java!!!	setScrimColor(in color : int) : void
        boolean changed = mScrimColor != color;
        mScrimColor = color;

        if (changed) {
            invalidateSelf();
        }
!!!36444855.java!!!	setCompatibilityMode(inout isCompatibilityMode : boolean) : void
        boolean changed = mIsCompatibilityMode != isCompatibilityMode;
        mIsCompatibilityMode = isCompatibilityMode;

        if (changed) {
            invalidateSelf();
        }
!!!36444983.java!!!	setCompatibilityModeBackgroundColor(in color : int) : void
        boolean changed = mCompatibilityModeBackgroundPaint.getColor() != color;
        mCompatibilityModeBackgroundPaint.setColor(color);

        if (changed) {
            invalidateSelf();
        }
!!!36445111.java!!!	onBoundsChange(inout bounds : Rect) : void
        super.onBoundsChange(bounds);

        recalculatePath();
!!!36445239.java!!!	draw(inout canvas : Canvas) : void
        final Rect bounds = getBounds();
        if (bounds.isEmpty()) {
            return;
        }

        pauseInvalidate();

        // Clip to path.
        if (!mIsCompatibilityMode) {
            canvas.save();
            canvas.clipPath(mClipPath);
        }

        // Draw parent within path.
        super.draw(canvas);

        // Draw scrim on top of parent.
        canvas.drawColor(mScrimColor);

        // Draw flaps.
        float left = bounds.left + mBorderWidth / 2;
        float top = bounds.top + mBorderWidth / 2;
        float right = bounds.right - mBorderWidth / 2;
        float bottom = bounds.bottom - mBorderWidth / 2;
        RectF flapCornerRectF = sRectF;
        flapCornerRectF.set(0, 0, mCornerFlapSide + mCornerRoundRadius,
                mCornerFlapSide + mCornerRoundRadius);

        if (mTopLeftCornerStyle == CORNER_STYLE_FLAP) {
            flapCornerRectF.offsetTo(left, top);
            canvas.drawRoundRect(flapCornerRectF, mCornerRoundRadius,
                    mCornerRoundRadius, mFlapPaint);
        }
        if (mTopRightCornerStyle == CORNER_STYLE_FLAP) {
            flapCornerRectF.offsetTo(right - mCornerFlapSide, top);
            canvas.drawRoundRect(flapCornerRectF, mCornerRoundRadius,
                    mCornerRoundRadius, mFlapPaint);
        }
        if (mBottomRightCornerStyle == CORNER_STYLE_FLAP) {
            flapCornerRectF.offsetTo(right - mCornerFlapSide, bottom - mCornerFlapSide);
            canvas.drawRoundRect(flapCornerRectF, mCornerRoundRadius,
                    mCornerRoundRadius, mFlapPaint);
        }
        if (mBottomLeftCornerStyle == CORNER_STYLE_FLAP) {
            flapCornerRectF.offsetTo(left, bottom - mCornerFlapSide);
            canvas.drawRoundRect(flapCornerRectF, mCornerRoundRadius,
                    mCornerRoundRadius, mFlapPaint);
        }

        if (!mIsCompatibilityMode) {
            canvas.restore();
        }

        if (mIsCompatibilityMode) {
            drawFakeCornersForCompatibilityMode(canvas);
        }

        // Draw border around path.
        canvas.drawPath(mClipPath, mBorderPaint);

        resumeInvalidate();
!!!36445367.java!!!	invalidateSelf() : void
        if (!mEatInvalidates) {
            super.invalidateSelf();
        } else {
            Log.d(TAG, "Skipping invalidate.");
        }
!!!36445495.java!!!	drawFakeCornersForCompatibilityMode(in canvas : Canvas) : void
        final Rect bounds = getBounds();

        float left = bounds.left;
        float top = bounds.top;
        float right = bounds.right;
        float bottom = bounds.bottom;

        // Draw fake round corners.
        RectF fakeCornerRectF = sRectF;
        fakeCornerRectF.set(0, 0, mCornerRoundRadius * 2, mCornerRoundRadius * 2);
        if (mTopLeftCornerStyle == CORNER_STYLE_ROUND) {
            fakeCornerRectF.offsetTo(left, top);
            mCompatibilityModePath.rewind();
            mCompatibilityModePath.moveTo(left, top);
            mCompatibilityModePath.lineTo(left + mCornerRoundRadius, top);
            mCompatibilityModePath.arcTo(fakeCornerRectF, START_TOP, -QUARTER_CIRCLE);
            mCompatibilityModePath.close();
            canvas.drawPath(mCompatibilityModePath, mCompatibilityModeBackgroundPaint);
        }
        if (mTopRightCornerStyle == CORNER_STYLE_ROUND) {
            fakeCornerRectF.offsetTo(right - fakeCornerRectF.width(), top);
            mCompatibilityModePath.rewind();
            mCompatibilityModePath.moveTo(right, top);
            mCompatibilityModePath.lineTo(right, top + mCornerRoundRadius);
            mCompatibilityModePath.arcTo(fakeCornerRectF, START_RIGHT, -QUARTER_CIRCLE);
            mCompatibilityModePath.close();
            canvas.drawPath(mCompatibilityModePath, mCompatibilityModeBackgroundPaint);
        }
        if (mBottomRightCornerStyle == CORNER_STYLE_ROUND) {
            fakeCornerRectF
                    .offsetTo(right - fakeCornerRectF.width(), bottom - fakeCornerRectF.height());
            mCompatibilityModePath.rewind();
            mCompatibilityModePath.moveTo(right, bottom);
            mCompatibilityModePath.lineTo(right - mCornerRoundRadius, bottom);
            mCompatibilityModePath.arcTo(fakeCornerRectF, START_BOTTOM, -QUARTER_CIRCLE);
            mCompatibilityModePath.close();
            canvas.drawPath(mCompatibilityModePath, mCompatibilityModeBackgroundPaint);
        }
        if (mBottomLeftCornerStyle == CORNER_STYLE_ROUND) {
            fakeCornerRectF.offsetTo(left, bottom - fakeCornerRectF.height());
            mCompatibilityModePath.rewind();
            mCompatibilityModePath.moveTo(left, bottom);
            mCompatibilityModePath.lineTo(left, bottom - mCornerRoundRadius);
            mCompatibilityModePath.arcTo(fakeCornerRectF, START_LEFT, -QUARTER_CIRCLE);
            mCompatibilityModePath.close();
            canvas.drawPath(mCompatibilityModePath, mCompatibilityModeBackgroundPaint);
        }

        // Draw fake flap corners.
        if (mTopLeftCornerStyle == CORNER_STYLE_FLAP) {
            mCompatibilityModePath.rewind();
            mCompatibilityModePath.moveTo(left, top);
            mCompatibilityModePath.lineTo(left + mCornerFlapSide, top);
            mCompatibilityModePath.lineTo(left, top + mCornerFlapSide);
            mCompatibilityModePath.close();
            canvas.drawPath(mCompatibilityModePath, mCompatibilityModeBackgroundPaint);
        }
        if (mTopRightCornerStyle == CORNER_STYLE_FLAP) {
            mCompatibilityModePath.rewind();
            mCompatibilityModePath.moveTo(right, top);
            mCompatibilityModePath.lineTo(right, top + mCornerFlapSide);
            mCompatibilityModePath.lineTo(right - mCornerFlapSide, top);
            mCompatibilityModePath.close();
            canvas.drawPath(mCompatibilityModePath, mCompatibilityModeBackgroundPaint);
        }
        if (mBottomRightCornerStyle == CORNER_STYLE_FLAP) {
            mCompatibilityModePath.rewind();
            mCompatibilityModePath.moveTo(right, bottom);
            mCompatibilityModePath.lineTo(right - mCornerFlapSide, bottom);
            mCompatibilityModePath.lineTo(right, bottom - mCornerFlapSide);
            mCompatibilityModePath.close();
            canvas.drawPath(mCompatibilityModePath, mCompatibilityModeBackgroundPaint);
        }
        if (mBottomLeftCornerStyle == CORNER_STYLE_FLAP) {
            mCompatibilityModePath.rewind();
            mCompatibilityModePath.moveTo(left, bottom);
            mCompatibilityModePath.lineTo(left, bottom - mCornerFlapSide);
            mCompatibilityModePath.lineTo(left + mCornerFlapSide, bottom);
            mCompatibilityModePath.close();
            canvas.drawPath(mCompatibilityModePath, mCompatibilityModeBackgroundPaint);
        }
!!!36445623.java!!!	pauseInvalidate() : void
        mEatInvalidates = true;
!!!36445751.java!!!	resumeInvalidate() : void
        mEatInvalidates = false;
!!!36445879.java!!!	recalculatePath() : void
        Rect bounds = getBounds();

        if (bounds.isEmpty()) {
            return;
        }

        // Setup.
        float left = bounds.left + mBorderWidth / 2;
        float top = bounds.top + mBorderWidth / 2;
        float right = bounds.right - mBorderWidth / 2;
        float bottom = bounds.bottom - mBorderWidth / 2;
        RectF roundedCornerRectF = sRectF;
        roundedCornerRectF.set(0, 0, 2 * mCornerRoundRadius, 2 * mCornerRoundRadius);
        mClipPath.rewind();

        switch (mTopLeftCornerStyle) {
            case CORNER_STYLE_SHARP:
                mClipPath.moveTo(left, top);
                break;
            case CORNER_STYLE_ROUND:
                roundedCornerRectF.offsetTo(left, top);
                mClipPath.arcTo(roundedCornerRectF, START_LEFT, QUARTER_CIRCLE);
                break;
            case CORNER_STYLE_FLAP:
                mClipPath.moveTo(left, top - mCornerFlapSide);
                mClipPath.lineTo(left + mCornerFlapSide, top);
                break;
        }

        switch (mTopRightCornerStyle) {
            case CORNER_STYLE_SHARP:
                mClipPath.lineTo(right, top);
                break;
            case CORNER_STYLE_ROUND:
                roundedCornerRectF.offsetTo(right - roundedCornerRectF.width(), top);
                mClipPath.arcTo(roundedCornerRectF, START_TOP, QUARTER_CIRCLE);
                break;
            case CORNER_STYLE_FLAP:
                mClipPath.lineTo(right - mCornerFlapSide, top);
                mClipPath.lineTo(right, top + mCornerFlapSide);
                break;
        }

        switch (mBottomRightCornerStyle) {
            case CORNER_STYLE_SHARP:
                mClipPath.lineTo(right, bottom);
                break;
            case CORNER_STYLE_ROUND:
                roundedCornerRectF.offsetTo(right - roundedCornerRectF.width(),
                        bottom - roundedCornerRectF.height());
                mClipPath.arcTo(roundedCornerRectF, START_RIGHT, QUARTER_CIRCLE);
                break;
            case CORNER_STYLE_FLAP:
                mClipPath.lineTo(right, bottom - mCornerFlapSide);
                mClipPath.lineTo(right - mCornerFlapSide, bottom);
                break;
        }

        switch (mBottomLeftCornerStyle) {
            case CORNER_STYLE_SHARP:
                mClipPath.lineTo(left, bottom);
                break;
            case CORNER_STYLE_ROUND:
                roundedCornerRectF.offsetTo(left, bottom - roundedCornerRectF.height());
                mClipPath.arcTo(roundedCornerRectF, START_BOTTOM, QUARTER_CIRCLE);
                break;
            case CORNER_STYLE_FLAP:
                mClipPath.lineTo(left + mCornerFlapSide, bottom);
                mClipPath.lineTo(left, bottom - mCornerFlapSide);
                break;
        }

        // Finish.
        mClipPath.close();
!!!36446007.java!!!	resolveCornerStyles() : void
        boolean isLtr = getLayoutDirectionLocal() == View.LAYOUT_DIRECTION_LTR;
        setCornerStyles(
            isLtr ? mTopStartCornerStyle : mTopEndCornerStyle,
            isLtr ? mTopEndCornerStyle : mTopStartCornerStyle,
            isLtr ? mBottomEndCornerStyle : mBottomStartCornerStyle,
            isLtr ? mBottomStartCornerStyle : mBottomEndCornerStyle);
!!!36446135.java!!!	setCornerStyles(in topLeft : int, in topRight : int, in bottomRight : int, in bottomLeft : int) : void
        boolean changed = mTopLeftCornerStyle != topLeft
            || mTopRightCornerStyle != topRight
            || mBottomRightCornerStyle != bottomRight
            || mBottomLeftCornerStyle != bottomLeft;

        mTopLeftCornerStyle = topLeft;
        mTopRightCornerStyle = topRight;
        mBottomRightCornerStyle = bottomRight;
        mBottomLeftCornerStyle = bottomLeft;

        if (changed) {
            recalculatePath();
        }
