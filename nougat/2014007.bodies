class BitmapUtils
!!!36446263.java!!!	calculateCroppedSrcRect(in srcW : int, in srcH : int, in dstW : int, in dstH : int, in dstSliceH : int, in sampleSize : int, in horizSliceFrac : float, in vertSliceFrac : float, in absoluteFrac : boolean, in verticalMultiplier : float, in outRect : Rect) : void
        if (sampleSize < 1) {
            sampleSize = 1;
        }
        final float regularScale;
        final float wScale = (float) srcW / dstW;
        final float hScale = (float) srcH / dstH;
        if (hScale < wScale) {
            regularScale = hScale / verticalMultiplier;
        } else {
            regularScale = wScale;
        }

        final float scale = Math.min(sampleSize, regularScale);

        final int srcCroppedW = Math.round(dstW * scale);
        final int srcCroppedH = Math.round(dstH * scale);
        final int srcCroppedSliceH = Math.round(dstSliceH * scale);
        final int srcHalfSliceH = Math.min(srcCroppedSliceH, srcH) / 2;

        outRect.left = (int) (horizSliceFrac * (srcW - srcCroppedW));
        outRect.right = outRect.left + srcCroppedW;

        final int centerV;
        if (absoluteFrac) {
            final int minCenterV = srcHalfSliceH;
            final int maxCenterV = srcH - srcHalfSliceH;
            centerV = Math.max(minCenterV, Math.min(maxCenterV, Math.round(srcH * vertSliceFrac)));
        } else {
            centerV = Math
                    .round(Math.abs(srcH - srcCroppedSliceH) * vertSliceFrac + srcHalfSliceH);
        }

        outRect.top = centerV - srcCroppedH / 2;
        outRect.bottom = outRect.top + srcCroppedH;
!!!36446391.java!!!	calculateCroppedSrcRect(in srcW : int, in srcH : int, in dstW : int, in dstH : int, inout outRect : Rect) : void
        calculateCroppedSrcRect(srcW, srcH, dstW, dstH, Integer.MAX_VALUE, outRect);
!!!36446519.java!!!	calculateCroppedSrcRect(in srcW : int, in srcH : int, in dstW : int, in dstH : int, in sampleSize : int, inout outRect : Rect) : void
        if (sampleSize < 1) {
            sampleSize = 1;
        }
        final float regularScale = Math.min(
                (float) srcW / dstW,
                (float) srcH / dstH);

        final float scale = Math.min(sampleSize, regularScale);

        final int srcCroppedW = Math.round(dstW * scale);
        final int srcCroppedH = Math.round(dstH * scale);

        outRect.left = (srcW - srcCroppedW) / 2;
        outRect.right = outRect.left + srcCroppedW;

        outRect.top = (srcH - srcCroppedH) / 2;
        outRect.bottom = outRect.top + srcCroppedH;
