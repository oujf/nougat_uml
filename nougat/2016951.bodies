class BluetoothMasClient
!!!36461111.java!!!	sendToClient(in event : int, inout success : boolean) : void
        sendToClient(event, success, null);
!!!36461239.java!!!	sendToClient(in event : int, inout success : boolean, in param : int) : void
        sendToClient(event, success, Integer.valueOf(param));
!!!36461367.java!!!	sendToClient(in event : int, inout success : boolean, inout param : Object) : void
        // Send  event, status and notification state for both sucess and failure case.
        mCallback.obtainMessage(event, success ? STATUS_OK : STATUS_FAILED, mMas.getMasInstanceId(),
            param).sendToTarget();
!!!36462903.java!!!	BluetoothMasClient(inout device : BluetoothDevice, inout mas : SdpMasRecord, inout callback : Handler)
        mDevice = device;
        mMas = mas;
        mCallback = callback;

        mPath = new ArrayDeque<String>();
!!!36463031.java!!!	getInstanceData() : SdpMasRecord
        return mMas;
!!!36463159.java!!!	connect() : void
        if (mSessionHandler == null) {
            mSessionHandler = new SessionHandler(this);
        }

        if (mConnectThread == null && mObexSession == null) {
            mConnectionState = ConnectionState.CONNECTING;

            mConnectThread = new SocketConnectThread();
            mConnectThread.start();
        }
!!!36463287.java!!!	disconnect() : void
        if (mConnectThread == null && mObexSession == null) {
            return;
        }

        mConnectionState = ConnectionState.DISCONNECTING;

        if (mConnectThread != null) {
            mConnectThread.interrupt();
        }

        if (mObexSession != null) {
            mObexSession.stop();
        }
!!!36463415.java!!!	finalize() : void
        disconnect();
!!!36463543.java!!!	getState() : BluetoothMasClient::ConnectionState
        return mConnectionState;
!!!36463671.java!!!	enableNotifications() : boolean
        Log.v(TAG, "enableNotifications()");

        if (mMnsService == null) {
            mMnsService = new BluetoothMnsService();
        }

        mMnsService.registerCallback(mMas.getMasInstanceId(), mSessionHandler);

        BluetoothMasRequest request = new BluetoothMasRequestSetNotificationRegistration(true);
        return mObexSession.makeRequest(request);
!!!36463799.java!!!	disableNotifications() : boolean
        Log.v(TAG, "enableNotifications()");

        if (mMnsService != null) {
            mMnsService.unregisterCallback(mMas.getMasInstanceId());
        }

        mMnsService = null;

        BluetoothMasRequest request = new BluetoothMasRequestSetNotificationRegistration(false);
        return mObexSession.makeRequest(request);
!!!36463927.java!!!	setNotificationRegistration(inout status : boolean) : boolean
        if (mObexSession == null) {
            return false;
        }

        if (status) {
            return enableNotifications();
        } else {
            return disableNotifications();
        }
!!!36464055.java!!!	getNotificationRegistration() : boolean
        return mNotificationEnabled;
!!!36464183.java!!!	setFolderRoot() : boolean
        if (mObexSession == null) {
            return false;
        }

        BluetoothMasRequest request = new BluetoothMasRequestSetPath(true);
        return mObexSession.makeRequest(request);
!!!36464311.java!!!	setFolderUp() : boolean
        if (mObexSession == null) {
            return false;
        }

        BluetoothMasRequest request = new BluetoothMasRequestSetPath(false);
        return mObexSession.makeRequest(request);
!!!36464439.java!!!	setFolderDown(inout name : String) : boolean
        if (mObexSession == null) {
            return false;
        }

        if (name == null || name.isEmpty() || name.contains("/")) {
            return false;
        }

        BluetoothMasRequest request = new BluetoothMasRequestSetPath(name);
        return mObexSession.makeRequest(request);
!!!36464567.java!!!	getCurrentPath() : String
        if (mPath.size() == 0) {
            return "";
        }

        Iterator<String> iter = mPath.iterator();

        StringBuilder sb = new StringBuilder(iter.next());

        while (iter.hasNext()) {
            sb.append("/").append(iter.next());
        }

        return sb.toString();
!!!36464695.java!!!	getFolderListing() : boolean
        return getFolderListing((short) 0, (short) 0);
!!!36464823.java!!!	getFolderListing(in maxListCount : int, in listStartOffset : int) : boolean
        if (mObexSession == null) {
            return false;
        }

        BluetoothMasRequest request = new BluetoothMasRequestGetFolderListing(maxListCount,
                listStartOffset);
        return mObexSession.makeRequest(request);
!!!36464951.java!!!	getFolderListingSize() : boolean
        if (mObexSession == null) {
            return false;
        }

        BluetoothMasRequest request = new BluetoothMasRequestGetFolderListingSize();
        return mObexSession.makeRequest(request);
!!!36465079.java!!!	getMessagesListing(inout folder : String, in parameters : int) : boolean
        return getMessagesListing(folder, parameters, null, (byte) 0, 0, 0);
!!!36465207.java!!!	getMessagesListing(inout folder : String, in parameters : int, inout filter : BluetoothMasClient::MessagesFilter, in subjectLength : int) : boolean

        return getMessagesListing(folder, parameters, filter, subjectLength, 0, 0);
!!!36465335.java!!!	getMessagesListing(inout folder : String, in parameters : int, inout filter : BluetoothMasClient::MessagesFilter, in subjectLength : int, in maxListCount : int, in listStartOffset : int) : boolean

        if (mObexSession == null) {
            return false;
        }

        BluetoothMasRequest request = new BluetoothMasRequestGetMessagesListing(folder,
                parameters, filter, subjectLength, maxListCount, listStartOffset);
        return mObexSession.makeRequest(request);
!!!36465463.java!!!	getMessagesListingSize() : boolean
        if (mObexSession == null) {
            return false;
        }

        BluetoothMasRequest request = new BluetoothMasRequestGetMessagesListingSize();
        return mObexSession.makeRequest(request);
!!!36465591.java!!!	getMessage(inout handle : String, inout attachment : boolean) : boolean
        if (mObexSession == null) {
            return false;
        }

        try {
            /* just to validate */
            new BigInteger(handle, 16);
        } catch (NumberFormatException e) {
            return false;
        }

        // Since we support only text messaging via Bluetooth, it is OK to restrict the requests to
        // force conversion to UTF-8.
        BluetoothMasRequest request =
            new BluetoothMasRequestGetMessage(handle, CharsetType.UTF_8, attachment);
        return mObexSession.makeRequest(request);
!!!36465719.java!!!	setMessageReadStatus(inout handle : String, inout read : boolean) : boolean
        if (mObexSession == null) {
            return false;
        }

        try {
            /* just to validate */
            new BigInteger(handle, 16);
        } catch (NumberFormatException e) {
            return false;
        }

        BluetoothMasRequest request = new BluetoothMasRequestSetMessageStatus(handle,
                StatusIndicator.READ, read);
        return mObexSession.makeRequest(request);
!!!36465847.java!!!	setMessageDeletedStatus(inout handle : String, inout deleted : boolean) : boolean
        if (mObexSession == null) {
            return false;
        }

        try {
            /* just to validate */
            new BigInteger(handle, 16);
        } catch (NumberFormatException e) {
            return false;
        }

        BluetoothMasRequest request = new BluetoothMasRequestSetMessageStatus(handle,
                StatusIndicator.DELETED, deleted);
        return mObexSession.makeRequest(request);
!!!36465975.java!!!	pushMessage(inout folder : String, inout bmsg : BluetoothMapBmessage, inout charset : BluetoothMasClient::CharsetType) : boolean
        return pushMessage(folder, bmsg, charset, false, false);
!!!36466103.java!!!	pushMessage(inout folder : String, inout bmsg : BluetoothMapBmessage, inout charset : BluetoothMasClient::CharsetType, inout transparent : boolean, inout retry : boolean) : boolean
        if (mObexSession == null) {
            return false;
        }

        String bmsgString = BluetoothMapBmessageBuilder.createBmessage(bmsg);

        BluetoothMasRequest request =
                new BluetoothMasRequestPushMessage(folder, bmsgString, charset, transparent, retry);
        return mObexSession.makeRequest(request);
!!!36466231.java!!!	updateInbox() : boolean
        if (mObexSession == null) {
            return false;
        }

        BluetoothMasRequest request = new BluetoothMasRequestUpdateInbox();
        return mObexSession.makeRequest(request);
