class SessionHandler
!!!36460855.java!!!	SessionHandler(inout client : BluetoothMasClient)
            super();

            mClient = new WeakReference<BluetoothMasClient>(client);
!!!36460983.java!!!	handleMessage(inout msg : Message) : void

            BluetoothMasClient client = mClient.get();
            if (client == null) {
                return;
            }
            Log.v(TAG, "handleMessage  "+msg.what);

            switch (msg.what) {
                case SOCKET_ERROR:
                    client.mConnectThread = null;
                    client.sendToClient(EVENT_CONNECT, false);
                    break;

                case SOCKET_CONNECTED:
                    client.mConnectThread = null;

                    client.mObexTransport = (ObexTransport) msg.obj;

                    client.mObexSession = new BluetoothMasObexClientSession(client.mObexTransport,
                            client.mSessionHandler);
                    client.mObexSession.start();
                    break;

                case BluetoothMasObexClientSession.MSG_OBEX_CONNECTED:
                    client.mPath.clear(); // we're in root after connected
                    client.mConnectionState = ConnectionState.CONNECTED;
                    client.sendToClient(EVENT_CONNECT, true);
                    break;

                case BluetoothMasObexClientSession.MSG_OBEX_DISCONNECTED:
                    client.mConnectionState = ConnectionState.DISCONNECTED;
                    client.mNotificationEnabled = false;
                    client.mObexSession = null;
                    client.sendToClient(EVENT_CONNECT, false);
                    break;

                case BluetoothMasObexClientSession.MSG_REQUEST_COMPLETED:
                    BluetoothMasRequest request = (BluetoothMasRequest) msg.obj;
                    int status = request.isSuccess() ? STATUS_OK : STATUS_FAILED;

                    Log.v(TAG, "MSG_REQUEST_COMPLETED (" + status + ") for "
                            + request.getClass().getName());

                    if (request instanceof BluetoothMasRequestUpdateInbox) {
                        client.sendToClient(EVENT_UPDATE_INBOX, request.isSuccess());

                    } else if (request instanceof BluetoothMasRequestSetPath) {
                        if (request.isSuccess()) {
                            BluetoothMasRequestSetPath req = (BluetoothMasRequestSetPath) request;
                            switch (req.mDir) {
                                case UP:
                                    if (client.mPath.size() > 0) {
                                        client.mPath.removeLast();
                                    }
                                    break;

                                case ROOT:
                                    client.mPath.clear();
                                    break;

                                case DOWN:
                                    client.mPath.addLast(req.mName);
                                    break;
                            }
                        }

                        client.sendToClient(EVENT_SET_PATH, request.isSuccess(),
                                client.getCurrentPath());

                    } else if (request instanceof BluetoothMasRequestGetFolderListing) {
                        BluetoothMasRequestGetFolderListing req = (BluetoothMasRequestGetFolderListing) request;
                        ArrayList<String> folders = req.getList();

                        client.sendToClient(EVENT_GET_FOLDER_LISTING, request.isSuccess(), folders);

                    } else if (request instanceof BluetoothMasRequestGetFolderListingSize) {
                        int size = ((BluetoothMasRequestGetFolderListingSize) request).getSize();

                        client.sendToClient(EVENT_GET_FOLDER_LISTING_SIZE, request.isSuccess(),
                                size);

                    } else if (request instanceof BluetoothMasRequestGetMessagesListing) {
                        BluetoothMasRequestGetMessagesListing req = (BluetoothMasRequestGetMessagesListing) request;
                        ArrayList<BluetoothMapMessage> msgs = req.getList();

                        client.sendToClient(EVENT_GET_MESSAGES_LISTING, request.isSuccess(), msgs);

                    } else if (request instanceof BluetoothMasRequestGetMessage) {
                        BluetoothMasRequestGetMessage req = (BluetoothMasRequestGetMessage) request;
                        BluetoothMapBmessage bmsg = req.getMessage();

                        client.sendToClient(EVENT_GET_MESSAGE, request.isSuccess(), bmsg);

                    } else if (request instanceof BluetoothMasRequestSetMessageStatus) {
                        client.sendToClient(EVENT_SET_MESSAGE_STATUS, request.isSuccess());

                    } else if (request instanceof BluetoothMasRequestPushMessage) {
                        BluetoothMasRequestPushMessage req = (BluetoothMasRequestPushMessage) request;
                        String handle = req.getMsgHandle();

                        client.sendToClient(EVENT_PUSH_MESSAGE, request.isSuccess(), handle);

                    } else if (request instanceof BluetoothMasRequestSetNotificationRegistration) {
                        BluetoothMasRequestSetNotificationRegistration req = (BluetoothMasRequestSetNotificationRegistration) request;

                        client.mNotificationEnabled = req.isSuccess() ? req.getStatus()
                                : client.mNotificationEnabled;

                        client.sendToClient(EVENT_SET_NOTIFICATION_REGISTRATION,
                                request.isSuccess(),
                                client.mNotificationEnabled ? 1 : 0);
                    } else if (request instanceof BluetoothMasRequestGetMessagesListingSize) {
                        int size = ((BluetoothMasRequestGetMessagesListingSize) request).getSize();
                        client.sendToClient(EVENT_GET_MESSAGES_LISTING_SIZE, request.isSuccess(),
                                size);
                    }
                    break;

                case BluetoothMnsService.EVENT_REPORT:
                    /* pass event report directly to app */
                    client.sendToClient(EVENT_EVENT_REPORT, true, msg.obj);
                    break;
            }
