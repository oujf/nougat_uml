class BluetoothMasRequestGetMessagesListing
!!!36470071.java!!!	BluetoothMasRequestGetMessagesListing(inout folderName : String, in parameters : int, inout filter : BluetoothMasClient::MessagesFilter, in subjectLength : int, in maxListCount : int, in listStartOffset : int)
        if (subjectLength < 0 || subjectLength > 255) {
            throw new IllegalArgumentException("subjectLength should be [0..255]");
        }

        if (maxListCount < 0 || maxListCount > 65535) {
            throw new IllegalArgumentException("maxListCount should be [0..65535]");
        }

        if (listStartOffset < 0 || listStartOffset > 65535) {
            throw new IllegalArgumentException("listStartOffset should be [0..65535]");
        }

        mHeaderSet.setHeader(HeaderSet.TYPE, TYPE);

        if (folderName == null) {
            mHeaderSet.setHeader(HeaderSet.NAME, "");
        } else {
            mHeaderSet.setHeader(HeaderSet.NAME, folderName);
        }

        ObexAppParameters oap = new ObexAppParameters();

        if (filter != null) {
            if (filter.messageType != MessagesFilter.MESSAGE_TYPE_ALL) {
                oap.add(OAP_TAGID_FILTER_MESSAGE_TYPE, filter.messageType);
            }

            if (filter.periodBegin != null) {
                oap.add(OAP_TAGID_FILTER_PERIOD_BEGIN, filter.periodBegin);
            }

            if (filter.periodEnd != null) {
                oap.add(OAP_TAGID_FILTER_PERIOD_END, filter.periodEnd);
            }

            if (filter.readStatus != MessagesFilter.READ_STATUS_ANY) {
                oap.add(OAP_TAGID_FILTER_READ_STATUS, filter.readStatus);
            }

            if (filter.recipient != null) {
                oap.add(OAP_TAGID_FILTER_RECIPIENT, filter.recipient);
            }

            if (filter.originator != null) {
                oap.add(OAP_TAGID_FILTER_ORIGINATOR, filter.originator);
            }

            if (filter.priority != MessagesFilter.PRIORITY_ANY) {
                oap.add(OAP_TAGID_FILTER_PRIORITY, filter.priority);
            }
        }

        if (subjectLength != 0) {
            oap.add(OAP_TAGID_SUBJECT_LENGTH, (byte) subjectLength);
        }
        /* Include parameterMask only when specific values are selected,
         * to avoid IOT specific issue with no paramterMask header support.
         */
        if (parameters >  0 ) {
            oap.add(OAP_TAGID_PARAMETER_MASK, parameters);
        }
        // Allow GetMessageListing for maxlistcount value 0 also.
        if (maxListCount >= 0) {
            oap.add(OAP_TAGID_MAX_LIST_COUNT, (short) maxListCount);
        }

        if (listStartOffset != 0) {
            oap.add(OAP_TAGID_START_OFFSET, (short) listStartOffset);
        }

        oap.addToHeaderSet(mHeaderSet);
!!!36470199.java!!!	readResponse(inout stream : InputStream) : void
        mResponse = new BluetoothMapMessagesListing(stream);
!!!36470327.java!!!	readResponseHeaders(inout headerset : HeaderSet) : void
        ObexAppParameters oap = ObexAppParameters.fromHeaderSet(headerset);

        mNewMessage = ((oap.getByte(OAP_TAGID_NEW_MESSAGE) & 0x01) == 1);

        if (oap.exists(OAP_TAGID_MSE_TIME)) {
            String mseTime = oap.getString(OAP_TAGID_MSE_TIME);
            if(mseTime != null )
               mServerTime = (new ObexTime(mseTime)).getTime();
        }
!!!36470455.java!!!	getList() : BluetoothMapMessage
        if (mResponse == null) {
            return null;
        }

        return mResponse.getList();
!!!36470583.java!!!	getNewMessageStatus() : boolean
        return mNewMessage;
!!!36470711.java!!!	getMseTime() : Date
        return mServerTime;
!!!36470839.java!!!	execute(inout session : ClientSession) : void
        executeGet(session);
