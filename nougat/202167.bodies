class ExecutionStack
!!!706487.java!!!	ExecutionStack(in maxStack : int)
        super(maxStack != 0);
        stack = new TypeBearer[maxStack];
        local = new boolean[maxStack];
        stackPtr = 0;
!!!706615.java!!!	copy() : ExecutionStack
        ExecutionStack result = new ExecutionStack(stack.length);

        System.arraycopy(stack, 0, result.stack, 0, stack.length);
        System.arraycopy(local, 0, result.local, 0, local.length);
        result.stackPtr = stackPtr;

        return result;
!!!706743.java!!!	annotate(inout ex : ExceptionWithContext) : void
        int limit = stackPtr - 1;

        for (int i = 0; i <= limit; i++) {
            String idx = (i == limit) ? "top0" : Hex.u2(limit - i);

            ex.addContext("stack[" + idx + "]: " +
                          stackElementString(stack[i]));
        }
!!!706871.java!!!	makeInitialized(inout type : Type) : void
        if (stackPtr == 0) {
            // We have to check for this before checking for immutability.
            return;
        }

        throwIfImmutable();

        Type initializedType = type.getInitializedType();

        for (int i = 0; i < stackPtr; i++) {
            if (stack[i] == type) {
                stack[i] = initializedType;
            }
        }
!!!706999.java!!!	getMaxStack() : int
        return stack.length;
!!!707127.java!!!	size() : int
        return stackPtr;
!!!707255.java!!!	clear() : void
        throwIfImmutable();

        for (int i = 0; i < stackPtr; i++) {
            stack[i] = null;
            local[i] = false;
        }

        stackPtr = 0;
!!!707383.java!!!	push(inout type : TypeBearer) : void
        throwIfImmutable();

        int category;

        try {
            type = type.getFrameType();
            category = type.getType().getCategory();
        } catch (NullPointerException ex) {
            // Elucidate the exception.
            throw new NullPointerException("type == null");
        }

        if ((stackPtr + category) > stack.length) {
            throwSimException("overflow");
            return;
        }

        if (category == 2) {
            stack[stackPtr] = null;
            stackPtr++;
        }

        stack[stackPtr] = type;
        stackPtr++;
!!!707511.java!!!	setLocal() : void
        throwIfImmutable();

        local[stackPtr] = true;
!!!707639.java!!!	peek(in n : int) : TypeBearer
        if (n < 0) {
            throw new IllegalArgumentException("n < 0");
        }

        if (n >= stackPtr) {
            return throwSimException("underflow");
        }

        return stack[stackPtr - n - 1];
!!!707767.java!!!	peekLocal(in n : int) : boolean
        if (n < 0) {
            throw new IllegalArgumentException("n < 0");
        }

        if (n >= stackPtr) {
            throw new SimException("stack: underflow");
        }

        return local[stackPtr - n - 1];
!!!707895.java!!!	peekType(in n : int) : Type
        return peek(n).getType();
!!!708023.java!!!	pop() : TypeBearer
        throwIfImmutable();

        TypeBearer result = peek(0);

        stack[stackPtr - 1] = null;
        local[stackPtr - 1] = false;
        stackPtr -= result.getType().getCategory();

        return result;
!!!708151.java!!!	change(in n : int, inout type : TypeBearer) : void
        throwIfImmutable();

        try {
            type = type.getFrameType();
        } catch (NullPointerException ex) {
            // Elucidate the exception.
            throw new NullPointerException("type == null");
        }

        int idx = stackPtr - n - 1;
        TypeBearer orig = stack[idx];

        if ((orig == null) ||
            (orig.getType().getCategory() != type.getType().getCategory())) {
            throwSimException("incompatible substitution: " +
                              stackElementString(orig) + " -> " +
                              stackElementString(type));
        }

        stack[idx] = type;
!!!708279.java!!!	merge(inout other : ExecutionStack) : ExecutionStack
        try {
            return Merger.mergeStack(this, other);
        } catch (SimException ex) {
            ex.addContext("underlay stack:");
            this.annotate(ex);
            ex.addContext("overlay stack:");
            other.annotate(ex);
            throw ex;
        }
!!!708407.java!!!	stackElementString(inout type : TypeBearer) : String
        if (type == null) {
            return "<invalid>";
        }

        return type.toString();
!!!708535.java!!!	throwSimException(inout msg : String) : TypeBearer
        throw new SimException("stack: " + msg);
