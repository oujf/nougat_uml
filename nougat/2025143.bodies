class RecipientAlternatesAdapter
!!!36520247.java!!!	getMatchingRecipients(inout context : Context, inout adapter : BaseRecipientAdapter, inout inAddresses : ArrayList<String>, inout account : Account, inout callback : RecipientAlternatesAdapter::RecipientMatchCallback, inout permissionsCheckListener : ChipsUtil::PermissionsCheckListener) : void
        getMatchingRecipients(context, adapter, inAddresses, QUERY_TYPE_EMAIL, account, callback,
                permissionsCheckListener);
!!!36520375.java!!!	getMatchingRecipients(inout context : Context, inout adapter : BaseRecipientAdapter, inout inAddresses : ArrayList<String>, in addressType : int, inout account : Account, inout callback : RecipientAlternatesAdapter::RecipientMatchCallback, inout permissionsCheckListener : ChipsUtil::PermissionsCheckListener) : void
        Queries.Query query;
        if (addressType == QUERY_TYPE_EMAIL) {
            query = Queries.EMAIL;
        } else {
            query = Queries.PHONE;
        }
        int addressesSize = Math.min(MAX_LOOKUPS, inAddresses.size());
        HashSet<String> addresses = new HashSet<String>();
        StringBuilder bindString = new StringBuilder();
        // Create the "?" string and set up arguments.
        for (int i = 0; i < addressesSize; i++) {
            Rfc822Token[] tokens = Rfc822Tokenizer.tokenize(inAddresses.get(i).toLowerCase());
            addresses.add(tokens.length > 0 ? tokens[0].getAddress() : inAddresses.get(i));
            bindString.append("?");
            if (i < addressesSize - 1) {
                bindString.append(",");
            }
        }

        if (Log.isLoggable(TAG, Log.DEBUG)) {
            Log.d(TAG, "Doing reverse lookup for " + addresses.toString());
        }

        String[] addressArray = new String[addresses.size()];
        addresses.toArray(addressArray);
        HashMap<String, RecipientEntry> recipientEntries = null;
        Cursor c = null;

        try {
            if (ChipsUtil.hasPermissions(context, permissionsCheckListener)) {
                c = context.getContentResolver().query(
                        query.getContentUri(),
                        query.getProjection(),
                        query.getProjection()[Queries.Query.DESTINATION] + " IN ("
                                + bindString.toString() + ")", addressArray, null);
            }
            recipientEntries = processContactEntries(c, null /* directoryId */);
            callback.matchesFound(recipientEntries);
        } finally {
            if (c != null) {
                c.close();
            }
        }

        final Set<String> matchesNotFound = new HashSet<String>();

        getMatchingRecipientsFromDirectoryQueries(context, recipientEntries,
                addresses, account, matchesNotFound, query, callback, permissionsCheckListener);

        getMatchingRecipientsFromExtensionMatcher(adapter, matchesNotFound, callback);
!!!36520503.java!!!	getMatchingRecipientsFromDirectoryQueries(inout context : Context, inout recipientEntries : Map<String, RecipientEntry>, inout addresses : Set<String>, inout account : Account, inout matchesNotFound : Set<String>, inout callback : RecipientAlternatesAdapter::RecipientMatchCallback, inout permissionsCheckListener : ChipsUtil::PermissionsCheckListener) : void
        getMatchingRecipientsFromDirectoryQueries(
                context, recipientEntries, addresses, account,
                matchesNotFound, Queries.EMAIL, callback, permissionsCheckListener);
!!!36520631.java!!!	getMatchingRecipientsFromDirectoryQueries(inout context : Context, inout recipientEntries : Map<String, RecipientEntry>, inout addresses : Set<String>, inout account : Account, inout matchesNotFound : Set<String>, inout query : Queries::Query, inout callback : RecipientAlternatesAdapter::RecipientMatchCallback, inout permissionsCheckListener : ChipsUtil::PermissionsCheckListener) : void
        // See if any entries did not resolve; if so, we need to check other
        // directories

        if (recipientEntries.size() < addresses.size()) {
            // Run a directory query for each unmatched recipient.
            HashSet<String> unresolvedAddresses = new HashSet<String>();
            for (String address : addresses) {
                if (!recipientEntries.containsKey(address)) {
                    unresolvedAddresses.add(address);
                }
            }
            matchesNotFound.addAll(unresolvedAddresses);

            final List<DirectorySearchParams> paramsList;
            Cursor directoryCursor = null;
            try {
                if (ChipsUtil.hasPermissions(context, permissionsCheckListener)) {
                    directoryCursor = context.getContentResolver().query(
                            DirectoryListQuery.URI, DirectoryListQuery.PROJECTION,
                            null, null, null);
                }
                if (directoryCursor == null) {
                    return;
                }
                paramsList = BaseRecipientAdapter.setupOtherDirectories(
                        context, directoryCursor, account);
            } finally {
                if (directoryCursor != null) {
                    directoryCursor.close();
                }
            }

            if (paramsList != null) {
                Cursor directoryContactsCursor = null;
                for (String unresolvedAddress : unresolvedAddresses) {
                    for (int i = 0; i < paramsList.size(); i++) {
                        final long directoryId = paramsList.get(i).directoryId;
                        try {
                            directoryContactsCursor = doQuery(unresolvedAddress, 1 /* limit */,
                                    directoryId, account, context, query, permissionsCheckListener);
                            if (directoryContactsCursor != null
                                    && directoryContactsCursor.getCount() != 0) {
                                // We found the directory with at least one contact
                                final Map<String, RecipientEntry> entries =
                                        processContactEntries(directoryContactsCursor, directoryId);

                                for (final String address : entries.keySet()) {
                                    matchesNotFound.remove(address);
                                }

                                callback.matchesFound(entries);
                                break;
                            }
                        } finally {
                            if (directoryContactsCursor != null) {
                                directoryContactsCursor.close();
                                directoryContactsCursor = null;
                            }
                        }
                    }
                }
            }
        }
!!!36520759.java!!!	getMatchingRecipientsFromExtensionMatcher(inout adapter : BaseRecipientAdapter, inout matchesNotFound : Set<String>, inout callback : RecipientAlternatesAdapter::RecipientMatchCallback) : void
        // If no matches found in contact provider or the directories, try the extension
        // matcher.
        // todo (aalbert): This whole method needs to be in the adapter?
        if (adapter != null) {
            final Map<String, RecipientEntry> entries =
                    adapter.getMatchingRecipients(matchesNotFound);
            if (entries != null && entries.size() > 0) {
                callback.matchesFound(entries);
                for (final String address : entries.keySet()) {
                    matchesNotFound.remove(address);
                }
            }
        }
        callback.matchesNotFound(matchesNotFound);
!!!36520887.java!!!	processContactEntries(inout c : Cursor, inout directoryId : Long) : String
        HashMap<String, RecipientEntry> recipientEntries = new HashMap<String, RecipientEntry>();
        if (c != null && c.moveToFirst()) {
            do {
                String address = c.getString(Queries.Query.DESTINATION);

                final RecipientEntry newRecipientEntry = RecipientEntry.constructTopLevelEntry(
                        c.getString(Queries.Query.NAME),
                        c.getInt(Queries.Query.DISPLAY_NAME_SOURCE),
                        c.getString(Queries.Query.DESTINATION),
                        c.getInt(Queries.Query.DESTINATION_TYPE),
                        c.getString(Queries.Query.DESTINATION_LABEL),
                        c.getLong(Queries.Query.CONTACT_ID),
                        directoryId,
                        c.getLong(Queries.Query.DATA_ID),
                        c.getString(Queries.Query.PHOTO_THUMBNAIL_URI),
                        true,
                        c.getString(Queries.Query.LOOKUP_KEY));

                /*
                 * In certain situations, we may have two results for one address, where one of the
                 * results is just the email address, and the other has a name and photo, so we want
                 * to use the better one.
                 */
                final RecipientEntry recipientEntry =
                        getBetterRecipient(recipientEntries.get(address), newRecipientEntry);

                recipientEntries.put(address, recipientEntry);
                if (Log.isLoggable(TAG, Log.DEBUG)) {
                    Log.d(TAG, "Received reverse look up information for " + address
                            + " RESULTS: "
                            + " NAME : " + c.getString(Queries.Query.NAME)
                            + " CONTACT ID : " + c.getLong(Queries.Query.CONTACT_ID)
                            + " ADDRESS :" + c.getString(Queries.Query.DESTINATION));
                }
            } while (c.moveToNext());
        }
        return recipientEntries;
!!!36521015.java!!!	getBetterRecipient(in entry1 : RecipientEntry, in entry2 : RecipientEntry) : RecipientEntry
        // If only one has passed in, use it
        if (entry2 == null) {
            return entry1;
        }

        if (entry1 == null) {
            return entry2;
        }

        // If only one has a display name, use it
        if (!TextUtils.isEmpty(entry1.getDisplayName())
                && TextUtils.isEmpty(entry2.getDisplayName())) {
            return entry1;
        }

        if (!TextUtils.isEmpty(entry2.getDisplayName())
                && TextUtils.isEmpty(entry1.getDisplayName())) {
            return entry2;
        }

        // If only one has a display name that is not the same as the destination, use it
        if (!TextUtils.equals(entry1.getDisplayName(), entry1.getDestination())
                && TextUtils.equals(entry2.getDisplayName(), entry2.getDestination())) {
            return entry1;
        }

        if (!TextUtils.equals(entry2.getDisplayName(), entry2.getDestination())
                && TextUtils.equals(entry1.getDisplayName(), entry1.getDestination())) {
            return entry2;
        }

        // If only one has a photo, use it
        if ((entry1.getPhotoThumbnailUri() != null || entry1.getPhotoBytes() != null)
                && (entry2.getPhotoThumbnailUri() == null && entry2.getPhotoBytes() == null)) {
            return entry1;
        }

        if ((entry2.getPhotoThumbnailUri() != null || entry2.getPhotoBytes() != null)
                && (entry1.getPhotoThumbnailUri() == null && entry1.getPhotoBytes() == null)) {
            return entry2;
        }

        // Go with the second option as a default
        return entry2;
!!!36521143.java!!!	doQuery(inout constraint : CharSequence, in limit : int, inout directoryId : Long, inout account : Account, inout context : Context, inout query : Queries::Query, inout permissionsCheckListener : ChipsUtil::PermissionsCheckListener) : Cursor
        if (!ChipsUtil.hasPermissions(context, permissionsCheckListener)) {
            if (Log.isLoggable(TAG, Log.DEBUG)) {
                Log.d(TAG, "Not doing query because we don't have required permissions.");
            }
            return null;
        }
        final Uri.Builder builder = query
                .getContentFilterUri()
                .buildUpon()
                .appendPath(constraint.toString())
                .appendQueryParameter(ContactsContract.LIMIT_PARAM_KEY,
                        String.valueOf(limit + BaseRecipientAdapter.ALLOWANCE_FOR_DUPLICATES));
        if (directoryId != null) {
            builder.appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,
                    String.valueOf(directoryId));
        }
        if (account != null) {
            builder.appendQueryParameter(BaseRecipientAdapter.PRIMARY_ACCOUNT_NAME, account.name);
            builder.appendQueryParameter(BaseRecipientAdapter.PRIMARY_ACCOUNT_TYPE, account.type);
        }
        return context.getContentResolver()
                .query(builder.build(), query.getProjection(), null, null, null);
!!!36521271.java!!!	RecipientAlternatesAdapter(inout context : Context, in contactId : long, inout directoryId : Long, inout lookupKey : String, in currentId : long, in queryMode : int, inout listener : RecipientAlternatesAdapter::OnCheckedItemChangedListener, inout dropdownChipLayouter : DropdownChipLayouter, inout permissionsCheckListener : ChipsUtil::PermissionsCheckListener)
        this(context, contactId, directoryId, lookupKey, currentId, queryMode, listener,
                dropdownChipLayouter, null, permissionsCheckListener);
!!!36521399.java!!!	RecipientAlternatesAdapter(inout context : Context, in contactId : long, inout directoryId : Long, inout lookupKey : String, in currentId : long, in queryMode : int, inout listener : RecipientAlternatesAdapter::OnCheckedItemChangedListener, inout dropdownChipLayouter : DropdownChipLayouter, inout deleteDrawable : StateListDrawable, inout permissionsCheckListener : ChipsUtil::PermissionsCheckListener)
        super(context,
                getCursorForConstruction(context, contactId, directoryId, lookupKey, queryMode,
                        permissionsCheckListener),
                0);
        mCurrentId = currentId;
        mDirectoryId = directoryId;
        mCheckedItemChangedListener = listener;

        mDropdownChipLayouter = dropdownChipLayouter;
        mDeleteDrawable = deleteDrawable;
!!!36521527.java!!!	getCursorForConstruction(inout context : Context, in contactId : long, inout directoryId : Long, inout lookupKey : String, in queryType : int, inout permissionsCheckListener : ChipsUtil::PermissionsCheckListener) : Cursor
        final Uri uri;
        final String desiredMimeType;
        final String[] projection;

        if (queryType == QUERY_TYPE_EMAIL) {
            projection = Queries.EMAIL.getProjection();

            if (directoryId == null || lookupKey == null) {
                uri = Queries.EMAIL.getContentUri();
                desiredMimeType = null;
            } else {
                uri = Contacts.getLookupUri(contactId, lookupKey)
                        .buildUpon()
                        .appendPath(Contacts.Entity.CONTENT_DIRECTORY)
                        .appendQueryParameter(
                                ContactsContract.DIRECTORY_PARAM_KEY, String.valueOf(directoryId))
                        .build();
                desiredMimeType = ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE;
            }
        } else {
            projection = Queries.PHONE.getProjection();

            if (lookupKey == null) {
                uri = Queries.PHONE.getContentUri();
                desiredMimeType = null;
            } else {
                uri = Contacts.getLookupUri(contactId, lookupKey)
                        .buildUpon()
                        .appendPath(Contacts.Entity.CONTENT_DIRECTORY)
                        .appendQueryParameter(
                                ContactsContract.DIRECTORY_PARAM_KEY, String.valueOf(directoryId))
                        .build();
                desiredMimeType = ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE;
            }
        }

        final String selection = new StringBuilder()
                .append(projection[Queries.Query.CONTACT_ID])
                .append(" = ?")
                .toString();
        final Cursor cursor;
        if (ChipsUtil.hasPermissions(context, permissionsCheckListener)) {
            cursor = context.getContentResolver().query(
                    uri, projection, selection, new String[] {String.valueOf(contactId)}, null);
        } else {
            cursor = new MatrixCursor(projection);
        }

        final Cursor resultCursor = removeUndesiredDestinations(cursor, desiredMimeType, lookupKey);
        cursor.close();

        return resultCursor;
!!!36521655.java!!!	removeUndesiredDestinations(in original : Cursor, in desiredMimeType : String, in lookupKey : String) : Cursor
        final MatrixCursor result = new MatrixCursor(
                original.getColumnNames(), original.getCount());
        final HashSet<String> destinationsSeen = new HashSet<String>();

        String defaultDisplayName = null;
        String defaultPhotoThumbnailUri = null;
        int defaultDisplayNameSource = 0;

        // Find some nice defaults in case we need them
        original.moveToPosition(-1);
        while (original.moveToNext()) {
            final String mimeType = original.getString(Query.MIME_TYPE);

            if (ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE.equals(
                    mimeType)) {
                // Store this data
                defaultDisplayName = original.getString(Query.NAME);
                defaultPhotoThumbnailUri = original.getString(Query.PHOTO_THUMBNAIL_URI);
                defaultDisplayNameSource = original.getInt(Query.DISPLAY_NAME_SOURCE);
                break;
            }
        }

        original.moveToPosition(-1);
        while (original.moveToNext()) {
            if (desiredMimeType != null) {
                final String mimeType = original.getString(Query.MIME_TYPE);
                if (!desiredMimeType.equals(mimeType)) {
                    continue;
                }
            }
            final String destination = original.getString(Query.DESTINATION);
            if (destinationsSeen.contains(destination)) {
                continue;
            }
            destinationsSeen.add(destination);

            final Object[] row = new Object[] {
                    original.getString(Query.NAME),
                    original.getString(Query.DESTINATION),
                    original.getInt(Query.DESTINATION_TYPE),
                    original.getString(Query.DESTINATION_LABEL),
                    original.getLong(Query.CONTACT_ID),
                    original.getLong(Query.DATA_ID),
                    original.getString(Query.PHOTO_THUMBNAIL_URI),
                    original.getInt(Query.DISPLAY_NAME_SOURCE),
                    original.getString(Query.LOOKUP_KEY),
                    original.getString(Query.MIME_TYPE)
            };

            if (row[Query.NAME] == null) {
                row[Query.NAME] = defaultDisplayName;
            }
            if (row[Query.PHOTO_THUMBNAIL_URI] == null) {
                row[Query.PHOTO_THUMBNAIL_URI] = defaultPhotoThumbnailUri;
            }
            if ((Integer) row[Query.DISPLAY_NAME_SOURCE] == 0) {
                row[Query.DISPLAY_NAME_SOURCE] = defaultDisplayNameSource;
            }
            if (row[Query.LOOKUP_KEY] == null) {
                row[Query.LOOKUP_KEY] = lookupKey;
            }

            // Ensure we don't have two '?' like content://.../...?account_name=...?sz=...
            final String photoThumbnailUri = (String) row[Query.PHOTO_THUMBNAIL_URI];
            if (photoThumbnailUri != null) {
                if (sCorrectedPhotoUris.containsKey(photoThumbnailUri)) {
                    row[Query.PHOTO_THUMBNAIL_URI] = sCorrectedPhotoUris.get(photoThumbnailUri);
                } else if (photoThumbnailUri.indexOf('?') != photoThumbnailUri.lastIndexOf('?')) {
                    final String[] parts = photoThumbnailUri.split("\\?");
                    final StringBuilder correctedUriBuilder = new StringBuilder();
                    for (int i = 0; i < parts.length; i++) {
                        if (i == 1) {
                            correctedUriBuilder.append("?"); // We only want one of these
                        } else if (i > 1) {
                            correctedUriBuilder.append("&"); // And we want these elsewhere
                        }
                        correctedUriBuilder.append(parts[i]);
                    }

                    final String correctedUri = correctedUriBuilder.toString();
                    sCorrectedPhotoUris.put(photoThumbnailUri, correctedUri);
                    row[Query.PHOTO_THUMBNAIL_URI] = correctedUri;
                }
            }

            result.addRow(row);
        }

        return result;
!!!36521783.java!!!	getItemId(in position : int) : long
        Cursor c = getCursor();
        if (c.moveToPosition(position)) {
            c.getLong(Queries.Query.DATA_ID);
        }
        return -1;
!!!36521911.java!!!	getRecipientEntry(in position : int) : RecipientEntry
        Cursor c = getCursor();
        c.moveToPosition(position);
        return RecipientEntry.constructTopLevelEntry(
                c.getString(Queries.Query.NAME),
                c.getInt(Queries.Query.DISPLAY_NAME_SOURCE),
                c.getString(Queries.Query.DESTINATION),
                c.getInt(Queries.Query.DESTINATION_TYPE),
                c.getString(Queries.Query.DESTINATION_LABEL),
                c.getLong(Queries.Query.CONTACT_ID),
                mDirectoryId,
                c.getLong(Queries.Query.DATA_ID),
                c.getString(Queries.Query.PHOTO_THUMBNAIL_URI),
                true,
                c.getString(Queries.Query.LOOKUP_KEY));
!!!36522039.java!!!	getView(in position : int, inout convertView : View, inout parent : ViewGroup) : View
        Cursor cursor = getCursor();
        cursor.moveToPosition(position);
        if (convertView == null) {
            convertView = mDropdownChipLayouter.newView(AdapterType.RECIPIENT_ALTERNATES);
        }
        if (cursor.getLong(Queries.Query.DATA_ID) == mCurrentId) {
            mCheckedItemPosition = position;
            if (mCheckedItemChangedListener != null) {
                mCheckedItemChangedListener.onCheckedItemChanged(mCheckedItemPosition);
            }
        }
        bindView(convertView, convertView.getContext(), cursor);
        return convertView;
!!!36522167.java!!!	bindView(inout view : View, inout context : Context, inout cursor : Cursor) : void
        int position = cursor.getPosition();
        RecipientEntry entry = getRecipientEntry(position);

        mDropdownChipLayouter.bindView(view, null, entry, position,
                AdapterType.RECIPIENT_ALTERNATES, null, mDeleteDrawable);
!!!36522295.java!!!	newView(inout context : Context, inout cursor : Cursor, inout parent : ViewGroup) : View
        return mDropdownChipLayouter.newView(AdapterType.RECIPIENT_ALTERNATES);
