class DropdownChipLayouter
!!!36522807.java!!!	DropdownChipLayouter(inout inflater : LayoutInflater, inout context : Context)
        mInflater = inflater;
        mContext = context;
        mAutocompleteDividerMarginStart =
                context.getResources().getDimensionPixelOffset(R.dimen.chip_wrapper_start_padding);
!!!36522935.java!!!	setQuery(inout query : Queries::Query) : void
        mQuery = query;
!!!36523063.java!!!	setDeleteListener(inout listener : DropdownChipLayouter::ChipDeleteListener) : void
        mDeleteListener = listener;
!!!36523191.java!!!	setPermissionRequestDismissedListener(inout listener : DropdownChipLayouter::PermissionRequestDismissedListener) : void
        mPermissionRequestDismissedListener = listener;
!!!36523319.java!!!	setAutocompleteDividerMarginStart(in autocompleteDividerMarginStart : int) : void
        mAutocompleteDividerMarginStart = autocompleteDividerMarginStart;
!!!36523447.java!!!	bindView(inout convertView : View, inout parent : ViewGroup, inout entry : RecipientEntry, in position : int, inout type : DropdownChipLayouter::AdapterType, inout constraint : String) : View
        return bindView(convertView, parent, entry, position, type, constraint, null);
!!!36523575.java!!!	bindView(inout convertView : View, inout parent : ViewGroup, inout entry : RecipientEntry, in position : int, inout type : DropdownChipLayouter::AdapterType, inout constraint : String, inout deleteDrawable : StateListDrawable) : View
        // Default to show all the information
        CharSequence[] styledResults = getStyledResults(constraint, entry);
        CharSequence displayName = styledResults[0];
        CharSequence destination = styledResults[1];
        boolean showImage = true;
        CharSequence destinationType = getDestinationType(entry);

        final View itemView = reuseOrInflateView(convertView, parent, type);

        final ViewHolder viewHolder = new ViewHolder(itemView);

        // Hide some information depending on the adapter type.
        switch (type) {
            case BASE_RECIPIENT:
                if (TextUtils.isEmpty(displayName) || TextUtils.equals(displayName, destination)) {
                    displayName = destination;

                    // We only show the destination for secondary entries, so clear it only for the
                    // first level.
                    if (entry.isFirstLevel()) {
                        destination = null;
                    }
                }

                if (!entry.isFirstLevel()) {
                    displayName = null;
                    showImage = false;
                }

                // For BASE_RECIPIENT set all top dividers except for the first one to be GONE.
                if (viewHolder.topDivider != null) {
                    viewHolder.topDivider.setVisibility(position == 0 ? View.VISIBLE : View.GONE);
                    MarginLayoutParamsCompat.setMarginStart(
                            (MarginLayoutParams) viewHolder.topDivider.getLayoutParams(),
                            mAutocompleteDividerMarginStart);
                }
                if (viewHolder.bottomDivider != null) {
                    MarginLayoutParamsCompat.setMarginStart(
                            (MarginLayoutParams) viewHolder.bottomDivider.getLayoutParams(),
                            mAutocompleteDividerMarginStart);
                }
                break;
            case RECIPIENT_ALTERNATES:
                if (position != 0) {
                    displayName = null;
                    showImage = false;
                }
                break;
            case SINGLE_RECIPIENT:
                if (!PhoneUtil.isPhoneNumber(entry.getDestination())) {
                    destination = Rfc822Tokenizer.tokenize(entry.getDestination())[0].getAddress();
                }
                destinationType = null;
        }

        // Bind the information to the view
        bindTextToView(displayName, viewHolder.displayNameView);
        bindTextToView(destination, viewHolder.destinationView);
        bindTextToView(destinationType, viewHolder.destinationTypeView);
        bindIconToView(showImage, entry, viewHolder.imageView, type);
        bindDrawableToDeleteView(deleteDrawable, entry.getDisplayName(), viewHolder.deleteView);
        bindIndicatorToView(
                entry.getIndicatorIconId(), entry.getIndicatorText(), viewHolder.indicatorView);
        bindPermissionRequestDismissView(viewHolder.permissionRequestDismissView);

        // Hide some view groups depending on the entry type
        final int entryType = entry.getEntryType();
        if (entryType == RecipientEntry.ENTRY_TYPE_PERSON) {
            setViewVisibility(viewHolder.personViewGroup, View.VISIBLE);
            setViewVisibility(viewHolder.permissionViewGroup, View.GONE);
            setViewVisibility(viewHolder.permissionBottomDivider, View.GONE);
        } else if (entryType == RecipientEntry.ENTRY_TYPE_PERMISSION_REQUEST) {
            setViewVisibility(viewHolder.personViewGroup, View.GONE);
            setViewVisibility(viewHolder.permissionViewGroup, View.VISIBLE);
            setViewVisibility(viewHolder.permissionBottomDivider, View.VISIBLE);
        }

        return itemView;
!!!36523703.java!!!	newView(inout type : DropdownChipLayouter::AdapterType) : View
        return mInflater.inflate(getItemLayoutResId(type), null);
!!!36523831.java!!!	reuseOrInflateView(inout convertView : View, inout parent : ViewGroup, inout type : DropdownChipLayouter::AdapterType) : View
        int itemLayout = getItemLayoutResId(type);
        switch (type) {
            case BASE_RECIPIENT:
            case RECIPIENT_ALTERNATES:
                break;
            case SINGLE_RECIPIENT:
                itemLayout = getAlternateItemLayoutResId(type);
                break;
        }
        return convertView != null ? convertView : mInflater.inflate(itemLayout, parent, false);
!!!36523959.java!!!	bindTextToView(inout text : CharSequence, inout view : TextView) : void
        if (view == null) {
            return;
        }

        if (text != null) {
            view.setText(text);
            view.setVisibility(View.VISIBLE);
        } else {
            view.setVisibility(View.GONE);
        }
!!!36524087.java!!!	bindIconToView(inout showImage : boolean, inout entry : RecipientEntry, inout view : ImageView, inout type : DropdownChipLayouter::AdapterType) : void
        if (view == null) {
            return;
        }

        if (showImage) {
            switch (type) {
                case BASE_RECIPIENT:
                    byte[] photoBytes = entry.getPhotoBytes();
                    if (photoBytes != null && photoBytes.length > 0) {
                        final Bitmap photo = BitmapFactory.decodeByteArray(photoBytes, 0,
                            photoBytes.length);
                        view.setImageBitmap(photo);
                    } else {
                        view.setImageResource(getDefaultPhotoResId());
                    }
                    break;
                case RECIPIENT_ALTERNATES:
                    Uri thumbnailUri = entry.getPhotoThumbnailUri();
                    if (thumbnailUri != null) {
                        // TODO: see if this needs to be done outside the main thread
                        // as it may be too slow to get immediately.
                        view.setImageURI(thumbnailUri);
                    } else {
                        view.setImageResource(getDefaultPhotoResId());
                    }
                    break;
                case SINGLE_RECIPIENT:
                default:
                    break;
            }
            view.setVisibility(View.VISIBLE);
        } else {
            view.setVisibility(View.GONE);
        }
!!!36524215.java!!!	bindDrawableToDeleteView(in drawable : StateListDrawable, inout recipient : String, inout view : ImageView) : void
        if (view == null) {
            return;
        }
        if (drawable == null) {
            view.setVisibility(View.GONE);
        } else {
            final Resources res = mContext.getResources();
            view.setImageDrawable(drawable);
            view.setContentDescription(
                    res.getString(R.string.dropdown_delete_button_desc, recipient));
            if (mDeleteListener != null) {
                view.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        if (drawable.getCurrent() != null) {
                            mDeleteListener.onChipDelete();
                        }
                    }
                });
            }
        }
!!!36524343.java!!!	bindIndicatorToView(in indicatorIconId : int, inout indicatorText : String, inout view : TextView) : void
        if (view != null) {
            if (indicatorText != null || indicatorIconId != 0) {
                view.setText(indicatorText);
                view.setVisibility(View.VISIBLE);
                final Drawable indicatorIcon;
                if (indicatorIconId != 0) {
                    indicatorIcon = mContext.getDrawable(indicatorIconId).mutate();
                    indicatorIcon.setColorFilter(Color.WHITE, PorterDuff.Mode.SRC_IN);
                } else {
                    indicatorIcon = null;
                }
                view.setCompoundDrawablesRelativeWithIntrinsicBounds(
                        indicatorIcon, null, null, null);
            } else {
                view.setVisibility(View.GONE);
            }
        }
!!!36524471.java!!!	bindPermissionRequestDismissView(inout view : ImageView) : void
        if (view == null) {
            return;
        }
        view.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mPermissionRequestDismissedListener != null) {
                    mPermissionRequestDismissedListener.onPermissionRequestDismissed();
                }
            }
        });
!!!36524599.java!!!	setViewVisibility(inout view : View, in visibility : int) : void
        if (view != null) {
            view.setVisibility(visibility);
        }
!!!36524727.java!!!	getDestinationType(inout entry : RecipientEntry) : CharSequence
        return mQuery.getTypeLabel(mContext.getResources(), entry.getDestinationType(),
            entry.getDestinationLabel()).toString().toUpperCase();
!!!36524855.java!!!	getItemLayoutResId(inout type : DropdownChipLayouter::AdapterType) : int
        switch (type) {
            case BASE_RECIPIENT:
                return R.layout.chips_autocomplete_recipient_dropdown_item;
            case RECIPIENT_ALTERNATES:
                return R.layout.chips_recipient_dropdown_item;
            default:
                return R.layout.chips_recipient_dropdown_item;
        }
!!!36524983.java!!!	getAlternateItemLayoutResId(inout type : DropdownChipLayouter::AdapterType) : int
        switch (type) {
            case BASE_RECIPIENT:
                return R.layout.chips_autocomplete_recipient_dropdown_item;
            case RECIPIENT_ALTERNATES:
                return R.layout.chips_recipient_dropdown_item;
            default:
                return R.layout.chips_recipient_dropdown_item;
        }
!!!36525111.java!!!	getDefaultPhotoResId() : int
        return R.drawable.ic_contact_picture;
!!!36525239.java!!!	getPersonGroupResId() : int
        return R.id.chip_person_wrapper;
!!!36525367.java!!!	getDisplayNameResId() : int
        return android.R.id.title;
!!!36525495.java!!!	getDestinationResId() : int
        return android.R.id.text1;
!!!36525623.java!!!	getDestinationTypeResId() : int
        return android.R.id.text2;
!!!36525751.java!!!	getPhotoResId() : int
        return android.R.id.icon;
!!!36525879.java!!!	getDeleteResId() : int
 return android.R.id.icon1;
!!!36526007.java!!!	getPermissionGroupResId() : int
        return R.id.chip_permission_wrapper;
!!!36526135.java!!!	getPermissionRequestDismissResId() : int
        return android.R.id.icon2;
!!!36526263.java!!!	getStyledResults(inout constraint : String, inout entry : RecipientEntry) : CharSequence
      return getStyledResults(constraint, entry.getDisplayName(), entry.getDestination());
!!!36526391.java!!!	getStyledResults(inout constraint : String, inout  : String...results) : CharSequence
        if (isAllWhitespace(constraint)) {
            return results;
        }

        CharSequence[] styledResults = new CharSequence[results.length];
        boolean foundMatch = false;
        for (int i = 0; i < results.length; i++) {
            String result = results[i];
            if (result == null) {
                continue;
            }

            if (!foundMatch) {
                int index = result.toLowerCase().indexOf(constraint.toLowerCase());
                if (index != -1) {
                    SpannableStringBuilder styled = SpannableStringBuilder.valueOf(result);
                    ForegroundColorSpan highlightSpan =
                            new ForegroundColorSpan(mContext.getResources().getColor(
                                    R.color.chips_dropdown_text_highlighted));
                    styled.setSpan(highlightSpan,
                            index, index + constraint.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                    styledResults[i] = styled;
                    foundMatch = true;
                    continue;
                }
            }
            styledResults[i] = result;
        }
        return styledResults;
!!!36526519.java!!!	isAllWhitespace(inout string : String) : boolean
        if (TextUtils.isEmpty(string)) {
            return true;
        }

        for (int i = 0; i < string.length(); ++i) {
            if (!Character.isWhitespace(string.charAt(i))) {
                return false;
            }
        }

        return true;
