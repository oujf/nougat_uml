class BaseRecipientAdapter
!!!36551223.java!!!	searchOtherDirectories(inout existingDestinations : Set<String>) : BaseRecipientAdapter::DirectorySearchParams
        if (!ChipsUtil.hasPermissions(mContext, mPermissionsCheckListener)) {
            // If we don't have permissions we can't search other directories.
            if (DEBUG) {
                Log.d(TAG, "Not searching other directories because we don't have required "
                        + "permissions.");
            }
            return null;
        }

        // After having local results, check the size of results. If the results are
        // not enough, we search remote directories, which will take longer time.
        final int limit = mPreferredMaxResultCount - existingDestinations.size();
        if (limit > 0) {
            if (DEBUG) {
                Log.d(TAG, "More entries should be needed (current: "
                        + existingDestinations.size()
                        + ", remaining limit: " + limit + ") ");
            }
            Cursor directoryCursor = null;
            try {
                directoryCursor = mContentResolver.query(
                        DirectoryListQuery.URI, DirectoryListQuery.PROJECTION,
                        null, null, null);
                return setupOtherDirectories(mContext, directoryCursor, mAccount);
            } finally {
                if (directoryCursor != null) {
                    directoryCursor.close();
                }
            }
        } else {
            // We don't need to search other directories.
            return null;
        }
!!!36552375.java!!!	BaseRecipientAdapter(inout context : Context)
        this(context, DEFAULT_PREFERRED_MAX_RESULT_COUNT, QUERY_TYPE_EMAIL);
!!!36552503.java!!!	BaseRecipientAdapter(inout context : Context, in preferredMaxResultCount : int)
        this(context, preferredMaxResultCount, QUERY_TYPE_EMAIL);
!!!36552631.java!!!	BaseRecipientAdapter(in queryMode : int, inout context : Context)
        this(context, DEFAULT_PREFERRED_MAX_RESULT_COUNT, queryMode);
!!!36552759.java!!!	BaseRecipientAdapter(in queryMode : int, inout context : Context, in preferredMaxResultCount : int)
        this(context, preferredMaxResultCount, queryMode);
!!!36552887.java!!!	BaseRecipientAdapter(inout context : Context, in preferredMaxResultCount : int, in queryMode : int)
        mContext = context;
        mContentResolver = context.getContentResolver();
        mPreferredMaxResultCount = preferredMaxResultCount;
        mPhotoManager = new DefaultPhotoManager(mContentResolver);
        mQueryType = queryMode;

        if (queryMode == QUERY_TYPE_EMAIL) {
            mQueryMode = Queries.EMAIL;
        } else if (queryMode == QUERY_TYPE_PHONE) {
            mQueryMode = Queries.PHONE;
        } else {
            mQueryMode = Queries.EMAIL;
            Log.e(TAG, "Unsupported query type: " + queryMode);
        }
!!!36553015.java!!!	getContext() : Context
        return mContext;
!!!36553143.java!!!	getQueryType() : int
        return mQueryType;
!!!36553271.java!!!	setDropdownChipLayouter(inout dropdownChipLayouter : DropdownChipLayouter) : void
        mDropdownChipLayouter = dropdownChipLayouter;
        mDropdownChipLayouter.setQuery(mQueryMode);
!!!36553399.java!!!	getDropdownChipLayouter() : DropdownChipLayouter
        return mDropdownChipLayouter;
!!!36553527.java!!!	setPermissionsCheckListener(inout permissionsCheckListener : ChipsUtil::PermissionsCheckListener) : void
        mPermissionsCheckListener = permissionsCheckListener;
!!!36553655.java!!!	getPermissionsCheckListener() : ChipsUtil::PermissionsCheckListener
        return mPermissionsCheckListener;
!!!36553783.java!!!	setPhotoManager(inout photoManager : PhotoManager) : void
        mPhotoManager = photoManager;
!!!36553911.java!!!	getPhotoManager() : PhotoManager
        return mPhotoManager;
!!!36554039.java!!!	forceShowAddress() : boolean
        return false;
!!!36554167.java!!!	getMatchingRecipients(inout inAddresses : ArrayList<String>, inout callback : RecipientAlternatesAdapter::RecipientMatchCallback) : void
        RecipientAlternatesAdapter.getMatchingRecipients(
                getContext(), this, inAddresses, getAccount(), callback, mPermissionsCheckListener);
!!!36554295.java!!!	setAccount(inout account : Account) : void
        mAccount = account;
!!!36554423.java!!!	getRequiredPermissions() : String
        return ChipsUtil.REQUIRED_PERMISSIONS;
!!!36554551.java!!!	setShowRequestPermissionsItem(inout show : boolean) : void
        mShowRequestPermissionsItem = show;
!!!36554679.java!!!	getFilter() : Filter
        return new DefaultFilter();
!!!36554807.java!!!	getMatchingRecipients(inout addresses : Set<String>) : String
        return null;
!!!36554935.java!!!	setupOtherDirectories(inout context : Context, inout directoryCursor : Cursor, inout account : Account) : BaseRecipientAdapter::DirectorySearchParams
        final PackageManager packageManager = context.getPackageManager();
        final List<DirectorySearchParams> paramsList = new ArrayList<DirectorySearchParams>();
        DirectorySearchParams preferredDirectory = null;
        while (directoryCursor.moveToNext()) {
            final long id = directoryCursor.getLong(DirectoryListQuery.ID);

            // Skip the local invisible directory, because the default directory already includes
            // all local results.
            if (id == Directory.LOCAL_INVISIBLE) {
                continue;
            }

            final DirectorySearchParams params = new DirectorySearchParams();
            final String packageName = directoryCursor.getString(DirectoryListQuery.PACKAGE_NAME);
            final int resourceId = directoryCursor.getInt(DirectoryListQuery.TYPE_RESOURCE_ID);
            params.directoryId = id;
            params.displayName = directoryCursor.getString(DirectoryListQuery.DISPLAY_NAME);
            params.accountName = directoryCursor.getString(DirectoryListQuery.ACCOUNT_NAME);
            params.accountType = directoryCursor.getString(DirectoryListQuery.ACCOUNT_TYPE);
            if (packageName != null && resourceId != 0) {
                try {
                    final Resources resources =
                            packageManager.getResourcesForApplication(packageName);
                    params.directoryType = resources.getString(resourceId);
                    if (params.directoryType == null) {
                        Log.e(TAG, "Cannot resolve directory name: "
                                + resourceId + "@" + packageName);
                    }
                } catch (NameNotFoundException e) {
                    Log.e(TAG, "Cannot resolve directory name: "
                            + resourceId + "@" + packageName, e);
                }
            }

            // If an account has been provided and we found a directory that
            // corresponds to that account, place that directory second, directly
            // underneath the local contacts.
            if (preferredDirectory == null && account != null
                    && account.name.equals(params.accountName)
                    && account.type.equals(params.accountType)) {
                preferredDirectory = params;
            } else {
                paramsList.add(params);
            }
        }

        if (preferredDirectory != null) {
            paramsList.add(1, preferredDirectory);
        }

        return paramsList;
!!!36555063.java!!!	startSearchOtherDirectories(inout constraint : CharSequence, inout paramsList : List<DirectorySearchParams>, in limit : int) : void
        final int count = paramsList.size();
        // Note: skipping the default partition (index 0), which has already been loaded
        for (int i = 1; i < count; i++) {
            final DirectorySearchParams params = paramsList.get(i);
            params.constraint = constraint;
            if (params.filter == null) {
                params.filter = new DirectoryFilter(params);
            }
            params.filter.setLimit(limit);
            params.filter.filter(constraint);
        }

        // Directory search started. We may show "waiting" message if directory results are slow
        // enough.
        mRemainingDirectoryCount = count - 1;
        mDelayedMessageHandler.sendDelayedLoadMessage();
!!!36555191.java!!!	putOneEntry(inout entry : BaseRecipientAdapter::TemporaryEntry, inout isAggregatedEntry : boolean) : void
        putOneEntry(entry, isAggregatedEntry,
                mEntryMap, mNonAggregatedEntries, mExistingDestinations);
!!!36555319.java!!!	putOneEntry(inout entry : BaseRecipientAdapter::TemporaryEntry, inout isAggregatedEntry : boolean, inout entryMap : LinkedHashMap<Long, List<RecipientEntry>>, inout nonAggregatedEntries : List<RecipientEntry>, inout existingDestinations : Set<String>) : void
        if (existingDestinations.contains(entry.destination)) {
            return;
        }

        existingDestinations.add(entry.destination);

        if (!isAggregatedEntry) {
            nonAggregatedEntries.add(RecipientEntry.constructTopLevelEntry(
                    entry.displayName,
                    entry.displayNameSource,
                    entry.destination, entry.destinationType, entry.destinationLabel,
                    entry.contactId, entry.directoryId, entry.dataId, entry.thumbnailUriString,
                    true, entry.lookupKey));
        } else if (entryMap.containsKey(entry.contactId)) {
            // We already have a section for the person.
            final List<RecipientEntry> entryList = entryMap.get(entry.contactId);
            entryList.add(RecipientEntry.constructSecondLevelEntry(
                    entry.displayName,
                    entry.displayNameSource,
                    entry.destination, entry.destinationType, entry.destinationLabel,
                    entry.contactId, entry.directoryId, entry.dataId, entry.thumbnailUriString,
                    true, entry.lookupKey));
        } else {
            final List<RecipientEntry> entryList = new ArrayList<RecipientEntry>();
            entryList.add(RecipientEntry.constructTopLevelEntry(
                    entry.displayName,
                    entry.displayNameSource,
                    entry.destination, entry.destinationType, entry.destinationLabel,
                    entry.contactId, entry.directoryId, entry.dataId, entry.thumbnailUriString,
                    true, entry.lookupKey));
            entryMap.put(entry.contactId, entryList);
        }
!!!36555447.java!!!	constructEntryList() : RecipientEntry
        return constructEntryList(mEntryMap, mNonAggregatedEntries);
!!!36555575.java!!!	constructEntryList(inout entryMap : LinkedHashMap<Long, List<RecipientEntry>>, inout nonAggregatedEntries : List<RecipientEntry>) : RecipientEntry
        final List<RecipientEntry> entries = new ArrayList<RecipientEntry>();
        int validEntryCount = 0;
        for (Map.Entry<Long, List<RecipientEntry>> mapEntry : entryMap.entrySet()) {
            final List<RecipientEntry> entryList = mapEntry.getValue();
            final int size = entryList.size();
            for (int i = 0; i < size; i++) {
                RecipientEntry entry = entryList.get(i);
                entries.add(entry);
                mPhotoManager.populatePhotoBytesAsync(entry, this);
                validEntryCount++;
            }
            if (validEntryCount > mPreferredMaxResultCount) {
                break;
            }
        }
        if (validEntryCount <= mPreferredMaxResultCount) {
            for (RecipientEntry entry : nonAggregatedEntries) {
                if (validEntryCount > mPreferredMaxResultCount) {
                    break;
                }
                entries.add(entry);
                mPhotoManager.populatePhotoBytesAsync(entry, this);
                validEntryCount++;
            }
        }

        return entries;
!!!36555831.java!!!	registerUpdateObserver(inout observer : BaseRecipientAdapter::EntriesUpdatedObserver) : void
        mEntriesUpdatedObserver = observer;
!!!36555959.java!!!	updateEntries(inout newEntries : List<RecipientEntry>) : void
        mEntries = newEntries;
        mEntriesUpdatedObserver.onChanged(newEntries);
        notifyDataSetChanged();
!!!36556087.java!!!	cacheCurrentEntriesIfNeeded(in newEntryCount : int, in paramListCount : int) : void
        if (newEntryCount == 0 && paramListCount > 1) {
            cacheCurrentEntries();
        }
!!!36556215.java!!!	cacheCurrentEntries() : void
        mTempEntries = mEntries;
!!!36556343.java!!!	clearTempEntries() : void
        mTempEntries = null;
!!!36556471.java!!!	getEntries() : RecipientEntry
        return mTempEntries != null ? mTempEntries : mEntries;
!!!36556599.java!!!	fetchPhoto(in entry : RecipientEntry, inout cb : PhotoManager::PhotoManagerCallback) : void
        mPhotoManager.populatePhotoBytesAsync(entry, cb);
!!!36556727.java!!!	doQuery(inout constraint : CharSequence, in limit : int, inout directoryId : Long) : Cursor
        if (!ChipsUtil.hasPermissions(mContext, mPermissionsCheckListener)) {
            if (DEBUG) {
                Log.d(TAG, "Not doing query because we don't have required permissions.");
            }
            return null;
        }

        final Uri.Builder builder = mQueryMode.getContentFilterUri().buildUpon()
                .appendPath(constraint.toString())
                .appendQueryParameter(ContactsContract.LIMIT_PARAM_KEY,
                        String.valueOf(limit + ALLOWANCE_FOR_DUPLICATES));
        if (directoryId != null) {
            builder.appendQueryParameter(ContactsContract.DIRECTORY_PARAM_KEY,
                    String.valueOf(directoryId));
        }
        if (mAccount != null) {
            builder.appendQueryParameter(PRIMARY_ACCOUNT_NAME, mAccount.name);
            builder.appendQueryParameter(PRIMARY_ACCOUNT_TYPE, mAccount.type);
        }
        final long start = System.currentTimeMillis();
        final Cursor cursor = mContentResolver.query(
                builder.build(), mQueryMode.getProjection(), null, null, null);
        final long end = System.currentTimeMillis();
        if (DEBUG) {
            Log.d(TAG, "Time for autocomplete (query: " + constraint
                    + ", directoryId: " + directoryId + ", num_of_results: "
                    + (cursor != null ? cursor.getCount() : "null") + "): "
                    + (end - start) + " ms");
        }
        return cursor;
!!!36556855.java!!!	getCount() : int
        final List<RecipientEntry> entries = getEntries();
        return entries != null ? entries.size() : 0;
!!!36556983.java!!!	getItem(in position : int) : RecipientEntry
        return getEntries().get(position);
!!!36557111.java!!!	getItemId(in position : int) : long
        return position;
!!!36557239.java!!!	getViewTypeCount() : int
        return RecipientEntry.ENTRY_TYPE_SIZE;
!!!36557367.java!!!	getItemViewType(in position : int) : int
        return getEntries().get(position).getEntryType();
!!!36557495.java!!!	isEnabled(in position : int) : boolean
        return getEntries().get(position).isSelectable();
!!!36557623.java!!!	getView(in position : int, inout convertView : View, inout parent : ViewGroup) : View
        final RecipientEntry entry = getEntries().get(position);

        final String constraint = mCurrentConstraint == null ? null :
                mCurrentConstraint.toString();

        return mDropdownChipLayouter.bindView(convertView, parent, entry, position,
                AdapterType.BASE_RECIPIENT, constraint);
!!!36557751.java!!!	getAccount() : Account
        return mAccount;
!!!36557879.java!!!	onPhotoBytesPopulated() : void
        // Default implementation does nothing
!!!36558007.java!!!	onPhotoBytesAsynchronouslyPopulated() : void
        notifyDataSetChanged();
!!!36558135.java!!!	onPhotoBytesAsyncLoadFailed() : void
        // Default implementation does nothing
