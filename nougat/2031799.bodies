class ColorPickerDialog
!!!36579383.java!!!	ColorPickerDialog()
        // Empty constructor required for dialog fragments.
!!!36579511.java!!!	newInstance(in titleResId : int, inout colors : int, in selectedColor : int, in columns : int, in size : int) : ColorPickerDialog
        ColorPickerDialog ret = new ColorPickerDialog();
        ret.initialize(titleResId, colors, selectedColor, columns, size);
        return ret;
!!!36579639.java!!!	initialize(in titleResId : int, inout colors : int, in selectedColor : int, in columns : int, in size : int) : void
        setArguments(titleResId, columns, size);
        setColors(colors, selectedColor);
!!!36579767.java!!!	setArguments(in titleResId : int, in columns : int, in size : int) : void
        Bundle bundle = new Bundle();
        bundle.putInt(KEY_TITLE_ID, titleResId);
        bundle.putInt(KEY_COLUMNS, columns);
        bundle.putInt(KEY_SIZE, size);
        setArguments(bundle);
!!!36579895.java!!!	setOnColorSelectedListener(inout listener : ColorPickerSwatch::OnColorSelectedListener) : void
        mListener = listener;
!!!36580023.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        if (getArguments() != null) {
            mTitleResId = getArguments().getInt(KEY_TITLE_ID);
            mColumns = getArguments().getInt(KEY_COLUMNS);
            mSize = getArguments().getInt(KEY_SIZE);
        }

        if (savedInstanceState != null) {
            mColors = savedInstanceState.getIntArray(KEY_COLORS);
            mSelectedColor = (Integer) savedInstanceState.getSerializable(KEY_SELECTED_COLOR);
            mColorContentDescriptions = savedInstanceState.getStringArray(
                    KEY_COLOR_CONTENT_DESCRIPTIONS);
        }
!!!36580151.java!!!	onCreateDialog(inout savedInstanceState : Bundle) : Dialog
        final Activity activity = getActivity();

        View view = LayoutInflater.from(getActivity()).inflate(R.layout.color_picker_dialog, null);
        mProgress = (ProgressBar) view.findViewById(android.R.id.progress);
        mPalette = (ColorPickerPalette) view.findViewById(R.id.color_picker);
        mPalette.init(mSize, mColumns, this);

        if (mColors != null) {
            showPaletteView();
        }

        mAlertDialog = new AlertDialog.Builder(activity)
            .setTitle(mTitleResId)
            .setView(view)
            .create();

        return mAlertDialog;
!!!36580279.java!!!	onColorSelected(in color : int) : void
        if (mListener != null) {
            mListener.onColorSelected(color);
        }

        if (getTargetFragment() instanceof OnColorSelectedListener) {
            final OnColorSelectedListener listener =
                    (OnColorSelectedListener) getTargetFragment();
            listener.onColorSelected(color);
        }

        if (color != mSelectedColor) {
            mSelectedColor = color;
            // Redraw palette to show checkmark on newly selected color before dismissing.
            mPalette.drawPalette(mColors, mSelectedColor);
        }

        dismiss();
!!!36580407.java!!!	showPaletteView() : void
        if (mProgress != null && mPalette != null) {
            mProgress.setVisibility(View.GONE);
            refreshPalette();
            mPalette.setVisibility(View.VISIBLE);
        }
!!!36580535.java!!!	showProgressBarView() : void
        if (mProgress != null && mPalette != null) {
            mProgress.setVisibility(View.VISIBLE);
            mPalette.setVisibility(View.GONE);
        }
!!!36580663.java!!!	setColors(inout colors : int, in selectedColor : int) : void
        if (mColors != colors || mSelectedColor != selectedColor) {
            mColors = colors;
            mSelectedColor = selectedColor;
            refreshPalette();
        }
!!!36580791.java!!!	setColors(inout colors : int) : void
        if (mColors != colors) {
            mColors = colors;
            refreshPalette();
        }
!!!36580919.java!!!	setSelectedColor(in color : int) : void
        if (mSelectedColor != color) {
            mSelectedColor = color;
            refreshPalette();
        }
!!!36581047.java!!!	setColorContentDescriptions(inout colorContentDescriptions : String) : void
        if (mColorContentDescriptions != colorContentDescriptions) {
            mColorContentDescriptions = colorContentDescriptions;
            refreshPalette();
        }
!!!36581175.java!!!	refreshPalette() : void
        if (mPalette != null && mColors != null) {
            mPalette.drawPalette(mColors, mSelectedColor, mColorContentDescriptions);
        }
!!!36581303.java!!!	getColors() : int
        return mColors;
!!!36581431.java!!!	getSelectedColor() : int
        return mSelectedColor;
!!!36581559.java!!!	onSaveInstanceState(inout outState : Bundle) : void
        super.onSaveInstanceState(outState);
        outState.putIntArray(KEY_COLORS, mColors);
        outState.putSerializable(KEY_SELECTED_COLOR, mSelectedColor);
        outState.putStringArray(KEY_COLOR_CONTENT_DESCRIPTIONS, mColorContentDescriptions);
