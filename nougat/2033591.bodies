class MonthAdapter
!!!36609079.java!!!	MonthAdapter(inout context : Context, inout controller : DatePickerController)
        mContext = context;
        mController = controller;
        init();
        setSelectedDay(mController.getSelectedDay());
!!!36609207.java!!!	setSelectedDay(inout day : MonthAdapter::CalendarDay) : void
        mSelectedDay = day;
        notifyDataSetChanged();
!!!36609335.java!!!	getSelectedDay() : MonthAdapter::CalendarDay
        return mSelectedDay;
!!!36609463.java!!!	init() : void
        mSelectedDay = new CalendarDay(System.currentTimeMillis());
!!!36609591.java!!!	getCount() : int
        return ((mController.getMaxYear() - mController.getMinYear()) + 1) * MONTHS_IN_YEAR;
!!!36609719.java!!!	getItem(in position : int) : Object
        return null;
!!!36609847.java!!!	getItemId(in position : int) : long
        return position;
!!!36609975.java!!!	hasStableIds() : boolean
        return true;
!!!36610103.java!!!	getView(in position : int, inout convertView : View, inout parent : ViewGroup) : View
        MonthView v;
        HashMap<String, Integer> drawingParams = null;
        if (convertView != null) {
            v = (MonthView) convertView;
            // We store the drawing parameters in the view so it can be recycled
            drawingParams = (HashMap<String, Integer>) v.getTag();
        } else {
            v = createMonthView(mContext);
            // Set up the new view
            LayoutParams params = new LayoutParams(
                    LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
            v.setLayoutParams(params);
            v.setClickable(true);
            v.setOnDayClickListener(this);
        }
        if (drawingParams == null) {
            drawingParams = new HashMap<String, Integer>();
        }
        drawingParams.clear();

        final int month = position % MONTHS_IN_YEAR;
        final int year = position / MONTHS_IN_YEAR + mController.getMinYear();

        int selectedDay = -1;
        if (isSelectedDayInMonth(year, month)) {
            selectedDay = mSelectedDay.day;
        }

        // Invokes requestLayout() to ensure that the recycled view is set with the appropriate
        // height/number of weeks before being displayed.
        v.reuse();

        drawingParams.put(MonthView.VIEW_PARAMS_SELECTED_DAY, selectedDay);
        drawingParams.put(MonthView.VIEW_PARAMS_YEAR, year);
        drawingParams.put(MonthView.VIEW_PARAMS_MONTH, month);
        drawingParams.put(MonthView.VIEW_PARAMS_WEEK_START, mController.getFirstDayOfWeek());
        v.setMonthParams(drawingParams);
        v.invalidate();
        return v;
!!!36610359.java!!!	isSelectedDayInMonth(in year : int, in month : int) : boolean
        return mSelectedDay.year == year && mSelectedDay.month == month;
!!!36610487.java!!!	onDayClick(inout view : MonthView, inout day : MonthAdapter::CalendarDay) : void
        if (day != null) {
            onDayTapped(day);
        }
!!!36610615.java!!!	onDayTapped(inout day : MonthAdapter::CalendarDay) : void
        mController.tryVibrate();
        mController.onDayOfMonthSelected(day.year, day.month, day.day);
        setSelectedDay(day);
