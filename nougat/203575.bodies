class Simulator
!!!734007.java!!!	Simulator(inout machine : Machine, inout method : ConcreteMethod)
        if (machine == null) {
            throw new NullPointerException("machine == null");
        }

        if (method == null) {
            throw new NullPointerException("method == null");
        }

        this.machine = machine;
        this.code = method.getCode();
        this.localVariables = method.getLocalVariables();
        this.visitor = new SimVisitor();
!!!734135.java!!!	simulate(inout bb : ByteBlock, inout frame : Frame) : void
        int end = bb.getEnd();

        visitor.setFrame(frame);

        try {
            for (int off = bb.getStart(); off < end; /*off*/) {
                int length = code.parseInstruction(off, visitor);
                visitor.setPreviousOffset(off);
                off += length;
            }
        } catch (SimException ex) {
            frame.annotate(ex);
            throw ex;
        }
!!!734263.java!!!	simulate(in offset : int, inout frame : Frame) : int
        visitor.setFrame(frame);
        return code.parseInstruction(offset, visitor);
!!!734391.java!!!	illegalTos() : SimException
        return new SimException("stack mismatch: illegal " +
                "top-of-stack for opcode");
!!!734519.java!!!	requiredArrayTypeFor(inout impliedType : Type, inout foundArrayType : Type) : Type
        if (foundArrayType == Type.KNOWN_NULL) {
            return impliedType.isReference()
                ? Type.KNOWN_NULL
                : impliedType.getArrayType();
        }

        if ((impliedType == Type.OBJECT)
                && foundArrayType.isArray()
                && foundArrayType.getComponentType().isReference()) {
            return foundArrayType;
        }

        if ((impliedType == Type.BYTE)
                && (foundArrayType == Type.BOOLEAN_ARRAY)) {
            /*
             * Per above, an instruction with implied byte[] is also
             * allowed to be used on boolean[].
             */
            return Type.BOOLEAN_ARRAY;
        }

        return impliedType.getArrayType();
