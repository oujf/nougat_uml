format 76
"widget" // nougat_src::frameworks::base::core::java::android::support::v4::widget
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/support/v4/java/android/support/v4/widget/"
  java_package "android.support.v4.widget"
  classview 195255 "widget"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1173431 "DrawerLayout"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "DrawerLayout acts as a top-level container for window content that allows for
interactive \"drawer\" views to be pulled out from one or both vertical edges of the window.

<p>Drawer positioning and layout is controlled using the <code>android:layout_gravity</code>
attribute on child views corresponding to which side of the view you want the drawer
to emerge from: left or right (or start/end on platform versions that support layout direction.)
Note that you can only have one drawer view for each vertical edge of the window. If your
layout configures more than one drawer view per vertical edge of the window, an exception will
be thrown at runtime.
</p>

<p>To use a DrawerLayout, position your primary content view as the first child with
width and height of <code>match_parent</code> and no <code>layout_gravity></code>.
Add drawers as child views after the main content view and set the <code>layout_gravity</code>
appropriately. Drawers commonly use <code>match_parent</code> for height with a fixed width.</p>

<p>{@link DrawerListener} can be used to monitor the state and motion of drawer views.
Avoid performing expensive operations such as layout during animation as it can cause
stuttering; try to perform expensive operations during the {@link #STATE_IDLE} state.
{@link SimpleDrawerListener} offers default/no-op implementations of each callback method.</p>

<p>As per the <a href=\"{@docRoot}design/patterns/navigation-drawer.html\">Android Design
guide</a>, any drawers positioned to the left/start should
always contain content for navigating around the application, whereas any drawers
positioned to the right/end should always contain actions to take on the current content.
This preserves the same navigation left, actions right structure present in the Action Bar
and elsewhere.</p>

<p>For more information about how to use DrawerLayout, read <a
href=\"{@docRoot}training/implementing-navigation/nav-drawer.html\">Creating a Navigation
Drawer</a>.</p>"
      class 1173559 "DrawerListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 29541303 "onDrawerSlide"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "drawerView" type class_ref 134455 // View
	    param in name "slideOffset" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a drawer's position changes.
@param drawerView The child view that was moved
@param slideOffset The new offset of this drawer within its range, from 0-1"
	end

	operation 29541431 "onDrawerOpened"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "drawerView" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a drawer has settled in a completely open state.
The drawer is interactive at this point.

@param drawerView Drawer view that is now open"
	end

	operation 29541559 "onDrawerClosed"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "drawerView" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a drawer has settled in a completely closed state.

@param drawerView Drawer view that is now closed"
	end

	operation 29541687 "onDrawerStateChanged"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "newState" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@State ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when the drawer motion state changes. The new state will
be one of {@link #STATE_IDLE}, {@link #STATE_DRAGGING} or {@link #STATE_SETTLING}.

@param newState The new drawer motion state"
	end
      end

      classrelation 3396663 // <generalisation>
	relation 3396663 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 3396663 // <generalisation>
	  b parent class_ref 134711 // ViewGroup
      end

      classrelation 3396791 // <realization>
	relation 3396791 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 3396791 // <realization>
	  b parent class_ref 1173687 // DrawerLayoutImpl
      end

      classrelation 3396919 // TAG (<unidirectional association>)
	relation 3396919 --->
	  a role_name "TAG" init_value " \"DrawerLayout\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3396919 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      class 1173815 "State"
	visibility private stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef({STATE_IDLE, STATE_DRAGGING, STATE_SETTLING})
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 4011447 "STATE_IDLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " ViewDragHelper.STATE_IDLE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that any drawers are in an idle, settled state. No animation is in progress.
"
      end

      attribute 4011575 "STATE_DRAGGING"
	class_attribute const_attribute public explicit_type "int"
	init_value " ViewDragHelper.STATE_DRAGGING"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a drawer is currently being dragged by the user.
"
      end

      attribute 4011703 "STATE_SETTLING"
	class_attribute const_attribute public explicit_type "int"
	init_value " ViewDragHelper.STATE_SETTLING"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a drawer is in the process of settling to a final position.
"
      end

      class 1173943 "LockMode"
	visibility private stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef({LOCK_MODE_UNLOCKED, LOCK_MODE_LOCKED_CLOSED, LOCK_MODE_LOCKED_OPEN,
            LOCK_MODE_UNDEFINED})
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 4011831 "LOCK_MODE_UNLOCKED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The drawer is unlocked.
"
      end

      attribute 4011959 "LOCK_MODE_LOCKED_CLOSED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The drawer is locked closed. The user may not open it, though
the app may open it programmatically.
"
      end

      attribute 4012087 "LOCK_MODE_LOCKED_OPEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The drawer is locked open. The user may not close it, though the app
may close it programmatically.
"
      end

      attribute 4012215 "LOCK_MODE_UNDEFINED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The drawer's lock state is reset to default.
"
      end

      class 1174071 "EdgeGravity"
	visibility private stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef({Gravity.LEFT, Gravity.RIGHT, GravityCompat.START, GravityCompat.END})
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 4012343 "MIN_DRAWER_MARGIN"
	class_attribute const_attribute private explicit_type "int"
	init_value " 64"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " dp"
      end

      attribute 4012471 "DRAWER_ELEVATION"
	class_attribute const_attribute private explicit_type "int"
	init_value " 10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "dp"
      end

      attribute 4012599 "DEFAULT_SCRIM_COLOR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x99000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4012727 "PEEK_DELAY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 160"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Length of time to delay before peeking the drawer.

 ms"
      end

      attribute 4012855 "MIN_FLING_VELOCITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 400"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Minimum velocity that will be detected as a fling

 dips per second"
      end

      attribute 4012983 "ALLOW_EDGE_LOCK"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Experimental feature.
"
      end

      attribute 4013111 "CHILDREN_DISALLOW_INTERCEPT"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4013239 "TOUCH_SLOP_SENSITIVITY"
	class_attribute const_attribute private explicit_type "float"
	init_value " 1.f"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4013367 "LAYOUT_ATTRS"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int[] {
            android.R.attr.layout_gravity
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4013495 "CAN_HIDE_DESCENDANTS"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " Build.VERSION.SDK_INT >= 19"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Whether we can use NO_HIDE_DESCENDANTS accessibility importance. "
      end

      attribute 4013623 "SET_DRAWER_SHADOW_FROM_ELEVATION"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "
            Build.VERSION.SDK_INT >= 21"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Whether the drawer shadow comes from setting elevation on the drawer. "
      end

      class 1174199 "ChildAccessibilityDelegate"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 3397047 // mChildAccessibilityDelegate (<unidirectional association>)
	relation 3397047 --->
	  a role_name "mChildAccessibilityDelegate" init_value "
            new ChildAccessibilityDelegate()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3397047 // mChildAccessibilityDelegate (<unidirectional association>)
	  b parent class_ref 1174199 // ChildAccessibilityDelegate
      end

      attribute 4013751 "mDrawerElevation"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4013879 "mMinDrawerMargin"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4014007 "mScrimColor"
	private explicit_type "int"
	init_value " DEFAULT_SCRIM_COLOR"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4014135 "mScrimOpacity"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3397175 // mScrimPaint (<unidirectional association>)
	relation 3397175 --->
	  a role_name "mScrimPaint" init_value " new Paint()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3397175 // mScrimPaint (<unidirectional association>)
	  b parent class_ref 145591 // Paint
      end

      classrelation 3397303 // mLeftDragger (<unidirectional association>)
	relation 3397303 --->
	  a role_name "mLeftDragger" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3397303 // mLeftDragger (<unidirectional association>)
	  b parent class_ref 1174327 // ViewDragHelper
      end

      classrelation 3397431 // mRightDragger (<unidirectional association>)
	relation 3397431 --->
	  a role_name "mRightDragger" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3397431 // mRightDragger (<unidirectional association>)
	  b parent class_ref 1174327 // ViewDragHelper
      end

      class 1174455 "ViewDragCallback"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3401399 // <generalisation>
	  relation 3401399 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 3401399 // <generalisation>
	    b parent class_ref 1175351 // Callback
	end

	attribute 4020791 "mAbsGravity"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 3401527 // mDragger (<unidirectional association>)
	  relation 3401527 --->
	    a role_name "mDragger" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3401527 // mDragger (<unidirectional association>)
	    b parent class_ref 1174327 // ViewDragHelper
	end

	attribute 4020919 "mPeekRunnable"
	  const_attribute private explicit_type "Runnable"
	  init_value " new Runnable() {
            @Override public void run() {
                peekDrawer();
            }
        }"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 29564343 "ViewDragCallback"
	  public explicit_return_type ""
	  nparams 1
	    param in name "gravity" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29564471 "setDragger"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "dragger" type class_ref 1174327 // ViewDragHelper
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29564599 "removeCallbacks"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29564727 "tryCaptureView"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "child" type class_ref 134455 // View
	    param in name "pointerId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29564855 "onViewDragStateChanged"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "state" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29564983 "onViewPositionChanged"
	  public explicit_return_type "void"
	  nparams 5
	    param inout name "changedView" type class_ref 134455 // View
	    param in name "left" explicit_type "int"
	    param in name "top" explicit_type "int"
	    param in name "dx" explicit_type "int"
	    param in name "dy" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29565111 "onViewCaptured"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "capturedChild" type class_ref 134455 // View
	    param in name "activePointerId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29565239 "closeOtherDrawer"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29565367 "onViewReleased"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "releasedChild" type class_ref 134455 // View
	    param in name "xvel" explicit_type "float"
	    param in name "yvel" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29565495 "onEdgeTouched"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "edgeFlags" explicit_type "int"
	    param in name "pointerId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29565623 "peekDrawer"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29565751 "onEdgeLock"
	  public explicit_return_type "boolean"
	  nparams 1
	    param in name "edgeFlags" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29565879 "onEdgeDragStarted"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "edgeFlags" explicit_type "int"
	    param in name "pointerId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29566007 "getViewHorizontalDragRange"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29566135 "clampViewPositionHorizontal"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param in name "left" explicit_type "int"
	    param in name "dx" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29566263 "clampViewPositionVertical"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param in name "top" explicit_type "int"
	    param in name "dy" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 3397559 // mLeftCallback (<unidirectional association>)
	relation 3397559 --->
	  a role_name "mLeftCallback" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3397559 // mLeftCallback (<unidirectional association>)
	  b parent class_ref 1174455 // ViewDragCallback
      end

      classrelation 3397687 // mRightCallback (<unidirectional association>)
	relation 3397687 --->
	  a role_name "mRightCallback" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3397687 // mRightCallback (<unidirectional association>)
	  b parent class_ref 1174455 // ViewDragCallback
      end

      attribute 4014263 "mDrawerState"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4014391 "mInLayout"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4014519 "mFirstLayout"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4014647 "mLockModeLeft"
	private explicit_type "int"
	init_value " LOCK_MODE_UNDEFINED"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@LockMode
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4014775 "mLockModeRight"
	private explicit_type "int"
	init_value " LOCK_MODE_UNDEFINED"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@LockMode
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4014903 "mLockModeStart"
	private explicit_type "int"
	init_value " LOCK_MODE_UNDEFINED"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@LockMode
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4015031 "mLockModeEnd"
	private explicit_type "int"
	init_value " LOCK_MODE_UNDEFINED"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@LockMode
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4015159 "mDisallowInterceptRequested"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4015287 "mChildrenCanceledTouch"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3397815 // mListener (<unidirectional association>)
	relation 3397815 --->
	  a role_name "mListener" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Nullable
"
	    classrelation_ref 3397815 // mListener (<unidirectional association>)
	  b parent class_ref 1173559 // DrawerListener
      end

      classrelation 3397943 // mListeners (<unidirectional association>)
	relation 3397943 --->
	  stereotype "List"
	  a role_name "mListeners" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3397943 // mListeners (<unidirectional association>)
	  b parent class_ref 1173559 // DrawerListener
      end

      attribute 4015415 "mInitialMotionX"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4015543 "mInitialMotionY"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3398071 // mStatusBarBackground (<unidirectional association>)
	relation 3398071 --->
	  a role_name "mStatusBarBackground" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3398071 // mStatusBarBackground (<unidirectional association>)
	  b parent class_ref 129719 // Drawable
      end

      classrelation 3398199 // mShadowLeftResolved (<unidirectional association>)
	relation 3398199 --->
	  a role_name "mShadowLeftResolved" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3398199 // mShadowLeftResolved (<unidirectional association>)
	  b parent class_ref 129719 // Drawable
      end

      classrelation 3398327 // mShadowRightResolved (<unidirectional association>)
	relation 3398327 --->
	  a role_name "mShadowRightResolved" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3398327 // mShadowRightResolved (<unidirectional association>)
	  b parent class_ref 129719 // Drawable
      end

      attribute 4015671 "mTitleLeft"
	private explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4015799 "mTitleRight"
	private explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3398455 // mLastInsets (<unidirectional association>)
	relation 3398455 --->
	  a role_name "mLastInsets" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3398455 // mLastInsets (<unidirectional association>)
	  b parent class_ref 132663 // Object
      end

      attribute 4015927 "mDrawStatusBarBackground"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3398583 // mShadowStart (<unidirectional association>)
	relation 3398583 --->
	  a role_name "mShadowStart" init_value " null" private
	    comment " Shadow drawables for different gravity 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3398583 // mShadowStart (<unidirectional association>)
	  b parent class_ref 129719 // Drawable
      end

      classrelation 3398711 // mShadowEnd (<unidirectional association>)
	relation 3398711 --->
	  a role_name "mShadowEnd" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3398711 // mShadowEnd (<unidirectional association>)
	  b parent class_ref 129719 // Drawable
      end

      classrelation 3398839 // mShadowLeft (<unidirectional association>)
	relation 3398839 --->
	  a role_name "mShadowLeft" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3398839 // mShadowLeft (<unidirectional association>)
	  b parent class_ref 129719 // Drawable
      end

      classrelation 3398967 // mShadowRight (<unidirectional association>)
	relation 3398967 --->
	  a role_name "mShadowRight" init_value " null" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3398967 // mShadowRight (<unidirectional association>)
	  b parent class_ref 129719 // Drawable
      end

      classrelation 3399095 // mNonDrawerViews (<unidirectional association>)
	relation 3399095 --->
	  stereotype "ArrayList"
	  a role_name "mNonDrawerViews" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3399095 // mNonDrawerViews (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      class 1174583 "SimpleDrawerListener"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3399223 // <realization>
	  relation 3399223 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 3399223 // <realization>
	    b parent class_ref 1173559 // DrawerListener
	end

	operation 29541815 "onDrawerSlide"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "drawerView" type class_ref 134455 // View
	    param in name "slideOffset" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29541943 "onDrawerOpened"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "drawerView" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29542071 "onDrawerClosed"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "drawerView" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29542199 "onDrawerStateChanged"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "newState" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1174711 "DrawerLayoutCompatImpl"
	visibility package stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 29542327 "configureApplyInsets"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "drawerLayout" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29542455 "dispatchChildInsets"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param inout name "insets" type class_ref 132663 // Object
	    param in name "drawerGravity" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29542583 "applyMarginInsets"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "lp" type class_ref 153399 // MarginLayoutParams
	    param inout name "insets" type class_ref 132663 // Object
	    param in name "drawerGravity" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29542711 "getTopInset"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "lastInsets" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29542839 "getDefaultStatusBarBackground"
	  public return_type class_ref 129719 // Drawable
	  nparams 1
	    param inout name "context" type class_ref 128567 // Context
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1174839 "DrawerLayoutCompatImplBase"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3399351 // <realization>
	  relation 3399351 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 3399351 // <realization>
	    b parent class_ref 1174711 // DrawerLayoutCompatImpl
	end

	operation 29542967 "configureApplyInsets"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "drawerLayout" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29543095 "dispatchChildInsets"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param inout name "insets" type class_ref 132663 // Object
	    param in name "drawerGravity" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29543223 "applyMarginInsets"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "lp" type class_ref 153399 // MarginLayoutParams
	    param inout name "insets" type class_ref 132663 // Object
	    param in name "drawerGravity" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29543351 "getTopInset"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "insets" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29543479 "getDefaultStatusBarBackground"
	  public return_type class_ref 129719 // Drawable
	  nparams 1
	    param inout name "context" type class_ref 128567 // Context
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1174967 "DrawerLayoutCompatImplApi21"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3399479 // <realization>
	  relation 3399479 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 3399479 // <realization>
	    b parent class_ref 1174711 // DrawerLayoutCompatImpl
	end

	operation 29543607 "configureApplyInsets"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "drawerLayout" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29543735 "dispatchChildInsets"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param inout name "insets" type class_ref 132663 // Object
	    param in name "drawerGravity" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29543863 "applyMarginInsets"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "lp" type class_ref 153399 // MarginLayoutParams
	    param inout name "insets" type class_ref 132663 // Object
	    param in name "drawerGravity" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29543991 "getTopInset"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "insets" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29544119 "getDefaultStatusBarBackground"
	  public return_type class_ref 129719 // Drawable
	  nparams 1
	    param inout name "context" type class_ref 128567 // Context
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      extra_member 147895 "initialization"
	
	cpp "" ""
	java "  static {
        final int version = Build.VERSION.SDK_INT;
        if (version >= 21) {
            IMPL = new DrawerLayoutCompatImplApi21();
        } else {
            IMPL = new DrawerLayoutCompatImplBase();
        }
    }"
	php ""
	python ""
	idl ""
      end

      classrelation 3399607 // IMPL (<unidirectional association>)
	relation 3399607 --->
	  a role_name "IMPL" class_relation const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3399607 // IMPL (<unidirectional association>)
	  b parent class_ref 1174711 // DrawerLayoutCompatImpl
      end

      operation 29544247 "DrawerLayout"
	public explicit_return_type ""
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29544375 "DrawerLayout"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29544503 "DrawerLayout"
	public explicit_return_type ""
	nparams 3
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param in name "defStyle" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29544631 "setDrawerElevation"
	public explicit_return_type "void"
	nparams 1
	  param in name "elevation" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the base elevation of the drawer(s) relative to the parent, in pixels. Note that the
elevation change is only supported in API 21 and above.

@param elevation The base depth position of the view, in pixels."
      end

      operation 29544759 "getDrawerElevation"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The base elevation of the drawer(s) relative to the parent, in pixels. Note that the
elevation change is only supported in API 21 and above. For unsupported API levels, 0 will
be returned as the elevation.

@return The base depth position of the view, in pixels."
      end

      operation 29544887 "setChildInsets"
	public explicit_return_type "void"
	nparams 2
	  param inout name "insets" type class_ref 132663 // Object
	  param inout name "draw" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@hide Internal use only; called to apply window insets when configured
with fitsSystemWindows=\"true\""
      end

      operation 29545015 "setDrawerShadow"
	public explicit_return_type "void"
	nparams 2
	  param inout name "shadowDrawable" type class_ref 129719 // Drawable
	  param in name "gravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, @EdgeGravity ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a simple drawable used for the left or right shadow. The drawable provided must have a
nonzero intrinsic width. For API 21 and above, an elevation will be set on the drawer
instead of the drawable provided.

<p>Note that for better support for both left-to-right and right-to-left layout
directions, a drawable for RTL layout (in additional to the one in LTR layout) can be
defined with a resource qualifier \"ldrtl\" for API 17 and above with the gravity
{@link GravityCompat#START}. Alternatively, for API 23 and above, the drawable can
auto-mirrored such that the drawable will be mirrored in RTL layout.</p>

@param shadowDrawable Shadow drawable to use at the edge of a drawer
@param gravity Which drawer the shadow should apply to"
      end

      operation 29545143 "setDrawerShadow"
	public explicit_return_type "void"
	nparams 2
	  param in name "resId" explicit_type "int"
	  param in name "gravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@DrawableRes ${t0} ${p0}, @EdgeGravity ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a simple drawable used for the left or right shadow. The drawable provided must have a
nonzero intrinsic width. For API 21 and above, an elevation will be set on the drawer
instead of the drawable provided.

<p>Note that for better support for both left-to-right and right-to-left layout
directions, a drawable for RTL layout (in additional to the one in LTR layout) can be
defined with a resource qualifier \"ldrtl\" for API 17 and above with the gravity
{@link GravityCompat#START}. Alternatively, for API 23 and above, the drawable can
auto-mirrored such that the drawable will be mirrored in RTL layout.</p>

@param resId Resource id of a shadow drawable to use at the edge of a drawer
@param gravity Which drawer the shadow should apply to"
      end

      operation 29545271 "setScrimColor"
	public explicit_return_type "void"
	nparams 1
	  param in name "color" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@ColorInt ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a color to use for the scrim that obscures primary content while a drawer is open.

@param color Color to use in 0xAARRGGBB format."
      end

      operation 29545399 "setDrawerListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1173559 // DrawerListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Set a listener to be notified of drawer events. Note that this method is deprecated
and you should use {@link #addDrawerListener(DrawerListener)} to add a listener and
{@link #removeDrawerListener(DrawerListener)} to remove a registered listener.

@param listener Listener to notify when drawer events occur
@deprecated Use {@link #addDrawerListener(DrawerListener)}
@see DrawerListener
@see #addDrawerListener(DrawerListener)
@see #removeDrawerListener(DrawerListener)"
      end

      operation 29545527 "addDrawerListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1173559 // DrawerListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified listener to the list of listeners that will be notified of drawer events.

@param listener Listener to notify when drawer events occur.
@see #removeDrawerListener(DrawerListener)"
      end

      operation 29545655 "removeDrawerListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1173559 // DrawerListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified listener from the list of listeners that will be notified of drawer
events.

@param listener Listener to remove from being notified of drawer events
@see #addDrawerListener(DrawerListener)"
      end

      operation 29545783 "setDrawerLockMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "lockMode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@LockMode ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable or disable interaction with all drawers.

<p>This allows the application to restrict the user's ability to open or close
any drawer within this layout. DrawerLayout will still respond to calls to
{@link #openDrawer(int)}, {@link #closeDrawer(int)} and friends if a drawer is locked.</p>

<p>Locking drawers open or closed will implicitly open or close
any drawers as appropriate.</p>

@param lockMode The new lock mode for the given drawer. One of {@link #LOCK_MODE_UNLOCKED},
                {@link #LOCK_MODE_LOCKED_CLOSED} or {@link #LOCK_MODE_LOCKED_OPEN}."
      end

      operation 29545911 "setDrawerLockMode"
	public explicit_return_type "void"
	nparams 2
	  param in name "lockMode" explicit_type "int"
	  param in name "edgeGravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@LockMode ${t0} ${p0}, @EdgeGravity ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable or disable interaction with the given drawer.

<p>This allows the application to restrict the user's ability to open or close
the given drawer. DrawerLayout will still respond to calls to {@link #openDrawer(int)},
{@link #closeDrawer(int)} and friends if a drawer is locked.</p>

<p>Locking a drawer open or closed will implicitly open or close
that drawer as appropriate.</p>

@param lockMode The new lock mode for the given drawer. One of {@link #LOCK_MODE_UNLOCKED},
                {@link #LOCK_MODE_LOCKED_CLOSED} or {@link #LOCK_MODE_LOCKED_OPEN}.
@param edgeGravity Gravity.LEFT, RIGHT, START or END.
                   Expresses which drawer to change the mode for.

@see #LOCK_MODE_UNLOCKED
@see #LOCK_MODE_LOCKED_CLOSED
@see #LOCK_MODE_LOCKED_OPEN"
      end

      operation 29546039 "setDrawerLockMode"
	public explicit_return_type "void"
	nparams 2
	  param in name "lockMode" explicit_type "int"
	  param inout name "drawerView" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@LockMode ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable or disable interaction with the given drawer.

<p>This allows the application to restrict the user's ability to open or close
the given drawer. DrawerLayout will still respond to calls to {@link #openDrawer(int)},
{@link #closeDrawer(int)} and friends if a drawer is locked.</p>

<p>Locking a drawer open or closed will implicitly open or close
that drawer as appropriate.</p>

@param lockMode The new lock mode for the given drawer. One of {@link #LOCK_MODE_UNLOCKED},
                {@link #LOCK_MODE_LOCKED_CLOSED} or {@link #LOCK_MODE_LOCKED_OPEN}.
@param drawerView The drawer view to change the lock mode for

@see #LOCK_MODE_UNLOCKED
@see #LOCK_MODE_LOCKED_CLOSED
@see #LOCK_MODE_LOCKED_OPEN"
      end

      operation 29546167 "getDrawerLockMode"
	public explicit_return_type "int"
	nparams 1
	  param in name "edgeGravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@EdgeGravity ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LockMode
"
	
	
	
	comment "Check the lock mode of the drawer with the given gravity.

@param edgeGravity Gravity of the drawer to check
@return one of {@link #LOCK_MODE_UNLOCKED}, {@link #LOCK_MODE_LOCKED_CLOSED} or
        {@link #LOCK_MODE_LOCKED_OPEN}."
      end

      operation 29546295 "getDrawerLockMode"
	public explicit_return_type "int"
	nparams 1
	  param inout name "drawerView" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LockMode
"
	
	
	
	comment "Check the lock mode of the given drawer view.

@param drawerView Drawer view to check lock mode
@return one of {@link #LOCK_MODE_UNLOCKED}, {@link #LOCK_MODE_LOCKED_CLOSED} or
        {@link #LOCK_MODE_LOCKED_OPEN}."
      end

      operation 29546423 "setDrawerTitle"
	public explicit_return_type "void"
	nparams 2
	  param in name "edgeGravity" explicit_type "int"
	  param inout name "title" explicit_type "CharSequence"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@EdgeGravity ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the title of the drawer with the given gravity.
<p>
When accessibility is turned on, this is the title that will be used to
identify the drawer to the active accessibility service.

@param edgeGravity Gravity.LEFT, RIGHT, START or END. Expresses which
           drawer to set the title for.
@param title The title for the drawer."
      end

      operation 29546551 "getDrawerTitle"
	public explicit_return_type "CharSequence"
	nparams 1
	  param in name "edgeGravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@EdgeGravity ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "Returns the title of the drawer with the given gravity.

@param edgeGravity Gravity.LEFT, RIGHT, START or END. Expresses which
           drawer to return the title for.
@return The title of the drawer, or null if none set.
@see #setDrawerTitle(int, CharSequence)"
      end

      operation 29546679 "updateDrawerState"
	package explicit_return_type "void"
	nparams 3
	  param in name "forGravity" explicit_type "int"
	  param in name "activeState" explicit_type "int"
	  param inout name "activeDrawer" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, @State ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolve the shared state of all drawers from the component ViewDragHelpers.
Should be called whenever a ViewDragHelper's state changes."
      end

      operation 29546807 "dispatchOnDrawerClosed"
	package explicit_return_type "void"
	nparams 1
	  param inout name "drawerView" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29546935 "dispatchOnDrawerOpened"
	package explicit_return_type "void"
	nparams 1
	  param inout name "drawerView" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29547063 "updateChildrenImportantForAccessibility"
	private explicit_return_type "void"
	nparams 2
	  param inout name "drawerView" type class_ref 134455 // View
	  param inout name "isDrawerOpen" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29547191 "dispatchOnDrawerSlide"
	package explicit_return_type "void"
	nparams 2
	  param inout name "drawerView" type class_ref 134455 // View
	  param in name "slideOffset" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29547319 "setDrawerViewOffset"
	package explicit_return_type "void"
	nparams 2
	  param inout name "drawerView" type class_ref 134455 // View
	  param in name "slideOffset" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29547447 "getDrawerViewOffset"
	package explicit_return_type "float"
	nparams 1
	  param inout name "drawerView" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29547575 "getDrawerViewAbsoluteGravity"
	package explicit_return_type "int"
	nparams 1
	  param inout name "drawerView" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the absolute gravity of the child drawerView, resolved according
        to the current layout direction"
      end

      operation 29547703 "checkDrawerViewAbsoluteGravity"
	package explicit_return_type "boolean"
	nparams 2
	  param inout name "drawerView" type class_ref 134455 // View
	  param in name "checkFor" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29547831 "findOpenDrawer"
	package return_type class_ref 134455 // View
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29547959 "moveDrawerToOffset"
	package explicit_return_type "void"
	nparams 2
	  param inout name "drawerView" type class_ref 134455 // View
	  param in name "slideOffset" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29548087 "findDrawerWithGravity"
	package return_type class_ref 134455 // View
	nparams 1
	  param in name "gravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param gravity the gravity of the child to return. If specified as a
           relative value, it will be resolved according to the current
           layout direction.
@return the drawer with the specified gravity"
      end

      operation 29548215 "gravityToString"
	class_operation package return_type class_ref 129591 // String
	nparams 1
	  param in name "gravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@EdgeGravity ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Simple gravity to string - only supports LEFT and RIGHT for debugging output.

@param gravity Absolute gravity value
@return LEFT or RIGHT as appropriate, or a hex string"
      end

      operation 29548343 "onDetachedFromWindow"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29548471 "onAttachedToWindow"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29548599 "onMeasure"
	protected explicit_return_type "void"
	nparams 2
	  param in name "widthMeasureSpec" explicit_type "int"
	  param in name "heightMeasureSpec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29548727 "resolveShadowDrawables"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29548855 "resolveLeftShadow"
	private return_type class_ref 129719 // Drawable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29548983 "resolveRightShadow"
	private return_type class_ref 129719 // Drawable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29549111 "mirror"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "drawable" type class_ref 129719 // Drawable
	  param in name "layoutDirection" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Change the layout direction of the given drawable.
Return true if auto-mirror is supported and drawable's layout direction can be changed.
Otherwise, return false."
      end

      operation 29549239 "onLayout"
	protected explicit_return_type "void"
	nparams 5
	  param inout name "changed" explicit_type "boolean"
	  param in name "l" explicit_type "int"
	  param in name "t" explicit_type "int"
	  param in name "r" explicit_type "int"
	  param in name "b" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29549367 "requestLayout"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29549495 "computeScroll"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29549623 "hasOpaqueBackground"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "v" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29549751 "setStatusBarBackground"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bg" type class_ref 129719 // Drawable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a drawable to draw in the insets area for the status bar.
Note that this will only be activated if this DrawerLayout fitsSystemWindows.

@param bg Background drawable to draw behind the status bar"
      end

      operation 29549879 "getStatusBarBackgroundDrawable"
	public return_type class_ref 129719 // Drawable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the drawable used to draw in the insets area for the status bar.

@return The status bar background drawable, or null if none set"
      end

      operation 29550007 "setStatusBarBackground"
	public explicit_return_type "void"
	nparams 1
	  param in name "resId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a drawable to draw in the insets area for the status bar.
Note that this will only be activated if this DrawerLayout fitsSystemWindows.

@param resId Resource id of a background drawable to draw behind the status bar"
      end

      operation 29550135 "setStatusBarBackgroundColor"
	public explicit_return_type "void"
	nparams 1
	  param in name "color" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@ColorInt ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a drawable to draw in the insets area for the status bar.
Note that this will only be activated if this DrawerLayout fitsSystemWindows.

@param color Color to use as a background drawable to draw behind the status bar
             in 0xAARRGGBB format."
      end

      operation 29550263 "onRtlPropertiesChanged"
	public explicit_return_type "void"
	nparams 1
	  param in name "layoutDirection" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29550391 "onDraw"
	public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 135735 // Canvas
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29550519 "drawChild"
	protected explicit_return_type "boolean"
	nparams 3
	  param inout name "canvas" type class_ref 135735 // Canvas
	  param inout name "child" type class_ref 134455 // View
	  param in name "drawingTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29550647 "isContentView"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29550775 "isDrawerView"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29550903 "onInterceptTouchEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ev" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29551031 "onTouchEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ev" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29551159 "requestDisallowInterceptTouchEvent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "disallowIntercept" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29551287 "closeDrawers"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close all currently open drawer views by animating them out of view."
      end

      operation 29551415 "closeDrawers"
	package explicit_return_type "void"
	nparams 1
	  param inout name "peekingOnly" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29551543 "openDrawer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "drawerView" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the specified drawer view by animating it into view.

@param drawerView Drawer view to open"
      end

      operation 29551671 "openDrawer"
	public explicit_return_type "void"
	nparams 2
	  param inout name "drawerView" type class_ref 134455 // View
	  param inout name "animate" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the specified drawer view.

@param drawerView Drawer view to open
@param animate Whether opening of the drawer should be animated."
      end

      operation 29551799 "openDrawer"
	public explicit_return_type "void"
	nparams 1
	  param in name "gravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@EdgeGravity ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the specified drawer by animating it out of view.

@param gravity Gravity.LEFT to move the left drawer or Gravity.RIGHT for the right.
               GravityCompat.START or GravityCompat.END may also be used."
      end

      operation 29551927 "openDrawer"
	public explicit_return_type "void"
	nparams 2
	  param in name "gravity" explicit_type "int"
	  param inout name "animate" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@EdgeGravity ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the specified drawer.

@param gravity Gravity.LEFT to move the left drawer or Gravity.RIGHT for the right.
               GravityCompat.START or GravityCompat.END may also be used.
@param animate Whether opening of the drawer should be animated."
      end

      operation 29552055 "closeDrawer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "drawerView" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the specified drawer view by animating it into view.

@param drawerView Drawer view to close"
      end

      operation 29552183 "closeDrawer"
	public explicit_return_type "void"
	nparams 2
	  param inout name "drawerView" type class_ref 134455 // View
	  param inout name "animate" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the specified drawer view.

@param drawerView Drawer view to close
@param animate Whether closing of the drawer should be animated."
      end

      operation 29552311 "closeDrawer"
	public explicit_return_type "void"
	nparams 1
	  param in name "gravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@EdgeGravity ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the specified drawer by animating it out of view.

@param gravity Gravity.LEFT to move the left drawer or Gravity.RIGHT for the right.
               GravityCompat.START or GravityCompat.END may also be used."
      end

      operation 29552439 "closeDrawer"
	public explicit_return_type "void"
	nparams 2
	  param in name "gravity" explicit_type "int"
	  param inout name "animate" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@EdgeGravity ${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the specified drawer.

@param gravity Gravity.LEFT to move the left drawer or Gravity.RIGHT for the right.
               GravityCompat.START or GravityCompat.END may also be used.
@param animate Whether closing of the drawer should be animated."
      end

      operation 29552567 "isDrawerOpen"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "drawer" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if the given drawer view is currently in an open state.
To be considered \"open\" the drawer must have settled into its fully
visible state. To check for partial visibility use
{@link #isDrawerVisible(android.view.View)}.

@param drawer Drawer view to check
@return true if the given drawer view is in an open state
@see #isDrawerVisible(android.view.View)"
      end

      operation 29552695 "isDrawerOpen"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "drawerGravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@EdgeGravity ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if the given drawer view is currently in an open state.
To be considered \"open\" the drawer must have settled into its fully
visible state. If there is no drawer with the given gravity this method
will return false.

@param drawerGravity Gravity of the drawer to check
@return true if the given drawer view is in an open state"
      end

      operation 29552823 "isDrawerVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "drawer" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if a given drawer view is currently visible on-screen. The drawer
may be only peeking onto the screen, fully extended, or anywhere inbetween.

@param drawer Drawer view to check
@return true if the given drawer is visible on-screen
@see #isDrawerOpen(android.view.View)"
      end

      operation 29552951 "isDrawerVisible"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "drawerGravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@EdgeGravity ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if a given drawer view is currently visible on-screen. The drawer
may be only peeking onto the screen, fully extended, or anywhere in between.
If there is no drawer with the given gravity this method will return false.

@param drawerGravity Gravity of the drawer to check
@return true if the given drawer is visible on-screen"
      end

      operation 29553079 "hasPeekingDrawer"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29553207 "generateDefaultLayoutParams"
	protected return_type class_ref 140855 // LayoutParams
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29553335 "generateLayoutParams"
	protected return_type class_ref 140855 // LayoutParams
	nparams 1
	  param inout name "p" type class_ref 140855 // LayoutParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29553463 "checkLayoutParams"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 140855 // LayoutParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29553591 "generateLayoutParams"
	public return_type class_ref 140855 // LayoutParams
	nparams 1
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29553719 "addFocusables"
	public explicit_return_type "void"
	nparams 3
	  param inout name "views" explicit_type "ArrayList<View>"
	  param in name "direction" explicit_type "int"
	  param in name "focusableMode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29553847 "hasVisibleDrawer"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29553975 "findVisibleDrawer"
	private return_type class_ref 134455 // View
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29554103 "cancelChildViewTouch"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29554231 "onKeyDown"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "keyCode" explicit_type "int"
	  param inout name "event" type class_ref 137015 // KeyEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29554359 "onKeyUp"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "keyCode" explicit_type "int"
	  param inout name "event" type class_ref 137015 // KeyEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29554487 "onRestoreInstanceState"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "state" type class_ref 137399 // Parcelable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29554615 "onSaveInstanceState"
	protected return_type class_ref 137399 // Parcelable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29554743 "addView"
	public explicit_return_type "void"
	nparams 3
	  param inout name "child" type class_ref 134455 // View
	  param in name "index" explicit_type "int"
	  param inout name "params" type class_ref 140855 // LayoutParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29554871 "includeChildForAccessibility"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1175095 "SavedState"
	visibility protected 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3400247 // <generalisation>
	  relation 3400247 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 3400247 // <generalisation>
	    b parent class_ref 1175223 // AbsSavedState
	end

	attribute 4016055 "openDrawerGravity"
	  package explicit_type "int"
	  init_value " Gravity.NO_GRAVITY"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4016183 "lockModeLeft"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  java_annotation "@LockMode
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4016311 "lockModeRight"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  java_annotation "@LockMode
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4016439 "lockModeStart"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  java_annotation "@LockMode
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4016567 "lockModeEnd"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  java_annotation "@LockMode
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 29555895 "SavedState"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "in" type class_ref 137527 // Parcel
	    param inout name "loader" explicit_type "ClassLoader"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29556023 "SavedState"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "superState" type class_ref 137399 // Parcelable
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29556151 "writeToParcel"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "dest" type class_ref 137527 // Parcel
	    param in name "flags" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	classrelation 3400375 // CREATOR (<unidirectional association>)
	  relation 3400375 --->
	    a role_name "CREATOR" init_value " ParcelableCompat.newCreator(
                new ParcelableCompatCreatorCallbacks<SavedState>() {
                    @Override
                    public SavedState createFromParcel(Parcel in, ClassLoader loader) {
                        return new SavedState(in, loader);
                    }

                    @Override
                    public SavedState[] newArray(int size) {
                        return new SavedState[size];
                    }
                })" class_relation const_relation public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<SavedState> ${name}${value};
"
	      classrelation_ref 3400375 // CREATOR (<unidirectional association>)
	    b parent class_ref 137655 // Creator
	end
      end
    end

    class 1173687 "DrawerLayoutImpl"
      visibility package stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Interface used to communicate from the v21-specific code for configuring a DrawerLayout
to the DrawerLayout itself."
      operation 29541175 "setChildInsets"
	public explicit_return_type "void"
	nparams 2
	  param inout name "insets" type class_ref 132663 // Object
	  param inout name "drawStatusBar" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1174327 "ViewDragHelper"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "ViewDragHelper is a utility class for writing custom ViewGroups. It offers a number
of useful operations and state tracking for allowing a user to drag and reposition
views within their parent ViewGroup."
      class 1175351 "Callback"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 29556279 "onViewDragStateChanged"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "state" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when the drag state changes. See the <code>STATE_*</code> constants
for more information.

@param state The new drag state

@see #STATE_IDLE
@see #STATE_DRAGGING
@see #STATE_SETTLING"
	end

	operation 29556407 "onViewPositionChanged"
	  public explicit_return_type "void"
	  nparams 5
	    param inout name "changedView" type class_ref 134455 // View
	    param in name "left" explicit_type "int"
	    param in name "top" explicit_type "int"
	    param in name "dx" explicit_type "int"
	    param in name "dy" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when the captured view's position changes as the result of a drag or settle.

@param changedView View whose position changed
@param left New X coordinate of the left edge of the view
@param top New Y coordinate of the top edge of the view
@param dx Change in X position from the last call
@param dy Change in Y position from the last call"
	end

	operation 29556535 "onViewCaptured"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "capturedChild" type class_ref 134455 // View
	    param in name "activePointerId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a child view is captured for dragging or settling. The ID of the pointer
currently dragging the captured view is supplied. If activePointerId is
identified as {@link #INVALID_POINTER} the capture is programmatic instead of
pointer-initiated.

@param capturedChild Child view that was captured
@param activePointerId Pointer id tracking the child capture"
	end

	operation 29556663 "onViewReleased"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "releasedChild" type class_ref 134455 // View
	    param in name "xvel" explicit_type "float"
	    param in name "yvel" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when the child view is no longer being actively dragged.
The fling velocity is also supplied, if relevant. The velocity values may
be clamped to system minimums or maximums.

<p>Calling code may decide to fling or otherwise release the view to let it
settle into place. It should do so using {@link #settleCapturedViewAt(int, int)}
or {@link #flingCapturedView(int, int, int, int)}. If the Callback invokes
one of these methods, the ViewDragHelper will enter {@link #STATE_SETTLING}
and the view capture will not fully end until it comes to a complete stop.
If neither of these methods is invoked before <code>onViewReleased</code> returns,
the view will stop in place and the ViewDragHelper will return to
{@link #STATE_IDLE}.</p>

@param releasedChild The captured child view now being released
@param xvel X velocity of the pointer as it left the screen in pixels per second.
@param yvel Y velocity of the pointer as it left the screen in pixels per second."
	end

	operation 29556791 "onEdgeTouched"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "edgeFlags" explicit_type "int"
	    param in name "pointerId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when one of the subscribed edges in the parent view has been touched
by the user while no child view is currently captured.

@param edgeFlags A combination of edge flags describing the edge(s) currently touched
@param pointerId ID of the pointer touching the described edge(s)
@see #EDGE_LEFT
@see #EDGE_TOP
@see #EDGE_RIGHT
@see #EDGE_BOTTOM"
	end

	operation 29556919 "onEdgeLock"
	  public explicit_return_type "boolean"
	  nparams 1
	    param in name "edgeFlags" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when the given edge may become locked. This can happen if an edge drag
was preliminarily rejected before beginning, but after {@link #onEdgeTouched(int, int)}
was called. This method should return true to lock this edge or false to leave it
unlocked. The default behavior is to leave edges unlocked.

@param edgeFlags A combination of edge flags describing the edge(s) locked
@return true to lock the edge, false to leave it unlocked"
	end

	operation 29557047 "onEdgeDragStarted"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "edgeFlags" explicit_type "int"
	    param in name "pointerId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when the user has started a deliberate drag away from one
of the subscribed edges in the parent view while no child view is currently captured.

@param edgeFlags A combination of edge flags describing the edge(s) dragged
@param pointerId ID of the pointer touching the described edge(s)
@see #EDGE_LEFT
@see #EDGE_TOP
@see #EDGE_RIGHT
@see #EDGE_BOTTOM"
	end

	operation 29557175 "getOrderedChildIndex"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called to determine the Z-order of child views.

@param index the ordered position to query for
@return index of the view that should be ordered at position <code>index</code>"
	end

	operation 29557303 "getViewHorizontalDragRange"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the magnitude of a draggable child view's horizontal range of motion in pixels.
This method should return 0 for views that cannot move horizontally.

@param child Child view to check
@return range of horizontal motion in pixels"
	end

	operation 29557431 "getViewVerticalDragRange"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the magnitude of a draggable child view's vertical range of motion in pixels.
This method should return 0 for views that cannot move vertically.

@param child Child view to check
@return range of vertical motion in pixels"
	end

	operation 29557559 "tryCaptureView"
	  abstract public explicit_return_type "boolean"
	  nparams 2
	    param inout name "child" type class_ref 134455 // View
	    param in name "pointerId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when the user's input indicates that they want to capture the given child view
with the pointer indicated by pointerId. The callback should return true if the user
is permitted to drag the given view with the indicated pointer.

<p>ViewDragHelper may call this method multiple times for the same view even if
the view is already captured; this indicates that a new pointer is trying to take
control of the view.</p>

<p>If this method returns true, a call to {@link #onViewCaptured(android.view.View, int)}
will follow if the capture is successful.</p>

@param child Child the user is attempting to capture
@param pointerId ID of the pointer attempting the capture
@return true if capture should be allowed, false otherwise"
	end

	operation 29557687 "clampViewPositionHorizontal"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param in name "left" explicit_type "int"
	    param in name "dx" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Restrict the motion of the dragged child view along the horizontal axis.
The default implementation does not allow horizontal motion; the extending
class must override this method and provide the desired clamping.


@param child Child view being dragged
@param left Attempted motion along the X axis
@param dx Proposed change in position for left
@return The new clamped position for left"
	end

	operation 29557815 "clampViewPositionVertical"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param in name "top" explicit_type "int"
	    param in name "dy" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Restrict the motion of the dragged child view along the vertical axis.
The default implementation does not allow vertical motion; the extending
class must override this method and provide the desired clamping.


@param child Child view being dragged
@param top Attempted motion along the Y axis
@param dy Proposed change in position for top
@return The new clamped position for top"
	end
      end

      classrelation 3400503 // TAG (<unidirectional association>)
	relation 3400503 --->
	  a role_name "TAG" init_value " \"ViewDragHelper\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3400503 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 4016695 "INVALID_POINTER"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A null/invalid pointer ID.
"
      end

      attribute 4016823 "STATE_IDLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A view is not currently being dragged or animating as a result of a fling/snap.
"
      end

      attribute 4016951 "STATE_DRAGGING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A view is currently being dragged. The position is currently changing as a result
of user input or simulated user input.
"
      end

      attribute 4017079 "STATE_SETTLING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A view is currently settling into place as a result of a fling or
predefined non-interactive motion.
"
      end

      attribute 4017207 "EDGE_LEFT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Edge flag indicating that the left edge should be affected.
"
      end

      attribute 4017335 "EDGE_RIGHT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Edge flag indicating that the right edge should be affected.
"
      end

      attribute 4017463 "EDGE_TOP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Edge flag indicating that the top edge should be affected.
"
      end

      attribute 4017591 "EDGE_BOTTOM"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Edge flag indicating that the bottom edge should be affected.
"
      end

      attribute 4017719 "EDGE_ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " EDGE_LEFT | EDGE_TOP | EDGE_RIGHT | EDGE_BOTTOM"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Edge flag set indicating all edges should be affected.
"
      end

      attribute 4017847 "DIRECTION_HORIZONTAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a check should occur along the horizontal axis
"
      end

      attribute 4017975 "DIRECTION_VERTICAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a check should occur along the vertical axis
"
      end

      attribute 4018103 "DIRECTION_ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " DIRECTION_HORIZONTAL | DIRECTION_VERTICAL"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Indicates that a check should occur along all axes
"
      end

      attribute 4018231 "EDGE_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 20"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " dp"
      end

      attribute 4018359 "BASE_SETTLE_DURATION"
	class_attribute const_attribute private explicit_type "int"
	init_value " 256"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ms"
      end

      attribute 4018487 "MAX_SETTLE_DURATION"
	class_attribute const_attribute private explicit_type "int"
	init_value " 600"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ms"
      end

      attribute 4018615 "mDragState"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Current drag state; idle, dragging or settling"
      end

      attribute 4018743 "mTouchSlop"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Distance to travel before a drag may begin"
      end

      attribute 4018871 "mActivePointerId"
	private explicit_type "int"
	init_value " INVALID_POINTER"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Last known position/pointer tracking"
      end

      attribute 4018999 "mInitialMotionX"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4019127 "mInitialMotionY"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4019255 "mLastMotionX"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4019383 "mLastMotionY"
	private explicit_type "float"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4019511 "mInitialEdgesTouched"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4019639 "mEdgeDragsInProgress"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4019767 "mEdgeDragsLocked"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4019895 "mPointersDown"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3400631 // mVelocityTracker (<unidirectional association>)
	relation 3400631 --->
	  a role_name "mVelocityTracker" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3400631 // mVelocityTracker (<unidirectional association>)
	  b parent class_ref 369975 // VelocityTracker
      end

      attribute 4020023 "mMaxVelocity"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4020151 "mMinVelocity"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4020279 "mEdgeSize"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4020407 "mTrackingEdges"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3400759 // mScroller (<unidirectional association>)
	relation 3400759 --->
	  a role_name "mScroller" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3400759 // mScroller (<unidirectional association>)
	  b parent class_ref 1175479 // ScrollerCompat
      end

      classrelation 3400887 // mCallback (<unidirectional association>)
	relation 3400887 --->
	  a role_name "mCallback" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3400887 // mCallback (<unidirectional association>)
	  b parent class_ref 1175351 // Callback
      end

      classrelation 3401015 // mCapturedView (<unidirectional association>)
	relation 3401015 --->
	  a role_name "mCapturedView" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3401015 // mCapturedView (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      attribute 4020535 "mReleaseInProgress"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3401143 // mParentView (<unidirectional association>)
	relation 3401143 --->
	  a role_name "mParentView" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3401143 // mParentView (<unidirectional association>)
	  b parent class_ref 134711 // ViewGroup
      end

      classrelation 3401271 // sInterpolator (<unidirectional association>)
	relation 3401271 --->
	  a role_name "sInterpolator" init_value " new Interpolator() {
        public float getInterpolation(float t) {
            t -= 1.0f;
            return t * t * t * t * t + 1.0f;
        }
    }" class_relation const_relation private
	    comment "
Interpolator defining the animation curve for mScroller

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3401271 // sInterpolator (<unidirectional association>)
	  b parent class_ref 371511 // Interpolator
      end

      attribute 4020663 "mSetIdleRunnable"
	const_attribute private explicit_type "Runnable"
	init_value " new Runnable() {
        public void run() {
            setDragState(STATE_IDLE);
        }
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 29557943 "create"
	class_operation public return_type class_ref 1174327 // ViewDragHelper
	nparams 2
	  param inout name "forParent" type class_ref 134711 // ViewGroup
	  param inout name "cb" type class_ref 1175351 // Callback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method to create a new ViewDragHelper.

@param forParent Parent view to monitor
@param cb Callback to provide information and receive events
@return a new ViewDragHelper instance"
      end

      operation 29558071 "create"
	class_operation public return_type class_ref 1174327 // ViewDragHelper
	nparams 3
	  param inout name "forParent" type class_ref 134711 // ViewGroup
	  param in name "sensitivity" explicit_type "float"
	  param inout name "cb" type class_ref 1175351 // Callback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Factory method to create a new ViewDragHelper.

@param forParent Parent view to monitor
@param sensitivity Multiplier for how sensitive the helper should be about detecting
                   the start of a drag. Larger values are more sensitive. 1.0f is normal.
@param cb Callback to provide information and receive events
@return a new ViewDragHelper instance"
      end

      operation 29558199 "ViewDragHelper"
	private explicit_return_type ""
	nparams 3
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "forParent" type class_ref 134711 // ViewGroup
	  param inout name "cb" type class_ref 1175351 // Callback
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Apps should use ViewDragHelper.create() to get a new instance.
This will allow VDH to use internal compatibility implementations for different
platform versions.

@param context Context to initialize config-dependent params from
@param forParent Parent view to monitor"
      end

      operation 29558327 "setMinVelocity"
	public explicit_return_type "void"
	nparams 1
	  param in name "minVel" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the minimum velocity that will be detected as having a magnitude greater than zero
in pixels per second. Callback methods accepting a velocity will be clamped appropriately.

@param minVel Minimum velocity to detect"
      end

      operation 29558455 "getMinVelocity"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the currently configured minimum velocity. Any flings with a magnitude less
than this value in pixels per second. Callback methods accepting a velocity will receive
zero as a velocity value if the real detected velocity was below this threshold.

@return the minimum velocity that will be detected"
      end

      operation 29558583 "getViewDragState"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current drag state of this helper. This will return one of
{@link #STATE_IDLE}, {@link #STATE_DRAGGING} or {@link #STATE_SETTLING}.
@return The current drag state"
      end

      operation 29558711 "setEdgeTrackingEnabled"
	public explicit_return_type "void"
	nparams 1
	  param in name "edgeFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable edge tracking for the selected edges of the parent view.
The callback's {@link Callback#onEdgeTouched(int, int)} and
{@link Callback#onEdgeDragStarted(int, int)} methods will only be invoked
for edges for which edge tracking has been enabled.

@param edgeFlags Combination of edge flags describing the edges to watch
@see #EDGE_LEFT
@see #EDGE_TOP
@see #EDGE_RIGHT
@see #EDGE_BOTTOM"
      end

      operation 29558839 "getEdgeSize"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the size of an edge. This is the range in pixels along the edges of this view
that will actively detect edge touches or drags if edge tracking is enabled.

@return The size of an edge in pixels
@see #setEdgeTrackingEnabled(int)"
      end

      operation 29558967 "captureChildView"
	public explicit_return_type "void"
	nparams 2
	  param inout name "childView" type class_ref 134455 // View
	  param in name "activePointerId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Capture a specific child view for dragging within the parent. The callback will be notified
but {@link Callback#tryCaptureView(android.view.View, int)} will not be asked permission to
capture this view.

@param childView Child view to capture
@param activePointerId ID of the pointer that is dragging the captured child view"
      end

      operation 29559095 "getCapturedView"
	public return_type class_ref 134455 // View
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The currently captured view, or null if no view has been captured."
      end

      operation 29559223 "getActivePointerId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The ID of the pointer currently dragging the captured view,
        or {@link #INVALID_POINTER}."
      end

      operation 29559351 "getTouchSlop"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The minimum distance in pixels that the user must travel to initiate a drag"
      end

      operation 29559479 "cancel"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The result of a call to this method is equivalent to
{@link #processTouchEvent(android.view.MotionEvent)} receiving an ACTION_CANCEL event."
      end

      operation 29559607 "abort"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@link #cancel()}, but also abort all motion in progress and snap to the end of any
animation."
      end

      operation 29559735 "smoothSlideViewTo"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "child" type class_ref 134455 // View
	  param in name "finalLeft" explicit_type "int"
	  param in name "finalTop" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Animate the view <code>child</code> to the given (left, top) position.
If this method returns true, the caller should invoke {@link #continueSettling(boolean)}
on each subsequent frame to continue the motion until it returns false. If this method
returns false there is no further work to do to complete the movement.

<p>This operation does not count as a capture event, though {@link #getCapturedView()}
will still report the sliding view while the slide is in progress.</p>

@param child Child view to capture and animate
@param finalLeft Final left position of child
@param finalTop Final top position of child
@return true if animation should continue through {@link #continueSettling(boolean)} calls"
      end

      operation 29559863 "settleCapturedViewAt"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "finalLeft" explicit_type "int"
	  param in name "finalTop" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Settle the captured view at the given (left, top) position.
The appropriate velocity from prior motion will be taken into account.
If this method returns true, the caller should invoke {@link #continueSettling(boolean)}
on each subsequent frame to continue the motion until it returns false. If this method
returns false there is no further work to do to complete the movement.

@param finalLeft Settled left edge position for the captured view
@param finalTop Settled top edge position for the captured view
@return true if animation should continue through {@link #continueSettling(boolean)} calls"
      end

      operation 29559991 "forceSettleCapturedViewAt"
	private explicit_return_type "boolean"
	nparams 4
	  param in name "finalLeft" explicit_type "int"
	  param in name "finalTop" explicit_type "int"
	  param in name "xvel" explicit_type "int"
	  param in name "yvel" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Settle the captured view at the given (left, top) position.

@param finalLeft Target left position for the captured view
@param finalTop Target top position for the captured view
@param xvel Horizontal velocity
@param yvel Vertical velocity
@return true if animation should continue through {@link #continueSettling(boolean)} calls"
      end

      operation 29560119 "computeSettleDuration"
	private explicit_return_type "int"
	nparams 5
	  param inout name "child" type class_ref 134455 // View
	  param in name "dx" explicit_type "int"
	  param in name "dy" explicit_type "int"
	  param in name "xvel" explicit_type "int"
	  param in name "yvel" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29560247 "computeAxisDuration"
	private explicit_return_type "int"
	nparams 3
	  param in name "delta" explicit_type "int"
	  param in name "velocity" explicit_type "int"
	  param in name "motionRange" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29560375 "clampMag"
	private explicit_return_type "int"
	nparams 3
	  param in name "value" explicit_type "int"
	  param in name "absMin" explicit_type "int"
	  param in name "absMax" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clamp the magnitude of value for absMin and absMax.
If the value is below the minimum, it will be clamped to zero.
If the value is above the maximum, it will be clamped to the maximum.

@param value Value to clamp
@param absMin Absolute value of the minimum significant value to return
@param absMax Absolute value of the maximum value to return
@return The clamped value with the same sign as <code>value</code>"
      end

      operation 29560503 "clampMag"
	private explicit_return_type "float"
	nparams 3
	  param in name "value" explicit_type "float"
	  param in name "absMin" explicit_type "float"
	  param in name "absMax" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clamp the magnitude of value for absMin and absMax.
If the value is below the minimum, it will be clamped to zero.
If the value is above the maximum, it will be clamped to the maximum.

@param value Value to clamp
@param absMin Absolute value of the minimum significant value to return
@param absMax Absolute value of the maximum value to return
@return The clamped value with the same sign as <code>value</code>"
      end

      operation 29560631 "distanceInfluenceForSnapDuration"
	private explicit_return_type "float"
	nparams 1
	  param in name "f" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29560759 "flingCapturedView"
	public explicit_return_type "void"
	nparams 4
	  param in name "minLeft" explicit_type "int"
	  param in name "minTop" explicit_type "int"
	  param in name "maxLeft" explicit_type "int"
	  param in name "maxTop" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Settle the captured view based on standard free-moving fling behavior.
The caller should invoke {@link #continueSettling(boolean)} on each subsequent frame
to continue the motion until it returns false.

@param minLeft Minimum X position for the view's left edge
@param minTop Minimum Y position for the view's top edge
@param maxLeft Maximum X position for the view's left edge
@param maxTop Maximum Y position for the view's top edge"
      end

      operation 29560887 "continueSettling"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "deferCallbacks" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Move the captured settling view by the appropriate amount for the current time.
If <code>continueSettling</code> returns true, the caller should call it again
on the next frame to continue.

@param deferCallbacks true if state callbacks should be deferred via posted message.
                      Set this to true if you are calling this method from
                      {@link android.view.View#computeScroll()} or similar methods
                      invoked as part of layout or drawing.
@return true if settle is still in progress"
      end

      operation 29561015 "dispatchViewReleased"
	private explicit_return_type "void"
	nparams 2
	  param in name "xvel" explicit_type "float"
	  param in name "yvel" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Like all callback events this must happen on the UI thread, but release
involves some extra semantics. During a release (mReleaseInProgress)
is the only time it is valid to call {@link #settleCapturedViewAt(int, int)}
or {@link #flingCapturedView(int, int, int, int)}."
      end

      operation 29561143 "clearMotionHistory"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29561271 "clearMotionHistory"
	private explicit_return_type "void"
	nparams 1
	  param in name "pointerId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29561399 "ensureMotionHistorySizeForId"
	private explicit_return_type "void"
	nparams 1
	  param in name "pointerId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29561527 "saveInitialMotion"
	private explicit_return_type "void"
	nparams 3
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	  param in name "pointerId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29561655 "saveLastMotion"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ev" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29561783 "isPointerDown"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "pointerId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if the given pointer ID represents a pointer that is currently down (to the best
of the ViewDragHelper's knowledge).

<p>The state used to report this information is populated by the methods
{@link #shouldInterceptTouchEvent(android.view.MotionEvent)} or
{@link #processTouchEvent(android.view.MotionEvent)}. If one of these methods has not
been called for all relevant MotionEvents to track, the information reported
by this method may be stale or incorrect.</p>

@param pointerId pointer ID to check; corresponds to IDs provided by MotionEvent
@return true if the pointer with the given ID is still down"
      end

      operation 29561911 "setDragState"
	package explicit_return_type "void"
	nparams 1
	  param in name "state" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29562039 "tryCaptureViewForDrag"
	package explicit_return_type "boolean"
	nparams 2
	  param inout name "toCapture" type class_ref 134455 // View
	  param in name "pointerId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempt to capture the view with the given pointer ID. The callback will be involved.
This will put us into the \"dragging\" state. If we've already captured this view with
this pointer this method will immediately return true without consulting the callback.

@param toCapture View to capture
@param pointerId Pointer to capture with
@return true if capture was successful"
      end

      operation 29562167 "canScroll"
	protected explicit_return_type "boolean"
	nparams 6
	  param inout name "v" type class_ref 134455 // View
	  param inout name "checkV" explicit_type "boolean"
	  param in name "dx" explicit_type "int"
	  param in name "dy" explicit_type "int"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests scrollability within child views of v given a delta of dx.

@param v View to test for horizontal scrollability
@param checkV Whether the view v passed should itself be checked for scrollability (true),
              or just its children (false).
@param dx Delta scrolled in pixels along the X axis
@param dy Delta scrolled in pixels along the Y axis
@param x X coordinate of the active touch point
@param y Y coordinate of the active touch point
@return true if child views of v can be scrolled by delta of dx."
      end

      operation 29562295 "shouldInterceptTouchEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ev" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if this event as provided to the parent view's onInterceptTouchEvent should
cause the parent to intercept the touch event stream.

@param ev MotionEvent provided to onInterceptTouchEvent
@return true if the parent view should return true from onInterceptTouchEvent"
      end

      operation 29562423 "processTouchEvent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ev" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Process a touch event received by the parent view. This method will dispatch callback events
as needed before returning. The parent view's onTouchEvent implementation should call this.

@param ev The touch event received by the parent view"
      end

      operation 29562551 "reportNewEdgeDrags"
	private explicit_return_type "void"
	nparams 3
	  param in name "dx" explicit_type "float"
	  param in name "dy" explicit_type "float"
	  param in name "pointerId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29562679 "checkNewEdgeDrag"
	private explicit_return_type "boolean"
	nparams 4
	  param in name "delta" explicit_type "float"
	  param in name "odelta" explicit_type "float"
	  param in name "pointerId" explicit_type "int"
	  param in name "edge" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29562807 "checkTouchSlop"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "child" type class_ref 134455 // View
	  param in name "dx" explicit_type "float"
	  param in name "dy" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if we've crossed a reasonable touch slop for the given child view.
If the child cannot be dragged along the horizontal or vertical axis, motion
along that axis will not count toward the slop check.

@param child Child to check
@param dx Motion since initial position along X axis
@param dy Motion since initial position along Y axis
@return true if the touch slop has been crossed"
      end

      operation 29562935 "checkTouchSlop"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "directions" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if any pointer tracked in the current gesture has crossed
the required slop threshold.

<p>This depends on internal state populated by
{@link #shouldInterceptTouchEvent(android.view.MotionEvent)} or
{@link #processTouchEvent(android.view.MotionEvent)}. You should only rely on
the results of this method after all currently available touch data
has been provided to one of these two methods.</p>

@param directions Combination of direction flags, see {@link #DIRECTION_HORIZONTAL},
                  {@link #DIRECTION_VERTICAL}, {@link #DIRECTION_ALL}
@return true if the slop threshold has been crossed, false otherwise"
      end

      operation 29563063 "checkTouchSlop"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "directions" explicit_type "int"
	  param in name "pointerId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if the specified pointer tracked in the current gesture has crossed
the required slop threshold.

<p>This depends on internal state populated by
{@link #shouldInterceptTouchEvent(android.view.MotionEvent)} or
{@link #processTouchEvent(android.view.MotionEvent)}. You should only rely on
the results of this method after all currently available touch data
has been provided to one of these two methods.</p>

@param directions Combination of direction flags, see {@link #DIRECTION_HORIZONTAL},
                  {@link #DIRECTION_VERTICAL}, {@link #DIRECTION_ALL}
@param pointerId ID of the pointer to slop check as specified by MotionEvent
@return true if the slop threshold has been crossed, false otherwise"
      end

      operation 29563191 "isEdgeTouched"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "edges" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if any of the edges specified were initially touched in the currently active gesture.
If there is no currently active gesture this method will return false.

@param edges Edges to check for an initial edge touch. See {@link #EDGE_LEFT},
             {@link #EDGE_TOP}, {@link #EDGE_RIGHT}, {@link #EDGE_BOTTOM} and
             {@link #EDGE_ALL}
@return true if any of the edges specified were initially touched in the current gesture"
      end

      operation 29563319 "isEdgeTouched"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "edges" explicit_type "int"
	  param in name "pointerId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if any of the edges specified were initially touched by the pointer with
the specified ID. If there is no currently active gesture or if there is no pointer with
the given ID currently down this method will return false.

@param edges Edges to check for an initial edge touch. See {@link #EDGE_LEFT},
             {@link #EDGE_TOP}, {@link #EDGE_RIGHT}, {@link #EDGE_BOTTOM} and
             {@link #EDGE_ALL}
@return true if any of the edges specified were initially touched in the current gesture"
      end

      operation 29563447 "releaseViewForPointerUp"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29563575 "dragTo"
	private explicit_return_type "void"
	nparams 4
	  param in name "left" explicit_type "int"
	  param in name "top" explicit_type "int"
	  param in name "dx" explicit_type "int"
	  param in name "dy" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29563703 "isCapturedViewUnder"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the currently captured view is under the given point in the
parent view's coordinate system. If there is no captured view this method
will return false.

@param x X position to test in the parent's coordinate system
@param y Y position to test in the parent's coordinate system
@return true if the captured view is under the given point, false otherwise"
      end

      operation 29563831 "isViewUnder"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "view" type class_ref 134455 // View
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the supplied view is under the given point in the
parent view's coordinate system.

@param view Child view of the parent to hit test
@param x X position to test in the parent's coordinate system
@param y Y position to test in the parent's coordinate system
@return true if the supplied view is under the given point, false otherwise"
      end

      operation 29563959 "findTopChildUnder"
	public return_type class_ref 134455 // View
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the topmost child under the given point within the parent view's coordinate system.
The child order is determined using {@link Callback#getOrderedChildIndex(int)}.

@param x X position to test in the parent's coordinate system
@param y Y position to test in the parent's coordinate system
@return The topmost child view under (x, y) or null if none found."
      end

      operation 29564087 "getEdgesTouched"
	private explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29564215 "isValidPointerForActionMove"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "pointerId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1175479 "ScrollerCompat"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1183287 "EdgeEffectCompat"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2034743 "ExploreByTouchHelper"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "ExploreByTouchHelper is a utility class for implementing accessibility
support in custom {@link View}s that represent a collection of View-like
logical items. It extends {@link AccessibilityNodeProviderCompat} and
simplifies many aspects of providing information to accessibility services
and managing accessibility focus. This class does not currently support
hierarchies of logical items.
<p>
Clients should override abstract methods on this class and attach it to the
host view using {@link ViewCompat#setAccessibilityDelegate}:
<p>
<pre>
class MyCustomView extends View {
    private MyVirtualViewHelper mVirtualViewHelper;

    public MyCustomView(Context context, ...) {
        ...
        mVirtualViewHelper = new MyVirtualViewHelper(this);
        ViewCompat.setAccessibilityDelegate(this, mVirtualViewHelper);
    }

    &#64;Override
    public boolean dispatchHoverEvent(MotionEvent event) {
      return mHelper.dispatchHoverEvent(this, event)
          || super.dispatchHoverEvent(event);
    }

    &#64;Override
    public boolean dispatchKeyEvent(KeyEvent event) {
      return mHelper.dispatchKeyEvent(event)
          || super.dispatchKeyEvent(event);
    }

    &#64;Override
    public boolean onFocusChanged(boolean gainFocus, int direction,
        Rect previouslyFocusedRect) {
      super.onFocusChanged(gainFocus, direction, previouslyFocusedRect);
      mHelper.onFocusChanged(gainFocus, direction, previouslyFocusedRect);
    }
}
mAccessHelper = new MyExploreByTouchHelper(someView);
ViewCompat.setAccessibilityDelegate(someView, mAccessHelper);
</pre>"
      classrelation 6310199 // <generalisation>
	relation 6310199 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6310199 // <generalisation>
	  b parent class_ref 1317687 // AccessibilityDelegateCompat
      end

      attribute 6685623 "INVALID_ID"
	class_attribute const_attribute public explicit_type "int"
	init_value " Integer.MIN_VALUE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Virtual node identifier value for invalid nodes. "
      end

      attribute 6685751 "HOST_ID"
	class_attribute const_attribute public explicit_type "int"
	init_value " View.NO_ID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Virtual node identifier value for the host view's node. "
      end

      classrelation 6310327 // DEFAULT_CLASS_NAME (<unidirectional association>)
	relation 6310327 --->
	  a role_name "DEFAULT_CLASS_NAME" init_value " \"android.view.View\"" class_relation const_relation private
	    comment " Default class name used for virtual views. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6310327 // DEFAULT_CLASS_NAME (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 6310455 // INVALID_PARENT_BOUNDS (<unidirectional association>)
	relation 6310455 --->
	  a role_name "INVALID_PARENT_BOUNDS" init_value " new Rect(
            Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE)" class_relation const_relation private
	    comment " Default bounds used to determine if the client didn't set any. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6310455 // INVALID_PARENT_BOUNDS (<unidirectional association>)
	  b parent class_ref 135351 // Rect
      end

      classrelation 6310583 // mTempScreenRect (<unidirectional association>)
	relation 6310583 --->
	  a role_name "mTempScreenRect" init_value " new Rect()" const_relation private
	    comment " Temporary, reusable data structures.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6310583 // mTempScreenRect (<unidirectional association>)
	  b parent class_ref 135351 // Rect
      end

      classrelation 6310711 // mTempParentRect (<unidirectional association>)
	relation 6310711 --->
	  a role_name "mTempParentRect" init_value " new Rect()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6310711 // mTempParentRect (<unidirectional association>)
	  b parent class_ref 135351 // Rect
      end

      classrelation 6310839 // mTempVisibleRect (<unidirectional association>)
	relation 6310839 --->
	  a role_name "mTempVisibleRect" init_value " new Rect()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6310839 // mTempVisibleRect (<unidirectional association>)
	  b parent class_ref 135351 // Rect
      end

      attribute 6685879 "mTempGlobalRect"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 6310967 // mManager (<unidirectional association>)
	relation 6310967 --->
	  a role_name "mManager" const_relation private
	    comment " System accessibility manager, used to check state and send events. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6310967 // mManager (<unidirectional association>)
	  b parent class_ref 511927 // AccessibilityManager
      end

      classrelation 6311095 // mHost (<unidirectional association>)
	relation 6311095 --->
	  a role_name "mHost" const_relation private
	    comment " View whose internal structure is exposed through this helper. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6311095 // mHost (<unidirectional association>)
	  b parent class_ref 134455 // View
      end

      class 2034871 "MyNodeProvider"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 6312247 // <generalisation>
	  relation 6312247 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 6312247 // <generalisation>
	    b parent class_ref 1317943 // AccessibilityNodeProviderCompat
	end

	operation 36606007 "createAccessibilityNodeInfo"
	  public return_type class_ref 1185335 // AccessibilityNodeInfoCompat
	  nparams 1
	    param in name "virtualViewId" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 36606135 "performAction"
	  public explicit_return_type "boolean"
	  nparams 3
	    param in name "virtualViewId" explicit_type "int"
	    param in name "action" explicit_type "int"
	    param inout name "arguments" type class_ref 131511 // Bundle
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 6311223 // mNodeProvider (<unidirectional association>)
	relation 6311223 --->
	  a role_name "mNodeProvider" private
	    comment " Virtual node provider used to expose logical structure to services. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6311223 // mNodeProvider (<unidirectional association>)
	  b parent class_ref 2034871 // MyNodeProvider
      end

      attribute 6686007 "mAccessibilityFocusedVirtualViewId"
	private explicit_type "int"
	init_value " INVALID_ID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Identifier for the virtual view that holds accessibility focus. "
      end

      attribute 6686135 "mKeyboardFocusedVirtualViewId"
	private explicit_type "int"
	init_value " INVALID_ID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Identifier for the virtual view that holds keyboard focus. "
      end

      attribute 6686263 "mHoveredVirtualViewId"
	private explicit_type "int"
	init_value " INVALID_ID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Identifier for the virtual view that is currently hovered. "
      end

      operation 36599095 "ExploreByTouchHelper"
	public explicit_return_type ""
	nparams 1
	  param inout name "host" type class_ref 134455 // View
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new helper that can expose a virtual view hierarchy for the
specified host view.

@param host view whose virtual view hierarchy is exposed by this helper"
      end

      operation 36599223 "getAccessibilityNodeProvider"
	public return_type class_ref 1317943 // AccessibilityNodeProviderCompat
	nparams 1
	  param inout name "host" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 36599351 "dispatchHoverEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Delegates hover events from the host view.
<p>
Dispatches hover {@link MotionEvent}s to the virtual view hierarchy when
the Explore by Touch feature is enabled.
<p>
This method should be called by overriding the host view's
{@link View#dispatchHoverEvent(MotionEvent)} method:
<pre>&#64;Override
public boolean dispatchHoverEvent(MotionEvent event) {
  return mHelper.dispatchHoverEvent(this, event)
      || super.dispatchHoverEvent(event);
}
</pre>

@param event The hover event to dispatch to the virtual view hierarchy.
@return Whether the hover event was handled."
      end

      operation 36599479 "dispatchKeyEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 137015 // KeyEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Delegates key events from the host view.
<p>
This method should be called by overriding the host view's
{@link View#dispatchKeyEvent(KeyEvent)} method:
<pre>&#64;Override
public boolean dispatchKeyEvent(KeyEvent event) {
  return mHelper.dispatchKeyEvent(event)
      || super.dispatchKeyEvent(event);
}
</pre>"
      end

      operation 36599607 "onFocusChanged"
	public explicit_return_type "void"
	nparams 3
	  param inout name "gainFocus" explicit_type "boolean"
	  param in name "direction" explicit_type "int"
	  param inout name "previouslyFocusedRect" type class_ref 135351 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, @Nullable ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Delegates focus changes from the host view.
<p>
This method should be called by overriding the host view's
{@link View#onFocusChanged(boolean, int, Rect)} method:
<pre>&#64;Override
public boolean onFocusChanged(boolean gainFocus, int direction,
    Rect previouslyFocusedRect) {
  super.onFocusChanged(gainFocus, direction, previouslyFocusedRect);
  mHelper.onFocusChanged(gainFocus, direction, previouslyFocusedRect);
}
</pre>"
      end

      operation 36599735 "getAccessibilityFocusedVirtualViewId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the identifier of the virtual view that has accessibility focus
        or {@link #INVALID_ID} if no virtual view has accessibility
        focus"
      end

      operation 36599863 "getKeyboardFocusedVirtualViewId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the identifier of the virtual view that has keyboard focus
        or {@link #INVALID_ID} if no virtual view has keyboard focus"
      end

      operation 36599991 "keyToDirection"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "keyCode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@FocusRealDirection
"
	
	
	
	comment "Maps key event codes to focus directions.

@param keyCode the key event code
@return the corresponding focus direction"
      end

      operation 36600119 "getBoundsInParent"
	private explicit_return_type "void"
	nparams 2
	  param in name "virtualViewId" explicit_type "int"
	  param inout name "outBounds" type class_ref 135351 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the bounds for the specified virtual view.

@param virtualViewId the identifier of the virtual view
@param outBounds the rect to populate with virtual view bounds"
      end

      classrelation 6311351 // NODE_ADAPTER (<unidirectional association>)
	relation 6311351 --->
	  a role_name "NODE_ADAPTER" init_value "
            new FocusStrategy.BoundsAdapter<AccessibilityNodeInfoCompat>() {
                @Override
                public void obtainBounds(AccessibilityNodeInfoCompat node, Rect outBounds) {
                    node.getBoundsInParent(outBounds);
                }
            }" class_relation const_relation private
	    comment "
Adapts AccessibilityNodeInfoCompat for obtaining bounds.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<AccessibilityNodeInfoCompat> ${name}${value};
"
	    classrelation_ref 6311351 // NODE_ADAPTER (<unidirectional association>)
	  b parent class_ref 2035127 // BoundsAdapter
      end

      classrelation 6311479 // SPARSE_VALUES_ADAPTER (<unidirectional association>)
	relation 6311479 --->
	  a role_name "SPARSE_VALUES_ADAPTER" init_value "
            new FocusStrategy.CollectionAdapter<SparseArrayCompat<
                    AccessibilityNodeInfoCompat>, AccessibilityNodeInfoCompat>() {
                @Override
                public AccessibilityNodeInfoCompat get(
                        SparseArrayCompat<AccessibilityNodeInfoCompat> collection, int index) {
                    return collection.valueAt(index);
                }

                @Override
                public int size(SparseArrayCompat<AccessibilityNodeInfoCompat> collection) {
                    return collection.size();
                }
            }" class_relation const_relation private
	    comment "
Adapts SparseArrayCompat for iterating through values.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<SparseArrayCompat<
            AccessibilityNodeInfoCompat>, AccessibilityNodeInfoCompat> ${name}${value};
"
	    classrelation_ref 6311479 // SPARSE_VALUES_ADAPTER (<unidirectional association>)
	  b parent class_ref 2035255 // CollectionAdapter
      end

      operation 36600247 "moveFocus"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "direction" explicit_type "int"
	  param inout name "previouslyFocusedRect" type class_ref 135351 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@FocusDirection ${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to move keyboard focus in the specified direction.

@param direction the direction in which to move keyboard focus
@param previouslyFocusedRect the bounds of the previously focused item,
                             or {@code null} if not available
@return {@code true} if keyboard focus moved to a virtual view managed
        by this helper, or {@code false} otherwise"
      end

      operation 36600375 "getAllNodes"
	private return_type class_ref 1803575 // SparseArrayCompat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<AccessibilityNodeInfoCompat> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 36600503 "guessPreviouslyFocusedRect"
	class_operation private return_type class_ref 135351 // Rect
	nparams 3
	  param inout name "host" type class_ref 134455 // View
	  param in name "direction" explicit_type "int"
	  param inout name "outBounds" type class_ref 135351 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @FocusRealDirection ${t1} ${p1}, @NonNull ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a best guess for the previously focused rect for keyboard focus
moving in the specified direction.

@param host the view into which focus is moving
@param direction the absolute direction in which focus is moving
@param outBounds the rect to populate with the best-guess bounds for the
                 previous focus rect"
      end

      operation 36600631 "clickKeyboardFocusedVirtualView"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a click action on the keyboard focused virtual view, if any.

@return {@code true} if the click action was performed successfully or
        {@code false} otherwise"
      end

      operation 36600759 "sendEventForVirtualView"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "virtualViewId" explicit_type "int"
	  param in name "eventType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates an event of the specified type with information about an item
and attempts to send it up through the view hierarchy.
<p>
You should call this method after performing a user action that normally
fires an accessibility event, such as clicking on an item.
<p>
<pre>public void performItemClick(T item) {
  ...
  sendEventForVirtualViewId(item.id, AccessibilityEvent.TYPE_VIEW_CLICKED);
}
</pre>

@param virtualViewId the identifier of the virtual view for which to
                     send an event
@param eventType the type of event to send
@return {@code true} if the event was sent successfully, {@code false}
        otherwise"
      end

      operation 36600887 "invalidateRoot"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the accessibility framework that the properties of the parent
view have changed.
<p>
You <strong>must</strong> call this method after adding or removing
items from the parent view."
      end

      operation 36601015 "invalidateVirtualView"
	public explicit_return_type "void"
	nparams 1
	  param in name "virtualViewId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the accessibility framework that the properties of a particular
item have changed.
<p>
You <strong>must</strong> call this method after changing any of the
properties set in
{@link #onPopulateNodeForVirtualView(int, AccessibilityNodeInfoCompat)}.

@param virtualViewId the virtual view id to invalidate, or
                     {@link #HOST_ID} to invalidate the root view
@see #invalidateVirtualView(int, int)"
      end

      operation 36601143 "invalidateVirtualView"
	public explicit_return_type "void"
	nparams 2
	  param in name "virtualViewId" explicit_type "int"
	  param in name "changeTypes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the accessibility framework that the properties of a particular
item have changed.
<p>
You <strong>must</strong> call this method after changing any of the
properties set in
{@link #onPopulateNodeForVirtualView(int, AccessibilityNodeInfoCompat)}.

@param virtualViewId the virtual view id to invalidate, or
                     {@link #HOST_ID} to invalidate the root view
@param changeTypes the bit mask of change types. May be {@code 0} for the
                   default (undefined) change type or one or more of:
        <ul>
        <li>{@link AccessibilityEventCompat#CONTENT_CHANGE_TYPE_CONTENT_DESCRIPTION}
        <li>{@link AccessibilityEventCompat#CONTENT_CHANGE_TYPE_SUBTREE}
        <li>{@link AccessibilityEventCompat#CONTENT_CHANGE_TYPE_TEXT}
        <li>{@link AccessibilityEventCompat#CONTENT_CHANGE_TYPE_UNDEFINED}
        </ul>"
      end

      operation 36601271 "getFocusedVirtualView"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns the virtual view ID for the currently accessibility focused
item.

@return the identifier of the virtual view that has accessibility focus
        or {@link #INVALID_ID} if no virtual view has accessibility
        focus
@deprecated Use {@link #getAccessibilityFocusedVirtualViewId()}."
      end

      operation 36601399 "onVirtualViewKeyboardFocusChanged"
	protected explicit_return_type "void"
	nparams 2
	  param in name "virtualViewId" explicit_type "int"
	  param inout name "hasFocus" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the focus state of a virtual view changes.

@param virtualViewId the virtual view identifier
@param hasFocus      {@code true} if the view has focus, {@code false}
                     otherwise"
      end

      operation 36601527 "updateHoveredVirtualView"
	private explicit_return_type "void"
	nparams 1
	  param in name "virtualViewId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the currently hovered item, sending hover accessibility events as
necessary to maintain the correct state.

@param virtualViewId the virtual view id for the item currently being
                     hovered, or {@link #INVALID_ID} if no item is
                     hovered within the parent view"
      end

      operation 36601655 "createEvent"
	private return_type class_ref 138679 // AccessibilityEvent
	nparams 2
	  param in name "virtualViewId" explicit_type "int"
	  param in name "eventType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an {@link AccessibilityEvent} for the specified
virtual view id, which includes the host view ({@link #HOST_ID}).

@param virtualViewId the virtual view id for the item for which to
                     construct an event
@param eventType the type of event to construct
@return an {@link AccessibilityEvent} populated with information about
        the specified item"
      end

      operation 36601783 "createEventForHost"
	private return_type class_ref 138679 // AccessibilityEvent
	nparams 1
	  param in name "eventType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an {@link AccessibilityEvent} for the host node.

@param eventType the type of event to construct
@return an {@link AccessibilityEvent} populated with information about
        the specified item"
      end

      operation 36601911 "onInitializeAccessibilityEvent"
	public explicit_return_type "void"
	nparams 2
	  param inout name "host" type class_ref 134455 // View
	  param inout name "event" type class_ref 138679 // AccessibilityEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 36602039 "createEventForChild"
	private return_type class_ref 138679 // AccessibilityEvent
	nparams 2
	  param in name "virtualViewId" explicit_type "int"
	  param in name "eventType" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs and returns an {@link AccessibilityEvent} populated with
information about the specified item.

@param virtualViewId the virtual view id for the item for which to
                     construct an event
@param eventType the type of event to construct
@return an {@link AccessibilityEvent} populated with information about
        the specified item"
      end

      operation 36602167 "obtainAccessibilityNodeInfo"
	private return_type class_ref 1185335 // AccessibilityNodeInfoCompat
	nparams 1
	  param in name "virtualViewId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	
	comment "Obtains a populated {@link AccessibilityNodeInfoCompat} for the
virtual view with the specified identifier.
<p>
This method may be called with identifier {@link #HOST_ID} to obtain a
node for the host view.

@param virtualViewId the identifier of the virtual view for which to
                     construct a node
@return an {@link AccessibilityNodeInfoCompat} populated with information
        about the specified item"
      end

      operation 36602295 "createNodeForHost"
	private return_type class_ref 1185335 // AccessibilityNodeInfoCompat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	
	comment "Constructs and returns an {@link AccessibilityNodeInfoCompat} for the
host view populated with its virtual descendants.

@return an {@link AccessibilityNodeInfoCompat} for the parent node"
      end

      operation 36602423 "onInitializeAccessibilityNodeInfo"
	public explicit_return_type "void"
	nparams 2
	  param inout name "host" type class_ref 134455 // View
	  param inout name "info" type class_ref 1185335 // AccessibilityNodeInfoCompat
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 36602551 "createNodeForChild"
	private return_type class_ref 1185335 // AccessibilityNodeInfoCompat
	nparams 1
	  param in name "virtualViewId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@NonNull
"
	
	
	
	comment "Constructs and returns an {@link AccessibilityNodeInfoCompat} for the
specified item. Automatically manages accessibility focus actions.
<p>
Allows the implementing class to specify most node properties, but
overrides the following:
<ul>
<li>{@link AccessibilityNodeInfoCompat#setPackageName}
<li>{@link AccessibilityNodeInfoCompat#setClassName}
<li>{@link AccessibilityNodeInfoCompat#setParent(View)}
<li>{@link AccessibilityNodeInfoCompat#setSource(View, int)}
<li>{@link AccessibilityNodeInfoCompat#setVisibleToUser}
<li>{@link AccessibilityNodeInfoCompat#setBoundsInScreen(Rect)}
</ul>
<p>
Uses the bounds of the parent view and the parent-relative bounding
rectangle specified by
{@link AccessibilityNodeInfoCompat#getBoundsInParent} to automatically
update the following properties:
<ul>
<li>{@link AccessibilityNodeInfoCompat#setVisibleToUser}
<li>{@link AccessibilityNodeInfoCompat#setBoundsInParent}
</ul>

@param virtualViewId the virtual view id for item for which to construct
                     a node
@return an {@link AccessibilityNodeInfoCompat} for the specified item"
      end

      operation 36602679 "performAction"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "virtualViewId" explicit_type "int"
	  param in name "action" explicit_type "int"
	  param inout name "arguments" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 36602807 "performActionForHost"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "action" explicit_type "int"
	  param inout name "arguments" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 36602935 "performActionForChild"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "virtualViewId" explicit_type "int"
	  param in name "action" explicit_type "int"
	  param inout name "arguments" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 36603063 "intersectVisibleToUser"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "localRect" type class_ref 135351 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes whether the specified {@link Rect} intersects with the visible
portion of its parent {@link View}. Modifies {@code localRect} to contain
only the visible portion.

@param localRect a rectangle in local (parent) coordinates
@return whether the specified {@link Rect} is visible on the screen"
      end

      operation 36603191 "requestAccessibilityFocus"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "virtualViewId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to give accessibility focus to a virtual view.
<p>
A virtual view will not actually take focus if
{@link AccessibilityManager#isEnabled()} returns false,
{@link AccessibilityManager#isTouchExplorationEnabled()} returns false,
or the view already has accessibility focus.

@param virtualViewId the identifier of the virtual view on which to
                     place accessibility focus
@return whether this virtual view actually took accessibility focus"
      end

      operation 36603319 "clearAccessibilityFocus"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "virtualViewId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to clear accessibility focus from a virtual view.

@param virtualViewId the identifier of the virtual view from which to
                     clear accessibility focus
@return whether this virtual view actually cleared accessibility focus"
      end

      operation 36603447 "requestKeyboardFocusForVirtualView"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "virtualViewId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to give keyboard focus to a virtual view.

@param virtualViewId the identifier of the virtual view on which to
                     place keyboard focus
@return whether this virtual view actually took keyboard focus"
      end

      operation 36603575 "clearKeyboardFocusForVirtualView"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "virtualViewId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to clear keyboard focus from a virtual view.

@param virtualViewId the identifier of the virtual view from which to
                     clear keyboard focus
@return whether this virtual view actually cleared keyboard focus"
      end

      operation 36603703 "getVirtualViewAt"
	abstract protected explicit_return_type "int"
	nparams 2
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides a mapping between view-relative coordinates and logical
items.

@param x The view-relative x coordinate
@param y The view-relative y coordinate
@return virtual view identifier for the logical item under
        coordinates (x,y) or {@link #HOST_ID} if there is no item at
        the given coordinates"
      end

      operation 36603831 "getVisibleVirtualViews"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "virtualViewIds" explicit_type "List<Integer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates a list with the view's visible items. The ordering of items
within {@code virtualViewIds} specifies order of accessibility focus
traversal.

@param virtualViewIds The list to populate with visible items"
      end

      operation 36603959 "onPopulateEventForVirtualView"
	protected explicit_return_type "void"
	nparams 2
	  param in name "virtualViewId" explicit_type "int"
	  param inout name "event" type class_ref 138679 // AccessibilityEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates an {@link AccessibilityEvent} with information about the
specified item.
<p>
The helper class automatically populates the following fields based on
the values set by
{@link #onPopulateNodeForVirtualView(int, AccessibilityNodeInfoCompat)},
but implementations may optionally override them:
<ul>
<li>event text, see {@link AccessibilityEvent#getText()}
<li>content description, see
{@link AccessibilityEvent#setContentDescription(CharSequence)}
<li>scrollability, see {@link AccessibilityEvent#setScrollable(boolean)}
<li>password state, see {@link AccessibilityEvent#setPassword(boolean)}
<li>enabled state, see {@link AccessibilityEvent#setEnabled(boolean)}
<li>checked state, see {@link AccessibilityEvent#setChecked(boolean)}
</ul>
<p>
The following required fields are automatically populated by the
helper class and may not be overridden:
<ul>
<li>item class name, set to the value used in
{@link #onPopulateNodeForVirtualView(int, AccessibilityNodeInfoCompat)}
<li>package name, set to the package of the host view's
{@link Context}, see {@link AccessibilityEvent#setPackageName}
<li>event source, set to the host view and virtual view identifier,
see {@link AccessibilityRecordCompat#setSource(View, int)}
</ul>

@param virtualViewId The virtual view id for the item for which to
           populate the event
@param event The event to populate"
      end

      operation 36604087 "onPopulateEventForHost"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 138679 // AccessibilityEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates an {@link AccessibilityEvent} with information about the host
view.
<p>
The default implementation is a no-op.

@param event the event to populate with information about the host view"
      end

      operation 36604215 "onPopulateNodeForVirtualView"
	abstract protected explicit_return_type "void"
	nparams 2
	  param in name "virtualViewId" explicit_type "int"
	  param inout name "node" type class_ref 1185335 // AccessibilityNodeInfoCompat
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates an {@link AccessibilityNodeInfoCompat} with information
about the specified item.
<p>
Implementations <strong>must</strong> populate the following required
fields:
<ul>
<li>event text, see
{@link AccessibilityNodeInfoCompat#setText(CharSequence)} or
{@link AccessibilityNodeInfoCompat#setContentDescription(CharSequence)}
<li>bounds in parent coordinates, see
{@link AccessibilityNodeInfoCompat#setBoundsInParent(Rect)}
</ul>
<p>
The helper class automatically populates the following fields with
default values, but implementations may optionally override them:
<ul>
<li>enabled state, set to {@code true}, see
{@link AccessibilityNodeInfoCompat#setEnabled(boolean)}
<li>keyboard focusability, set to {@code true}, see
{@link AccessibilityNodeInfoCompat#setFocusable(boolean)}
<li>item class name, set to {@code android.view.View}, see
{@link AccessibilityNodeInfoCompat#setClassName(CharSequence)}
</ul>
<p>
The following required fields are automatically populated by the
helper class and may not be overridden:
<ul>
<li>package name, identical to the package name set by
{@link #onPopulateEventForVirtualView(int, AccessibilityEvent)}, see
{@link AccessibilityNodeInfoCompat#setPackageName}
<li>node source, identical to the event source set in
{@link #onPopulateEventForVirtualView(int, AccessibilityEvent)}, see
{@link AccessibilityNodeInfoCompat#setSource(View, int)}
<li>parent view, set to the host view, see
{@link AccessibilityNodeInfoCompat#setParent(View)}
<li>visibility, computed based on parent-relative bounds, see
{@link AccessibilityNodeInfoCompat#setVisibleToUser(boolean)}
<li>accessibility focus, computed based on internal helper state, see
{@link AccessibilityNodeInfoCompat#setAccessibilityFocused(boolean)}
<li>keyboard focus, computed based on internal helper state, see
{@link AccessibilityNodeInfoCompat#setFocused(boolean)}
<li>bounds in screen coordinates, computed based on host view bounds,
see {@link AccessibilityNodeInfoCompat#setBoundsInScreen(Rect)}
</ul>
<p>
Additionally, the helper class automatically handles keyboard focus and
accessibility focus management by adding the appropriate
{@link AccessibilityNodeInfoCompat#ACTION_FOCUS},
{@link AccessibilityNodeInfoCompat#ACTION_CLEAR_FOCUS},
{@link AccessibilityNodeInfoCompat#ACTION_ACCESSIBILITY_FOCUS}, or
{@link AccessibilityNodeInfoCompat#ACTION_CLEAR_ACCESSIBILITY_FOCUS}
actions. Implementations must <strong>never</strong> manually add these
actions.
<p>
The helper class also automatically modifies parent- and
screen-relative bounds to reflect the portion of the item visible
within its parent.

@param virtualViewId The virtual view identifier of the item for
           which to populate the node
@param node The node to populate"
      end

      operation 36604343 "onPopulateNodeForHost"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 1185335 // AccessibilityNodeInfoCompat
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Populates an {@link AccessibilityNodeInfoCompat} with information
about the host view.
<p>
The default implementation is a no-op.

@param node the node to populate with information about the host view"
      end

      operation 36604471 "onPerformActionForVirtualView"
	abstract protected explicit_return_type "boolean"
	nparams 3
	  param in name "virtualViewId" explicit_type "int"
	  param in name "action" explicit_type "int"
	  param inout name "arguments" type class_ref 131511 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the specified accessibility action on the item associated
with the virtual view identifier. See
{@link AccessibilityNodeInfoCompat#performAction(int, Bundle)} for
more information.
<p>
Implementations <strong>must</strong> handle any actions added manually
in
{@link #onPopulateNodeForVirtualView(int, AccessibilityNodeInfoCompat)}.
<p>
The helper class automatically handles focus management resulting
from {@link AccessibilityNodeInfoCompat#ACTION_ACCESSIBILITY_FOCUS}
and
{@link AccessibilityNodeInfoCompat#ACTION_CLEAR_ACCESSIBILITY_FOCUS}
actions.

@param virtualViewId The virtual view identifier of the item on which
           to perform the action
@param action The accessibility action to perform
@param arguments (Optional) A bundle with additional arguments, or
           null
@return true if the action was performed"
      end
    end

    class 2034999 "FocusStrategy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 2035127 "BoundsAdapter"
	visibility package stereotype "interface"
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 2035255 "CollectionAdapter"
	visibility package stereotype "interface"
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end
    end
  end

  deploymentview 179255 "widget"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 690231 "DrawerLayoutImpl"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1173687 // DrawerLayoutImpl
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 690487 "ViewDragHelper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.VelocityTrackerCompat;
import android.support.v4.view.ViewCompat;
import android.util.Log;
import android.view.MotionEvent;
import android.view.VelocityTracker;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.animation.Interpolator;
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 1174327 // ViewDragHelper
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1137719 "ExploreByTouchHelper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.graphics.Rect;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.util.SparseArrayCompat;
import android.support.v4.view.AccessibilityDelegateCompat;
import android.support.v4.view.KeyEventCompat;
import android.support.v4.view.MotionEventCompat;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.ViewCompat.FocusDirection;
import android.support.v4.view.ViewCompat.FocusRealDirection;
import android.support.v4.view.ViewParentCompat;
import android.support.v4.view.accessibility.AccessibilityEventCompat;
import android.support.v4.view.accessibility.AccessibilityManagerCompat;
import android.support.v4.view.accessibility.AccessibilityNodeInfoCompat;
import android.support.v4.view.accessibility.AccessibilityNodeProviderCompat;
import android.support.v4.view.accessibility.AccessibilityRecordCompat;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewParent;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityManager;
import java.util.ArrayList;
import java.util.List;
${definition}"
      associated_classes
	class_ref 2034743 // ExploreByTouchHelper
      end
      comment "Copyright (C) 2013 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
