class Subroutine
!!!725047.java!!!	Subroutine(in startBlock : int)
            this.startBlock = startBlock;
            retBlocks = new BitSet(maxLabel);
            callerBlocks = new BitSet(maxLabel);
            hasSubroutines = true;
!!!725175.java!!!	Subroutine(in startBlock : int, in retBlock : int)
            this(startBlock);
            addRetBlock(retBlock);
!!!725303.java!!!	getStartBlock() : int
            return startBlock;
!!!725431.java!!!	addRetBlock(in retBlock : int) : void
            retBlocks.set(retBlock);
!!!725559.java!!!	addCallerBlock(in label : int) : void
            callerBlocks.set(label);
!!!725687.java!!!	getSuccessors() : IntList
            IntList successors = new IntList(callerBlocks.size());

            /*
             * For each subroutine caller, get it's target. If the
             * target is us, add the ret target (subroutine successor)
             * to our list
             */

            for (int label = callerBlocks.nextSetBit(0); label >= 0;
                 label = callerBlocks.nextSetBit(label+1)) {
                BasicBlock subCaller = labelToBlock(label);
                successors.add(subCaller.getSuccessors().get(0));
            }

            successors.setImmutable();

            return successors;
!!!725815.java!!!	mergeToSuccessors(inout frame : Frame, inout workSet : int) : void
            for (int label = callerBlocks.nextSetBit(0); label >= 0;
                 label = callerBlocks.nextSetBit(label+1)) {
                BasicBlock subCaller = labelToBlock(label);
                int succLabel = subCaller.getSuccessors().get(0);

                Frame subFrame = frame.subFrameForLabel(startBlock, label);

                if (subFrame != null) {
                    mergeAndWorkAsNecessary(succLabel, -1, null,
                            subFrame, workSet);
                } else {
                    Bits.set(workSet, label);
                }
            }
