format 76
"widget" // nougat_src::frameworks::base::core::java::android::support::v7::widget
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/support/v7/recyclerview/src/android/support/v7/widget/"
  java_package "android.support.v7.widget"
  classview 195639 "widget"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1176503 "RecyclerView"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A flexible view for providing a limited window into a large data set.

<h3>Glossary of terms:</h3>

<ul>
    <li><em>Adapter:</em> A subclass of {@link Adapter} responsible for providing views
    that represent items in a data set.</li>
    <li><em>Position:</em> The position of a data item within an <em>Adapter</em>.</li>
    <li><em>Index:</em> The index of an attached child view as used in a call to
    {@link ViewGroup#getChildAt}. Contrast with <em>Position.</em></li>
    <li><em>Binding:</em> The process of preparing a child view to display data corresponding
    to a <em>position</em> within the adapter.</li>
    <li><em>Recycle (view):</em> A view previously used to display data for a specific adapter
    position may be placed in a cache for later reuse to display the same type of data again
    later. This can drastically improve performance by skipping initial layout inflation
    or construction.</li>
    <li><em>Scrap (view):</em> A child view that has entered into a temporarily detached
    state during layout. Scrap views may be reused without becoming fully detached
    from the parent RecyclerView, either unmodified if no rebinding is required or modified
    by the adapter if the view was considered <em>dirty</em>.</li>
    <li><em>Dirty (view):</em> A child view that must be rebound by the adapter before
    being displayed.</li>
</ul>

<h4>Positions in RecyclerView:</h4>
<p>
RecyclerView introduces an additional level of abstraction between the {@link Adapter} and
{@link LayoutManager} to be able to detect data set changes in batches during a layout
calculation. This saves LayoutManager from tracking adapter changes to calculate animations.
It also helps with performance because all view bindings happen at the same time and unnecessary
bindings are avoided.
<p>
For this reason, there are two types of <code>position</code> related methods in RecyclerView:
<ul>
    <li>layout position: Position of an item in the latest layout calculation. This is the
    position from the LayoutManager's perspective.</li>
    <li>adapter position: Position of an item in the adapter. This is the position from
    the Adapter's perspective.</li>
</ul>
<p>
These two positions are the same except the time between dispatching <code>adapter.notify*
</code> events and calculating the updated layout.
<p>
Methods that return or receive <code>*LayoutPosition*</code> use position as of the latest
layout calculation (e.g. {@link ViewHolder#getLayoutPosition()},
{@link #findViewHolderForLayoutPosition(int)}). These positions include all changes until the
last layout calculation. You can rely on these positions to be consistent with what user is
currently seeing on the screen. For example, if you have a list of items on the screen and user
asks for the 5<sup>th</sup> element, you should use these methods as they'll match what user
is seeing.
<p>
The other set of position related methods are in the form of
<code>*AdapterPosition*</code>. (e.g. {@link ViewHolder#getAdapterPosition()},
{@link #findViewHolderForAdapterPosition(int)}) You should use these methods when you need to
work with up-to-date adapter positions even if they may not have been reflected to layout yet.
For example, if you want to access the item in the adapter on a ViewHolder click, you should use
{@link ViewHolder#getAdapterPosition()}. Beware that these methods may not be able to calculate
adapter positions if {@link Adapter#notifyDataSetChanged()} has been called and new layout has
not yet been calculated. For this reasons, you should carefully handle {@link #NO_POSITION} or
<code>null</code> results from these methods.
<p>
When writing a {@link LayoutManager} you almost always want to use layout positions whereas when
writing an {@link Adapter}, you probably want to use adapter positions.

@attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_layoutManager"
      class 1180983 "OnItemTouchListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 29652919 "onInterceptTouchEvent"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "rv" type class_ref 1176503 // RecyclerView
	    param inout name "e" type class_ref 146743 // MotionEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Silently observe and/or take over touch events sent to the RecyclerView
before they are handled by either the RecyclerView itself or its child views.

<p>The onInterceptTouchEvent methods of each attached OnItemTouchListener will be run
in the order in which each listener was added, before any other touch processing
by the RecyclerView itself or child views occurs.</p>

@param e MotionEvent describing the touch event. All coordinates are in
         the RecyclerView's coordinate system.
@return true if this OnItemTouchListener wishes to begin intercepting touch events, false
        to continue with the current behavior and continue observing future events in
        the gesture."
	end

	operation 29653047 "onTouchEvent"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "rv" type class_ref 1176503 // RecyclerView
	    param inout name "e" type class_ref 146743 // MotionEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Process a touch event as part of a gesture that was claimed by returning true from
a previous call to {@link #onInterceptTouchEvent}.

@param e MotionEvent describing the touch event. All coordinates are in
         the RecyclerView's coordinate system."
	end

	operation 29653175 "onRequestDisallowInterceptTouchEvent"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "disallowIntercept" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a child of RecyclerView does not want RecyclerView and its ancestors to
intercept touch events with
{@link ViewGroup#onInterceptTouchEvent(MotionEvent)}.

@param disallowIntercept True if the child does not want the parent to
           intercept touch events.
@see ViewParent#requestDisallowInterceptTouchEvent(boolean)"
	end
      end

      class 1181495 "ViewHolder"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3422903 // itemView (<unidirectional association>)
	  relation 3422903 --->
	    a role_name "itemView" const_relation public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3422903 // itemView (<unidirectional association>)
	    b parent class_ref 134455 // View
	end

	attribute 4044727 "mPosition"
	  package explicit_type "int"
	  init_value " NO_POSITION"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4044855 "mOldPosition"
	  package explicit_type "int"
	  init_value " NO_POSITION"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4044983 "mItemId"
	  package explicit_type "long"
	  init_value " NO_ID"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4045111 "mItemViewType"
	  package explicit_type "int"
	  init_value " INVALID_TYPE"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4045239 "mPreLayoutPosition"
	  package explicit_type "int"
	  init_value " NO_POSITION"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 3423031 // mShadowedHolder (<unidirectional association>)
	  relation 3423031 --->
	    a role_name "mShadowedHolder" init_value " null" package
	      comment " The item that this holder is shadowing during an item change event/animation
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3423031 // mShadowedHolder (<unidirectional association>)
	    b parent class_ref 1181495 // ViewHolder
	end

	classrelation 3423159 // mShadowingHolder (<unidirectional association>)
	  relation 3423159 --->
	    a role_name "mShadowingHolder" init_value " null" package
	      comment " The item that is shadowing this holder during an item change event/animation
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3423159 // mShadowingHolder (<unidirectional association>)
	    b parent class_ref 1181495 // ViewHolder
	end

	attribute 4045367 "FLAG_BOUND"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "This ViewHolder has been bound to a position; mPosition, mItemId and mItemViewType
are all valid.
"
	end

	attribute 4045495 "FLAG_UPDATE"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The data this ViewHolder's view reflects is stale and needs to be rebound
by the adapter. mPosition and mItemId are consistent.
"
	end

	attribute 4045623 "FLAG_INVALID"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 2"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "This ViewHolder's data is invalid. The identity implied by mPosition and mItemId
are not to be trusted and may no longer match the item view type.
This ViewHolder must be fully rebound to different data.
"
	end

	attribute 4045751 "FLAG_REMOVED"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 3"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "This ViewHolder points at data that represents an item previously removed from the
data set. Its view may still be used for things like outgoing animations.
"
	end

	attribute 4045879 "FLAG_NOT_RECYCLABLE"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 4"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "This ViewHolder should not be recycled. This flag is set via setIsRecyclable()
and is intended to keep views around during animations.
"
	end

	attribute 4046007 "FLAG_RETURNED_FROM_SCRAP"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 5"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "This ViewHolder is returned from scrap which means we are expecting an addView call
for this itemView. When returned from scrap, ViewHolder stays in the scrap list until
the end of the layout pass and then recycled by RecyclerView if it is not added back to
the RecyclerView.
"
	end

	attribute 4046135 "FLAG_IGNORE"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 7"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "This ViewHolder is fully managed by the LayoutManager. We do not scrap, recycle or remove
it unless LayoutManager is replaced.
It is still fully visible to the LayoutManager.
"
	end

	attribute 4046263 "FLAG_TMP_DETACHED"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 8"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "When the View is detached form the parent, we set this flag so that we can take correct
action when we need to remove it or add it back.
"
	end

	attribute 4046391 "FLAG_ADAPTER_POSITION_UNKNOWN"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 9"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Set when we can no longer determine the adapter position of this ViewHolder until it is
rebound to a new position. It is different than FLAG_INVALID because FLAG_INVALID is
set even when the type does not match. Also, FLAG_ADAPTER_POSITION_UNKNOWN is set as soon
as adapter notification arrives vs FLAG_INVALID is set lazily before layout is
re-calculated.
"
	end

	attribute 4046519 "FLAG_ADAPTER_FULLUPDATE"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 10"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Set when a addChangePayload(null) is called
"
	end

	attribute 4046647 "FLAG_MOVED"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 11"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Used by ItemAnimator when a ViewHolder's position changes
"
	end

	attribute 4046775 "FLAG_APPEARED_IN_PRE_LAYOUT"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 12"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Used by ItemAnimator when a ViewHolder appears in pre-layout
"
	end

	attribute 4046903 "FLAG_BOUNCED_FROM_HIDDEN_LIST"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1 << 13"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Used when a ViewHolder starts the layout pass as a hidden ViewHolder but is re-used from
hidden list (as if it was scrap) without being recycled in between.

When a ViewHolder is hidden, there are 2 paths it can be re-used:
  a) Animation ends, view is recycled and used from the recycle pool.
  b) LayoutManager asks for the View for that position while the ViewHolder is hidden.

This flag is used to represent \"case b\" where the ViewHolder is reused without being
recycled (thus \"bounced\" from the hidden list). This state requires special handling
because the ViewHolder must be added to pre layout maps for animations as if it was
already there.
"
	end

	attribute 4047031 "mFlags"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 3423287 // FULLUPDATE_PAYLOADS (<unidirectional association>)
	  relation 3423287 --->
	    stereotype "List"
	    a role_name "FULLUPDATE_PAYLOADS" init_value " Collections.EMPTY_LIST" class_relation const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 3423287 // FULLUPDATE_PAYLOADS (<unidirectional association>)
	    b parent class_ref 132663 // Object
	end

	classrelation 3423415 // mPayloads (<unidirectional association>)
	  relation 3423415 --->
	    stereotype "List"
	    a role_name "mPayloads" init_value " null" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 3423415 // mPayloads (<unidirectional association>)
	    b parent class_ref 132663 // Object
	end

	classrelation 3423543 // mUnmodifiedPayloads (<unidirectional association>)
	  relation 3423543 --->
	    stereotype "List"
	    a role_name "mUnmodifiedPayloads" init_value " null" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 3423543 // mUnmodifiedPayloads (<unidirectional association>)
	    b parent class_ref 132663 // Object
	end

	attribute 4047159 "mIsRecyclableCount"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 3423671 // mScrapContainer (<unidirectional association>)
	  relation 3423671 --->
	    a role_name "mScrapContainer" init_value " null" private
	      comment " If non-null, view is currently considered scrap and may be reused for other data by the
 scrap container.
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3423671 // mScrapContainer (<unidirectional association>)
	    b parent class_ref 1182007 // Recycler
	end

	attribute 4047287 "mInChangeScrap"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Keeps whether this ViewHolder lives in Change scrap or Attached scrap"
	end

	attribute 4047415 "mWasImportantForAccessibilityBeforeHidden"
	  private explicit_type "int"
	  init_value "
                ViewCompat.IMPORTANT_FOR_ACCESSIBILITY_AUTO"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Saves isImportantForAccessibility value for the view item while it's in hidden state and
 marked as unimportant for accessibility."
	end

	classrelation 3423799 // mOwnerRecyclerView (<unidirectional association>)
	  relation 3423799 --->
	    a role_name "mOwnerRecyclerView" package
	      comment "
Is set when VH is bound from the adapter and cleaned right before it is sent to
{@link RecycledViewPool}.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3423799 // mOwnerRecyclerView (<unidirectional association>)
	    b parent class_ref 1176503 // RecyclerView
	end

	operation 29654327 "ViewHolder"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "itemView" type class_ref 134455 // View
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29654455 "flagRemovedAndOffsetPosition"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "mNewPosition" explicit_type "int"
	    param in name "offset" explicit_type "int"
	    param inout name "applyToPreLayout" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29654583 "offsetPosition"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "offset" explicit_type "int"
	    param inout name "applyToPreLayout" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29654711 "clearOldPosition"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29654839 "saveOldPosition"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29654967 "shouldIgnore"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29655095 "getPosition"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Deprecated
"
	  
	  
	  
	  comment "@deprecated This method is deprecated because its meaning is ambiguous due to the async
handling of adapter updates. Please use {@link #getLayoutPosition()} or
{@link #getAdapterPosition()} depending on your use case.

@see #getLayoutPosition()
@see #getAdapterPosition()"
	end

	operation 29655223 "getLayoutPosition"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the position of the ViewHolder in terms of the latest layout pass.
<p>
This position is mostly used by RecyclerView components to be consistent while
RecyclerView lazily processes adapter updates.
<p>
For performance and animation reasons, RecyclerView batches all adapter updates until the
next layout pass. This may cause mismatches between the Adapter position of the item and
the position it had in the latest layout calculations.
<p>
LayoutManagers should always call this method while doing calculations based on item
positions. All methods in {@link RecyclerView.LayoutManager}, {@link RecyclerView.State},
{@link RecyclerView.Recycler} that receive a position expect it to be the layout position
of the item.
<p>
If LayoutManager needs to call an external method that requires the adapter position of
the item, it can use {@link #getAdapterPosition()} or
{@link RecyclerView.Recycler#convertPreLayoutPositionToPostLayout(int)}.

@return Returns the adapter position of the ViewHolder in the latest layout pass.
@see #getAdapterPosition()"
	end

	operation 29655351 "getAdapterPosition"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the Adapter position of the item represented by this ViewHolder.
<p>
Note that this might be different than the {@link #getLayoutPosition()} if there are
pending adapter updates but a new layout pass has not happened yet.
<p>
RecyclerView does not handle any adapter updates until the next layout traversal. This
may create temporary inconsistencies between what user sees on the screen and what
adapter contents have. This inconsistency is not important since it will be less than
16ms but it might be a problem if you want to use ViewHolder position to access the
adapter. Sometimes, you may need to get the exact adapter position to do
some actions in response to user events. In that case, you should use this method which
will calculate the Adapter position of the ViewHolder.
<p>
Note that if you've called {@link RecyclerView.Adapter#notifyDataSetChanged()}, until the
next layout pass, the return value of this method will be {@link #NO_POSITION}.

@return The adapter position of the item if it still exists in the adapter.
{@link RecyclerView#NO_POSITION} if item has been removed from the adapter,
{@link RecyclerView.Adapter#notifyDataSetChanged()} has been called after the last
layout pass or the ViewHolder has already been recycled."
	end

	operation 29655479 "getOldPosition"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "When LayoutManager supports animations, RecyclerView tracks 3 positions for ViewHolders
to perform animations.
<p>
If a ViewHolder was laid out in the previous onLayout call, old position will keep its
adapter index in the previous layout.

@return The previous adapter index of the Item represented by this ViewHolder or
{@link #NO_POSITION} if old position does not exists or cleared (pre-layout is
complete)."
	end

	operation 29655607 "getItemId"
	  public explicit_return_type "long"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns The itemId represented by this ViewHolder.

@return The the item's id if adapter has stable ids, {@link RecyclerView#NO_ID}
otherwise"
	end

	operation 29655735 "getItemViewType"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return The view type of this ViewHolder."
	end

	operation 29655863 "isScrap"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29655991 "unScrap"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29656119 "wasReturnedFromScrap"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29656247 "clearReturnedFromScrapFlag"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29656375 "clearTmpDetachFlag"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29656503 "stopIgnoring"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29656631 "setScrapContainer"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "isChangeScrap" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29656759 "isInvalid"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29656887 "needsUpdate"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29657015 "isBound"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29657143 "isRemoved"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29657271 "hasAnyOfTheFlags"
	  package explicit_return_type "boolean"
	  nparams 1
	    param in name "flags" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29657399 "isTmpDetached"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29657527 "isAdapterPositionUnknown"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29657655 "setFlags"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "flags" explicit_type "int"
	    param in name "mask" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29657783 "addFlags"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "flags" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29657911 "addChangePayload"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "payload" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29658039 "createPayloadsIfNeeded"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29658167 "clearPayload"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29658295 "getUnmodifiedPayloads"
	  package return_type class_ref 132663 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29658423 "resetInternal"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29658551 "onEnteredHiddenState"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when the child view enters the hidden state"
	end

	operation 29658679 "onLeftHiddenState"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when the child view leaves the hidden state"
	end

	operation 29658807 "toString"
	  public return_type class_ref 129591 // String
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29658935 "setIsRecyclable"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "recyclable" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Informs the recycler whether this item can be recycled. Views which are not
recyclable will not be reused for other items until setIsRecyclable() is
later set to true. Calls to setIsRecyclable() should always be paired (one
call to setIsRecyclabe(false) should always be matched with a later call to
setIsRecyclable(true)). Pairs of calls may be nested, as the state is internally
reference-counted.

@param recyclable Whether this item is available to be recycled. Default value
is true."
	end

	operation 29659063 "isRecyclable"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@see {@link #setIsRecyclable(boolean)}

@return true if this item is available to be recycled, false otherwise."
	end

	operation 29659191 "shouldBeKeptAsChild"
	  private explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns whether we have animations referring to this view holder or not.
This is similar to isRecyclable flag but does not check transient state."
	end

	operation 29659319 "doesTransientStatePreventRecycling"
	  private explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return True if ViewHolder is not refenrenced by RecyclerView animations but has
transient state which will prevent it from being recycled."
	end

	operation 29659447 "isUpdated"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3415095 // <generalisation>
	relation 3415095 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 3415095 // <generalisation>
	  b parent class_ref 134711 // ViewGroup
      end

      classrelation 3415223 // <realization>
	relation 3415223 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 3415223 // <realization>
	  b parent class_ref 1181623 // ScrollingView
      end

      classrelation 3415351 // <realization>
	relation 3415351 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 3415351 // <realization>
	  b parent class_ref 1181751 // NestedScrollingChild
      end

      classrelation 3415479 // TAG (<unidirectional association>)
	relation 3415479 --->
	  a role_name "TAG" init_value " \"RecyclerView\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3415479 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 4035511 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4035639 "NESTED_SCROLLING_ATTRS"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {16843830 /* android.R.attr.nestedScrollingEnabled */}"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4035767 "CLIP_TO_PADDING_ATTR"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {android.R.attr.clipToPadding}"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4035895 "FORCE_INVALIDATE_DISPLAY_LIST"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " Build.VERSION.SDK_INT == 18
            || Build.VERSION.SDK_INT == 19 || Build.VERSION.SDK_INT == 20"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "On Kitkat and JB MR2, there is a bug which prevents DisplayList from being invalidated if
a View is two levels deep(wrt to ViewHolder.itemView). DisplayList can be invalidated by
setting View's visibility to INVISIBLE when View is detached. On Kitkat and JB MR2, Recycler
recursively traverses itemView and invalidates display list for each ViewGroup that matches
this criteria.
"
      end

      attribute 4036023 "ALLOW_SIZE_IN_UNSPECIFIED_SPEC"
	class_attribute const_attribute package explicit_type "boolean"
	init_value " Build.VERSION.SDK_INT >= 23"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "On M+, an unspecified measure spec may include a hint which we can use. On older platforms,
this value might be garbage. To save LayoutManagers from it, RecyclerView sets the size to
0 when mode is unspecified.
"
      end

      attribute 4036151 "DISPATCH_TEMP_DETACH"
	class_attribute const_attribute package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4036279 "HORIZONTAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4036407 "VERTICAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4036535 "NO_POSITION"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4036663 "NO_ID"
	class_attribute const_attribute public explicit_type "long"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4036791 "INVALID_TYPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4036919 "TOUCH_SLOP_DEFAULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for use with {@link #setScrollingTouchSlop(int)}. Indicates
that the RecyclerView should use the standard touch slop for smooth,
continuous scrolling.
"
      end

      attribute 4037047 "TOUCH_SLOP_PAGING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for use with {@link #setScrollingTouchSlop(int)}. Indicates
that the RecyclerView should use the standard touch slop for scrolling
widgets that snap to a page or other coarse-grained barrier.
"
      end

      attribute 4037175 "MAX_SCROLL_DURATION"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3415607 // TRACE_SCROLL_TAG (<unidirectional association>)
	relation 3415607 --->
	  a role_name "TRACE_SCROLL_TAG" init_value " \"RV Scroll\"" class_relation const_relation private
	    comment "
RecyclerView is calculating a scroll.
If there are too many of these in Systrace, some Views inside RecyclerView might be causing
it. Try to avoid using EditText, focusable views or handle them with care.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3415607 // TRACE_SCROLL_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 3415735 // TRACE_ON_LAYOUT_TAG (<unidirectional association>)
	relation 3415735 --->
	  a role_name "TRACE_ON_LAYOUT_TAG" init_value " \"RV OnLayout\"" class_relation const_relation private
	    comment "
OnLayout has been called by the View system.
If this shows up too many times in Systrace, make sure the children of RecyclerView do not
update themselves directly. This will cause a full re-layout but when it happens via the
Adapter notifyItemChanged, RecyclerView can avoid full layout calculation.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3415735 // TRACE_ON_LAYOUT_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 3415863 // TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG (<unidirectional association>)
	relation 3415863 --->
	  a role_name "TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG" init_value " \"RV FullInvalidate\"" class_relation const_relation private
	    comment "
NotifyDataSetChanged or equal has been called.
If this is taking a long time, try sending granular notify adapter changes instead of just
calling notifyDataSetChanged or setAdapter / swapAdapter. Adding stable ids to your adapter
might help.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3415863 // TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 3415991 // TRACE_HANDLE_ADAPTER_UPDATES_TAG (<unidirectional association>)
	relation 3415991 --->
	  a role_name "TRACE_HANDLE_ADAPTER_UPDATES_TAG" init_value " \"RV PartialInvalidate\"" class_relation const_relation private
	    comment "
RecyclerView is doing a layout for partial adapter updates (we know what has changed)
If this is taking a long time, you may have dispatched too many Adapter updates causing too
many Views being rebind. Make sure all are necessary and also prefer using notify*Range
methods.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3415991 // TRACE_HANDLE_ADAPTER_UPDATES_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 3416119 // TRACE_BIND_VIEW_TAG (<unidirectional association>)
	relation 3416119 --->
	  a role_name "TRACE_BIND_VIEW_TAG" init_value " \"RV OnBindView\"" class_relation const_relation private
	    comment "
RecyclerView is rebinding a View.
If this is taking a lot of time, consider optimizing your layout or make sure you are not
doing extra operations in onBindViewHolder call.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3416119 // TRACE_BIND_VIEW_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 3416247 // TRACE_CREATE_VIEW_TAG (<unidirectional association>)
	relation 3416247 --->
	  a role_name "TRACE_CREATE_VIEW_TAG" init_value " \"RV CreateView\"" class_relation const_relation private
	    comment "
RecyclerView is creating a new View.
If too many of these present in Systrace:
- There might be a problem in Recycling (e.g. custom Animations that set transient state and
prevent recycling or ItemAnimator not implementing the contract properly. ({@link
> Adapter#onFailedToRecycleView(ViewHolder)})

- There might be too many item view types.
> Try merging them

- There might be too many itemChange animations and not enough space in RecyclerPool.
>Try increasing your pool size and item cache size.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3416247 // TRACE_CREATE_VIEW_TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      classrelation 3416375 // LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE (<unidirectional association>)
	relation 3416375 --->
	  a role_name "LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE" multiplicity "[]" init_value "
            new Class[]{Context.class, AttributeSet.class, int.class, int.class}" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3416375 // LAYOUT_MANAGER_CONSTRUCTOR_SIGNATURE (<unidirectional association>)
	  b parent class_ref 132791 // Class
      end

      class 1181879 "RecyclerViewDataObserver"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3421111 // <generalisation>
	  relation 3421111 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 3421111 // <generalisation>
	    b parent class_ref 1184951 // AdapterDataObserver
	end

	operation 29621175 "onChanged"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29621303 "onItemRangeChanged"
	  public explicit_return_type "void"
	  nparams 3
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	    param inout name "payload" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29621431 "onItemRangeInserted"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29621559 "onItemRangeRemoved"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29621687 "onItemRangeMoved"
	  public explicit_return_type "void"
	  nparams 3
	    param in name "fromPosition" explicit_type "int"
	    param in name "toPosition" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29621815 "triggerUpdateProcessor"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3416503 // mObserver (<unidirectional association>)
	relation 3416503 --->
	  a role_name "mObserver" init_value " new RecyclerViewDataObserver()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3416503 // mObserver (<unidirectional association>)
	  b parent class_ref 1181879 // RecyclerViewDataObserver
      end

      class 1182007 "Recycler"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3421495 // mAttachedScrap (<unidirectional association>)
	  relation 3421495 --->
	    stereotype "ArrayList"
	    a role_name "mAttachedScrap" init_value " new ArrayList<>()" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 3421495 // mAttachedScrap (<unidirectional association>)
	    b parent class_ref 1181495 // ViewHolder
	end

	classrelation 3421623 // mChangedScrap (<unidirectional association>)
	  relation 3421623 --->
	    stereotype "ArrayList"
	    a role_name "mChangedScrap" init_value " null" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 3421623 // mChangedScrap (<unidirectional association>)
	    b parent class_ref 1181495 // ViewHolder
	end

	classrelation 3421751 // mCachedViews (<unidirectional association>)
	  relation 3421751 --->
	    stereotype "ArrayList"
	    a role_name "mCachedViews" init_value " new ArrayList<ViewHolder>()" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 3421751 // mCachedViews (<unidirectional association>)
	    b parent class_ref 1181495 // ViewHolder
	end

	classrelation 3421879 // mUnmodifiableAttachedScrap (<unidirectional association>)
	  relation 3421879 --->
	    stereotype "List"
	    a role_name "mUnmodifiableAttachedScrap" init_value " Collections.unmodifiableList(mAttachedScrap)" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 3421879 // mUnmodifiableAttachedScrap (<unidirectional association>)
	    b parent class_ref 1181495 // ViewHolder
	end

	attribute 4042807 "mViewCacheMax"
	  private explicit_type "int"
	  init_value " DEFAULT_CACHE_SIZE"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 3422007 // mRecyclerPool (<unidirectional association>)
	  relation 3422007 --->
	    a role_name "mRecyclerPool" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3422007 // mRecyclerPool (<unidirectional association>)
	    b parent class_ref 1184567 // RecycledViewPool
	end

	classrelation 3422135 // mViewCacheExtension (<unidirectional association>)
	  relation 3422135 --->
	    a role_name "mViewCacheExtension" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3422135 // mViewCacheExtension (<unidirectional association>)
	    b parent class_ref 1184695 // ViewCacheExtension
	end

	attribute 4042935 "DEFAULT_CACHE_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 2"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 29623095 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Clear scrap views out of this recycler. Detached views contained within a
recycled view pool will remain."
	end

	operation 29623223 "setViewCacheSize"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "viewCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set the maximum number of detached, valid views we should retain for later use.

@param viewCount Number of views to keep before sending views to the shared pool"
	end

	operation 29623351 "getScrapList"
	  public return_type class_ref 1181495 // ViewHolder
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns an unmodifiable list of ViewHolders that are currently in the scrap list.

@return List of ViewHolders in the scrap list."
	end

	operation 29623479 "validateViewHolderForOffsetPosition"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "holder" type class_ref 1181495 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Helper method for getViewForPosition.
<p>
Checks whether a given view holder can be used for the provided position.

@param holder ViewHolder
@return true if ViewHolder matches the provided position, false otherwise"
	end

	operation 29623607 "bindViewToPosition"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "view" type class_ref 134455 // View
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Binds the given View to the position. The View can be a View previously retrieved via
{@link #getViewForPosition(int)} or created by
{@link Adapter#onCreateViewHolder(ViewGroup, int)}.
<p>
Generally, a LayoutManager should acquire its views via {@link #getViewForPosition(int)}
and let the RecyclerView handle caching. This is a helper method for LayoutManager who
wants to handle its own recycling logic.
<p>
Note that, {@link #getViewForPosition(int)} already binds the View to the position so
you don't need to call this method unless you want to bind this View to another position.

@param view The view to update.
@param position The position of the item to bind to this View."
	end

	operation 29623735 "convertPreLayoutPositionToPostLayout"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "RecyclerView provides artificial position range (item count) in pre-layout state and
automatically maps these positions to {@link Adapter} positions when
{@link #getViewForPosition(int)} or {@link #bindViewToPosition(View, int)} is called.
<p>
Usually, LayoutManager does not need to worry about this. However, in some cases, your
LayoutManager may need to call some custom component with item positions in which
case you need the actual adapter position instead of the pre layout position. You
can use this method to convert a pre-layout position to adapter (post layout) position.
<p>
Note that if the provided position belongs to a deleted ViewHolder, this method will
return -1.
<p>
Calling this method in post-layout state returns the same value back.

@param position The pre-layout position to convert. Must be greater or equal to 0 and
                less than {@link State#getItemCount()}."
	end

	operation 29623863 "getViewForPosition"
	  public return_type class_ref 134455 // View
	  nparams 1
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Obtain a view initialized for the given position.

This method should be used by {@link LayoutManager} implementations to obtain
views to represent data from an {@link Adapter}.
<p>
The Recycler may reuse a scrap or detached view from a shared pool if one is
available for the correct view type. If the adapter has not indicated that the
data at the given position has changed, the Recycler will attempt to hand back
a scrap view that was previously initialized for that data without rebinding.

@param position Position to obtain a view for
@return A view representing the data at <code>position</code> from <code>adapter</code>"
	end

	operation 29623991 "getViewForPosition"
	  package return_type class_ref 134455 // View
	  nparams 2
	    param in name "position" explicit_type "int"
	    param inout name "dryRun" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29624119 "attachAccessibilityDelegate"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "itemView" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29624247 "invalidateDisplayListInt"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "holder" type class_ref 1181495 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29624375 "invalidateDisplayListInt"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "viewGroup" type class_ref 134711 // ViewGroup
	    param inout name "invalidateThis" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29624503 "recycleView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Recycle a detached view. The specified view will be added to a pool of views
for later rebinding and reuse.

<p>A view must be fully detached (removed from parent) before it may be recycled. If the
View is scrapped, it will be removed from scrap list.</p>

@param view Removed view for recycling
@see LayoutManager#removeAndRecycleView(View, Recycler)"
	end

	operation 29624631 "recycleViewInternal"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Internally, use this method instead of {@link #recycleView(android.view.View)} to
catch potential bugs.
@param view"
	end

	operation 29624759 "recycleAndClearCachedViews"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29624887 "recycleCachedViewAt"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "cachedViewIndex" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Recycles a cached view and removes the view from the list. Views are added to cache
if and only if they are recyclable, so this method does not check it again.
<p>
A small exception to this rule is when the view does not have an animator reference
but transient state is true (due to animations created outside ItemAnimator). In that
case, adapter may choose to recycle it. From RecyclerView's perspective, the view is
still recyclable since Adapter wants to do so.

@param cachedViewIndex The index of the view in cached views list"
	end

	operation 29625015 "recycleViewHolderInternal"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "holder" type class_ref 1181495 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "internal implementation checks if view is scrapped or attached and throws an exception
if so.
Public version un-scraps before calling recycle."
	end

	operation 29625143 "addViewHolderToRecycledViewPool"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "holder" type class_ref 1181495 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29625271 "quickRecycleScrapView"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Used as a fast path for unscrapping and recycling a view during a bulk operation.
The caller must call {@link #clearScrap()} when it's done to update the recycler's
internal bookkeeping."
	end

	operation 29625399 "scrapView"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Mark an attached view as scrap.

<p>\"Scrap\" views are still attached to their parent RecyclerView but are eligible
for rebinding and reuse. Requests for a view for a given position may return a
reused or rebound scrap view instance.</p>

@param view View to scrap"
	end

	operation 29625527 "unscrapView"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "holder" type class_ref 1181495 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Remove a previously scrapped view from the pool of eligible scrap.

<p>This view will no longer be eligible for reuse until re-scrapped or
until it is explicitly removed and recycled.</p>"
	end

	operation 29625655 "getScrapCount"
	  package explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29625783 "getScrapViewAt"
	  package return_type class_ref 134455 // View
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29625911 "clearScrap"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29626039 "getChangedScrapViewForPosition"
	  package return_type class_ref 1181495 // ViewHolder
	  nparams 1
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29626167 "getScrapViewForPosition"
	  package return_type class_ref 1181495 // ViewHolder
	  nparams 3
	    param in name "position" explicit_type "int"
	    param in name "type" explicit_type "int"
	    param inout name "dryRun" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a scrap view for the position. If type is not INVALID_TYPE, it also checks if
ViewHolder's type matches the provided type.

@param position Item position
@param type View type
@param dryRun  Does a dry run, finds the ViewHolder but does not remove
@return a ViewHolder that can be re-used for this position."
	end

	operation 29626295 "getScrapViewForId"
	  package return_type class_ref 1181495 // ViewHolder
	  nparams 3
	    param in name "id" explicit_type "long"
	    param in name "type" explicit_type "int"
	    param inout name "dryRun" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29626423 "dispatchViewRecycled"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "holder" type class_ref 1181495 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29626551 "onAdapterChanged"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "oldAdapter" type class_ref 1182647 // Adapter
	    param inout name "newAdapter" type class_ref 1182647 // Adapter
	    param inout name "compatibleWithPrevious" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29626679 "offsetPositionRecordsForMove"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "from" explicit_type "int"
	    param in name "to" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29626807 "offsetPositionRecordsForInsert"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "insertedAt" explicit_type "int"
	    param in name "count" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29626935 "offsetPositionRecordsForRemove"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "removedFrom" explicit_type "int"
	    param in name "count" explicit_type "int"
	    param inout name "applyToPreLayout" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@param removedFrom Remove start index
@param count Remove count
@param applyToPreLayout If true, changes will affect ViewHolder's pre-layout position, if
                        false, they'll be applied before the second layout pass"
	end

	operation 29627063 "setViewCacheExtension"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "extension" type class_ref 1184695 // ViewCacheExtension
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29627191 "setRecycledViewPool"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "pool" type class_ref 1184567 // RecycledViewPool
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29627319 "getRecycledViewPool"
	  package return_type class_ref 1184567 // RecycledViewPool
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29627447 "viewRangeUpdate"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29627575 "setAdapterPositionsAsUnknown"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29627703 "markKnownViewsInvalid"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29627831 "clearOldPositions"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29627959 "markItemDecorInsetsDirty"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3416631 // mRecycler (<unidirectional association>)
	relation 3416631 --->
	  a role_name "mRecycler" init_value " new Recycler()" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3416631 // mRecycler (<unidirectional association>)
	  b parent class_ref 1182007 // Recycler
      end

      class 1182135 "SavedState"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 3416759 // mPendingSavedState (<unidirectional association>)
	relation 3416759 --->
	  a role_name "mPendingSavedState" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3416759 // mPendingSavedState (<unidirectional association>)
	  b parent class_ref 1182135 // SavedState
      end

      classrelation 3416887 // mAdapterHelper (<unidirectional association>)
	relation 3416887 --->
	  a role_name "mAdapterHelper" package
	    comment "
Handles adapter updates

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3416887 // mAdapterHelper (<unidirectional association>)
	  b parent class_ref 1182263 // AdapterHelper
      end

      classrelation 3417015 // mChildHelper (<unidirectional association>)
	relation 3417015 --->
	  a role_name "mChildHelper" package
	    comment "
Handles abstraction between LayoutManager children and RecyclerView children

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3417015 // mChildHelper (<unidirectional association>)
	  b parent class_ref 1182391 // ChildHelper
      end

      classrelation 3417143 // mViewInfoStore (<unidirectional association>)
	relation 3417143 --->
	  a role_name "mViewInfoStore" init_value " new ViewInfoStore()" const_relation package
	    comment "
Keeps data about views to be used for animations

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3417143 // mViewInfoStore (<unidirectional association>)
	  b parent class_ref 1182519 // ViewInfoStore
      end

      attribute 4037303 "mClipToPadding"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Prior to L, there is no way to query this variable which is why we override the setter and
track it here.
"
      end

      attribute 4037431 "mUpdateChildViewsRunnable"
	const_attribute private explicit_type "Runnable"
	init_value " new Runnable() {
        public void run() {
            if (!mFirstLayoutComplete || isLayoutRequested()) {
                // a layout request will happen, we should not do layout here.
                return;
            }
            if (!mIsAttached) {
                requestLayout();
                // if we are not attached yet, mark us as requiring layout and skip
                return;
            }
            if (mLayoutFrozen) {
                mLayoutRequestEaten = true;
                return; //we'll process updates when ice age ends.
            }
            consumePendingUpdateOperations();
        }
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Note: this Runnable is only ever posted if:
1) We've been through first layout
2) We know we have a fixed size (mHasFixedSize)
3) We're attached
"
      end

      classrelation 3417271 // mTempRect (<unidirectional association>)
	relation 3417271 --->
	  a role_name "mTempRect" init_value " new Rect()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3417271 // mTempRect (<unidirectional association>)
	  b parent class_ref 135351 // Rect
      end

      classrelation 3417399 // mTempRect2 (<unidirectional association>)
	relation 3417399 --->
	  a role_name "mTempRect2" init_value " new Rect()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3417399 // mTempRect2 (<unidirectional association>)
	  b parent class_ref 135351 // Rect
      end

      classrelation 3417527 // mTempRectF (<unidirectional association>)
	relation 3417527 --->
	  a role_name "mTempRectF" init_value " new RectF()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3417527 // mTempRectF (<unidirectional association>)
	  b parent class_ref 150967 // RectF
      end

      class 1182647 "Adapter"
	abstract visibility public 
	nformals 1
	formal name "VH" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3422263 // mObservable (<unidirectional association>)
	  relation 3422263 --->
	    a role_name "mObservable" init_value " new AdapterDataObservable()" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3422263 // mObservable (<unidirectional association>)
	    b parent class_ref 1185079 // AdapterDataObservable
	end

	attribute 4043063 "mHasStableIds"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 29628215 "onCreateViewHolder"
	  abstract public explicit_return_type "VH"
	  nparams 2
	    param inout name "parent" type class_ref 134711 // ViewGroup
	    param in name "viewType" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when RecyclerView needs a new {@link ViewHolder} of the given type to represent
an item.
<p>
This new ViewHolder should be constructed with a new View that can represent the items
of the given type. You can either create a new View manually or inflate it from an XML
layout file.
<p>
The new ViewHolder will be used to display items of the adapter using
{@link #onBindViewHolder(ViewHolder, int, List)}. Since it will be re-used to display
different items in the data set, it is a good idea to cache references to sub views of
the View to avoid unnecessary {@link View#findViewById(int)} calls.

@param parent The ViewGroup into which the new View will be added after it is bound to
              an adapter position.
@param viewType The view type of the new View.

@return A new ViewHolder that holds a View of the given view type.
@see #getItemViewType(int)
@see #onBindViewHolder(ViewHolder, int)"
	end

	operation 29628343 "onBindViewHolder"
	  abstract public explicit_return_type "void"
	  nparams 2
	    param inout name "holder" explicit_type "VH"
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by RecyclerView to display the data at the specified position. This method should
update the contents of the {@link ViewHolder#itemView} to reflect the item at the given
position.
<p>
Note that unlike {@link android.widget.ListView}, RecyclerView will not call this method
again if the position of the item changes in the data set unless the item itself is
invalidated or the new position cannot be determined. For this reason, you should only
use the <code>position</code> parameter while acquiring the related data item inside
this method and should not keep a copy of it. If you need the position of an item later
on (e.g. in a click listener), use {@link ViewHolder#getAdapterPosition()} which will
have the updated adapter position.

Override {@link #onBindViewHolder(ViewHolder, int, List)} instead if Adapter can
handle effcient partial bind.

@param holder The ViewHolder which should be updated to represent the contents of the
       item at the given position in the data set.
@param position The position of the item within the adapter's data set."
	end

	operation 29628471 "onBindViewHolder"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "holder" explicit_type "VH"
	    param in name "position" explicit_type "int"
	    param inout name "payloads" explicit_type "List<Object>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by RecyclerView to display the data at the specified position. This method
should update the contents of the {@link ViewHolder#itemView} to reflect the item at
the given position.
<p>
Note that unlike {@link android.widget.ListView}, RecyclerView will not call this method
again if the position of the item changes in the data set unless the item itself is
invalidated or the new position cannot be determined. For this reason, you should only
use the <code>position</code> parameter while acquiring the related data item inside
this method and should not keep a copy of it. If you need the position of an item later
on (e.g. in a click listener), use {@link ViewHolder#getAdapterPosition()} which will
have the updated adapter position.
<p>
Partial bind vs full bind:
<p>
The payloads parameter is a merge list from {@link #notifyItemChanged(int, Object)} or
{@link #notifyItemRangeChanged(int, int, Object)}.  If the payloads list is not empty,
the ViewHolder is currently bound to old data and Adapter may run an efficient partial
update using the payload info.  If the payload is empty,  Adapter must run a full bind.
Adapter should not assume that the payload passed in notify methods will be received by
onBindViewHolder().  For example when the view is not attached to the screen, the
payload in notifyItemChange() will be simply dropped.

@param holder The ViewHolder which should be updated to represent the contents of the
              item at the given position in the data set.
@param position The position of the item within the adapter's data set.
@param payloads A non-null list of merged payloads. Can be empty list if requires full
                update."
	end

	operation 29628599 "createViewHolder"
	  public explicit_return_type "VH"
	  nparams 2
	    param inout name "parent" type class_ref 134711 // ViewGroup
	    param in name "viewType" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This method calls {@link #onCreateViewHolder(ViewGroup, int)} to create a new
{@link ViewHolder} and initializes some private fields to be used by RecyclerView.

@see #onCreateViewHolder(ViewGroup, int)"
	end

	operation 29628727 "bindViewHolder"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "holder" explicit_type "VH"
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This method internally calls {@link #onBindViewHolder(ViewHolder, int)} to update the
{@link ViewHolder} contents with the item at the given position and also sets up some
private fields to be used by RecyclerView.

@see #onBindViewHolder(ViewHolder, int)"
	end

	operation 29628855 "getItemViewType"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the view type of the item at <code>position</code> for the purposes
of view recycling.

<p>The default implementation of this method returns 0, making the assumption of
a single view type for the adapter. Unlike ListView adapters, types need not
be contiguous. Consider using id resources to uniquely identify item view types.

@param position position to query
@return integer value identifying the type of the view needed to represent the item at
                <code>position</code>. Type codes need not be contiguous."
	end

	operation 29628983 "setHasStableIds"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "hasStableIds" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Indicates whether each item in the data set can be represented with a unique identifier
of type {@link java.lang.Long}.

@param hasStableIds Whether items in data set have unique identifiers or not.
@see #hasStableIds()
@see #getItemId(int)"
	end

	operation 29629111 "getItemId"
	  public explicit_return_type "long"
	  nparams 1
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the stable ID for the item at <code>position</code>. If {@link #hasStableIds()}
would return false this method should return {@link #NO_ID}. The default implementation
of this method returns {@link #NO_ID}.

@param position Adapter position to query
@return the stable ID of the item at position"
	end

	operation 29629239 "getItemCount"
	  abstract public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the total number of items in the data set hold by the adapter.

@return The total number of items in this adapter."
	end

	operation 29629367 "hasStableIds"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this adapter publishes a unique <code>long</code> value that can
act as a key for the item at a given position in the data set. If that item is relocated
in the data set, the ID returned for that item should be the same.

@return true if this adapter's items have stable IDs"
	end

	operation 29629495 "onViewRecycled"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "holder" explicit_type "VH"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a view created by this adapter has been recycled.

<p>A view is recycled when a {@link LayoutManager} decides that it no longer
needs to be attached to its parent {@link RecyclerView}. This can be because it has
fallen out of visibility or a set of cached views represented by views still
attached to the parent RecyclerView. If an item view has large or expensive data
bound to it such as large bitmaps, this may be a good place to release those
resources.</p>
<p>
RecyclerView calls this method right before clearing ViewHolder's internal data and
sending it to RecycledViewPool. This way, if ViewHolder was holding valid information
before being recycled, you can call {@link ViewHolder#getAdapterPosition()} to get
its adapter position.

@param holder The ViewHolder for the view being recycled"
	end

	operation 29629623 "onFailedToRecycleView"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "holder" explicit_type "VH"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by the RecyclerView if a ViewHolder created by this Adapter cannot be recycled
due to its transient state. Upon receiving this callback, Adapter can clear the
animation(s) that effect the View's transient state and return <code>true</code> so that
the View can be recycled. Keep in mind that the View in question is already removed from
the RecyclerView.
<p>
In some cases, it is acceptable to recycle a View although it has transient state. Most
of the time, this is a case where the transient state will be cleared in
{@link #onBindViewHolder(ViewHolder, int)} call when View is rebound to a new position.
For this reason, RecyclerView leaves the decision to the Adapter and uses the return
value of this method to decide whether the View should be recycled or not.
<p>
Note that when all animations are created by {@link RecyclerView.ItemAnimator}, you
should never receive this callback because RecyclerView keeps those Views as children
until their animations are complete. This callback is useful when children of the item
views create animations which may not be easy to implement using an {@link ItemAnimator}.
<p>
You should <em>never</em> fix this issue by calling
<code>holder.itemView.setHasTransientState(false);</code> unless you've previously called
<code>holder.itemView.setHasTransientState(true);</code>. Each
<code>View.setHasTransientState(true)</code> call must be matched by a
<code>View.setHasTransientState(false)</code> call, otherwise, the state of the View
may become inconsistent. You should always prefer to end or cancel animations that are
triggering the transient state instead of handling it manually.

@param holder The ViewHolder containing the View that could not be recycled due to its
              transient state.
@return True if the View should be recycled, false otherwise. Note that if this method
returns <code>true</code>, RecyclerView <em>will ignore</em> the transient state of
the View and recycle it regardless. If this method returns <code>false</code>,
RecyclerView will check the View's transient state again before giving a final decision.
Default implementation returns false."
	end

	operation 29629751 "onViewAttachedToWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "holder" explicit_type "VH"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a view created by this adapter has been attached to a window.

<p>This can be used as a reasonable signal that the view is about to be seen
by the user. If the adapter previously freed any resources in
{@link #onViewDetachedFromWindow(RecyclerView.ViewHolder) onViewDetachedFromWindow}
those resources should be restored here.</p>

@param holder Holder of the view being attached"
	end

	operation 29629879 "onViewDetachedFromWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "holder" explicit_type "VH"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a view created by this adapter has been detached from its window.

<p>Becoming detached from the window is not necessarily a permanent condition;
the consumer of an Adapter's views may choose to cache views offscreen while they
are not visible, attaching an detaching them as appropriate.</p>

@param holder Holder of the view being detached"
	end

	operation 29630007 "hasObservers"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if one or more observers are attached to this adapter.

@return true if this adapter has observers"
	end

	operation 29630135 "registerAdapterDataObserver"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "observer" type class_ref 1184951 // AdapterDataObserver
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Register a new observer to listen for data changes.

<p>The adapter may publish a variety of events describing specific changes.
Not all adapters may support all change types and some may fall back to a generic
{@link android.support.v7.widget.RecyclerView.AdapterDataObserver#onChanged()
\"something changed\"} event if more specific data is not available.</p>

<p>Components registering observers with an adapter are responsible for
{@link #unregisterAdapterDataObserver(RecyclerView.AdapterDataObserver)
unregistering} those observers when finished.</p>

@param observer Observer to register

@see #unregisterAdapterDataObserver(RecyclerView.AdapterDataObserver)"
	end

	operation 29630263 "unregisterAdapterDataObserver"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "observer" type class_ref 1184951 // AdapterDataObserver
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Unregister an observer currently listening for data changes.

<p>The unregistered observer will no longer receive events about changes
to the adapter.</p>

@param observer Observer to unregister

@see #registerAdapterDataObserver(RecyclerView.AdapterDataObserver)"
	end

	operation 29630391 "onAttachedToRecyclerView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by RecyclerView when it starts observing this Adapter.
<p>
Keep in mind that same adapter may be observed by multiple RecyclerViews.

@param recyclerView The RecyclerView instance which started observing this adapter.
@see #onDetachedFromRecyclerView(RecyclerView)"
	end

	operation 29630519 "onDetachedFromRecyclerView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by RecyclerView when it stops observing this Adapter.

@param recyclerView The RecyclerView instance which stopped observing this adapter.
@see #onAttachedToRecyclerView(RecyclerView)"
	end

	operation 29630647 "notifyDataSetChanged"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notify any registered observers that the data set has changed.

<p>There are two different classes of data change events, item changes and structural
changes. Item changes are when a single item has its data updated but no positional
changes have occurred. Structural changes are when items are inserted, removed or moved
within the data set.</p>

<p>This event does not specify what about the data set has changed, forcing
any observers to assume that all existing items and structure may no longer be valid.
LayoutManagers will be forced to fully rebind and relayout all visible views.</p>

<p><code>RecyclerView</code> will attempt to synthesize visible structural change events
for adapters that report that they have {@link #hasStableIds() stable IDs} when
this method is used. This can help for the purposes of animation and visual
object persistence but individual item views will still need to be rebound
and relaid out.</p>

<p>If you are writing an adapter it will always be more efficient to use the more
specific change events if you can. Rely on <code>notifyDataSetChanged()</code>
as a last resort.</p>

@see #notifyItemChanged(int)
@see #notifyItemInserted(int)
@see #notifyItemRemoved(int)
@see #notifyItemRangeChanged(int, int)
@see #notifyItemRangeInserted(int, int)
@see #notifyItemRangeRemoved(int, int)"
	end

	operation 29630775 "notifyItemChanged"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notify any registered observers that the item at <code>position</code> has changed.
Equivalent to calling <code>notifyItemChanged(position, null);</code>.

<p>This is an item change event, not a structural change event. It indicates that any
reflection of the data at <code>position</code> is out of date and should be updated.
The item at <code>position</code> retains the same identity.</p>

@param position Position of the item that has changed

@see #notifyItemRangeChanged(int, int)"
	end

	operation 29630903 "notifyItemChanged"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "position" explicit_type "int"
	    param inout name "payload" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notify any registered observers that the item at <code>position</code> has changed with an
optional payload object.

<p>This is an item change event, not a structural change event. It indicates that any
reflection of the data at <code>position</code> is out of date and should be updated.
The item at <code>position</code> retains the same identity.
</p>

<p>
Client can optionally pass a payload for partial change. These payloads will be merged
and may be passed to adapter's {@link #onBindViewHolder(ViewHolder, int, List)} if the
item is already represented by a ViewHolder and it will be rebound to the same
ViewHolder. A notifyItemRangeChanged() with null payload will clear all existing
payloads on that item and prevent future payload until
{@link #onBindViewHolder(ViewHolder, int, List)} is called. Adapter should not assume
that the payload will always be passed to onBindViewHolder(), e.g. when the view is not
attached, the payload will be simply dropped.

@param position Position of the item that has changed
@param payload Optional parameter, use null to identify a \"full\" update

@see #notifyItemRangeChanged(int, int)"
	end

	operation 29631031 "notifyItemRangeChanged"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notify any registered observers that the <code>itemCount</code> items starting at
position <code>positionStart</code> have changed.
Equivalent to calling <code>notifyItemRangeChanged(position, itemCount, null);</code>.

<p>This is an item change event, not a structural change event. It indicates that
any reflection of the data in the given position range is out of date and should
be updated. The items in the given range retain the same identity.</p>

@param positionStart Position of the first item that has changed
@param itemCount Number of items that have changed

@see #notifyItemChanged(int)"
	end

	operation 29631159 "notifyItemRangeChanged"
	  public explicit_return_type "void"
	  nparams 3
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	    param inout name "payload" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notify any registered observers that the <code>itemCount</code> items starting at
position<code>positionStart</code> have changed. An optional payload can be
passed to each changed item.

<p>This is an item change event, not a structural change event. It indicates that any
reflection of the data in the given position range is out of date and should be updated.
The items in the given range retain the same identity.
</p>

<p>
Client can optionally pass a payload for partial change. These payloads will be merged
and may be passed to adapter's {@link #onBindViewHolder(ViewHolder, int, List)} if the
item is already represented by a ViewHolder and it will be rebound to the same
ViewHolder. A notifyItemRangeChanged() with null payload will clear all existing
payloads on that item and prevent future payload until
{@link #onBindViewHolder(ViewHolder, int, List)} is called. Adapter should not assume
that the payload will always be passed to onBindViewHolder(), e.g. when the view is not
attached, the payload will be simply dropped.

@param positionStart Position of the first item that has changed
@param itemCount Number of items that have changed
@param payload  Optional parameter, use null to identify a \"full\" update

@see #notifyItemChanged(int)"
	end

	operation 29631287 "notifyItemInserted"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notify any registered observers that the item reflected at <code>position</code>
has been newly inserted. The item previously at <code>position</code> is now at
position <code>position + 1</code>.

<p>This is a structural change event. Representations of other existing items in the
data set are still considered up to date and will not be rebound, though their
positions may be altered.</p>

@param position Position of the newly inserted item in the data set

@see #notifyItemRangeInserted(int, int)"
	end

	operation 29631415 "notifyItemMoved"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "fromPosition" explicit_type "int"
	    param in name "toPosition" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notify any registered observers that the item reflected at <code>fromPosition</code>
has been moved to <code>toPosition</code>.

<p>This is a structural change event. Representations of other existing items in the
data set are still considered up to date and will not be rebound, though their
positions may be altered.</p>

@param fromPosition Previous position of the item.
@param toPosition New position of the item."
	end

	operation 29631543 "notifyItemRangeInserted"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notify any registered observers that the currently reflected <code>itemCount</code>
items starting at <code>positionStart</code> have been newly inserted. The items
previously located at <code>positionStart</code> and beyond can now be found starting
at position <code>positionStart + itemCount</code>.

<p>This is a structural change event. Representations of other existing items in the
data set are still considered up to date and will not be rebound, though their positions
may be altered.</p>

@param positionStart Position of the first item that was inserted
@param itemCount Number of items inserted

@see #notifyItemInserted(int)"
	end

	operation 29631671 "notifyItemRemoved"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notify any registered observers that the item previously located at <code>position</code>
has been removed from the data set. The items previously located at and after
<code>position</code> may now be found at <code>oldPosition - 1</code>.

<p>This is a structural change event. Representations of other existing items in the
data set are still considered up to date and will not be rebound, though their positions
may be altered.</p>

@param position Position of the item that has now been removed

@see #notifyItemRangeRemoved(int, int)"
	end

	operation 29631799 "notifyItemRangeRemoved"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Notify any registered observers that the <code>itemCount</code> items previously
located at <code>positionStart</code> have been removed from the data set. The items
previously located at and after <code>positionStart + itemCount</code> may now be found
at <code>oldPosition - itemCount</code>.

<p>This is a structural change event. Representations of other existing items in the data
set are still considered up to date and will not be rebound, though their positions
may be altered.</p>

@param positionStart Previous position of the first item that was removed
@param itemCount Number of items removed from the data set"
	end
      end

      classrelation 3417655 // mAdapter (<unidirectional association>)
	relation 3417655 --->
	  a role_name "mAdapter" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3417655 // mAdapter (<unidirectional association>)
	  b parent class_ref 1182647 // Adapter
      end

      class 1182775 "LayoutManager"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3422391 // mChildHelper (<unidirectional association>)
	  relation 3422391 --->
	    a role_name "mChildHelper" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3422391 // mChildHelper (<unidirectional association>)
	    b parent class_ref 1182391 // ChildHelper
	end

	classrelation 3422519 // mRecyclerView (<unidirectional association>)
	  relation 3422519 --->
	    a role_name "mRecyclerView" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3422519 // mRecyclerView (<unidirectional association>)
	    b parent class_ref 1176503 // RecyclerView
	end

	classrelation 3422647 // mSmoothScroller (<unidirectional association>)
	  relation 3422647 --->
	    a role_name "mSmoothScroller" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      java_annotation "@Nullable
"
	      classrelation_ref 3422647 // mSmoothScroller (<unidirectional association>)
	    b parent class_ref 1185207 // SmoothScroller
	end

	attribute 4043191 "mRequestedSimpleAnimations"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4043319 "mIsAttachedToWindow"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4043447 "mAutoMeasure"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4043575 "mMeasurementCacheEnabled"
	  private explicit_type "boolean"
	  init_value " true"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "LayoutManager has its own more strict measurement cache to avoid re-measuring a child
if the space that will be given to it is already larger than what it has measured before.
"
	end

	attribute 4043703 "mWidthMode"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "These measure specs might be the measure specs that were passed into RecyclerView's
onMeasure method OR fake measure specs created by the RecyclerView.
For example, when a layout is run, RecyclerView always sets these specs to be
EXACTLY because a LayoutManager cannot resize RecyclerView during a layout pass.
<p>
Also, to be able to use the hint in unspecified measure specs, RecyclerView checks the
API level and sets the size to 0 pre-M to avoid any issue that might be caused by
corrupt values. Older platforms have no responsibility to provide a size if they set
mode to unspecified.
"
	end

	attribute 4043831 "mHeightMode"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "These measure specs might be the measure specs that were passed into RecyclerView's
onMeasure method OR fake measure specs created by the RecyclerView.
For example, when a layout is run, RecyclerView always sets these specs to be
EXACTLY because a LayoutManager cannot resize RecyclerView during a layout pass.
<p>
Also, to be able to use the hint in unspecified measure specs, RecyclerView checks the
API level and sets the size to 0 pre-M to avoid any issue that might be caused by
corrupt values. Older platforms have no responsibility to provide a size if they set
mode to unspecified.
"
	end

	attribute 4043959 "mWidth"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4044087 "mHeight"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 29632183 "setRecyclerView"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29632311 "setMeasureSpecs"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "wSpec" explicit_type "int"
	    param in name "hSpec" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29632439 "setMeasuredDimensionFromChildren"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "widthSpec" explicit_type "int"
	    param in name "heightSpec" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called after a layout is calculated during a measure pass when using auto-measure.
<p>
It simply traverses all children to calculate a bounding box then calls
{@link #setMeasuredDimension(Rect, int, int)}. LayoutManagers can override that method
if they need to handle the bounding box differently.
<p>
For example, GridLayoutManager override that method to ensure that even if a column is
empty, the GridLayoutManager still measures wide enough to include it.

@param widthSpec The widthSpec that was passing into RecyclerView's onMeasure
@param heightSpec The heightSpec that was passing into RecyclerView's onMeasure"
	end

	operation 29632567 "setMeasuredDimension"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "childrenBounds" type class_ref 135351 // Rect
	    param in name "wSpec" explicit_type "int"
	    param in name "hSpec" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the measured dimensions from the given bounding box of the children and the
measurement specs that were passed into {@link RecyclerView#onMeasure(int, int)}. It is
called after the RecyclerView calls
{@link LayoutManager#onLayoutChildren(Recycler, State)} during a measurement pass.
<p>
This method should call {@link #setMeasuredDimension(int, int)}.
<p>
The default implementation adds the RecyclerView's padding to the given bounding box
then caps the value to be within the given measurement specs.
<p>
This method is only called if the LayoutManager opted into the auto measurement API.

@param childrenBounds The bounding box of all children
@param wSpec The widthMeasureSpec that was passed into the RecyclerView.
@param hSpec The heightMeasureSpec that was passed into the RecyclerView.

@see #setAutoMeasureEnabled(boolean)"
	end

	operation 29632695 "requestLayout"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Calls {@code RecyclerView#requestLayout} on the underlying RecyclerView"
	end

	operation 29632823 "assertInLayoutOrScroll"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "message" type class_ref 129591 // String
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Checks if RecyclerView is in the middle of a layout or scroll and throws an
{@link IllegalStateException} if it <b>is not</b>.

@param message The message for the exception. Can be null.
@see #assertNotInLayoutOrScroll(String)"
	end

	operation 29632951 "chooseSize"
	  class_operation public explicit_return_type "int"
	  nparams 3
	    param in name "spec" explicit_type "int"
	    param in name "desired" explicit_type "int"
	    param in name "min" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Chooses a size from the given specs and parameters that is closest to the desired size
and also complies with the spec.

@param spec The measureSpec
@param desired The preferred measurement
@param min The minimum value

@return A size that fits to the given specs"
	end

	operation 29633079 "assertNotInLayoutOrScroll"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "message" type class_ref 129591 // String
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Checks if RecyclerView is in the middle of a layout or scroll and throws an
{@link IllegalStateException} if it <b>is</b>.

@param message The message for the exception. Can be null.
@see #assertInLayoutOrScroll(String)"
	end

	operation 29633207 "setAutoMeasureEnabled"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "enabled" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Defines whether the layout should be measured by the RecyclerView or the LayoutManager
wants to handle the layout measurements itself.
<p>
This method is usually called by the LayoutManager with value {@code true} if it wants
to support WRAP_CONTENT. If you are using a public LayoutManager but want to customize
the measurement logic, you can call this method with {@code false} and override
{@link LayoutManager#onMeasure(int, int)} to implement your custom measurement logic.
<p>
AutoMeasure is a convenience mechanism for LayoutManagers to easily wrap their content or
handle various specs provided by the RecyclerView's parent.
It works by calling {@link LayoutManager#onLayoutChildren(Recycler, State)} during an
{@link RecyclerView#onMeasure(int, int)} call, then calculating desired dimensions based
on children's positions. It does this while supporting all existing animation
capabilities of the RecyclerView.
<p>
AutoMeasure works as follows:
<ol>
<li>LayoutManager should call {@code setAutoMeasureEnabled(true)} to enable it. All of
the framework LayoutManagers use {@code auto-measure}.</li>
<li>When {@link RecyclerView#onMeasure(int, int)} is called, if the provided specs are
exact, RecyclerView will only call LayoutManager's {@code onMeasure} and return without
doing any layout calculation.</li>
<li>If one of the layout specs is not {@code EXACT}, the RecyclerView will start the
layout process in {@code onMeasure} call. It will process all pending Adapter updates and
decide whether to run a predictive layout or not. If it decides to do so, it will first
call {@link #onLayoutChildren(Recycler, State)} with {@link State#isPreLayout()} set to
{@code true}. At this stage, {@link #getWidth()} and {@link #getHeight()} will still
return the width and height of the RecyclerView as of the last layout calculation.
<p>
After handling the predictive case, RecyclerView will call
{@link #onLayoutChildren(Recycler, State)} with {@link State#isMeasuring()} set to
{@code true} and {@link State#isPreLayout()} set to {@code false}. The LayoutManager can
access the measurement specs via {@link #getHeight()}, {@link #getHeightMode()},
{@link #getWidth()} and {@link #getWidthMode()}.</li>
<li>After the layout calculation, RecyclerView sets the measured width & height by
calculating the bounding box for the children (+ RecyclerView's padding). The
LayoutManagers can override {@link #setMeasuredDimension(Rect, int, int)} to choose
different values. For instance, GridLayoutManager overrides this value to handle the case
where if it is vertical and has 3 columns but only 2 items, it should still measure its
width to fit 3 items, not 2.</li>
<li>Any following on measure call to the RecyclerView will run
{@link #onLayoutChildren(Recycler, State)} with {@link State#isMeasuring()} set to
{@code true} and {@link State#isPreLayout()} set to {@code false}. RecyclerView will
take care of which views are actually added / removed / moved / changed for animations so
that the LayoutManager should not worry about them and handle each
{@link #onLayoutChildren(Recycler, State)} call as if it is the last one.
</li>
<li>When measure is complete and RecyclerView's
{@link #onLayout(boolean, int, int, int, int)} method is called, RecyclerView checks
whether it already did layout calculations during the measure pass and if so, it re-uses
that information. It may still decide to call {@link #onLayoutChildren(Recycler, State)}
if the last measure spec was different from the final dimensions or adapter contents
have changed between the measure call and the layout call.</li>
<li>Finally, animations are calculated and run as usual.</li>
</ol>

@param enabled <code>True</code> if the Layout should be measured by the
                            RecyclerView, <code>false</code> if the LayoutManager wants
                            to measure itself.

@see #setMeasuredDimension(Rect, int, int)
@see #isAutoMeasureEnabled()"
	end

	operation 29633335 "isAutoMeasureEnabled"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns whether the LayoutManager uses the automatic measurement API or not.

@return <code>True</code> if the LayoutManager is measured by the RecyclerView or
<code>false</code> if it measures itself.

@see #setAutoMeasureEnabled(boolean)"
	end

	operation 29633463 "supportsPredictiveItemAnimations"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns whether this LayoutManager supports automatic item animations.
A LayoutManager wishing to support item animations should obey certain
rules as outlined in {@link #onLayoutChildren(Recycler, State)}.
The default return value is <code>false</code>, so subclasses of LayoutManager
will not get predictive item animations by default.

<p>Whether item animations are enabled in a RecyclerView is determined both
by the return value from this method and the
{@link RecyclerView#setItemAnimator(ItemAnimator) ItemAnimator} set on the
RecyclerView itself. If the RecyclerView has a non-null ItemAnimator but this
method returns false, then simple item animations will be enabled, in which
views that are moving onto or off of the screen are simply faded in/out. If
the RecyclerView has a non-null ItemAnimator and this method returns true,
then there will be two calls to {@link #onLayoutChildren(Recycler, State)} to
setup up the information needed to more intelligently predict where appearing
and disappearing views should be animated from/to.</p>

@return true if predictive item animations should be enabled, false otherwise"
	end

	operation 29633591 "dispatchAttachedToWindow"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 1176503 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29633719 "dispatchDetachedFromWindow"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "view" type class_ref 1176503 // RecyclerView
	    param inout name "recycler" type class_ref 1182007 // Recycler
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29633847 "isAttachedToWindow"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns whether LayoutManager is currently attached to a RecyclerView which is attached
to a window.

@return True if this LayoutManager is controlling a RecyclerView and the RecyclerView
is attached to window."
	end

	operation 29633975 "postOnAnimation"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "action" explicit_type "Runnable"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Causes the Runnable to execute on the next animation time step.
The runnable will be run on the user interface thread.
<p>
Calling this method when LayoutManager is not attached to a RecyclerView has no effect.

@param action The Runnable that will be executed.

@see #removeCallbacks"
	end

	operation 29634103 "removeCallbacks"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" explicit_type "Runnable"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes the specified Runnable from the message queue.
<p>
Calling this method when LayoutManager is not attached to a RecyclerView has no effect.

@param action The Runnable to remove from the message handling queue

@return true if RecyclerView could ask the Handler to remove the Runnable,
        false otherwise. When the returned value is true, the Runnable
        may or may not have been actually removed from the message queue
        (for instance, if the Runnable was not in the queue already.)

@see #postOnAnimation"
	end

	operation 29634231 "onAttachedToWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 1176503 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@CallSuper
"
	  
	  
	  
	  comment "Called when this LayoutManager is both attached to a RecyclerView and that RecyclerView
is attached to a window.
<p>
If the RecyclerView is re-attached with the same LayoutManager and Adapter, it may not
call {@link #onLayoutChildren(Recycler, State)} if nothing has changed and a layout was
not requested on the RecyclerView while it was detached.
<p>
Subclass implementations should always call through to the superclass implementation.

@param view The RecyclerView this LayoutManager is bound to

@see #onDetachedFromWindow(RecyclerView, Recycler)"
	end

	operation 29634359 "onDetachedFromWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 1176503 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Deprecated
"
	  
	  
	  
	  comment "@deprecated
override {@link #onDetachedFromWindow(RecyclerView, Recycler)}"
	end

	operation 29634487 "onDetachedFromWindow"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "view" type class_ref 1176503 // RecyclerView
	    param inout name "recycler" type class_ref 1182007 // Recycler
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@CallSuper
"
	  
	  
	  
	  comment "Called when this LayoutManager is detached from its parent RecyclerView or when
its parent RecyclerView is detached from its window.
<p>
LayoutManager should clear all of its View references as another LayoutManager might be
assigned to the RecyclerView.
<p>
If the RecyclerView is re-attached with the same LayoutManager and Adapter, it may not
call {@link #onLayoutChildren(Recycler, State)} if nothing has changed and a layout was
not requested on the RecyclerView while it was detached.
<p>
If your LayoutManager has View references that it cleans in on-detach, it should also
call {@link RecyclerView#requestLayout()} to ensure that it is re-laid out when
RecyclerView is re-attached.
<p>
Subclass implementations should always call through to the superclass implementation.

@param view The RecyclerView this LayoutManager is bound to
@param recycler The recycler to use if you prefer to recycle your children instead of
                keeping them around.

@see #onAttachedToWindow(RecyclerView)"
	end

	operation 29634615 "getClipToPadding"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Check if the RecyclerView is configured to clip child views to its padding.

@return true if this RecyclerView clips children to its padding, false otherwise"
	end

	operation 29634743 "onLayoutChildren"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Lay out all relevant child views from the given adapter.

The LayoutManager is in charge of the behavior of item animations. By default,
RecyclerView has a non-null {@link #getItemAnimator() ItemAnimator}, and simple
item animations are enabled. This means that add/remove operations on the
adapter will result in animations to add new or appearing items, removed or
disappearing items, and moved items. If a LayoutManager returns false from
{@link #supportsPredictiveItemAnimations()}, which is the default, and runs a
normal layout operation during {@link #onLayoutChildren(Recycler, State)}, the
RecyclerView will have enough information to run those animations in a simple
way. For example, the default ItemAnimator, {@link DefaultItemAnimator}, will
simply fade views in and out, whether they are actually added/removed or whether
they are moved on or off the screen due to other add/remove operations.

<p>A LayoutManager wanting a better item animation experience, where items can be
animated onto and off of the screen according to where the items exist when they
are not on screen, then the LayoutManager should return true from
{@link #supportsPredictiveItemAnimations()} and add additional logic to
{@link #onLayoutChildren(Recycler, State)}. Supporting predictive animations
means that {@link #onLayoutChildren(Recycler, State)} will be called twice;
once as a \"pre\" layout step to determine where items would have been prior to
a real layout, and again to do the \"real\" layout. In the pre-layout phase,
items will remember their pre-layout positions to allow them to be laid out
appropriately. Also, {@link LayoutParams#isItemRemoved() removed} items will
be returned from the scrap to help determine correct placement of other items.
These removed items should not be added to the child list, but should be used
to help calculate correct positioning of other views, including views that
were not previously onscreen (referred to as APPEARING views), but whose
pre-layout offscreen position can be determined given the extra
information about the pre-layout removed views.</p>

<p>The second layout pass is the real layout in which only non-removed views
will be used. The only additional requirement during this pass is, if
{@link #supportsPredictiveItemAnimations()} returns true, to note which
views exist in the child list prior to layout and which are not there after
layout (referred to as DISAPPEARING views), and to position/layout those views
appropriately, without regard to the actual bounds of the RecyclerView. This allows
the animation system to know the location to which to animate these disappearing
views.</p>

<p>The default LayoutManager implementations for RecyclerView handle all of these
requirements for animations already. Clients of RecyclerView can either use one
of these layout managers directly or look at their implementations of
onLayoutChildren() to see how they account for the APPEARING and
DISAPPEARING views.</p>

@param recycler         Recycler to use for fetching potentially cached views for a
                        position
@param state            Transient state of RecyclerView"
	end

	operation 29634871 "onLayoutCompleted"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called after a full layout calculation is finished. The layout calculation may include
multiple {@link #onLayoutChildren(Recycler, State)} calls due to animations or
layout measurement but it will include only one {@link #onLayoutCompleted(State)} call.
This method will be called at the end of {@link View#layout(int, int, int, int)} call.
<p>
This is a good place for the LayoutManager to do some cleanup like pending scroll
position, saved state etc.

@param state Transient state of RecyclerView"
	end

	operation 29634999 "generateDefaultLayoutParams"
	  abstract public return_type class_ref 140855 // LayoutParams
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a default <code>LayoutParams</code> object for a child of the RecyclerView.

<p>LayoutManagers will often want to use a custom <code>LayoutParams</code> type
to store extra information specific to the layout. Client code should subclass
{@link RecyclerView.LayoutParams} for this purpose.</p>

<p><em>Important:</em> if you use your own custom <code>LayoutParams</code> type
you must also override
{@link #checkLayoutParams(LayoutParams)},
{@link #generateLayoutParams(android.view.ViewGroup.LayoutParams)} and
{@link #generateLayoutParams(android.content.Context, android.util.AttributeSet)}.</p>

@return A new LayoutParams for a child view"
	end

	operation 29635127 "checkLayoutParams"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "lp" type class_ref 140855 // LayoutParams
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Determines the validity of the supplied LayoutParams object.

<p>This should check to make sure that the object is of the correct type
and all values are within acceptable ranges. The default implementation
returns <code>true</code> for non-null params.</p>

@param lp LayoutParams object to check
@return true if this LayoutParams object is valid, false otherwise"
	end

	operation 29635255 "generateLayoutParams"
	  public return_type class_ref 140855 // LayoutParams
	  nparams 1
	    param inout name "lp" type class_ref 140855 // LayoutParams
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a LayoutParams object suitable for this LayoutManager, copying relevant
values from the supplied LayoutParams object if possible.

<p><em>Important:</em> if you use your own custom <code>LayoutParams</code> type
you must also override
{@link #checkLayoutParams(LayoutParams)},
{@link #generateLayoutParams(android.view.ViewGroup.LayoutParams)} and
{@link #generateLayoutParams(android.content.Context, android.util.AttributeSet)}.</p>

@param lp Source LayoutParams object to copy values from
@return a new LayoutParams object"
	end

	operation 29635383 "generateLayoutParams"
	  public return_type class_ref 140855 // LayoutParams
	  nparams 2
	    param inout name "c" type class_ref 128567 // Context
	    param inout name "attrs" type class_ref 130359 // AttributeSet
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a LayoutParams object suitable for this LayoutManager from
an inflated layout resource.

<p><em>Important:</em> if you use your own custom <code>LayoutParams</code> type
you must also override
{@link #checkLayoutParams(LayoutParams)},
{@link #generateLayoutParams(android.view.ViewGroup.LayoutParams)} and
{@link #generateLayoutParams(android.content.Context, android.util.AttributeSet)}.</p>

@param c Context for obtaining styled attributes
@param attrs AttributeSet describing the supplied arguments
@return a new LayoutParams object"
	end

	operation 29635511 "scrollHorizontallyBy"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "dx" explicit_type "int"
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Scroll horizontally by dx pixels in screen coordinates and return the distance traveled.
The default implementation does nothing and returns 0.

@param dx            distance to scroll by in pixels. X increases as scroll position
                     approaches the right.
@param recycler      Recycler to use for fetching potentially cached views for a
                     position
@param state         Transient state of RecyclerView
@return The actual distance scrolled. The return value will be negative if dx was
negative and scrolling proceeeded in that direction.
<code>Math.abs(result)</code> may be less than dx if a boundary was reached."
	end

	operation 29635639 "scrollVerticallyBy"
	  public explicit_return_type "int"
	  nparams 3
	    param in name "dy" explicit_type "int"
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Scroll vertically by dy pixels in screen coordinates and return the distance traveled.
The default implementation does nothing and returns 0.

@param dy            distance to scroll in pixels. Y increases as scroll position
                     approaches the bottom.
@param recycler      Recycler to use for fetching potentially cached views for a
                     position
@param state         Transient state of RecyclerView
@return The actual distance scrolled. The return value will be negative if dy was
negative and scrolling proceeeded in that direction.
<code>Math.abs(result)</code> may be less than dy if a boundary was reached."
	end

	operation 29635767 "canScrollHorizontally"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Query if horizontal scrolling is currently supported. The default implementation
returns false.

@return True if this LayoutManager can scroll the current contents horizontally"
	end

	operation 29635895 "canScrollVertically"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Query if vertical scrolling is currently supported. The default implementation
returns false.

@return True if this LayoutManager can scroll the current contents vertically"
	end

	operation 29636023 "scrollToPosition"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Scroll to the specified adapter position.

Actual position of the item on the screen depends on the LayoutManager implementation.
@param position Scroll to this adapter position."
	end

	operation 29636151 "smoothScrollToPosition"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	    param inout name "state" type class_ref 1183671 // State
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Smooth scroll to the specified adapter position.</p>
<p>To support smooth scrolling, override this method, create your {@link SmoothScroller}
instance and call {@link #startSmoothScroll(SmoothScroller)}.
</p>
@param recyclerView The RecyclerView to which this layout manager is attached
@param state    Current State of RecyclerView
@param position Scroll to this adapter position."
	end

	operation 29636279 "startSmoothScroll"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "smoothScroller" type class_ref 1185207 // SmoothScroller
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Starts a smooth scroll using the provided SmoothScroller.</p>
<p>Calling this method will cancel any previous smooth scroll request.</p>
@param smoothScroller Unstance which defines how smooth scroll should be animated"
	end

	operation 29636407 "isSmoothScrolling"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return true if RecycylerView is currently in the state of smooth scrolling."
	end

	operation 29636535 "getLayoutDirection"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the resolved layout direction for this RecyclerView.

@return {@link android.support.v4.view.ViewCompat#LAYOUT_DIRECTION_RTL} if the layout
direction is RTL or returns
{@link android.support.v4.view.ViewCompat#LAYOUT_DIRECTION_LTR} if the layout direction
is not RTL."
	end

	operation 29636663 "endAnimation"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Ends all animations on the view created by the {@link ItemAnimator}.

@param view The View for which the animations should be ended.
@see RecyclerView.ItemAnimator#endAnimations()"
	end

	operation 29636791 "addDisappearingView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "To be called only during {@link #onLayoutChildren(Recycler, State)} to add a view
to the layout that is known to be going away, either because it has been
{@link Adapter#notifyItemRemoved(int) removed} or because it is actually not in the
visible portion of the container but is being laid out in order to inform RecyclerView
in how to animate the item out of view.
<p>
Views added via this method are going to be invisible to LayoutManager after the
dispatchLayout pass is complete. They cannot be retrieved via {@link #getChildAt(int)}
or won't be included in {@link #getChildCount()} method.

@param child View to add and then remove with animation."
	end

	operation 29636919 "addDisappearingView"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "child" type class_ref 134455 // View
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "To be called only during {@link #onLayoutChildren(Recycler, State)} to add a view
to the layout that is known to be going away, either because it has been
{@link Adapter#notifyItemRemoved(int) removed} or because it is actually not in the
visible portion of the container but is being laid out in order to inform RecyclerView
in how to animate the item out of view.
<p>
Views added via this method are going to be invisible to LayoutManager after the
dispatchLayout pass is complete. They cannot be retrieved via {@link #getChildAt(int)}
or won't be included in {@link #getChildCount()} method.

@param child View to add and then remove with animation.
@param index Index of the view."
	end

	operation 29637047 "addView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Add a view to the currently attached RecyclerView if needed. LayoutManagers should
use this method to add views obtained from a {@link Recycler} using
{@link Recycler#getViewForPosition(int)}.

@param child View to add"
	end

	operation 29637175 "addView"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "child" type class_ref 134455 // View
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Add a view to the currently attached RecyclerView if needed. LayoutManagers should
use this method to add views obtained from a {@link Recycler} using
{@link Recycler#getViewForPosition(int)}.

@param child View to add
@param index Index to add child at"
	end

	operation 29637303 "addViewInt"
	  private explicit_return_type "void"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param in name "index" explicit_type "int"
	    param inout name "disappearing" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29637431 "removeView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Remove a view from the currently attached RecyclerView if needed. LayoutManagers should
use this method to completely remove a child view that is no longer needed.
LayoutManagers should strongly consider recycling removed views using
{@link Recycler#recycleView(android.view.View)}.

@param child View to remove"
	end

	operation 29637559 "removeViewAt"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Remove a view from the currently attached RecyclerView if needed. LayoutManagers should
use this method to completely remove a child view that is no longer needed.
LayoutManagers should strongly consider recycling removed views using
{@link Recycler#recycleView(android.view.View)}.

@param index Index of the child view to remove"
	end

	operation 29637687 "removeAllViews"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Remove all views from the currently attached RecyclerView. This will not recycle
any of the affected views; the LayoutManager is responsible for doing so if desired."
	end

	operation 29637815 "getBaseline"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns offset of the RecyclerView's text baseline from the its top boundary.

@return The offset of the RecyclerView's text baseline from the its top boundary; -1 if
there is no baseline."
	end

	operation 29637943 "getPosition"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the adapter position of the item represented by the given View. This does not
contain any adapter changes that might have happened after the last layout.

@param view The view to query
@return The adapter position of the item which is rendered by this View."
	end

	operation 29638071 "getItemViewType"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the View type defined by the adapter.

@param view The view to query
@return The type of the view assigned by the adapter."
	end

	operation 29638199 "findContainingItemView"
	  public return_type class_ref 134455 // View
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Nullable
"
	  
	  
	  
	  comment "Traverses the ancestors of the given view and returns the item view that contains it
and also a direct child of the LayoutManager.
<p>
Note that this method may return null if the view is a child of the RecyclerView but
not a child of the LayoutManager (e.g. running a disappear animation).

@param view The view that is a descendant of the LayoutManager.

@return The direct child of the LayoutManager which contains the given view or null if
the provided view is not a descendant of this LayoutManager.

@see RecyclerView#getChildViewHolder(View)
@see RecyclerView#findContainingViewHolder(View)"
	end

	operation 29638327 "findViewByPosition"
	  public return_type class_ref 134455 // View
	  nparams 1
	    param in name "position" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finds the view which represents the given adapter position.
<p>
This method traverses each child since it has no information about child order.
Override this method to improve performance if your LayoutManager keeps data about
child views.
<p>
If a view is ignored via {@link #ignoreView(View)}, it is also ignored by this method.

@param position Position of the item in adapter
@return The child view that represents the given position or null if the position is not
laid out"
	end

	operation 29638455 "detachView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Temporarily detach a child view.

<p>LayoutManagers may want to perform a lightweight detach operation to rearrange
views currently attached to the RecyclerView. Generally LayoutManager implementations
will want to use {@link #detachAndScrapView(android.view.View, RecyclerView.Recycler)}
so that the detached view may be rebound and reused.</p>

<p>If a LayoutManager uses this method to detach a view, it <em>must</em>
{@link #attachView(android.view.View, int, RecyclerView.LayoutParams) reattach}
or {@link #removeDetachedView(android.view.View) fully remove} the detached view
before the LayoutManager entry point method called by RecyclerView returns.</p>

@param child Child to detach"
	end

	operation 29638583 "detachViewAt"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Temporarily detach a child view.

<p>LayoutManagers may want to perform a lightweight detach operation to rearrange
views currently attached to the RecyclerView. Generally LayoutManager implementations
will want to use {@link #detachAndScrapView(android.view.View, RecyclerView.Recycler)}
so that the detached view may be rebound and reused.</p>

<p>If a LayoutManager uses this method to detach a view, it <em>must</em>
{@link #attachView(android.view.View, int, RecyclerView.LayoutParams) reattach}
or {@link #removeDetachedView(android.view.View) fully remove} the detached view
before the LayoutManager entry point method called by RecyclerView returns.</p>

@param index Index of the child to detach"
	end

	operation 29638711 "detachViewInternal"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29638839 "attachView"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param in name "index" explicit_type "int"
	    param inout name "lp" type class_ref 140855 // LayoutParams
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reattach a previously {@link #detachView(android.view.View) detached} view.
This method should not be used to reattach views that were previously
{@link #detachAndScrapView(android.view.View, RecyclerView.Recycler)}  scrapped}.

@param child Child to reattach
@param index Intended child index for child
@param lp LayoutParams for child"
	end

	operation 29638967 "attachView"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "child" type class_ref 134455 // View
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reattach a previously {@link #detachView(android.view.View) detached} view.
This method should not be used to reattach views that were previously
{@link #detachAndScrapView(android.view.View, RecyclerView.Recycler)}  scrapped}.

@param child Child to reattach
@param index Intended child index for child"
	end

	operation 29639095 "attachView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Reattach a previously {@link #detachView(android.view.View) detached} view.
This method should not be used to reattach views that were previously
{@link #detachAndScrapView(android.view.View, RecyclerView.Recycler)}  scrapped}.

@param child Child to reattach"
	end

	operation 29639223 "removeDetachedView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finish removing a view that was previously temporarily
{@link #detachView(android.view.View) detached}.

@param child Detached child to remove"
	end

	operation 29639351 "moveView"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "fromIndex" explicit_type "int"
	    param in name "toIndex" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Moves a View from one position to another.

@param fromIndex The View's initial index
@param toIndex The View's target index"
	end

	operation 29639479 "detachAndScrapView"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "child" type class_ref 134455 // View
	    param inout name "recycler" type class_ref 1182007 // Recycler
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Detach a child view and add it to a {@link Recycler Recycler's} scrap heap.

<p>Scrapping a view allows it to be rebound and reused to show updated or
different data.</p>

@param child Child to detach and scrap
@param recycler Recycler to deposit the new scrap view into"
	end

	operation 29639607 "detachAndScrapViewAt"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "recycler" type class_ref 1182007 // Recycler
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Detach a child view and add it to a {@link Recycler Recycler's} scrap heap.

<p>Scrapping a view allows it to be rebound and reused to show updated or
different data.</p>

@param index Index of child to detach and scrap
@param recycler Recycler to deposit the new scrap view into"
	end

	operation 29639735 "removeAndRecycleView"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "child" type class_ref 134455 // View
	    param inout name "recycler" type class_ref 1182007 // Recycler
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Remove a child view and recycle it using the given Recycler.

@param child Child to remove and recycle
@param recycler Recycler to use to recycle child"
	end

	operation 29639863 "removeAndRecycleViewAt"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "recycler" type class_ref 1182007 // Recycler
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Remove a child view and recycle it using the given Recycler.

@param index Index of child to remove and recycle
@param recycler Recycler to use to recycle child"
	end

	operation 29639991 "getChildCount"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the current number of child views attached to the parent RecyclerView.
This does not include child views that were temporarily detached and/or scrapped.

@return Number of attached children"
	end

	operation 29640119 "getChildAt"
	  public return_type class_ref 134455 // View
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the child view at the given index
@param index Index of child to return
@return Child view at index"
	end

	operation 29640247 "getWidthMode"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the width measurement spec mode of the RecyclerView.
<p>
This value is set only if the LayoutManager opts into the auto measure api via
{@link #setAutoMeasureEnabled(boolean)}.
<p>
When RecyclerView is running a layout, this value is always set to
{@link View.MeasureSpec#EXACTLY} even if it was measured with a different spec mode.

@return Width measure spec mode.

@see View.MeasureSpec#getMode(int)
@see View#onMeasure(int, int)"
	end

	operation 29640375 "getHeightMode"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the height measurement spec mode of the RecyclerView.
<p>
This value is set only if the LayoutManager opts into the auto measure api via
{@link #setAutoMeasureEnabled(boolean)}.
<p>
When RecyclerView is running a layout, this value is always set to
{@link View.MeasureSpec#EXACTLY} even if it was measured with a different spec mode.

@return Height measure spec mode.

@see View.MeasureSpec#getMode(int)
@see View#onMeasure(int, int)"
	end

	operation 29640503 "getWidth"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the width of the parent RecyclerView

@return Width in pixels"
	end

	operation 29640631 "getHeight"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the height of the parent RecyclerView

@return Height in pixels"
	end

	operation 29640759 "getPaddingLeft"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the left padding of the parent RecyclerView

@return Padding in pixels"
	end

	operation 29640887 "getPaddingTop"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the top padding of the parent RecyclerView

@return Padding in pixels"
	end

	operation 29641015 "getPaddingRight"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the right padding of the parent RecyclerView

@return Padding in pixels"
	end

	operation 29641143 "getPaddingBottom"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the bottom padding of the parent RecyclerView

@return Padding in pixels"
	end

	operation 29641271 "getPaddingStart"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the start padding of the parent RecyclerView

@return Padding in pixels"
	end

	operation 29641399 "getPaddingEnd"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the end padding of the parent RecyclerView

@return Padding in pixels"
	end

	operation 29641527 "isFocused"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the RecyclerView this LayoutManager is bound to has focus.

@return True if the RecyclerView has focus, false otherwise.
@see View#isFocused()"
	end

	operation 29641655 "hasFocus"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the RecyclerView this LayoutManager is bound to has or contains focus.

@return true if the RecyclerView has or contains focus
@see View#hasFocus()"
	end

	operation 29641783 "getFocusedChild"
	  public return_type class_ref 134455 // View
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the item View which has or contains focus.

@return A direct child of RecyclerView which has focus or contains the focused child."
	end

	operation 29641911 "getItemCount"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of items in the adapter bound to the parent RecyclerView.
<p>
Note that this number is not necessarily equal to {@link State#getItemCount()}. In
methods where State is available, you should use {@link State#getItemCount()} instead.
For more details, check the documentation for {@link State#getItemCount()}.

@return The number of items in the bound adapter
@see State#getItemCount()"
	end

	operation 29642039 "offsetChildrenHorizontal"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "dx" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Offset all child views attached to the parent RecyclerView by dx pixels along
the horizontal axis.

@param dx Pixels to offset by"
	end

	operation 29642167 "offsetChildrenVertical"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "dy" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Offset all child views attached to the parent RecyclerView by dy pixels along
the vertical axis.

@param dy Pixels to offset by"
	end

	operation 29642295 "ignoreView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Flags a view so that it will not be scrapped or recycled.
<p>
Scope of ignoring a child is strictly restricted to position tracking, scrapping and
recyling. Methods like {@link #removeAndRecycleAllViews(Recycler)} will ignore the child
whereas {@link #removeAllViews()} or {@link #offsetChildrenHorizontal(int)} will not
ignore the child.
<p>
Before this child can be recycled again, you have to call
{@link #stopIgnoringView(View)}.
<p>
You can call this method only if your LayoutManger is in onLayout or onScroll callback.

@param view View to ignore.
@see #stopIgnoringView(View)"
	end

	operation 29642423 "stopIgnoringView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "View can be scrapped and recycled again.
<p>
Note that calling this method removes all information in the view holder.
<p>
You can call this method only if your LayoutManger is in onLayout or onScroll callback.

@param view View to ignore."
	end

	operation 29642551 "detachAndScrapAttachedViews"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "recycler" type class_ref 1182007 // Recycler
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Temporarily detach and scrap all currently attached child views. Views will be scrapped
into the given Recycler. The Recycler may prefer to reuse scrap views before
other views that were previously recycled.

@param recycler Recycler to scrap views into"
	end

	operation 29642679 "scrapOrRecycleView"
	  private explicit_return_type "void"
	  nparams 3
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param in name "index" explicit_type "int"
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29642807 "removeAndRecycleScrapInt"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "recycler" type class_ref 1182007 // Recycler
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Recycles the scrapped views.
<p>
When a view is detached and removed, it does not trigger a ViewGroup invalidate. This is
the expected behavior if scrapped views are used for animations. Otherwise, we need to
call remove and invalidate RecyclerView to ensure UI update.

@param recycler Recycler"
	end

	operation 29642935 "measureChild"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param in name "widthUsed" explicit_type "int"
	    param in name "heightUsed" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Measure a child view using standard measurement policy, taking the padding
of the parent RecyclerView and any added item decorations into account.

<p>If the RecyclerView can be scrolled in either dimension the caller may
pass 0 as the widthUsed or heightUsed parameters as they will be irrelevant.</p>

@param child Child view to measure
@param widthUsed Width in pixels currently consumed by other views, if relevant
@param heightUsed Height in pixels currently consumed by other views, if relevant"
	end

	operation 29643063 "shouldReMeasureChild"
	  package explicit_return_type "boolean"
	  nparams 4
	    param inout name "child" type class_ref 134455 // View
	    param in name "widthSpec" explicit_type "int"
	    param in name "heightSpec" explicit_type "int"
	    param inout name "lp" type class_ref 140855 // LayoutParams
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "RecyclerView internally does its own View measurement caching which should help with
WRAP_CONTENT.
<p>
Use this method if the View is already measured once in this layout pass."
	end

	operation 29643191 "shouldMeasureChild"
	  package explicit_return_type "boolean"
	  nparams 4
	    param inout name "child" type class_ref 134455 // View
	    param in name "widthSpec" explicit_type "int"
	    param in name "heightSpec" explicit_type "int"
	    param inout name "lp" type class_ref 140855 // LayoutParams
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " we may consider making this public

RecyclerView internally does its own View measurement caching which should help with
WRAP_CONTENT.
<p>
Use this method if the View is not yet measured and you need to decide whether to
measure this View or not."
	end

	operation 29643319 "isMeasurementCacheEnabled"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "In addition to the View Framework's measurement cache, RecyclerView uses its own
additional measurement cache for its children to avoid re-measuring them when not
necessary. It is on by default but it can be turned off via
{@link #setMeasurementCacheEnabled(boolean)}.

@return True if measurement cache is enabled, false otherwise.

@see #setMeasurementCacheEnabled(boolean)"
	end

	operation 29643447 "setMeasurementCacheEnabled"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "measurementCacheEnabled" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets whether RecyclerView should use its own measurement cache for the children. This is
a more aggressive cache than the framework uses.

@param measurementCacheEnabled True to enable the measurement cache, false otherwise.

@see #isMeasurementCacheEnabled()"
	end

	operation 29643575 "isMeasurementUpToDate"
	  class_operation private explicit_return_type "boolean"
	  nparams 3
	    param in name "childSize" explicit_type "int"
	    param in name "spec" explicit_type "int"
	    param in name "dimension" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29643703 "measureChildWithMargins"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param in name "widthUsed" explicit_type "int"
	    param in name "heightUsed" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Measure a child view using standard measurement policy, taking the padding
of the parent RecyclerView, any added item decorations and the child margins
into account.

<p>If the RecyclerView can be scrolled in either dimension the caller may
pass 0 as the widthUsed or heightUsed parameters as they will be irrelevant.</p>

@param child Child view to measure
@param widthUsed Width in pixels currently consumed by other views, if relevant
@param heightUsed Height in pixels currently consumed by other views, if relevant"
	end

	operation 29643831 "getChildMeasureSpec"
	  class_operation public explicit_return_type "int"
	  nparams 4
	    param in name "parentSize" explicit_type "int"
	    param in name "padding" explicit_type "int"
	    param in name "childDimension" explicit_type "int"
	    param inout name "canScroll" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Deprecated
"
	  
	  
	  
	  comment "Calculate a MeasureSpec value for measuring a child view in one dimension.

@param parentSize Size of the parent view where the child will be placed
@param padding Total space currently consumed by other elements of the parent
@param childDimension Desired size of the child view, or FILL_PARENT/WRAP_CONTENT.
                      Generally obtained from the child view's LayoutParams
@param canScroll true if the parent RecyclerView can scroll in this dimension

@return a MeasureSpec value for the child view
@deprecated use {@link #getChildMeasureSpec(int, int, int, int, boolean)}"
	end

	operation 29643959 "getChildMeasureSpec"
	  class_operation public explicit_return_type "int"
	  nparams 5
	    param in name "parentSize" explicit_type "int"
	    param in name "parentMode" explicit_type "int"
	    param in name "padding" explicit_type "int"
	    param in name "childDimension" explicit_type "int"
	    param inout name "canScroll" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Calculate a MeasureSpec value for measuring a child view in one dimension.

@param parentSize Size of the parent view where the child will be placed
@param parentMode The measurement spec mode of the parent
@param padding Total space currently consumed by other elements of parent
@param childDimension Desired size of the child view, or FILL_PARENT/WRAP_CONTENT.
                      Generally obtained from the child view's LayoutParams
@param canScroll true if the parent RecyclerView can scroll in this dimension

@return a MeasureSpec value for the child view"
	end

	operation 29644087 "getDecoratedMeasuredWidth"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the measured width of the given child, plus the additional size of
any insets applied by {@link ItemDecoration ItemDecorations}.

@param child Child view to query
@return child's measured width plus <code>ItemDecoration</code> insets

@see View#getMeasuredWidth()"
	end

	operation 29644215 "getDecoratedMeasuredHeight"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the measured height of the given child, plus the additional size of
any insets applied by {@link ItemDecoration ItemDecorations}.

@param child Child view to query
@return child's measured height plus <code>ItemDecoration</code> insets

@see View#getMeasuredHeight()"
	end

	operation 29644343 "layoutDecorated"
	  public explicit_return_type "void"
	  nparams 5
	    param inout name "child" type class_ref 134455 // View
	    param in name "left" explicit_type "int"
	    param in name "top" explicit_type "int"
	    param in name "right" explicit_type "int"
	    param in name "bottom" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Lay out the given child view within the RecyclerView using coordinates that
include any current {@link ItemDecoration ItemDecorations}.

<p>LayoutManagers should prefer working in sizes and coordinates that include
item decoration insets whenever possible. This allows the LayoutManager to effectively
ignore decoration insets within measurement and layout code. See the following
methods:</p>
<ul>
    <li>{@link #layoutDecoratedWithMargins(View, int, int, int, int)}</li>
    <li>{@link #getDecoratedBoundsWithMargins(View, Rect)}</li>
    <li>{@link #measureChild(View, int, int)}</li>
    <li>{@link #measureChildWithMargins(View, int, int)}</li>
    <li>{@link #getDecoratedLeft(View)}</li>
    <li>{@link #getDecoratedTop(View)}</li>
    <li>{@link #getDecoratedRight(View)}</li>
    <li>{@link #getDecoratedBottom(View)}</li>
    <li>{@link #getDecoratedMeasuredWidth(View)}</li>
    <li>{@link #getDecoratedMeasuredHeight(View)}</li>
</ul>

@param child Child to lay out
@param left Left edge, with item decoration insets included
@param top Top edge, with item decoration insets included
@param right Right edge, with item decoration insets included
@param bottom Bottom edge, with item decoration insets included

@see View#layout(int, int, int, int)
@see #layoutDecoratedWithMargins(View, int, int, int, int)"
	end

	operation 29644471 "layoutDecoratedWithMargins"
	  public explicit_return_type "void"
	  nparams 5
	    param inout name "child" type class_ref 134455 // View
	    param in name "left" explicit_type "int"
	    param in name "top" explicit_type "int"
	    param in name "right" explicit_type "int"
	    param in name "bottom" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Lay out the given child view within the RecyclerView using coordinates that
include any current {@link ItemDecoration ItemDecorations} and margins.

<p>LayoutManagers should prefer working in sizes and coordinates that include
item decoration insets whenever possible. This allows the LayoutManager to effectively
ignore decoration insets within measurement and layout code. See the following
methods:</p>
<ul>
    <li>{@link #layoutDecorated(View, int, int, int, int)}</li>
    <li>{@link #measureChild(View, int, int)}</li>
    <li>{@link #measureChildWithMargins(View, int, int)}</li>
    <li>{@link #getDecoratedLeft(View)}</li>
    <li>{@link #getDecoratedTop(View)}</li>
    <li>{@link #getDecoratedRight(View)}</li>
    <li>{@link #getDecoratedBottom(View)}</li>
    <li>{@link #getDecoratedMeasuredWidth(View)}</li>
    <li>{@link #getDecoratedMeasuredHeight(View)}</li>
</ul>

@param child Child to lay out
@param left Left edge, with item decoration insets and left margin included
@param top Top edge, with item decoration insets and top margin included
@param right Right edge, with item decoration insets and right margin included
@param bottom Bottom edge, with item decoration insets and bottom margin included

@see View#layout(int, int, int, int)
@see #layoutDecorated(View, int, int, int, int)"
	end

	operation 29644599 "getTransformedBoundingBox"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "child" type class_ref 134455 // View
	    param inout name "includeDecorInsets" explicit_type "boolean"
	    param inout name "out" type class_ref 135351 // Rect
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Calculates the bounding box of the View while taking into account its matrix changes
(translation, scale etc) with respect to the RecyclerView.
<p>
If {@code includeDecorInsets} is {@code true}, they are applied first before applying
the View's matrix so that the decor offsets also go through the same transformation.

@param child The ItemView whose bounding box should be calculated.
@param includeDecorInsets True if the decor insets should be included in the bounding box
@param out The rectangle into which the output will be written."
	end

	operation 29644727 "getDecoratedBoundsWithMargins"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "view" type class_ref 134455 // View
	    param inout name "outBounds" type class_ref 135351 // Rect
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the bounds of the view including its decoration and margins.

@param view The view element to check
@param outBounds A rect that will receive the bounds of the element including its
                 decoration and margins."
	end

	operation 29644855 "getDecoratedLeft"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the left edge of the given child view within its parent, offset by any applied
{@link ItemDecoration ItemDecorations}.

@param child Child to query
@return Child left edge with offsets applied
@see #getLeftDecorationWidth(View)"
	end

	operation 29644983 "getDecoratedTop"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the top edge of the given child view within its parent, offset by any applied
{@link ItemDecoration ItemDecorations}.

@param child Child to query
@return Child top edge with offsets applied
@see #getTopDecorationHeight(View)"
	end

	operation 29645111 "getDecoratedRight"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the right edge of the given child view within its parent, offset by any applied
{@link ItemDecoration ItemDecorations}.

@param child Child to query
@return Child right edge with offsets applied
@see #getRightDecorationWidth(View)"
	end

	operation 29645239 "getDecoratedBottom"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the bottom edge of the given child view within its parent, offset by any applied
{@link ItemDecoration ItemDecorations}.

@param child Child to query
@return Child bottom edge with offsets applied
@see #getBottomDecorationHeight(View)"
	end

	operation 29645367 "calculateItemDecorationsForChild"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "child" type class_ref 134455 // View
	    param inout name "outRect" type class_ref 135351 // Rect
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Calculates the item decor insets applied to the given child and updates the provided
Rect instance with the inset values.
<ul>
    <li>The Rect's left is set to the total width of left decorations.</li>
    <li>The Rect's top is set to the total height of top decorations.</li>
    <li>The Rect's right is set to the total width of right decorations.</li>
    <li>The Rect's bottom is set to total height of bottom decorations.</li>
</ul>
<p>
Note that item decorations are automatically calculated when one of the LayoutManager's
measure child methods is called. If you need to measure the child with custom specs via
{@link View#measure(int, int)}, you can use this method to get decorations.

@param child The child view whose decorations should be calculated
@param outRect The Rect to hold result values"
	end

	operation 29645495 "getTopDecorationHeight"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the total height of item decorations applied to child's top.
<p>
Note that this value is not updated until the View is measured or
{@link #calculateItemDecorationsForChild(View, Rect)} is called.

@param child Child to query
@return The total height of item decorations applied to the child's top.
@see #getDecoratedTop(View)
@see #calculateItemDecorationsForChild(View, Rect)"
	end

	operation 29645623 "getBottomDecorationHeight"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the total height of item decorations applied to child's bottom.
<p>
Note that this value is not updated until the View is measured or
{@link #calculateItemDecorationsForChild(View, Rect)} is called.

@param child Child to query
@return The total height of item decorations applied to the child's bottom.
@see #getDecoratedBottom(View)
@see #calculateItemDecorationsForChild(View, Rect)"
	end

	operation 29645751 "getLeftDecorationWidth"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the total width of item decorations applied to child's left.
<p>
Note that this value is not updated until the View is measured or
{@link #calculateItemDecorationsForChild(View, Rect)} is called.

@param child Child to query
@return The total width of item decorations applied to the child's left.
@see #getDecoratedLeft(View)
@see #calculateItemDecorationsForChild(View, Rect)"
	end

	operation 29645879 "getRightDecorationWidth"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "child" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the total width of item decorations applied to child's right.
<p>
Note that this value is not updated until the View is measured or
{@link #calculateItemDecorationsForChild(View, Rect)} is called.

@param child Child to query
@return The total width of item decorations applied to the child's right.
@see #getDecoratedRight(View)
@see #calculateItemDecorationsForChild(View, Rect)"
	end

	operation 29646007 "onFocusSearchFailed"
	  public return_type class_ref 134455 // View
	  nparams 4
	    param inout name "focused" type class_ref 134455 // View
	    param in name "direction" explicit_type "int"
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Nullable
"
	  
	  
	  
	  comment "Called when searching for a focusable view in the given direction has failed
for the current content of the RecyclerView.

<p>This is the LayoutManager's opportunity to populate views in the given direction
to fulfill the request if it can. The LayoutManager should attach and return
the view to be focused. The default implementation returns null.</p>

@param focused   The currently focused view
@param direction One of {@link View#FOCUS_UP}, {@link View#FOCUS_DOWN},
                 {@link View#FOCUS_LEFT}, {@link View#FOCUS_RIGHT},
                 {@link View#FOCUS_BACKWARD}, {@link View#FOCUS_FORWARD}
                 or 0 for not applicable
@param recycler  The recycler to use for obtaining views for currently offscreen items
@param state     Transient state of RecyclerView
@return The chosen view to be focused"
	end

	operation 29646135 "onInterceptFocusSearch"
	  public return_type class_ref 134455 // View
	  nparams 2
	    param inout name "focused" type class_ref 134455 // View
	    param in name "direction" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This method gives a LayoutManager an opportunity to intercept the initial focus search
before the default behavior of {@link FocusFinder} is used. If this method returns
null FocusFinder will attempt to find a focusable child view. If it fails
then {@link #onFocusSearchFailed(View, int, RecyclerView.Recycler, RecyclerView.State)}
will be called to give the LayoutManager an opportunity to add new views for items
that did not have attached views representing them. The LayoutManager should not add
or remove views from this method.

@param focused The currently focused view
@param direction One of {@link View#FOCUS_UP}, {@link View#FOCUS_DOWN},
                 {@link View#FOCUS_LEFT}, {@link View#FOCUS_RIGHT},
                 {@link View#FOCUS_BACKWARD}, {@link View#FOCUS_FORWARD}
@return A descendant view to focus or null to fall back to default behavior.
        The default implementation returns null."
	end

	operation 29646263 "requestChildRectangleOnScreen"
	  public explicit_return_type "boolean"
	  nparams 4
	    param inout name "parent" type class_ref 1176503 // RecyclerView
	    param inout name "child" type class_ref 134455 // View
	    param inout name "rect" type class_ref 135351 // Rect
	    param inout name "immediate" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a child of the RecyclerView wants a particular rectangle to be positioned
onto the screen. See {@link ViewParent#requestChildRectangleOnScreen(android.view.View,
android.graphics.Rect, boolean)} for more details.

<p>The base implementation will attempt to perform a standard programmatic scroll
to bring the given rect into view, within the padded area of the RecyclerView.</p>

@param child The direct child making the request.
@param rect  The rectangle in the child's coordinates the child
             wishes to be on the screen.
@param immediate True to forbid animated or delayed scrolling,
                 false otherwise
@return Whether the group scrolled to handle the operation"
	end

	operation 29646391 "onRequestChildFocus"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "parent" type class_ref 1176503 // RecyclerView
	    param inout name "child" type class_ref 134455 // View
	    param inout name "focused" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Deprecated
"
	  
	  
	  
	  comment "@deprecated Use {@link #onRequestChildFocus(RecyclerView, State, View, View)}"
	end

	operation 29646519 "onRequestChildFocus"
	  public explicit_return_type "boolean"
	  nparams 4
	    param inout name "parent" type class_ref 1176503 // RecyclerView
	    param inout name "state" type class_ref 1183671 // State
	    param inout name "child" type class_ref 134455 // View
	    param inout name "focused" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a descendant view of the RecyclerView requests focus.

<p>A LayoutManager wishing to keep focused views aligned in a specific
portion of the view may implement that behavior in an override of this method.</p>

<p>If the LayoutManager executes different behavior that should override the default
behavior of scrolling the focused child on screen instead of running alongside it,
this method should return true.</p>

@param parent  The RecyclerView hosting this LayoutManager
@param state   Current state of RecyclerView
@param child   Direct child of the RecyclerView containing the newly focused view
@param focused The newly focused view. This may be the same view as child or it may be
               null
@return true if the default scroll behavior should be suppressed"
	end

	operation 29646647 "onAdapterChanged"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "oldAdapter" type class_ref 1182647 // Adapter
	    param inout name "newAdapter" type class_ref 1182647 // Adapter
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called if the RecyclerView this LayoutManager is bound to has a different adapter set.
The LayoutManager may use this opportunity to clear caches and configure state such
that it can relayout appropriately with the new data and potentially new view types.

<p>The default implementation removes all currently attached views.</p>

@param oldAdapter The previous adapter instance. Will be null if there was previously no
                  adapter.
@param newAdapter The new adapter instance. Might be null if
                  {@link #setAdapter(RecyclerView.Adapter)} is called with {@code null}."
	end

	operation 29646775 "onAddFocusables"
	  public explicit_return_type "boolean"
	  nparams 4
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	    param inout name "views" explicit_type "ArrayList<View>"
	    param in name "direction" explicit_type "int"
	    param in name "focusableMode" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called to populate focusable views within the RecyclerView.

<p>The LayoutManager implementation should return <code>true</code> if the default
behavior of {@link ViewGroup#addFocusables(java.util.ArrayList, int)} should be
suppressed.</p>

<p>The default implementation returns <code>false</code> to trigger RecyclerView
to fall back to the default ViewGroup behavior.</p>

@param recyclerView The RecyclerView hosting this LayoutManager
@param views List of output views. This method should add valid focusable views
             to this list.
@param direction One of {@link View#FOCUS_UP}, {@link View#FOCUS_DOWN},
                 {@link View#FOCUS_LEFT}, {@link View#FOCUS_RIGHT},
                 {@link View#FOCUS_BACKWARD}, {@link View#FOCUS_FORWARD}
@param focusableMode The type of focusables to be added.

@return true to suppress the default behavior, false to add default focusables after
        this method returns.

@see #FOCUSABLES_ALL
@see #FOCUSABLES_TOUCH_MODE"
	end

	operation 29646903 "onItemsChanged"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when {@link Adapter#notifyDataSetChanged()} is triggered instead of giving
detailed information on what has actually changed.

@param recyclerView"
	end

	operation 29647031 "onItemsAdded"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when items have been added to the adapter. The LayoutManager may choose to
requestLayout if the inserted items would require refreshing the currently visible set
of child views. (e.g. currently empty space would be filled by appended items, etc.)

@param recyclerView
@param positionStart
@param itemCount"
	end

	operation 29647159 "onItemsRemoved"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when items have been removed from the adapter.

@param recyclerView
@param positionStart
@param itemCount"
	end

	operation 29647287 "onItemsUpdated"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when items have been changed in the adapter.
To receive payload,  override {@link #onItemsUpdated(RecyclerView, int, int, Object)}
instead, then this callback will not be invoked.

@param recyclerView
@param positionStart
@param itemCount"
	end

	operation 29647415 "onItemsUpdated"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	    param in name "positionStart" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	    param inout name "payload" type class_ref 132663 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when items have been changed in the adapter and with optional payload.
Default implementation calls {@link #onItemsUpdated(RecyclerView, int, int)}.

@param recyclerView
@param positionStart
@param itemCount
@param payload"
	end

	operation 29647543 "onItemsMoved"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	    param in name "from" explicit_type "int"
	    param in name "to" explicit_type "int"
	    param in name "itemCount" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when an item is moved withing the adapter.
<p>
Note that, an item may also change position in response to another ADD/REMOVE/MOVE
operation. This callback is only called if and only if {@link Adapter#notifyItemMoved}
is called.

@param recyclerView
@param from
@param to
@param itemCount"
	end

	operation 29647671 "computeHorizontalScrollExtent"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Override this method if you want to support scroll bars.</p>

<p>Read {@link RecyclerView#computeHorizontalScrollExtent()} for details.</p>

<p>Default implementation returns 0.</p>

@param state Current state of RecyclerView
@return The horizontal extent of the scrollbar's thumb
@see RecyclerView#computeHorizontalScrollExtent()"
	end

	operation 29647799 "computeHorizontalScrollOffset"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Override this method if you want to support scroll bars.</p>

<p>Read {@link RecyclerView#computeHorizontalScrollOffset()} for details.</p>

<p>Default implementation returns 0.</p>

@param state Current State of RecyclerView where you can find total item count
@return The horizontal offset of the scrollbar's thumb
@see RecyclerView#computeHorizontalScrollOffset()"
	end

	operation 29647927 "computeHorizontalScrollRange"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Override this method if you want to support scroll bars.</p>

<p>Read {@link RecyclerView#computeHorizontalScrollRange()} for details.</p>

<p>Default implementation returns 0.</p>

@param state Current State of RecyclerView where you can find total item count
@return The total horizontal range represented by the vertical scrollbar
@see RecyclerView#computeHorizontalScrollRange()"
	end

	operation 29648055 "computeVerticalScrollExtent"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Override this method if you want to support scroll bars.</p>

<p>Read {@link RecyclerView#computeVerticalScrollExtent()} for details.</p>

<p>Default implementation returns 0.</p>

@param state Current state of RecyclerView
@return The vertical extent of the scrollbar's thumb
@see RecyclerView#computeVerticalScrollExtent()"
	end

	operation 29648183 "computeVerticalScrollOffset"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Override this method if you want to support scroll bars.</p>

<p>Read {@link RecyclerView#computeVerticalScrollOffset()} for details.</p>

<p>Default implementation returns 0.</p>

@param state Current State of RecyclerView where you can find total item count
@return The vertical offset of the scrollbar's thumb
@see RecyclerView#computeVerticalScrollOffset()"
	end

	operation 29648311 "computeVerticalScrollRange"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Override this method if you want to support scroll bars.</p>

<p>Read {@link RecyclerView#computeVerticalScrollRange()} for details.</p>

<p>Default implementation returns 0.</p>

@param state Current State of RecyclerView where you can find total item count
@return The total vertical range represented by the vertical scrollbar
@see RecyclerView#computeVerticalScrollRange()"
	end

	operation 29648439 "onMeasure"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	    param in name "widthSpec" explicit_type "int"
	    param in name "heightSpec" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Measure the attached RecyclerView. Implementations must call
{@link #setMeasuredDimension(int, int)} before returning.

<p>The default implementation will handle EXACTLY measurements and respect
the minimum width and height properties of the host RecyclerView if measured
as UNSPECIFIED. AT_MOST measurements will be treated as EXACTLY and the RecyclerView
will consume all available space.</p>

@param recycler Recycler
@param state Transient state of RecyclerView
@param widthSpec Width {@link android.view.View.MeasureSpec}
@param heightSpec Height {@link android.view.View.MeasureSpec}"
	end

	operation 29648567 "setMeasuredDimension"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "widthSize" explicit_type "int"
	    param in name "heightSize" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "{@link View#setMeasuredDimension(int, int) Set the measured dimensions} of the
host RecyclerView.

@param widthSize Measured width
@param heightSize Measured height"
	end

	operation 29648695 "getMinimumWidth"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return The host RecyclerView's {@link View#getMinimumWidth()}"
	end

	operation 29648823 "getMinimumHeight"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return The host RecyclerView's {@link View#getMinimumHeight()}"
	end

	operation 29648951 "onSaveInstanceState"
	  public return_type class_ref 137399 // Parcelable
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>Called when the LayoutManager should save its state. This is a good time to save your
scroll position, configuration and anything else that may be required to restore the same
layout state if the LayoutManager is recreated.</p>
<p>RecyclerView does NOT verify if the LayoutManager has changed between state save and
restore. This will let you share information between your LayoutManagers but it is also
your responsibility to make sure they use the same parcelable class.</p>

@return Necessary information for LayoutManager to be able to restore its state"
	end

	operation 29649079 "onRestoreInstanceState"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "state" type class_ref 137399 // Parcelable
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29649207 "stopSmoothScroller"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29649335 "onSmoothScrollerStopped"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "smoothScroller" type class_ref 1185207 // SmoothScroller
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29649463 "onScrollStateChanged"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "state" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "RecyclerView calls this method to notify LayoutManager that scroll state has changed.

@param state The new scroll state for RecyclerView"
	end

	operation 29649591 "removeAndRecycleAllViews"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "recycler" type class_ref 1182007 // Recycler
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes all views and recycles them using the given recycler.
<p>
If you want to clean cached views as well, you should call {@link Recycler#clear()} too.
<p>
If a View is marked as \"ignored\", it is not removed nor recycled.

@param recycler Recycler to use to recycle children
@see #removeAndRecycleView(View, Recycler)
@see #removeAndRecycleViewAt(int, Recycler)
@see #ignoreView(View)"
	end

	operation 29649719 "onInitializeAccessibilityNodeInfo"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "info" type class_ref 1185335 // AccessibilityNodeInfoCompat
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " called by accessibility delegate"
	end

	operation 29649847 "onInitializeAccessibilityNodeInfo"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	    param inout name "info" type class_ref 1185335 // AccessibilityNodeInfoCompat
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by the AccessibilityDelegate when the information about the current layout should
be populated.
<p>
Default implementation adds a {@link
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat}.
<p>
You should override
{@link #getRowCountForAccessibility(RecyclerView.Recycler, RecyclerView.State)},
{@link #getColumnCountForAccessibility(RecyclerView.Recycler, RecyclerView.State)},
{@link #isLayoutHierarchical(RecyclerView.Recycler, RecyclerView.State)} and
{@link #getSelectionModeForAccessibility(RecyclerView.Recycler, RecyclerView.State)} for
more accurate accessibility information.

@param recycler The Recycler that can be used to convert view positions into adapter
                positions
@param state    The current state of RecyclerView
@param info     The info that should be filled by the LayoutManager
@see View#onInitializeAccessibilityNodeInfo(
android.view.accessibility.AccessibilityNodeInfo)
@see #getRowCountForAccessibility(RecyclerView.Recycler, RecyclerView.State)
@see #getColumnCountForAccessibility(RecyclerView.Recycler, RecyclerView.State)
@see #isLayoutHierarchical(RecyclerView.Recycler, RecyclerView.State)
@see #getSelectionModeForAccessibility(RecyclerView.Recycler, RecyclerView.State)"
	end

	operation 29649975 "onInitializeAccessibilityEvent"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "event" type class_ref 138679 // AccessibilityEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " called by accessibility delegate"
	end

	operation 29650103 "onInitializeAccessibilityEvent"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	    param inout name "event" type class_ref 138679 // AccessibilityEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by the accessibility delegate to initialize an accessibility event.
<p>
Default implementation adds item count and scroll information to the event.

@param recycler The Recycler that can be used to convert view positions into adapter
                positions
@param state    The current state of RecyclerView
@param event    The event instance to initialize
@see View#onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)"
	end

	operation 29650231 "onInitializeAccessibilityNodeInfoForItem"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "host" type class_ref 134455 // View
	    param inout name "info" type class_ref 1185335 // AccessibilityNodeInfoCompat
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " called by accessibility delegate"
	end

	operation 29650359 "onInitializeAccessibilityNodeInfoForItem"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	    param inout name "host" type class_ref 134455 // View
	    param inout name "info" type class_ref 1185335 // AccessibilityNodeInfoCompat
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by the AccessibilityDelegate when the accessibility information for a specific
item should be populated.
<p>
Default implementation adds basic positioning information about the item.

@param recycler The Recycler that can be used to convert view positions into adapter
                positions
@param state    The current state of RecyclerView
@param host     The child for which accessibility node info should be populated
@param info     The info to fill out about the item
@see android.widget.AbsListView#onInitializeAccessibilityNodeInfoForItem(View, int,
android.view.accessibility.AccessibilityNodeInfo)"
	end

	operation 29650487 "requestSimpleAnimationsInNextLayout"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "A LayoutManager can call this method to force RecyclerView to run simple animations in
the next layout pass, even if there is not any trigger to do so. (e.g. adapter data
change).
<p>
Note that, calling this method will not guarantee that RecyclerView will run animations
at all. For example, if there is not any {@link ItemAnimator} set, RecyclerView will
not run any animations but will still clear this flag after the layout is complete.
"
	end

	operation 29650615 "getSelectionModeForAccessibility"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the selection mode for accessibility. Should be
{@link AccessibilityNodeInfoCompat.CollectionInfoCompat#SELECTION_MODE_NONE},
{@link AccessibilityNodeInfoCompat.CollectionInfoCompat#SELECTION_MODE_SINGLE} or
{@link AccessibilityNodeInfoCompat.CollectionInfoCompat#SELECTION_MODE_MULTIPLE}.
<p>
Default implementation returns
{@link AccessibilityNodeInfoCompat.CollectionInfoCompat#SELECTION_MODE_NONE}.

@param recycler The Recycler that can be used to convert view positions into adapter
                positions
@param state    The current state of RecyclerView
@return Selection mode for accessibility. Default implementation returns
{@link AccessibilityNodeInfoCompat.CollectionInfoCompat#SELECTION_MODE_NONE}."
	end

	operation 29650743 "getRowCountForAccessibility"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of rows for accessibility.
<p>
Default implementation returns the number of items in the adapter if LayoutManager
supports vertical scrolling or 1 if LayoutManager does not support vertical
scrolling.

@param recycler The Recycler that can be used to convert view positions into adapter
                positions
@param state    The current state of RecyclerView
@return The number of rows in LayoutManager for accessibility."
	end

	operation 29650871 "getColumnCountForAccessibility"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of columns for accessibility.
<p>
Default implementation returns the number of items in the adapter if LayoutManager
supports horizontal scrolling or 1 if LayoutManager does not support horizontal
scrolling.

@param recycler The Recycler that can be used to convert view positions into adapter
                positions
@param state    The current state of RecyclerView
@return The number of rows in LayoutManager for accessibility."
	end

	operation 29650999 "isLayoutHierarchical"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns whether layout is hierarchical or not to be used for accessibility.
<p>
Default implementation returns false.

@param recycler The Recycler that can be used to convert view positions into adapter
                positions
@param state    The current state of RecyclerView
@return True if layout is hierarchical."
	end

	operation 29651127 "performAccessibilityAction"
	  package explicit_return_type "boolean"
	  nparams 2
	    param in name "action" explicit_type "int"
	    param inout name "args" type class_ref 131511 // Bundle
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " called by accessibility delegate"
	end

	operation 29651255 "performAccessibilityAction"
	  public explicit_return_type "boolean"
	  nparams 4
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	    param in name "action" explicit_type "int"
	    param inout name "args" type class_ref 131511 // Bundle
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by AccessibilityDelegate when an action is requested from the RecyclerView.

@param recycler  The Recycler that can be used to convert view positions into adapter
                 positions
@param state     The current state of RecyclerView
@param action    The action to perform
@param args      Optional action arguments
@see View#performAccessibilityAction(int, android.os.Bundle)"
	end

	operation 29651383 "performAccessibilityActionForItem"
	  package explicit_return_type "boolean"
	  nparams 3
	    param inout name "view" type class_ref 134455 // View
	    param in name "action" explicit_type "int"
	    param inout name "args" type class_ref 131511 // Bundle
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " called by accessibility delegate"
	end

	operation 29651511 "performAccessibilityActionForItem"
	  public explicit_return_type "boolean"
	  nparams 5
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param inout name "state" type class_ref 1183671 // State
	    param inout name "view" type class_ref 134455 // View
	    param in name "action" explicit_type "int"
	    param inout name "args" type class_ref 131511 // Bundle
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by AccessibilityDelegate when an accessibility action is requested on one of the
children of LayoutManager.
<p>
Default implementation does not do anything.

@param recycler The Recycler that can be used to convert view positions into adapter
                positions
@param state    The current state of RecyclerView
@param view     The child view on which the action is performed
@param action   The action to perform
@param args     Optional action arguments
@return true if action is handled
@see View#performAccessibilityAction(int, android.os.Bundle)"
	end

	class 1185463 "Properties"
	  visibility public 
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 4044215 "orientation"
	    public explicit_type "int"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    comment " @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_android_orientation "
	  end

	  attribute 4044343 "spanCount"
	    public explicit_type "int"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    comment " @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_spanCount "
	  end

	  attribute 4044471 "reverseLayout"
	    public explicit_type "boolean"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    comment " @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_reverseLayout "
	  end

	  attribute 4044599 "stackFromEnd"
	    public explicit_type "boolean"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    comment " @attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_stackFromEnd "
	  end
	end

	operation 29651639 "getProperties"
	  class_operation public return_type class_ref 1185463 // Properties
	  nparams 4
	    param inout name "context" type class_ref 128567 // Context
	    param inout name "attrs" type class_ref 130359 // AttributeSet
	    param in name "defStyleAttr" explicit_type "int"
	    param in name "defStyleRes" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Parse the xml attributes to get the most common properties used by layout managers.

@attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_android_orientation
@attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_spanCount
@attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_reverseLayout
@attr ref android.support.v7.recyclerview.R.styleable#RecyclerView_stackFromEnd

@return an object containing the properties as specified in the attrs."
	end

	operation 29651767 "setExactMeasureSpecsFrom"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29651895 "shouldMeasureTwice"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Internal API to allow LayoutManagers to be measured twice.
<p>
This is not public because LayoutManagers should be able to handle their layouts in one
pass but it is very convenient to make existing LayoutManagers support wrapping content
when both orientations are undefined.
<p>
This API will be removed after default LayoutManagers properly implement wrap content in
non-scroll orientation."
	end

	operation 29652023 "hasFlexibleChildInBothOrientations"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3417783 // mLayout (<unidirectional association>)
	relation 3417783 --->
	  a role_name "mLayout" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@VisibleForTesting
"
	    classrelation_ref 3417783 // mLayout (<unidirectional association>)
	  b parent class_ref 1182775 // LayoutManager
      end

      class 1182903 "RecyclerListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 29653943 "onViewRecycled"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "holder" type class_ref 1181495 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This method is called whenever the view in the ViewHolder is recycled.

RecyclerView calls this method right before clearing ViewHolder's internal data and
sending it to RecycledViewPool. This way, if ViewHolder was holding valid information
before being recycled, you can call {@link ViewHolder#getAdapterPosition()} to get
its adapter position.

@param holder The ViewHolder containing the view that was recycled"
	end
      end

      classrelation 3417911 // mRecyclerListener (<unidirectional association>)
	relation 3417911 --->
	  a role_name "mRecyclerListener" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3417911 // mRecyclerListener (<unidirectional association>)
	  b parent class_ref 1182903 // RecyclerListener
      end

      class 1183031 "ItemDecoration"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 29652151 "onDraw"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "c" type class_ref 135735 // Canvas
	    param inout name "parent" type class_ref 1176503 // RecyclerView
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Draw any appropriate decorations into the Canvas supplied to the RecyclerView.
Any content drawn by this method will be drawn before the item views are drawn,
and will thus appear underneath the views.

@param c Canvas to draw into
@param parent RecyclerView this ItemDecoration is drawing into
@param state The current state of RecyclerView"
	end

	operation 29652279 "onDraw"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "c" type class_ref 135735 // Canvas
	    param inout name "parent" type class_ref 1176503 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Deprecated
"
	  
	  
	  
	  comment "@deprecated
Override {@link #onDraw(Canvas, RecyclerView, RecyclerView.State)}"
	end

	operation 29652407 "onDrawOver"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "c" type class_ref 135735 // Canvas
	    param inout name "parent" type class_ref 1176503 // RecyclerView
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Draw any appropriate decorations into the Canvas supplied to the RecyclerView.
Any content drawn by this method will be drawn after the item views are drawn
and will thus appear over the views.

@param c Canvas to draw into
@param parent RecyclerView this ItemDecoration is drawing into
@param state The current state of RecyclerView."
	end

	operation 29652535 "onDrawOver"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "c" type class_ref 135735 // Canvas
	    param inout name "parent" type class_ref 1176503 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Deprecated
"
	  
	  
	  
	  comment "@deprecated
Override {@link #onDrawOver(Canvas, RecyclerView, RecyclerView.State)}"
	end

	operation 29652663 "getItemOffsets"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "outRect" type class_ref 135351 // Rect
	    param in name "itemPosition" explicit_type "int"
	    param inout name "parent" type class_ref 1176503 // RecyclerView
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Deprecated
"
	  
	  
	  
	  comment "@deprecated
Use {@link #getItemOffsets(Rect, View, RecyclerView, State)}"
	end

	operation 29652791 "getItemOffsets"
	  public explicit_return_type "void"
	  nparams 4
	    param inout name "outRect" type class_ref 135351 // Rect
	    param inout name "view" type class_ref 134455 // View
	    param inout name "parent" type class_ref 1176503 // RecyclerView
	    param inout name "state" type class_ref 1183671 // State
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Retrieve any offsets for the given item. Each field of <code>outRect</code> specifies
the number of pixels that the item view should be inset by, similar to padding or margin.
The default implementation sets the bounds of outRect to 0 and returns.

<p>
If this ItemDecoration does not affect the positioning of item views, it should set
all four fields of <code>outRect</code> (left, top, right, bottom) to zero
before returning.

<p>
If you need to access Adapter for additional data, you can call
{@link RecyclerView#getChildAdapterPosition(View)} to get the adapter position of the
View.

@param outRect Rect to receive the output.
@param view    The child view to decorate
@param parent  RecyclerView this ItemDecoration is decorating
@param state   The current state of RecyclerView."
	end
      end

      classrelation 3418039 // mItemDecorations (<unidirectional association>)
	relation 3418039 --->
	  stereotype "ArrayList"
	  a role_name "mItemDecorations" init_value " new ArrayList<>()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3418039 // mItemDecorations (<unidirectional association>)
	  b parent class_ref 1183031 // ItemDecoration
      end

      classrelation 3418167 // mOnItemTouchListeners (<unidirectional association>)
	relation 3418167 --->
	  stereotype "ArrayList"
	  a role_name "mOnItemTouchListeners" init_value "
            new ArrayList<>()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3418167 // mOnItemTouchListeners (<unidirectional association>)
	  b parent class_ref 1180983 // OnItemTouchListener
      end

      classrelation 3418295 // mActiveOnItemTouchListener (<unidirectional association>)
	relation 3418295 --->
	  a role_name "mActiveOnItemTouchListener" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3418295 // mActiveOnItemTouchListener (<unidirectional association>)
	  b parent class_ref 1180983 // OnItemTouchListener
      end

      attribute 4037559 "mIsAttached"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4037687 "mHasFixedSize"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4037815 "mFirstLayoutComplete"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@VisibleForTesting
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4037943 "mEatRequestLayout"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Counting lock to control whether we should ignore requestLayout calls from children or not."
      end

      attribute 4038071 "mLayoutRequestEaten"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4038199 "mLayoutFrozen"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4038327 "mIgnoreMotionEventTillDown"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4038455 "mEatenAccessibilityChangeFlags"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " binary OR of change events that were eaten during a layout or scroll."
      end

      attribute 4038583 "mAdapterUpdateDuringMeasure"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4038711 "mPostUpdatesOnAnimation"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3418423 // mAccessibilityManager (<unidirectional association>)
	relation 3418423 --->
	  a role_name "mAccessibilityManager" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3418423 // mAccessibilityManager (<unidirectional association>)
	  b parent class_ref 511927 // AccessibilityManager
      end

      class 1183159 "OnChildAttachStateChangeListener"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 29654071 "onChildViewAttachedToWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a view is attached to the RecyclerView.

@param view The View which is attached to the RecyclerView"
	end

	operation 29654199 "onChildViewDetachedFromWindow"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when a view is detached from RecyclerView.

@param view The View which is being detached from the RecyclerView"
	end
      end

      classrelation 3418551 // mOnChildAttachStateListeners (<unidirectional association>)
	relation 3418551 --->
	  stereotype "List"
	  a role_name "mOnChildAttachStateListeners" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3418551 // mOnChildAttachStateListeners (<unidirectional association>)
	  b parent class_ref 1183159 // OnChildAttachStateChangeListener
      end

      attribute 4038839 "mDataSetHasChangedAfterLayout"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Set to true when an adapter data set changed notification is received.
In that case, we cannot run any animations since we don't know what happened.
"
      end

      attribute 4038967 "mLayoutOrScrollCounter"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This variable is incremented during a dispatchLayout and/or scroll.
Some methods should not be called during these periods (e.g. adapter data change).
Doing so will create hard to find bugs so we better check it and throw an exception.

@see #assertInLayoutOrScroll(String)
@see #assertNotInLayoutOrScroll(String)
"
      end

      classrelation 3418679 // mLeftGlow (<unidirectional association>)
	relation 3418679 --->
	  a role_name "mLeftGlow" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3418679 // mLeftGlow (<unidirectional association>)
	  b parent class_ref 1183287 // EdgeEffectCompat
      end

      classrelation 3418807 // mTopGlow (<unidirectional association>)
	relation 3418807 --->
	  a role_name "mTopGlow" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3418807 // mTopGlow (<unidirectional association>)
	  b parent class_ref 1183287 // EdgeEffectCompat
      end

      classrelation 3418935 // mRightGlow (<unidirectional association>)
	relation 3418935 --->
	  a role_name "mRightGlow" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3418935 // mRightGlow (<unidirectional association>)
	  b parent class_ref 1183287 // EdgeEffectCompat
      end

      classrelation 3419063 // mBottomGlow (<unidirectional association>)
	relation 3419063 --->
	  a role_name "mBottomGlow" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419063 // mBottomGlow (<unidirectional association>)
	  b parent class_ref 1183287 // EdgeEffectCompat
      end

      class 1183415 "ItemAnimator"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 1183927 "ItemAnimatorListener"
	  visibility package stereotype "interface"
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	class 1184823 "ItemHolderInfo"
	  visibility package 
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end
      end

      classrelation 3419191 // mItemAnimator (<unidirectional association>)
	relation 3419191 --->
	  a role_name "mItemAnimator" init_value " new DefaultItemAnimator()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419191 // mItemAnimator (<unidirectional association>)
	  b parent class_ref 1183415 // ItemAnimator
      end

      attribute 4039095 "INVALID_POINTER"
	class_attribute const_attribute private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4039223 "SCROLL_STATE_IDLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The RecyclerView is not currently scrolling.
@see #getScrollState()
"
      end

      attribute 4039351 "SCROLL_STATE_DRAGGING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The RecyclerView is currently being dragged by outside input such as user touch input.
@see #getScrollState()
"
      end

      attribute 4039479 "SCROLL_STATE_SETTLING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The RecyclerView is currently animating to a final position while not under
outside control.
@see #getScrollState()
"
      end

      attribute 4039607 "mScrollState"
	private explicit_type "int"
	init_value " SCROLL_STATE_IDLE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Touch/scrolling handling"
      end

      attribute 4039735 "mScrollPointerId"
	private explicit_type "int"
	init_value " INVALID_POINTER"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3419319 // mVelocityTracker (<unidirectional association>)
	relation 3419319 --->
	  a role_name "mVelocityTracker" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419319 // mVelocityTracker (<unidirectional association>)
	  b parent class_ref 369975 // VelocityTracker
      end

      attribute 4039863 "mInitialTouchX"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4039991 "mInitialTouchY"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4040119 "mLastTouchX"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4040247 "mLastTouchY"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4040375 "mTouchSlop"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4040503 "mMinFlingVelocity"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4040631 "mMaxFlingVelocity"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4040759 "mScrollFactor"
	private explicit_type "float"
	init_value " Float.MIN_VALUE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This value is used when handling generic motion events."
      end

      attribute 4040887 "mPreserveFocusAfterLayout"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 1183543 "ViewFlinger"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3420727 // <realization>
	  relation 3420727 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 3420727 // <realization>
	    b parent class_ref 149943 // Runnable
	end

	attribute 4042039 "mLastFlingX"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4042167 "mLastFlingY"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 3420855 // mScroller (<unidirectional association>)
	  relation 3420855 --->
	    a role_name "mScroller" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3420855 // mScroller (<unidirectional association>)
	    b parent class_ref 1175479 // ScrollerCompat
	end

	classrelation 3420983 // mInterpolator (<unidirectional association>)
	  relation 3420983 --->
	    a role_name "mInterpolator" init_value " sQuinticInterpolator" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3420983 // mInterpolator (<unidirectional association>)
	    b parent class_ref 371511 // Interpolator
	end

	attribute 4042295 "mEatRunOnAnimationRequest"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " When set to true, postOnAnimation callbacks are delayed until the run method completes"
	end

	attribute 4042423 "mReSchedulePostAnimationCallback"
	  private explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Tracks if postAnimationCallback should be re-attached when it is done"
	end

	operation 29619383 "ViewFlinger"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29619511 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29619639 "disableRunOnAnimationRequests"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29619767 "enableRunOnAnimationRequests"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29619895 "postOnAnimation"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29620023 "fling"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "velocityX" explicit_type "int"
	    param in name "velocityY" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29620151 "smoothScrollBy"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "dx" explicit_type "int"
	    param in name "dy" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29620279 "smoothScrollBy"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "dx" explicit_type "int"
	    param in name "dy" explicit_type "int"
	    param in name "vx" explicit_type "int"
	    param in name "vy" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29620407 "distanceInfluenceForSnapDuration"
	  private explicit_return_type "float"
	  nparams 1
	    param in name "f" explicit_type "float"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29620535 "computeScrollDuration"
	  private explicit_return_type "int"
	  nparams 4
	    param in name "dx" explicit_type "int"
	    param in name "dy" explicit_type "int"
	    param in name "vx" explicit_type "int"
	    param in name "vy" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29620663 "smoothScrollBy"
	  public explicit_return_type "void"
	  nparams 3
	    param in name "dx" explicit_type "int"
	    param in name "dy" explicit_type "int"
	    param in name "duration" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29620791 "smoothScrollBy"
	  public explicit_return_type "void"
	  nparams 4
	    param in name "dx" explicit_type "int"
	    param in name "dy" explicit_type "int"
	    param in name "duration" explicit_type "int"
	    param inout name "interpolator" type class_ref 371511 // Interpolator
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29620919 "stop"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3419447 // mViewFlinger (<unidirectional association>)
	relation 3419447 --->
	  a role_name "mViewFlinger" init_value " new ViewFlinger()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419447 // mViewFlinger (<unidirectional association>)
	  b parent class_ref 1183543 // ViewFlinger
      end

      class 1183671 "State"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 3419575 // mState (<unidirectional association>)
	relation 3419575 --->
	  a role_name "mState" init_value " new State()" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419575 // mState (<unidirectional association>)
	  b parent class_ref 1183671 // State
      end

      class 1183799 "OnScrollListener"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 29653687 "onScrollStateChanged"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	    param in name "newState" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Callback method to be invoked when RecyclerView's scroll state changes.

@param recyclerView The RecyclerView whose scroll state has changed.
@param newState     The updated scroll state. One of {@link #SCROLL_STATE_IDLE},
                    {@link #SCROLL_STATE_DRAGGING} or {@link #SCROLL_STATE_SETTLING}."
	end

	operation 29653815 "onScrolled"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "recyclerView" type class_ref 1176503 // RecyclerView
	    param in name "dx" explicit_type "int"
	    param in name "dy" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Callback method to be invoked when the RecyclerView has been scrolled. This will be
called after the scroll has completed.
<p>
This callback will also be called if visible item range changes after a layout
calculation. In that case, dx and dy will be 0.

@param recyclerView The RecyclerView which scrolled.
@param dx The amount of horizontal scroll.
@param dy The amount of vertical scroll."
	end
      end

      classrelation 3419703 // mScrollListener (<unidirectional association>)
	relation 3419703 --->
	  a role_name "mScrollListener" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419703 // mScrollListener (<unidirectional association>)
	  b parent class_ref 1183799 // OnScrollListener
      end

      classrelation 3419831 // mScrollListeners (<unidirectional association>)
	relation 3419831 --->
	  stereotype "List"
	  a role_name "mScrollListeners" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3419831 // mScrollListeners (<unidirectional association>)
	  b parent class_ref 1183799 // OnScrollListener
      end

      attribute 4041015 "mItemsAddedOrRemoved"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " For use in item animations"
      end

      attribute 4041143 "mItemsChanged"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3419959 // mItemAnimatorListener (<unidirectional association>)
	relation 3419959 --->
	  a role_name "mItemAnimatorListener" init_value "
            new ItemAnimatorRestoreListener()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3419959 // mItemAnimatorListener (<unidirectional association>)
	  b parent class_ref 1183927 // ItemAnimatorListener
      end

      attribute 4041271 "mPostedAnimatorRunner"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3420087 // mAccessibilityDelegate (<unidirectional association>)
	relation 3420087 --->
	  a role_name "mAccessibilityDelegate" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3420087 // mAccessibilityDelegate (<unidirectional association>)
	  b parent class_ref 1184055 // RecyclerViewAccessibilityDelegate
      end

      class 1184183 "ChildDrawingOrderCallback"
	visibility package stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 3420215 // mChildDrawingOrderCallback (<unidirectional association>)
	relation 3420215 --->
	  a role_name "mChildDrawingOrderCallback" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3420215 // mChildDrawingOrderCallback (<unidirectional association>)
	  b parent class_ref 1184183 // ChildDrawingOrderCallback
      end

      attribute 4041399 "mMinMaxLayoutPositions"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " simple array to keep min and max child position during a layout calculation
 preserved not to create a new one in each layout pass"
      end

      classrelation 3420343 // mScrollingChildHelper (<unidirectional association>)
	relation 3420343 --->
	  a role_name "mScrollingChildHelper" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3420343 // mScrollingChildHelper (<unidirectional association>)
	  b parent class_ref 1184311 // NestedScrollingChildHelper
      end

      attribute 4041527 "mScrollOffset"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4041655 "mScrollConsumed"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4041783 "mNestedOffsets"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int[2]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4041911 "mItemAnimatorRunner"
	private explicit_type "Runnable"
	init_value " new Runnable() {
        @Override
        public void run() {
            if (mItemAnimator != null) {
                mItemAnimator.runPendingAnimations();
            }
            mPostedAnimatorRunner = false;
        }
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3420471 // sQuinticInterpolator (<unidirectional association>)
	relation 3420471 --->
	  a role_name "sQuinticInterpolator" init_value " new Interpolator() {
        public float getInterpolation(float t) {
            t -= 1.0f;
            return t * t * t * t * t + 1.0f;
        }
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3420471 // sQuinticInterpolator (<unidirectional association>)
	  b parent class_ref 371511 // Interpolator
      end

      classrelation 3420599 // mViewInfoProcessCallback (<unidirectional association>)
	relation 3420599 --->
	  a role_name "mViewInfoProcessCallback" init_value "
            new ViewInfoStore.ProcessCallback() {
        @Override
        public void processDisappeared(ViewHolder viewHolder, @NonNull ItemHolderInfo info,
                @Nullable ItemHolderInfo postInfo) {
            mRecycler.unscrapView(viewHolder);
            animateDisappearance(viewHolder, info, postInfo);
        }
        @Override
        public void processAppeared(ViewHolder viewHolder,
                ItemHolderInfo preInfo, ItemHolderInfo info) {
            animateAppearance(viewHolder, preInfo, info);
        }

        @Override
        public void processPersistent(ViewHolder viewHolder,
                @NonNull ItemHolderInfo preInfo, @NonNull ItemHolderInfo postInfo) {
            viewHolder.setIsRecyclable(false);
            if (mDataSetHasChangedAfterLayout) {
                // since it was rebound, use change instead as we'll be mapping them from
                // stable ids. If stable ids were false, we would not be running any
                // animations
                if (mItemAnimator.animateChange(viewHolder, viewHolder, preInfo, postInfo)) {
                    postAnimationRunner();
                }
            } else if (mItemAnimator.animatePersistence(viewHolder, preInfo, postInfo)) {
                postAnimationRunner();
            }
        }
        @Override
        public void unused(ViewHolder viewHolder) {
            mLayout.removeAndRecycleView(viewHolder.itemView, mRecycler);
        }
    }" const_relation private
	    comment "
The callback to convert view info diffs into animations.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3420599 // mViewInfoProcessCallback (<unidirectional association>)
	  b parent class_ref 1184439 // ProcessCallback
      end

      operation 29596343 "RecyclerView"
	public explicit_return_type ""
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29596471 "RecyclerView"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, @Nullable ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29596599 "RecyclerView"
	public explicit_return_type ""
	nparams 3
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param in name "defStyle" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, @Nullable ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29596727 "getCompatAccessibilityDelegate"
	public return_type class_ref 1184055 // RecyclerViewAccessibilityDelegate
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the accessibility delegate compatibility implementation used by the RecyclerView.
@return An instance of AccessibilityDelegateCompat used by RecyclerView"
      end

      operation 29596855 "setAccessibilityDelegateCompat"
	public explicit_return_type "void"
	nparams 1
	  param inout name "accessibilityDelegate" type class_ref 1184055 // RecyclerViewAccessibilityDelegate
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the accessibility delegate compatibility implementation used by RecyclerView.
@param accessibilityDelegate The accessibility delegate to be used by RecyclerView."
      end

      operation 29596983 "createLayoutManager"
	private explicit_return_type "void"
	nparams 5
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "className" type class_ref 129591 // String
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param in name "defStyleAttr" explicit_type "int"
	  param in name "defStyleRes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiate and set a LayoutManager, if specified in the attributes."
      end

      operation 29597111 "getFullClassName"
	private return_type class_ref 129591 // String
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "className" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29597239 "initChildrenHelper"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29597367 "initAdapterManager"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29597495 "setHasFixedSize"
	public explicit_return_type "void"
	nparams 1
	  param inout name "hasFixedSize" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "RecyclerView can perform several optimizations if it can know in advance that RecyclerView's
size is not affected by the adapter contents. RecyclerView can still change its size based
on other factors (e.g. its parent's size) but this size calculation cannot depend on the
size of its children or contents of its adapter (except the number of items in the adapter).
<p>
If your use of RecyclerView falls into this category, set this to {@code true}. It will allow
RecyclerView to avoid invalidating the whole layout when its adapter contents change.

@param hasFixedSize true if adapter changes cannot affect the size of the RecyclerView."
      end

      operation 29597623 "hasFixedSize"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if the app has specified that changes in adapter content cannot change
the size of the RecyclerView itself."
      end

      operation 29597751 "setClipToPadding"
	public explicit_return_type "void"
	nparams 1
	  param inout name "clipToPadding" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29597879 "setScrollingTouchSlop"
	public explicit_return_type "void"
	nparams 1
	  param in name "slopConstant" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Configure the scrolling touch slop for a specific use case.

Set up the RecyclerView's scrolling motion threshold based on common usages.
Valid arguments are {@link #TOUCH_SLOP_DEFAULT} and {@link #TOUCH_SLOP_PAGING}.

@param slopConstant One of the <code>TOUCH_SLOP_</code> constants representing
                    the intended usage of this RecyclerView"
      end

      operation 29598007 "swapAdapter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "adapter" type class_ref 1182647 // Adapter
	  param inout name "removeAndRecycleExistingViews" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Swaps the current adapter with the provided one. It is similar to
{@link #setAdapter(Adapter)} but assumes existing adapter and the new adapter uses the same
{@link ViewHolder} and does not clear the RecycledViewPool.
<p>
Note that it still calls onAdapterChanged callbacks.

@param adapter The new adapter to set, or null to set no adapter.
@param removeAndRecycleExistingViews If set to true, RecyclerView will recycle all existing
                                     Views. If adapters have stable ids and/or you want to
                                     animate the disappearing views, you may prefer to set
                                     this to false.
@see #setAdapter(Adapter)"
      end

      operation 29598135 "setAdapter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "adapter" type class_ref 1182647 // Adapter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a new adapter to provide child views on demand.
<p>
When adapter is changed, all existing views are recycled back to the pool. If the pool has
only one adapter, it will be cleared.

@param adapter The new adapter to set, or null to set no adapter.
@see #swapAdapter(Adapter, boolean)"
      end

      operation 29598263 "setAdapterInternal"
	private explicit_return_type "void"
	nparams 3
	  param inout name "adapter" type class_ref 1182647 // Adapter
	  param inout name "compatibleWithPrevious" explicit_type "boolean"
	  param inout name "removeAndRecycleViews" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the current adapter with the new one and triggers listeners.
@param adapter The new adapter
@param compatibleWithPrevious If true, the new adapter is using the same View Holders and
                              item types with the current adapter (helps us avoid cache
                              invalidation).
@param removeAndRecycleViews  If true, we'll remove and recycle all existing views. If
                              compatibleWithPrevious is false, this parameter is ignored."
      end

      operation 29598391 "getAdapter"
	public return_type class_ref 1182647 // Adapter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the previously set adapter or null if no adapter is set.

@return The previously set adapter
@see #setAdapter(Adapter)"
      end

      operation 29598519 "setRecyclerListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1182903 // RecyclerListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register a listener that will be notified whenever a child view is recycled.

<p>This listener will be called when a LayoutManager or the RecyclerView decides
that a child view is no longer needed. If an application associates expensive
or heavyweight data with item views, this may be a good place to release
or free those resources.</p>

@param listener Listener to register, or null to clear"
      end

      operation 29598647 "getBaseline"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Return the offset of the RecyclerView's text baseline from the its top
boundary. If the LayoutManager of this RecyclerView does not support baseline alignment,
this method returns -1.</p>

@return the offset of the baseline within the RecyclerView's bounds or -1
        if baseline alignment is not supported"
      end

      operation 29598775 "addOnChildAttachStateChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1183159 // OnChildAttachStateChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register a listener that will be notified whenever a child view is attached to or detached
from RecyclerView.

<p>This listener will be called when a LayoutManager or the RecyclerView decides
that a child view is no longer needed. If an application associates expensive
or heavyweight data with item views, this may be a good place to release
or free those resources.</p>

@param listener Listener to register"
      end

      operation 29598903 "removeOnChildAttachStateChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1183159 // OnChildAttachStateChangeListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the provided listener from child attached state listeners list.

@param listener Listener to unregister"
      end

      operation 29599031 "clearOnChildAttachStateChangeListeners"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all listeners that were added via
{@link #addOnChildAttachStateChangeListener(OnChildAttachStateChangeListener)}."
      end

      operation 29599159 "setLayoutManager"
	public explicit_return_type "void"
	nparams 1
	  param inout name "layout" type class_ref 1182775 // LayoutManager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the {@link LayoutManager} that this RecyclerView will use.

<p>In contrast to other adapter-backed views such as {@link android.widget.ListView}
or {@link android.widget.GridView}, RecyclerView allows client code to provide custom
layout arrangements for child views. These arrangements are controlled by the
{@link LayoutManager}. A LayoutManager must be provided for RecyclerView to function.</p>

<p>Several default strategies are provided for common uses such as lists and grids.</p>

@param layout LayoutManager to use"
      end

      operation 29599287 "onSaveInstanceState"
	protected return_type class_ref 137399 // Parcelable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29599415 "onRestoreInstanceState"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "state" type class_ref 137399 // Parcelable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29599543 "dispatchSaveInstanceState"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "container" type class_ref 139575 // SparseArray
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Parcelable> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Override to prevent freezing of any views created by the adapter."
      end

      operation 29599671 "dispatchRestoreInstanceState"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "container" type class_ref 139575 // SparseArray
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Parcelable> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Override to prevent thawing of any views created by the adapter."
      end

      operation 29599799 "addAnimatingView"
	private explicit_return_type "void"
	nparams 1
	  param inout name "viewHolder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a view to the animatingViews list.
mAnimatingViews holds the child views that are currently being kept around
purely for the purpose of being animated out of view. They are drawn as a regular
part of the child list of the RecyclerView, but they are invisible to the LayoutManager
as they are managed separately from the regular child views.
@param viewHolder The ViewHolder to be removed"
      end

      operation 29599927 "removeAnimatingView"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "view" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a view from the animatingViews list.
@param view The view to be removed
@see #addAnimatingView(RecyclerView.ViewHolder)
@return true if an animating view is removed"
      end

      operation 29600055 "getLayoutManager"
	public return_type class_ref 1182775 // LayoutManager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the {@link LayoutManager} currently responsible for
layout policy for this RecyclerView.

@return The currently bound LayoutManager"
      end

      class 1184567 "RecycledViewPool"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3421239 // mScrap (<unidirectional association>)
	  relation 3421239 --->
	    a role_name "mScrap" init_value "
                new SparseArray<ArrayList<ViewHolder>>()" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ArrayList<ViewHolder>> ${name}${value};
"
	      classrelation_ref 3421239 // mScrap (<unidirectional association>)
	    b parent class_ref 139575 // SparseArray
	end

	classrelation 3421367 // mMaxScrap (<unidirectional association>)
	  relation 3421367 --->
	    a role_name "mMaxScrap" init_value " new SparseIntArray()" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3421367 // mMaxScrap (<unidirectional association>)
	    b parent class_ref 138423 // SparseIntArray
	end

	attribute 4042551 "mAttachCount"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4042679 "DEFAULT_MAX_SCRAP"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 5"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 29621943 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29622071 "setMaxRecycledViews"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "viewType" explicit_type "int"
	    param in name "max" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29622199 "getRecycledView"
	  public return_type class_ref 1181495 // ViewHolder
	  nparams 1
	    param in name "viewType" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29622327 "size"
	  package explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29622455 "putRecycledView"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "scrap" type class_ref 1181495 // ViewHolder
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29622583 "attach"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "adapter" type class_ref 1182647 // Adapter
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29622711 "detach"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29622839 "onAdapterChanged"
	  package explicit_return_type "void"
	  nparams 3
	    param inout name "oldAdapter" type class_ref 1182647 // Adapter
	    param inout name "newAdapter" type class_ref 1182647 // Adapter
	    param inout name "compatibleWithPrevious" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Detaches the old adapter and attaches the new one.
<p>
RecycledViewPool will clear its cache if it has only one adapter attached and the new
adapter uses a different ViewHolder than the oldAdapter.

@param oldAdapter The previous adapter instance. Will be detached.
@param newAdapter The new adapter instance. Will be attached.
@param compatibleWithPrevious True if both oldAdapter and newAdapter are using the same
                              ViewHolder and view types."
	end

	operation 29622967 "getScrapHeapForType"
	  private return_type class_ref 1181495 // ViewHolder
	  nparams 1
	    param in name "viewType" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}ArrayList<${type}> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 29600183 "getRecycledViewPool"
	public return_type class_ref 1184567 // RecycledViewPool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve this RecyclerView's {@link RecycledViewPool}. This method will never return null;
if no pool is set for this view a new one will be created. See
{@link #setRecycledViewPool(RecycledViewPool) setRecycledViewPool} for more information.

@return The pool used to store recycled item views for reuse.
@see #setRecycledViewPool(RecycledViewPool)"
      end

      operation 29600311 "setRecycledViewPool"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pool" type class_ref 1184567 // RecycledViewPool
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Recycled view pools allow multiple RecyclerViews to share a common pool of scrap views.
This can be useful if you have multiple RecyclerViews with adapters that use the same
view types, for example if you have several data sets with the same kinds of item views
displayed by a {@link android.support.v4.view.ViewPager ViewPager}.

@param pool Pool to set. If this parameter is null a new pool will be created and used."
      end

      operation 29600439 "setViewCacheExtension"
	public explicit_return_type "void"
	nparams 1
	  param inout name "extension" type class_ref 1184695 // ViewCacheExtension
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a new {@link ViewCacheExtension} to be used by the Recycler.

@param extension ViewCacheExtension to be used or null if you want to clear the existing one.

@see {@link ViewCacheExtension#getViewForPositionAndType(Recycler, int, int)}"
      end

      class 1184695 "ViewCacheExtension"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 29628087 "getViewForPositionAndType"
	  abstract public return_type class_ref 134455 // View
	  nparams 3
	    param inout name "recycler" type class_ref 1182007 // Recycler
	    param in name "position" explicit_type "int"
	    param in name "type" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a View that can be binded to the given Adapter position.
<p>
This method should <b>not</b> create a new View. Instead, it is expected to return
an already created View that can be re-used for the given type and position.
If the View is marked as ignored, it should first call
{@link LayoutManager#stopIgnoringView(View)} before returning the View.
<p>
RecyclerView will re-bind the returned View to the position if necessary.

@param recycler The Recycler that can be used to bind the View
@param position The adapter position
@param type     The type of the View, defined by adapter
@return A View that is bound to the given position or NULL if there is no View to re-use
@see LayoutManager#ignoreView(View)"
	end
      end

      operation 29600567 "setItemViewCacheSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the number of offscreen views to retain before adding them to the potentially shared
{@link #getRecycledViewPool() recycled view pool}.

<p>The offscreen view cache stays aware of changes in the attached adapter, allowing
a LayoutManager to reuse those views unmodified without needing to return to the adapter
to rebind them.</p>

@param size Number of views to cache offscreen before returning them to the general
            recycled view pool"
      end

      operation 29600695 "getScrollState"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the current scrolling state of the RecyclerView.

@return {@link #SCROLL_STATE_IDLE}, {@link #SCROLL_STATE_DRAGGING} or
{@link #SCROLL_STATE_SETTLING}"
      end

      operation 29600823 "setScrollState"
	private explicit_return_type "void"
	nparams 1
	  param in name "state" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29600951 "addItemDecoration"
	public explicit_return_type "void"
	nparams 2
	  param inout name "decor" type class_ref 1183031 // ItemDecoration
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an {@link ItemDecoration} to this RecyclerView. Item decorations can
affect both measurement and drawing of individual item views.

<p>Item decorations are ordered. Decorations placed earlier in the list will
be run/queried/drawn first for their effects on item views. Padding added to views
will be nested; a padding added by an earlier decoration will mean further
item decorations in the list will be asked to draw/pad within the previous decoration's
given area.</p>

@param decor Decoration to add
@param index Position in the decoration chain to insert this decoration at. If this value
             is negative the decoration will be added at the end."
      end

      operation 29601079 "addItemDecoration"
	public explicit_return_type "void"
	nparams 1
	  param inout name "decor" type class_ref 1183031 // ItemDecoration
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an {@link ItemDecoration} to this RecyclerView. Item decorations can
affect both measurement and drawing of individual item views.

<p>Item decorations are ordered. Decorations placed earlier in the list will
be run/queried/drawn first for their effects on item views. Padding added to views
will be nested; a padding added by an earlier decoration will mean further
item decorations in the list will be asked to draw/pad within the previous decoration's
given area.</p>

@param decor Decoration to add"
      end

      operation 29601207 "removeItemDecoration"
	public explicit_return_type "void"
	nparams 1
	  param inout name "decor" type class_ref 1183031 // ItemDecoration
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove an {@link ItemDecoration} from this RecyclerView.

<p>The given decoration will no longer impact the measurement and drawing of
item views.</p>

@param decor Decoration to remove
@see #addItemDecoration(ItemDecoration)"
      end

      operation 29601335 "setChildDrawingOrderCallback"
	public explicit_return_type "void"
	nparams 1
	  param inout name "childDrawingOrderCallback" type class_ref 1184183 // ChildDrawingOrderCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@link ChildDrawingOrderCallback} to be used for drawing children.
<p>
See {@link ViewGroup#getChildDrawingOrder(int, int)} for details. Calling this method will
always call {@link ViewGroup#setChildrenDrawingOrderEnabled(boolean)}. The parameter will be
true if childDrawingOrderCallback is not null, false otherwise.
<p>
Note that child drawing order may be overridden by View's elevation.

@param childDrawingOrderCallback The ChildDrawingOrderCallback to be used by the drawing
                                 system."
      end

      operation 29601463 "setOnScrollListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1183799 // OnScrollListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Set a listener that will be notified of any changes in scroll state or position.

@param listener Listener to set or null to clear

@deprecated Use {@link #addOnScrollListener(OnScrollListener)} and
            {@link #removeOnScrollListener(OnScrollListener)}"
      end

      operation 29601591 "addOnScrollListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1183799 // OnScrollListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a listener that will be notified of any changes in scroll state or position.

<p>Components that add a listener should take care to remove it when finished.
Other components that take ownership of a view may call {@link #clearOnScrollListeners()}
to remove all attached listeners.</p>

@param listener listener to set or null to clear"
      end

      operation 29601719 "removeOnScrollListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1183799 // OnScrollListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a listener that was notified of any changes in scroll state or position.

@param listener listener to set or null to clear"
      end

      operation 29601847 "clearOnScrollListeners"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all secondary listener that were notified of any changes in scroll state or position."
      end

      operation 29601975 "scrollToPosition"
	public explicit_return_type "void"
	nparams 1
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to scroll to a certain position.

RecyclerView does not implement scrolling logic, rather forwards the call to
{@link android.support.v7.widget.RecyclerView.LayoutManager#scrollToPosition(int)}
@param position Scroll to this adapter position
@see android.support.v7.widget.RecyclerView.LayoutManager#scrollToPosition(int)"
      end

      operation 29602103 "jumpToPositionForSmoothScroller"
	private explicit_return_type "void"
	nparams 1
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29602231 "smoothScrollToPosition"
	public explicit_return_type "void"
	nparams 1
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts a smooth scroll to an adapter position.
<p>
To support smooth scrolling, you must override
{@link LayoutManager#smoothScrollToPosition(RecyclerView, State, int)} and create a
{@link SmoothScroller}.
<p>
{@link LayoutManager} is responsible for creating the actual scroll action. If you want to
provide a custom smooth scroll logic, override
{@link LayoutManager#smoothScrollToPosition(RecyclerView, State, int)} in your
LayoutManager.

@param position The adapter position to scroll to
@see LayoutManager#smoothScrollToPosition(RecyclerView, State, int)"
      end

      operation 29602359 "scrollTo"
	public explicit_return_type "void"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29602487 "scrollBy"
	public explicit_return_type "void"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29602615 "consumePendingUpdateOperations"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Helper method reflect data changes to the state.
<p>
Adapter changes during a scroll may trigger a crash because scroll assumes no data change
but data actually changed.
<p>
This method consumes all deferred changes to avoid that case."
      end

      operation 29602743 "hasUpdatedView"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return True if an existing view holder needs to be updated"
      end

      operation 29602871 "scrollByInternal"
	package explicit_return_type "boolean"
	nparams 3
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param inout name "ev" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does not perform bounds checking. Used by internal methods that have already validated input.
<p>
It also reports any unused scroll request to the related EdgeEffect.

@param x The amount of horizontal scroll request
@param y The amount of vertical scroll request
@param ev The originating MotionEvent, or null if not from a touch event.

@return Whether any scroll was consumed in either direction."
      end

      operation 29602999 "computeHorizontalScrollOffset"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal
range. This value is used to compute the length of the thumb within the scrollbar's track.
</p>

<p>The range is expressed in arbitrary units that must be the same as the units used by
{@link #computeHorizontalScrollRange()} and {@link #computeHorizontalScrollExtent()}.</p>

<p>Default implementation returns 0.</p>

<p>If you want to support scroll bars, override
{@link RecyclerView.LayoutManager#computeHorizontalScrollOffset(RecyclerView.State)} in your
LayoutManager. </p>

@return The horizontal offset of the scrollbar's thumb
@see android.support.v7.widget.RecyclerView.LayoutManager#computeHorizontalScrollOffset
(RecyclerView.State)"
      end

      operation 29603127 "computeHorizontalScrollExtent"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Compute the horizontal extent of the horizontal scrollbar's thumb within the
horizontal range. This value is used to compute the length of the thumb within the
scrollbar's track.</p>

<p>The range is expressed in arbitrary units that must be the same as the units used by
{@link #computeHorizontalScrollRange()} and {@link #computeHorizontalScrollOffset()}.</p>

<p>Default implementation returns 0.</p>

<p>If you want to support scroll bars, override
{@link RecyclerView.LayoutManager#computeHorizontalScrollExtent(RecyclerView.State)} in your
LayoutManager.</p>

@return The horizontal extent of the scrollbar's thumb
@see RecyclerView.LayoutManager#computeHorizontalScrollExtent(RecyclerView.State)"
      end

      operation 29603255 "computeHorizontalScrollRange"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Compute the horizontal range that the horizontal scrollbar represents.</p>

<p>The range is expressed in arbitrary units that must be the same as the units used by
{@link #computeHorizontalScrollExtent()} and {@link #computeHorizontalScrollOffset()}.</p>

<p>Default implementation returns 0.</p>

<p>If you want to support scroll bars, override
{@link RecyclerView.LayoutManager#computeHorizontalScrollRange(RecyclerView.State)} in your
LayoutManager.</p>

@return The total horizontal range represented by the vertical scrollbar
@see RecyclerView.LayoutManager#computeHorizontalScrollRange(RecyclerView.State)"
      end

      operation 29603383 "computeVerticalScrollOffset"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Compute the vertical offset of the vertical scrollbar's thumb within the vertical range.
This value is used to compute the length of the thumb within the scrollbar's track. </p>

<p>The range is expressed in arbitrary units that must be the same as the units used by
{@link #computeVerticalScrollRange()} and {@link #computeVerticalScrollExtent()}.</p>

<p>Default implementation returns 0.</p>

<p>If you want to support scroll bars, override
{@link RecyclerView.LayoutManager#computeVerticalScrollOffset(RecyclerView.State)} in your
LayoutManager.</p>

@return The vertical offset of the scrollbar's thumb
@see android.support.v7.widget.RecyclerView.LayoutManager#computeVerticalScrollOffset
(RecyclerView.State)"
      end

      operation 29603511 "computeVerticalScrollExtent"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Compute the vertical extent of the vertical scrollbar's thumb within the vertical range.
This value is used to compute the length of the thumb within the scrollbar's track.</p>

<p>The range is expressed in arbitrary units that must be the same as the units used by
{@link #computeVerticalScrollRange()} and {@link #computeVerticalScrollOffset()}.</p>

<p>Default implementation returns 0.</p>

<p>If you want to support scroll bars, override
{@link RecyclerView.LayoutManager#computeVerticalScrollExtent(RecyclerView.State)} in your
LayoutManager.</p>

@return The vertical extent of the scrollbar's thumb
@see RecyclerView.LayoutManager#computeVerticalScrollExtent(RecyclerView.State)"
      end

      operation 29603639 "computeVerticalScrollRange"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Compute the vertical range that the vertical scrollbar represents.</p>

<p>The range is expressed in arbitrary units that must be the same as the units used by
{@link #computeVerticalScrollExtent()} and {@link #computeVerticalScrollOffset()}.</p>

<p>Default implementation returns 0.</p>

<p>If you want to support scroll bars, override
{@link RecyclerView.LayoutManager#computeVerticalScrollRange(RecyclerView.State)} in your
LayoutManager.</p>

@return The total vertical range represented by the vertical scrollbar
@see RecyclerView.LayoutManager#computeVerticalScrollRange(RecyclerView.State)"
      end

      operation 29603767 "eatRequestLayout"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29603895 "resumeRequestLayout"
	package explicit_return_type "void"
	nparams 1
	  param inout name "performLayoutChildren" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29604023 "setLayoutFrozen"
	public explicit_return_type "void"
	nparams 1
	  param inout name "frozen" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable or disable layout and scroll.  After <code>setLayoutFrozen(true)</code> is called,
Layout requests will be postponed until <code>setLayoutFrozen(false)</code> is called;
child views are not updated when RecyclerView is frozen, {@link #smoothScrollBy(int, int)},
{@link #scrollBy(int, int)}, {@link #scrollToPosition(int)} and
{@link #smoothScrollToPosition(int)} are dropped; TouchEvents and GenericMotionEvents are
dropped; {@link LayoutManager#onFocusSearchFailed(View, int, Recycler, State)} will not be
called.

<p>
<code>setLayoutFrozen(true)</code> does not prevent app from directly calling {@link
LayoutManager#scrollToPosition(int)}, {@link LayoutManager#smoothScrollToPosition(
RecyclerView, State, int)}.
<p>
{@link #setAdapter(Adapter)} and {@link #swapAdapter(Adapter, boolean)} will automatically
stop frozen.
<p>
Note: Running ItemAnimator is not stopped automatically,  it's caller's
responsibility to call ItemAnimator.end().

@param frozen   true to freeze layout and scroll, false to re-enable."
      end

      operation 29604151 "isLayoutFrozen"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if layout and scroll are frozen.

@return true if layout and scroll are frozen
@see #setLayoutFrozen(boolean)"
      end

      operation 29604279 "smoothScrollBy"
	public explicit_return_type "void"
	nparams 2
	  param in name "dx" explicit_type "int"
	  param in name "dy" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Animate a scroll by the given amount of pixels along either axis.

@param dx Pixels to scroll horizontally
@param dy Pixels to scroll vertically"
      end

      operation 29604407 "fling"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "velocityX" explicit_type "int"
	  param in name "velocityY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Begin a standard fling with an initial velocity along each axis in pixels per second.
If the velocity given is below the system-defined minimum this method will return false
and no fling will occur.

@param velocityX Initial horizontal velocity in pixels per second
@param velocityY Initial vertical velocity in pixels per second
@return true if the fling was started, false if the velocity was too low to fling or
LayoutManager does not support scrolling in the axis fling is issued.

@see LayoutManager#canScrollVertically()
@see LayoutManager#canScrollHorizontally()"
      end

      operation 29604535 "stopScroll"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stop any current scroll in progress, such as one started by
{@link #smoothScrollBy(int, int)}, {@link #fling(int, int)} or a touch-initiated fling."
      end

      operation 29604663 "stopScrollersInternal"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Similar to {@link #stopScroll()} but does not set the state."
      end

      operation 29604791 "getMinFlingVelocity"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum velocity to start a fling.

@return The minimum velocity to start a fling"
      end

      operation 29604919 "getMaxFlingVelocity"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum fling velocity used by this RecyclerView.

@return The maximum fling velocity used by this RecyclerView."
      end

      operation 29605047 "pullGlows"
	private explicit_return_type "void"
	nparams 4
	  param in name "x" explicit_type "float"
	  param in name "overscrollX" explicit_type "float"
	  param in name "y" explicit_type "float"
	  param in name "overscrollY" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Apply a pull to relevant overscroll glow effects"
      end

      operation 29605175 "releaseGlows"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29605303 "considerReleasingGlowsOnScroll"
	private explicit_return_type "void"
	nparams 2
	  param in name "dx" explicit_type "int"
	  param in name "dy" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29605431 "absorbGlows"
	package explicit_return_type "void"
	nparams 2
	  param in name "velocityX" explicit_type "int"
	  param in name "velocityY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29605559 "ensureLeftGlow"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29605687 "ensureRightGlow"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29605815 "ensureTopGlow"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29605943 "ensureBottomGlow"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29606071 "invalidateGlows"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29606199 "focusSearch"
	public return_type class_ref 134455 // View
	nparams 2
	  param inout name "focused" type class_ref 134455 // View
	  param in name "direction" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Since RecyclerView is a collection ViewGroup that includes virtual children (items that are
in the Adapter but not visible in the UI), it employs a more involved focus search strategy
that differs from other ViewGroups.
<p>
It first does a focus search within the RecyclerView. If this search finds a View that is in
the focus direction with respect to the currently focused View, RecyclerView returns that
child as the next focus target. When it cannot find such child, it calls
{@link LayoutManager#onFocusSearchFailed(View, int, Recycler, State)} to layout more Views
in the focus search direction. If LayoutManager adds a View that matches the
focus search criteria, it will be returned as the focus search result. Otherwise,
RecyclerView will call parent to handle the focus search like a regular ViewGroup.
<p>
When the direction is {@link View#FOCUS_FORWARD} or {@link View#FOCUS_BACKWARD}, a View that
is not in the focus direction is still valid focus target which may not be the desired
behavior if the Adapter has more children in the focus direction. To handle this case,
RecyclerView converts the focus direction to an absolute direction and makes a preliminary
focus search in that direction. If there are no Views to gain focus, it will call
{@link LayoutManager#onFocusSearchFailed(View, int, Recycler, State)} before running a
focus search with the original (relative) direction. This allows RecyclerView to provide
better candidates to the focus search while still allowing the view system to take focus from
the RecyclerView and give it to a more suitable child if such child exists.

@param focused The view that currently has focus
@param direction One of {@link View#FOCUS_UP}, {@link View#FOCUS_DOWN},
{@link View#FOCUS_LEFT}, {@link View#FOCUS_RIGHT}, {@link View#FOCUS_FORWARD},
{@link View#FOCUS_BACKWARD} or 0 for not applicable.

@return A new View that can be the next focus after the focused View"
      end

      operation 29606327 "isPreferredNextFocus"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "focused" type class_ref 134455 // View
	  param inout name "next" type class_ref 134455 // View
	  param in name "direction" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the new focus candidate is a good enough candidate such that RecyclerView will
assign it as the next focus View instead of letting view hierarchy decide.
A good candidate means a View that is aligned in the focus direction wrt the focused View
and is not the RecyclerView itself.
When this method returns false, RecyclerView will let the parent make the decision so the
same View may still get the focus as a result of that search."
      end

      operation 29606455 "isPreferredNextFocusAbsolute"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "focused" type class_ref 134455 // View
	  param inout name "next" type class_ref 134455 // View
	  param in name "direction" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Logic taken from FocusSarch#isCandidate"
      end

      operation 29606583 "requestChildFocus"
	public explicit_return_type "void"
	nparams 2
	  param inout name "child" type class_ref 134455 // View
	  param inout name "focused" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29606711 "requestChildRectangleOnScreen"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "child" type class_ref 134455 // View
	  param inout name "rect" type class_ref 135351 // Rect
	  param inout name "immediate" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29606839 "addFocusables"
	public explicit_return_type "void"
	nparams 3
	  param inout name "views" explicit_type "ArrayList<View>"
	  param in name "direction" explicit_type "int"
	  param in name "focusableMode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29606967 "onRequestFocusInDescendants"
	protected explicit_return_type "boolean"
	nparams 2
	  param in name "direction" explicit_type "int"
	  param inout name "previouslyFocusedRect" type class_ref 135351 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29607095 "onAttachedToWindow"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29607223 "onDetachedFromWindow"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29607351 "isAttachedToWindow"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if RecyclerView is attached to window.

 @override"
      end

      operation 29607479 "assertInLayoutOrScroll"
	package explicit_return_type "void"
	nparams 1
	  param inout name "message" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if RecyclerView is in the middle of a layout or scroll and throws an
{@link IllegalStateException} if it <b>is not</b>.

@param message The message for the exception. Can be null.
@see #assertNotInLayoutOrScroll(String)"
      end

      operation 29607607 "assertNotInLayoutOrScroll"
	package explicit_return_type "void"
	nparams 1
	  param inout name "message" type class_ref 129591 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if RecyclerView is in the middle of a layout or scroll and throws an
{@link IllegalStateException} if it <b>is</b>.

@param message The message for the exception. Can be null.
@see #assertInLayoutOrScroll(String)"
      end

      operation 29607735 "addOnItemTouchListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1180983 // OnItemTouchListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an {@link OnItemTouchListener} to intercept touch events before they are dispatched
to child views or this view's standard scrolling behavior.

<p>Client code may use listeners to implement item manipulation behavior. Once a listener
returns true from
{@link OnItemTouchListener#onInterceptTouchEvent(RecyclerView, MotionEvent)} its
{@link OnItemTouchListener#onTouchEvent(RecyclerView, MotionEvent)} method will be called
for each incoming MotionEvent until the end of the gesture.</p>

@param listener Listener to add
@see SimpleOnItemTouchListener"
      end

      operation 29607863 "removeOnItemTouchListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 1180983 // OnItemTouchListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove an {@link OnItemTouchListener}. It will no longer be able to intercept touch events.

@param listener Listener to remove"
      end

      operation 29607991 "dispatchOnItemTouchIntercept"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "e" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29608119 "dispatchOnItemTouch"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "e" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29608247 "onInterceptTouchEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29608375 "requestDisallowInterceptTouchEvent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "disallowIntercept" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29608503 "onTouchEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29608631 "resetTouch"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29608759 "cancelTouch"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29608887 "onPointerUp"
	private explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29609015 "onGenericMotionEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 146743 // MotionEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @Override"
      end

      operation 29609143 "getScrollFactor"
	private explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ported from View.getVerticalScrollFactor."
      end

      operation 29609271 "onMeasure"
	protected explicit_return_type "void"
	nparams 2
	  param in name "widthSpec" explicit_type "int"
	  param in name "heightSpec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29609399 "defaultOnMeasure"
	package explicit_return_type "void"
	nparams 2
	  param in name "widthSpec" explicit_type "int"
	  param in name "heightSpec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used when onMeasure is called before layout manager is set"
      end

      operation 29609527 "onSizeChanged"
	protected explicit_return_type "void"
	nparams 4
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param in name "oldw" explicit_type "int"
	  param in name "oldh" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29609655 "setItemAnimator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "animator" type class_ref 1183415 // ItemAnimator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@link ItemAnimator} that will handle animations involving changes
to the items in this RecyclerView. By default, RecyclerView instantiates and
uses an instance of {@link DefaultItemAnimator}. Whether item animations are
enabled for the RecyclerView depends on the ItemAnimator and whether
the LayoutManager {@link LayoutManager#supportsPredictiveItemAnimations()
supports item animations}.

@param animator The ItemAnimator being set. If null, no animations will occur
when changes occur to the items in this RecyclerView."
      end

      operation 29609783 "onEnterLayoutOrScroll"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29609911 "onExitLayoutOrScroll"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29610039 "isAccessibilityEnabled"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29610167 "dispatchContentChangedIfNecessary"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29610295 "isComputingLayout"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether RecyclerView is currently computing a layout.
<p>
If this method returns true, it means that RecyclerView is in a lockdown state and any
attempt to update adapter contents will result in an exception because adapter contents
cannot be changed while RecyclerView is trying to compute the layout.
<p>
It is very unlikely that your code will be running during this state as it is
called by the framework when a layout traversal happens or RecyclerView starts to scroll
in response to system events (touch, accessibility etc).
<p>
This case may happen if you have some custom logic to change adapter contents in
response to a View callback (e.g. focus change callback) which might be triggered during a
layout calculation. In these cases, you should just postpone the change using a Handler or a
similar mechanism.

@return <code>true</code> if RecyclerView is currently computing a layout, <code>false</code>
        otherwise"
      end

      operation 29610423 "shouldDeferAccessibilityEvent"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 138679 // AccessibilityEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if an accessibility event should not be dispatched now. This happens when an
accessibility request arrives while RecyclerView does not have a stable state which is very
hard to handle for a LayoutManager. Instead, this method records necessary information about
the event and dispatches a window change event after the critical section is finished.

@return True if the accessibility event should be postponed."
      end

      operation 29610551 "sendAccessibilityEventUnchecked"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 138679 // AccessibilityEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29610679 "getItemAnimator"
	public return_type class_ref 1183415 // ItemAnimator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current ItemAnimator for this RecyclerView. A null return value
indicates that there is no animator and that item changes will happen without
any animations. By default, RecyclerView instantiates and
uses an instance of {@link DefaultItemAnimator}.

@return ItemAnimator The current ItemAnimator. If null, no animations will occur
when changes occur to the items in this RecyclerView."
      end

      operation 29610807 "postAnimationRunner"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Post a runnable to the next frame to run pending item animations. Only the first such
request will be posted, governed by the mPostedAnimatorRunner flag."
      end

      operation 29610935 "predictiveItemAnimationsEnabled"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29611063 "processAdapterUpdatesAndSetAnimationFlags"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Consumes adapter updates and calculates which type of animations we want to run.
Called in onMeasure and dispatchLayout.
<p>
This method may process only the pre-layout state of updates or all of them."
      end

      operation 29611191 "dispatchLayout"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wrapper around layoutChildren() that handles animating changes caused by layout.
Animations work on the assumption that there are five different kinds of items
in play:
PERSISTENT: items are visible before and after layout
REMOVED: items were visible before layout and were removed by the app
ADDED: items did not exist before layout and were added by the app
DISAPPEARING: items exist in the data set before/after, but changed from
visible to non-visible in the process of layout (they were moved off
screen as a side-effect of other changes)
APPEARING: items exist in the data set before/after, but changed from
non-visible to visible in the process of layout (they were moved on
screen as a side-effect of other changes)
The overall approach figures out what items exist before/after layout and
infers one of the five above states for each of the items. Then the animations
are set up accordingly:
PERSISTENT views are animated via
{@link ItemAnimator#animatePersistence(ViewHolder, ItemHolderInfo, ItemHolderInfo)}
DISAPPEARING views are animated via
{@link ItemAnimator#animateDisappearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)}
APPEARING views are animated via
{@link ItemAnimator#animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)}
and changed views are animated via
{@link ItemAnimator#animateChange(ViewHolder, ViewHolder, ItemHolderInfo, ItemHolderInfo)}."
      end

      operation 29611319 "saveFocusInfo"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29611447 "resetFocusInfo"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29611575 "recoverFocusFromState"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29611703 "getDeepestFocusedViewWithId"
	private explicit_return_type "int"
	nparams 1
	  param inout name "view" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29611831 "dispatchLayoutStep1"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The first step of a layout where we;
- process adapter updates
- decide which animation should run
- save information about current views
- If necessary, run predictive layout and save its information"
      end

      operation 29611959 "dispatchLayoutStep2"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The second layout step where we do the actual layout of the views for the final state.
This step might be run multiple times if necessary (e.g. measure)."
      end

      operation 29612087 "dispatchLayoutStep3"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The final step of the layout where we save the information about views for animations,
trigger animations and do any necessary cleanup."
      end

      operation 29612215 "handleMissingPreInfoForChangeError"
	private explicit_return_type "void"
	nparams 3
	  param in name "key" explicit_type "long"
	  param inout name "holder" type class_ref 1181495 // ViewHolder
	  param inout name "oldChangeViewHolder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This handles the case where there is an unexpected VH missing in the pre-layout map.
<p>
We might be able to detect the error in the application which will help the developer to
resolve the issue.
<p>
If it is not an expected error, we at least print an error to notify the developer and ignore
the animation.

https://code.google.com/p/android/issues/detail?id=193958

@param key The change key
@param holder Current ViewHolder
@param oldChangeViewHolder Changed ViewHolder"
      end

      operation 29612343 "recordAnimationInfoIfBouncedHiddenView"
	private explicit_return_type "void"
	nparams 2
	  param inout name "viewHolder" type class_ref 1181495 // ViewHolder
	  param inout name "animationInfo" type class_ref 1184823 // ItemHolderInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Records the animation information for a view holder that was bounced from hidden list. It
also clears the bounce back flag."
      end

      operation 29612471 "findMinMaxChildLayoutPositions"
	private explicit_return_type "void"
	nparams 1
	  param inout name "into" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29612599 "didChildRangeChange"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "minPositionPreLayout" explicit_type "int"
	  param in name "maxPositionPreLayout" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29612727 "removeDetachedView"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "child" type class_ref 134455 // View
	  param inout name "animate" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29612855 "getChangedHolderKey"
	package explicit_return_type "long"
	nparams 1
	  param inout name "holder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a unique key to be used while handling change animations.
It might be child's position or stable id depending on the adapter type."
      end

      operation 29612983 "animateAppearance"
	private explicit_return_type "void"
	nparams 3
	  param inout name "itemHolder" type class_ref 1181495 // ViewHolder
	  param inout name "preLayoutInfo" type class_ref 1184823 // ItemHolderInfo
	  param inout name "postLayoutInfo" type class_ref 1184823 // ItemHolderInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}, @NonNull ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29613111 "animateDisappearance"
	private explicit_return_type "void"
	nparams 3
	  param inout name "holder" type class_ref 1181495 // ViewHolder
	  param inout name "preLayoutInfo" type class_ref 1184823 // ItemHolderInfo
	  param inout name "postLayoutInfo" type class_ref 1184823 // ItemHolderInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29613239 "animateChange"
	private explicit_return_type "void"
	nparams 6
	  param inout name "oldHolder" type class_ref 1181495 // ViewHolder
	  param inout name "newHolder" type class_ref 1181495 // ViewHolder
	  param inout name "preInfo" type class_ref 1184823 // ItemHolderInfo
	  param inout name "postInfo" type class_ref 1184823 // ItemHolderInfo
	  param inout name "oldHolderDisappearing" explicit_type "boolean"
	  param inout name "newHolderDisappearing" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @NonNull ${t2} ${p2}, @NonNull ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29613367 "onLayout"
	protected explicit_return_type "void"
	nparams 5
	  param inout name "changed" explicit_type "boolean"
	  param in name "l" explicit_type "int"
	  param in name "t" explicit_type "int"
	  param in name "r" explicit_type "int"
	  param in name "b" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29613495 "requestLayout"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29613623 "markItemDecorInsetsDirty"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29613751 "draw"
	public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 135735 // Canvas
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29613879 "onDraw"
	public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 135735 // Canvas
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29614007 "checkLayoutParams"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 140855 // LayoutParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29614135 "generateDefaultLayoutParams"
	protected return_type class_ref 140855 // LayoutParams
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29614263 "generateLayoutParams"
	public return_type class_ref 140855 // LayoutParams
	nparams 1
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29614391 "generateLayoutParams"
	protected return_type class_ref 140855 // LayoutParams
	nparams 1
	  param inout name "p" type class_ref 140855 // LayoutParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29614519 "isAnimating"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if RecyclerView is currently running some animations.
<p>
If you want to be notified when animations are finished, use
{@link ItemAnimator#isRunning(ItemAnimator.ItemAnimatorFinishedListener)}.

@return True if there are some item animations currently running or waiting to be started."
      end

      operation 29614647 "saveOldPositions"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29614775 "clearOldPositions"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29614903 "offsetPositionRecordsForMove"
	package explicit_return_type "void"
	nparams 2
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29615031 "offsetPositionRecordsForInsert"
	package explicit_return_type "void"
	nparams 2
	  param in name "positionStart" explicit_type "int"
	  param in name "itemCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29615159 "offsetPositionRecordsForRemove"
	package explicit_return_type "void"
	nparams 3
	  param in name "positionStart" explicit_type "int"
	  param in name "itemCount" explicit_type "int"
	  param inout name "applyToPreLayout" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29615287 "viewRangeUpdate"
	package explicit_return_type "void"
	nparams 3
	  param in name "positionStart" explicit_type "int"
	  param in name "itemCount" explicit_type "int"
	  param inout name "payload" type class_ref 132663 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rebind existing views for the given range, or create as needed.

@param positionStart Adapter position to start at
@param itemCount Number of views that must explicitly be rebound"
      end

      operation 29615415 "canReuseUpdatedViewHolder"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "viewHolder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29615543 "setDataSetChangedAfterLayout"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29615671 "markKnownViewsInvalid"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark all known views as invalid. Used in response to a, \"the whole world might have changed\"
data change event."
      end

      operation 29615799 "invalidateItemDecorations"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invalidates all ItemDecorations. If RecyclerView has item decorations, calling this method
will trigger a {@link #requestLayout()} call."
      end

      operation 29615927 "getPreserveFocusAfterLayout"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the RecyclerView should attempt to preserve currently focused Adapter Item's
focus even if the View representing the Item is replaced during a layout calculation.
<p>
By default, this value is {@code true}.

@return True if the RecyclerView will try to preserve focused Item after a layout if it loses
focus.

@see #setPreserveFocusAfterLayout(boolean)"
      end

      operation 29616055 "setPreserveFocusAfterLayout"
	public explicit_return_type "void"
	nparams 1
	  param inout name "preserveFocusAfterLayout" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set whether the RecyclerView should try to keep the same Item focused after a layout
calculation or not.
<p>
Usually, LayoutManagers keep focused views visible before and after layout but sometimes,
views may lose focus during a layout calculation as their state changes or they are replaced
with another view due to type change or animation. In these cases, RecyclerView can request
focus on the new view automatically.

@param preserveFocusAfterLayout Whether RecyclerView should preserve focused Item during a
                                layout calculations. Defaults to true.

@see #getPreserveFocusAfterLayout()"
      end

      operation 29616183 "getChildViewHolder"
	public return_type class_ref 1181495 // ViewHolder
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the {@link ViewHolder} for the given child view.

@param child Child of this RecyclerView to query for its ViewHolder
@return The child view's ViewHolder"
      end

      operation 29616311 "findContainingItemView"
	public return_type class_ref 134455 // View
	nparams 1
	  param inout name "view" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "Traverses the ancestors of the given view and returns the item view that contains it and
also a direct child of the RecyclerView. This returned view can be used to get the
ViewHolder by calling {@link #getChildViewHolder(View)}.

@param view The view that is a descendant of the RecyclerView.

@return The direct child of the RecyclerView which contains the given view or null if the
provided view is not a descendant of this RecyclerView.

@see #getChildViewHolder(View)
@see #findContainingViewHolder(View)"
      end

      operation 29616439 "findContainingViewHolder"
	public return_type class_ref 1181495 // ViewHolder
	nparams 1
	  param inout name "view" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Nullable
"
	
	
	
	comment "Returns the ViewHolder that contains the given view.

@param view The view that is a descendant of the RecyclerView.

@return The ViewHolder that contains the given view or null if the provided view is not a
descendant of this RecyclerView."
      end

      operation 29616567 "getChildViewHolderInt"
	class_operation package return_type class_ref 1181495 // ViewHolder
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29616695 "getChildPosition"
	public explicit_return_type "int"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "@deprecated use {@link #getChildAdapterPosition(View)} or
{@link #getChildLayoutPosition(View)}."
      end

      operation 29616823 "getChildAdapterPosition"
	public explicit_return_type "int"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the adapter position that the given child view corresponds to.

@param child Child View to query
@return Adapter position corresponding to the given view or {@link #NO_POSITION}"
      end

      operation 29616951 "getChildLayoutPosition"
	public explicit_return_type "int"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the adapter position of the given child view as of the latest completed layout pass.
<p>
This position may not be equal to Item's adapter position if there are pending changes
in the adapter which have not been reflected to the layout yet.

@param child Child View to query
@return Adapter position of the given View as of last layout pass or {@link #NO_POSITION} if
the View is representing a removed item."
      end

      operation 29617079 "getChildItemId"
	public explicit_return_type "long"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the stable item id that the given child view corresponds to.

@param child Child View to query
@return Item id corresponding to the given view or {@link #NO_ID}"
      end

      operation 29617207 "findViewHolderForPosition"
	public return_type class_ref 1181495 // ViewHolder
	nparams 1
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "@deprecated use {@link #findViewHolderForLayoutPosition(int)} or
{@link #findViewHolderForAdapterPosition(int)}"
      end

      operation 29617335 "findViewHolderForLayoutPosition"
	public return_type class_ref 1181495 // ViewHolder
	nparams 1
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the ViewHolder for the item in the given position of the data set as of the latest
layout pass.
<p>
This method checks only the children of RecyclerView. If the item at the given
<code>position</code> is not laid out, it <em>will not</em> create a new one.
<p>
Note that when Adapter contents change, ViewHolder positions are not updated until the
next layout calculation. If there are pending adapter updates, the return value of this
method may not match your adapter contents. You can use
#{@link ViewHolder#getAdapterPosition()} to get the current adapter position of a ViewHolder.
<p>
When the ItemAnimator is running a change animation, there might be 2 ViewHolders
with the same layout position representing the same Item. In this case, the updated
ViewHolder will be returned.

@param position The position of the item in the data set of the adapter
@return The ViewHolder at <code>position</code> or null if there is no such item"
      end

      operation 29617463 "findViewHolderForAdapterPosition"
	public return_type class_ref 1181495 // ViewHolder
	nparams 1
	  param in name "position" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the ViewHolder for the item in the given position of the data set. Unlike
{@link #findViewHolderForLayoutPosition(int)} this method takes into account any pending
adapter changes that may not be reflected to the layout yet. On the other hand, if
{@link Adapter#notifyDataSetChanged()} has been called but the new layout has not been
calculated yet, this method will return <code>null</code> since the new positions of views
are unknown until the layout is calculated.
<p>
This method checks only the children of RecyclerView. If the item at the given
<code>position</code> is not laid out, it <em>will not</em> create a new one.
<p>
When the ItemAnimator is running a change animation, there might be 2 ViewHolders
representing the same Item. In this case, the updated ViewHolder will be returned.

@param position The position of the item in the data set of the adapter
@return The ViewHolder at <code>position</code> or null if there is no such item"
      end

      operation 29617591 "findViewHolderForPosition"
	package return_type class_ref 1181495 // ViewHolder
	nparams 2
	  param in name "position" explicit_type "int"
	  param inout name "checkNewPosition" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29617719 "findViewHolderForItemId"
	public return_type class_ref 1181495 // ViewHolder
	nparams 1
	  param in name "id" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the ViewHolder for the item with the given id. The RecyclerView must
use an Adapter with {@link Adapter#setHasStableIds(boolean) stableIds} to
return a non-null value.
<p>
This method checks only the children of RecyclerView. If the item with the given
<code>id</code> is not laid out, it <em>will not</em> create a new one.

When the ItemAnimator is running a change animation, there might be 2 ViewHolders with the
same id. In this case, the updated ViewHolder will be returned.

@param id The id for the requested item
@return The ViewHolder with the given <code>id</code> or null if there is no such item"
      end

      operation 29617847 "findChildViewUnder"
	public return_type class_ref 134455 // View
	nparams 2
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the topmost view under the given point.

@param x Horizontal position in pixels to search
@param y Vertical position in pixels to search
@return The child view under (x, y) or null if no matching child is found"
      end

      operation 29617975 "drawChild"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "canvas" type class_ref 135735 // Canvas
	  param inout name "child" type class_ref 134455 // View
	  param in name "drawingTime" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29618103 "offsetChildrenVertical"
	public explicit_return_type "void"
	nparams 1
	  param in name "dy" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Offset the bounds of all child views by <code>dy</code> pixels.
Useful for implementing simple scrolling in {@link LayoutManager LayoutManagers}.

@param dy Vertical pixel offset to apply to the bounds of all child views"
      end

      operation 29618231 "onChildAttachedToWindow"
	public explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when an item view is attached to this RecyclerView.

<p>Subclasses of RecyclerView may want to perform extra bookkeeping or modifications
of child views as they become attached. This will be called before a
{@link LayoutManager} measures or lays out the view and is a good time to perform these
changes.</p>

@param child Child view that is now attached to this RecyclerView and its associated window"
      end

      operation 29618359 "onChildDetachedFromWindow"
	public explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when an item view is detached from this RecyclerView.

<p>Subclasses of RecyclerView may want to perform extra bookkeeping or modifications
of child views as they become detached. This will be called as a
{@link LayoutManager} fully detaches the child view from the parent and its window.</p>

@param child Child view that is now detached from this RecyclerView and its associated window"
      end

      operation 29618487 "offsetChildrenHorizontal"
	public explicit_return_type "void"
	nparams 1
	  param in name "dx" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Offset the bounds of all child views by <code>dx</code> pixels.
Useful for implementing simple scrolling in {@link LayoutManager LayoutManagers}.

@param dx Horizontal pixel offset to apply to the bounds of all child views"
      end

      operation 29618615 "getItemDecorInsetsForChild"
	package return_type class_ref 135351 // Rect
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29618743 "onScrolled"
	public explicit_return_type "void"
	nparams 2
	  param in name "dx" explicit_type "int"
	  param in name "dy" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the scroll position of this RecyclerView changes. Subclasses should use
this method to respond to scrolling within the adapter's data set instead of an explicit
listener.

<p>This method will always be invoked before listeners. If a subclass needs to perform
any additional upkeep or bookkeeping after scrolling but before listeners run,
this is a good place to do so.</p>

<p>This differs from {@link View#onScrollChanged(int, int, int, int)} in that it receives
the distance scrolled in either direction within the adapter's data set instead of absolute
scroll coordinates. Since RecyclerView cannot compute the absolute scroll position from
any arbitrary point in the data set, <code>onScrollChanged</code> will always receive
the current {@link View#getScrollX()} and {@link View#getScrollY()} values which
do not correspond to the data set scroll position. However, some subclasses may choose
to use these fields as special offsets.</p>

@param dx horizontal distance scrolled in pixels
@param dy vertical distance scrolled in pixels"
      end

      operation 29618871 "dispatchOnScrolled"
	package explicit_return_type "void"
	nparams 2
	  param in name "hresult" explicit_type "int"
	  param in name "vresult" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29618999 "onScrollStateChanged"
	public explicit_return_type "void"
	nparams 1
	  param in name "state" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when the scroll state of this RecyclerView changes. Subclasses should use this
method to respond to state changes instead of an explicit listener.

<p>This method will always be invoked before listeners, but after the LayoutManager
responds to the scroll state change.</p>

@param state the new scroll state, one of {@link #SCROLL_STATE_IDLE},
             {@link #SCROLL_STATE_DRAGGING} or {@link #SCROLL_STATE_SETTLING}"
      end

      operation 29619127 "dispatchOnScrollStateChanged"
	package explicit_return_type "void"
	nparams 1
	  param in name "state" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29619255 "hasPendingAdapterUpdates"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether there are pending adapter updates which are not yet applied to the layout.
<p>
If this method returns <code>true</code>, it means that what user is currently seeing may not
reflect them adapter contents (depending on what has changed).
You may use this information to defer or cancel some operations.
<p>
This method returns true if RecyclerView has not yet calculated the first layout after it is
attached to the Window or the Adapter has been replaced.

@return True if there are some adapter updates which are not yet reflected to layout or false
if layout is up to date."
      end

      operation 29621047 "repositionShadowingViews"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1184951 "AdapterDataObserver"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 1185079 "AdapterDataObservable"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 29631927 "dispatchChildDetached"
	private explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29632055 "dispatchChildAttached"
	private explicit_return_type "void"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1185207 "SmoothScroller"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 1185591 "SimpleOnItemTouchListener"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3422775 // <realization>
	  relation 3422775 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 3422775 // <realization>
	    b parent class_ref 1180983 // OnItemTouchListener
	end

	operation 29653303 "onInterceptTouchEvent"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "rv" type class_ref 1176503 // RecyclerView
	    param inout name "e" type class_ref 146743 // MotionEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29653431 "onTouchEvent"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "rv" type class_ref 1176503 // RecyclerView
	    param inout name "e" type class_ref 146743 // MotionEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29653559 "onRequestDisallowInterceptTouchEvent"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "disallowIntercept" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 29659575 "getAdapterPositionFor"
	private explicit_return_type "int"
	nparams 1
	  param inout name "viewHolder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29659703 "setNestedScrollingEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " NestedScrollingChild"
      end

      operation 29659831 "isNestedScrollingEnabled"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29659959 "startNestedScroll"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "axes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29660087 "stopNestedScroll"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29660215 "hasNestedScrollingParent"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29660343 "dispatchNestedScroll"
	public explicit_return_type "boolean"
	nparams 5
	  param in name "dxConsumed" explicit_type "int"
	  param in name "dyConsumed" explicit_type "int"
	  param in name "dxUnconsumed" explicit_type "int"
	  param in name "dyUnconsumed" explicit_type "int"
	  param inout name "offsetInWindow" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29660471 "dispatchNestedPreScroll"
	public explicit_return_type "boolean"
	nparams 4
	  param in name "dx" explicit_type "int"
	  param in name "dy" explicit_type "int"
	  param inout name "consumed" explicit_type "int"
	  param inout name "offsetInWindow" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29660599 "dispatchNestedFling"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "velocityX" explicit_type "float"
	  param in name "velocityY" explicit_type "float"
	  param inout name "consumed" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29660727 "dispatchNestedPreFling"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "velocityX" explicit_type "float"
	  param in name "velocityY" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 1182263 "AdapterHelper"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1182391 "ChildHelper"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1182519 "ViewInfoStore"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 1184439 "ProcessCallback"
	visibility package stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end
    end

    class 1184055 "RecyclerViewAccessibilityDelegate"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1190199 "GridLayoutManager"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 1190327 "SpanSizeLookup"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end
    end

    class 1194423 "DefaultItemAnimator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This implementation of {@link RecyclerView.ItemAnimator} provides basic
animations on remove, add, and move events that happen to the items in
a RecyclerView. RecyclerView uses a DefaultItemAnimator by default.

@see RecyclerView#setItemAnimator(RecyclerView.ItemAnimator)"
      classrelation 3454007 // <generalisation>
	relation 3454007 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 3454007 // <generalisation>
	  b parent class_ref 1194551 // SimpleItemAnimator
      end

      attribute 4062903 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3454135 // mPendingRemovals (<unidirectional association>)
	relation 3454135 --->
	  stereotype "ArrayList"
	  a role_name "mPendingRemovals" init_value " new ArrayList<>()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3454135 // mPendingRemovals (<unidirectional association>)
	  b parent class_ref 1181495 // ViewHolder
      end

      classrelation 3454263 // mPendingAdditions (<unidirectional association>)
	relation 3454263 --->
	  stereotype "ArrayList"
	  a role_name "mPendingAdditions" init_value " new ArrayList<>()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3454263 // mPendingAdditions (<unidirectional association>)
	  b parent class_ref 1181495 // ViewHolder
      end

      class 1194679 "MoveInfo"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3455159 // holder (<unidirectional association>)
	  relation 3455159 --->
	    a role_name "holder" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3455159 // holder (<unidirectional association>)
	    b parent class_ref 1181495 // ViewHolder
	end

	attribute 4063415 "fromX"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4063543 "fromY"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4063671 "toX"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4063799 "toY"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 29725623 "MoveInfo"
	  private explicit_return_type ""
	  nparams 5
	    param inout name "holder" type class_ref 1181495 // ViewHolder
	    param in name "fromX" explicit_type "int"
	    param in name "fromY" explicit_type "int"
	    param in name "toX" explicit_type "int"
	    param in name "toY" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3454391 // mPendingMoves (<unidirectional association>)
	relation 3454391 --->
	  stereotype "ArrayList"
	  a role_name "mPendingMoves" init_value " new ArrayList<>()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3454391 // mPendingMoves (<unidirectional association>)
	  b parent class_ref 1194679 // MoveInfo
      end

      class 1194807 "ChangeInfo"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3455287 // oldHolder (<unidirectional association>)
	  relation 3455287 --->
	    a role_name "oldHolder" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3455287 // oldHolder (<unidirectional association>)
	    b parent class_ref 1181495 // ViewHolder
	end

	classrelation 3455415 // newHolder (<unidirectional association>)
	  relation 3455415 --->
	    a role_name "newHolder" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3455415 // newHolder (<unidirectional association>)
	    b parent class_ref 1181495 // ViewHolder
	end

	attribute 4063927 "fromX"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4064055 "fromY"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4064183 "toX"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 4064311 "toY"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 29725751 "ChangeInfo"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "oldHolder" type class_ref 1181495 // ViewHolder
	    param inout name "newHolder" type class_ref 1181495 // ViewHolder
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29725879 "ChangeInfo"
	  private explicit_return_type ""
	  nparams 6
	    param inout name "oldHolder" type class_ref 1181495 // ViewHolder
	    param inout name "newHolder" type class_ref 1181495 // ViewHolder
	    param in name "fromX" explicit_type "int"
	    param in name "fromY" explicit_type "int"
	    param in name "toX" explicit_type "int"
	    param in name "toY" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 29726007 "toString"
	  public return_type class_ref 129591 // String
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 3454519 // mPendingChanges (<unidirectional association>)
	relation 3454519 --->
	  stereotype "ArrayList"
	  a role_name "mPendingChanges" init_value " new ArrayList<>()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3454519 // mPendingChanges (<unidirectional association>)
	  b parent class_ref 1194807 // ChangeInfo
      end

      attribute 4063031 "mAdditionsList"
	private explicit_type "ArrayList<ViewHolder>"
	init_value " new ArrayList<>()"
	stereotype "ArrayList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4063159 "mMovesList"
	private explicit_type "ArrayList<MoveInfo>"
	init_value " new ArrayList<>()"
	stereotype "ArrayList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4063287 "mChangesList"
	private explicit_type "ArrayList<ChangeInfo>"
	init_value " new ArrayList<>()"
	stereotype "ArrayList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3454647 // mAddAnimations (<unidirectional association>)
	relation 3454647 --->
	  stereotype "ArrayList"
	  a role_name "mAddAnimations" init_value " new ArrayList<>()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3454647 // mAddAnimations (<unidirectional association>)
	  b parent class_ref 1181495 // ViewHolder
      end

      classrelation 3454775 // mMoveAnimations (<unidirectional association>)
	relation 3454775 --->
	  stereotype "ArrayList"
	  a role_name "mMoveAnimations" init_value " new ArrayList<>()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3454775 // mMoveAnimations (<unidirectional association>)
	  b parent class_ref 1181495 // ViewHolder
      end

      classrelation 3454903 // mRemoveAnimations (<unidirectional association>)
	relation 3454903 --->
	  stereotype "ArrayList"
	  a role_name "mRemoveAnimations" init_value " new ArrayList<>()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3454903 // mRemoveAnimations (<unidirectional association>)
	  b parent class_ref 1181495 // ViewHolder
      end

      classrelation 3455031 // mChangeAnimations (<unidirectional association>)
	relation 3455031 --->
	  stereotype "ArrayList"
	  a role_name "mChangeAnimations" init_value " new ArrayList<>()" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 3455031 // mChangeAnimations (<unidirectional association>)
	  b parent class_ref 1181495 // ViewHolder
      end

      operation 29726135 "runPendingAnimations"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29726263 "animateRemove"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "holder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29726391 "animateRemoveImpl"
	private explicit_return_type "void"
	nparams 1
	  param in name "holder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29726519 "animateAdd"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "holder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29726647 "animateAddImpl"
	private explicit_return_type "void"
	nparams 1
	  param in name "holder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29726775 "animateMove"
	public explicit_return_type "boolean"
	nparams 5
	  param in name "holder" type class_ref 1181495 // ViewHolder
	  param in name "fromX" explicit_type "int"
	  param in name "fromY" explicit_type "int"
	  param in name "toX" explicit_type "int"
	  param in name "toY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29726903 "animateMoveImpl"
	private explicit_return_type "void"
	nparams 5
	  param in name "holder" type class_ref 1181495 // ViewHolder
	  param in name "fromX" explicit_type "int"
	  param in name "fromY" explicit_type "int"
	  param in name "toX" explicit_type "int"
	  param in name "toY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29727031 "animateChange"
	public explicit_return_type "boolean"
	nparams 6
	  param inout name "oldHolder" type class_ref 1181495 // ViewHolder
	  param inout name "newHolder" type class_ref 1181495 // ViewHolder
	  param in name "fromX" explicit_type "int"
	  param in name "fromY" explicit_type "int"
	  param in name "toX" explicit_type "int"
	  param in name "toY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29727159 "animateChangeImpl"
	private explicit_return_type "void"
	nparams 1
	  param in name "changeInfo" type class_ref 1194807 // ChangeInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29727287 "endChangeAnimation"
	private explicit_return_type "void"
	nparams 2
	  param inout name "infoList" explicit_type "List<ChangeInfo>"
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29727415 "endChangeAnimationIfNecessary"
	private explicit_return_type "void"
	nparams 1
	  param inout name "changeInfo" type class_ref 1194807 // ChangeInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29727543 "endChangeAnimationIfNecessary"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "changeInfo" type class_ref 1194807 // ChangeInfo
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29727671 "endAnimation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29727799 "resetAnimation"
	private explicit_return_type "void"
	nparams 1
	  param inout name "holder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29727927 "isRunning"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29728055 "dispatchFinishedWhenDone"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check the state of currently pending and running animations. If there are none
pending/running, call {@link #dispatchAnimationsFinished()} to notify any
listeners."
      end

      operation 29728183 "endAnimations"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29728311 "cancelAll"
	package explicit_return_type "void"
	nparams 1
	  param inout name "viewHolders" explicit_type "List<ViewHolder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 29728439 "canReuseUpdatedViewHolder"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "viewHolder" type class_ref 1181495 // ViewHolder
	  param inout name "payloads" explicit_type "List<Object>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
<p>
If the payload list is not empty, DefaultItemAnimator returns <code>true</code>.
When this is the case:
<ul>
<li>If you override {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)}, both
ViewHolder arguments will be the same instance.
</li>
<li>
If you are not overriding {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)},
then DefaultItemAnimator will call {@link #animateMove(ViewHolder, int, int, int, int)} and
run a move animation instead.
</li>
</ul>"
      end

      class 1194935 "VpaListenerAdapter"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 3455543 // <realization>
	  relation 3455543 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 3455543 // <realization>
	    b parent class_ref 1195063 // ViewPropertyAnimatorListener
	end

	operation 29728951 "onAnimationStart"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29729079 "onAnimationEnd"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 29729207 "onAnimationCancel"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "view" type class_ref 134455 // View
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1194551 "SimpleItemAnimator"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A wrapper class for ItemAnimator that records View bounds and decides whether it should run
move, change, add or remove animations. This class also replicates the original ItemAnimator
API.
<p>
It uses {@link ItemHolderInfo} to track the bounds information of the Views. If you would like
to
extend this class, you can override {@link #obtainHolderInfo()} method to provide your own info
class that extends {@link ItemHolderInfo}."
      classrelation 3453751 // <generalisation>
	relation 3453751 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 3453751 // <generalisation>
	  b parent class_ref 1183415 // ItemAnimator
      end

      attribute 4062647 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 3453879 // TAG (<unidirectional association>)
	relation 3453879 --->
	  a role_name "TAG" init_value " \"SimpleItemAnimator\"" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3453879 // TAG (<unidirectional association>)
	  b parent class_ref 129591 // String
      end

      attribute 4062775 "mSupportsChangeAnimations"
	package explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 29722167 "getSupportsChangeAnimations"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unused\")
"
	
	
	
	comment "Returns whether this ItemAnimator supports animations of change events.

@return true if change animations are supported, false otherwise"
      end

      operation 29722295 "setSupportsChangeAnimations"
	public explicit_return_type "void"
	nparams 1
	  param inout name "supportsChangeAnimations" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether this ItemAnimator supports animations of item change events.
If you set this property to false, actions on the data set which change the
contents of items will not be animated. What those animations do is left
up to the discretion of the ItemAnimator subclass, in its
{@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} implementation.
The value of this property is true by default.

@param supportsChangeAnimations true if change animations are supported by
                                this ItemAnimator, false otherwise. If the property is false,
                                the ItemAnimator
                                will not receive a call to
                                {@link #animateChange(ViewHolder, ViewHolder, int, int, int,
                                int)} when changes occur.
@see Adapter#notifyItemChanged(int)
@see Adapter#notifyItemRangeChanged(int, int)"
      end

      operation 29722423 "canReuseUpdatedViewHolder"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "viewHolder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

@return True if change animations are not supported or the ViewHolder is invalid,
false otherwise.

@see #setSupportsChangeAnimations(boolean)"
      end

      operation 29722551 "animateDisappearance"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "viewHolder" type class_ref 1181495 // ViewHolder
	  param inout name "preLayoutInfo" type class_ref 1184823 // ItemHolderInfo
	  param inout name "postLayoutInfo" type class_ref 1184823 // ItemHolderInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @Nullable ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29722679 "animateAppearance"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "viewHolder" type class_ref 1181495 // ViewHolder
	  param inout name "preLayoutInfo" type class_ref 1184823 // ItemHolderInfo
	  param inout name "postLayoutInfo" type class_ref 1184823 // ItemHolderInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @Nullable ${t1} ${p1}, @NonNull ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29722807 "animatePersistence"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "viewHolder" type class_ref 1181495 // ViewHolder
	  param inout name "preInfo" type class_ref 1184823 // ItemHolderInfo
	  param inout name "postInfo" type class_ref 1184823 // ItemHolderInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @NonNull ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29722935 "animateChange"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "oldHolder" type class_ref 1181495 // ViewHolder
	  param inout name "newHolder" type class_ref 1181495 // ViewHolder
	  param inout name "preInfo" type class_ref 1184823 // ItemHolderInfo
	  param inout name "postInfo" type class_ref 1184823 // ItemHolderInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@NonNull ${t0} ${p0}, @NonNull ${t1} ${p1}, @NonNull ${t2} ${p2}, @NonNull ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 29723063 "animateRemove"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "holder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when an item is removed from the RecyclerView. Implementors can choose
whether and how to animate that change, but must always call
{@link #dispatchRemoveFinished(ViewHolder)} when done, either
immediately (if no animation will occur) or after the animation actually finishes.
The return value indicates whether an animation has been set up and whether the
ItemAnimator's {@link #runPendingAnimations()} method should be called at the
next opportunity. This mechanism allows ItemAnimator to set up individual animations
as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
{@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
{@link #animateRemove(ViewHolder) animateRemove()}, and
{@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
then start the animations together in the later call to {@link #runPendingAnimations()}.

<p>This method may also be called for disappearing items which continue to exist in the
RecyclerView, but for which the system does not have enough information to animate
them out of view. In that case, the default animation for removing items is run
on those items as well.</p>

@param holder The item that is being removed.
@return true if a later call to {@link #runPendingAnimations()} is requested,
false otherwise."
      end

      operation 29723191 "animateAdd"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "holder" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when an item is added to the RecyclerView. Implementors can choose
whether and how to animate that change, but must always call
{@link #dispatchAddFinished(ViewHolder)} when done, either
immediately (if no animation will occur) or after the animation actually finishes.
The return value indicates whether an animation has been set up and whether the
ItemAnimator's {@link #runPendingAnimations()} method should be called at the
next opportunity. This mechanism allows ItemAnimator to set up individual animations
as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
{@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
{@link #animateRemove(ViewHolder) animateRemove()}, and
{@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
then start the animations together in the later call to {@link #runPendingAnimations()}.

<p>This method may also be called for appearing items which were already in the
RecyclerView, but for which the system does not have enough information to animate
them into view. In that case, the default animation for adding items is run
on those items as well.</p>

@param holder The item that is being added.
@return true if a later call to {@link #runPendingAnimations()} is requested,
false otherwise."
      end

      operation 29723319 "animateMove"
	abstract public explicit_return_type "boolean"
	nparams 5
	  param inout name "holder" type class_ref 1181495 // ViewHolder
	  param in name "fromX" explicit_type "int"
	  param in name "fromY" explicit_type "int"
	  param in name "toX" explicit_type "int"
	  param in name "toY" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when an item is moved in the RecyclerView. Implementors can choose
whether and how to animate that change, but must always call
{@link #dispatchMoveFinished(ViewHolder)} when done, either
immediately (if no animation will occur) or after the animation actually finishes.
The return value indicates whether an animation has been set up and whether the
ItemAnimator's {@link #runPendingAnimations()} method should be called at the
next opportunity. This mechanism allows ItemAnimator to set up individual animations
as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
{@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
{@link #animateRemove(ViewHolder) animateRemove()}, and
{@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
then start the animations together in the later call to {@link #runPendingAnimations()}.

@param holder The item that is being moved.
@return true if a later call to {@link #runPendingAnimations()} is requested,
false otherwise."
      end

      operation 29723447 "animateChange"
	abstract public explicit_return_type "boolean"
	nparams 6
	  param inout name "oldHolder" type class_ref 1181495 // ViewHolder
	  param inout name "newHolder" type class_ref 1181495 // ViewHolder
	  param in name "fromLeft" explicit_type "int"
	  param in name "fromTop" explicit_type "int"
	  param in name "toLeft" explicit_type "int"
	  param in name "toTop" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when an item is changed in the RecyclerView, as indicated by a call to
{@link Adapter#notifyItemChanged(int)} or
{@link Adapter#notifyItemRangeChanged(int, int)}.
<p>
Implementers can choose whether and how to animate changes, but must always call
{@link #dispatchChangeFinished(ViewHolder, boolean)} for each non-null distinct ViewHolder,
either immediately (if no animation will occur) or after the animation actually finishes.
If the {@code oldHolder} is the same ViewHolder as the {@code newHolder}, you must call
{@link #dispatchChangeFinished(ViewHolder, boolean)} once and only once. In that case, the
second parameter of {@code dispatchChangeFinished} is ignored.
<p>
The return value indicates whether an animation has been set up and whether the
ItemAnimator's {@link #runPendingAnimations()} method should be called at the
next opportunity. This mechanism allows ItemAnimator to set up individual animations
as separate calls to {@link #animateAdd(ViewHolder) animateAdd()},
{@link #animateMove(ViewHolder, int, int, int, int) animateMove()},
{@link #animateRemove(ViewHolder) animateRemove()}, and
{@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)} come in one by one,
then start the animations together in the later call to {@link #runPendingAnimations()}.

@param oldHolder The original item that changed.
@param newHolder The new item that was created with the changed content. Might be null
@param fromLeft  Left of the old view holder
@param fromTop   Top of the old view holder
@param toLeft    Left of the new view holder
@param toTop     Top of the new view holder
@return true if a later call to {@link #runPendingAnimations()} is requested,
false otherwise."
      end

      operation 29723575 "dispatchRemoveFinished"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to be called by subclasses when a remove animation is done.

@param item The item which has been removed
@see RecyclerView.ItemAnimator#animateDisappearance(ViewHolder, ItemHolderInfo,
ItemHolderInfo)"
      end

      operation 29723703 "dispatchMoveFinished"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to be called by subclasses when a move animation is done.

@param item The item which has been moved
@see RecyclerView.ItemAnimator#animateDisappearance(ViewHolder, ItemHolderInfo,
ItemHolderInfo)
@see RecyclerView.ItemAnimator#animatePersistence(ViewHolder, ItemHolderInfo, ItemHolderInfo)
@see RecyclerView.ItemAnimator#animateAppearance(ViewHolder, ItemHolderInfo, ItemHolderInfo)"
      end

      operation 29723831 "dispatchAddFinished"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to be called by subclasses when an add animation is done.

@param item The item which has been added"
      end

      operation 29723959 "dispatchChangeFinished"
	public explicit_return_type "void"
	nparams 2
	  param inout name "item" type class_ref 1181495 // ViewHolder
	  param inout name "oldItem" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to be called by subclasses when a change animation is done.

@param item    The item which has been changed (this method must be called for
               each non-null ViewHolder passed into
               {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)}).
@param oldItem true if this is the old item that was changed, false if
               it is the new item that replaced the old item.
@see #animateChange(ViewHolder, ViewHolder, int, int, int, int)"
      end

      operation 29724087 "dispatchRemoveStarting"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to be called by subclasses when a remove animation is being started.

@param item The item being removed"
      end

      operation 29724215 "dispatchMoveStarting"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to be called by subclasses when a move animation is being started.

@param item The item being moved"
      end

      operation 29724343 "dispatchAddStarting"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to be called by subclasses when an add animation is being started.

@param item The item being added"
      end

      operation 29724471 "dispatchChangeStarting"
	public explicit_return_type "void"
	nparams 2
	  param inout name "item" type class_ref 1181495 // ViewHolder
	  param inout name "oldItem" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method to be called by subclasses when a change animation is being started.

@param item    The item which has been changed (this method must be called for
               each non-null ViewHolder passed into
               {@link #animateChange(ViewHolder, ViewHolder, int, int, int, int)}).
@param oldItem true if this is the old item that was changed, false if
               it is the new item that replaced the old item."
      end

      operation 29724599 "onRemoveStarting"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"UnusedParameters\")
"
	
	
	
	comment "Called when a remove animation is being started on the given ViewHolder.
The default implementation does nothing. Subclasses may wish to override
this method to handle any ViewHolder-specific operations linked to animation
lifecycles.

@param item The ViewHolder being animated."
      end

      operation 29724727 "onRemoveFinished"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a remove animation has ended on the given ViewHolder.
The default implementation does nothing. Subclasses may wish to override
this method to handle any ViewHolder-specific operations linked to animation
lifecycles.

@param item The ViewHolder being animated."
      end

      operation 29724855 "onAddStarting"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"UnusedParameters\")
"
	
	
	
	comment "Called when an add animation is being started on the given ViewHolder.
The default implementation does nothing. Subclasses may wish to override
this method to handle any ViewHolder-specific operations linked to animation
lifecycles.

@param item The ViewHolder being animated."
      end

      operation 29724983 "onAddFinished"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when an add animation has ended on the given ViewHolder.
The default implementation does nothing. Subclasses may wish to override
this method to handle any ViewHolder-specific operations linked to animation
lifecycles.

@param item The ViewHolder being animated."
      end

      operation 29725111 "onMoveStarting"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"UnusedParameters\")
"
	
	
	
	comment "Called when a move animation is being started on the given ViewHolder.
The default implementation does nothing. Subclasses may wish to override
this method to handle any ViewHolder-specific operations linked to animation
lifecycles.

@param item The ViewHolder being animated."
      end

      operation 29725239 "onMoveFinished"
	public explicit_return_type "void"
	nparams 1
	  param inout name "item" type class_ref 1181495 // ViewHolder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a move animation has ended on the given ViewHolder.
The default implementation does nothing. Subclasses may wish to override
this method to handle any ViewHolder-specific operations linked to animation
lifecycles.

@param item The ViewHolder being animated."
      end

      operation 29725367 "onChangeStarting"
	public explicit_return_type "void"
	nparams 2
	  param inout name "item" type class_ref 1181495 // ViewHolder
	  param inout name "oldItem" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"UnusedParameters\")
"
	
	
	
	comment "Called when a change animation is being started on the given ViewHolder.
The default implementation does nothing. Subclasses may wish to override
this method to handle any ViewHolder-specific operations linked to animation
lifecycles.

@param item    The ViewHolder being animated.
@param oldItem true if this is the old item that was changed, false if
               it is the new item that replaced the old item."
      end

      operation 29725495 "onChangeFinished"
	public explicit_return_type "void"
	nparams 2
	  param inout name "item" type class_ref 1181495 // ViewHolder
	  param inout name "oldItem" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a change animation has ended on the given ViewHolder.
The default implementation does nothing. Subclasses may wish to override
this method to handle any ViewHolder-specific operations linked to animation
lifecycles.

@param item    The ViewHolder being animated.
@param oldItem true if this is the old item that was changed, false if
               it is the new item that replaced the old item."
      end
    end

    class 1806007 "Toolbar"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1937975 "CardView"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 1941687 "SwitchCompat"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2274359 "LinearLayoutCompat"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A Layout that arranges its children in a single column or a single row. The direction of
the row can be set by calling {@link #setOrientation(int) setOrientation()}.
You can also specify gravity, which specifies the alignment of all the child elements by
calling {@link #setGravity(int) setGravity()} or specify that specific children
grow to fill up any remaining space in the layout by setting the <em>weight</em> member of
{@link LinearLayoutCompat.LayoutParams LinearLayoutCompat.LayoutParams}.
The default orientation is horizontal.

<p>See the <a href=\"{@docRoot}guide/topics/ui/layout/linear.html\">Linear Layout</a>
guide.</p>

<p>
Also see {@link LinearLayoutCompat.LayoutParams} for layout attributes </p>"
      classrelation 7175991 // <generalisation>
	relation 7175991 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 7175991 // <generalisation>
	  b parent class_ref 134711 // ViewGroup
      end

      class 2274487 "OrientationMode"
	visibility public stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef({HORIZONTAL, VERTICAL})
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 7632567 "HORIZONTAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7632695 "VERTICAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 2274615 "DividerMode"
	visibility public stereotype "@interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}@interface ${name}${extends} {
${members}}
"
	java_annotation "@IntDef(flag = true,
            value = {
                    SHOW_DIVIDER_NONE,
                    SHOW_DIVIDER_BEGINNING,
                    SHOW_DIVIDER_MIDDLE,
                    SHOW_DIVIDER_END
            })
@Retention(RetentionPolicy.SOURCE)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      attribute 7632823 "SHOW_DIVIDER_NONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Don't show any dividers.
"
      end

      attribute 7632951 "SHOW_DIVIDER_BEGINNING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show a divider at the beginning of the group.
"
      end

      attribute 7633079 "SHOW_DIVIDER_MIDDLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show dividers between each item in the group.
"
      end

      attribute 7633207 "SHOW_DIVIDER_END"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show a divider at the end of the group.
"
      end

      attribute 7633335 "mBaselineAligned"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Whether the children of this layout are baseline aligned.  Only applicable
if {@link #mOrientation} is horizontal.
"
      end

      attribute 7633463 "mBaselineAlignedChildIndex"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If this layout is part of another layout that is baseline aligned,
use the child at this index as the baseline.

Note: this is orthogonal to {@link #mBaselineAligned}, which is concerned
with whether the children of this layout are baseline aligned.
"
      end

      attribute 7633591 "mBaselineChildTop"
	private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The additional offset to the child's baseline.
We'll calculate the baseline of this layout as we measure vertically; for
horizontal linear layouts, the offset of 0 is appropriate.
"
      end

      attribute 7633719 "mOrientation"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7633847 "mGravity"
	private explicit_type "int"
	init_value " GravityCompat.START | Gravity.TOP"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7633975 "mTotalLength"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7634103 "mWeightSum"
	private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7634231 "mUseLargestChild"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7634359 "mMaxAscent"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7634487 "mMaxDescent"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7634615 "VERTICAL_GRAVITY_COUNT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7634743 "INDEX_CENTER_VERTICAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7634871 "INDEX_TOP"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7634999 "INDEX_BOTTOM"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7635127 "INDEX_FILL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 7176119 // mDivider (<unidirectional association>)
	relation 7176119 --->
	  a role_name "mDivider" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 7176119 // mDivider (<unidirectional association>)
	  b parent class_ref 129719 // Drawable
      end

      attribute 7635255 "mDividerWidth"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7635383 "mDividerHeight"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7635511 "mShowDividers"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 7635639 "mDividerPadding"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 38843831 "LinearLayoutCompat"
	public explicit_return_type ""
	nparams 1
	  param inout name "context" type class_ref 128567 // Context
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38843959 "LinearLayoutCompat"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38844087 "LinearLayoutCompat"
	public explicit_return_type ""
	nparams 3
	  param inout name "context" type class_ref 128567 // Context
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	  param in name "defStyleAttr" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38844215 "setShowDividers"
	public explicit_return_type "void"
	nparams 1
	  param in name "showDividers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@DividerMode ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set how dividers should be shown between items in this layout

@param showDividers One or more of {@link #SHOW_DIVIDER_BEGINNING},
                    {@link #SHOW_DIVIDER_MIDDLE}, or {@link #SHOW_DIVIDER_END},
                    or {@link #SHOW_DIVIDER_NONE} to show no dividers."
      end

      operation 38844343 "shouldDelayChildPressedState"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 38844471 "getShowDividers"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@DividerMode
"
	
	
	
	comment "@return A flag set indicating how dividers should be shown around items.
@see #setShowDividers(int)"
      end

      operation 38844599 "getDividerDrawable"
	public return_type class_ref 129719 // Drawable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the divider Drawable that will divide each item.

@see #setDividerDrawable(Drawable)"
      end

      operation 38844727 "setDividerDrawable"
	public explicit_return_type "void"
	nparams 1
	  param inout name "divider" type class_ref 129719 // Drawable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a drawable to be used as a divider between items.

@param divider Drawable that will divide each item.

@see #setShowDividers(int)"
      end

      operation 38844855 "setDividerPadding"
	public explicit_return_type "void"
	nparams 1
	  param in name "padding" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set padding displayed on both ends of dividers.

@param padding Padding value in pixels that will be applied to each end

@see #setShowDividers(int)
@see #setDividerDrawable(Drawable)
@see #getDividerPadding()"
      end

      operation 38844983 "getDividerPadding"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the padding size used to inset dividers in pixels

@see #setShowDividers(int)
@see #setDividerDrawable(Drawable)
@see #setDividerPadding(int)"
      end

      operation 38845111 "getDividerWidth"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the width of the current divider drawable.

@hide Used internally by framework."
      end

      operation 38845239 "onDraw"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "canvas" type class_ref 135735 // Canvas
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 38845367 "drawDividersVertical"
	package explicit_return_type "void"
	nparams 1
	  param inout name "canvas" type class_ref 135735 // Canvas
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38845495 "drawDividersHorizontal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "canvas" type class_ref 135735 // Canvas
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38845623 "drawHorizontalDivider"
	package explicit_return_type "void"
	nparams 2
	  param inout name "canvas" type class_ref 135735 // Canvas
	  param in name "top" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38845751 "drawVerticalDivider"
	package explicit_return_type "void"
	nparams 2
	  param inout name "canvas" type class_ref 135735 // Canvas
	  param in name "left" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38845879 "isBaselineAligned"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Indicates whether widgets contained within this layout are aligned
on their baseline or not.</p>

@return true when widgets are baseline-aligned, false otherwise"
      end

      operation 38846007 "setBaselineAligned"
	public explicit_return_type "void"
	nparams 1
	  param inout name "baselineAligned" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Defines whether widgets contained in this layout are
baseline-aligned or not.</p>

@param baselineAligned true to align widgets on their baseline,
        false otherwise"
      end

      operation 38846135 "isMeasureWithLargestChildEnabled"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "When true, all children with a weight will be considered having
the minimum size of the largest child. If false, all children are
measured normally.

@return True to measure children with a weight using the minimum
        size of the largest child, false otherwise."
      end

      operation 38846263 "setMeasureWithLargestChildEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "When set to true, all children with a weight will be considered having
the minimum size of the largest child. If false, all children are
measured normally.

Disabled by default.

@param enabled True to measure children with a weight using the
       minimum size of the largest child, false otherwise."
      end

      operation 38846391 "getBaseline"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 38846519 "getBaselineAlignedChildIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The index of the child that will be used if this layout is
  part of a larger layout that is baseline aligned, or -1 if none has
  been set."
      end

      operation 38846647 "setBaselineAlignedChildIndex"
	public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param i The index of the child that will be used if this layout is
         part of a larger layout that is baseline aligned."
      end

      operation 38846775 "getVirtualChildAt"
	package return_type class_ref 134455 // View
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the view at the specified index. This method can be overriden
to take into account virtual children. Refer to
{@link android.widget.TableLayout} and {@link android.widget.TableRow}
for an example.</p>

@param index the child's index
@return the child at the specified index"
      end

      operation 38846903 "getVirtualChildCount"
	package explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the virtual number of children. This number might be different
than the actual number of children if the layout can hold virtual
children. Refer to
{@link android.widget.TableLayout} and {@link android.widget.TableRow}
for an example.</p>

@return the virtual number of children"
      end

      operation 38847031 "getWeightSum"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the desired weights sum.

@return A number greater than 0.0f if the weight sum is defined, or
        a number lower than or equals to 0.0f if not weight sum is
        to be used."
      end

      operation 38847159 "setWeightSum"
	public explicit_return_type "void"
	nparams 1
	  param in name "weightSum" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defines the desired weights sum. If unspecified the weights sum is computed
at layout time by adding the layout_weight of each child.

This can be used for instance to give a single child 50% of the total
available space by giving it a layout_weight of 0.5 and setting the
weightSum to 1.0.

@param weightSum a number greater than 0.0f, or a number lower than or equals
       to 0.0f if the weight sum should be computed from the children's
       layout_weight"
      end

      operation 38847287 "onMeasure"
	protected explicit_return_type "void"
	nparams 2
	  param in name "widthMeasureSpec" explicit_type "int"
	  param in name "heightMeasureSpec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 38847415 "hasDividerBeforeChildAt"
	protected explicit_return_type "boolean"
	nparams 1
	  param in name "childIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines where to position dividers between children.

@param childIndex Index of child to check for preceding divider
@return true if there should be a divider before the child at childIndex
@hide Pending API consideration. Currently only used internally by the system."
      end

      operation 38847543 "measureVertical"
	package explicit_return_type "void"
	nparams 2
	  param in name "widthMeasureSpec" explicit_type "int"
	  param in name "heightMeasureSpec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Measures the children when the orientation of this LinearLayout is set
to {@link #VERTICAL}.

@param widthMeasureSpec Horizontal space requirements as imposed by the parent.
@param heightMeasureSpec Vertical space requirements as imposed by the parent.

@see #getOrientation()
@see #setOrientation(int)
@see #onMeasure(int, int)"
      end

      operation 38847671 "forceUniformWidth"
	private explicit_return_type "void"
	nparams 2
	  param in name "count" explicit_type "int"
	  param in name "heightMeasureSpec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38847799 "measureHorizontal"
	package explicit_return_type "void"
	nparams 2
	  param in name "widthMeasureSpec" explicit_type "int"
	  param in name "heightMeasureSpec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Measures the children when the orientation of this LinearLayout is set
to {@link #HORIZONTAL}.

@param widthMeasureSpec Horizontal space requirements as imposed by the parent.
@param heightMeasureSpec Vertical space requirements as imposed by the parent.

@see #getOrientation()
@see #setOrientation(int)
@see #onMeasure(int, int)"
      end

      operation 38847927 "forceUniformHeight"
	private explicit_return_type "void"
	nparams 2
	  param in name "count" explicit_type "int"
	  param in name "widthMeasureSpec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38848055 "getChildrenSkipCount"
	package explicit_return_type "int"
	nparams 2
	  param inout name "child" type class_ref 134455 // View
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the number of children to skip after measuring/laying out
the specified child.</p>

@param child the child after which we want to skip children
@param index the index of the child after which we want to skip children
@return the number of children to skip, 0 by default"
      end

      operation 38848183 "measureNullChild"
	package explicit_return_type "int"
	nparams 1
	  param in name "childIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the size (width or height) that should be occupied by a null
child.</p>

@param childIndex the index of the null child
@return the width or height of the child depending on the orientation"
      end

      operation 38848311 "measureChildBeforeLayout"
	package explicit_return_type "void"
	nparams 6
	  param inout name "child" type class_ref 134455 // View
	  param in name "childIndex" explicit_type "int"
	  param in name "widthMeasureSpec" explicit_type "int"
	  param in name "totalWidth" explicit_type "int"
	  param in name "heightMeasureSpec" explicit_type "int"
	  param in name "totalHeight" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Measure the child according to the parent's measure specs. This
method should be overriden by subclasses to force the sizing of
children. This method is called by {@link #measureVertical(int, int)} and
{@link #measureHorizontal(int, int)}.</p>

@param child the child to measure
@param childIndex the index of the child in this view
@param widthMeasureSpec horizontal space requirements as imposed by the parent
@param totalWidth extra space that has been used up by the parent horizontally
@param heightMeasureSpec vertical space requirements as imposed by the parent
@param totalHeight extra space that has been used up by the parent vertically"
      end

      operation 38848439 "getLocationOffset"
	package explicit_return_type "int"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the location offset of the specified child. This can be used
by subclasses to change the location of a given widget.</p>

@param child the child for which to obtain the location offset
@return the location offset in pixels"
      end

      operation 38848567 "getNextLocationOffset"
	package explicit_return_type "int"
	nparams 1
	  param inout name "child" type class_ref 134455 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the size offset of the next sibling of the specified child.
This can be used by subclasses to change the location of the widget
following <code>child</code>.</p>

@param child the child whose next sibling will be moved
@return the location offset of the next child in pixels"
      end

      operation 38848695 "onLayout"
	protected explicit_return_type "void"
	nparams 5
	  param inout name "changed" explicit_type "boolean"
	  param in name "l" explicit_type "int"
	  param in name "t" explicit_type "int"
	  param in name "r" explicit_type "int"
	  param in name "b" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 38848823 "layoutVertical"
	package explicit_return_type "void"
	nparams 4
	  param in name "left" explicit_type "int"
	  param in name "top" explicit_type "int"
	  param in name "right" explicit_type "int"
	  param in name "bottom" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Position the children during a layout pass if the orientation of this
LinearLayout is set to {@link #VERTICAL}.

@see #getOrientation()
@see #setOrientation(int)
@see #onLayout(boolean, int, int, int, int)
@param left
@param top
@param right
@param bottom"
      end

      operation 38848951 "layoutHorizontal"
	package explicit_return_type "void"
	nparams 4
	  param in name "left" explicit_type "int"
	  param in name "top" explicit_type "int"
	  param in name "right" explicit_type "int"
	  param in name "bottom" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Position the children during a layout pass if the orientation of this
LinearLayout is set to {@link #HORIZONTAL}.

@see #getOrientation()
@see #setOrientation(int)
@see #onLayout(boolean, int, int, int, int)
@param left
@param top
@param right
@param bottom"
      end

      operation 38849079 "setChildFrame"
	private explicit_return_type "void"
	nparams 5
	  param inout name "child" type class_ref 134455 // View
	  param in name "left" explicit_type "int"
	  param in name "top" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38849207 "setOrientation"
	public explicit_return_type "void"
	nparams 1
	  param in name "orientation" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}@OrientationMode ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Should the layout be a column or a row.
@param orientation Pass {@link #HORIZONTAL} or {@link #VERTICAL}. Default
value is {@link #HORIZONTAL}."
      end

      operation 38849335 "getOrientation"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@OrientationMode
"
	
	
	
	comment "Returns the current orientation.

@return either {@link #HORIZONTAL} or {@link #VERTICAL}"
      end

      operation 38849463 "setGravity"
	public explicit_return_type "void"
	nparams 1
	  param in name "gravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Describes how the child views are positioned. Defaults to GRAVITY_TOP. If
this layout has a VERTICAL orientation, this controls where all the child
views are placed if there is extra vertical space. If this layout has a
HORIZONTAL orientation, this controls the alignment of the children.

@param gravity See {@link android.view.Gravity}"
      end

      operation 38849591 "setHorizontalGravity"
	public explicit_return_type "void"
	nparams 1
	  param in name "horizontalGravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38849719 "setVerticalGravity"
	public explicit_return_type "void"
	nparams 1
	  param in name "verticalGravity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38849847 "generateLayoutParams"
	public return_type class_ref 140855 // LayoutParams
	nparams 1
	  param inout name "attrs" type class_ref 130359 // AttributeSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 38849975 "generateDefaultLayoutParams"
	protected return_type class_ref 140855 // LayoutParams
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a set of layout parameters with a width of
{@link android.view.ViewGroup.LayoutParams#MATCH_PARENT}
and a height of {@link android.view.ViewGroup.LayoutParams#WRAP_CONTENT}
when the layout's orientation is {@link #VERTICAL}. When the orientation is
{@link #HORIZONTAL}, the width is set to {@link LayoutParams#WRAP_CONTENT}
and the height to {@link LayoutParams#WRAP_CONTENT}."
      end

      operation 38850103 "generateLayoutParams"
	protected return_type class_ref 140855 // LayoutParams
	nparams 1
	  param inout name "p" type class_ref 140855 // LayoutParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 38850231 "checkLayoutParams"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 140855 // LayoutParams
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Override to allow type-checking of LayoutParams."
      end

      operation 38850359 "onInitializeAccessibilityEvent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "event" type class_ref 138679 // AccessibilityEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 38850487 "onInitializeAccessibilityNodeInfo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "info" type class_ref 147127 // AccessibilityNodeInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 179639 "widget"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 696247 "SimpleItemAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v7.widget.RecyclerView.Adapter;
import android.support.v7.widget.RecyclerView.ViewHolder;
import android.support.v7.widget.RecyclerView.ItemAnimator.ItemHolderInfo;
import android.util.Log;
import android.view.View;
import java.util.List;
${definition}"
      associated_classes
	class_ref 1194551 // SimpleItemAnimator
      end
    end

    artifact 696503 "DefaultItemAnimator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.support.annotation.NonNull;
import android.support.v4.animation.AnimatorCompatHelper;
import android.support.v4.view.ViewCompat;
import android.support.v4.view.ViewPropertyAnimatorCompat;
import android.support.v4.view.ViewPropertyAnimatorListener;
import android.support.v7.widget.RecyclerView.ViewHolder;
import android.view.View;
import java.util.ArrayList;
import java.util.List;
${definition}"
      associated_classes
	class_ref 1194423 // DefaultItemAnimator
      end
      comment "Copyright (C) 2014 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end

  package_ref 218423 // helper
end
