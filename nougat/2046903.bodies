class SipSession
!!!36731575.java!!!	SipSession(inout realSession : ISipSession)
        mSession = realSession;
        if (realSession != null) {
            try {
                realSession.setListener(createListener());
            } catch (RemoteException e) {
                loge("SipSession.setListener:", e);
            }
        }
!!!36731703.java!!!	SipSession(inout realSession : ISipSession, inout listener : SipSession::Listener)
        this(realSession);
        setListener(listener);
!!!36731831.java!!!	getLocalIp() : String
        try {
            return mSession.getLocalIp();
        } catch (RemoteException e) {
            loge("getLocalIp:", e);
            return "127.0.0.1";
        }
!!!36731959.java!!!	getLocalProfile() : SipProfile
        try {
            return mSession.getLocalProfile();
        } catch (RemoteException e) {
            loge("getLocalProfile:", e);
            return null;
        }
!!!36732087.java!!!	getPeerProfile() : SipProfile
        try {
            return mSession.getPeerProfile();
        } catch (RemoteException e) {
            loge("getPeerProfile:", e);
            return null;
        }
!!!36732215.java!!!	getState() : int
        try {
            return mSession.getState();
        } catch (RemoteException e) {
            loge("getState:", e);
            return State.NOT_DEFINED;
        }
!!!36732343.java!!!	isInCall() : boolean
        try {
            return mSession.isInCall();
        } catch (RemoteException e) {
            loge("isInCall:", e);
            return false;
        }
!!!36732471.java!!!	getCallId() : String
        try {
            return mSession.getCallId();
        } catch (RemoteException e) {
            loge("getCallId:", e);
            return null;
        }
!!!36732599.java!!!	setListener(inout listener : SipSession::Listener) : void
        mListener = listener;
!!!36732727.java!!!	register(in duration : int) : void
        try {
            mSession.register(duration);
        } catch (RemoteException e) {
            loge("register:", e);
        }
!!!36732855.java!!!	unregister() : void
        try {
            mSession.unregister();
        } catch (RemoteException e) {
            loge("unregister:", e);
        }
!!!36732983.java!!!	makeCall(inout callee : SipProfile, inout sessionDescription : String, in timeout : int) : void
        try {
            mSession.makeCall(callee, sessionDescription, timeout);
        } catch (RemoteException e) {
            loge("makeCall:", e);
        }
!!!36733111.java!!!	answerCall(inout sessionDescription : String, in timeout : int) : void
        try {
            mSession.answerCall(sessionDescription, timeout);
        } catch (RemoteException e) {
            loge("answerCall:", e);
        }
!!!36733239.java!!!	endCall() : void
        try {
            mSession.endCall();
        } catch (RemoteException e) {
            loge("endCall:", e);
        }
!!!36733367.java!!!	changeCall(inout sessionDescription : String, in timeout : int) : void
        try {
            mSession.changeCall(sessionDescription, timeout);
        } catch (RemoteException e) {
            loge("changeCall:", e);
        }
!!!36733495.java!!!	getRealSession() : ISipSession
        return mSession;
!!!36733623.java!!!	createListener() : ISipSessionListener
        return new ISipSessionListener.Stub() {
            @Override
            public void onCalling(ISipSession session) {
                if (mListener != null) {
                    mListener.onCalling(SipSession.this);
                }
            }

            @Override
            public void onRinging(ISipSession session, SipProfile caller,
                    String sessionDescription) {
                if (mListener != null) {
                    mListener.onRinging(SipSession.this, caller,
                            sessionDescription);
                }
            }

            @Override
            public void onRingingBack(ISipSession session) {
                if (mListener != null) {
                    mListener.onRingingBack(SipSession.this);
                }
            }

            @Override
            public void onCallEstablished(ISipSession session,
                    String sessionDescription) {
                if (mListener != null) {
                    mListener.onCallEstablished(SipSession.this,
                            sessionDescription);
                }
            }

            @Override
            public void onCallEnded(ISipSession session) {
                if (mListener != null) {
                    mListener.onCallEnded(SipSession.this);
                }
            }

            @Override
            public void onCallBusy(ISipSession session) {
                if (mListener != null) {
                    mListener.onCallBusy(SipSession.this);
                }
            }

            @Override
            public void onCallTransferring(ISipSession session,
                    String sessionDescription) {
                if (mListener != null) {
                    mListener.onCallTransferring(
                            new SipSession(session, SipSession.this.mListener),
                            sessionDescription);

                }
            }

            @Override
            public void onCallChangeFailed(ISipSession session, int errorCode,
                    String message) {
                if (mListener != null) {
                    mListener.onCallChangeFailed(SipSession.this, errorCode,
                            message);
                }
            }

            @Override
            public void onError(ISipSession session, int errorCode, String message) {
                if (mListener != null) {
                    mListener.onError(SipSession.this, errorCode, message);
                }
            }

            @Override
            public void onRegistering(ISipSession session) {
                if (mListener != null) {
                    mListener.onRegistering(SipSession.this);
                }
            }

            @Override
            public void onRegistrationDone(ISipSession session, int duration) {
                if (mListener != null) {
                    mListener.onRegistrationDone(SipSession.this, duration);
                }
            }

            @Override
            public void onRegistrationFailed(ISipSession session, int errorCode,
                    String message) {
                if (mListener != null) {
                    mListener.onRegistrationFailed(SipSession.this, errorCode,
                            message);
                }
            }

            @Override
            public void onRegistrationTimeout(ISipSession session) {
                if (mListener != null) {
                    mListener.onRegistrationTimeout(SipSession.this);
                }
            }
        };
!!!36733751.java!!!	loge(inout s : String, inout t : Throwable) : void
        Rlog.e(TAG, s, t);
