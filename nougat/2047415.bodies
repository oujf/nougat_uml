class SipManager
!!!36719031.java!!!	newInstance(inout context : Context) : SipManager
        return (isApiSupported(context) ? new SipManager(context) : null);
!!!36719159.java!!!	isApiSupported(inout context : Context) : boolean
        return context.getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_SIP);
!!!36719287.java!!!	isVoipSupported(inout context : Context) : boolean
        return context.getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_SIP_VOIP) && isApiSupported(context);
!!!36719415.java!!!	isSipWifiOnly(inout context : Context) : boolean
        return context.getResources().getBoolean(
                com.android.internal.R.bool.config_sip_wifi_only);
!!!36719543.java!!!	SipManager(inout context : Context)
        mContext = context;
        createSipService();
!!!36719671.java!!!	createSipService() : void
        if (mSipService == null) {
            IBinder b = ServiceManager.getService(Context.SIP_SERVICE);
            mSipService = ISipService.Stub.asInterface(b);
        }
!!!36719799.java!!!	checkSipServiceConnection() : void
        createSipService();
        if (mSipService == null) {
            throw new SipException("SipService is dead and is restarting...", new Exception());
        }
!!!36719927.java!!!	open(inout localProfile : SipProfile) : void
        try {
            checkSipServiceConnection();
            mSipService.open(localProfile, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw new SipException("open()", e);
        }
!!!36720055.java!!!	open(inout localProfile : SipProfile, inout incomingCallPendingIntent : PendingIntent, inout listener : SipRegistrationListener) : void
        if (incomingCallPendingIntent == null) {
            throw new NullPointerException(
                    "incomingCallPendingIntent cannot be null");
        }
        try {
            checkSipServiceConnection();
            mSipService.open3(localProfile, incomingCallPendingIntent,
                    createRelay(listener, localProfile.getUriString()),
                    mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw new SipException("open()", e);
        }
!!!36720183.java!!!	setRegistrationListener(inout localProfileUri : String, inout listener : SipRegistrationListener) : void
        try {
            checkSipServiceConnection();
            mSipService.setRegistrationListener(
                    localProfileUri, createRelay(listener, localProfileUri),
                    mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw new SipException("setRegistrationListener()", e);
        }
!!!36720311.java!!!	close(inout localProfileUri : String) : void
        try {
            checkSipServiceConnection();
            mSipService.close(localProfileUri, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw new SipException("close()", e);
        }
!!!36720439.java!!!	isOpened(inout localProfileUri : String) : boolean
        try {
            checkSipServiceConnection();
            return mSipService.isOpened(localProfileUri, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw new SipException("isOpened()", e);
        }
!!!36720567.java!!!	isRegistered(inout localProfileUri : String) : boolean
        try {
            checkSipServiceConnection();
            return mSipService.isRegistered(localProfileUri, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw new SipException("isRegistered()", e);
        }
!!!36720695.java!!!	makeAudioCall(inout localProfile : SipProfile, inout peerProfile : SipProfile, inout listener : SipAudioCall::Listener, in timeout : int) : SipAudioCall
        if (!isVoipSupported(mContext)) {
            throw new SipException("VOIP API is not supported");
        }
        SipAudioCall call = new SipAudioCall(mContext, localProfile);
        call.setListener(listener);
        SipSession s = createSipSession(localProfile, null);
        call.makeCall(peerProfile, s, timeout);
        return call;
!!!36720823.java!!!	makeAudioCall(inout localProfileUri : String, inout peerProfileUri : String, inout listener : SipAudioCall::Listener, in timeout : int) : SipAudioCall
        if (!isVoipSupported(mContext)) {
            throw new SipException("VOIP API is not supported");
        }
        try {
            return makeAudioCall(
                    new SipProfile.Builder(localProfileUri).build(),
                    new SipProfile.Builder(peerProfileUri).build(), listener,
                    timeout);
        } catch (ParseException e) {
            throw new SipException("build SipProfile", e);
        }
!!!36720951.java!!!	takeAudioCall(inout incomingCallIntent : Intent, inout listener : SipAudioCall::Listener) : SipAudioCall
        if (incomingCallIntent == null) {
            throw new SipException("Cannot retrieve session with null intent");
        }

        String callId = getCallId(incomingCallIntent);
        if (callId == null) {
            throw new SipException("Call ID missing in incoming call intent");
        }

        String offerSd = getOfferSessionDescription(incomingCallIntent);
        if (offerSd == null) {
            throw new SipException("Session description missing in incoming "
                    + "call intent");
        }

        try {
            checkSipServiceConnection();
            ISipSession session = mSipService.getPendingSession(callId,
                    mContext.getOpPackageName());
            if (session == null) {
                throw new SipException("No pending session for the call");
            }
            SipAudioCall call = new SipAudioCall(
                    mContext, session.getLocalProfile());
            call.attachCall(new SipSession(session), offerSd);
            call.setListener(listener);
            return call;
        } catch (Throwable t) {
            throw new SipException("takeAudioCall()", t);
        }
!!!36721079.java!!!	isIncomingCallIntent(inout intent : Intent) : boolean
        if (intent == null) return false;
        String callId = getCallId(intent);
        String offerSd = getOfferSessionDescription(intent);
        return ((callId != null) && (offerSd != null));
!!!36721207.java!!!	getCallId(inout incomingCallIntent : Intent) : String
        return incomingCallIntent.getStringExtra(EXTRA_CALL_ID);
!!!36721335.java!!!	getOfferSessionDescription(inout incomingCallIntent : Intent) : String
        return incomingCallIntent.getStringExtra(EXTRA_OFFER_SD);
!!!36721463.java!!!	createIncomingCallBroadcast(inout callId : String, inout sessionDescription : String) : Intent
        Intent intent = new Intent();
        intent.putExtra(EXTRA_CALL_ID, callId);
        intent.putExtra(EXTRA_OFFER_SD, sessionDescription);
        return intent;
!!!36721591.java!!!	register(inout localProfile : SipProfile, in expiryTime : int, inout listener : SipRegistrationListener) : void
        try {
            checkSipServiceConnection();
            ISipSession session = mSipService.createSession(localProfile,
                    createRelay(listener, localProfile.getUriString()),
                    mContext.getOpPackageName());
            if (session == null) {
                throw new SipException(
                        "SipService.createSession() returns null");
            }
            session.register(expiryTime);
        } catch (RemoteException e) {
            throw new SipException("register()", e);
        }
!!!36721719.java!!!	unregister(inout localProfile : SipProfile, inout listener : SipRegistrationListener) : void
        try {
            checkSipServiceConnection();
            ISipSession session = mSipService.createSession(localProfile,
                    createRelay(listener, localProfile.getUriString()),
                    mContext.getOpPackageName());
            if (session == null) {
                throw new SipException(
                        "SipService.createSession() returns null");
            }
            session.unregister();
        } catch (RemoteException e) {
            throw new SipException("unregister()", e);
        }
!!!36721847.java!!!	getSessionFor(inout incomingCallIntent : Intent) : SipSession
        try {
            checkSipServiceConnection();
            String callId = getCallId(incomingCallIntent);
            ISipSession s = mSipService.getPendingSession(callId,
                    mContext.getOpPackageName());
            return ((s == null) ? null : new SipSession(s));
        } catch (RemoteException e) {
            throw new SipException("getSessionFor()", e);
        }
!!!36721975.java!!!	createRelay(inout listener : SipRegistrationListener, inout uri : String) : ISipSessionListener
        return ((listener == null) ? null : new ListenerRelay(listener, uri));
!!!36722103.java!!!	createSipSession(inout localProfile : SipProfile, inout listener : SipSession::Listener) : SipSession
        try {
            checkSipServiceConnection();
            ISipSession s = mSipService.createSession(localProfile, null,
                    mContext.getOpPackageName());
            if (s == null) {
                throw new SipException(
                        "Failed to create SipSession; network unavailable?");
            }
            return new SipSession(s, listener);
        } catch (RemoteException e) {
            throw new SipException("createSipSession()", e);
        }
!!!36722231.java!!!	getListOfProfiles() : SipProfile
        try {
            checkSipServiceConnection();
            return mSipService.getListOfProfiles(mContext.getOpPackageName());
        } catch (RemoteException e) {
            return new SipProfile[0];
        }
