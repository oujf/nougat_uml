class Builder
!!!36724791.java!!!	Builder(inout profile : SipProfile)
            if (profile == null) throw new NullPointerException();
            try {
                mProfile = (SipProfile) profile.clone();
            } catch (CloneNotSupportedException e) {
                throw new RuntimeException("should not occur", e);
            }
            mProfile.mAddress = null;
            mUri = profile.getUri();
            mUri.setUserPassword(profile.getPassword());
            mDisplayName = profile.getDisplayName();
            mProxyAddress = profile.getProxyAddress();
            mProfile.mPort = profile.getPort();
!!!36724919.java!!!	Builder(inout uriString : String)
            if (uriString == null) {
                throw new NullPointerException("uriString cannot be null");
            }
            URI uri = mAddressFactory.createURI(fix(uriString));
            if (uri instanceof SipURI) {
                mUri = (SipURI) uri;
            } else {
                throw new ParseException(uriString + " is not a SIP URI", 0);
            }
            mProfile.mDomain = mUri.getHost();
!!!36725047.java!!!	Builder(inout username : String, inout serverDomain : String)
            if ((username == null) || (serverDomain == null)) {
                throw new NullPointerException(
                        "username and serverDomain cannot be null");
            }
            mUri = mAddressFactory.createSipURI(username, serverDomain);
            mProfile.mDomain = serverDomain;
!!!36725175.java!!!	fix(inout uriString : String) : String
            return (uriString.trim().toLowerCase().startsWith("sip:")
                    ? uriString
                    : "sip:" + uriString);
!!!36725303.java!!!	setAuthUserName(inout name : String) : SipProfile::Builder
            mProfile.mAuthUserName = name;
            return this;
!!!36725431.java!!!	setProfileName(inout name : String) : SipProfile::Builder
            mProfile.mProfileName = name;
            return this;
!!!36725559.java!!!	setPassword(inout password : String) : SipProfile::Builder
            mUri.setUserPassword(password);
            return this;
!!!36725687.java!!!	setPort(in port : int) : SipProfile::Builder
            if ((port > 65535) || (port < 1000)) {
                throw new IllegalArgumentException("incorrect port arugment: " + port);
            }
            mProfile.mPort = port;
            return this;
!!!36725815.java!!!	setProtocol(inout protocol : String) : SipProfile::Builder
            if (protocol == null) {
                throw new NullPointerException("protocol cannot be null");
            }
            protocol = protocol.toUpperCase();
            if (!protocol.equals(UDP) && !protocol.equals(TCP)) {
                throw new IllegalArgumentException(
                        "unsupported protocol: " + protocol);
            }
            mProfile.mProtocol = protocol;
            return this;
!!!36725943.java!!!	setOutboundProxy(inout outboundProxy : String) : SipProfile::Builder
            mProxyAddress = outboundProxy;
            return this;
!!!36726071.java!!!	setDisplayName(inout displayName : String) : SipProfile::Builder
            mDisplayName = displayName;
            return this;
!!!36726199.java!!!	setSendKeepAlive(inout flag : boolean) : SipProfile::Builder
            mProfile.mSendKeepAlive = flag;
            return this;
!!!36726327.java!!!	setAutoRegistration(inout flag : boolean) : SipProfile::Builder
            mProfile.mAutoRegistration = flag;
            return this;
!!!36726455.java!!!	build() : SipProfile
            // remove password from URI
            mProfile.mPassword = mUri.getUserPassword();
            mUri.setUserPassword(null);
            try {
                if (!TextUtils.isEmpty(mProxyAddress)) {
                    SipURI uri = (SipURI)
                            mAddressFactory.createURI(fix(mProxyAddress));
                    mProfile.mProxyAddress = uri.getHost();
                } else {
                    if (!mProfile.mProtocol.equals(UDP)) {
                        mUri.setTransportParam(mProfile.mProtocol);
                    }
                    if (mProfile.mPort != DEFAULT_PORT) {
                        mUri.setPort(mProfile.mPort);
                    }
                }
                mProfile.mAddress = mAddressFactory.createAddress(
                        mDisplayName, mUri);
            } catch (InvalidArgumentException e) {
                throw new RuntimeException(e);
            } catch (ParseException e) {
                // must not occur
                throw new RuntimeException(e);
            }
            return mProfile;
