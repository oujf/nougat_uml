class SipSessionGroup
!!!36744887.java!!!	SipSessionGroup(inout profile : SipProfile, inout password : String, inout timer : SipWakeupTimer, inout wakeLock : SipWakeLock)
        mLocalProfile = profile;
        mPassword = password;
        mWakeupTimer = timer;
        mWakeLock = wakeLock;
        reset();
!!!36745015.java!!!	setWakeupTimer(inout timer : SipWakeupTimer) : void
        mWakeupTimer = timer;
!!!36745143.java!!!	reset() : void
        Properties properties = new Properties();

        String protocol = mLocalProfile.getProtocol();
        int port = mLocalProfile.getPort();
        String server = mLocalProfile.getProxyAddress();

        if (!TextUtils.isEmpty(server)) {
            properties.setProperty("javax.sip.OUTBOUND_PROXY",
                    server + ':' + port + '/' + protocol);
        } else {
            server = mLocalProfile.getSipDomain();
        }
        if (server.startsWith("[") && server.endsWith("]")) {
            server = server.substring(1, server.length() - 1);
        }

        String local = null;
        try {
            for (InetAddress remote : InetAddress.getAllByName(server)) {
                DatagramSocket socket = new DatagramSocket();
                socket.connect(remote, port);
                if (socket.isConnected()) {
                    local = socket.getLocalAddress().getHostAddress();
                    port = socket.getLocalPort();
                    socket.close();
                    break;
                }
                socket.close();
            }
        } catch (Exception e) {
            // ignore.
        }
        if (local == null) {
            // We are unable to reach the server. Just bail out.
            return;
        }

        close();
        mLocalIp = local;

        properties.setProperty("javax.sip.STACK_NAME", getStackName());
        properties.setProperty(
                "gov.nist.javax.sip.THREAD_POOL_SIZE", THREAD_POOL_SIZE);
        mSipStack = SipFactory.getInstance().createSipStack(properties);
        try {
            SipProvider provider = mSipStack.createSipProvider(
                    mSipStack.createListeningPoint(local, port, protocol));
            provider.addSipListener(this);
            mSipHelper = new SipHelper(mSipStack, provider);
        } catch (SipException e) {
            throw e;
        } catch (Exception e) {
            throw new SipException("failed to initialize SIP stack", e);
        }

        if (DBG) log("reset: start stack for " + mLocalProfile.getUriString());
        mSipStack.start();
!!!36745271.java!!!	onConnectivityChanged() : void
        SipSessionImpl[] ss = mSessionMap.values().toArray(
                    new SipSessionImpl[mSessionMap.size()]);
        // Iterate on the copied array instead of directly on mSessionMap to
        // avoid ConcurrentModificationException being thrown when
        // SipSessionImpl removes itself from mSessionMap in onError() in the
        // following loop.
        for (SipSessionImpl s : ss) {
            s.onError(SipErrorCode.DATA_CONNECTION_LOST,
                    "data connection lost");
        }
!!!36745399.java!!!	resetExternalAddress() : void
        if (DBG) {
            log("resetExternalAddress: " + mSipStack);
        }
        mExternalIp = null;
        mExternalPort = 0;
!!!36745527.java!!!	getLocalProfile() : SipProfile
        return mLocalProfile;
!!!36745655.java!!!	getLocalProfileUri() : String
        return mLocalProfile.getUriString();
!!!36745783.java!!!	getStackName() : String
        return "stack" + System.currentTimeMillis();
!!!36745911.java!!!	close() : void
        if (DBG) log("close: " + SipService.obfuscateSipUri(mLocalProfile.getUriString()));
        onConnectivityChanged();
        mSessionMap.clear();
        closeToNotReceiveCalls();
        if (mSipStack != null) {
            mSipStack.stop();
            mSipStack = null;
            mSipHelper = null;
        }
        resetExternalAddress();
!!!36746039.java!!!	isClosed() : boolean
        return (mSipStack == null);
!!!36746167.java!!!	openToReceiveCalls(inout listener : ISipSessionListener) : void
        if (mCallReceiverSession == null) {
            mCallReceiverSession = new SipSessionCallReceiverImpl(listener);
        } else {
            mCallReceiverSession.setListener(listener);
        }
!!!36746295.java!!!	closeToNotReceiveCalls() : void
        mCallReceiverSession = null;
!!!36746423.java!!!	createSession(inout listener : ISipSessionListener) : ISipSession
        return (isClosed() ? null : new SipSessionImpl(listener));
!!!36746551.java!!!	containsSession(inout callId : String) : boolean
        return mSessionMap.containsKey(callId);
!!!36746679.java!!!	getSipSession(inout event : EventObject) : SipSessionGroup::SipSessionImpl
        String key = SipHelper.getCallId(event);
        SipSessionImpl session = mSessionMap.get(key);
        if ((session != null) && isLoggable(session)) {
            if (DBG) log("getSipSession: event=" + key);
            if (DBG) log("getSipSession: active sessions:");
            for (String k : mSessionMap.keySet()) {
                if (DBG) log("getSipSession: ..." + k + ": " + mSessionMap.get(k));
            }
        }
        return ((session != null) ? session : mCallReceiverSession);
!!!36746807.java!!!	addSipSession(inout newSession : SipSessionGroup::SipSessionImpl) : void
        removeSipSession(newSession);
        String key = newSession.getCallId();
        mSessionMap.put(key, newSession);
        if (isLoggable(newSession)) {
            if (DBG) log("addSipSession: key='" + key + "'");
            for (String k : mSessionMap.keySet()) {
                if (DBG) log("addSipSession:  " + k + ": " + mSessionMap.get(k));
            }
        }
!!!36746935.java!!!	removeSipSession(inout session : SipSessionGroup::SipSessionImpl) : void
        if (session == mCallReceiverSession) return;
        String key = session.getCallId();
        SipSessionImpl s = mSessionMap.remove(key);
        // sanity check
        if ((s != null) && (s != session)) {
            if (DBG) log("removeSession: " + session + " is not associated with key '"
                    + key + "'");
            mSessionMap.put(key, s);
            for (Map.Entry<String, SipSessionImpl> entry
                    : mSessionMap.entrySet()) {
                if (entry.getValue() == s) {
                    key = entry.getKey();
                    mSessionMap.remove(key);
                }
            }
        }

        if ((s != null) && isLoggable(s)) {
            if (DBG) log("removeSession: " + session + " @key '" + key + "'");
            for (String k : mSessionMap.keySet()) {
                if (DBG) log("removeSession:  " + k + ": " + mSessionMap.get(k));
            }
        }
!!!36747063.java!!!	processRequest(in event : RequestEvent) : void
        if (isRequestEvent(Request.INVITE, event)) {
            if (DBG) log("processRequest: mWakeLock.acquire got INVITE, thread:"
                    + Thread.currentThread());
            // Acquire a wake lock and keep it for WAKE_LOCK_HOLDING_TIME;
            // should be large enough to bring up the app.
            mWakeLock.acquire(WAKE_LOCK_HOLDING_TIME);
        }
        process(event);
!!!36747191.java!!!	processResponse(inout event : ResponseEvent) : void
        process(event);
!!!36747319.java!!!	processIOException(inout event : IOExceptionEvent) : void
        process(event);
!!!36747447.java!!!	processTimeout(inout event : TimeoutEvent) : void
        process(event);
!!!36747575.java!!!	processTransactionTerminated(inout event : TransactionTerminatedEvent) : void
        process(event);
!!!36747703.java!!!	processDialogTerminated(inout event : DialogTerminatedEvent) : void
        process(event);
!!!36747831.java!!!	process(inout event : EventObject) : void
        SipSessionImpl session = getSipSession(event);
        try {
            boolean isLoggable = isLoggable(session, event);
            boolean processed = (session != null) && session.process(event);
            if (isLoggable && processed) {
                log("process: event new state after: "
                        + SipSession.State.toString(session.mState));
            }
        } catch (Throwable e) {
            loge("process: error event=" + event, getRootCause(e));
            session.onError(e);
        }
!!!36747959.java!!!	extractContent(inout message : Message) : String
        // Currently we do not support secure MIME bodies.
        byte[] bytes = message.getRawContent();
        if (bytes != null) {
            try {
                if (message instanceof SIPMessage) {
                    return ((SIPMessage) message).getMessageContent();
                } else {
                    return new String(bytes, "UTF-8");
                }
            } catch (UnsupportedEncodingException e) {
            }
        }
        return null;
!!!36748087.java!!!	extractExternalAddress(inout evt : ResponseEvent) : void
        Response response = evt.getResponse();
        ViaHeader viaHeader = (ViaHeader)(response.getHeader(
                SIPHeaderNames.VIA));
        if (viaHeader == null) return;
        int rport = viaHeader.getRPort();
        String externalIp = viaHeader.getReceived();
        if ((rport > 0) && (externalIp != null)) {
            mExternalIp = externalIp;
            mExternalPort = rport;
            if (DBG) {
                log("extractExternalAddress: external addr " + externalIp + ":" + rport
                        + " on " + mSipStack);
            }
        }
!!!36748215.java!!!	getRootCause(inout exception : Throwable) : Throwable
        Throwable cause = exception.getCause();
        while (cause != null) {
            exception = cause;
            cause = exception.getCause();
        }
        return exception;
!!!36748343.java!!!	createNewSession(inout event : RequestEvent, inout listener : ISipSessionListener, inout transaction : ServerTransaction, in newState : int) : SipSessionGroup::SipSessionImpl
        SipSessionImpl newSession = new SipSessionImpl(listener);
        newSession.mServerTransaction = transaction;
        newSession.mState = newState;
        newSession.mDialog = newSession.mServerTransaction.getDialog();
        newSession.mInviteReceived = event;
        newSession.mPeerProfile = createPeerProfile((HeaderAddress)
                event.getRequest().getHeader(FromHeader.NAME));
        newSession.mPeerSessionDescription =
                extractContent(event.getRequest());
        return newSession;
!!!36759223.java!!!	isRequestEvent(inout method : String, inout event : EventObject) : boolean
        try {
            if (event instanceof RequestEvent) {
                RequestEvent requestEvent = (RequestEvent) event;
                return method.equals(requestEvent.getRequest().getMethod());
            }
        } catch (Throwable e) {
        }
        return false;
!!!36759351.java!!!	getCseqMethod(inout message : Message) : String
        return ((CSeqHeader) message.getHeader(CSeqHeader.NAME)).getMethod();
!!!36759479.java!!!	expectResponse(inout expectedMethod : String, inout evt : EventObject) : boolean
        if (evt instanceof ResponseEvent) {
            ResponseEvent event = (ResponseEvent) evt;
            Response response = event.getResponse();
            return expectedMethod.equalsIgnoreCase(getCseqMethod(response));
        }
        return false;
!!!36759607.java!!!	createPeerProfile(inout header : HeaderAddress) : SipProfile
        try {
            Address address = header.getAddress();
            SipURI uri = (SipURI) address.getURI();
            String username = uri.getUser();
            if (username == null) username = ANONYMOUS;
            int port = uri.getPort();
            SipProfile.Builder builder =
                    new SipProfile.Builder(username, uri.getHost())
                    .setDisplayName(address.getDisplayName());
            if (port > 0) builder.setPort(port);
            return builder.build();
        } catch (IllegalArgumentException e) {
            throw new SipException("createPeerProfile()", e);
        } catch (ParseException e) {
            throw new SipException("createPeerProfile()", e);
        }
!!!36759735.java!!!	isLoggable(inout s : SipSessionGroup::SipSessionImpl) : boolean
        if (s != null) {
            switch (s.mState) {
                case SipSession.State.PINGING:
                    return DBG_PING;
            }
        }
        return DBG;
!!!36759863.java!!!	isLoggable(inout evt : EventObject) : boolean
        return isLoggable(null, evt);
!!!36759991.java!!!	isLoggable(inout s : SipSessionGroup::SipSessionImpl, inout evt : EventObject) : boolean
        if (!isLoggable(s)) return false;
        if (evt == null) return false;

        if (evt instanceof ResponseEvent) {
            Response response = ((ResponseEvent) evt).getResponse();
            if (Request.OPTIONS.equals(response.getHeader(CSeqHeader.NAME))) {
                return DBG_PING;
            }
            return DBG;
        } else if (evt instanceof RequestEvent) {
            if (isRequestEvent(Request.OPTIONS, evt)) {
                return DBG_PING;
            }
            return DBG;
        }
        return false;
!!!36760119.java!!!	logEvt(inout evt : EventObject) : String
        if (evt instanceof RequestEvent) {
            return ((RequestEvent) evt).getRequest().toString();
        } else if (evt instanceof ResponseEvent) {
            return ((ResponseEvent) evt).getResponse().toString();
        } else {
            return evt.toString();
        }
!!!36761655.java!!!	log(inout s : String) : void
        Rlog.d(TAG, s);
!!!36761783.java!!!	loge(inout s : String, inout t : Throwable) : void
        Rlog.e(TAG, s, t);
