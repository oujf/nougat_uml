class SoftApManager
!!!36792119.java!!!	SoftApManager(inout context : Context, inout looper : Looper, inout wifiNative : WifiNative, inout nmService : INetworkManagementService, inout connectivityManager : ConnectivityManager, inout countryCode : String, inout allowed2GChannels : ArrayList<Integer>, inout listener : SoftApManager::Listener)
        mStateMachine = new SoftApStateMachine(looper);

        mContext = context;
        mNmService = nmService;
        mWifiNative = wifiNative;
        mConnectivityManager = connectivityManager;
        mCountryCode = countryCode;
        mAllowed2GChannels = allowed2GChannels;
        mListener = listener;

        mInterfaceName = mWifiNative.getInterfaceName();

        /* Register receiver for tether state changes. */
        mContext.registerReceiver(
                new BroadcastReceiver() {
                    @Override
                    public void onReceive(Context context, Intent intent) {
                        ArrayList<String> available = intent.getStringArrayListExtra(
                                ConnectivityManager.EXTRA_AVAILABLE_TETHER);
                        ArrayList<String> active = intent.getStringArrayListExtra(
                                ConnectivityManager.EXTRA_ACTIVE_TETHER);
                        mStateMachine.sendMessage(
                                SoftApStateMachine.CMD_TETHER_STATE_CHANGE,
                                new TetherStateChange(available, active));
                    }
                }, new IntentFilter(ConnectivityManager.ACTION_TETHER_STATE_CHANGED));
!!!36792247.java!!!	start(inout config : WifiConfiguration) : void
        mStateMachine.sendMessage(SoftApStateMachine.CMD_START, config);
!!!36792375.java!!!	stop() : void
        mStateMachine.sendMessage(SoftApStateMachine.CMD_STOP);
!!!36792503.java!!!	updateApState(in state : int, in reason : int) : void
        if (mListener != null) {
            mListener.onStateChanged(state, reason);
        }
!!!36792631.java!!!	startSoftAp(inout config : WifiConfiguration) : int
        if (config == null) {
            Log.e(TAG, "Unable to start soft AP without configuration");
            return ERROR_GENERIC;
        }

        /* Make a copy of configuration for updating AP band and channel. */
        WifiConfiguration localConfig = new WifiConfiguration(config);

        int result = ApConfigUtil.updateApChannelConfig(
                mWifiNative, mCountryCode, mAllowed2GChannels, localConfig);
        if (result != SUCCESS) {
            Log.e(TAG, "Failed to update AP band and channel");
            return result;
        }

        /* Setup country code if it is provide. */
        if (mCountryCode != null) {
            /**
             * Country code is mandatory for 5GHz band, return an error if failed to set
             * country code when AP is configured for 5GHz band.
             */
            if (!mWifiNative.setCountryCodeHal(mCountryCode.toUpperCase(Locale.ROOT))
                    && config.apBand == WifiConfiguration.AP_BAND_5GHZ) {
                Log.e(TAG, "Failed to set country code, required for setting up "
                        + "soft ap in 5GHz");
                return ERROR_GENERIC;
            }
        }

        try {
            mNmService.startAccessPoint(localConfig, mInterfaceName);
        } catch (Exception e) {
            Log.e(TAG, "Exception in starting soft AP: " + e);
            return ERROR_GENERIC;
        }

        Log.d(TAG, "Soft AP is started");

        return SUCCESS;
!!!36792759.java!!!	stopSoftAp() : void
        try {
            mNmService.stopAccessPoint(mInterfaceName);
        } catch (Exception e) {
            Log.e(TAG, "Exception in stopping soft AP: " + e);
            return;
        }
        Log.d(TAG, "Soft AP is stopped");
!!!36792887.java!!!	startTethering(inout available : ArrayList<String>) : boolean
        String[] wifiRegexs = mConnectivityManager.getTetherableWifiRegexs();

        for (String intf : available) {
            for (String regex : wifiRegexs) {
                if (intf.matches(regex)) {
                    try {
                        InterfaceConfiguration ifcg =
                                mNmService.getInterfaceConfig(intf);
                        if (ifcg != null) {
                            /* IP/netmask: 192.168.43.1/255.255.255.0 */
                            ifcg.setLinkAddress(new LinkAddress(
                                    NetworkUtils.numericToInetAddress("192.168.43.1"), 24));
                            ifcg.setInterfaceUp();

                            mNmService.setInterfaceConfig(intf, ifcg);
                        }
                    } catch (Exception e) {
                        Log.e(TAG, "Error configuring interface " + intf + ", :" + e);
                        return false;
                    }

                    if (mConnectivityManager.tether(intf)
                            != ConnectivityManager.TETHER_ERROR_NO_ERROR) {
                        Log.e(TAG, "Error tethering on " + intf);
                        return false;
                    }
                    mTetherInterfaceName = intf;
                    return true;
                }
            }
        }
        /* We found no interfaces to tether. */
        return false;
!!!36793015.java!!!	stopTethering() : void
        try {
            /* Clear the interface address. */
            InterfaceConfiguration ifcg =
                    mNmService.getInterfaceConfig(mTetherInterfaceName);
            if (ifcg != null) {
                ifcg.setLinkAddress(
                        new LinkAddress(
                                NetworkUtils.numericToInetAddress("0.0.0.0"), 0));
                mNmService.setInterfaceConfig(mTetherInterfaceName, ifcg);
            }
        } catch (Exception e) {
            Log.e(TAG, "Error resetting interface " + mTetherInterfaceName + ", :" + e);
        }

        if (mConnectivityManager.untether(mTetherInterfaceName)
                != ConnectivityManager.TETHER_ERROR_NO_ERROR) {
            Log.e(TAG, "Untether initiate failed!");
        }
!!!36793143.java!!!	isWifiTethered(inout active : ArrayList<String>) : boolean
        String[] wifiRegexs = mConnectivityManager.getTetherableWifiRegexs();
        for (String intf : active) {
            for (String regex : wifiRegexs) {
                if (intf.matches(regex)) {
                    return true;
                }
            }
        }
        /* No tethered interface. */
        return false;
