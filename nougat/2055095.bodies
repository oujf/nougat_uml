class ScanDetail
!!!36787767.java!!!	ScanDetail(inout networkDetail : NetworkDetail, inout wifiSsid : WifiSsid, inout bssid : String, inout caps : String, in level : int, in frequency : int, in tsf : long, inout informationElements : ScanResult::InformationElement, inout anqpLines : List<String>)
        mNetworkDetail = networkDetail;
        mScanResult = new ScanResult(wifiSsid, bssid, networkDetail.getHESSID(),
                networkDetail.getAnqpDomainID(), networkDetail.getOsuProviders(),
                caps, level, frequency, tsf);
        mSeen = System.currentTimeMillis();
        //mScanResult.seen = mSeen;
        mScanResult.channelWidth = networkDetail.getChannelWidth();
        mScanResult.centerFreq0 = networkDetail.getCenterfreq0();
        mScanResult.centerFreq1 = networkDetail.getCenterfreq1();
        mScanResult.informationElements = informationElements;
        mScanResult.anqpLines = anqpLines;
        if (networkDetail.is80211McResponderSupport()) {
            mScanResult.setFlag(ScanResult.FLAG_80211mc_RESPONDER);
        }
        mMatches = null;
!!!36787895.java!!!	ScanDetail(inout wifiSsid : WifiSsid, inout bssid : String, inout caps : String, in level : int, in frequency : int, in tsf : long, in seen : long)
        mNetworkDetail = null;
        mScanResult = new ScanResult(wifiSsid, bssid, 0L, -1, null, caps, level, frequency, tsf);
        mSeen = seen;
        //mScanResult.seen = mSeen;
        mScanResult.channelWidth = 0;
        mScanResult.centerFreq0 = 0;
        mScanResult.centerFreq1 = 0;
        mScanResult.flags = 0;
        mMatches = null;
!!!36788023.java!!!	ScanDetail(inout scanResult : ScanResult, inout networkDetail : NetworkDetail, inout matches : Map<HomeSP, PasspointMatch>)
        mScanResult = scanResult;
        mNetworkDetail = networkDetail;
        mMatches = matches;
        mSeen = mScanResult.seen;
!!!36788151.java!!!	updateResults(inout networkDetail : NetworkDetail, in level : int, inout wssid : WifiSsid, inout ssid : String, inout flags : String, in freq : int, in tsf : long) : void
        mScanResult.level = level;
        mScanResult.wifiSsid = wssid;
        // Keep existing API
        mScanResult.SSID = ssid;
        mScanResult.capabilities = flags;
        mScanResult.frequency = freq;
        mScanResult.timestamp = tsf;
        mSeen = System.currentTimeMillis();
        //mScanResult.seen = mSeen;
        mScanResult.channelWidth = networkDetail.getChannelWidth();
        mScanResult.centerFreq0 = networkDetail.getCenterfreq0();
        mScanResult.centerFreq1 = networkDetail.getCenterfreq1();
        if (networkDetail.is80211McResponderSupport()) {
            mScanResult.setFlag(ScanResult.FLAG_80211mc_RESPONDER);
        }
        if (networkDetail.isInterworking()) {
            mScanResult.setFlag(ScanResult.FLAG_PASSPOINT_NETWORK);
        }
!!!36788279.java!!!	propagateANQPInfo(inout anqpElements : Map<Constants.ANQPElementType, ANQPElement>) : void
        if (anqpElements.isEmpty()) {
            return;
        }
        mNetworkDetail = mNetworkDetail.complete(anqpElements);
        HSFriendlyNameElement fne = (HSFriendlyNameElement) anqpElements.get(
                Constants.ANQPElementType.HSFriendlyName);
        // !!! Match with language
        if (fne != null && !fne.getNames().isEmpty()) {
            mScanResult.venueName = fne.getNames().get(0).getText();
        } else {
            VenueNameElement vne =
                    (((VenueNameElement) anqpElements.get(
                            Constants.ANQPElementType.ANQPVenueName)));
            if (vne != null && !vne.getNames().isEmpty()) {
                mScanResult.venueName = vne.getNames().get(0).getText();
            }
        }
        RawByteElement osuProviders = (RawByteElement) anqpElements
                .get(Constants.ANQPElementType.HSOSUProviders);
        if (osuProviders != null) {
            mScanResult.anqpElements = new AnqpInformationElement[1];
            mScanResult.anqpElements[0] =
                    new AnqpInformationElement(AnqpInformationElement.HOTSPOT20_VENDOR_ID,
                            AnqpInformationElement.HS_OSU_PROVIDERS, osuProviders.getPayload());
        }
!!!36788407.java!!!	getScanResult() : ScanResult
        return mScanResult;
!!!36788535.java!!!	getNetworkDetail() : NetworkDetail
        return mNetworkDetail;
!!!36788663.java!!!	getSSID() : String
        return mNetworkDetail == null ? mScanResult.SSID : mNetworkDetail.getSSID();
!!!36788791.java!!!	getBSSIDString() : String
        return  mNetworkDetail == null ? mScanResult.BSSID : mNetworkDetail.getBSSIDString();
!!!36788919.java!!!	toKeyString() : String
        NetworkDetail networkDetail = mNetworkDetail;
        if (networkDetail != null) {
            return networkDetail.toKeyString();
        } else {
            return String.format("'%s':%012x",
                                 mScanResult.BSSID,
                                 Utils.parseMac(mScanResult.BSSID));
        }
!!!36789047.java!!!	getSeen() : long
        return mSeen;
!!!36789175.java!!!	setSeen() : long
        mSeen = System.currentTimeMillis();
        mScanResult.seen = mSeen;
        return mSeen;
!!!36789303.java!!!	toString() : String
        try {
            return String.format("'%s'/%012x",
                                 mScanResult.SSID,
                                 Utils.parseMac(mScanResult.BSSID));
        } catch (IllegalArgumentException iae) {
            return String.format("'%s'/----", mScanResult.BSSID);
        }
