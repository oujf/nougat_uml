class NetworkDetail
!!!36998327.java!!!	NetworkDetail(inout bssid : String, inout infoElements : ScanResult::InformationElement, inout anqpLines : List<String>, in freq : int)
        if (infoElements == null) {
            throw new IllegalArgumentException("Null information elements");
        }

        mBSSID = Utils.parseMac(bssid);

        String ssid = null;
        byte[] ssidOctets = null;

        InformationElementUtil.BssLoad bssLoad = new InformationElementUtil.BssLoad();

        InformationElementUtil.Interworking interworking =
                new InformationElementUtil.Interworking();

        InformationElementUtil.RoamingConsortium roamingConsortium =
                new InformationElementUtil.RoamingConsortium();

        InformationElementUtil.Vsa vsa = new InformationElementUtil.Vsa();

        InformationElementUtil.HtOperation htOperation = new InformationElementUtil.HtOperation();
        InformationElementUtil.VhtOperation vhtOperation =
                new InformationElementUtil.VhtOperation();

        InformationElementUtil.ExtendedCapabilities extendedCapabilities =
                new InformationElementUtil.ExtendedCapabilities();

        InformationElementUtil.TrafficIndicationMap trafficIndicationMap =
                new InformationElementUtil.TrafficIndicationMap();

        InformationElementUtil.SupportedRates supportedRates =
                new InformationElementUtil.SupportedRates();
        InformationElementUtil.SupportedRates extendedSupportedRates =
                new InformationElementUtil.SupportedRates();

        RuntimeException exception = null;

        ArrayList<Integer> iesFound = new ArrayList<Integer>();
        try {
            for (ScanResult.InformationElement ie : infoElements) {
                iesFound.add(ie.id);
                switch (ie.id) {
                    case ScanResult.InformationElement.EID_SSID:
                        ssidOctets = ie.bytes;
                        break;
                    case ScanResult.InformationElement.EID_BSS_LOAD:
                        bssLoad.from(ie);
                        break;
                    case ScanResult.InformationElement.EID_HT_OPERATION:
                        htOperation.from(ie);
                        break;
                    case ScanResult.InformationElement.EID_VHT_OPERATION:
                        vhtOperation.from(ie);
                        break;
                    case ScanResult.InformationElement.EID_INTERWORKING:
                        interworking.from(ie);
                        break;
                    case ScanResult.InformationElement.EID_ROAMING_CONSORTIUM:
                        roamingConsortium.from(ie);
                        break;
                    case ScanResult.InformationElement.EID_VSA:
                        vsa.from(ie);
                        break;
                    case ScanResult.InformationElement.EID_EXTENDED_CAPS:
                        extendedCapabilities.from(ie);
                        break;
                    case ScanResult.InformationElement.EID_TIM:
                        trafficIndicationMap.from(ie);
                        break;
                    case ScanResult.InformationElement.EID_SUPPORTED_RATES:
                        supportedRates.from(ie);
                        break;
                    case ScanResult.InformationElement.EID_EXTENDED_SUPPORTED_RATES:
                        extendedSupportedRates.from(ie);
                        break;
                    default:
                        break;
                }
            }
        }
        catch (IllegalArgumentException | BufferUnderflowException | ArrayIndexOutOfBoundsException e) {
            Log.d(Utils.hs2LogTag(getClass()), "Caught " + e);
            if (ssidOctets == null) {
                throw new IllegalArgumentException("Malformed IE string (no SSID)", e);
            }
            exception = e;
        }
        if (ssidOctets != null) {
            /*
             * Strict use of the "UTF-8 SSID" bit by APs appears to be spotty at best even if the
             * encoding truly is in UTF-8. An unconditional attempt to decode the SSID as UTF-8 is
             * therefore always made with a fall back to 8859-1 under normal circumstances.
             * If, however, a previous exception was detected and the UTF-8 bit is set, failure to
             * decode the SSID will be used as an indication that the whole frame is malformed and
             * an exception will be triggered.
             */
            CharsetDecoder decoder = StandardCharsets.UTF_8.newDecoder();
            try {
                CharBuffer decoded = decoder.decode(ByteBuffer.wrap(ssidOctets));
                ssid = decoded.toString();
            }
            catch (CharacterCodingException cce) {
                ssid = null;
            }

            if (ssid == null) {
                if (extendedCapabilities.isStrictUtf8() && exception != null) {
                    throw new IllegalArgumentException("Failed to decode SSID in dubious IE string");
                }
                else {
                    ssid = new String(ssidOctets, StandardCharsets.ISO_8859_1);
                }
            }
        }

        mSSID = ssid;
        mHESSID = interworking.hessid;
        mStationCount = bssLoad.stationCount;
        mChannelUtilization = bssLoad.channelUtilization;
        mCapacity = bssLoad.capacity;
        mAnt = interworking.ant;
        mInternet = interworking.internet;
        mVenueGroup = interworking.venueGroup;
        mVenueType = interworking.venueType;
        mHSRelease = vsa.hsRelease;
        mAnqpDomainID = vsa.anqpDomainID;
        mAnqpOICount = roamingConsortium.anqpOICount;
        mRoamingConsortiums = roamingConsortium.roamingConsortiums;
        mExtendedCapabilities = extendedCapabilities;
        mANQPElements = SupplicantBridge.parseANQPLines(anqpLines);
        //set up channel info
        mPrimaryFreq = freq;

        if (vhtOperation.isValid()) {
            // 80 or 160 MHz
            mChannelWidth = vhtOperation.getChannelWidth();
            mCenterfreq0 = vhtOperation.getCenterFreq0();
            mCenterfreq1 = vhtOperation.getCenterFreq1();
        } else {
            mChannelWidth = htOperation.getChannelWidth();
            mCenterfreq0 = htOperation.getCenterFreq0(mPrimaryFreq);
            mCenterfreq1  = 0;
        }

        // If trafficIndicationMap is not valid, mDtimPeriod will be negative
        mDtimInterval = trafficIndicationMap.mDtimPeriod;

        int maxRateA = 0;
        int maxRateB = 0;
        // If we got some Extended supported rates, consider them, if not default to 0
        if (extendedSupportedRates.isValid()) {
            // rates are sorted from smallest to largest in InformationElement
            maxRateB = extendedSupportedRates.mRates.get(extendedSupportedRates.mRates.size() - 1);
        }
        // Only process the determination logic if we got a 'SupportedRates'
        if (supportedRates.isValid()) {
            maxRateA = supportedRates.mRates.get(supportedRates.mRates.size() - 1);
            mMaxRate = maxRateA > maxRateB ? maxRateA : maxRateB;
            mWifiMode = InformationElementUtil.WifiMode.determineMode(mPrimaryFreq, mMaxRate,
                    vhtOperation.isValid(),
                    iesFound.contains(ScanResult.InformationElement.EID_HT_OPERATION),
                    iesFound.contains(ScanResult.InformationElement.EID_ERP));
        } else {
            mWifiMode = 0;
            mMaxRate = 0;
            Log.w("WifiMode", mSSID + ", Invalid SupportedRates!!!");
        }
        if (VDBG) {
            Log.d(TAG, mSSID + "ChannelWidth is: " + mChannelWidth + " PrimaryFreq: " + mPrimaryFreq
                    + " mCenterfreq0: " + mCenterfreq0 + " mCenterfreq1: " + mCenterfreq1
                    + (extendedCapabilities.is80211McRTTResponder ? "Support RTT reponder"
                    : "Do not support RTT responder"));
            Log.v("WifiMode", mSSID
                    + ", WifiMode: " + InformationElementUtil.WifiMode.toString(mWifiMode)
                    + ", Freq: " + mPrimaryFreq
                    + ", mMaxRate: " + mMaxRate
                    + ", VHT: " + String.valueOf(vhtOperation.isValid())
                    + ", HT: " + String.valueOf(
                    iesFound.contains(ScanResult.InformationElement.EID_HT_OPERATION))
                    + ", ERP: " + String.valueOf(
                    iesFound.contains(ScanResult.InformationElement.EID_ERP))
                    + ", SupportedRates: " + supportedRates.toString()
                    + " ExtendedSupportedRates: " + extendedSupportedRates.toString());
        }
!!!36998455.java!!!	getAndAdvancePayload(inout data : ByteBuffer, in plLength : int) : ByteBuffer
        ByteBuffer payload = data.duplicate().order(data.order());
        payload.limit(payload.position() + plLength);
        data.position(data.position() + plLength);
        return payload;
!!!36998583.java!!!	NetworkDetail(inout base : NetworkDetail, inout anqpElements : Map<Constants.ANQPElementType, ANQPElement>)
        mSSID = base.mSSID;
        mBSSID = base.mBSSID;
        mHESSID = base.mHESSID;
        mStationCount = base.mStationCount;
        mChannelUtilization = base.mChannelUtilization;
        mCapacity = base.mCapacity;
        mAnt = base.mAnt;
        mInternet = base.mInternet;
        mVenueGroup = base.mVenueGroup;
        mVenueType = base.mVenueType;
        mHSRelease = base.mHSRelease;
        mAnqpDomainID = base.mAnqpDomainID;
        mAnqpOICount = base.mAnqpOICount;
        mRoamingConsortiums = base.mRoamingConsortiums;
        mExtendedCapabilities =
                new InformationElementUtil.ExtendedCapabilities(base.mExtendedCapabilities);
        mANQPElements = anqpElements;
        mChannelWidth = base.mChannelWidth;
        mPrimaryFreq = base.mPrimaryFreq;
        mCenterfreq0 = base.mCenterfreq0;
        mCenterfreq1 = base.mCenterfreq1;
        mDtimInterval = base.mDtimInterval;
        mWifiMode = base.mWifiMode;
        mMaxRate = base.mMaxRate;
!!!36998711.java!!!	complete(inout anqpElements : Map<Constants.ANQPElementType, ANQPElement>) : NetworkDetail
        return new NetworkDetail(this, anqpElements);
!!!36998839.java!!!	queriable(inout queryElements : List<Constants.ANQPElementType>) : boolean
        return mAnt != null &&
                (Constants.hasBaseANQPElements(queryElements) ||
                 Constants.hasR2Elements(queryElements) && mHSRelease == HSRelease.R2);
!!!36998967.java!!!	has80211uInfo() : boolean
        return mAnt != null || mRoamingConsortiums != null || mHSRelease != null;
!!!36999095.java!!!	hasInterworking() : boolean
        return mAnt != null;
!!!36999223.java!!!	getSSID() : String
        return mSSID;
!!!36999351.java!!!	getTrimmedSSID() : String
        for (int n = 0; n < mSSID.length(); n++) {
            if (mSSID.charAt(n) != 0) {
                return mSSID;
            }
        }
        return "";
!!!36999479.java!!!	getHESSID() : long
        return mHESSID;
!!!36999607.java!!!	getBSSID() : long
        return mBSSID;
!!!36999735.java!!!	getStationCount() : int
        return mStationCount;
!!!36999863.java!!!	getChannelUtilization() : int
        return mChannelUtilization;
!!!36999991.java!!!	getCapacity() : int
        return mCapacity;
!!!37000119.java!!!	isInterworking() : boolean
        return mAnt != null;
!!!37000247.java!!!	getAnt() : NetworkDetail::Ant
        return mAnt;
!!!37000375.java!!!	isInternet() : boolean
        return mInternet;
!!!37000503.java!!!	getVenueGroup() : VenueNameElement::VenueGroup
        return mVenueGroup;
!!!37000631.java!!!	getVenueType() : VenueNameElement::VenueType
        return mVenueType;
!!!37000759.java!!!	getHSRelease() : NetworkDetail::HSRelease
        return mHSRelease;
!!!37000887.java!!!	getAnqpDomainID() : int
        return mAnqpDomainID;
!!!37001015.java!!!	getOsuProviders() : byte
        if (mANQPElements == null) {
            return null;
        }
        ANQPElement osuProviders = mANQPElements.get(Constants.ANQPElementType.HSOSUProviders);
        return osuProviders != null ? ((RawByteElement) osuProviders).getPayload() : null;
!!!37001143.java!!!	getAnqpOICount() : int
        return mAnqpOICount;
!!!37001271.java!!!	getRoamingConsortiums() : long
        return mRoamingConsortiums;
!!!37001399.java!!!	getExtendedCapabilities() : Long
        return mExtendedCapabilities.extendedCapabilities;
!!!37001527.java!!!	getANQPElements() : Constants::ANQPElementType
        return mANQPElements;
!!!37001655.java!!!	getChannelWidth() : int
        return mChannelWidth;
!!!37001783.java!!!	getCenterfreq0() : int
        return mCenterfreq0;
!!!37001911.java!!!	getCenterfreq1() : int
        return mCenterfreq1;
!!!37002039.java!!!	getWifiMode() : int
        return mWifiMode;
!!!37002167.java!!!	getDtimInterval() : int
        return mDtimInterval;
!!!37002295.java!!!	is80211McResponderSupport() : boolean
        return mExtendedCapabilities.is80211McRTTResponder;
!!!37002423.java!!!	isSSID_UTF8() : boolean
        return mExtendedCapabilities.isStrictUtf8();
!!!37002551.java!!!	equals(inout thatObject : Object) : boolean
        if (this == thatObject) {
            return true;
        }
        if (thatObject == null || getClass() != thatObject.getClass()) {
            return false;
        }

        NetworkDetail that = (NetworkDetail)thatObject;

        return getSSID().equals(that.getSSID()) && getBSSID() == that.getBSSID();
!!!37002679.java!!!	hashCode() : int
        return ((mSSID.hashCode() * 31) + (int)(mBSSID >>> 32)) * 31 + (int)mBSSID;
!!!37002807.java!!!	toString() : String
        return String.format("NetworkInfo{SSID='%s', HESSID=%x, BSSID=%x, StationCount=%d, " +
                "ChannelUtilization=%d, Capacity=%d, Ant=%s, Internet=%s, " +
                "VenueGroup=%s, VenueType=%s, HSRelease=%s, AnqpDomainID=%d, " +
                "AnqpOICount=%d, RoamingConsortiums=%s}",
                mSSID, mHESSID, mBSSID, mStationCount,
                mChannelUtilization, mCapacity, mAnt, mInternet,
                mVenueGroup, mVenueType, mHSRelease, mAnqpDomainID,
                mAnqpOICount, Utils.roamingConsortiumsToString(mRoamingConsortiums));
!!!37002935.java!!!	toKeyString() : String
        return mHESSID != 0 ?
            String.format("'%s':%012x (%012x)", mSSID, mBSSID, mHESSID) :
            String.format("'%s':%012x", mSSID, mBSSID);
!!!37003063.java!!!	getBSSIDString() : String
        return toMACString(mBSSID);
!!!37003191.java!!!	toMACString(in mac : long) : String
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        for (int n = BYTES_IN_EUI48 - 1; n >= 0; n--) {
            if (first) {
                first = false;
            } else {
                sb.append(':');
            }
            sb.append(String.format("%02x", (mac >>> (n * Byte.SIZE)) & BYTE_MASK));
        }
        return sb.toString();
