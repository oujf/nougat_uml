class HomeSP
!!!37035063.java!!!	HomeSP(inout ssidMap : Map<String, Long>, inout fqdn : String, inout roamingConsortiums : HashSet<Long>, inout otherHomePartners : Set<String>, inout matchAnyOIs : Set<Long>, inout matchAllOIs : List<Long>, inout friendlyName : String, inout iconURL : String, inout credential : Credential)

        mSSIDs = ssidMap;
        List<List<String>> otherPartners = new ArrayList<>(otherHomePartners.size());
        for (String otherPartner : otherHomePartners) {
            otherPartners.add(Utils.splitDomain(otherPartner));
        }
        mOtherHomePartners = otherHomePartners;
        mFQDN = fqdn;
        mDomainMatcher = new DomainMatcher(Utils.splitDomain(fqdn), otherPartners);
        mRoamingConsortiums = roamingConsortiums;
        mMatchAnyOIs = matchAnyOIs;
        mMatchAllOIs = matchAllOIs;
        mFriendlyName = friendlyName;
        mIconURL = iconURL;
        mCredential = credential;

        mPolicy = null;
        mCredentialPriority = -1;
        mAAATrustRoots = null;
        mSubscriptionUpdate = null;
        mSubscriptionParameters = null;
        mUpdateIdentifier = -1;
!!!37035191.java!!!	HomeSP(inout ssidMap : Map<String, Long>, inout fqdn : String, inout roamingConsortiums : HashSet<Long>, inout otherHomePartners : Set<String>, inout matchAnyOIs : Set<Long>, inout matchAllOIs : List<Long>, inout friendlyName : String, inout iconURL : String, inout credential : Credential, inout policy : Policy, in credentialPriority : int, inout AAATrustRoots : Map<String, String>, inout subscriptionUpdate : UpdateInfo, inout subscriptionParameters : SubscriptionParameters, in updateIdentifier : int)

        mSSIDs = ssidMap;
        List<List<String>> otherPartners = new ArrayList<>(otherHomePartners.size());
        for (String otherPartner : otherHomePartners) {
            otherPartners.add(Utils.splitDomain(otherPartner));
        }
        mOtherHomePartners = otherHomePartners;
        mFQDN = fqdn;
        mDomainMatcher = new DomainMatcher(Utils.splitDomain(fqdn), otherPartners);
        mRoamingConsortiums = roamingConsortiums;
        mMatchAnyOIs = matchAnyOIs;
        mMatchAllOIs = matchAllOIs;
        mFriendlyName = friendlyName;
        mIconURL = iconURL;
        mCredential = credential;

        mPolicy = policy;
        mCredentialPriority = credentialPriority;
        mAAATrustRoots = AAATrustRoots;
        mSubscriptionUpdate = subscriptionUpdate;
        mSubscriptionParameters = subscriptionParameters;
        mUpdateIdentifier = updateIdentifier;
!!!37035319.java!!!	getUpdateIdentifier() : int
        return mUpdateIdentifier;
!!!37035447.java!!!	getSubscriptionUpdate() : UpdateInfo
        return mSubscriptionUpdate;
!!!37035575.java!!!	getPolicy() : Policy
        return mPolicy;
!!!37035703.java!!!	match(inout networkDetail : NetworkDetail, inout anqpElementMap : Map<ANQPElementType, ANQPElement>, inout simAccessor : SIMAccessor) : PasspointMatch

        List<String> imsis = simAccessor.getMatchingImsis(mCredential.getImsi());

        PasspointMatch spMatch = matchSP(networkDetail, anqpElementMap, imsis);

        if (spMatch == PasspointMatch.Incomplete || spMatch == PasspointMatch.Declined) {
            return spMatch;
        }

        if (imsiMatch(imsis, (ThreeGPPNetworkElement)
                anqpElementMap.get(ANQPElementType.ANQP3GPPNetwork)) != null) {
            // PLMN match, promote sp match to roaming if necessary.
            return spMatch == PasspointMatch.None ? PasspointMatch.RoamingProvider : spMatch;
        }

        NAIRealmElement naiRealmElement =
                (NAIRealmElement) anqpElementMap.get(ANQPElementType.ANQPNAIRealm);

        int authMatch = naiRealmElement != null ?
                naiRealmElement.match(mCredential) :
                AuthMatch.Indeterminate;
        
        Log.d(Utils.hs2LogTag(getClass()), networkDetail.toKeyString() + " match on " + mFQDN +
                ": " + spMatch + ", auth " + AuthMatch.toString(authMatch));

        if (authMatch == AuthMatch.None) {
            // Distinct auth mismatch, demote authentication.
            return PasspointMatch.None;
        }
        else if ((authMatch & AuthMatch.Realm) == 0) {
            // No realm match, return sp match as is.
            return spMatch;
        }
        else {
            // Realm match, promote sp match to roaming if necessary.
            return spMatch == PasspointMatch.None ? PasspointMatch.RoamingProvider : spMatch;
        }
!!!37035831.java!!!	matchSP(inout networkDetail : NetworkDetail, inout anqpElementMap : Map<ANQPElementType, ANQPElement>, inout imsis : List<String>) : PasspointMatch

        if (mSSIDs.containsKey(networkDetail.getSSID())) {
            Long hessid = mSSIDs.get(networkDetail.getSSID());
            if (hessid == null || networkDetail.getHESSID() == hessid) {
                Log.d(Utils.hs2LogTag(getClass()), "match SSID");
                return PasspointMatch.HomeProvider;
            }
        }

        Set<Long> anOIs = new HashSet<>();

        if (networkDetail.getRoamingConsortiums() != null) {
            for (long oi : networkDetail.getRoamingConsortiums()) {
                anOIs.add(oi);
            }
        }

        boolean validANQP = anqpElementMap != null &&
                Constants.hasBaseANQPElements(anqpElementMap.keySet());

        RoamingConsortiumElement rcElement = validANQP ?
                (RoamingConsortiumElement) anqpElementMap.get(ANQPElementType.ANQPRoamingConsortium)
                : null;
        if (rcElement != null) {
            anOIs.addAll(rcElement.getOIs());
        }

        // It may seem reasonable to check for home provider match prior to checking for roaming
        // relationship, but it is possible to avoid an ANQP query if it turns out that the
        // "match all" rule fails based only on beacon info only.
        boolean roamingMatch = false;

        if (!mMatchAllOIs.isEmpty()) {
            boolean matchesAll = true;

            for (long spOI : mMatchAllOIs) {
                if (!anOIs.contains(spOI)) {
                    matchesAll = false;
                    break;
                }
            }
            if (matchesAll) {
                roamingMatch = true;
            }
            else {
                if (validANQP || networkDetail.getAnqpOICount() == 0) {
                    return PasspointMatch.Declined;
                }
                else {
                    return PasspointMatch.Incomplete;
                }
            }
        }

        if (!roamingMatch &&
                (!Collections.disjoint(mMatchAnyOIs, anOIs) ||
                        !Collections.disjoint(mRoamingConsortiums, anOIs))) {
            roamingMatch = true;
        }

        if (!validANQP) {
            return PasspointMatch.Incomplete;
        }

        DomainNameElement domainNameElement =
                (DomainNameElement) anqpElementMap.get(ANQPElementType.ANQPDomName);

        if (domainNameElement != null) {
            for (String domain : domainNameElement.getDomains()) {
                List<String> anLabels = Utils.splitDomain(domain);
                DomainMatcher.Match match = mDomainMatcher.isSubDomain(anLabels);
                if (match != DomainMatcher.Match.None) {
                    return PasspointMatch.HomeProvider;
                }

                if (imsiMatch(imsis, anLabels) != null) {
                    return PasspointMatch.HomeProvider;
                }
            }
        }

        return roamingMatch ? PasspointMatch.RoamingProvider : PasspointMatch.None;
!!!37035959.java!!!	imsiMatch(inout imsis : List<String>, inout plmnElement : ThreeGPPNetworkElement) : String
        if (imsis == null || plmnElement == null || plmnElement.getPlmns().isEmpty()) {
            return null;
        }
        for (CellularNetwork network : plmnElement.getPlmns()) {
            for (String mccMnc : network) {
                String imsi = imsiMatch(imsis, mccMnc);
                if (imsi != null) {
                    return imsi;
                }
            }
        }
        return null;
!!!37036087.java!!!	imsiMatch(inout imsis : List<String>, inout fqdn : List<String>) : String
        if (imsis == null) {
            return null;
        }
        String mccMnc = Utils.getMccMnc(fqdn);
        return mccMnc != null ? imsiMatch(imsis, mccMnc) : null;
!!!37036215.java!!!	imsiMatch(inout imsis : List<String>, inout mccMnc : String) : String
        if (mCredential.getImsi().matchesMccMnc(mccMnc)) {
            for (String imsi : imsis) {
                if (imsi.startsWith(mccMnc)) {
                    return imsi;
                }
            }
        }
        return null;
!!!37036343.java!!!	getFQDN() : String
 return mFQDN;
!!!37036471.java!!!	getFriendlyName() : String
 return mFriendlyName;
!!!37036599.java!!!	getRoamingConsortiums() : HashSet<Long>
 return mRoamingConsortiums;
!!!37036727.java!!!	getCredential() : Credential
 return mCredential;
!!!37036855.java!!!	getSSIDs() : String
        return mSSIDs;
!!!37036983.java!!!	getOtherHomePartners() : String
        return mOtherHomePartners;
!!!37037111.java!!!	getMatchAnyOIs() : Set<Long>
        return mMatchAnyOIs;
!!!37037239.java!!!	getMatchAllOIs() : List<Long>
        return mMatchAllOIs;
!!!37037367.java!!!	getIconURL() : String
        return mIconURL;
!!!37037495.java!!!	deepEquals(inout other : HomeSP) : boolean
        return mFQDN.equals(other.mFQDN) &&
                mSSIDs.equals(other.mSSIDs) &&
                mOtherHomePartners.equals(other.mOtherHomePartners) &&
                mRoamingConsortiums.equals(other.mRoamingConsortiums) &&
                mMatchAnyOIs.equals(other.mMatchAnyOIs) &&
                mMatchAllOIs.equals(other.mMatchAllOIs) &&
                mFriendlyName.equals(other.mFriendlyName) &&
                Utils.compare(mIconURL, other.mIconURL) == 0 &&
                mCredential.equals(other.mCredential);
!!!37037623.java!!!	equals(inout thatObject : Object) : boolean
        if (this == thatObject) {
            return true;
        } else if (thatObject == null || getClass() != thatObject.getClass()) {
            return false;
        }

        HomeSP that = (HomeSP) thatObject;
        return mFQDN.equals(that.mFQDN);
!!!37037751.java!!!	hashCode() : int
        return mFQDN.hashCode();
!!!37037879.java!!!	toString() : String
        return "HomeSP{" +
                "SSIDs=" + mSSIDs +
                ", FQDN='" + mFQDN + '\'' +
                ", DomainMatcher=" + mDomainMatcher +
                ", RoamingConsortiums={" + Utils.roamingConsortiumsToString(mRoamingConsortiums) +
                '}' +
                ", MatchAnyOIs={" + Utils.roamingConsortiumsToString(mMatchAnyOIs) + '}' +
                ", MatchAllOIs={" + Utils.roamingConsortiumsToString(mMatchAllOIs) + '}' +
                ", Credential=" + mCredential +
                ", FriendlyName='" + mFriendlyName + '\'' +
                ", IconURL='" + mIconURL + '\'' +
                '}';
