class WifiCertManager
!!!36798519.java!!!	WifiCertManager(inout context : Context)
        this(context, CONFIG_FILE);
!!!36798647.java!!!	WifiCertManager(inout context : Context, inout configFile : String)
        mContext = context;
        mConfigFile = configFile;
        final byte[] bytes = readConfigFile();
        if (bytes == null) {
            // Config file does not exist or empty.
            return;
        }

        String[] keys = new String(bytes, StandardCharsets.UTF_8).split(SEP);
        for (String key : keys) {
            mAffiliatedUserOnlyCerts.add(key);
        }

        // Remove keys that no longer exist in KeyStore.
        if (mAffiliatedUserOnlyCerts.retainAll(Arrays.asList(listClientCertsForAllUsers()))) {
            writeConfig();
        }
!!!36798775.java!!!	hideCertFromUnaffiliatedUsers(inout key : String) : void
        if (mAffiliatedUserOnlyCerts.add(Credentials.USER_PRIVATE_KEY + key)) {
            writeConfig();
        }
!!!36798903.java!!!	listClientCertsForCurrentUser() : String
        HashSet<String> results = new HashSet<String>();

        String[] keys = listClientCertsForAllUsers();
        if (isAffiliatedUser()) {
            return keys;
        }

        for (String key : keys) {
            if (!mAffiliatedUserOnlyCerts.contains(key)) {
                results.add(key);
            }
        }
        return results.toArray(new String[results.size()]);
!!!36799031.java!!!	writeConfig() : void
        String[] values =
                mAffiliatedUserOnlyCerts.toArray(new String[mAffiliatedUserOnlyCerts.size()]);
        String value = TextUtils.join(SEP, values);
        writeConfigFile(value.getBytes(StandardCharsets.UTF_8));
!!!36799159.java!!!	readConfigFile() : byte
        byte[] bytes = null;
        try {
            final File file = new File(mConfigFile);
            final long fileSize = file.exists() ? file.length() : 0;
            if (fileSize == 0 || fileSize >= Integer.MAX_VALUE) {
                // Config file is empty/corrupted/non-existing.
                return bytes;
            }

            bytes = new byte[(int) file.length()];
            final DataInputStream stream = new DataInputStream(new FileInputStream(file));
            stream.readFully(bytes);
        } catch (IOException e) {
            Log.e(TAG, "readConfigFile: failed to read " + e, e);
        }
        return bytes;
!!!36799287.java!!!	writeConfigFile(inout payload : byte) : void
        final byte[] data = payload;
        mWriter.write(mConfigFile, new DelayedDiskWrite.Writer() {
            public void onWriteCalled(DataOutputStream out) throws IOException {
                out.write(data, 0, data.length);
            }
        });
!!!36799415.java!!!	listClientCertsForAllUsers() : String
        return KeyStore.getInstance().list(Credentials.USER_PRIVATE_KEY, UserHandle.myUserId());
!!!36799543.java!!!	isAffiliatedUser() : boolean
        IDevicePolicyManager pm = IDevicePolicyManager.Stub.asInterface(
                ServiceManager.getService(Context.DEVICE_POLICY_SERVICE));
        boolean result = false;
        try {
            result = pm.isAffiliatedUser();
        } catch (Exception e) {
            Log.e(TAG, "failed to check user affiliation", e);
        }
        return result;
