class AnqpCache
!!!36994487.java!!!	AnqpCache(inout clock : Clock)
        mClock = clock;
        mANQPCache = new HashMap<>();
        mLastSweep = mClock.currentTimeMillis();
!!!36995255.java!!!	initiate(inout network : NetworkDetail, inout querySet : List<Constants.ANQPElementType>) : Constants::ANQPElementType
        CacheKey key = CacheKey.buildKey(network, STANDARD_ESS);

        synchronized (mANQPCache) {
            ANQPData data = mANQPCache.get(key);
            if (data == null || data.expired()) {
                mANQPCache.put(key, new ANQPData(mClock, network, data));
                return querySet;
            }
            else {
                List<Constants.ANQPElementType> newList = data.disjoint(querySet);
                Log.d(Utils.hs2LogTag(getClass()),
                        String.format("New ANQP elements for BSSID %012x: %s",
                                network.getBSSID(), newList));
                return newList;
            }
        }
!!!36995383.java!!!	update(inout network : NetworkDetail, inout anqpElements : Map<Constants.ANQPElementType, ANQPElement>) : void

        CacheKey key = CacheKey.buildKey(network, STANDARD_ESS);

        // Networks with a 0 ANQP Domain ID are still cached, but with a very short expiry, just
        // long enough to prevent excessive re-querying.
        synchronized (mANQPCache) {
            ANQPData data = mANQPCache.get(key);
            if (data != null && data.hasData()) {
                data.merge(anqpElements);
            }
            else {
                data = new ANQPData(mClock, network, anqpElements);
                mANQPCache.put(key, data);
            }
        }
!!!36995511.java!!!	getEntry(inout network : NetworkDetail) : ANQPData
        ANQPData data;

        CacheKey key = CacheKey.buildKey(network, STANDARD_ESS);
        synchronized (mANQPCache) {
            data = mANQPCache.get(key);
        }

        return data != null && data.isValid(network) ? data : null;
!!!36995639.java!!!	clear(inout all : boolean, inout debug : boolean) : void
        if (DBG) Log.d(Utils.hs2LogTag(getClass()), "Clearing ANQP cache: all: " + all);
        long now = mClock.currentTimeMillis();
        synchronized (mANQPCache) {
            if (all) {
                mANQPCache.clear();
                mLastSweep = now;
            }
            else if (now > mLastSweep + CACHE_RECHECK) {
                List<CacheKey> retirees = new ArrayList<>();
                for (Map.Entry<CacheKey, ANQPData> entry : mANQPCache.entrySet()) {
                    if (entry.getValue().expired(now)) {
                        retirees.add(entry.getKey());
                    }
                }
                for (CacheKey key : retirees) {
                    mANQPCache.remove(key);
                    if (debug) {
                        Log.d(Utils.hs2LogTag(getClass()), "Retired " + key);
                    }
                }
                mLastSweep = now;
            }
        }
!!!36995767.java!!!	dump(inout out : PrintWriter) : void
        out.println("Last sweep " + Utils.toHMS(mClock.currentTimeMillis() - mLastSweep) + " ago.");
        for (ANQPData anqpData : mANQPCache.values()) {
            out.println(anqpData.toString(false));
        }
