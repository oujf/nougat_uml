class Constants
!!!36966583.java!!!	mapANQPElement(in id : int) : Constants::ANQPElementType
        return sAnqpMap.get(id);
!!!36966711.java!!!	mapHS20Element(in id : int) : Constants::ANQPElementType
        return sHs20Map.get(id);
!!!36966839.java!!!	getANQPElementID(inout elementType : Constants::ANQPElementType) : Integer
        return sRevAnqpmap.get(elementType);
!!!36966967.java!!!	getHS20ElementID(inout elementType : Constants::ANQPElementType) : Integer
        return sRevHs20map.get(elementType);
!!!36967095.java!!!	hasBaseANQPElements(inout elements : Collection<ANQPElementType>) : boolean
        if (elements == null) {
            return false;
        }
        for (ANQPElementType element : elements) {
            if (sRevAnqpmap.containsKey(element)) {
                return true;
            }
        }
        return false;
!!!36967223.java!!!	hasR2Elements(inout elements : List<ANQPElementType>) : boolean
        return elements.contains(ANQPElementType.HSOSUProviders);
!!!36967351.java!!!	getInteger(inout payload : ByteBuffer, inout bo : ByteOrder, in size : int) : long
        byte[] octets = new byte[size];
        payload.get(octets);
        long value = 0;
        if (bo == ByteOrder.LITTLE_ENDIAN) {
            for (int n = octets.length - 1; n >= 0; n--) {
                value = (value << Byte.SIZE) | (octets[n] & BYTE_MASK);
            }
        }
        else {
            for (byte octet : octets) {
                value = (value << Byte.SIZE) | (octet & BYTE_MASK);
            }
        }
        return value;
!!!36967479.java!!!	getPrefixedString(inout payload : ByteBuffer, in lengthLength : int, inout charset : Charset) : String
        return getPrefixedString(payload, lengthLength, charset, false);
!!!36967607.java!!!	getPrefixedString(inout payload : ByteBuffer, in lengthLength : int, inout charset : Charset, inout useNull : boolean) : String
        if (payload.remaining() < lengthLength) {
            throw new ProtocolException("Runt string: " + payload.remaining());
        }
        return getString(payload, (int) getInteger(payload, ByteOrder.LITTLE_ENDIAN,
                lengthLength), charset, useNull);
!!!36967735.java!!!	getTrimmedString(inout payload : ByteBuffer, in length : int, inout charset : Charset) : String
        String s = getString(payload, length, charset, false);
        int zero = length - 1;
        while (zero >= 0) {
            if (s.charAt(zero) != 0) {
                break;
            }
            zero--;
        }
        return zero < length - 1 ? s.substring(0, zero + 1) : s;
!!!36967863.java!!!	getString(inout payload : ByteBuffer, in length : int, inout charset : Charset) : String
        return getString(payload, length, charset, false);
!!!36967991.java!!!	getString(inout payload : ByteBuffer, in length : int, inout charset : Charset, inout useNull : boolean) : String
        if (length > payload.remaining()) {
            throw new ProtocolException("Bad string length: " + length);
        }
        if (useNull && length == 0) {
            return null;
        }
        byte[] octets = new byte[length];
        payload.get(octets);
        return new String(octets, charset);
