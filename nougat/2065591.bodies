class WifiMonitor
!!!36856759.java!!!	getInstance() : WifiMonitor
        return sWifiMonitor;
!!!36856887.java!!!	WifiMonitor()
        mWifiNative = WifiNative.getWlanNativeInterface();
!!!36857015.java!!!	enableVerboseLogging(in verbose : int) : void
        if (verbose > 0) {
            DBG = true;
        } else {
            DBG = false;
        }
!!!36857143.java!!!	registerHandler(inout iface : String, in what : int, inout handler : Handler) : void
        SparseArray<Set<Handler>> ifaceHandlers = mHandlerMap.get(iface);
        if (ifaceHandlers == null) {
            ifaceHandlers = new SparseArray<>();
            mHandlerMap.put(iface, ifaceHandlers);
        }
        Set<Handler> ifaceWhatHandlers = ifaceHandlers.get(what);
        if (ifaceWhatHandlers == null) {
            ifaceWhatHandlers = new ArraySet<>();
            ifaceHandlers.put(what, ifaceWhatHandlers);
        }
        ifaceWhatHandlers.add(handler);
!!!36857271.java!!!	isMonitoring(inout iface : String) : boolean
        Boolean val = mMonitoringMap.get(iface);
        if (val == null) {
            return false;
        }
        else {
            return val.booleanValue();
        }
!!!36857399.java!!!	setMonitoring(inout iface : String, inout enabled : boolean) : void
        mMonitoringMap.put(iface, enabled);
!!!36857527.java!!!	setMonitoringNone() : void
        for (String iface : mMonitoringMap.keySet()) {
            setMonitoring(iface, false);
        }
!!!36857655.java!!!	ensureConnectedLocked() : boolean
        if (mConnected) {
            return true;
        }

        if (DBG) Log.d(TAG, "connecting to supplicant");
        int connectTries = 0;
        while (true) {
            if (mWifiNative.connectToSupplicant()) {
                mConnected = true;
                new MonitorThread().start();
                return true;
            }
            if (connectTries++ < 5) {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ignore) {
                }
            } else {
                return false;
            }
        }
!!!36857783.java!!!	startMonitoring(inout iface : String) : void
        Log.d(TAG, "startMonitoring(" + iface + ") with mConnected = " + mConnected);

        if (ensureConnectedLocked()) {
            setMonitoring(iface, true);
            sendMessage(iface, SUP_CONNECTION_EVENT);
        }
        else {
            boolean originalMonitoring = isMonitoring(iface);
            setMonitoring(iface, true);
            sendMessage(iface, SUP_DISCONNECTION_EVENT);
            setMonitoring(iface, originalMonitoring);
            Log.e(TAG, "startMonitoring(" + iface + ") failed!");
        }
!!!36857911.java!!!	stopMonitoring(inout iface : String) : void
        if (DBG) Log.d(TAG, "stopMonitoring(" + iface + ")");
        setMonitoring(iface, true);
        sendMessage(iface, SUP_DISCONNECTION_EVENT);
        setMonitoring(iface, false);
!!!36858039.java!!!	stopSupplicant() : void
        mWifiNative.stopSupplicant();
!!!36858167.java!!!	killSupplicant(inout p2pSupported : boolean) : void
        String suppState = System.getProperty("init.svc.wpa_supplicant");
        if (suppState == null) suppState = "unknown";
        String p2pSuppState = System.getProperty("init.svc.p2p_supplicant");
        if (p2pSuppState == null) p2pSuppState = "unknown";

        Log.e(TAG, "killSupplicant p2p" + p2pSupported
                + " init.svc.wpa_supplicant=" + suppState
                + " init.svc.p2p_supplicant=" + p2pSuppState);
        mWifiNative.killSupplicant(p2pSupported);
        mConnected = false;
        setMonitoringNone();
!!!36858295.java!!!	sendMessage(inout iface : String, in what : int) : void
        sendMessage(iface, Message.obtain(null, what));
!!!36858423.java!!!	sendMessage(inout iface : String, in what : int, inout obj : Object) : void
        sendMessage(iface, Message.obtain(null, what, obj));
!!!36858551.java!!!	sendMessage(inout iface : String, in what : int, in arg1 : int) : void
        sendMessage(iface, Message.obtain(null, what, arg1, 0));
!!!36858679.java!!!	sendMessage(inout iface : String, in what : int, in arg1 : int, in arg2 : int) : void
        sendMessage(iface, Message.obtain(null, what, arg1, arg2));
!!!36858807.java!!!	sendMessage(inout iface : String, in what : int, in arg1 : int, in arg2 : int, inout obj : Object) : void
        sendMessage(iface, Message.obtain(null, what, arg1, arg2, obj));
!!!36858935.java!!!	sendMessage(inout iface : String, inout message : Message) : void
        SparseArray<Set<Handler>> ifaceHandlers = mHandlerMap.get(iface);
        if (iface != null && ifaceHandlers != null) {
            if (isMonitoring(iface)) {
                boolean firstHandler = true;
                Set<Handler> ifaceWhatHandlers = ifaceHandlers.get(message.what);
                if (ifaceWhatHandlers != null) {
                    for (Handler handler : ifaceWhatHandlers) {
                        if (firstHandler) {
                            firstHandler = false;
                            sendMessage(handler, message);
                        }
                        else {
                            sendMessage(handler, Message.obtain(message));
                        }
                    }
                }
            } else {
                if (DBG) Log.d(TAG, "Dropping event because (" + iface + ") is stopped");
            }
        } else {
            if (DBG) Log.d(TAG, "Sending to all monitors because there's no matching iface");
            boolean firstHandler = true;
            for (Map.Entry<String, SparseArray<Set<Handler>>> entry : mHandlerMap.entrySet()) {
                if (isMonitoring(entry.getKey())) {
                    Set<Handler> ifaceWhatHandlers = entry.getValue().get(message.what);
                    for (Handler handler : ifaceWhatHandlers) {
                        if (firstHandler) {
                            firstHandler = false;
                            sendMessage(handler, message);
                        }
                        else {
                            sendMessage(handler, Message.obtain(message));
                        }
                    }
                }
            }
        }
!!!36859063.java!!!	sendMessage(inout handler : Handler, inout message : Message) : void
        if (handler != null) {
            message.setTarget(handler);
            message.sendToTarget();
        }
!!!36859447.java!!!	dispatchEvent(inout eventStr : String) : boolean
        String iface;
        // IFNAME=wlan0 ANQP-QUERY-DONE addr=18:cf:5e:26:a4:88 result=SUCCESS
        if (eventStr.startsWith("IFNAME=")) {
            int space = eventStr.indexOf(' ');
            if (space != -1) {
                iface = eventStr.substring(7, space);
                if (!mHandlerMap.containsKey(iface) && iface.startsWith("p2p-")) {
                    // p2p interfaces are created dynamically, but we have
                    // only one P2p state machine monitoring all of them; look
                    // for it explicitly, and send messages there ..
                    iface = "p2p0";
                }
                eventStr = eventStr.substring(space + 1);
            } else {
                // No point dispatching this event to any interface, the dispatched
                // event string will begin with "IFNAME=" which dispatchEvent can't really
                // do anything about.
                Log.e(TAG, "Dropping malformed event (unparsable iface): " + eventStr);
                return false;
            }
        } else {
            // events without prefix belong to p2p0 monitor
            iface = "p2p0";
        }

        if (VDBG) Log.d(TAG, "Dispatching event to interface: " + iface);

        if (dispatchEvent(eventStr, iface)) {
            mConnected = false;
            return true;
        }
        return false;
!!!36859575.java!!!	dispatchEvent(inout eventStr : String, inout iface : String) : boolean
        if (DBG) {
            // Dont log CTRL-EVENT-BSS-ADDED which are too verbose and not handled
            if (eventStr != null && !eventStr.contains("CTRL-EVENT-BSS-ADDED")) {
                Log.d(TAG, iface + " cnt=" + Integer.toString(eventLogCounter)
                        + " dispatchEvent: " + eventStr);
            }
        }

        if (!eventStr.startsWith(EVENT_PREFIX_STR)) {
            if (eventStr.startsWith(WPS_SUCCESS_STR)) {
                sendMessage(iface, WPS_SUCCESS_EVENT);
            } else if (eventStr.startsWith(WPS_FAIL_STR)) {
                handleWpsFailEvent(eventStr, iface);
            } else if (eventStr.startsWith(WPS_OVERLAP_STR)) {
                sendMessage(iface, WPS_OVERLAP_EVENT);
            } else if (eventStr.startsWith(WPS_TIMEOUT_STR)) {
                sendMessage(iface, WPS_TIMEOUT_EVENT);
            } else if (eventStr.startsWith(P2P_EVENT_PREFIX_STR)) {
                handleP2pEvents(eventStr, iface);
            } else if (eventStr.startsWith(HOST_AP_EVENT_PREFIX_STR)) {
                handleHostApEvents(eventStr, iface);
            } else if (eventStr.startsWith(ANQP_DONE_STR)) {
                try {
                    handleAnqpResult(eventStr, iface);
                }
                catch (IllegalArgumentException iae) {
                    Log.e(TAG, "Bad ANQP event string: '" + eventStr + "': " + iae);
                }
            } else if (eventStr.startsWith(HS20_ICON_STR)) {
                try {
                    handleIconResult(eventStr, iface);
                }
                catch (IllegalArgumentException iae) {
                    Log.e(TAG, "Bad Icon event string: '" + eventStr + "': " + iae);
                }
            }
            else if (eventStr.startsWith(HS20_SUB_REM_STR)) {
                // Tack on the last connected BSSID so we have some idea what AP the WNM pertains to
                handleWnmFrame(String.format("%012x %s",
                                mLastConnectBSSIDs.get(iface), eventStr), iface);
            } else if (eventStr.startsWith(HS20_DEAUTH_STR)) {
                handleWnmFrame(String.format("%012x %s",
                                mLastConnectBSSIDs.get(iface), eventStr), iface);
            } else if (eventStr.startsWith(REQUEST_PREFIX_STR)) {
                handleRequests(eventStr, iface);
            } else if (eventStr.startsWith(TARGET_BSSID_STR)) {
                handleTargetBSSIDEvent(eventStr, iface);
            } else if (eventStr.startsWith(ASSOCIATED_WITH_STR)) {
                handleAssociatedBSSIDEvent(eventStr, iface);
            } else if (eventStr.startsWith(AUTH_EVENT_PREFIX_STR) &&
                    eventStr.endsWith(AUTH_TIMEOUT_STR)) {
                sendMessage(iface, AUTHENTICATION_FAILURE_EVENT);
            } else {
                if (DBG) Log.w(TAG, "couldn't identify event type - " + eventStr);
            }
            eventLogCounter++;
            return false;
        }

        String eventName = eventStr.substring(EVENT_PREFIX_LEN_STR);
        int nameEnd = eventName.indexOf(' ');
        if (nameEnd != -1)
            eventName = eventName.substring(0, nameEnd);
        if (eventName.length() == 0) {
            if (DBG) Log.i(TAG, "Received wpa_supplicant event with empty event name");
            eventLogCounter++;
            return false;
        }
        /*
        * Map event name into event enum
        */
        int event;
        if (eventName.equals(CONNECTED_STR)) {
            event = CONNECTED;
            long bssid = -1L;
            int prefix = eventStr.indexOf(ConnectPrefix);
            if (prefix >= 0) {
                int suffix = eventStr.indexOf(ConnectSuffix);
                if (suffix > prefix) {
                    try {
                        bssid = Utils.parseMac(
                                eventStr.substring(prefix + ConnectPrefix.length(), suffix));
                    } catch (IllegalArgumentException iae) {
                        bssid = -1L;
                    }
                }
            }
            mLastConnectBSSIDs.put(iface, bssid);
            if (bssid == -1L) {
                Log.w(TAG, "Failed to parse out BSSID from '" + eventStr + "'");
            }
        }
        else if (eventName.equals(DISCONNECTED_STR))
            event = DISCONNECTED;
        else if (eventName.equals(STATE_CHANGE_STR))
            event = STATE_CHANGE;
        else if (eventName.equals(SCAN_RESULTS_STR))
            event = SCAN_RESULTS;
        else if (eventName.equals(SCAN_FAILED_STR))
            event = SCAN_FAILED;
        else if (eventName.equals(LINK_SPEED_STR))
            event = LINK_SPEED;
        else if (eventName.equals(TERMINATING_STR))
            event = TERMINATING;
        else if (eventName.equals(DRIVER_STATE_STR))
            event = DRIVER_STATE;
        else if (eventName.equals(EAP_FAILURE_STR))
            event = EAP_FAILURE;
        else if (eventName.equals(ASSOC_REJECT_STR))
            event = ASSOC_REJECT;
        else if (eventName.equals(TEMP_DISABLED_STR)) {
            event = SSID_TEMP_DISABLE;
        } else if (eventName.equals(REENABLED_STR)) {
            event = SSID_REENABLE;
        } else if (eventName.equals(BSS_ADDED_STR)) {
            event = BSS_ADDED;
        } else if (eventName.equals(BSS_REMOVED_STR)) {
            event = BSS_REMOVED;
        } else
            event = UNKNOWN;

        String eventData = eventStr;
        if (event == DRIVER_STATE || event == LINK_SPEED)
            eventData = eventData.split(" ")[1];
        else if (event == STATE_CHANGE || event == EAP_FAILURE) {
            int ind = eventStr.indexOf(" ");
            if (ind != -1) {
                eventData = eventStr.substring(ind + 1);
            }
        } else {
            int ind = eventStr.indexOf(" - ");
            if (ind != -1) {
                eventData = eventStr.substring(ind + 3);
            }
        }

        if ((event == SSID_TEMP_DISABLE)||(event == SSID_REENABLE)) {
            String substr = null;
            int netId = -1;
            int ind = eventStr.indexOf(" ");
            if (ind != -1) {
                substr = eventStr.substring(ind + 1);
            }
            if (substr != null) {
                String status[] = substr.split(" ");
                for (String key : status) {
                    if (key.regionMatches(0, "id=", 0, 3)) {
                        int idx = 3;
                        netId = 0;
                        while (idx < key.length()) {
                            char c = key.charAt(idx);
                            if ((c >= 0x30) && (c <= 0x39)) {
                                netId *= 10;
                                netId += c - 0x30;
                                idx++;
                            } else {
                                break;
                            }
                        }
                    }
                }
            }
            sendMessage(iface, (event == SSID_TEMP_DISABLE)?
                    SSID_TEMP_DISABLED:SSID_REENABLED, netId, 0, substr);
        } else if (event == STATE_CHANGE) {
            handleSupplicantStateChange(eventData, iface);
        } else if (event == DRIVER_STATE) {
            handleDriverEvent(eventData, iface);
        } else if (event == TERMINATING) {
            /**
             * Close the supplicant connection if we see
             * too many recv errors
             */
            if (eventData.startsWith(WPA_RECV_ERROR_STR)) {
                if (++mRecvErrors > MAX_RECV_ERRORS) {
                    if (DBG) {
                        Log.d(TAG, "too many recv errors, closing connection");
                    }
                } else {
                    eventLogCounter++;
                    return false;
                }
            }

            // Notify and exit
            sendMessage(null, SUP_DISCONNECTION_EVENT, eventLogCounter);
            return true;
        } else if (event == EAP_FAILURE) {
            if (eventData.startsWith(EAP_AUTH_FAILURE_STR)) {
                sendMessage(iface, AUTHENTICATION_FAILURE_EVENT, eventLogCounter);
            }
        } else if (event == ASSOC_REJECT) {
            Matcher match = mAssocRejectEventPattern.matcher(eventData);
            String BSSID = "";
            int status = -1;
            if (!match.find()) {
                if (DBG) Log.d(TAG, "Assoc Reject: Could not parse assoc reject string");
            } else {
                int groupNumber = match.groupCount();
                int statusGroupNumber = -1;
                if (groupNumber == 2) {
                    BSSID = match.group(1);
                    statusGroupNumber = 2;
                } else {
                    // Under such case Supplicant does not report BSSID
                    BSSID = null;
                    statusGroupNumber = 1;
                }
                try {
                    status = Integer.parseInt(match.group(statusGroupNumber));
                } catch (NumberFormatException e) {
                    status = -1;
                }
            }
            sendMessage(iface, ASSOCIATION_REJECTION_EVENT, eventLogCounter, status, BSSID);
        } else if (event == BSS_ADDED && !VDBG) {
            // Ignore that event - it is not handled, and dont log it as it is too verbose
        } else if (event == BSS_REMOVED && !VDBG) {
            // Ignore that event - it is not handled, and dont log it as it is too verbose
        }  else {
            handleEvent(event, eventData, iface);
        }
        mRecvErrors = 0;
        eventLogCounter++;
        return false;
!!!36859703.java!!!	handleDriverEvent(inout state : String, inout iface : String) : void
        if (state == null) {
            return;
        }
        if (state.equals("HANGED")) {
            sendMessage(iface, DRIVER_HUNG_EVENT);
        }
!!!36859831.java!!!	handleEvent(in event : int, inout remainder : String, inout iface : String) : void
        if (DBG) {
            Log.d(TAG, "handleEvent " + Integer.toString(event) + " " + remainder);
        }
        switch (event) {
            case DISCONNECTED:
                handleNetworkStateChange(NetworkInfo.DetailedState.DISCONNECTED, remainder, iface);
                break;

            case CONNECTED:
                handleNetworkStateChange(NetworkInfo.DetailedState.CONNECTED, remainder, iface);
                break;

            case SCAN_RESULTS:
                sendMessage(iface, SCAN_RESULTS_EVENT);
                break;

            case SCAN_FAILED:
                sendMessage(iface, SCAN_FAILED_EVENT);
                break;

            case UNKNOWN:
                if (DBG) {
                    Log.w(TAG, "handleEvent unknown: " + Integer.toString(event) + " " + remainder);
                }
                break;
            default:
                break;
        }
!!!36859959.java!!!	handleTargetBSSIDEvent(inout eventStr : String, inout iface : String) : void
        String BSSID = null;
        Matcher match = mTargetBSSIDPattern.matcher(eventStr);
        if (match.find()) {
            BSSID = match.group(1);
        }
        sendMessage(iface, WifiStateMachine.CMD_TARGET_BSSID, eventLogCounter, 0, BSSID);
!!!36860087.java!!!	handleAssociatedBSSIDEvent(inout eventStr : String, inout iface : String) : void
        String BSSID = null;
        Matcher match = mAssociatedPattern.matcher(eventStr);
        if (match.find()) {
            BSSID = match.group(1);
        }
        sendMessage(iface, WifiStateMachine.CMD_ASSOCIATED_BSSID, eventLogCounter, 0, BSSID);
!!!36860215.java!!!	handleWpsFailEvent(inout dataString : String, inout iface : String) : void
        final Pattern p = Pattern.compile(WPS_FAIL_PATTERN);
        Matcher match = p.matcher(dataString);
        int reason = 0;
        if (match.find()) {
            String cfgErrStr = match.group(1);
            String reasonStr = match.group(2);

            if (reasonStr != null) {
                int reasonInt = Integer.parseInt(reasonStr);
                switch(reasonInt) {
                    case REASON_TKIP_ONLY_PROHIBITED:
                        sendMessage(iface, WPS_FAIL_EVENT, WifiManager.WPS_TKIP_ONLY_PROHIBITED);
                        return;
                    case REASON_WEP_PROHIBITED:
                        sendMessage(iface, WPS_FAIL_EVENT, WifiManager.WPS_WEP_PROHIBITED);
                        return;
                    default:
                        reason = reasonInt;
                        break;
                }
            }
            if (cfgErrStr != null) {
                int cfgErrInt = Integer.parseInt(cfgErrStr);
                switch(cfgErrInt) {
                    case CONFIG_AUTH_FAILURE:
                        sendMessage(iface, WPS_FAIL_EVENT, WifiManager.WPS_AUTH_FAILURE);
                        return;
                    case CONFIG_MULTIPLE_PBC_DETECTED:
                        sendMessage(iface, WPS_FAIL_EVENT, WifiManager.WPS_OVERLAP_ERROR);
                        return;
                    default:
                        if (reason == 0) reason = cfgErrInt;
                        break;
                }
            }
        }
        //For all other errors, return a generic internal error
        sendMessage(iface, WPS_FAIL_EVENT, WifiManager.ERROR, reason);
!!!36860343.java!!!	p2pError(inout dataString : String) : WifiP2pServiceImpl::P2pStatus
        P2pStatus err = P2pStatus.UNKNOWN;
        String[] tokens = dataString.split(" ");
        if (tokens.length < 2) return err;
        String[] nameValue = tokens[1].split("=");
        if (nameValue.length != 2) return err;

        /* Handle the special case of reason=FREQ+CONFLICT */
        if (nameValue[1].equals("FREQ_CONFLICT")) {
            return P2pStatus.NO_COMMON_CHANNEL;
        }
        try {
            err = P2pStatus.valueOf(Integer.parseInt(nameValue[1]));
        } catch (NumberFormatException e) {
            e.printStackTrace();
        }
        return err;
!!!36860471.java!!!	getWifiP2pDevice(inout dataString : String) : WifiP2pDevice
        try {
            return new WifiP2pDevice(dataString);
        } catch (IllegalArgumentException e) {
            return null;
        }
!!!36860599.java!!!	getWifiP2pGroup(inout dataString : String) : WifiP2pGroup
        try {
            return new WifiP2pGroup(dataString);
        } catch (IllegalArgumentException e) {
            return null;
        }
!!!36860727.java!!!	handleP2pEvents(inout dataString : String, inout iface : String) : void
        if (dataString.startsWith(P2P_DEVICE_FOUND_STR)) {
            WifiP2pDevice device = getWifiP2pDevice(dataString);
            if (device != null) sendMessage(iface, P2P_DEVICE_FOUND_EVENT, device);
        } else if (dataString.startsWith(P2P_DEVICE_LOST_STR)) {
            WifiP2pDevice device = getWifiP2pDevice(dataString);
            if (device != null) sendMessage(iface, P2P_DEVICE_LOST_EVENT, device);
        } else if (dataString.startsWith(P2P_FIND_STOPPED_STR)) {
            sendMessage(iface, P2P_FIND_STOPPED_EVENT);
        } else if (dataString.startsWith(P2P_GO_NEG_REQUEST_STR)) {
            sendMessage(iface, P2P_GO_NEGOTIATION_REQUEST_EVENT, new WifiP2pConfig(dataString));
        } else if (dataString.startsWith(P2P_GO_NEG_SUCCESS_STR)) {
            sendMessage(iface, P2P_GO_NEGOTIATION_SUCCESS_EVENT);
        } else if (dataString.startsWith(P2P_GO_NEG_FAILURE_STR)) {
            sendMessage(iface, P2P_GO_NEGOTIATION_FAILURE_EVENT, p2pError(dataString));
        } else if (dataString.startsWith(P2P_GROUP_FORMATION_SUCCESS_STR)) {
            sendMessage(iface, P2P_GROUP_FORMATION_SUCCESS_EVENT);
        } else if (dataString.startsWith(P2P_GROUP_FORMATION_FAILURE_STR)) {
            sendMessage(iface, P2P_GROUP_FORMATION_FAILURE_EVENT, p2pError(dataString));
        } else if (dataString.startsWith(P2P_GROUP_STARTED_STR)) {
            WifiP2pGroup group = getWifiP2pGroup(dataString);
            if (group != null) sendMessage(iface, P2P_GROUP_STARTED_EVENT, group);
        } else if (dataString.startsWith(P2P_GROUP_REMOVED_STR)) {
            WifiP2pGroup group = getWifiP2pGroup(dataString);
            if (group != null) sendMessage(iface, P2P_GROUP_REMOVED_EVENT, group);
        } else if (dataString.startsWith(P2P_INVITATION_RECEIVED_STR)) {
            sendMessage(iface, P2P_INVITATION_RECEIVED_EVENT, new WifiP2pGroup(dataString));
        } else if (dataString.startsWith(P2P_INVITATION_RESULT_STR)) {
            sendMessage(iface, P2P_INVITATION_RESULT_EVENT, p2pError(dataString));
        } else if (dataString.startsWith(P2P_PROV_DISC_PBC_REQ_STR)) {
            sendMessage(iface, P2P_PROV_DISC_PBC_REQ_EVENT, new WifiP2pProvDiscEvent(dataString));
        } else if (dataString.startsWith(P2P_PROV_DISC_PBC_RSP_STR)) {
            sendMessage(iface, P2P_PROV_DISC_PBC_RSP_EVENT, new WifiP2pProvDiscEvent(dataString));
        } else if (dataString.startsWith(P2P_PROV_DISC_ENTER_PIN_STR)) {
            sendMessage(iface, P2P_PROV_DISC_ENTER_PIN_EVENT, new WifiP2pProvDiscEvent(dataString));
        } else if (dataString.startsWith(P2P_PROV_DISC_SHOW_PIN_STR)) {
            sendMessage(iface, P2P_PROV_DISC_SHOW_PIN_EVENT, new WifiP2pProvDiscEvent(dataString));
        } else if (dataString.startsWith(P2P_PROV_DISC_FAILURE_STR)) {
            sendMessage(iface, P2P_PROV_DISC_FAILURE_EVENT);
        } else if (dataString.startsWith(P2P_SERV_DISC_RESP_STR)) {
            List<WifiP2pServiceResponse> list = WifiP2pServiceResponse.newInstance(dataString);
            if (list != null) {
                sendMessage(iface, P2P_SERV_DISC_RESP_EVENT, list);
            } else {
                Log.e(TAG, "Null service resp " + dataString);
            }
        }
!!!36860855.java!!!	handleHostApEvents(inout dataString : String, inout iface : String) : void
        String[] tokens = dataString.split(" ");
        /* AP-STA-CONNECTED 42:fc:89:a8:96:09 p2p_dev_addr=02:90:4c:a0:92:54 */
        if (tokens[0].equals(AP_STA_CONNECTED_STR)) {
            sendMessage(iface, AP_STA_CONNECTED_EVENT, new WifiP2pDevice(dataString));
            /* AP-STA-DISCONNECTED 42:fc:89:a8:96:09 p2p_dev_addr=02:90:4c:a0:92:54 */
        } else if (tokens[0].equals(AP_STA_DISCONNECTED_STR)) {
            sendMessage(iface, AP_STA_DISCONNECTED_EVENT, new WifiP2pDevice(dataString));
        }
!!!36860983.java!!!	handleAnqpResult(inout eventStr : String, inout iface : String) : void
        int addrPos = eventStr.indexOf(ADDR_STRING);
        int resPos = eventStr.indexOf(RESULT_STRING);
        if (addrPos < 0 || resPos < 0) {
            throw new IllegalArgumentException("Unexpected ANQP result notification");
        }
        int eoaddr = eventStr.indexOf(' ', addrPos + ADDR_STRING.length());
        if (eoaddr < 0) {
            eoaddr = eventStr.length();
        }
        int eoresult = eventStr.indexOf(' ', resPos + RESULT_STRING.length());
        if (eoresult < 0) {
            eoresult = eventStr.length();
        }

        try {
            long bssid = Utils.parseMac(eventStr.substring(addrPos + ADDR_STRING.length(), eoaddr));
            int result = eventStr.substring(
                    resPos + RESULT_STRING.length(), eoresult).equalsIgnoreCase("success") ? 1 : 0;

            sendMessage(iface, ANQP_DONE_EVENT, result, 0, bssid);
        }
        catch (IllegalArgumentException iae) {
            Log.e(TAG, "Bad MAC address in ANQP response: " + iae.getMessage());
        }
!!!36861111.java!!!	handleIconResult(inout eventStr : String, inout iface : String) : void
        // RX-HS20-ICON c0:c5:20:27:d1:e8 <file> <size>
        String[] segments = eventStr.split(" ");
        if (segments.length != 4) {
            throw new IllegalArgumentException("Incorrect number of segments");
        }

        try {
            String bssid = segments[1];
            String fileName = segments[2];
            int size = Integer.parseInt(segments[3]);
            sendMessage(iface, RX_HS20_ANQP_ICON_EVENT,
                    new IconEvent(Utils.parseMac(bssid), fileName, size));
        }
        catch (NumberFormatException nfe) {
            throw new IllegalArgumentException("Bad numeral");
        }
!!!36861239.java!!!	handleWnmFrame(inout eventStr : String, inout iface : String) : void
        try {
            WnmData wnmData = WnmData.buildWnmData(eventStr);
            sendMessage(iface, HS20_REMEDIATION_EVENT, wnmData);
        } catch (IOException | NumberFormatException e) {
            Log.w(TAG, "Bad WNM event: '" + eventStr + "'");
        }
!!!36861367.java!!!	handleRequests(inout dataString : String, inout iface : String) : void
        String SSID = null;
        int reason = -2;
        String requestName = dataString.substring(REQUEST_PREFIX_LEN_STR);
        if (TextUtils.isEmpty(requestName)) {
            return;
        }
        if (requestName.startsWith(IDENTITY_STR)) {
            Matcher match = mRequestIdentityPattern.matcher(requestName);
            if (match.find()) {
                SSID = match.group(2);
                try {
                    reason = Integer.parseInt(match.group(1));
                } catch (NumberFormatException e) {
                    reason = -1;
                }
            } else {
                Log.e(TAG, "didn't find SSID " + requestName);
            }
            sendMessage(iface, SUP_REQUEST_IDENTITY, eventLogCounter, reason, SSID);
        } else if (requestName.startsWith(SIM_STR)) {
            Matcher matchGsm = mRequestGsmAuthPattern.matcher(requestName);
            Matcher matchUmts = mRequestUmtsAuthPattern.matcher(requestName);
            WifiStateMachine.SimAuthRequestData data =
                    new WifiStateMachine.SimAuthRequestData();
            if (matchGsm.find()) {
                data.networkId = Integer.parseInt(matchGsm.group(1));
                data.protocol = WifiEnterpriseConfig.Eap.SIM;
                data.ssid = matchGsm.group(4);
                data.data = matchGsm.group(2).split(":");
                sendMessage(iface, SUP_REQUEST_SIM_AUTH, data);
            } else if (matchUmts.find()) {
                data.networkId = Integer.parseInt(matchUmts.group(1));
                data.protocol = WifiEnterpriseConfig.Eap.AKA;
                data.ssid = matchUmts.group(4);
                data.data = new String[2];
                data.data[0] = matchUmts.group(2);
                data.data[1] = matchUmts.group(3);
                sendMessage(iface, SUP_REQUEST_SIM_AUTH, data);
            } else {
                Log.e(TAG, "couldn't parse SIM auth request - " + requestName);
            }

        } else {
            if (DBG) Log.w(TAG, "couldn't identify request type - " + dataString);
        }
!!!36861495.java!!!	handleSupplicantStateChange(inout dataString : String, inout iface : String) : void
        WifiSsid wifiSsid = null;
        int index = dataString.lastIndexOf("SSID=");
        if (index != -1) {
            wifiSsid = WifiSsid.createFromAsciiEncoded(
                    dataString.substring(index + 5));
        }
        String[] dataTokens = dataString.split(" ");

        String BSSID = null;
        int networkId = -1;
        int newState  = -1;
        for (String token : dataTokens) {
            String[] nameValue = token.split("=");
            if (nameValue.length != 2) {
                continue;
            }

            if (nameValue[0].equals("BSSID")) {
                BSSID = nameValue[1];
                continue;
            }

            int value;
            try {
                value = Integer.parseInt(nameValue[1]);
            } catch (NumberFormatException e) {
                continue;
            }

            if (nameValue[0].equals("id")) {
                networkId = value;
            } else if (nameValue[0].equals("state")) {
                newState = value;
            }
        }

        if (newState == -1) return;

        SupplicantState newSupplicantState = SupplicantState.INVALID;
        for (SupplicantState state : SupplicantState.values()) {
            if (state.ordinal() == newState) {
                newSupplicantState = state;
                break;
            }
        }
        if (newSupplicantState == SupplicantState.INVALID) {
            Log.w(TAG, "Invalid supplicant state: " + newState);
        }
        sendMessage(iface, SUPPLICANT_STATE_CHANGE_EVENT, eventLogCounter, 0,
                new StateChangeResult(networkId, wifiSsid, BSSID, newSupplicantState));
!!!36861623.java!!!	handleNetworkStateChange(inout newState : NetworkInfo::DetailedState, inout data : String, inout iface : String) : void
        String BSSID = null;
        int networkId = -1;
        int reason = 0;
        int ind = -1;
        int local = 0;
        Matcher match;
        if (newState == NetworkInfo.DetailedState.CONNECTED) {
            match = mConnectedEventPattern.matcher(data);
            if (!match.find()) {
               if (DBG) Log.d(TAG, "handleNetworkStateChange: Couldnt find BSSID in event string");
            } else {
                BSSID = match.group(1);
                try {
                    networkId = Integer.parseInt(match.group(2));
                } catch (NumberFormatException e) {
                    networkId = -1;
                }
            }
            sendMessage(iface, NETWORK_CONNECTION_EVENT, networkId, reason, BSSID);
        } else if (newState == NetworkInfo.DetailedState.DISCONNECTED) {
            match = mDisconnectedEventPattern.matcher(data);
            if (!match.find()) {
               if (DBG) Log.d(TAG, "handleNetworkStateChange: Could not parse disconnect string");
            } else {
                BSSID = match.group(1);
                try {
                    reason = Integer.parseInt(match.group(2));
                } catch (NumberFormatException e) {
                    reason = -1;
                }
                try {
                    local = Integer.parseInt(match.group(3));
                } catch (NumberFormatException e) {
                    local = -1;
                }
            }
            if (DBG) Log.d(TAG, "WifiMonitor notify network disconnect: "
                    + BSSID
                    + " reason=" + Integer.toString(reason));
            sendMessage(iface, NETWORK_DISCONNECTION_EVENT, local, reason, BSSID);
        }
