class GEOLocationElement
!!!36970423.java!!!	GEOLocationElement(inout infoID : Constants::ANQPElementType, inout payload : ByteBuffer)
        super(infoID);

        payload.get();
        int locLength = payload.get() & Constants.BYTE_MASK;

        if (locLength != GEO_LOCATION_LENGTH) {
            throw new ProtocolException("GeoLocation length field value " + locLength +
                    " incorrect, expected 16");
        }
        if (payload.remaining() != GEO_LOCATION_LENGTH) {
            throw new ProtocolException("Bad buffer length " + payload.remaining() +
                    ", expected 16");
        }

        ReverseBitStream reverseBitStream = new ReverseBitStream(payload);

        int rawLatRes = (int) reverseBitStream.sliceOff(RES_WIDTH);
        double latitude =
                fixToFloat(reverseBitStream.sliceOff(LL_WIDTH), LL_FRACTION_SIZE, LL_WIDTH);

        mLatitude = rawLatRes != 0 ?
                new RealValue(latitude, bitsToAbsResolution(rawLatRes, LL_WIDTH,
                        LL_FRACTION_SIZE)) :
                new RealValue(latitude);

        int rawLonRes = (int) reverseBitStream.sliceOff(RES_WIDTH);
        double longitude =
                fixToFloat(reverseBitStream.sliceOff(LL_WIDTH), LL_FRACTION_SIZE, LL_WIDTH);

        mLongitude = rawLonRes != 0 ?
                new RealValue(longitude, bitsToAbsResolution(rawLonRes, LL_WIDTH,
                        LL_FRACTION_SIZE)) :
                new RealValue(longitude);

        int altType = (int) reverseBitStream.sliceOff(ALT_TYPE_WIDTH);
        mAltitudeType = altType < AltitudeType.values().length ?
                AltitudeType.values()[altType] :
                AltitudeType.Unknown;

        int rawAltRes = (int) reverseBitStream.sliceOff(RES_WIDTH);
        double altitude = fixToFloat(reverseBitStream.sliceOff(ALT_WIDTH), ALT_FRACTION_SIZE,
                ALT_WIDTH);

        mAltitude = rawAltRes != 0 ?
                new RealValue(altitude, bitsToAbsResolution(rawAltRes, ALT_WIDTH,
                        ALT_FRACTION_SIZE)) :
                new RealValue(altitude);

        int datumValue = (int) reverseBitStream.sliceOff(DATUM_WIDTH);
        mDatum = datumValue < Datum.values().length ? Datum.values()[datumValue] : Datum.Unknown;
!!!36970551.java!!!	getLatitude() : GEOLocationElement::RealValue
        return mLatitude;
!!!36970679.java!!!	getLongitude() : GEOLocationElement::RealValue
        return mLongitude;
!!!36970807.java!!!	getAltitude() : GEOLocationElement::RealValue
        return mAltitude;
!!!36970935.java!!!	getAltitudeType() : GEOLocationElement::AltitudeType
        return mAltitudeType;
!!!36971063.java!!!	getDatum() : GEOLocationElement::Datum
        return mDatum;
!!!36971191.java!!!	toString() : String
        return "GEOLocation{" +
                "mLatitude=" + mLatitude +
                ", mLongitude=" + mLongitude +
                ", mAltitude=" + mAltitude +
                ", mAltitudeType=" + mAltitudeType +
                ", mDatum=" + mDatum +
                '}';
!!!36972087.java!!!	fixToFloat(in value : long, in fractionSize : int, in width : int) : double
        long sign = 1L << (width - 1);
        if ((value & sign) != 0) {
            value = -value;
            return -(double) (value & (sign - 1)) / (double) (1L << fractionSize);
        } else {
            return (double) (value & (sign - 1)) / (double) (1L << fractionSize);
        }
!!!36972215.java!!!	floatToFix(in value : double, in fractionSize : int, in width : int) : long
        return Math.round(value * (1L << fractionSize)) & ((1L << width) - 1);
!!!36972343.java!!!	getResolution(in variance : double) : int
        return (int) Math.ceil(Math.log(variance) * LOG2_FACTOR);
!!!36972471.java!!!	absResolutionToBits(in resolution : int, in fieldWidth : int, in fractionBits : int) : int
        return fieldWidth - fractionBits - 1 - resolution;
!!!36972599.java!!!	bitsToAbsResolution(in bits : long, in fieldWidth : int, in fractionBits : int) : int
        return fieldWidth - fractionBits - 1 - (int) bits;
