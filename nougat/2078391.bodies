class NAIRealmData
!!!36979639.java!!!	NAIRealmData(inout payload : ByteBuffer)
        if (payload.remaining() < 5) {
            throw new ProtocolException("Runt payload: " + payload.remaining());
        }

        int length = payload.getShort() & Constants.SHORT_MASK;
        if (length > payload.remaining()) {
            throw new ProtocolException("Invalid data length: " + length);
        }
        boolean utf8 = (payload.get() & 1) == Constants.UTF8_INDICATOR;

        String realm = Constants.getPrefixedString(payload, 1, utf8 ?
                StandardCharsets.UTF_8 :
                StandardCharsets.US_ASCII);
        String[] realms = realm.split(";");
        mRealms = new ArrayList<>();
        for (String realmElement : realms) {
            if (realmElement.length() > 0) {
                mRealms.add(realmElement);
            }
        }

        int methodCount = payload.get() & Constants.BYTE_MASK;
        mEAPMethods = new ArrayList<>(methodCount);
        while (methodCount > 0) {
            mEAPMethods.add(new EAPMethod(payload));
            methodCount--;
        }
!!!36979767.java!!!	getRealms() : String
        return Collections.unmodifiableList(mRealms);
!!!36979895.java!!!	getEAPMethods() : EAPMethod
        return Collections.unmodifiableList(mEAPMethods);
!!!36980023.java!!!	match(inout credLabels : List<String>, inout credential : Credential) : int
        int realmMatch = AuthMatch.None;
        if (!mRealms.isEmpty()) {
            for (String realm : mRealms) {
                List<String> labels = Utils.splitDomain(realm);
                if (DomainMatcher.arg2SubdomainOfArg1(credLabels, labels)) {
                    realmMatch = AuthMatch.Realm;
                    break;
                }
            }
            if (realmMatch == AuthMatch.None || mEAPMethods.isEmpty()) {
                return realmMatch;
            }
            // else there is a realm match and one or more EAP methods - check them.
        }
        else if (mEAPMethods.isEmpty()) {
            return AuthMatch.Indeterminate;
        }

        int best = AuthMatch.None;
        for (EAPMethod eapMethod : mEAPMethods) {
            int match = eapMethod.match(credential) | realmMatch;
            if (match > best) {
                best = match;
                if (best == AuthMatch.Exact) {
                    return best;
                }
            }
        }
        return best;
!!!36980151.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();

        sb.append("  NAI Realm(s)");
        for (String realm : mRealms) {
            sb.append(' ').append(realm);
        }
        sb.append('\n');

        for (EAPMethod eapMethod : mEAPMethods) {
            sb.append( "    " ).append(eapMethod.toString());
        }
        return sb.toString();
