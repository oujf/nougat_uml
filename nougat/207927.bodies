class ClassPathOpener
!!!742071.java!!!	ClassPathOpener(inout pathname : String, inout sort : boolean, inout consumer : ClassPathOpener::Consumer)
        this(pathname, sort, acceptAll, consumer);
!!!742199.java!!!	ClassPathOpener(inout pathname : String, inout sort : boolean, inout filter : ClassPathOpener::FileNameFilter, inout consumer : ClassPathOpener::Consumer)
        this.pathname = pathname;
        this.sort = sort;
        this.consumer = consumer;
        this.filter = filter;
!!!742327.java!!!	process() : boolean
        File file = new File(pathname);

        return processOne(file, true);
!!!742455.java!!!	processOne(inout file : File, inout topLevel : boolean) : boolean
        try {
            if (file.isDirectory()) {
                return processDirectory(file, topLevel);
            }

            String path = file.getPath();

            if (path.endsWith(".zip") ||
                    path.endsWith(".jar") ||
                    path.endsWith(".apk")) {
                return processArchive(file);
            }
            if (filter.accept(path)) {
                byte[] bytes = FileUtils.readFile(file);
                return consumer.processFileBytes(path, file.lastModified(), bytes);
            } else {
                return false;
            }
        } catch (Exception ex) {
            consumer.onException(ex);
            return false;
        }
!!!742583.java!!!	compareClassNames(inout a : String, inout b : String) : int
        // Ensure inner classes sort second
        a = a.replace('$','0');
        b = b.replace('$','0');

        /*
         * Assuming "package-info" only occurs at the end, ensures package-info
         * sorts first.
         */
        a = a.replace("package-info", "");
        b = b.replace("package-info", "");

        return a.compareTo(b);
!!!742711.java!!!	processDirectory(inout dir : File, inout topLevel : boolean) : boolean
        if (topLevel) {
            dir = new File(dir, ".");
        }

        File[] files = dir.listFiles();
        int len = files.length;
        boolean any = false;

        if (sort) {
            Arrays.sort(files, new Comparator<File>() {
                public int compare(File a, File b) {
                    return compareClassNames(a.getName(), b.getName());
                }
            });
        }

        for (int i = 0; i < len; i++) {
            any |= processOne(files[i], false);
        }

        return any;
!!!742839.java!!!	processArchive(inout file : File) : boolean
        ZipFile zip = new ZipFile(file);

        ArrayList<? extends java.util.zip.ZipEntry> entriesList
                = Collections.list(zip.entries());

        if (sort) {
            Collections.sort(entriesList, new Comparator<ZipEntry>() {
               public int compare (ZipEntry a, ZipEntry b) {
                   return compareClassNames(a.getName(), b.getName());
               }
            });
        }

        consumer.onProcessArchiveStart(file);

        ByteArrayOutputStream baos = new ByteArrayOutputStream(40000);
        byte[] buf = new byte[20000];
        boolean any = false;

        for (ZipEntry one : entriesList) {
            final boolean isDirectory = one.isDirectory();

            String path = one.getName();
            if (filter.accept(path)) {
                final byte[] bytes;
                if (!isDirectory) {
                    InputStream in = zip.getInputStream(one);

                    baos.reset();
                    int read;
                    while ((read = in.read(buf)) != -1) {
                        baos.write(buf, 0, read);
                    }

                    in.close();
                    bytes = baos.toByteArray();
                } else {
                    bytes = new byte[0];
                }

                any |= consumer.processFileBytes(path, one.getTime(), bytes);
            }
        }

        zip.close();
        return any;
