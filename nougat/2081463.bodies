class CacheKey
!!!36994615.java!!!	CacheKey(inout ssid : String, in bssid : long, in hessid : long)
            mSSID = ssid;
            mBSSID = bssid;
            mHESSID = hessid;
!!!36994743.java!!!	buildKey(inout network : NetworkDetail, inout standardESS : boolean) : AnqpCache::CacheKey
            String ssid;
            long bssid;
            long hessid;
            if (network.getAnqpDomainID() == 0L || (network.getHESSID() == 0L && !standardESS)) {
                ssid = network.getSSID();
                bssid = network.getBSSID();
                hessid = 0L;
            }
            else if (network.getHESSID() != 0L && network.getAnqpDomainID() > 0) {
                ssid = null;
                bssid = 0L;
                hessid = network.getHESSID();
            }
            else {
                ssid = network.getSSID();
                bssid = 0L;
                hessid = 0L;
            }

            return new CacheKey(ssid, bssid, hessid);
!!!36994871.java!!!	hashCode() : int
            if (mHESSID != 0) {
                return (int)((mHESSID >>> 32) * 31 + mHESSID);
            }
            else if (mBSSID != 0) {
                return (int)((mSSID.hashCode() * 31 + (mBSSID >>> 32)) * 31 + mBSSID);
            }
            else {
                return mSSID.hashCode();
            }
!!!36994999.java!!!	equals(inout thatObject : Object) : boolean
            if (thatObject == this) {
                return true;
            }
            else if (thatObject == null || thatObject.getClass() != CacheKey.class) {
                return false;
            }
            CacheKey that = (CacheKey) thatObject;
            return Utils.compare(that.mSSID, mSSID) == 0 &&
                    that.mBSSID == mBSSID &&
                    that.mHESSID == mHESSID;
!!!36995127.java!!!	toString() : String
            if (mHESSID != 0L) {
                return "HESSID:" + NetworkDetail.toMACString(mHESSID);
            }
            else if (mBSSID != 0L) {
                return NetworkDetail.toMACString(mBSSID) +
                        ":<" + Utils.toUnicodeEscapedString(mSSID) + ">";
            }
            else {
                return '<' + Utils.toUnicodeEscapedString(mSSID) + '>';
            }
