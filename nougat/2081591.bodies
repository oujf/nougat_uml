class ANQPData
!!!36995895.java!!!	ANQPData(inout clock : Clock, inout network : NetworkDetail, inout anqpElements : Map<Constants.ANQPElementType, ANQPElement>)

        mClock = clock;
        mNetwork = network;
        mANQPElements = anqpElements != null ? new HashMap<>(anqpElements) : null;
        mCtime = mClock.currentTimeMillis();
        mRetry = 0;
        if (anqpElements == null) {
            mExpiry = mCtime + ANQP_HOLDOFF_TIME;
        }
        else if (network.getAnqpDomainID() == 0) {
            mExpiry = mCtime + ANQP_UNQUALIFIED_CACHE_TIMEOUT;
        }
        else {
            mExpiry = mCtime + ANQP_QUALIFIED_CACHE_TIMEOUT;
        }
!!!36996023.java!!!	ANQPData(inout clock : Clock, inout network : NetworkDetail, inout existing : ANQPData)
        mClock = clock;
        mNetwork = network;
        mANQPElements = null;
        mCtime = mClock.currentTimeMillis();
        if (existing == null) {
            mRetry = 0;
            mExpiry = mCtime + ANQP_HOLDOFF_TIME;
        }
        else {
            mRetry = Math.max(existing.getRetry() + 1, MAX_RETRY);
            mExpiry = ANQP_HOLDOFF_TIME * (1<<mRetry);
        }
!!!36996151.java!!!	disjoint(inout querySet : List<Constants.ANQPElementType>) : Constants::ANQPElementType
        if (mANQPElements == null) {
            // Ignore the query set for pending responses, it has minimal probability to happen
            // and a new query will be reissued on the next round anyway.
            return null;
        }
        else {
            List<Constants.ANQPElementType> additions = new ArrayList<>();
            for (Constants.ANQPElementType element : querySet) {
                if (!mANQPElements.containsKey(element)) {
                    additions.add(element);
                }
            }
            return additions.isEmpty() ? null : additions;
        }
!!!36996279.java!!!	getANQPElements() : Constants::ANQPElementType
        return Collections.unmodifiableMap(mANQPElements);
!!!36996407.java!!!	getNetwork() : NetworkDetail
        return mNetwork;
!!!36996535.java!!!	expired() : boolean
        return expired(mClock.currentTimeMillis());
!!!36996663.java!!!	expired(in at : long) : boolean
        return mExpiry <= at;
!!!36996791.java!!!	hasData() : boolean
        return mANQPElements != null;
!!!36996919.java!!!	merge(inout data : Map<Constants.ANQPElementType, ANQPElement>) : void
        if (data != null) {
            mANQPElements.putAll(data);
        }
!!!36997047.java!!!	isValid(inout nwk : NetworkDetail) : boolean
        return mANQPElements != null &&
                nwk.getAnqpDomainID() == mNetwork.getAnqpDomainID() &&
                mExpiry > mClock.currentTimeMillis();
!!!36997175.java!!!	getRetry() : int
        return mRetry;
!!!36997303.java!!!	toString(inout brief : boolean) : String
        StringBuilder sb = new StringBuilder();
        sb.append(mNetwork.toKeyString()).append(", domid ").append(mNetwork.getAnqpDomainID());
        if (mANQPElements == null) {
            sb.append(", unresolved, ");
        }
        else {
            sb.append(", ").append(mANQPElements.size()).append(" elements, ");
        }
        long now = mClock.currentTimeMillis();
        sb.append(Utils.toHMS(now-mCtime)).append(" old, expires in ").
                append(Utils.toHMS(mExpiry-now)).append(' ');
        if (brief) {
            sb.append(expired(now) ? 'x' : '-');
            sb.append(mANQPElements == null ? 'u' : '-');
        }
        else if (mANQPElements != null) {
            sb.append(" data=").append(mANQPElements);
        }
        return sb.toString();
!!!36997431.java!!!	toString() : String
        return toString(true);
