class OMADMAdapter
!!!37004215.java!!!	getInstance(inout context : Context) : OMADMAdapter
        synchronized (OMADMAdapter.class) {
            if (sInstance == null) {
                sInstance = new OMADMAdapter(context);
            }
            return sInstance;
        }
!!!37004343.java!!!	OMADMAdapter(inout context : Context)
        mContext = context;

        TelephonyManager tm = (TelephonyManager) context
                .getSystemService(Context.TELEPHONY_SERVICE);
        String simOperator = tm.getSimOperator();
        mImsi = tm.getSubscriberId();
        mImei = tm.getImei();
        String strDevId;

        /* Use MEID for sprint */
        if ("310120".equals(simOperator) || (mImsi != null && mImsi.startsWith("310120"))) {
                /* MEID is 14 digits. If IMEI is returned as DevId, MEID can be extracted by taking
                 * first 14 characters. This is not always true but should be the case for sprint */
            strDevId = tm.getDeviceId().toUpperCase(Locale.US);
            if (strDevId != null && strDevId.length() >= IMEI_Length) {
                strDevId = strDevId.substring(0, IMEI_Length);
            } else {
                Log.w(Utils.hs2LogTag(getClass()),
                        "MEID cannot be extracted from DeviceId " + strDevId);
            }
        } else {
            if (isPhoneTypeLTE()) {
                strDevId = mImei;
            } else {
                strDevId = tm.getDeviceId();
            }
            if (strDevId == null) {
                strDevId = "unknown";
            }
            strDevId = strDevId.toUpperCase(Locale.US);

            if (!isPhoneTypeLTE()) {
                strDevId = strDevId.substring(0, IMEI_Length);
            }
        }
        mDevID = strDevId;

        mDevInfo = new ArrayList<>();
        mDevInfo.add(new ConstPathAccessor<>(strDevId, "DevInfo", "DevID"));
        mDevInfo.add(new ConstPathAccessor<>(getProperty(context, "Man", "ro.product.manufacturer", "unknown"), "DevInfo", "Man"));
        mDevInfo.add(new ConstPathAccessor<>(getProperty(context, "Mod", "ro.product.model", "generic"), "DevInfo", "Mod"));
        mDevInfo.add(new ConstPathAccessor<>(getLocale(context), "DevInfo", "Lang"));
        mDevInfo.add(new ConstPathAccessor<>("1.2", "DevInfo", "DmV"));

        mDevDetail = new ArrayList<>();
        mDevDetail.add(new ConstPathAccessor<>(getDeviceType(), "DevDetail", "DevType"));
        mDevDetail.add(new ConstPathAccessor<>(SystemProperties.get("ro.product.brand"), "DevDetail", "OEM"));
        mDevDetail.add(new ConstPathAccessor<>(getVersion(context, false), "DevDetail", "FwV"));
        mDevDetail.add(new ConstPathAccessor<>(getVersion(context, true), "DevDetail", "SwV"));
        mDevDetail.add(new ConstPathAccessor<>(getHwV(), "DevDetail", "HwV"));
        mDevDetail.add(new ConstPathAccessor<>("TRUE", "DevDetail", "LrgObj"));

        mDevDetail.add(new ConstPathAccessor<>(32, "DevDetail", "URI", "MaxDepth"));
        mDevDetail.add(new ConstPathAccessor<>(2048, "DevDetail", "URI", "MaxTotLen"));
        mDevDetail.add(new ConstPathAccessor<>(64, "DevDetail", "URI", "MaxSegLen"));

        AtomicInteger index = new AtomicInteger(1);
        mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_TTLS, ExtWiFiPath, "EAPMethodList", index, "EAPType"));
        mDevDetail.add(new ConstPathAccessor<>(mapInnerType(NonEAPType.MSCHAPv2), ExtWiFiPath, "EAPMethodList", index, "InnerMethod"));

        index.incrementAndGet();
        mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_TTLS, ExtWiFiPath, "EAPMethodList", index, "EAPType"));
        mDevDetail.add(new ConstPathAccessor<>(mapInnerType(NonEAPType.PAP), ExtWiFiPath, "EAPMethodList", index, "InnerMethod"));

        index.incrementAndGet();
        mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_TTLS, ExtWiFiPath, "EAPMethodList", index, "EAPType"));
        mDevDetail.add(new ConstPathAccessor<>(mapInnerType(NonEAPType.MSCHAP), ExtWiFiPath, "EAPMethodList", index, "InnerMethod"));

        index.incrementAndGet();
        mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_TLS, ExtWiFiPath, "EAPMethodList", index, "EAPType"));
        index.incrementAndGet();
        mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_AKA, ExtWiFiPath, "EAPMethodList", index, "EAPType"));
        index.incrementAndGet();
        mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_AKAPrim, ExtWiFiPath, "EAPMethodList", index, "EAPType"));
        index.incrementAndGet();
        mDevDetail.add(new ConstPathAccessor<>(EAP.EAP_SIM, ExtWiFiPath, "EAPMethodList", index, "EAPType"));

        mDevDetail.add(new ConstPathAccessor<>("FALSE", ExtWiFiPath, "ManufacturingCertificate"));
        mDevDetail.add(new ConstPathAccessor<>(mImsi, ExtWiFiPath, "IMSI"));
        mDevDetail.add(new ConstPathAccessor<>(mImei, ExtWiFiPath, "IMEI_MEID"));
        mDevDetail.add(new PathAccessor(ExtWiFiPath, "Wi-FiMACAddress") {
            @Override
            protected String getValue() {
                return getMAC();
            }
        });
!!!37004471.java!!!	buildNode(inout pathAccessor : OMADMAdapter::PathAccessor, in depth : int, inout parent : OMAConstructed) : void
        String[] path = pathAccessor.getPath();
        String name = path[depth];
        if (depth < path.length - 1) {
            OMAConstructed node = (OMAConstructed) parent.getChild(name);
            if (node == null) {
                node = (OMAConstructed) parent.addChild(name, RTProps.get(name),
                        null, null);
            }
            buildNode(pathAccessor, depth + 1, node);
        }
        else if (pathAccessor.getValue() != null) {
            parent.addChild(name, null, pathAccessor.getValue().toString(), null);
        }
!!!37004599.java!!!	getMAC() : String
        WifiManager wifiManager = (WifiManager) mContext.getSystemService(Context.WIFI_SERVICE);
        return wifiManager != null ?
                String.format("%012x",
                        Utils.parseMac(wifiManager.getConnectionInfo().getMacAddress())) :
                null;
!!!37004727.java!!!	getImei() : String
        return mImei;
!!!37004855.java!!!	getMeid() : byte
        return Arrays.copyOf(mImei.getBytes(StandardCharsets.ISO_8859_1), IMEI_Length);
!!!37004983.java!!!	getDevID() : String
        return mDevID;
!!!37005111.java!!!	getMO(inout urn : String) : MOTree
        try {
            switch (urn) {
                case OMAConstants.DevInfoURN:
                    if (mDevInfoTree == null) {
                        OMAConstructed root = new OMAConstructed(null, "DevInfo", urn);
                        for (PathAccessor pathAccessor : mDevInfo) {
                            buildNode(pathAccessor, 1, root);
                        }
                        mDevInfoTree = MOTree.buildMgmtTree(OMAConstants.DevInfoURN,
                                OMAConstants.OMAVersion, root);
                    }
                    return mDevInfoTree;
                case OMAConstants.DevDetailURN:
                    if (mDevDetailTree == null) {
                        OMAConstructed root = new OMAConstructed(null, "DevDetail", urn);
                        for (PathAccessor pathAccessor : mDevDetail) {
                            buildNode(pathAccessor, 1, root);
                        }
                        mDevDetailTree = MOTree.buildMgmtTree(OMAConstants.DevDetailURN,
                                OMAConstants.OMAVersion, root);
                    }
                    return mDevDetailTree;
                default:
                    throw new IllegalArgumentException(urn);
            }
        }
        catch (IOException ioe) {
            Log.e(Utils.hs2LogTag(getClass()), "Caught exception building OMA Tree: " + ioe, ioe);
            return null;
        }

        /*
        switch (urn) {
            case DevInfoURN: return DevInfo;
            case DevDetailURN: return DevDetail;
            default: throw new IllegalArgumentException(urn);
        }
        */
!!!37005239.java!!!	isPhoneTypeLTE() : boolean
        return true;
!!!37005367.java!!!	getHwV() : String
        try {
            return SystemProperties.get("ro.hardware", "Unknown")
                    + "." + SystemProperties.get("ro.revision", "Unknown");
        } catch (RuntimeException e) {
            return  "Unknown";
        }
!!!37005495.java!!!	getDeviceType() : String
        String devicetype = SystemProperties.get("ro.build.characteristics");
        if ((((TextUtils.isEmpty(devicetype)) || (!devicetype.equals("tablet"))))) {
            devicetype = "phone";
        }
        return devicetype;
!!!37005623.java!!!	getVersion(inout context : Context, inout swv : boolean) : String
        String version;
        try {
            if (!isSprint(context) && swv) {
                return "Android " + SystemProperties.get("ro.build.version.release");
            } else {
                version = SystemProperties.get("ro.build.version.full");
                if (null == version || version.equals("")) {
                    return SystemProperties.get("ro.build.id", null) + "~"
                            + SystemProperties.get("ro.build.config.version", null) + "~"
                            + SystemProperties.get("gsm.version.baseband", null) + "~"
                            + SystemProperties.get("ro.gsm.flexversion", null);
                }
            }
        } catch (RuntimeException e) {
            return "Unknown";
        }
        return version;
!!!37005751.java!!!	isSprint(inout context : Context) : boolean
        TelephonyManager tm = (TelephonyManager) context
                .getSystemService(Context.TELEPHONY_SERVICE);
        String simOperator = tm.getSimOperator();
        String imsi = tm.getSubscriberId();
        /* Use MEID for sprint */
        if ("310120".equals(simOperator) || (imsi != null && imsi.startsWith("310120"))) {
            return true;
        } else {
            return false;
        }
!!!37005879.java!!!	getLocale(inout context : Context) : String
        String strLang = readValueFromFile(context, "Lang");
        if (strLang == null) {
            strLang = Locale.getDefault().toString();
        }
        return strLang;
!!!37006007.java!!!	getProperty(inout context : Context, inout key : String, inout propKey : String, inout dflt : String) : String
        String strMan = readValueFromFile(context, key);
        if (strMan == null) {
            strMan = SystemProperties.get(propKey, dflt);
        }
        return strMan;
!!!37006135.java!!!	readValueFromFile(inout context : Context, inout propName : String) : String
        String ret = null;
        // use preference instead of the system property
        SharedPreferences prefs = context.getSharedPreferences("dmconfig", 0);
        if (prefs.contains(propName)) {
            ret = prefs.getString(propName, "");
            if (ret.length() == 0) {
                ret = null;
            }
        }
        return ret;
