class PasspointMatchInfo
!!!37006263.java!!!	PasspointMatchInfo(inout passpointMatch : PasspointMatch, inout scanDetail : ScanDetail, inout homeSP : HomeSP)
        mPasspointMatch = passpointMatch;
        mScanDetail = scanDetail;
        mHomeSP = homeSP;

        int score;
        if (passpointMatch == PasspointMatch.HomeProvider) {
            score = 100;
        }
        else if (passpointMatch == PasspointMatch.RoamingProvider) {
            score = 0;
        }
        else {
            score = -1000;  // Don't expect to see anything not home or roaming.
        }

        if (getNetworkDetail().getHSRelease() != null) {
            score += getNetworkDetail().getHSRelease() != NetworkDetail.HSRelease.Unknown ? 50 : 0;
        }

        if (getNetworkDetail().hasInterworking()) {
            score += getNetworkDetail().isInternet() ? 20 : -20;
        }

        score += (Math.max(200-getNetworkDetail().getStationCount(), 0) *
                (255-getNetworkDetail().getChannelUtilization()) *
                getNetworkDetail().getCapacity()) >>> 26;
                // Gives a value of 23 max capped at 200 stations and max cap 31250

        if (getNetworkDetail().hasInterworking()) {
            score += sAntScores.get(getNetworkDetail().getAnt());
        }

        Map<ANQPElementType, ANQPElement> anqp = getNetworkDetail().getANQPElements();

        if (anqp != null) {
            HSWanMetricsElement wm = (HSWanMetricsElement) anqp.get(ANQPElementType.HSWANMetrics);

            if (wm != null) {
                if (wm.getStatus() != HSWanMetricsElement.LinkStatus.Up || wm.isCapped()) {
                    score -= 1000;
                } else {
                    long scaledSpeed =
                            wm.getDlSpeed() * (255 - wm.getDlLoad()) * 8 +
                                    wm.getUlSpeed() * (255 - wm.getUlLoad()) * 2;
                    score += Math.min(scaledSpeed, 255000000L) >>> 23;
                    // Max value is 30 capped at 100Mb/s
                }
            }

            IPAddressTypeAvailabilityElement ipa =
                    (IPAddressTypeAvailabilityElement) anqp.get(ANQPElementType.ANQPIPAddrAvailability);

            if (ipa != null) {
                Integer as14 = sIP4Scores.get(ipa.getV4Availability());
                Integer as16 = sIP6Scores.get(ipa.getV6Availability());
                as14 = as14 != null ? as14 : 1;
                as16 = as16 != null ? as16 : 1;
                // Is IPv4 twice as important as IPv6???
                score += as14 * 2 + as16;
            }

            HSConnectionCapabilityElement cce =
                    (HSConnectionCapabilityElement) anqp.get(ANQPElementType.HSConnCapability);

            if (cce != null) {
                score = Math.min(Math.max(protoScore(cce) >> 3, -10), 10);
            }
        }

        mScore = score;
!!!37006391.java!!!	getPasspointMatch() : PasspointMatch
        return mPasspointMatch;
!!!37006519.java!!!	getScanDetail() : ScanDetail
        return mScanDetail; 
!!!37006647.java!!!	getNetworkDetail() : NetworkDetail
        return mScanDetail.getNetworkDetail(); 
!!!37006775.java!!!	getHomeSP() : HomeSP
        return mHomeSP;
!!!37006903.java!!!	getScore() : int
        return mScore;
!!!37007031.java!!!	compareTo(inout that : PasspointMatchInfo) : int
        return getScore() - that.getScore();
!!!37007159.java!!!	protoScore(inout cce : HSConnectionCapabilityElement) : int
        int score = 0;
        for (HSConnectionCapabilityElement.ProtocolTuple tuple : cce.getStatusList()) {
            int sign = tuple.getStatus() == HSConnectionCapabilityElement.ProtoStatus.Open ?
                    1 : -1;

            int elementScore = 1;
            if (tuple.getProtocol() == IPPROTO_ICMP) {
                elementScore = 1;
            }
            else if (tuple.getProtocol() == IPPROTO_ESP) {
                elementScore = 5;
            }
            else {
                Map<Integer, Integer> protoMap = sPortScores.get(tuple.getProtocol());
                if (protoMap != null) {
                    Integer portScore = protoMap.get(tuple.getPort());
                    elementScore = portScore != null ? portScore : 0;
                }
            }
            score += elementScore * sign;
        }
        return score;
!!!37007287.java!!!	equals(inout thatObject : Object) : boolean
        if (this == thatObject) {
            return true;
        }
        if (thatObject == null || getClass() != thatObject.getClass()) {
            return false;
        }

        PasspointMatchInfo that = (PasspointMatchInfo)thatObject;

        return getNetworkDetail().equals(that.getNetworkDetail()) &&
                getHomeSP().equals(that.getHomeSP()) &&
                getPasspointMatch().equals(that.getPasspointMatch());
!!!37007415.java!!!	hashCode() : int
        int result = mPasspointMatch != null ? mPasspointMatch.hashCode() : 0;
        result = 31 * result + getNetworkDetail().hashCode();
        result = 31 * result + (mHomeSP != null ? mHomeSP.hashCode() : 0);
        return result;
!!!37007543.java!!!	toString() : String
        return "PasspointMatchInfo{" +
                ", mPasspointMatch=" + mPasspointMatch +
                ", mNetworkInfo=" + getNetworkDetail().getSSID() +
                ", mHomeSP=" + mHomeSP.getFQDN() +
                '}';
