class OMANode
!!!37010231.java!!!	OMANode(inout parent : OMAConstructed, inout name : String, inout context : String, inout avps : Map<String, String>)
        mParent = parent;
        mName = name;
        mContext = context;
        mAttributes = avps;
!!!37010359.java!!!	buildAttributes(inout avps : String) : String
        if (avps == null) {
            return null;
        }
        Map<String, String> attributes = new HashMap<>();
        for (int n = 0; n < avps.length; n += 2) {
            attributes.put(avps[n], avps[n+1]);
        }
        return attributes;
!!!37010487.java!!!	getAttributes() : String
        return mAttributes;
!!!37010615.java!!!	getParent() : OMAConstructed
        return mParent;
!!!37010743.java!!!	getName() : String
        return mName;
!!!37010871.java!!!	getContext() : String
        return mContext;
!!!37010999.java!!!	getPath() : String
        LinkedList<String> path = new LinkedList<>();
        for (OMANode node = this; node != null; node = node.getParent()) {
            path.addFirst(node.getName());
        }
        return path;
!!!37011127.java!!!	getPathString() : String
        StringBuilder sb = new StringBuilder();
        for (String element : getPath()) {
            sb.append('/').append(element);
        }
        return sb.toString();
!!!37011255.java!!!	escape(inout s : String) : String
        StringBuilder sb = new StringBuilder(s.length());
        for (int n = 0; n < s.length(); n++) {
            char ch = s.charAt(n);
            String escape = sEscapes.get(ch);
            if (escape != null) {
                sb.append(escape);
            } else {
                sb.append(ch);
            }
        }
        return sb.toString();
!!!37012791.java!!!	toXml(inout sb : StringBuilder) : void
        sb.append('<').append(MOTree.NodeTag);
        if (mAttributes != null && !mAttributes.isEmpty()) {
            for (Map.Entry<String, String> avp : mAttributes.entrySet()) {
                sb.append(' ').append(avp.getKey()).append("=\"")
                        .append(escape(avp.getValue())).append('"');
            }
        }
        sb.append(">\n");

        sb.append('<').append(MOTree.NodeNameTag).append('>');
        sb.append(getName());
        sb.append("</").append(MOTree.NodeNameTag).append(">\n");

        fillPayload(sb);

        sb.append("</").append(MOTree.NodeTag).append(">\n");
!!!37012919.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
        toString(sb, 0);
        return sb.toString();
!!!37013047.java!!!	unmarshal(inout in : InputStream) : OMAConstructed
        OMANode node = buildNode(in, null);
        if (node == null || node.isLeaf()) {
            throw new IOException("Bad OMA tree");
        }
        unmarshal(in, (OMAConstructed) node);
        return (OMAConstructed) node;
!!!37013175.java!!!	unmarshal(inout in : InputStream, inout parent : OMAConstructed) : void
        for (; ; ) {
            OMANode node = buildNode(in, parent);
            if (node == null) {
                return;
            }
            else if (!node.isLeaf()) {
                unmarshal(in, (OMAConstructed) node);
            }
        }
!!!37013303.java!!!	buildNode(inout in : InputStream, inout parent : OMAConstructed) : OMANode
        String name = OMAConstants.deserializeString(in);
        if (name == null) {
            return null;
        }

        String urn = null;
        int next = in.read();
        if (next == '(') {
            urn = OMAConstants.readURN(in);
            next = in.read();
        }

        if (next == '=') {
            String value = OMAConstants.deserializeString(in);
            return parent.addChild(name, urn, value, null);
        } else if (next == '+') {
            if (parent != null) {
                return parent.addChild(name, urn, null, null);
            } else {
                return new OMAConstructed(null, name, urn);
            }
        }
        else {
            throw new IOException("Parse error: expected = or + after node name");
        }
