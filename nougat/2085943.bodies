class WifiNanClientState
!!!37041335.java!!!	WifiNanClientState(in uid : int, inout listener : IWifiNanEventListener, in events : int)
        mUid = uid;
        mListener = listener;
        mEvents = events;
!!!37041463.java!!!	destroy() : void
        mListener = null;
        for (int i = 0; i < mSessions.size(); ++i) {
            mSessions.valueAt(i).destroy();
        }
        mSessions.clear();
        mConfigRequest = null;
!!!37041591.java!!!	setConfigRequest(inout configRequest : ConfigRequest) : void
        mConfigRequest = configRequest;
!!!37041719.java!!!	getConfigRequest() : ConfigRequest
        return mConfigRequest;
!!!37041847.java!!!	getUid() : int
        return mUid;
!!!37041975.java!!!	getNanSessionStateForPubSubId(in pubSubId : int) : WifiNanSessionState
        for (int i = 0; i < mSessions.size(); ++i) {
            WifiNanSessionState session = mSessions.valueAt(i);
            if (session.isPubSubIdSession(pubSubId)) {
                return session;
            }
        }

        return null;
!!!37042103.java!!!	createSession(in sessionId : int, inout listener : IWifiNanSessionListener, in events : int) : void
        WifiNanSessionState session = mSessions.get(sessionId);
        if (session != null) {
            Log.e(TAG, "createSession: sessionId already exists (replaced) - " + sessionId);
        }

        mSessions.put(sessionId, new WifiNanSessionState(sessionId, listener, events));
!!!37042231.java!!!	destroySession(in sessionId : int) : void
        WifiNanSessionState session = mSessions.get(sessionId);
        if (session == null) {
            Log.e(TAG, "destroySession: sessionId doesn't exist - " + sessionId);
            return;
        }

        mSessions.delete(sessionId);
        session.destroy();
!!!37042359.java!!!	getSession(in sessionId : int) : WifiNanSessionState
        return mSessions.get(sessionId);
!!!37042487.java!!!	onConfigCompleted(inout completedConfig : ConfigRequest) : void
        if (mListener != null && (mEvents & WifiNanEventListener.LISTEN_CONFIG_COMPLETED) != 0) {
            try {
                mListener.onConfigCompleted(completedConfig);
            } catch (RemoteException e) {
                Log.w(TAG, "onConfigCompleted: RemoteException - ignored: " + e);
            }
        }
!!!37042615.java!!!	onConfigFailed(inout failedConfig : ConfigRequest, in reason : int) : void
        if (mListener != null && (mEvents & WifiNanEventListener.LISTEN_CONFIG_FAILED) != 0) {
            try {
                mListener.onConfigFailed(failedConfig, reason);
            } catch (RemoteException e) {
                Log.w(TAG, "onConfigFailed: RemoteException - ignored: " + e);
            }
        }
!!!37042743.java!!!	onNanDown(in reason : int) : int
        if (mListener != null && (mEvents & WifiNanEventListener.LISTEN_NAN_DOWN) != 0) {
            try {
                mListener.onNanDown(reason);
            } catch (RemoteException e) {
                Log.w(TAG, "onNanDown: RemoteException - ignored: " + e);
            }

            return 1;
        }

        return 0;
!!!37042871.java!!!	onInterfaceAddressChange(inout mac : byte) : int
        if (mListener != null && (mEvents & WifiNanEventListener.LISTEN_IDENTITY_CHANGED) != 0) {
            try {
                mListener.onIdentityChanged();
            } catch (RemoteException e) {
                Log.w(TAG, "onIdentityChanged: RemoteException - ignored: " + e);
            }

            return 1;
        }

        return 0;
!!!37042999.java!!!	onClusterChange(in flag : int, inout mac : byte) : int
        if (mListener != null && (mEvents & WifiNanEventListener.LISTEN_IDENTITY_CHANGED) != 0) {
            try {
                mListener.onIdentityChanged();
            } catch (RemoteException e) {
                Log.w(TAG, "onIdentityChanged: RemoteException - ignored: " + e);
            }

            return 1;
        }

        return 0;
!!!37043127.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        pw.println("NanClientState:");
        pw.println("  mUid: " + mUid);
        pw.println("  mConfigRequest: " + mConfigRequest);
        pw.println("  mListener: " + mListener);
        pw.println("  mEvents: " + mEvents);
        pw.println("  mSessions: [" + mSessions + "]");
        for (int i = 0; i < mSessions.size(); ++i) {
            mSessions.valueAt(i).dump(fd, pw, args);
        }
