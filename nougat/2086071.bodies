class WifiNanSessionState
!!!37049399.java!!!	WifiNanSessionState(in sessionId : int, inout listener : IWifiNanSessionListener, in events : int)
        mSessionId = sessionId;
        mListener = listener;
        mEvents = events;
!!!37049527.java!!!	destroy() : void
        stop(WifiNanStateManager.getInstance().createNextTransactionId());
        if (mPubSubIdValid) {
            mMacByRequestorInstanceId.clear();
            mListener = null;
            mPubSubIdValid = false;
        }
!!!37049655.java!!!	getSessionId() : int
        return mSessionId;
!!!37049783.java!!!	isPubSubIdSession(in pubSubId : int) : boolean
        return mPubSubIdValid && mPubSubId == pubSubId;
!!!37049911.java!!!	publish(in transactionId : short, inout data : PublishData, inout settings : PublishSettings) : void
        if (mSessionType == SESSION_TYPE_SUBSCRIBE) {
            throw new IllegalStateException("A SUBSCRIBE session is being used for publish");
        }
        mSessionType = SESSION_TYPE_PUBLISH;

        WifiNanNative.getInstance().publish(transactionId, mPubSubIdValid ? mPubSubId : 0, data,
                settings);
!!!37050039.java!!!	subscribe(in transactionId : short, inout data : SubscribeData, inout settings : SubscribeSettings) : void
        if (mSessionType == SESSION_TYPE_PUBLISH) {
            throw new IllegalStateException("A PUBLISH session is being used for publish");
        }
        mSessionType = SESSION_TYPE_SUBSCRIBE;

        WifiNanNative.getInstance().subscribe(transactionId, mPubSubIdValid ? mPubSubId : 0, data,
                settings);
!!!37050167.java!!!	sendMessage(in transactionId : short, in peerId : int, inout message : byte, in messageLength : int, in messageId : int) : void
        if (!mPubSubIdValid) {
            Log.e(TAG, "sendMessage: attempting to send a message on a non-live session "
                    + "(no successful publish or subscribe");
            onMessageSendFail(messageId, WifiNanSessionListener.FAIL_REASON_NO_MATCH_SESSION);
            return;
        }

        String peerMacStr = mMacByRequestorInstanceId.get(peerId);
        if (peerMacStr == null) {
            Log.e(TAG, "sendMessage: attempting to send a message to an address which didn't "
                    + "match/contact us");
            onMessageSendFail(messageId, WifiNanSessionListener.FAIL_REASON_NO_MATCH_SESSION);
            return;
        }
        byte[] peerMac = HexEncoding.decode(peerMacStr.toCharArray(), false);

        WifiNanNative.getInstance().sendMessage(transactionId, mPubSubId, peerId, peerMac, message,
                messageLength);
!!!37050295.java!!!	stop(in transactionId : short) : void
        if (!mPubSubIdValid || mSessionType == SESSION_TYPE_NOT_INIT) {
            Log.e(TAG, "sendMessage: attempting to stop pub/sub on a non-live session (no "
                    + "successful publish or subscribe");
            return;
        }

        if (mSessionType == SESSION_TYPE_PUBLISH) {
            WifiNanNative.getInstance().stopPublish(transactionId, mPubSubId);
        } else if (mSessionType == SESSION_TYPE_SUBSCRIBE) {
            WifiNanNative.getInstance().stopSubscribe(transactionId, mPubSubId);
        }
!!!37050423.java!!!	onPublishSuccess(in publishId : int) : void
        mPubSubId = publishId;
        mPubSubIdValid = true;
!!!37050551.java!!!	onPublishFail(in status : int) : void
        mPubSubIdValid = false;
        try {
            if (mListener != null && (mEvents & WifiNanSessionListener.LISTEN_PUBLISH_FAIL) != 0) {
                mListener.onPublishFail(status);
            }
        } catch (RemoteException e) {
            Log.w(TAG, "onPublishFail: RemoteException (FYI): " + e);
        }
!!!37050679.java!!!	onPublishTerminated(in status : int) : void
        mPubSubIdValid = false;
        try {
            if (mListener != null
                    && (mEvents & WifiNanSessionListener.LISTEN_PUBLISH_TERMINATED) != 0) {
                mListener.onPublishTerminated(status);
            }
        } catch (RemoteException e) {
            Log.w(TAG, "onPublishTerminated: RemoteException (FYI): " + e);
        }
!!!37050807.java!!!	onSubscribeSuccess(in subscribeId : int) : void
        mPubSubId = subscribeId;
        mPubSubIdValid = true;
!!!37050935.java!!!	onSubscribeFail(in status : int) : void
        mPubSubIdValid = false;
        try {
            if (mListener != null
                    && (mEvents & WifiNanSessionListener.LISTEN_SUBSCRIBE_FAIL) != 0) {
                mListener.onSubscribeFail(status);
            }
        } catch (RemoteException e) {
            Log.w(TAG, "onSubscribeFail: RemoteException (FYI): " + e);
        }
!!!37051063.java!!!	onSubscribeTerminated(in status : int) : void
        mPubSubIdValid = false;
        try {
            if (mListener != null
                    && (mEvents & WifiNanSessionListener.LISTEN_SUBSCRIBE_TERMINATED) != 0) {
                mListener.onSubscribeTerminated(status);
            }
        } catch (RemoteException e) {
            Log.w(TAG, "onSubscribeTerminated: RemoteException (FYI): " + e);
        }
!!!37051191.java!!!	onMessageSendSuccess(in messageId : int) : void
        try {
            if (mListener != null
                    && (mEvents & WifiNanSessionListener.LISTEN_MESSAGE_SEND_SUCCESS) != 0) {
                mListener.onMessageSendSuccess(messageId);
            }
        } catch (RemoteException e) {
            Log.w(TAG, "onMessageSendSuccess: RemoteException (FYI): " + e);
        }
!!!37051319.java!!!	onMessageSendFail(in messageId : int, in status : int) : void
        try {
            if (mListener != null
                    && (mEvents & WifiNanSessionListener.LISTEN_MESSAGE_SEND_FAIL) != 0) {
                mListener.onMessageSendFail(messageId, status);
            }
        } catch (RemoteException e) {
            Log.w(TAG, "onMessageSendFail: RemoteException (FYI): " + e);
        }
!!!37051447.java!!!	onMatch(in requestorInstanceId : int, inout peerMac : byte, inout serviceSpecificInfo : byte, in serviceSpecificInfoLength : int, inout matchFilter : byte, in matchFilterLength : int) : void
        String prevMac = mMacByRequestorInstanceId.get(requestorInstanceId);
        mMacByRequestorInstanceId.put(requestorInstanceId, new String(HexEncoding.encode(peerMac)));

        if (DBG) Log.d(TAG, "onMatch: previous peer MAC replaced - " + prevMac);

        try {
            if (mListener != null && (mEvents & WifiNanSessionListener.LISTEN_MATCH) != 0) {
                mListener.onMatch(requestorInstanceId, serviceSpecificInfo,
                        serviceSpecificInfoLength, matchFilter, matchFilterLength);
            }
        } catch (RemoteException e) {
            Log.w(TAG, "onMatch: RemoteException (FYI): " + e);
        }
!!!37051575.java!!!	onMessageReceived(in requestorInstanceId : int, inout peerMac : byte, inout message : byte, in messageLength : int) : void
        String prevMac = mMacByRequestorInstanceId.get(requestorInstanceId);
        mMacByRequestorInstanceId.put(requestorInstanceId, new String(HexEncoding.encode(peerMac)));

        if (DBG) {
            Log.d(TAG, "onMessageReceived: previous peer MAC replaced - " + prevMac);
        }

        try {
            if (mListener != null
                    && (mEvents & WifiNanSessionListener.LISTEN_MESSAGE_RECEIVED) != 0) {
                mListener.onMessageReceived(requestorInstanceId, message, messageLength);
            }
        } catch (RemoteException e) {
            Log.w(TAG, "onMessageReceived: RemoteException (FYI): " + e);
        }
!!!37051703.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        pw.println("NanSessionState:");
        pw.println("  mSessionId: " + mSessionId);
        pw.println("  mSessionType: " + mSessionType);
        pw.println("  mEvents: " + mEvents);
        pw.println("  mPubSubId: " + (mPubSubIdValid ? Integer.toString(mPubSubId) : "not valid"));
        pw.println("  mMacByRequestorInstanceId: [" + mMacByRequestorInstanceId + "]");
