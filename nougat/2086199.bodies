class WifiNanNative
!!!37043383.java!!!	getInstance() : WifiNanNative
        // dummy reference - used to make sure that WifiNative is loaded before
        // us since it is the one to load the shared library and starts its
        // initialization.
        WifiNative dummy = WifiNative.getWlanNativeInterface();
        if (dummy == null) {
            Log.w(TAG, "can't get access to WifiNative");
            return null;
        }

        if (sWifiNanNativeSingleton == null) {
            sWifiNanNativeSingleton = new WifiNanNative();
            registerNanNatives();
        }

        return sWifiNanNativeSingleton;
!!!37043895.java!!!	isNanInit(inout tryToInit : boolean) : boolean
        if (!tryToInit || sNanNativeInit) {
            return sNanNativeInit;
        }

        if (DBG) Log.d(TAG, "isNanInit: trying to init");
        synchronized (WifiNative.sLock) {
            boolean halStarted = WifiNative.getWlanNativeInterface().isHalStarted();
            if (!halStarted) {
                halStarted = WifiNative.getWlanNativeInterface().startHal();
            }
            if (halStarted) {
                int ret = initNanHandlersNative(WifiNative.class, WifiNative.sWlan0Index);
                if (DBG) Log.d(TAG, "initNanHandlersNative: res=" + ret);
                sNanNativeInit = ret == WIFI_SUCCESS;

                if (sNanNativeInit) {
                    ret = getCapabilitiesNative(
                            WifiNanStateManager.getInstance().createNextTransactionId(),
                            WifiNative.class,
                            WifiNative.sWlan0Index);
                    if (DBG) Log.d(TAG, "getCapabilitiesNative: res=" + ret);
                }

                return sNanNativeInit;
            } else {
                Log.w(TAG, "isNanInit: HAL not initialized");
                return false;
            }
        }
!!!37044023.java!!!	WifiNanNative()
        // do nothing
!!!37044279.java!!!	enableAndConfigure(in transactionId : short, inout configRequest : ConfigRequest) : void
        boolean success;

        if (VDBG) Log.d(TAG, "enableAndConfigure: configRequest=" + configRequest);
        if (isNanInit(true)) {
            int ret;
            synchronized (WifiNative.sLock) {
                ret = enableAndConfigureNative(transactionId, WifiNative.class,
                        WifiNative.sWlan0Index, configRequest);
            }
            if (DBG) Log.d(TAG, "enableAndConfigureNative: ret=" + ret);
            success = ret == WIFI_SUCCESS;
        } else {
            Log.w(TAG, "enableAndConfigure: NanInit fails");
            success = false;
        }


        // TODO: do something on !success - send failure message back
!!!37044535.java!!!	disable(in transactionId : short) : void
        boolean success;

        if (VDBG) Log.d(TAG, "disableNan");
        if (isNanInit(true)) {
            int ret;
            synchronized (WifiNative.sLock) {
                ret = disableNative(transactionId, WifiNative.class, WifiNative.sWlan0Index);
            }
            if (DBG) Log.d(TAG, "disableNative: ret=" + ret);
            success = ret == WIFI_SUCCESS;
        } else {
            Log.w(TAG, "disable: cannot initialize NAN");
            success = false;
        }

        // TODO: do something on !success - send failure message back
!!!37044791.java!!!	publish(in transactionId : short, in publishId : int, inout publishData : PublishData, inout publishSettings : PublishSettings) : void
        boolean success;

        if (VDBG) {
            Log.d(TAG, "publish: transactionId=" + transactionId + ",data='" + publishData
                    + "', settings=" + publishSettings);
        }

        if (isNanInit(true)) {
            int ret;
            synchronized (WifiNative.sLock) {
                ret = publishNative(transactionId, publishId, WifiNative.class,
                        WifiNative.sWlan0Index, publishData, publishSettings);
            }
            if (DBG) Log.d(TAG, "publishNative: ret=" + ret);
            success = ret == WIFI_SUCCESS;
        } else {
            Log.w(TAG, "publish: cannot initialize NAN");
            success = false;
        }

        // TODO: do something on !success - send failure message back
!!!37045047.java!!!	subscribe(in transactionId : short, in subscribeId : int, inout subscribeData : SubscribeData, inout subscribeSettings : SubscribeSettings) : void
        boolean success;

        if (VDBG) {
            Log.d(TAG, "subscribe: transactionId=" + transactionId + ", data='" + subscribeData
                    + "', settings=" + subscribeSettings);
        }

        if (isNanInit(true)) {
            int ret;
            synchronized (WifiNative.sLock) {
                ret = subscribeNative(transactionId, subscribeId, WifiNative.class,
                        WifiNative.sWlan0Index, subscribeData, subscribeSettings);
            }
            if (DBG) Log.d(TAG, "subscribeNative: ret=" + ret);
            success = ret == WIFI_SUCCESS;
        } else {
            Log.w(TAG, "subscribe: cannot initialize NAN");
            success = false;
        }

        // TODO: do something on !success - send failure message back
!!!37045303.java!!!	sendMessage(in transactionId : short, in pubSubId : int, in requestorInstanceId : int, inout dest : byte, inout message : byte, in messageLength : int) : void
        boolean success;

        if (VDBG) {
            Log.d(TAG,
                    "sendMessage: transactionId=" + transactionId + ", pubSubId=" + pubSubId
                            + ", requestorInstanceId=" + requestorInstanceId + ", dest="
                            + String.valueOf(HexEncoding.encode(dest)) + ", messageLength="
                            + messageLength);
        }

        if (isNanInit(true)) {
            int ret;
            synchronized (WifiNative.sLock) {
                ret = sendMessageNative(transactionId, WifiNative.class, WifiNative.sWlan0Index,
                        pubSubId, requestorInstanceId, dest, message, messageLength);
            }
            if (DBG) Log.d(TAG, "sendMessageNative: ret=" + ret);
            success = ret == WIFI_SUCCESS;
        } else {
            Log.w(TAG, "sendMessage: cannot initialize NAN");
            success = false;
        }

        // TODO: do something on !success - send failure message back
!!!37045559.java!!!	stopPublish(in transactionId : short, in pubSubId : int) : void
        boolean success;

        if (VDBG) {
            Log.d(TAG, "stopPublish: transactionId=" + transactionId + ", pubSubId=" + pubSubId);
        }

        if (isNanInit(true)) {
            int ret;
            synchronized (WifiNative.sLock) {
                ret = stopPublishNative(transactionId, WifiNative.class, WifiNative.sWlan0Index,
                        pubSubId);
            }
            if (DBG) Log.d(TAG, "stopPublishNative: ret=" + ret);
            success = ret == WIFI_SUCCESS;
        } else {
            Log.w(TAG, "stopPublish: cannot initialize NAN");
            success = false;
        }

        // TODO: do something on !success - send failure message back
!!!37045815.java!!!	stopSubscribe(in transactionId : short, in pubSubId : int) : void
        boolean success;

        if (VDBG) {
            Log.d(TAG, "stopSubscribe: transactionId=" + transactionId + ", pubSubId=" + pubSubId);
        }

        if (isNanInit(true)) {
            int ret;
            synchronized (WifiNative.sLock) {
                ret = stopSubscribeNative(transactionId, WifiNative.class, WifiNative.sWlan0Index,
                        pubSubId);
            }
            if (DBG) Log.d(TAG, "stopSubscribeNative: ret=" + ret);
            success = ret == WIFI_SUCCESS;
        } else {
            Log.w(TAG, "stopSubscribe: cannot initialize NAN");
            success = false;
        }

        // TODO: do something on !success - send failure message back
!!!37045943.java!!!	translateHalStatusToPublicStatus(in halStatus : int) : int
        switch (halStatus) {
            case NAN_STATUS_NO_SPACE_AVAILABLE:
                return WifiNanSessionListener.FAIL_REASON_NO_RESOURCES;

            case NAN_STATUS_TIMEOUT:
            case NAN_STATUS_DE_FAILURE:
            case NAN_STATUS_DISABLE_IN_PROGRESS:
                return WifiNanSessionListener.FAIL_REASON_OTHER;

            case NAN_STATUS_INVALID_MSG_VERSION:
            case NAN_STATUS_INVALID_MSG_LEN:
            case NAN_STATUS_INVALID_MSG_ID:
            case NAN_STATUS_INVALID_HANDLE:
            case NAN_STATUS_INVALID_PUBLISH_TYPE:
            case NAN_STATUS_INVALID_TX_TYPE:
            case NAN_STATUS_INVALID_MATCH_ALGORITHM:
            case NAN_STATUS_INVALID_TLV_LEN:
            case NAN_STATUS_INVALID_TLV_TYPE:
            case NAN_STATUS_MISSING_TLV_TYPE:
            case NAN_STATUS_INVALID_TOTAL_TLVS_LEN:
            case NAN_STATUS_INVALID_MATCH_HANDLE:
            case NAN_STATUS_INVALID_TLV_VALUE:
            case NAN_STATUS_INVALID_TX_PRIORITY:
            case NAN_STATUS_INVALID_CONNECTION_MAP:
            case NAN_STATUS_INVALID_RSSI_CLOSE_VALUE:
            case NAN_STATUS_INVALID_RSSI_MIDDLE_VALUE:
            case NAN_STATUS_INVALID_HOP_COUNT_LIMIT:
            case NAN_STATUS_INVALID_MASTER_PREFERENCE_VALUE:
            case NAN_STATUS_INVALID_LOW_CLUSTER_ID_VALUE:
            case NAN_STATUS_INVALID_HIGH_CLUSTER_ID_VALUE:
            case NAN_STATUS_INVALID_BACKGROUND_SCAN_PERIOD:
            case NAN_STATUS_INVALID_RSSI_PROXIMITY_VALUE:
            case NAN_STATUS_INVALID_SCAN_CHANNEL:
            case NAN_STATUS_INVALID_POST_NAN_CONNECTIVITY_CAPABILITIES_BITMAP:
            case NAN_STATUS_INVALID_FA_MAP_NUMCHAN_VALUE:
            case NAN_STATUS_INVALID_FA_MAP_DURATION_VALUE:
            case NAN_STATUS_INVALID_FA_MAP_CLASS_VALUE:
            case NAN_STATUS_INVALID_FA_MAP_CHANNEL_VALUE:
            case NAN_STATUS_INVALID_FA_MAP_AVAILABILITY_INTERVAL_BITMAP_VALUE:
            case NAN_STATUS_INVALID_FA_MAP_MAP_ID:
            case NAN_STATUS_INVALID_POST_NAN_DISCOVERY_CONN_TYPE_VALUE:
            case NAN_STATUS_INVALID_POST_NAN_DISCOVERY_DEVICE_ROLE_VALUE:
            case NAN_STATUS_INVALID_POST_NAN_DISCOVERY_DURATION_VALUE:
            case NAN_STATUS_INVALID_POST_NAN_DISCOVERY_BITMAP_VALUE:
            case NAN_STATUS_MISSING_FUTHER_AVAILABILITY_MAP:
            case NAN_STATUS_INVALID_BAND_CONFIG_FLAGS:
                return WifiNanSessionListener.FAIL_REASON_INVALID_ARGS;

                // publish/subscribe termination reasons
            case NAN_TERMINATED_REASON_TIMEOUT:
            case NAN_TERMINATED_REASON_USER_REQUEST:
            case NAN_TERMINATED_REASON_COUNT_REACHED:
                return WifiNanSessionListener.TERMINATE_REASON_DONE;

            case NAN_TERMINATED_REASON_INVALID:
            case NAN_TERMINATED_REASON_FAILURE:
            case NAN_TERMINATED_REASON_DE_SHUTDOWN:
            case NAN_TERMINATED_REASON_DISABLE_IN_PROGRESS:
            case NAN_TERMINATED_REASON_POST_DISC_ATTR_EXPIRED:
            case NAN_TERMINATED_REASON_POST_DISC_LEN_EXCEEDED:
            case NAN_TERMINATED_REASON_FURTHER_AVAIL_MAP_EMPTY:
                return WifiNanSessionListener.TERMINATE_REASON_FAIL;
        }

        return WifiNanSessionListener.FAIL_REASON_OTHER;
!!!37046071.java!!!	onNanNotifyResponse(in transactionId : short, in responseType : int, in status : int, in value : int) : void
        if (VDBG) {
            Log.v(TAG,
                    "onNanNotifyResponse: transactionId=" + transactionId + ", responseType="
                    + responseType + ", status=" + status + ", value=" + value);
        }

        switch (responseType) {
            case NAN_RESPONSE_ENABLED:
                if (status == NAN_STATUS_SUCCESS) {
                    WifiNanStateManager.getInstance().onConfigCompleted(transactionId);
                } else {
                    WifiNanStateManager.getInstance().onConfigFailed(transactionId,
                            translateHalStatusToPublicStatus(status));
                }
                break;
            case NAN_RESPONSE_PUBLISH_CANCEL:
                if (status != NAN_STATUS_SUCCESS) {
                    Log.e(TAG, "onNanNotifyResponse: NAN_RESPONSE_PUBLISH_CANCEL error - status="
                            + status + ", value=" + value);
                }
                break;
            case NAN_RESPONSE_TRANSMIT_FOLLOWUP:
                if (status == NAN_STATUS_SUCCESS) {
                    WifiNanStateManager.getInstance().onMessageSendSuccess(transactionId);
                } else {
                    WifiNanStateManager.getInstance().onMessageSendFail(transactionId,
                            translateHalStatusToPublicStatus(status));
                }
                break;
            case NAN_RESPONSE_SUBSCRIBE_CANCEL:
                if (status != NAN_STATUS_SUCCESS) {
                    Log.e(TAG, "onNanNotifyResponse: NAN_RESPONSE_PUBLISH_CANCEL error - status="
                            + status + ", value=" + value);
                }
                break;
            default:
                WifiNanStateManager.getInstance().onUnknownTransaction(responseType, transactionId,
                        translateHalStatusToPublicStatus(status));
                break;
        }
!!!37046199.java!!!	onNanNotifyResponsePublishSubscribe(in transactionId : short, in responseType : int, in status : int, in value : int, in pubSubId : int) : void
        if (VDBG) {
            Log.v(TAG,
                    "onNanNotifyResponsePublishSubscribe: transactionId=" + transactionId
                            + ", responseType=" + responseType + ", status=" + status + ", value="
                            + value + ", pubSubId=" + pubSubId);
        }

        switch (responseType) {
            case NAN_RESPONSE_PUBLISH:
                if (status == NAN_STATUS_SUCCESS) {
                    WifiNanStateManager.getInstance().onPublishSuccess(transactionId, pubSubId);
                } else {
                    WifiNanStateManager.getInstance().onPublishFail(transactionId,
                            translateHalStatusToPublicStatus(status));
                }
                break;
            case NAN_RESPONSE_SUBSCRIBE:
                if (status == NAN_STATUS_SUCCESS) {
                    WifiNanStateManager.getInstance().onSubscribeSuccess(transactionId, pubSubId);
                } else {
                    WifiNanStateManager.getInstance().onSubscribeFail(transactionId,
                            translateHalStatusToPublicStatus(status));
                }
                break;
            default:
                WifiNanStateManager.getInstance().onUnknownTransaction(responseType, transactionId,
                        translateHalStatusToPublicStatus(status));
                break;
        }
!!!37046327.java!!!	onNanNotifyResponseCapabilities(in transactionId : short, in status : int, in value : int, inout capabilities : WifiNanNative::Capabilities) : void
        if (VDBG) {
            Log.v(TAG, "onNanNotifyResponsePublishSubscribe: transactionId=" + transactionId
                    + ", status=" + status + ", value=" + value + ", capabilities=" + capabilities);
        }

        if (status == NAN_STATUS_SUCCESS) {
            WifiNanStateManager.getInstance().onCapabilitiesUpdate(transactionId, capabilities);
        } else {
            Log.e(TAG,
                    "onNanNotifyResponseCapabilities: error status=" + status + ", value=" + value);
        }
!!!37046455.java!!!	onDiscoveryEngineEvent(in eventType : int, inout mac : byte) : void
        if (VDBG) {
            Log.v(TAG, "onDiscoveryEngineEvent: eventType=" + eventType + ", mac="
                    + String.valueOf(HexEncoding.encode(mac)));
        }

        if (eventType == NAN_EVENT_ID_DISC_MAC_ADDR) {
            WifiNanStateManager.getInstance().onInterfaceAddressChange(mac);
        } else if (eventType == NAN_EVENT_ID_STARTED_CLUSTER) {
            WifiNanStateManager.getInstance()
                    .onClusterChange(WifiNanClientState.CLUSTER_CHANGE_EVENT_STARTED, mac);
        } else if (eventType == NAN_EVENT_ID_JOINED_CLUSTER) {
            WifiNanStateManager.getInstance()
                    .onClusterChange(WifiNanClientState.CLUSTER_CHANGE_EVENT_JOINED, mac);
        } else {
            Log.w(TAG, "onDiscoveryEngineEvent: invalid eventType=" + eventType);
        }
!!!37046583.java!!!	onMatchEvent(in pubSubId : int, in requestorInstanceId : int, inout mac : byte, inout serviceSpecificInfo : byte, in serviceSpecificInfoLength : int, inout matchFilter : byte, in matchFilterLength : int) : void
        if (VDBG) {
            Log.v(TAG, "onMatchEvent: pubSubId=" + pubSubId + ", requestorInstanceId="
                    + requestorInstanceId + ", mac=" + String.valueOf(HexEncoding.encode(mac))
                    + ", serviceSpecificInfo=" + serviceSpecificInfo + ", matchFilterLength="
                    + matchFilterLength + ", matchFilter=" + matchFilter);
        }

        WifiNanStateManager.getInstance().onMatch(pubSubId, requestorInstanceId, mac,
                serviceSpecificInfo, serviceSpecificInfoLength, matchFilter, matchFilterLength);
!!!37046711.java!!!	onPublishTerminated(in publishId : int, in status : int) : void
        if (VDBG) Log.v(TAG, "onPublishTerminated: publishId=" + publishId + ", status=" + status);

        WifiNanStateManager.getInstance().onPublishTerminated(publishId,
                translateHalStatusToPublicStatus(status));
!!!37046839.java!!!	onSubscribeTerminated(in subscribeId : int, in status : int) : void
        if (VDBG) {
            Log.v(TAG, "onSubscribeTerminated: subscribeId=" + subscribeId + ", status=" + status);
        }

        WifiNanStateManager.getInstance().onSubscribeTerminated(subscribeId,
                translateHalStatusToPublicStatus(status));
!!!37046967.java!!!	onFollowupEvent(in pubSubId : int, in requestorInstanceId : int, inout mac : byte, inout message : byte, in messageLength : int) : void
        if (VDBG) {
            Log.v(TAG, "onFollowupEvent: pubSubId=" + pubSubId + ", requestorInstanceId="
                    + requestorInstanceId + ", mac=" + String.valueOf(HexEncoding.encode(mac))
                    + ", messageLength=" + messageLength);
        }

        WifiNanStateManager.getInstance().onMessageReceived(pubSubId, requestorInstanceId, mac,
                message, messageLength);
!!!37047095.java!!!	onDisabledEvent(in status : int) : void
        if (VDBG) Log.v(TAG, "onDisabledEvent: status=" + status);

        WifiNanStateManager.getInstance().onNanDown(translateHalStatusToPublicStatus(status));
