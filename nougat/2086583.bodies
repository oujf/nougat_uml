class WifiNanServiceImpl
!!!37047607.java!!!	WifiNanServiceImpl(inout context : Context)
        mContext = context.getApplicationContext();

        mNanSupported = mContext.getPackageManager()
                .hasSystemFeature(PackageManager.FEATURE_WIFI_NAN);
        if (DBG) Log.w(TAG, "WifiNanServiceImpl: mNanSupported=" + mNanSupported);

        mStateManager = WifiNanStateManager.getInstance();
!!!37047735.java!!!	start() : void
        Log.i(TAG, "Starting Wi-Fi NAN service");

        // TODO: share worker thread with other Wi-Fi handlers
        HandlerThread wifiNanThread = new HandlerThread("wifiNanService");
        wifiNanThread.start();

        mStateManager.start(wifiNanThread.getLooper());
!!!37047863.java!!!	connect(in binder : IBinder, inout listener : IWifiNanEventListener, in events : int) : void
        enforceAccessPermission();
        enforceChangePermission();

        final int uid = getCallingUid();

        if (VDBG) Log.v(TAG, "connect: uid=" + uid);


        IBinder.DeathRecipient dr = new IBinder.DeathRecipient() {
            @Override
            public void binderDied() {
                if (DBG) Log.d(TAG, "binderDied: uid=" + uid);
                binder.unlinkToDeath(this, 0);

                synchronized (mLock) {
                    mDeathRecipientsByUid.delete(uid);
                }

                mStateManager.disconnect(uid);
            }
        };
        synchronized (mLock) {
            mDeathRecipientsByUid.put(uid, dr);
        }
        try {
            binder.linkToDeath(dr, 0);
        } catch (RemoteException e) {
            Log.w(TAG, "Error on linkToDeath - " + e);
        }

        mStateManager.connect(uid, listener, events);
!!!37047991.java!!!	disconnect(inout binder : IBinder) : void
        enforceAccessPermission();
        enforceChangePermission();

        int uid = getCallingUid();

        if (VDBG) Log.v(TAG, "disconnect: uid=" + uid);

        synchronized (mLock) {
            IBinder.DeathRecipient dr = mDeathRecipientsByUid.get(uid);
            if (dr != null) {
                binder.unlinkToDeath(dr, 0);
                mDeathRecipientsByUid.delete(uid);
            }
        }

        mStateManager.disconnect(uid);
!!!37048119.java!!!	requestConfig(inout configRequest : ConfigRequest) : void
        enforceAccessPermission();
        enforceChangePermission();

        if (VDBG) {
            Log.v(TAG,
                    "requestConfig: uid=" + getCallingUid() + ", configRequest=" + configRequest);
        }

        mStateManager.requestConfig(getCallingUid(), configRequest);
!!!37048247.java!!!	stopSession(in sessionId : int) : void
        enforceAccessPermission();
        enforceChangePermission();

        if (VDBG) Log.v(TAG, "stopSession: sessionId=" + sessionId + ", uid=" + getCallingUid());

        mStateManager.stopSession(getCallingUid(), sessionId);
!!!37048375.java!!!	destroySession(in sessionId : int) : void
        enforceAccessPermission();
        enforceChangePermission();

        if (VDBG) Log.v(TAG, "destroySession: sessionId=" + sessionId + ", uid=" + getCallingUid());

        mStateManager.destroySession(getCallingUid(), sessionId);
!!!37048503.java!!!	createSession(inout listener : IWifiNanSessionListener, in events : int) : int
        enforceAccessPermission();
        enforceChangePermission();

        if (VDBG) Log.v(TAG, "createSession: uid=" + getCallingUid());

        int sessionId;
        synchronized (mLock) {
            sessionId = mNextSessionId++;
        }

        mStateManager.createSession(getCallingUid(), sessionId, listener, events);

        return sessionId;
!!!37048631.java!!!	publish(in sessionId : int, inout publishData : PublishData, inout publishSettings : PublishSettings) : void
        enforceAccessPermission();
        enforceChangePermission();

        if (VDBG) {
            Log.v(TAG, "publish: uid=" + getCallingUid() + ", sessionId=" + sessionId + ", data='"
                    + publishData + "', settings=" + publishSettings);
        }

        mStateManager.publish(getCallingUid(), sessionId, publishData, publishSettings);
!!!37048759.java!!!	subscribe(in sessionId : int, inout subscribeData : SubscribeData, inout subscribeSettings : SubscribeSettings) : void
        enforceAccessPermission();
        enforceChangePermission();

        if (VDBG) {
            Log.v(TAG, "subscribe: uid=" + getCallingUid() + ", sessionId=" + sessionId + ", data='"
                    + subscribeData + "', settings=" + subscribeSettings);
        }

        mStateManager.subscribe(getCallingUid(), sessionId, subscribeData, subscribeSettings);
!!!37048887.java!!!	sendMessage(in sessionId : int, in peerId : int, inout message : byte, in messageLength : int, in messageId : int) : void
        enforceAccessPermission();
        enforceChangePermission();

        if (VDBG) {
            Log.v(TAG,
                    "sendMessage: sessionId=" + sessionId + ", uid=" + getCallingUid() + ", peerId="
                            + peerId + ", messageLength=" + messageLength + ", messageId="
                            + messageId);
        }

        mStateManager.sendMessage(getCallingUid(), sessionId, peerId, message, messageLength,
                messageId);
!!!37049015.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        if (mContext.checkCallingOrSelfPermission(
                android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
            pw.println("Permission Denial: can't dump WifiNanService from pid="
                    + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid());
            return;
        }
        pw.println("Wi-Fi NAN Service");
        pw.println("  mNanSupported: " + mNanSupported);
        pw.println("  mNextNetworkRequestToken: " + mNextNetworkRequestToken);
        pw.println("  mNextSessionId: " + mNextSessionId);
        pw.println("  mDeathRecipientsByUid: " + mDeathRecipientsByUid);
        mStateManager.dump(fd, pw, args);
!!!37049143.java!!!	enforceAccessPermission() : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_WIFI_STATE, TAG);
!!!37049271.java!!!	enforceChangePermission() : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.CHANGE_WIFI_STATE, TAG);
