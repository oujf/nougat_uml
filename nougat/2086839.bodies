class WifiNanStateManager
!!!37051831.java!!!	WifiNanStateManager()
        // EMPTY: singleton pattern
!!!37051959.java!!!	getInstance() : WifiNanStateManager
        if (sNanStateManagerSingleton == null) {
            sNanStateManagerSingleton = new WifiNanStateManager();
        }

        return sNanStateManagerSingleton;
!!!37052087.java!!!	start(inout looper : Looper) : void
        Log.i(TAG, "start()");

        mHandler = new WifiNanStateHandler(looper);
!!!37052215.java!!!	connect(in uid : int, inout listener : IWifiNanEventListener, in events : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_CONNECT);
        msg.arg1 = uid;
        msg.arg2 = events;
        msg.obj = listener;
        mHandler.sendMessage(msg);
!!!37052343.java!!!	disconnect(in uid : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_DISCONNECT);
        msg.arg1 = uid;
        mHandler.sendMessage(msg);
!!!37052471.java!!!	requestConfig(in uid : int, inout configRequest : ConfigRequest) : void
        Message msg = mHandler.obtainMessage(MESSAGE_REQUEST_CONFIG);
        msg.arg1 = uid;
        msg.obj = configRequest;
        mHandler.sendMessage(msg);
!!!37052599.java!!!	stopSession(in uid : int, in sessionId : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_STOP_SESSION);
        msg.arg1 = uid;
        msg.arg2 = sessionId;
        mHandler.sendMessage(msg);
!!!37052727.java!!!	destroySession(in uid : int, in sessionId : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_DESTROY_SESSION);
        msg.arg1 = uid;
        msg.arg2 = sessionId;
        mHandler.sendMessage(msg);
!!!37052855.java!!!	createSession(in uid : int, in sessionId : int, inout listener : IWifiNanSessionListener, in events : int) : void
        Bundle data = new Bundle();
        data.putInt(MESSAGE_BUNDLE_KEY_EVENTS, events);

        Message msg = mHandler.obtainMessage(MESSAGE_CREATE_SESSION);
        msg.setData(data);
        msg.arg1 = uid;
        msg.arg2 = sessionId;
        msg.obj = listener;
        mHandler.sendMessage(msg);
!!!37052983.java!!!	publish(in uid : int, in sessionId : int, inout publishData : PublishData, inout publishSettings : PublishSettings) : void
        Bundle data = new Bundle();
        data.putParcelable(MESSAGE_BUNDLE_KEY_PUBLISH_DATA, publishData);
        data.putParcelable(MESSAGE_BUNDLE_KEY_PUBLISH_SETTINGS, publishSettings);

        Message msg = mHandler.obtainMessage(MESSAGE_PUBLISH);
        msg.setData(data);
        msg.arg1 = uid;
        msg.arg2 = sessionId;
        mHandler.sendMessage(msg);
!!!37053111.java!!!	subscribe(in uid : int, in sessionId : int, inout subscribeData : SubscribeData, inout subscribeSettings : SubscribeSettings) : void
        Bundle data = new Bundle();
        data.putParcelable(MESSAGE_BUNDLE_KEY_SUBSCRIBE_DATA, subscribeData);
        data.putParcelable(MESSAGE_BUNDLE_KEY_SUBSCRIBE_SETTINGS, subscribeSettings);

        Message msg = mHandler.obtainMessage(MESSAGE_SUBSCRIBE);
        msg.setData(data);
        msg.arg1 = uid;
        msg.arg2 = sessionId;
        mHandler.sendMessage(msg);
!!!37053239.java!!!	sendMessage(in uid : int, in sessionId : int, in peerId : int, inout message : byte, in messageLength : int, in messageId : int) : void
        Bundle data = new Bundle();
        data.putInt(MESSAGE_BUNDLE_KEY_SESSION_ID, sessionId);
        data.putInt(MESSAGE_BUNDLE_KEY_MESSAGE_PEER_ID, peerId);
        data.putByteArray(MESSAGE_BUNDLE_KEY_MESSAGE, message);
        data.putInt(MESSAGE_BUNDLE_KEY_MESSAGE_ID, messageId);

        Message msg = mHandler.obtainMessage(MESSAGE_SEND_MESSAGE);
        msg.arg1 = uid;
        msg.arg2 = messageLength;
        msg.setData(data);
        mHandler.sendMessage(msg);
!!!37053367.java!!!	onCapabilitiesUpdate(in transactionId : short, inout capabilities : WifiNanNative::Capabilities) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_CAPABILITIES_UPDATED);
        msg.arg1 = transactionId;
        msg.obj = capabilities;
        mHandler.sendMessage(msg);
!!!37053495.java!!!	onConfigCompleted(in transactionId : short) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_CONFIG_COMPLETED);
        msg.arg1 = transactionId;
        mHandler.sendMessage(msg);
!!!37053623.java!!!	onConfigFailed(in transactionId : short, in reason : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_CONFIG_FAILED);
        msg.arg1 = transactionId;
        msg.arg2 = reason;
        mHandler.sendMessage(msg);
!!!37053751.java!!!	onPublishSuccess(in transactionId : short, in publishId : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_PUBLISH_SUCCESS);
        msg.arg1 = transactionId;
        msg.arg2 = publishId;
        mHandler.sendMessage(msg);
!!!37053879.java!!!	onPublishFail(in transactionId : short, in status : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_PUBLISH_FAIL);
        msg.arg1 = transactionId;
        msg.arg2 = status;
        mHandler.sendMessage(msg);
!!!37054007.java!!!	onMessageSendSuccess(in transactionId : short) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_MESSAGE_SEND_SUCCESS);
        msg.arg1 = transactionId;
        mHandler.sendMessage(msg);
!!!37054135.java!!!	onMessageSendFail(in transactionId : short, in status : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_MESSAGE_SEND_FAIL);
        msg.arg1 = transactionId;
        msg.arg2 = status;
        mHandler.sendMessage(msg);
!!!37054263.java!!!	onSubscribeSuccess(in transactionId : short, in subscribeId : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_SUBSCRIBE_SUCCESS);
        msg.arg1 = transactionId;
        msg.arg2 = subscribeId;
        mHandler.sendMessage(msg);
!!!37054391.java!!!	onSubscribeFail(in transactionId : short, in status : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_SUBSCRIBE_FAIL);
        msg.arg1 = transactionId;
        msg.arg2 = status;
        mHandler.sendMessage(msg);
!!!37054519.java!!!	onUnknownTransaction(in responseType : int, in transactionId : short, in status : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_UNKNOWN_TRANSACTION);
        Bundle data = new Bundle();
        data.putInt(MESSAGE_BUNDLE_KEY_RESPONSE_TYPE, responseType);
        msg.setData(data);
        msg.arg1 = transactionId;
        msg.arg2 = status;
        mHandler.sendMessage(msg);
!!!37054647.java!!!	onInterfaceAddressChange(inout mac : byte) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_INTERFACE_CHANGE);
        msg.obj = mac;
        mHandler.sendMessage(msg);
!!!37054775.java!!!	onClusterChange(in flag : int, inout clusterId : byte) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_CLUSTER_CHANGE);
        msg.arg1 = flag;
        msg.obj = clusterId;
        mHandler.sendMessage(msg);
!!!37054903.java!!!	onMatch(in pubSubId : int, in requestorInstanceId : int, inout peerMac : byte, inout serviceSpecificInfo : byte, in serviceSpecificInfoLength : int, inout matchFilter : byte, in matchFilterLength : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_MATCH);
        msg.arg1 = pubSubId;
        msg.arg2 = requestorInstanceId;
        Bundle data = new Bundle();
        data.putByteArray(MESSAGE_BUNDLE_KEY_MAC_ADDRESS, peerMac);
        data.putByteArray(MESSAGE_BUNDLE_KEY_SSI_DATA, serviceSpecificInfo);
        data.putInt(MESSAGE_BUNDLE_KEY_SSI_LENGTH, serviceSpecificInfoLength);
        data.putByteArray(MESSAGE_BUNDLE_KEY_FILTER_DATA, matchFilter);
        data.putInt(MESSAGE_BUNDLE_KEY_FILTER_LENGTH, matchFilterLength);
        msg.setData(data);
        mHandler.sendMessage(msg);
!!!37055031.java!!!	onPublishTerminated(in publishId : int, in status : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_PUBLISH_TERMINATED);
        msg.arg1 = publishId;
        msg.arg2 = status;
        mHandler.sendMessage(msg);
!!!37055159.java!!!	onSubscribeTerminated(in subscribeId : int, in status : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_SUBSCRIBE_TERMINATED);
        msg.arg1 = subscribeId;
        msg.arg2 = status;
        mHandler.sendMessage(msg);
!!!37055287.java!!!	onMessageReceived(in pubSubId : int, in requestorInstanceId : int, inout peerMac : byte, inout message : byte, in messageLength : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_MESSAGE_RECEIVED);
        msg.arg1 = pubSubId;
        msg.arg2 = requestorInstanceId;
        Bundle data = new Bundle();
        data.putByteArray(MESSAGE_BUNDLE_KEY_MAC_ADDRESS, peerMac);
        data.putByteArray(MESSAGE_BUNDLE_KEY_MESSAGE_DATA, message);
        data.putInt(MESSAGE_BUNDLE_KEY_MESSAGE_LENGTH, messageLength);
        msg.setData(data);
        mHandler.sendMessage(msg);
!!!37055415.java!!!	onNanDown(in reason : int) : void
        Message msg = mHandler.obtainMessage(MESSAGE_ON_NAN_DOWN);
        msg.arg1 = reason;
        mHandler.sendMessage(msg);
!!!37055799.java!!!	createNextTransactionId() : short
        return mNextTransactionId++;
!!!37055927.java!!!	allocateAndRegisterTransactionId(inout info : WifiNanStateManager::TransactionInfoBase) : void
        info.mTransactionId = createNextTransactionId();

        mPendingResponses.put(info.mTransactionId, info);
!!!37056055.java!!!	fillInTransactionInfoSession(inout info : WifiNanStateManager::TransactionInfoSession, in uid : int, in sessionId : int) : void
        WifiNanClientState client = mClients.get(uid);
        if (client == null) {
            throw new IllegalStateException(
                    "getAndRegisterTransactionId: no client exists for uid=" + uid);
        }
        info.mClient = client;

        WifiNanSessionState session = info.mClient.getSession(sessionId);
        if (session == null) {
            throw new IllegalStateException(
                    "getAndRegisterSessionTransactionId: no session exists for uid=" + uid
                            + ", sessionId=" + sessionId);
        }
        info.mSession = session;
!!!37056183.java!!!	createTransactionInfo() : WifiNanStateManager::TransactionInfoBase
        TransactionInfoBase info = new TransactionInfoBase();
        allocateAndRegisterTransactionId(info);
        return info;
!!!37056311.java!!!	createTransactionInfoSession(in uid : int, in sessionId : int) : WifiNanStateManager::TransactionInfoSession
        TransactionInfoSession info = new TransactionInfoSession();
        fillInTransactionInfoSession(info, uid, sessionId);
        allocateAndRegisterTransactionId(info);
        return info;
!!!37056439.java!!!	createTransactionInfoMessage(in uid : int, in sessionId : int, in messageId : int) : WifiNanStateManager::TransactionInfoMessage
        TransactionInfoMessage info = new TransactionInfoMessage();
        fillInTransactionInfoSession(info, uid, sessionId);
        info.mMessageId = messageId;
        allocateAndRegisterTransactionId(info);
        return info;
!!!37056567.java!!!	createTransactionInfoConfig(inout configRequest : ConfigRequest) : WifiNanStateManager::TransactionInfoConfig
        TransactionInfoConfig info = new TransactionInfoConfig();
        info.mConfig = configRequest;
        allocateAndRegisterTransactionId(info);
        return info;
!!!37056695.java!!!	getAndRemovePendingResponseTransactionInfo(in transactionId : short) : WifiNanStateManager::TransactionInfoBase
        TransactionInfoBase transInfo = mPendingResponses.get(transactionId);
        if (transInfo != null) {
            mPendingResponses.remove(transactionId);
        }

        return transInfo;
!!!37056823.java!!!	getNanSessionStateForPubSubId(in pubSubId : int) : WifiNanSessionState
        for (int i = 0; i < mClients.size(); ++i) {
            WifiNanSessionState session = mClients.valueAt(i)
                    .getNanSessionStateForPubSubId(pubSubId);
            if (session != null) {
                return session;
            }
        }

        return null;
!!!37056951.java!!!	connectLocal(in uid : int, inout listener : IWifiNanEventListener, in events : int) : void
        if (VDBG) {
            Log.v(TAG, "connect(): uid=" + uid + ", listener=" + listener + ", events=" + events);
        }

        if (mClients.get(uid) != null) {
            Log.e(TAG, "connect: entry already exists for uid=" + uid);
            return;
        }

        WifiNanClientState client = new WifiNanClientState(uid, listener, events);
        mClients.put(uid, client);
!!!37057079.java!!!	disconnectLocal(in uid : int) : void
        if (VDBG) {
            Log.v(TAG, "disconnect(): uid=" + uid);
        }

        WifiNanClientState client = mClients.get(uid);
        mClients.delete(uid);

        if (client == null) {
            Log.e(TAG, "disconnect: no entry for uid=" + uid);
            return;
        }

        List<Integer> toRemove = new ArrayList<>();
        for (int i = 0; i < mPendingResponses.size(); ++i) {
            TransactionInfoBase info = mPendingResponses.valueAt(i);
            if (!(info instanceof TransactionInfoSession)) {
                continue;
            }
            if (((TransactionInfoSession) info).mClient.getUid() == uid) {
                toRemove.add(i);
            }
        }
        for (Integer id : toRemove) {
            mPendingResponses.removeAt(id);
        }

        client.destroy();

        if (mClients.size() == 0) {
            WifiNanNative.getInstance().disable(createTransactionInfo().mTransactionId);
            return;
        }

        ConfigRequest merged = mergeConfigRequests();

        WifiNanNative.getInstance()
                .enableAndConfigure(createTransactionInfoConfig(merged).mTransactionId, merged);
!!!37057207.java!!!	requestConfigLocal(in uid : int, inout configRequest : ConfigRequest) : void
        if (VDBG) {
            Log.v(TAG, "requestConfig(): uid=" + uid + ", configRequest=" + configRequest);
        }

        WifiNanClientState client = mClients.get(uid);
        if (client == null) {
            Log.e(TAG, "requestConfig: no client exists for uid=" + uid);
            return;
        }

        client.setConfigRequest(configRequest);

        ConfigRequest merged = mergeConfigRequests();

        WifiNanNative.getInstance()
                .enableAndConfigure(createTransactionInfoConfig(merged).mTransactionId, merged);
!!!37057335.java!!!	createSessionLocal(in uid : int, in sessionId : int, inout listener : IWifiNanSessionListener, in events : int) : void
        if (VDBG) {
            Log.v(TAG, "createSession(): uid=" + uid + ", sessionId=" + sessionId + ", listener="
                    + listener + ", events=" + events);
        }

        WifiNanClientState client = mClients.get(uid);
        if (client == null) {
            Log.e(TAG, "createSession: no client exists for uid=" + uid);
            return;
        }

        client.createSession(sessionId, listener, events);
!!!37057463.java!!!	destroySessionLocal(in uid : int, in sessionId : int) : void
        if (VDBG) {
            Log.v(TAG, "destroySession(): uid=" + uid + ", sessionId=" + sessionId);
        }

        WifiNanClientState client = mClients.get(uid);
        if (client == null) {
            Log.e(TAG, "destroySession: no client exists for uid=" + uid);
            return;
        }

        List<Integer> toRemove = new ArrayList<>();
        for (int i = 0; i < mPendingResponses.size(); ++i) {
            TransactionInfoBase info = mPendingResponses.valueAt(i);
            if (!(info instanceof TransactionInfoSession)) {
                continue;
            }
            TransactionInfoSession infoSession = (TransactionInfoSession) info;
            if (infoSession.mClient.getUid() == uid
                    && infoSession.mSession.getSessionId() == sessionId) {
                toRemove.add(i);
            }
        }
        for (Integer id : toRemove) {
            mPendingResponses.removeAt(id);
        }

        client.destroySession(sessionId);
!!!37057591.java!!!	publishLocal(in uid : int, in sessionId : int, inout publishData : PublishData, inout publishSettings : PublishSettings) : void
        if (VDBG) {
            Log.v(TAG, "publish(): uid=" + uid + ", sessionId=" + sessionId + ", data="
                    + publishData + ", settings=" + publishSettings);
        }

        TransactionInfoSession info = createTransactionInfoSession(uid, sessionId);

        info.mSession.publish(info.mTransactionId, publishData, publishSettings);
!!!37057719.java!!!	subscribeLocal(in uid : int, in sessionId : int, inout subscribeData : SubscribeData, inout subscribeSettings : SubscribeSettings) : void
        if (VDBG) {
            Log.v(TAG, "subscribe(): uid=" + uid + ", sessionId=" + sessionId + ", data="
                    + subscribeData + ", settings=" + subscribeSettings);
        }

        TransactionInfoSession info = createTransactionInfoSession(uid, sessionId);

        info.mSession.subscribe(info.mTransactionId, subscribeData, subscribeSettings);
!!!37057847.java!!!	sendFollowonMessageLocal(in uid : int, in sessionId : int, in peerId : int, inout message : byte, in messageLength : int, in messageId : int) : void
        if (VDBG) {
            Log.v(TAG, "sendMessage(): uid=" + uid + ", sessionId=" + sessionId + ", peerId="
                    + peerId + ", messageLength=" + messageLength + ", messageId=" + messageId);
        }

        TransactionInfoMessage info = createTransactionInfoMessage(uid, sessionId, messageId);

        info.mSession.sendMessage(info.mTransactionId, peerId, message, messageLength, messageId);
!!!37057975.java!!!	stopSessionLocal(in uid : int, in sessionId : int) : void
        if (VDBG) {
            Log.v(TAG, "stopSession(): uid=" + uid + ", sessionId=" + sessionId);
        }

        TransactionInfoSession info = createTransactionInfoSession(uid, sessionId);

        info.mSession.stop(info.mTransactionId);
!!!37058103.java!!!	onCapabilitiesUpdatedLocal(in transactionId : short, inout capabilities : WifiNanNative::Capabilities) : void
        if (VDBG) {
            Log.v(TAG, "onCapabilitiesUpdatedLocal: transactionId=" + transactionId
                    + ", capabilites=" + capabilities);
        }

        mCapabilities = capabilities;
!!!37058231.java!!!	onConfigCompletedLocal(in transactionId : short) : void
        if (VDBG) {
            Log.v(TAG, "onConfigCompleted: transactionId=" + transactionId);
        }

        TransactionInfoBase info = getAndRemovePendingResponseTransactionInfo(transactionId);
        if (info == null) {
            Log.e(TAG, "onConfigCompleted: no transaction info for transactionId=" + transactionId);
            return;
        }
        if (!(info instanceof TransactionInfoConfig)) {
            Log.e(TAG, "onConfigCompleted: invalid info structure stored for transactionId="
                    + transactionId);
            return;
        }
        TransactionInfoConfig infoConfig = (TransactionInfoConfig) info;

        if (DBG) {
            Log.d(TAG, "onConfigCompleted: request=" + infoConfig.mConfig);
        }

        for (int i = 0; i < mClients.size(); ++i) {
            WifiNanClientState client = mClients.valueAt(i);
            client.onConfigCompleted(infoConfig.mConfig);
        }
!!!37058359.java!!!	onConfigFailedLocal(in transactionId : short, in reason : int) : void
        if (VDBG) {
            Log.v(TAG, "onEnableFailed: transactionId=" + transactionId + ", reason=" + reason);
        }

        TransactionInfoBase info = getAndRemovePendingResponseTransactionInfo(transactionId);
        if (info == null) {
            Log.e(TAG, "onConfigFailed: no transaction info for transactionId=" + transactionId);
            return;
        }
        if (!(info instanceof TransactionInfoConfig)) {
            Log.e(TAG, "onConfigCompleted: invalid info structure stored for transactionId="
                    + transactionId);
            return;
        }
        TransactionInfoConfig infoConfig = (TransactionInfoConfig) info;

        if (DBG) {
            Log.d(TAG, "onConfigFailed: request=" + infoConfig.mConfig);
        }

        for (int i = 0; i < mClients.size(); ++i) {
            WifiNanClientState client = mClients.valueAt(i);
            client.onConfigFailed(infoConfig.mConfig, reason);
        }
!!!37058487.java!!!	onNanDownLocal(in reason : int) : void
        if (VDBG) {
            Log.v(TAG, "onNanDown: reason=" + reason);
        }

        int interested = 0;
        for (int i = 0; i < mClients.size(); ++i) {
            WifiNanClientState client = mClients.valueAt(i);
            interested += client.onNanDown(reason);
        }

        if (interested == 0) {
            Log.e(TAG, "onNanDown: event received but no listeners registered for this event "
                    + "- should be disabled from fw!");
        }
!!!37058615.java!!!	onInterfaceAddressChangeLocal(inout mac : byte) : void
        if (VDBG) {
            Log.v(TAG, "onInterfaceAddressChange: mac=" + String.valueOf(HexEncoding.encode(mac)));
        }

        int interested = 0;
        for (int i = 0; i < mClients.size(); ++i) {
            WifiNanClientState client = mClients.valueAt(i);
            interested += client.onInterfaceAddressChange(mac);
        }

        if (interested == 0) {
            Log.e(TAG, "onInterfaceAddressChange: event received but no listeners registered "
                    + "for this event - should be disabled from fw!");
        }
!!!37058743.java!!!	onClusterChangeLocal(in flag : int, inout clusterId : byte) : void
        if (VDBG) {
            Log.v(TAG, "onClusterChange: flag=" + flag + ", clusterId="
                    + String.valueOf(HexEncoding.encode(clusterId)));
        }

        int interested = 0;
        for (int i = 0; i < mClients.size(); ++i) {
            WifiNanClientState client = mClients.valueAt(i);
            interested += client.onClusterChange(flag, clusterId);
        }

        if (interested == 0) {
            Log.e(TAG, "onClusterChange: event received but no listeners registered for this "
                    + "event - should be disabled from fw!");
        }
!!!37058871.java!!!	onPublishSuccessLocal(in transactionId : short, in publishId : int) : void
        if (VDBG) {
            Log.v(TAG, "onPublishSuccess: transactionId=" + transactionId + ", publishId="
                    + publishId);
        }

        TransactionInfoBase info = getAndRemovePendingResponseTransactionInfo(transactionId);
        if (info == null) {
            Log.e(TAG, "onPublishSuccess(): no info registered for transactionId=" + transactionId);
            return;
        }
        if (!(info instanceof TransactionInfoSession)) {
            Log.e(TAG, "onPublishSuccess: invalid info structure stored for transactionId="
                    + transactionId);
            return;
        }
        TransactionInfoSession infoSession = (TransactionInfoSession) info;

        infoSession.mSession.onPublishSuccess(publishId);
!!!37058999.java!!!	onPublishFailLocal(in transactionId : short, in status : int) : void
        if (VDBG) {
            Log.v(TAG, "onPublishFail: transactionId=" + transactionId + ", status=" + status);
        }

        TransactionInfoBase info = getAndRemovePendingResponseTransactionInfo(transactionId);
        if (info == null) {
            Log.e(TAG, "onPublishFail(): no info registered for transactionId=" + transactionId);
            return;
        }
        if (!(info instanceof TransactionInfoSession)) {
            Log.e(TAG, "onPublishFail: invalid info structure stored for transactionId="
                    + transactionId);
            return;
        }
        TransactionInfoSession infoSession = (TransactionInfoSession) info;

        infoSession.mSession.onPublishFail(status);
!!!37059127.java!!!	onPublishTerminatedLocal(in publishId : int, in status : int) : void
        if (VDBG) {
            Log.v(TAG, "onPublishTerminated: publishId=" + publishId + ", status=" + status);
        }

        WifiNanSessionState session = getNanSessionStateForPubSubId(publishId);
        if (session == null) {
            Log.e(TAG, "onPublishTerminated: no session found for publishId=" + publishId);
            return;
        }

        session.onPublishTerminated(status);
!!!37059255.java!!!	onSubscribeSuccessLocal(in transactionId : short, in subscribeId : int) : void
        if (VDBG) {
            Log.v(TAG, "onSubscribeSuccess: transactionId=" + transactionId + ", subscribeId="
                    + subscribeId);
        }

        TransactionInfoBase info = getAndRemovePendingResponseTransactionInfo(transactionId);
        if (info == null) {
            Log.e(TAG,
                    "onSubscribeSuccess(): no info registered for transactionId=" + transactionId);
            return;
        }
        if (!(info instanceof TransactionInfoSession)) {
            Log.e(TAG, "onSubscribeSuccess: invalid info structure stored for transactionId="
                    + transactionId);
            return;
        }
        TransactionInfoSession infoSession = (TransactionInfoSession) info;

        infoSession.mSession.onSubscribeSuccess(subscribeId);
!!!37059383.java!!!	onSubscribeFailLocal(in transactionId : short, in status : int) : void
        if (VDBG) {
            Log.v(TAG, "onSubscribeFail: transactionId=" + transactionId + ", status=" + status);
        }

        TransactionInfoBase info = getAndRemovePendingResponseTransactionInfo(transactionId);
        if (info == null) {
            Log.e(TAG, "onSubscribeFail(): no info registered for transactionId=" + transactionId);
            return;
        }
        if (!(info instanceof TransactionInfoSession)) {
            Log.e(TAG, "onSubscribeFail: invalid info structure stored for transactionId="
                    + transactionId);
            return;
        }
        TransactionInfoSession infoSession = (TransactionInfoSession) info;

        infoSession.mSession.onSubscribeFail(status);
!!!37059511.java!!!	onSubscribeTerminatedLocal(in subscribeId : int, in status : int) : void
        if (VDBG) {
            Log.v(TAG, "onPublishTerminated: subscribeId=" + subscribeId + ", status=" + status);
        }

        WifiNanSessionState session = getNanSessionStateForPubSubId(subscribeId);
        if (session == null) {
            Log.e(TAG, "onSubscribeTerminated: no session found for subscribeId=" + subscribeId);
            return;
        }

        session.onSubscribeTerminated(status);
!!!37059639.java!!!	onMessageSendSuccessLocal(in transactionId : short) : void
        if (VDBG) {
            Log.v(TAG, "onMessageSendSuccess: transactionId=" + transactionId);
        }

        TransactionInfoBase info = getAndRemovePendingResponseTransactionInfo(transactionId);
        if (info == null) {
            Log.e(TAG, "onMessageSendSuccess(): no info registered for transactionId="
                    + transactionId);
            return;
        }
        if (!(info instanceof TransactionInfoMessage)) {
            Log.e(TAG, "onMessageSendSuccess: invalid info structure stored for transactionId="
                    + transactionId);
            return;
        }
        TransactionInfoMessage infoMessage = (TransactionInfoMessage) info;

        infoMessage.mSession.onMessageSendSuccess(infoMessage.mMessageId);
!!!37059767.java!!!	onMessageSendFailLocal(in transactionId : short, in status : int) : void
        if (VDBG) {
            Log.v(TAG, "onMessageSendFail: transactionId=" + transactionId + ", status=" + status);
        }

        TransactionInfoBase info = getAndRemovePendingResponseTransactionInfo(transactionId);
        if (info == null) {
            Log.e(TAG,
                    "onMessageSendFail(): no info registered for transactionId=" + transactionId);
            return;
        }
        if (!(info instanceof TransactionInfoMessage)) {
            Log.e(TAG, "onMessageSendFail: invalid info structure stored for transactionId="
                    + transactionId);
            return;
        }
        TransactionInfoMessage infoMessage = (TransactionInfoMessage) info;

        infoMessage.mSession.onMessageSendFail(infoMessage.mMessageId, status);
!!!37059895.java!!!	onUnknownTransactionLocal(in responseType : int, in transactionId : short, in status : int) : void
        Log.e(TAG, "onUnknownTransaction: responseType=" + responseType + ", transactionId="
                + transactionId + ", status=" + status);

        TransactionInfoBase info = getAndRemovePendingResponseTransactionInfo(transactionId);
        if (info == null) {
            Log.e(TAG, "onUnknownTransaction(): no info registered for transactionId="
                    + transactionId);
        }
!!!37060023.java!!!	onMatchLocal(in pubSubId : int, in requestorInstanceId : int, inout peerMac : byte, inout serviceSpecificInfo : byte, in serviceSpecificInfoLength : int, inout matchFilter : byte, in matchFilterLength : int) : void
        if (VDBG) {
            Log.v(TAG, "onMatch: pubSubId=" + pubSubId + ", requestorInstanceId="
                    + requestorInstanceId + ", peerMac="
                    + String.valueOf(HexEncoding.encode(peerMac)) + ", serviceSpecificInfoLength="
                    + serviceSpecificInfoLength + ", serviceSpecificInfo=" + serviceSpecificInfo
                    + ", matchFilterLength=" + matchFilterLength + ", matchFilter=" + matchFilter);
        }

        WifiNanSessionState session = getNanSessionStateForPubSubId(pubSubId);
        if (session == null) {
            Log.e(TAG, "onMatch: no session found for pubSubId=" + pubSubId);
            return;
        }

        session.onMatch(requestorInstanceId, peerMac, serviceSpecificInfo,
                serviceSpecificInfoLength, matchFilter, matchFilterLength);
!!!37060151.java!!!	onMessageReceivedLocal(in pubSubId : int, in requestorInstanceId : int, inout peerMac : byte, inout message : byte, in messageLength : int) : void
        if (VDBG) {
            Log.v(TAG,
                    "onMessageReceived: pubSubId=" + pubSubId + ", requestorInstanceId="
                            + requestorInstanceId + ", peerMac="
                            + String.valueOf(HexEncoding.encode(peerMac)) + ", messageLength="
                            + messageLength);
        }

        WifiNanSessionState session = getNanSessionStateForPubSubId(pubSubId);
        if (session == null) {
            Log.e(TAG, "onMessageReceived: no session found for pubSubId=" + pubSubId);
            return;
        }

        session.onMessageReceived(requestorInstanceId, peerMac, message, messageLength);
!!!37060279.java!!!	mergeConfigRequests() : ConfigRequest
        if (VDBG) {
            Log.v(TAG, "mergeConfigRequests(): mClients=[" + mClients + "]");
        }

        if (mClients.size() == 0) {
            Log.e(TAG, "mergeConfigRequests: invalid state - called with 0 clients registered!");
            return null;
        }

        if (mClients.size() == 1) {
            return mClients.valueAt(0).getConfigRequest();
        }

        // TODO: continue working on merge algorithm:
        // - if any request 5g: enable
        // - maximal master preference
        // - cluster range covering all requests: assume that [0,max] is a
        // non-request
        boolean support5gBand = false;
        int masterPreference = 0;
        boolean clusterIdValid = false;
        int clusterLow = 0;
        int clusterHigh = ConfigRequest.CLUSTER_ID_MAX;
        for (int i = 0; i < mClients.size(); ++i) {
            ConfigRequest cr = mClients.valueAt(i).getConfigRequest();

            if (cr.mSupport5gBand) {
                support5gBand = true;
            }

            masterPreference = Math.max(masterPreference, cr.mMasterPreference);

            if (cr.mClusterLow != 0 || cr.mClusterHigh != ConfigRequest.CLUSTER_ID_MAX) {
                if (!clusterIdValid) {
                    clusterLow = cr.mClusterLow;
                    clusterHigh = cr.mClusterHigh;
                } else {
                    clusterLow = Math.min(clusterLow, cr.mClusterLow);
                    clusterHigh = Math.max(clusterHigh, cr.mClusterHigh);
                }
                clusterIdValid = true;
            }
        }
        ConfigRequest.Builder builder = new ConfigRequest.Builder();
        builder.setSupport5gBand(support5gBand).setMasterPreference(masterPreference)
                .setClusterLow(clusterLow).setClusterHigh(clusterHigh);

        return builder.build();
!!!37060407.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        pw.println("NanStateManager:");
        pw.println("  mClients: [" + mClients + "]");
        pw.println("  mPendingResponses: [" + mPendingResponses + "]");
        pw.println("  mCapabilities: [" + mCapabilities + "]");
        pw.println("  mNextTransactionId: " + mNextTransactionId);
        for (int i = 0; i < mClients.size(); ++i) {
            mClients.valueAt(i).dump(fd, pw, args);
        }
