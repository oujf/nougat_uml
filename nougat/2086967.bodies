class WifiNanStateHandler
!!!37055543.java!!!	WifiNanStateHandler(inout looper : Looper)
            super(looper);
!!!37055671.java!!!	handleMessage(inout msg : Message) : void
            if (DBG) {
                Log.d(TAG, "Message: " + msg.what);
            }
            switch (msg.what) {
                case MESSAGE_CONNECT: {
                    if (VDBG) {
                        Log.d(TAG, "NAN connection request received");
                    }
                    connectLocal(msg.arg1, (IWifiNanEventListener) msg.obj, msg.arg2);
                    break;
                }
                case MESSAGE_DISCONNECT: {
                    if (VDBG) {
                        Log.d(TAG, "NAN disconnection request received");
                    }
                    disconnectLocal(msg.arg1);
                    break;
                }
                case MESSAGE_REQUEST_CONFIG: {
                    if (VDBG) {
                        Log.d(TAG, "NAN configuration request received");
                    }
                    requestConfigLocal(msg.arg1, (ConfigRequest) msg.obj);
                    break;
                }
                case MESSAGE_CREATE_SESSION: {
                    if (VDBG) {
                        Log.d(TAG, "Create session");
                    }
                    int events = msg.getData().getInt(MESSAGE_BUNDLE_KEY_EVENTS);
                    createSessionLocal(msg.arg1, msg.arg2, (IWifiNanSessionListener) msg.obj,
                            events);
                    break;
                }
                case MESSAGE_DESTROY_SESSION: {
                    if (VDBG) {
                        Log.d(TAG, "Destroy session");
                    }
                    destroySessionLocal(msg.arg1, msg.arg2);
                    break;
                }
                case MESSAGE_PUBLISH: {
                    Bundle data = msg.getData();
                    PublishData publishData = (PublishData) data
                            .getParcelable(MESSAGE_BUNDLE_KEY_PUBLISH_DATA);
                    PublishSettings publishSettings = (PublishSettings) data
                            .getParcelable(MESSAGE_BUNDLE_KEY_PUBLISH_SETTINGS);
                    if (VDBG) {
                        Log.d(TAG,
                                "Publish: data='" + publishData + "', settings=" + publishSettings);
                    }

                    publishLocal(msg.arg1, msg.arg2, publishData, publishSettings);
                    break;
                }
                case MESSAGE_SUBSCRIBE: {
                    Bundle data = msg.getData();
                    SubscribeData subscribeData = (SubscribeData) data
                            .getParcelable(MESSAGE_BUNDLE_KEY_SUBSCRIBE_DATA);
                    SubscribeSettings subscribeSettings = (SubscribeSettings) data
                            .getParcelable(MESSAGE_BUNDLE_KEY_SUBSCRIBE_SETTINGS);
                    if (VDBG) {
                        Log.d(TAG, "Subscribe: data='" + subscribeData + "', settings="
                                + subscribeSettings);
                    }

                    subscribeLocal(msg.arg1, msg.arg2, subscribeData, subscribeSettings);
                    break;
                }
                case MESSAGE_SEND_MESSAGE: {
                    Bundle data = msg.getData();
                    int sessionId = msg.getData().getInt(MESSAGE_BUNDLE_KEY_SESSION_ID);
                    int peerId = data.getInt(MESSAGE_BUNDLE_KEY_MESSAGE_PEER_ID);
                    byte[] message = data.getByteArray(MESSAGE_BUNDLE_KEY_MESSAGE);
                    int messageId = data.getInt(MESSAGE_BUNDLE_KEY_MESSAGE_ID);

                    if (VDBG) {
                        Log.d(TAG, "Send Message: message='" + message + "' (ID=" + messageId
                                + ") to peerId=" + peerId);
                    }

                    sendFollowonMessageLocal(msg.arg1, sessionId, peerId, message, msg.arg2,
                            messageId);
                    break;
                }
                case MESSAGE_STOP_SESSION: {
                    if (VDBG) {
                        Log.d(TAG, "Stop session");
                    }
                    stopSessionLocal(msg.arg1, msg.arg2);
                    break;
                }
                case MESSAGE_ON_CAPABILITIES_UPDATED:
                    onCapabilitiesUpdatedLocal((short) msg.arg1,
                            (WifiNanNative.Capabilities) msg.obj);
                    break;
                case MESSAGE_ON_CONFIG_COMPLETED:
                    onConfigCompletedLocal((short) msg.arg1);
                    break;
                case MESSAGE_ON_CONFIG_FAILED:
                    onConfigFailedLocal((short) msg.arg1, msg.arg2);
                    break;
                case MESSAGE_ON_NAN_DOWN:
                    onNanDownLocal(msg.arg1);
                    break;
                case MESSAGE_ON_INTERFACE_CHANGE:
                    onInterfaceAddressChangeLocal((byte[]) msg.obj);
                    break;
                case MESSAGE_ON_CLUSTER_CHANGE:
                    onClusterChangeLocal(msg.arg1, (byte[]) msg.obj);
                    break;
                case MESSAGE_ON_PUBLISH_SUCCESS:
                    onPublishSuccessLocal((short) msg.arg1, msg.arg2);
                    break;
                case MESSAGE_ON_PUBLISH_FAIL:
                    onPublishFailLocal((short) msg.arg1, msg.arg2);
                    break;
                case MESSAGE_ON_PUBLISH_TERMINATED:
                    onPublishTerminatedLocal(msg.arg1, msg.arg2);
                    break;
                case MESSAGE_ON_SUBSCRIBE_SUCCESS:
                    onSubscribeSuccessLocal((short) msg.arg1, msg.arg2);
                    break;
                case MESSAGE_ON_SUBSCRIBE_FAIL:
                    onSubscribeFailLocal((short) msg.arg1, msg.arg2);
                    break;
                case MESSAGE_ON_SUBSCRIBE_TERMINATED:
                    onSubscribeTerminatedLocal(msg.arg1, msg.arg2);
                    break;
                case MESSAGE_ON_MESSAGE_SEND_SUCCESS:
                    onMessageSendSuccessLocal((short) msg.arg1);
                    break;
                case MESSAGE_ON_MESSAGE_SEND_FAIL:
                    onMessageSendFailLocal((short) msg.arg1, msg.arg2);
                    break;
                case MESSAGE_ON_UNKNOWN_TRANSACTION:
                    onUnknownTransactionLocal(
                            msg.getData().getInt(MESSAGE_BUNDLE_KEY_RESPONSE_TYPE),
                            (short) msg.arg1, msg.arg2);
                    break;
                case MESSAGE_ON_MATCH: {
                    int pubSubId = msg.arg1;
                    int requestorInstanceId = msg.arg2;
                    byte[] peerMac = msg.getData().getByteArray(MESSAGE_BUNDLE_KEY_MAC_ADDRESS);
                    byte[] serviceSpecificInfo = msg.getData()
                            .getByteArray(MESSAGE_BUNDLE_KEY_SSI_DATA);
                    int serviceSpecificInfoLength = msg.getData()
                            .getInt(MESSAGE_BUNDLE_KEY_SSI_LENGTH);
                    byte[] matchFilter = msg.getData().getByteArray(MESSAGE_BUNDLE_KEY_FILTER_DATA);
                    int matchFilterLength = msg.getData().getInt(MESSAGE_BUNDLE_KEY_FILTER_LENGTH);
                    onMatchLocal(pubSubId, requestorInstanceId, peerMac, serviceSpecificInfo,
                            serviceSpecificInfoLength, matchFilter, matchFilterLength);
                    break;
                }
                case MESSAGE_ON_MESSAGE_RECEIVED: {
                    int pubSubId = msg.arg1;
                    int requestorInstanceId = msg.arg2;
                    byte[] peerMac = msg.getData().getByteArray(MESSAGE_BUNDLE_KEY_MAC_ADDRESS);
                    byte[] message = msg.getData().getByteArray(MESSAGE_BUNDLE_KEY_MESSAGE_DATA);
                    int messageLength = msg.getData().getInt(MESSAGE_BUNDLE_KEY_MESSAGE_LENGTH);
                    onMessageReceivedLocal(pubSubId, requestorInstanceId, peerMac, message,
                            messageLength);
                    break;
                }
                default:
                    Log.e(TAG, "Unknown message code: " + msg.what);
            }
