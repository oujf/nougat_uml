class BucketList
!!!37075639.java!!!	BucketList()
            mBuckets = new Bucket[PREDEFINED_BUCKET_PERIODS.length];
!!!37075767.java!!!	clearAll() : void
            Arrays.fill(mBuckets, null);
            mActiveBucketCount = 0;
!!!37075895.java!!!	clear(in index : int) : void
            if (mBuckets[index] != null) {
                --mActiveBucketCount;
                mBuckets[index] = null;
            }
!!!37076023.java!!!	getOrCreate(in index : int) : BackgroundScanScheduler::Bucket
            Bucket bucket = mBuckets[index];
            if (bucket == null) {
                ++mActiveBucketCount;
                bucket = mBuckets[index] = new Bucket(PREDEFINED_BUCKET_PERIODS[index]);
            }
            return bucket;
!!!37076151.java!!!	isActive(in index : int) : boolean
            return mBuckets[index] != null;
!!!37076279.java!!!	get(in index : int) : BackgroundScanScheduler::Bucket
            return mBuckets[index];
!!!37076407.java!!!	size() : int
            return mBuckets.length;
!!!37076535.java!!!	getActiveCount() : int
            return mActiveBucketCount;
!!!37076663.java!!!	getActiveRegularBucketCount() : int
            if (isActive(EXPONENTIAL_BACK_OFF_BUCKET_IDX)) {
                return mActiveBucketCount - 1;
            } else {
                return mActiveBucketCount;
            }
!!!37076791.java!!!	getSortedActiveRegularBucketList() : BackgroundScanScheduler::Bucket
            ArrayList<Bucket> activeBuckets = new ArrayList<>();
            for (int i = 0; i < mBuckets.length; i++) {
                if (mBuckets[i] != null && i != EXPONENTIAL_BACK_OFF_BUCKET_IDX) {
                    activeBuckets.add(mBuckets[i]);
                }
            }
            Collections.sort(activeBuckets, mTimePeriodSortComparator);
            return activeBuckets;
