class KnownBandsChannelHelper
!!!37083959.java!!!	setBandChannels(inout channels2G : int, inout channels5G : int, inout channelsDfs : int) : void
        mBandsToChannels = new WifiScanner.ChannelSpec[8][];

        mBandsToChannels[0] = NO_CHANNELS;

        mBandsToChannels[1] = new WifiScanner.ChannelSpec[channels2G.length];
        copyChannels(mBandsToChannels[1], 0, channels2G);

        mBandsToChannels[2] = new WifiScanner.ChannelSpec[channels5G.length];
        copyChannels(mBandsToChannels[2], 0, channels5G);

        mBandsToChannels[3] = new WifiScanner.ChannelSpec[channels2G.length + channels5G.length];
        copyChannels(mBandsToChannels[3], 0, channels2G);
        copyChannels(mBandsToChannels[3], channels2G.length, channels5G);

        mBandsToChannels[4] = new WifiScanner.ChannelSpec[channelsDfs.length];
        copyChannels(mBandsToChannels[4], 0, channelsDfs);

        mBandsToChannels[5] = new WifiScanner.ChannelSpec[channels2G.length + channelsDfs.length];
        copyChannels(mBandsToChannels[5], 0, channels2G);
        copyChannels(mBandsToChannels[5], channels2G.length, channelsDfs);

        mBandsToChannels[6] = new WifiScanner.ChannelSpec[channels5G.length + channelsDfs.length];
        copyChannels(mBandsToChannels[6], 0, channels5G);
        copyChannels(mBandsToChannels[6], channels5G.length, channelsDfs);

        mBandsToChannels[7] = new WifiScanner.ChannelSpec[
                channels2G.length + channels5G.length + channelsDfs.length];
        copyChannels(mBandsToChannels[7], 0, channels2G);
        copyChannels(mBandsToChannels[7], channels2G.length, channels5G);
        copyChannels(mBandsToChannels[7], channels2G.length + channels5G.length, channelsDfs);
!!!37084087.java!!!	copyChannels(inout channelSpec : WifiScanner::ChannelSpec, in offset : int, inout channels : int) : void
        for (int i = 0; i < channels.length; i++) {
            channelSpec[offset + i] = new WifiScanner.ChannelSpec(channels[i]);
        }
!!!37084215.java!!!	getAvailableScanChannels(in band : int) : WifiScanner::ChannelSpec
        if (band < WifiScanner.WIFI_BAND_24_GHZ || band > WifiScanner.WIFI_BAND_BOTH_WITH_DFS) {
            // invalid value for band
            return NO_CHANNELS;
        } else {
            return mBandsToChannels[band];
        }
!!!37084343.java!!!	estimateScanDuration(inout settings : WifiScanner::ScanSettings) : int
        if (settings.band == WifiScanner.WIFI_BAND_UNSPECIFIED) {
            return settings.channels.length * SCAN_PERIOD_PER_CHANNEL_MS;
        } else {
            return getAvailableScanChannels(settings.band).length * SCAN_PERIOD_PER_CHANNEL_MS;
        }
!!!37084471.java!!!	isDfsChannel(in frequency : int) : boolean
        for (WifiScanner.ChannelSpec dfsChannel :
                mBandsToChannels[WifiScanner.WIFI_BAND_5_GHZ_DFS_ONLY]) {
            if (frequency == dfsChannel.frequency) {
                return true;
            }
        }
        return false;
!!!37084599.java!!!	getBandFromChannel(in frequency : int) : int
        if (2400 <= frequency && frequency < 2500) {
            return WifiScanner.WIFI_BAND_24_GHZ;
        } else if (isDfsChannel(frequency)) {
            return WifiScanner.WIFI_BAND_5_GHZ_DFS_ONLY;
        } else if (5100 <= frequency && frequency < 6000) {
            return WifiScanner.WIFI_BAND_5_GHZ;
        } else {
            return WifiScanner.WIFI_BAND_UNSPECIFIED;
        }
!!!37084727.java!!!	settingsContainChannel(inout settings : WifiScanner::ScanSettings, in channel : int) : boolean
        WifiScanner.ChannelSpec[] settingsChannels;
        if (settings.band == WifiScanner.WIFI_BAND_UNSPECIFIED) {
            settingsChannels = settings.channels;
        } else {
            settingsChannels = getAvailableScanChannels(settings.band);
        }
        for (int i = 0; i < settingsChannels.length; ++i) {
            if (settingsChannels[i].frequency == channel) {
                return true;
            }
        }
        return false;
!!!37086519.java!!!	createChannelCollection() : KnownBandsChannelHelper::KnownBandsChannelCollection
        return new KnownBandsChannelCollection();
