class KnownBandsChannelCollection
!!!37084855.java!!!	addChannel(in frequency : int) : void
            mChannels.add(frequency);
            mAllBands |= getBandFromChannel(frequency);
!!!37084983.java!!!	addBand(in band : int) : void
            mExactBands |= band;
            mAllBands |= band;
            WifiScanner.ChannelSpec[] bandChannels = getAvailableScanChannels(band);
            for (int i = 0; i < bandChannels.length; ++i) {
                mChannels.add(bandChannels[i].frequency);
            }
!!!37085111.java!!!	containsChannel(in channel : int) : boolean
            return mChannels.contains(channel);
!!!37085239.java!!!	containsBand(in band : int) : boolean
            WifiScanner.ChannelSpec[] bandChannels = getAvailableScanChannels(band);
            for (int i = 0; i < bandChannels.length; ++i) {
                if (!mChannels.contains(bandChannels[i].frequency)) {
                    return false;
                }
            }
            return true;
!!!37085367.java!!!	partiallyContainsBand(in band : int) : boolean
            WifiScanner.ChannelSpec[] bandChannels = getAvailableScanChannels(band);
            for (int i = 0; i < bandChannels.length; ++i) {
                if (mChannels.contains(bandChannels[i].frequency)) {
                    return true;
                }
            }
            return false;
!!!37085495.java!!!	isEmpty() : boolean
            return mChannels.isEmpty();
!!!37085623.java!!!	clear() : void
            mAllBands = 0;
            mExactBands = 0;
            mChannels.clear();
!!!37085751.java!!!	getMissingChannelsFromBand(in band : int) : Set<Integer>
            ArraySet<Integer> missingChannels = new ArraySet<>();
            WifiScanner.ChannelSpec[] bandChannels = getAvailableScanChannels(band);
            for (int i = 0; i < bandChannels.length; ++i) {
                if (!mChannels.contains(bandChannels[i].frequency)) {
                    missingChannels.add(bandChannels[i].frequency);
                }
            }
            return missingChannels;
!!!37085879.java!!!	getContainingChannelsFromBand(in band : int) : Set<Integer>
            ArraySet<Integer> containingChannels = new ArraySet<>();
            WifiScanner.ChannelSpec[] bandChannels = getAvailableScanChannels(band);
            for (int i = 0; i < bandChannels.length; ++i) {
                if (mChannels.contains(bandChannels[i].frequency)) {
                    containingChannels.add(bandChannels[i].frequency);
                }
            }
            return containingChannels;
!!!37086007.java!!!	getChannelSet() : Set<Integer>
            if (!isEmpty() && mAllBands != mExactBands) {
                return mChannels;
            } else {
                return new ArraySet<>();
            }
!!!37086135.java!!!	fillBucketSettings(inout bucketSettings : WifiNative::BucketSettings, in maxChannels : int) : void
            if ((mChannels.size() > maxChannels || mAllBands == mExactBands)
                    && mAllBands != 0) {
                bucketSettings.band = mAllBands;
                bucketSettings.num_channels = 0;
                bucketSettings.channels = null;
            } else {
                bucketSettings.band = WifiScanner.WIFI_BAND_UNSPECIFIED;
                bucketSettings.num_channels = mChannels.size();
                bucketSettings.channels = new WifiNative.ChannelSettings[mChannels.size()];
                for (int i = 0; i < mChannels.size(); ++i) {
                    WifiNative.ChannelSettings channelSettings = new WifiNative.ChannelSettings();
                    channelSettings.frequency = mChannels.valueAt(i);
                    bucketSettings.channels[i] = channelSettings;
                }
            }
!!!37086263.java!!!	getSupplicantScanFreqs() : Set<Integer>
            if (mExactBands == WifiScanner.WIFI_BAND_BOTH_WITH_DFS) {
                return null;
            } else {
                return new ArraySet<Integer>(mChannels);
            }
!!!37086391.java!!!	getAllChannels() : Set<Integer>
            return new ArraySet<Integer>(mChannels);
