class HalWifiScannerImpl
!!!37089335.java!!!	HalWifiScannerImpl(inout context : Context, inout wifiNative : WifiNative, inout looper : Looper, inout clock : Clock)
        mWifiNative = wifiNative;
        mChannelHelper = new HalChannelHelper(wifiNative);
        mSupplicantScannerDelegate =
                new SupplicantWifiScannerImpl(context, wifiNative, mChannelHelper, looper, clock);

        // We are not going to support HAL ePNO currently.
        mHalBasedPnoSupported = false;
!!!37089463.java!!!	handleMessage(inout msg : Message) : boolean
        Log.w(TAG, "Unknown message received: " + msg.what);
        return true;
!!!37089591.java!!!	cleanup() : void
        mSupplicantScannerDelegate.cleanup();
!!!37089719.java!!!	getScanCapabilities(inout capabilities : WifiNative::ScanCapabilities) : boolean
        return mWifiNative.getScanCapabilities(capabilities);
!!!37089847.java!!!	getChannelHelper() : ChannelHelper
        return mChannelHelper;
!!!37089975.java!!!	startSingleScan(inout settings : WifiNative::ScanSettings, inout eventHandler : WifiNative::ScanEventHandler) : boolean
        return mSupplicantScannerDelegate.startSingleScan(settings, eventHandler);
!!!37090103.java!!!	getLatestSingleScanResults() : WifiScanner::ScanData
        return mSupplicantScannerDelegate.getLatestSingleScanResults();
!!!37090231.java!!!	startBatchedScan(inout settings : WifiNative::ScanSettings, inout eventHandler : WifiNative::ScanEventHandler) : boolean
        if (settings == null || eventHandler == null) {
            Log.w(TAG, "Invalid arguments for startBatched: settings=" + settings
                    + ",eventHandler=" + eventHandler);
            return false;
        }
        return mWifiNative.startScan(settings, eventHandler);
!!!37090359.java!!!	stopBatchedScan() : void
        mWifiNative.stopScan();
!!!37090487.java!!!	pauseBatchedScan() : void
        mWifiNative.pauseScan();
!!!37090615.java!!!	restartBatchedScan() : void
        mWifiNative.restartScan();
!!!37090743.java!!!	getLatestBatchedScanResults(inout flush : boolean) : WifiScanner::ScanData
        return mWifiNative.getScanResults(flush);
!!!37090871.java!!!	setHwPnoList(inout settings : WifiNative::PnoSettings, inout eventHandler : WifiNative::PnoEventHandler) : boolean
        if (mHalBasedPnoSupported) {
            return mWifiNative.setPnoList(settings, eventHandler);
        } else {
            return mSupplicantScannerDelegate.setHwPnoList(settings, eventHandler);
        }
!!!37090999.java!!!	resetHwPnoList() : boolean
        if (mHalBasedPnoSupported) {
            return mWifiNative.resetPnoList();
        } else {
            return mSupplicantScannerDelegate.resetHwPnoList();
        }
!!!37091127.java!!!	isHwPnoSupported(inout isConnectedPno : boolean) : boolean
        if (mHalBasedPnoSupported) {
            return true;
        } else {
            return mSupplicantScannerDelegate.isHwPnoSupported(isConnectedPno);
        }
!!!37091255.java!!!	shouldScheduleBackgroundScanForHwPno() : boolean
        if (mHalBasedPnoSupported) {
            return true;
        } else {
            return mSupplicantScannerDelegate.shouldScheduleBackgroundScanForHwPno();
        }
!!!37091383.java!!!	setHotlist(inout settings : WifiScanner::HotlistSettings, inout eventHandler : WifiNative::HotlistEventHandler) : boolean
        return mWifiNative.setHotlist(settings, eventHandler);
!!!37091511.java!!!	resetHotlist() : void
        mWifiNative.resetHotlist();
!!!37091639.java!!!	trackSignificantWifiChange(inout settings : WifiScanner::WifiChangeSettings, inout handler : WifiNative::SignificantWifiChangeEventHandler) : boolean
        return mWifiNative.trackSignificantWifiChange(settings, handler);
!!!37091767.java!!!	untrackSignificantWifiChange() : void
        mWifiNative.untrackSignificantWifiChange();
