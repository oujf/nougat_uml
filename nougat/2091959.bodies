class NoBandChannelCollection
!!!37092279.java!!!	addChannel(in frequency : int) : void
            mChannels.add(frequency);
!!!37092407.java!!!	addBand(in band : int) : void
            if (band != WifiScanner.WIFI_BAND_UNSPECIFIED) {
                mAllChannels = true;
            }
!!!37092535.java!!!	containsChannel(in channel : int) : boolean
            return mAllChannels || mChannels.contains(channel);
!!!37092663.java!!!	containsBand(in band : int) : boolean
            if (band != WifiScanner.WIFI_BAND_UNSPECIFIED) {
                return mAllChannels;
            }
            return false;
!!!37092791.java!!!	partiallyContainsBand(in band : int) : boolean
            // We don't need to partially collapse settings in supplicant scanner because we
            // don't have any limitation on the number of channels that can be scanned. We also
            // don't currently keep track of bands very well in NoBandChannelHelper.
            return false;
!!!37092919.java!!!	isEmpty() : boolean
            return !mAllChannels && mChannels.isEmpty();
!!!37093047.java!!!	clear() : void
            mAllChannels = false;
            mChannels.clear();
!!!37093175.java!!!	getMissingChannelsFromBand(in band : int) : Set<Integer>
            // We don't need to partially collapse settings in supplicant scanner because we
            // don't have any limitation on the number of channels that can be scanned. We also
            // don't currently keep track of bands very well in NoBandChannelHelper.
            return new ArraySet<Integer>();
!!!37093303.java!!!	getContainingChannelsFromBand(in band : int) : Set<Integer>
            // We don't need to partially collapse settings in supplicant scanner because we
            // don't have any limitation on the number of channels that can be scanned. We also
            // don't currently keep track of bands very well in NoBandChannelHelper.
            return new ArraySet<Integer>();
!!!37093431.java!!!	getChannelSet() : Set<Integer>
            if (!isEmpty() && !mAllChannels) {
                return mChannels;
            } else {
                return new ArraySet<>();
            }
!!!37093559.java!!!	fillBucketSettings(inout bucketSettings : WifiNative::BucketSettings, in maxChannels : int) : void
            if (mAllChannels || mChannels.size() > maxChannels) {
                bucketSettings.band = WifiScanner.WIFI_BAND_BOTH_WITH_DFS;
                bucketSettings.num_channels = 0;
                bucketSettings.channels = null;
            } else {
                bucketSettings.band = WifiScanner.WIFI_BAND_UNSPECIFIED;
                bucketSettings.num_channels = mChannels.size();
                bucketSettings.channels = new WifiNative.ChannelSettings[mChannels.size()];
                for (int i = 0; i < mChannels.size(); ++i) {
                    WifiNative.ChannelSettings channelSettings = new WifiNative.ChannelSettings();
                    channelSettings.frequency = mChannels.valueAt(i);
                    bucketSettings.channels[i] = channelSettings;
                }
            }
!!!37093687.java!!!	getSupplicantScanFreqs() : Set<Integer>
            if (mAllChannels) {
                return null;
            } else {
                return new ArraySet<Integer>(mChannels);
            }
