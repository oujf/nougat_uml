class HwPnoDebouncer
!!!37101495.java!!!	HwPnoDebouncer(inout wifiNative : WifiNative, inout alarmManager : AlarmManager, inout eventHandler : Handler, inout clock : Clock)
            mWifiNative = wifiNative;
            mAlarmManager = alarmManager;
            mEventHandler = eventHandler;
            mClock = clock;
!!!37101623.java!!!	updatePnoState(inout enable : boolean) : boolean
            if (mCurrentPnoState == enable) {
                if (DBG) Log.d(TAG, "PNO state is already " + enable);
                return true;
            }

            mLastPnoChangeTimeStamp = mClock.elapsedRealtime();
            if (mWifiNative.setPnoScan(enable)) {
                Log.d(TAG, "Changed PNO state from " + mCurrentPnoState + " to " + enable);
                mCurrentPnoState = enable;
                return true;
            } else {
                Log.e(TAG, "PNO state change to " + enable + " failed");
                return false;
            }
!!!37101751.java!!!	setPnoState(inout enable : boolean) : boolean
            boolean isSuccess = true;
            mExpectedPnoState = enable;
            if (!mWaitForTimer) {
                long timeDifference = mClock.elapsedRealtime() - mLastPnoChangeTimeStamp;
                if (timeDifference >= MINIMUM_PNO_GAP_MS) {
                    isSuccess = updatePnoState(enable);
                } else {
                    long alarmTimeout = MINIMUM_PNO_GAP_MS - timeDifference;
                    Log.d(TAG, "Start PNO timer with delay " + alarmTimeout);
                    mAlarmManager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,
                            mClock.elapsedRealtime() + alarmTimeout, PNO_DEBOUNCER_ALARM_TAG,
                            mAlarmListener, mEventHandler);
                    mWaitForTimer = true;
                }
            }
            return isSuccess;
!!!37101879.java!!!	startPnoScan(inout listener : SupplicantWifiScannerImpl::HwPnoDebouncer::Listener) : boolean
            if (DBG) Log.d(TAG, "Starting PNO scan");
            mListener = listener;
            if (!setPnoState(true)) {
                mListener = null;
                return false;
            }
            return true;
!!!37102007.java!!!	stopPnoScan() : void
            if (DBG) Log.d(TAG, "Stopping PNO scan");
            setPnoState(false);
            mListener = null;
!!!37102135.java!!!	forceStopPnoScan() : void
            if (mCurrentPnoState) {
                if (DBG) Log.d(TAG, "Force stopping Pno scan");
                // Cancel the debounce timer and stop PNO scan.
                if (mWaitForTimer) {
                    mAlarmManager.cancel(mAlarmListener);
                    mWaitForTimer = false;
                }
                updatePnoState(false);
            }
