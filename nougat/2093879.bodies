class WifiPnoScanStateMachine
!!!37111479.java!!!	WifiPnoScanStateMachine(inout looper : Looper)
            super("WifiPnoScanStateMachine", looper);

            setLogRecSize(512);
            setLogOnlyTransitions(false);

            // CHECKSTYLE:OFF IndentationCheck
            addState(mDefaultState);
                addState(mStartedState, mDefaultState);
                    addState(mHwPnoScanState, mStartedState);
                        addState(mSingleScanState, mHwPnoScanState);
                    addState(mSwPnoScanState, mStartedState);
            // CHECKSTYLE:ON IndentationCheck

            setInitialState(mDefaultState);
!!!37111607.java!!!	removePnoSettings(inout ci : WifiScanningServiceImpl::ClientInfo) : void
            mActivePnoScans.removeAllForClient(ci);
            transitionTo(mStartedState);
!!!37111735.java!!!	onPnoNetworkFound(inout results : ScanResult) : void
            if (DBG) localLog("onWifiPnoNetworkFound event received");
            sendMessage(CMD_PNO_NETWORK_FOUND, 0, 0, results);
!!!37111863.java!!!	onPnoScanFailed() : void
            if (DBG) localLog("onWifiPnoScanFailed event received");
            sendMessage(CMD_PNO_SCAN_FAILED, 0, 0, null);
!!!37113655.java!!!	convertPnoSettingsToNative(inout pnoSettings : WifiScanner::PnoSettings) : WifiNative::PnoSettings
            WifiNative.PnoSettings nativePnoSetting = new WifiNative.PnoSettings();
            nativePnoSetting.min5GHzRssi = pnoSettings.min5GHzRssi;
            nativePnoSetting.min24GHzRssi = pnoSettings.min24GHzRssi;
            nativePnoSetting.initialScoreMax = pnoSettings.initialScoreMax;
            nativePnoSetting.currentConnectionBonus = pnoSettings.currentConnectionBonus;
            nativePnoSetting.sameNetworkBonus = pnoSettings.sameNetworkBonus;
            nativePnoSetting.secureBonus = pnoSettings.secureBonus;
            nativePnoSetting.band5GHzBonus = pnoSettings.band5GHzBonus;
            nativePnoSetting.isConnected = pnoSettings.isConnected;
            nativePnoSetting.networkList =
                    new WifiNative.PnoNetwork[pnoSettings.networkList.length];
            for (int i = 0; i < pnoSettings.networkList.length; i++) {
                nativePnoSetting.networkList[i] = new WifiNative.PnoNetwork();
                nativePnoSetting.networkList[i].ssid = pnoSettings.networkList[i].ssid;
                nativePnoSetting.networkList[i].networkId = pnoSettings.networkList[i].networkId;
                nativePnoSetting.networkList[i].priority = pnoSettings.networkList[i].priority;
                nativePnoSetting.networkList[i].flags = pnoSettings.networkList[i].flags;
                nativePnoSetting.networkList[i].auth_bit_field =
                        pnoSettings.networkList[i].authBitField;
            }
            return nativePnoSetting;
!!!37113783.java!!!	getScanSettings() : WifiScanner::ScanSettings
            for (Pair<PnoSettings, ScanSettings> settingsPair : mActivePnoScans.getAllSettings()) {
                return settingsPair.second;
            }
            return null;
!!!37113911.java!!!	removeInternalClient() : void
            if (mInternalClientInfo != null) {
                mInternalClientInfo.cleanup();
                mInternalClientInfo = null;
            } else {
                Log.w(TAG, "No Internal client for PNO");
            }
!!!37114039.java!!!	addInternalClient(inout ci : WifiScanningServiceImpl::ClientInfo) : void
            if (mInternalClientInfo == null) {
                mInternalClientInfo =
                        new InternalClientInfo(ci.getUid(), new Messenger(this.getHandler()));
                mInternalClientInfo.register();
            } else {
                Log.w(TAG, "Internal client for PNO already exists");
            }
!!!37114167.java!!!	addPnoScanRequest(inout ci : WifiScanningServiceImpl::ClientInfo, in handler : int, inout scanSettings : WifiScanner::ScanSettings, inout pnoSettings : WifiScanner::PnoSettings) : void
            mActivePnoScans.addRequest(ci, handler, WifiStateMachine.WIFI_WORK_SOURCE,
                    Pair.create(pnoSettings, scanSettings));
            addInternalClient(ci);
!!!37114295.java!!!	removePnoScanRequest(inout ci : WifiScanningServiceImpl::ClientInfo, in handler : int) : Pair
            Pair<PnoSettings, ScanSettings> settings = mActivePnoScans.removeRequest(ci, handler);
            return settings;
!!!37114423.java!!!	addHwPnoScanRequest(inout ci : WifiScanningServiceImpl::ClientInfo, in handler : int, inout scanSettings : WifiScanner::ScanSettings, inout pnoSettings : WifiScanner::PnoSettings) : boolean
            if (ci == null) {
                Log.d(TAG, "Failing scan request ClientInfo not found " + handler);
                return false;
            }
            if (!mActivePnoScans.isEmpty()) {
                loge("Failing scan request because there is already an active scan");
                return false;
            }
            WifiNative.PnoSettings nativePnoSettings = convertPnoSettingsToNative(pnoSettings);
            if (!mScannerImpl.setHwPnoList(nativePnoSettings, mPnoScanStateMachine)) {
                return false;
            }
            logScanRequest("addHwPnoScanRequest", ci, handler, null, scanSettings, pnoSettings);
            addPnoScanRequest(ci, handler, scanSettings, pnoSettings);
            // HW PNO is supported, check if we need a background scan running for this.
            if (mScannerImpl.shouldScheduleBackgroundScanForHwPno()) {
                addBackgroundScanRequest(scanSettings);
            }
            return true;
!!!37114551.java!!!	removeHwPnoScanRequest(inout ci : WifiScanningServiceImpl::ClientInfo, in handler : int) : void
            if (ci != null) {
                Pair<PnoSettings, ScanSettings> settings = removePnoScanRequest(ci, handler);
                logScanRequest("removeHwPnoScanRequest", ci, handler, null,
                        settings.second, settings.first);
            }
!!!37114679.java!!!	addSwPnoScanRequest(inout ci : WifiScanningServiceImpl::ClientInfo, in handler : int, inout scanSettings : WifiScanner::ScanSettings, inout pnoSettings : WifiScanner::PnoSettings) : boolean
            if (ci == null) {
                Log.d(TAG, "Failing scan request ClientInfo not found " + handler);
                return false;
            }
            if (!mActivePnoScans.isEmpty()) {
                loge("Failing scan request because there is already an active scan");
                return false;
            }
            logScanRequest("addSwPnoScanRequest", ci, handler, null, scanSettings, pnoSettings);
            addPnoScanRequest(ci, handler, scanSettings, pnoSettings);
            // HW PNO is not supported, we need to revert to normal background scans and
            // report events after each scan and we need full scan results to get the IE information
            scanSettings.reportEvents = WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN
                    | WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT;
            addBackgroundScanRequest(scanSettings);
            return true;
!!!37114807.java!!!	removeSwPnoScanRequest(inout ci : WifiScanningServiceImpl::ClientInfo, in handler : int) : void
            if (ci != null) {
                Pair<PnoSettings, ScanSettings> settings = removePnoScanRequest(ci, handler);
                logScanRequest("removeSwPnoScanRequest", ci, handler, null,
                        settings.second, settings.first);
            }
!!!37114935.java!!!	reportPnoNetworkFound(inout results : ScanResult) : void
            WifiScanner.ParcelableScanResults parcelableScanResults =
                    new WifiScanner.ParcelableScanResults(results);
            for (RequestInfo<Pair<PnoSettings, ScanSettings>> entry : mActivePnoScans) {
                ClientInfo ci = entry.clientInfo;
                int handler = entry.handlerId;
                logCallback("pnoNetworkFound", ci, handler, describeForLog(results));
                ci.reportEvent(
                        WifiScanner.CMD_PNO_NETWORK_FOUND, 0, handler, parcelableScanResults);
            }
!!!37115063.java!!!	sendPnoScanFailedToAllAndClear(in reason : int, inout description : String) : void
            for (RequestInfo<Pair<PnoSettings, ScanSettings>> entry : mActivePnoScans) {
                ClientInfo ci = entry.clientInfo;
                int handler = entry.handlerId;
                ci.reportEvent(WifiScanner.CMD_OP_FAILED, 0, handler,
                        new WifiScanner.OperationResult(reason, description));
            }
            mActivePnoScans.clear();
!!!37115191.java!!!	addBackgroundScanRequest(inout settings : WifiScanner::ScanSettings) : void
            if (DBG) localLog("Starting background scan");
            if (mInternalClientInfo != null) {
                mInternalClientInfo.sendRequestToClientHandler(
                        WifiScanner.CMD_START_BACKGROUND_SCAN, settings,
                        WifiStateMachine.WIFI_WORK_SOURCE);
            }
!!!37115319.java!!!	addSingleScanRequest(inout settings : WifiScanner::ScanSettings) : void
            if (DBG) localLog("Starting single scan");
            if (mInternalClientInfo != null) {
                mInternalClientInfo.sendRequestToClientHandler(
                        WifiScanner.CMD_START_SINGLE_SCAN, settings,
                        WifiStateMachine.WIFI_WORK_SOURCE);
            }
!!!37115447.java!!!	isSingleScanNeeded(inout scanResults : ScanResult) : boolean
            for (ScanResult scanResult : scanResults) {
                if (scanResult.informationElements != null
                        && scanResult.informationElements.length > 0) {
                    return false;
                }
            }
            return true;
