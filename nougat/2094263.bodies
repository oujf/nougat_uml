class RequestList
!!!37104439.java!!!	addRequest(inout ci : WifiScanningServiceImpl::ClientInfo, in handler : int, inout reqworkSource : WorkSource, inout settings : T) : void
            add(new RequestInfo<T>(ci, handler, reqworkSource, settings));
!!!37104567.java!!!	removeRequest(inout ci : WifiScanningServiceImpl::ClientInfo, in handlerId : int) : T
            T removed = null;
            Iterator<RequestInfo<T>> iter = iterator();
            while (iter.hasNext()) {
                RequestInfo<T> entry = iter.next();
                if (entry.clientInfo == ci && entry.handlerId == handlerId) {
                    removed = entry.settings;
                    iter.remove();
                }
            }
            return removed;
!!!37104695.java!!!	getAllSettings() : Collection<T>
            ArrayList<T> settingsList = new ArrayList<>();
            Iterator<RequestInfo<T>> iter = iterator();
            while (iter.hasNext()) {
                RequestInfo<T> entry = iter.next();
                settingsList.add(entry.settings);
            }
            return settingsList;
!!!37104823.java!!!	getAllSettingsForClient(inout ci : WifiScanningServiceImpl::ClientInfo) : Collection<T>
            ArrayList<T> settingsList = new ArrayList<>();
            Iterator<RequestInfo<T>> iter = iterator();
            while (iter.hasNext()) {
                RequestInfo<T> entry = iter.next();
                if (entry.clientInfo == ci) {
                    settingsList.add(entry.settings);
                }
            }
            return settingsList;
!!!37104951.java!!!	removeAllForClient(inout ci : WifiScanningServiceImpl::ClientInfo) : void
            Iterator<RequestInfo<T>> iter = iterator();
            while (iter.hasNext()) {
                RequestInfo<T> entry = iter.next();
                if (entry.clientInfo == ci) {
                    iter.remove();
                }
            }
!!!37105079.java!!!	createMergedWorkSource() : WorkSource
            WorkSource mergedSource = new WorkSource();
            for (RequestInfo<T> entry : this) {
                mergedSource.add(entry.workSource);
            }
            return mergedSource;
