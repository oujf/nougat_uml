class MovingState
!!!37119031.java!!!	enter() : void
                if (DBG) localLog("Entering MovingState");
                if (mTimeoutIntent == null) {
                    Intent intent = new Intent(ACTION_TIMEOUT, null);
                    mTimeoutIntent = PendingIntent.getBroadcast(mContext, 0, intent, 0);

                    mContext.registerReceiver(
                            new BroadcastReceiver() {
                                @Override
                                public void onReceive(Context context, Intent intent) {
                                    sendMessage(CMD_WIFI_CHANGE_TIMEOUT);
                                }
                            }, new IntentFilter(ACTION_TIMEOUT));
                }
                issueFullScan();
!!!37119159.java!!!	processMessage(inout msg : Message) : boolean
                if (DBG) localLog("MovingState state got " + msg);
                ClientInfo ci = mClients.get(msg.replyTo);
                switch (msg.what) {
                    case WifiScanner.CMD_START_TRACKING_CHANGE:
                        addWifiChangeHandler(ci, msg.arg2);
                        replySucceeded(msg);
                        break;
                    case WifiScanner.CMD_STOP_TRACKING_CHANGE:
                        removeWifiChangeHandler(ci, msg.arg2);
                        break;
                    case WifiScanner.CMD_CONFIGURE_WIFI_CHANGE:
                        if (DBG) localLog("Got configuration from app");
                        WifiScanner.WifiChangeSettings settings =
                                (WifiScanner.WifiChangeSettings) msg.obj;
                        reconfigureScan(settings);
                        mWifiChangeDetected = false;
                        long unchangedDelay = settings.unchangedSampleSize * settings.periodInMs;
                        mAlarmManager.cancel(mTimeoutIntent);
                        mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP,
                                mClock.elapsedRealtime() + unchangedDelay,
                                mTimeoutIntent);
                        break;
                    case WifiScanner.CMD_SCAN_RESULT:
                        if (DBG) localLog("Got scan results");
                        if (mScanResultsPending) {
                            if (DBG) localLog("reconfiguring scan");
                            reconfigureScan((ScanData[])msg.obj,
                                    STATIONARY_SCAN_PERIOD_MS);
                            mWifiChangeDetected = false;
                            mAlarmManager.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP,
                                    mClock.elapsedRealtime() + MOVING_STATE_TIMEOUT_MS,
                                    mTimeoutIntent);
                            mScanResultsPending = false;
                        }
                        break;
                    case CMD_WIFI_CHANGE_DETECTED:
                        if (DBG) localLog("Change detected");
                        mAlarmManager.cancel(mTimeoutIntent);
                        reportWifiChanged((ScanResult[])msg.obj);
                        mWifiChangeDetected = true;
                        issueFullScan();
                        break;
                    case CMD_WIFI_CHANGE_TIMEOUT:
                        if (DBG) localLog("Got timeout event");
                        if (mWifiChangeDetected == false) {
                            transitionTo(mStationaryState);
                        }
                        break;
                    default:
                        return NOT_HANDLED;
                }
                return HANDLED;
!!!37119287.java!!!	exit() : void
                mAlarmManager.cancel(mTimeoutIntent);
!!!37119415.java!!!	issueFullScan() : void
                if (DBG) localLog("Issuing full scan");
                ScanSettings settings = new ScanSettings();
                settings.band = WifiScanner.WIFI_BAND_BOTH;
                settings.periodInMs = MOVING_SCAN_PERIOD_MS;
                settings.reportEvents = WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN;
                addScanRequest(settings);
                mScanResultsPending = true;
