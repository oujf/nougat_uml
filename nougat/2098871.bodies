class WifiScannerTest
!!!37133367.java!!!	setUp() : void
        MockitoAnnotations.initMocks(this);
        mLooper = new MockLooper();
        mHandler = mock(Handler.class);
        BidirectionalAsyncChannelServer server = new BidirectionalAsyncChannelServer(
                mContext, mLooper.getLooper(), mHandler);
        when(mService.getMessenger()).thenReturn(server.getMessenger());
        mWifiScanner = new WifiScanner(mContext, mService, mLooper.getLooper());
        mLooper.dispatchAll();
!!!37133495.java!!!	cleanup() : void
        validateMockitoUsage();
!!!37133623.java!!!	verifySetHotlistMessage(inout handler : Handler) : void
        ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
        verify(handler, atLeastOnce()).handleMessage(messageCaptor.capture());
        assertEquals("message.what is not CMD_SET_HOTLIST",
                WifiScanner.CMD_SET_HOTLIST,
                messageCaptor.getValue().what);
!!!37133751.java!!!	testStartTrackingBssidsDuplicateListeners() : void
        BssidInfo[] bssids = new BssidInfo[] {
                new BssidInfo()
        };

        // First start tracking succeeds.
        mWifiScanner.startTrackingBssids(bssids, -100, mBssidListener);
        mLooper.dispatchAll();
        verifySetHotlistMessage(mHandler);

        // Second start tracking should fail.
        mWifiScanner.startTrackingBssids(bssids, -100, mBssidListener);
        mLooper.dispatchAll();
        verify(mBssidListener).onFailure(eq(WifiScanner.REASON_DUPLICATE_REQEUST), anyString());
