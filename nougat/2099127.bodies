class AnqpCacheTest
!!!37134007.java!!!	getAttWifiNetworkDescription() : ScanDetail
        NetworkDescription network = new NetworkDescription(ATT_SSID, ATT_BSSID_PREFIX);
        return network.mScanDetails;
!!!37134135.java!!!	getTwcWifiNetworkDescription() : ScanDetail
        NetworkDescription network = new NetworkDescription(TWC_SSID, TWC_BSSID_PREFIX);
        return network.mScanDetails;
!!!37134263.java!!!	buildQueryList() : Constants::ANQPElementType
        List<Constants.ANQPElementType> list = Arrays.asList(
                Constants.ANQPElementType.class.getEnumConstants());
        return list;
!!!37134391.java!!!	buildAnqpResult() : Constants::ANQPElementType
        Map<Constants.ANQPElementType, ANQPElement> elements = new HashMap<>();
        List<Constants.ANQPElementType> list = Arrays.asList(
                Constants.ANQPElementType.class.getEnumConstants());
        for (final Constants.ANQPElementType type : list) {
            ANQPElement element = new ANQPElement(type) {
                @Override
                public Constants.ANQPElementType getID() {
                    return super.getID();
                }
            };
            elements.put(type, element);
        }

        return elements;
!!!37134519.java!!!	advanceTimeAndTrimCache(in howManyMillis : long) : void
        mCurrentTimeMillis += howManyMillis;
        Log.d(TAG, "Time set to " + mCurrentTimeMillis);
        when(mClock.currentTimeMillis()).thenReturn(mCurrentTimeMillis);
        mCache.clear(false, true);
!!!37134775.java!!!	basicAddQueryAndExpiry() : void
        initMocks(this);

        AnqpCache cache = mCache = new AnqpCache(mClock);
        advanceTimeAndTrimCache(0);

        List<Constants.ANQPElementType> queryList = buildQueryList();

        ScanDetail[] attScanDetails = getAttWifiNetworkDescription();
        ScanDetail[] twcScanDetails = getTwcWifiNetworkDescription();

        /* query att network at time 0 */
        for (ScanDetail scanDetail : attScanDetails) {
            cache.initiate(scanDetail.getNetworkDetail(), queryList);
        }

        /* verify that no data can be returned */
        for (ScanDetail scanDetail : attScanDetails) {
            ANQPData data = cache.getEntry(scanDetail.getNetworkDetail());
            assertNull(data);
        }

        /* update ANQP results after 1 min */
        advanceTimeAndTrimCache(1 * MINUTE_MS);

        Map<Constants.ANQPElementType, ANQPElement> anqpResults = buildAnqpResult();

        for (ScanDetail scanDetail : attScanDetails) {
            cache.update(scanDetail.getNetworkDetail(), anqpResults);
        }

        /* check ANQP results after another 1 min */
        advanceTimeAndTrimCache(1 * MINUTE_MS);

        for (ScanDetail scanDetail : attScanDetails) {
            ANQPData data = cache.getEntry(scanDetail.getNetworkDetail());
            assertNotNull(data);
            NetworkDetail nd = data.getNetwork();
            Map<Constants.ANQPElementType, ANQPElement> anqp = data.getANQPElements();
            assertEquals(scanDetail.getBSSIDString(), nd.getBSSIDString());
            assertEquals(anqpResults.size(), anqp.size());
        }

        /* query ANQP results for twcwifi after another 10 min */
        advanceTimeAndTrimCache(10 * MINUTE_MS);

        for (ScanDetail scanDetail : twcScanDetails) {
            cache.initiate(scanDetail.getNetworkDetail(), queryList);
        }

        /* update ANQP results for twcwifi after another 10 min */
        advanceTimeAndTrimCache(1 * MINUTE_MS);

        for (ScanDetail scanDetail : twcScanDetails) {
            cache.update(scanDetail.getNetworkDetail(), anqpResults);
        }

        /* check all results after 1 minute */
        advanceTimeAndTrimCache(1 * MINUTE_MS);

        for (ScanDetail scanDetail : attScanDetails) {
            ANQPData data = cache.getEntry(scanDetail.getNetworkDetail());
            assertNull(data);
        }

        for (ScanDetail scanDetail : twcScanDetails) {
            ANQPData data = cache.getEntry(scanDetail.getNetworkDetail());
            assertNotNull(data);
            NetworkDetail nd = data.getNetwork();
            Map<Constants.ANQPElementType, ANQPElement> anqp = data.getANQPElements();
            assertEquals(scanDetail.getBSSIDString(), nd.getBSSIDString());
            assertEquals(anqpResults.size(), anqp.size());
        }
