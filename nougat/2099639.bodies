class BidirectionalAsyncChannelServer
!!!37135415.java!!!	BidirectionalAsyncChannelServer(in context : Context, in looper : Looper, in messageHandler : Handler)
        Handler handler = new Handler(looper) {
            @Override
            public void handleMessage(Message msg) {
                AsyncChannel channel = mClients.get(msg.replyTo);
                switch (msg.what) {
                    case AsyncChannel.CMD_CHANNEL_FULL_CONNECTION:
                        if (channel != null) {
                            Log.d(TAG, "duplicate client connection: " + msg.sendingUid);
                            channel.replyToMessage(msg,
                                    AsyncChannel.CMD_CHANNEL_FULLY_CONNECTED,
                                    AsyncChannel.STATUS_FULL_CONNECTION_REFUSED_ALREADY_CONNECTED);
                        } else {
                            channel = new AsyncChannel();
                            mClients.put(msg.replyTo, channel);
                            channel.connected(context, this, msg.replyTo);
                            channel.replyToMessage(msg, AsyncChannel.CMD_CHANNEL_FULLY_CONNECTED,
                                    AsyncChannel.STATUS_SUCCESSFUL);
                        }
                        break;
                    case AsyncChannel.CMD_CHANNEL_DISCONNECT:
                        channel.disconnect();
                        break;

                    case AsyncChannel.CMD_CHANNEL_DISCONNECTED:
                        mClients.remove(msg.replyTo);
                        break;

                    default:
                        messageHandler.handleMessage(msg);
                        break;
                }
            }
        };
        mMessenger = new Messenger(handler);
!!!37135543.java!!!	getMessenger() : Messenger
        return mMessenger;
