class BinderUtilTest
!!!37135799.java!!!	setUp() : void
        mToken = Binder.clearCallingIdentity();
!!!37135927.java!!!	cleanUp() : void
        Binder.restoreCallingIdentity(mToken);
!!!37136055.java!!!	setUid() : void
        final int pid = Binder.getCallingPid();
        final int uid = Binder.getCallingUid();
        assertFalse(uid == FAKE_UID);

        // Verify that setUid() can be used to fake the Binder uid without affecting the pid.
        BinderUtil.setUid(FAKE_UID);
        assertEquals(pid, Binder.getCallingPid());
        assertEquals(FAKE_UID, Binder.getCallingUid());

        // Verify that setUid() can be used to restore the original Binder uid without affecting the
        // pid.
        BinderUtil.setUid(uid);
        assertEquals(pid, Binder.getCallingPid());
        assertEquals(uid, Binder.getCallingUid());
!!!37136183.java!!!	setUidAndRestoreCallingIdentity() : void
        final int pid = Binder.getCallingPid();
        final int uid = Binder.getCallingUid();
        assertFalse(uid == FAKE_UID);

        // Verify that setUid() can be used to fake the Binder uid without affecting the pid.
        BinderUtil.setUid(FAKE_UID);
        assertEquals(pid, Binder.getCallingPid());
        assertEquals(FAKE_UID, Binder.getCallingUid());

        // Verify that the setUid() calls above did not break Binder.restoreCallingIdentity().
        Binder.restoreCallingIdentity(mToken);
        assertEquals(pid, Binder.getCallingPid());
        assertEquals(uid, Binder.getCallingUid());
