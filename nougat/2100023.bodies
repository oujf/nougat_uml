class ByteArrayRingBufferTest
!!!37136311.java!!!	ctorCreatesEmptyRingBuffer() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        assertEquals(0, rb.getNumBuffers());
!!!37136439.java!!!	canAddAndRetrieveSingleElement() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        final byte[] data = {0};
        assertTrue(rb.appendBuffer(data));
        assertEquals(1, rb.getNumBuffers());
        assertSame(data, rb.getBuffer(0));
!!!37136567.java!!!	canAddAndRetrieveMultipleElements() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        final byte[] data1 = {0};
        final byte[] data2 = {1};
        assertTrue(rb.appendBuffer(data1));
        assertTrue(rb.appendBuffer(data2));
        assertEquals(2, rb.getNumBuffers());
        assertSame(data1, rb.getBuffer(0));
        assertSame(data2, rb.getBuffer(1));
!!!37136695.java!!!	canFillToCapacityWithMultipleElements() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        final byte[] data1 = {1, 2, 3, 4, 5};
        final byte[] data2 = {6, 7, 8, 9, 10};
        assertEquals(MAX_BYTES, data1.length + data2.length);
        assertTrue(rb.appendBuffer(data1));
        assertTrue(rb.appendBuffer(data2));
        assertEquals(2, rb.getNumBuffers());
!!!37136823.java!!!	canFillToCapacityWithSingleElement() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        final byte[] data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        assertEquals(MAX_BYTES, data.length);
        assertTrue(rb.appendBuffer(data));
!!!37136951.java!!!	canNotOverfillWithSingleElement() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        final byte[] data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
        assertTrue(data.length > MAX_BYTES);
        assertFalse(rb.appendBuffer(data));
        assertEquals(0, rb.getNumBuffers());
!!!37137079.java!!!	appendPrunesBufferIfNecessary() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        final byte[] data1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        assertTrue(rb.appendBuffer(data1));

        final byte[] data2 = {11};
        assertTrue(rb.appendBuffer(data2));
        assertEquals(1, rb.getNumBuffers());
        assertSame(data2, rb.getBuffer(0));
!!!37137207.java!!!	appendPrunesMultipleBuffersIfNecessary() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        final byte[] data1 = {1, 2, 3, 4, 5};
        final byte[] data2 = {6, 7, 8, 9, 10};
        assertTrue(rb.appendBuffer(data1));
        assertTrue(rb.appendBuffer(data2));

        final byte[] data3 = {11, 12, 13, 14, 15, 16};
        assertTrue(rb.appendBuffer(data3));
        assertEquals(1, rb.getNumBuffers());
        assertSame(data3, rb.getBuffer(0));
!!!37137335.java!!!	appendPrunesOnlyWhenNecessary() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        final byte[] data1 = {1, 2, 3, 4, 5};
        assertTrue(rb.appendBuffer(data1));

        final byte[] data2 = {6};
        assertTrue(rb.appendBuffer(data2));
        assertEquals(2, rb.getNumBuffers());
!!!37137463.java!!!	appendPrunesInFifoOrder() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        final byte[] data1 = {1, 2, 3, 4, 5};
        final byte[] data2 = {6, 7, 8, 9, 10};
        assertTrue(rb.appendBuffer(data1));
        assertTrue(rb.appendBuffer(data2));

        final byte[] data3 = {11};
        assertTrue(rb.appendBuffer(data3));
        assertEquals(2, rb.getNumBuffers());
        assertSame(data2, rb.getBuffer(0));
        assertSame(data3, rb.getBuffer(1));
!!!37137591.java!!!	appendPrunesEvenWhenNewDataCanNotFit() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        final byte[] data1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        assertTrue(rb.appendBuffer(data1));

        final byte[] data2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
        assertFalse(rb.appendBuffer(data2));
        assertEquals(0, rb.getNumBuffers());
!!!37137719.java!!!	resizePrunesDataAndUpdatesSizeLimitOnShrink() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        assertTrue(rb.appendBuffer(new byte[MAX_BYTES]));

        final byte newSize = 1;
        rb.resize(newSize);
        assertEquals(0, rb.getNumBuffers());
        assertFalse(rb.appendBuffer(new byte[newSize + 1]));
!!!37137847.java!!!	resizeRetainsExistingDataAndUpdatesSizeLimitOnGrow() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        assertTrue(rb.appendBuffer(new byte[MAX_BYTES]));
        rb.resize(MAX_BYTES * 2);
        assertTrue(rb.appendBuffer(new byte[MAX_BYTES]));
        assertEquals(2, rb.getNumBuffers());
!!!37137975.java!!!	shrinkingEmptyBufferSucceeds() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES * 2);
        rb.resize(MAX_BYTES);
!!!37138103.java!!!	growingEmptyBufferSucceeds() : void
        final ByteArrayRingBuffer rb = new ByteArrayRingBuffer(MAX_BYTES);
        rb.resize(MAX_BYTES * 2);
