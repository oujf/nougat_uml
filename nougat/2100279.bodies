class HalMockUtils
!!!37139127.java!!!	initHalMockLibrary() : void
        /*
         * Setting the Wi-Fi HAL handle and interface (array) to dummy
         * values. Required to fake the init checking code to think that
         * the HAL actually started.
         *
         * Note that values are not important since they are only used by
         * the real HAL - which is mocked-out in this use-case.
         */
        Field field = WifiNative.class.getDeclaredField("sWifiHalHandle");
        field.setAccessible(true);
        long currentWifiHalHandle = field.getLong(null);
        if (DBG) Log.d(TAG, "currentWifiHalHandle=" + currentWifiHalHandle);
        if (currentWifiHalHandle == 0) {
            field.setLong(null, 5);

            field = WifiNative.class.getDeclaredField("sWifiIfaceHandles");
            field.setAccessible(true);
            long[] wifiIfaceHandles = {
                    10 };
            field.set(null, wifiIfaceHandles);
        }

        initHalMock();
!!!37139255.java!!!	convertJsonToBundle(inout jsonArgs : String) : Bundle
        if (VDBG) Log.v(TAG, "convertJsonToBundle: jsonArgs=" + jsonArgs);

        Bundle bundle = new Bundle();

        JSONObject jsonObject = new JSONObject(jsonArgs);
        Iterator<String> iter = jsonObject.keys();
        while (iter.hasNext()) {
            String key = iter.next();
            JSONObject field = jsonObject.optJSONObject(key);

            String type = field.getString(TYPE_KEY);

            if (TYPE_INT.equals(type)) {
                bundle.putInt(key, field.optInt(VALUE_KEY));
            } else if (TYPE_BYTE_ARRAY.equals(type)) {
                JSONArray array = field.optJSONArray(VALUE_KEY);
                byte[] bArray = new byte[array.length()];
                for (int i = 0; i < array.length(); ++i) {
                    bArray[i] = (byte) array.getInt(i);
                }
                bundle.putByteArray(key, bArray);
            } else {
                throw new JSONException("Unexpected TYPE read from mock HAL -- '" + type + "'");
            }
        }

        if (DBG) Log.d(TAG, "convertJsonToBundle: returning bundle=" + bundle);
        return bundle;
!!!37139383.java!!!	convertBundleToJson(inout bundle : Bundle) : JSONObject
        if (VDBG) Log.v(TAG, "convertBundleToJson: bundle=" + bundle.toString());

        JSONObject json = new JSONObject();
        for (String key : bundle.keySet()) {
            Object value = bundle.get(key);
            JSONObject child = new JSONObject();
            if (value instanceof Integer) {
                child.put(TYPE_KEY, TYPE_INT);
                child.put(VALUE_KEY, ((Integer) value).intValue());
            } else if (value instanceof byte[]) {
                byte[] array = (byte[]) value;
                JSONArray jsonArray = new JSONArray();
                for (int i = 0; i < array.length; ++i) {
                    jsonArray.put(array[i]);
                }
                child.put(TYPE_KEY, TYPE_BYTE_ARRAY);
                child.put(VALUE_KEY, jsonArray);
            } else {
                throw new JSONException("Unexpected type of JSON tree node (not an Integer "
                        + "or byte[]): " + value);
            }
            json.put(key, child);
        }

        if (DBG) Log.d(TAG, "convertBundleToJson: returning JSONObject=" + json);
        return json;
