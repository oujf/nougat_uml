class MockKeyStore
!!!37141815.java!!!	MockKeyStore()
        mStore = new SparseArray<HashMap<String, KeyBlob>>();
!!!37141943.java!!!	createMock() : KeyStore
        KeyStore mock = mock(KeyStore.class);
        when(mock.state()).thenReturn(KeyStore.State.UNLOCKED);

        when(mock.put(anyString(), Matchers.any(byte[].class), anyInt(), anyInt()))
                .thenAnswer(new Answer<Boolean>() {

                    @Override
                    public Boolean answer(InvocationOnMock invocation) throws Throwable {
                        Object[] args = invocation.getArguments();
                        return put((String) args[0], (byte[]) args[1], (Integer) args[2],
                                (Integer) args[3]);
                    }
                });

        when(mock.importKey(anyString(), Matchers.any(byte[].class), anyInt(), anyInt()))
                .thenAnswer(new Answer<Boolean>() {

                    @Override
                    public Boolean answer(InvocationOnMock invocation) throws Throwable {
                        Object[] args = invocation.getArguments();
                        return importKey((String) args[0], (byte[]) args[1], (Integer) args[2],
                                (Integer) args[3]);
                    }
                });

        when(mock.delete(anyString(), anyInt())).thenAnswer(new Answer<Boolean>() {

            @Override
            public Boolean answer(InvocationOnMock invocation) throws Throwable {
                Object[] args = invocation.getArguments();
                return delete((String) args[0], (Integer) args[1]);
            }
        });

        when(mock.contains(anyString(), anyInt())).thenAnswer(new Answer<Boolean>() {

            @Override
            public Boolean answer(InvocationOnMock invocation) throws Throwable {
                Object[] args = invocation.getArguments();
                return contains((String) args[0], (Integer) args[1]);
            }
        });

        when(mock.duplicate(anyString(), anyInt(), anyString(), anyInt()))
                .thenAnswer(new Answer<Boolean>() {
                    @Override
                    public Boolean answer(InvocationOnMock invocation) throws Throwable {
                        Object[] args = invocation.getArguments();
                        return duplicate((String) args[0], (Integer) args[1], (String) args[2],
                                (Integer) args[3]);
                    }
                });
        return mock;
!!!37142071.java!!!	access(in uid : int, inout key : String, inout createIfNotExist : boolean) : MockKeyStore::KeyBlob
        if (mStore.get(uid) == null) {
            mStore.put(uid, new HashMap<String, KeyBlob>());
        }
        HashMap<String, KeyBlob> map = mStore.get(uid);
        if (map.containsKey(key)) {
            return map.get(key);
        } else {
            if (createIfNotExist) {
                KeyBlob blob = new KeyBlob();
                map.put(key, blob);
                return blob;
            } else {
                return null;
            }
        }
!!!37142199.java!!!	getKeyBlob(in uid : int, inout key : String) : MockKeyStore::KeyBlob
        return access(uid, key, false);
!!!37142327.java!!!	put(inout key : String, inout value : byte, in uid : int, in flags : int) : boolean
        access(uid, key, true).update(value,  flags);
        return true;
!!!37142455.java!!!	importKey(inout keyName : String, inout key : byte, in uid : int, in flags : int) : boolean
        return put(keyName, key, uid, flags);
!!!37142583.java!!!	delete(inout key : String, in uid : int) : boolean
        if (mStore.get(uid) != null) {
            mStore.get(uid).remove(key);
        }
        return true;
!!!37142711.java!!!	contains(inout key : String, in uid : int) : boolean
        return access(uid, key, false) != null;
!!!37142839.java!!!	duplicate(inout srcKey : String, in srcUid : int, inout destKey : String, in destUid : int) : boolean
        for (int i = 0; i < mStore.size(); i++) {
            int key = mStore.keyAt(i);
            // Cannot copy to itself
            if (srcKey.equals(destKey) && key == destUid) {
                continue;
            }
            if (srcUid == -1 || srcUid == key) {
                HashMap<String, KeyBlob> map = mStore.get(key);
                if (map.containsKey(srcKey)) {
                    KeyBlob blob = map.get(srcKey);
                    access(destUid, destKey, true).update(blob.blob, blob.flag);
                    break;
                }
            }
        }
        return true;
!!!37142967.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
        sb.append("KeyStore {");
        for (int i = 0; i < mStore.size(); i++) {
            int uid = mStore.keyAt(i);
            for (String keyName : mStore.get(uid).keySet()) {
                sb.append(String.format("%d:%s, ", uid, keyName));
            }
        }
        sb.append("}");
        return sb.toString();
