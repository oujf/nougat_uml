class PasspointManagementObjectManagerTest
!!!37147831.java!!!	createFileFromResource(inout configFile : String) : File
        InputStream in = getClass().getClassLoader().getResourceAsStream(configFile);
        File file = tempFolder.newFile(configFile.split("/")[1]);

        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        FileOutputStream out = new FileOutputStream(file);

        String line;

        while ((line = reader.readLine()) != null) {
            out.write(line.getBytes(StandardCharsets.UTF_8));
        }

        out.flush();
        out.close();
        return file;
!!!37147959.java!!!	addMoFromWifiConfig(inout moMgr : PasspointManagementObjectManager) : void
        HashMap<String, Long> ssidMap = new HashMap<>();
        String fqdn = "tunisia.org";
        HashSet<Long> roamingConsortiums = new HashSet<Long>();
        HashSet<String> otherHomePartners = new HashSet<String>();
        Set<Long> matchAnyOIs = new HashSet<Long>();
        List<Long> matchAllOIs = new ArrayList<Long>();
        String friendlyName = "Tunisian Passpoint Provider";
        String iconUrl = "http://www.tunisia.org/icons/base_icon.png";

        WifiEnterpriseConfig enterpriseConfig = new WifiEnterpriseConfig();
        enterpriseConfig.setEapMethod(WifiEnterpriseConfig.Eap.TTLS);
        enterpriseConfig.setPhase2Method(WifiEnterpriseConfig.Phase2.PAP);
        enterpriseConfig.setIdentity("testIdentity1");
        enterpriseConfig.setPassword("AnDrO1D");

        KeyStore keyStore = mock(KeyStore.class);
        Credential credential = new Credential(enterpriseConfig, keyStore, false);

        HomeSP newHomeSP = new HomeSP(Collections.<String, Long>emptyMap(), fqdn,
                roamingConsortiums, Collections.<String>emptySet(),
                Collections.<Long>emptySet(), Collections.<Long>emptyList(),
                friendlyName, null, credential);

        moMgr.addSP(newHomeSP);
!!!37148087.java!!!	addMoFromXml(inout moMgr : PasspointManagementObjectManager) : void
        InputStream in = getClass().getClassLoader().getResourceAsStream(R2_TTLS_XML_FILE);
        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        StringBuilder builder = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            builder.append(line).append("\n");
        }

        String xml = builder.toString();
        moMgr.addSP(xml);
!!!37148215.java!!!	loadR1Configs() : void
        File file = createFileFromResource(R1_CONFIG_FILE);
        PasspointManagementObjectManager moMgr = new PasspointManagementObjectManager(file, true);
        List<HomeSP> homeSPs = moMgr.loadAllSPs();
        assertEquals(2, homeSPs.size());

        /* TODO: Verify more attributes */
        HomeSP homeSP = moMgr.getHomeSP("twcwifi.com");
        assertNotNull(homeSP);
        assertEquals("TWC-WiFi", homeSP.getFriendlyName());
        assertEquals("tushar4", homeSP.getCredential().getUserName());

        homeSP = moMgr.getHomeSP("wi-fi.org");
        assertNotNull(homeSP);
        assertEquals("Wi-Fi Alliance", homeSP.getFriendlyName());
        assertEquals("sta006", homeSP.getCredential().getUserName());
!!!37148343.java!!!	loadR2Configs() : void
        File file = createFileFromResource(R2_CONFIG_FILE);
        PasspointManagementObjectManager moMgr = new PasspointManagementObjectManager(file, true);
        List<HomeSP> homeSPs = moMgr.loadAllSPs();
        assertEquals(2, homeSPs.size());

        /* TODO: Verify more attributes */
        HomeSP homeSP = moMgr.getHomeSP("twcwifi.com");
        assertNotNull(homeSP);
        assertEquals("TWC-WiFi", homeSP.getFriendlyName());
        assertEquals("tushar4", homeSP.getCredential().getUserName());

        homeSP = moMgr.getHomeSP("wi-fi.org");
        assertNotNull(homeSP);
        assertEquals("Wi-Fi Alliance", homeSP.getFriendlyName());
        assertEquals("sta015", homeSP.getCredential().getUserName());
!!!37148471.java!!!	addSP() : void
        File file = tempFolder.newFile("PerProviderSubscription.conf");
        PasspointManagementObjectManager moMgr = new PasspointManagementObjectManager(file, true);
        List<HomeSP> homeSPs = moMgr.loadAllSPs();
        assertEquals(0, homeSPs.size());

        addMoFromWifiConfig(moMgr);
        addMoFromXml(moMgr);

        PasspointManagementObjectManager moMgr2 = new PasspointManagementObjectManager(file, true);
        homeSPs = moMgr2.loadAllSPs();
        assertEquals(2, homeSPs.size());

        /* TODO: Verify more attributes */
        HomeSP homeSP = moMgr2.getHomeSP("rk-ttls.org");
        assertNotNull(homeSP);
        assertEquals("RK TTLS", homeSP.getFriendlyName());
        assertEquals("sta020", homeSP.getCredential().getUserName());

        homeSP = moMgr.getHomeSP("tunisia.org");
        assertNotNull(homeSP);
        assertEquals("Tunisian Passpoint Provider", homeSP.getFriendlyName());
        assertEquals("testIdentity1", homeSP.getCredential().getUserName());
!!!37148599.java!!!	checkXml() : void
        InputStream in = getClass().getClassLoader().getResourceAsStream(R2_TTLS_XML_FILE);
        BufferedReader reader = new BufferedReader(new InputStreamReader(in));
        StringBuilder builder = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            builder.append(line).append("\n");
        }

        String xmlIn = builder.toString();

        try {
            // Parse the file content:
            OMAParser parser = new OMAParser();
            MOTree moTree = parser.parse(xmlIn, "");
            XMLNode rootIn = parser.getRoot();

            // Serialize it back out:
            String xmlOut = moTree.toXml();
            parser = new OMAParser();
            // And parse it again:
            parser.parse(xmlOut, "");
            XMLNode rootOut = parser.getRoot();

            // Compare the two roots:
            assertTrue("Checking serialized XML", rootIn.equals(rootOut));
        } catch (SAXException se) {
            throw new IOException(se);
        }
!!!37148727.java!!!	modifySP() : void
        File file = createFileFromResource(R2_CONFIG_FILE);
        PasspointManagementObjectManager moMgr = new PasspointManagementObjectManager(file, true);
        List<HomeSP> homeSPs = moMgr.loadAllSPs();
        assertEquals(2, homeSPs.size());

        /* verify that wi-fi.org has update identifier of 1 */
        HomeSP homeSP = moMgr.getHomeSP("wi-fi.org");
        assertNotNull(homeSP);
        assertEquals("Wi-Fi Alliance", homeSP.getFriendlyName());
        assertEquals("sta015", homeSP.getCredential().getUserName());
        assertEquals(1, homeSP.getUpdateIdentifier());

        /* PasspointManagementObjectDefinition to change update identifier */
        String urn = "wfa:mo:hotspot2dot0-perprovidersubscription:1.0";
        String baseUri = "./Wi-Fi/wi-fi.org/PerProviderSubscription/UpdateIdentifier";
        String xmlTree =
                  "<MgmtTree>\n"
                + "     <VerDTD>1.2</VerDTD>\n"
                + "     <Node>\n"
                + "         <NodeName>UpdateIdentifier</NodeName>\n"
                + "         <Value>9</Value>\n"
                + "     </Node>\n"
                + "</MgmtTree>";

        PasspointManagementObjectDefinition moDef =
                new PasspointManagementObjectDefinition(baseUri, urn, xmlTree);
        List<PasspointManagementObjectDefinition> moDefs =
                new ArrayList<PasspointManagementObjectDefinition>();
        moDefs.add(moDef);
        moMgr.modifySP("wi-fi.org", moDefs);

        /* reload all the SPs again */
        moMgr.loadAllSPs();

        homeSP = moMgr.getHomeSP("wi-fi.org");
        assertEquals("Wi-Fi Alliance", homeSP.getFriendlyName());
        assertEquals("sta015", homeSP.getCredential().getUserName());
        assertEquals(9, homeSP.getUpdateIdentifier());
!!!37148855.java!!!	removeSP() : void
        File file = createFileFromResource(R2_CONFIG_FILE);
        PasspointManagementObjectManager moMgr = new PasspointManagementObjectManager(file, true);
        List<HomeSP> homeSPs = moMgr.loadAllSPs();
        assertEquals(2, homeSPs.size());

        moMgr.removeSP("wi-fi.org");

        homeSPs = moMgr.loadAllSPs();
        assertEquals(null, moMgr.getHomeSP("wi-fi.org"));
