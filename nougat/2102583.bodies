class RttServiceTest
!!!37149495.java!!!	setUp() : void
        MockitoAnnotations.initMocks(this);
        TestUtil.installWlanWifiNative(mWifiNative);
        mLooper = new MockLooper();
        mRttServiceImpl = new RttService.RttServiceImpl(mContext, mLooper.getLooper());
        mRttServiceImpl.startService();
!!!37149623.java!!!	cleanup() : void
        validateMockitoUsage();
!!!37149751.java!!!	startWifi() : void
        verify(mContext).registerReceiver(mBroadcastReceiverCaptor.capture(),
                any(IntentFilter.class));
        TestUtil.sendWifiScanAvailable(mBroadcastReceiverCaptor.getValue(),
                mContext, WifiManager.WIFI_STATE_ENABLED);
!!!37149879.java!!!	connectChannel(inout handler : Handler) : BidirectionalAsyncChannel
        BidirectionalAsyncChannel channel = new BidirectionalAsyncChannel();
        channel.connect(mLooper.getLooper(), mRttServiceImpl.getMessenger(),
                handler);
        mLooper.dispatchAll();
        channel.assertConnected();
        return channel;
!!!37150007.java!!!	sendRangingRequestFailed(inout channel : BidirectionalAsyncChannel, inout handler : Handler, in clientKey : int, inout params : RttManager::ParcelableRttParams) : void
        Message message = sendRangingRequest(channel, handler, clientKey, params);
        assertEquals("ranging request did not fail",
                RttManager.CMD_OP_FAILED, message.what);
        verifyNoMoreInteractions(mWifiNative);
!!!37150135.java!!!	sendRangingRequest(inout channel : BidirectionalAsyncChannel, inout handler : Handler, in clientKey : int, inout params : RttManager::ParcelableRttParams) : Message
        Message message = new Message();
        message.what = RttManager.CMD_OP_START_RANGING;
        message.arg2 = clientKey;
        message.obj = params;
        channel.sendMessage(message);
        mLooper.dispatchAll();
        ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
        verify(handler, atLeastOnce()).handleMessage(messageCaptor.capture());
        return messageCaptor.getValue();
!!!37150263.java!!!	sendEnableResponderSucceed(inout channel : BidirectionalAsyncChannel, inout handler : Handler, in clientKey : int) : void
        Message message = sendEnableResponder(channel, handler, clientKey,
                createResponderConfig());
        verify(mWifiNative).enableRttResponder(anyInt());
        assertEquals("reponse status is not success",
                RttManager.CMD_OP_ENALBE_RESPONDER_SUCCEEDED, message.what);
        String actualMac = ((ResponderConfig) message.obj).macAddress;
        assertEquals("mac address mismatch", MAC, actualMac);
!!!37150391.java!!!	sendEnableResponderFailed(inout channel : BidirectionalAsyncChannel, inout handler : Handler, in clientKey : int, in reason : int) : void
        Message message = sendEnableResponder(channel, handler, clientKey, null);
        assertEquals("reponse status is not failure",
                RttManager.CMD_OP_ENALBE_RESPONDER_FAILED, message.what);
        assertEquals("failure reason is not " + reason,
                reason, message.arg1);
!!!37150519.java!!!	sendEnableResponder(inout channel : BidirectionalAsyncChannel, inout handler : Handler, in clientKey : int, inout config : RttManager::ResponderConfig) : Message
        when(mWifiNative.enableRttResponder(anyInt())).thenReturn(config);
        when(mWifiNative.getMacAddress()).thenReturn(MAC);
        Message message = new Message();
        message.what = RttManager.CMD_OP_ENABLE_RESPONDER;
        message.arg2 = clientKey;
        channel.sendMessage(message);
        mLooper.dispatchAll();
        ArgumentCaptor<Message> messageCaptor = ArgumentCaptor.forClass(Message.class);
        verify(handler, atLeastOnce()).handleMessage(messageCaptor.capture());
        return messageCaptor.getValue();
!!!37150647.java!!!	sendDisableResponder(inout channel : BidirectionalAsyncChannel, in key : int, inout success : boolean) : void
        when(mWifiNative.disableRttResponder()).thenReturn(success);
        Message message = new Message();
        message.what = RttManager.CMD_OP_DISABLE_RESPONDER;
        message.arg2 = key;
        channel.sendMessage(message);
        mLooper.dispatchAll();
!!!37150775.java!!!	createResponderConfig() : RttManager::ResponderConfig
        ResponderConfig config = new ResponderConfig();
        config.macAddress = MAC;
        return config;
!!!37150903.java!!!	testEnableResponderSuccess() : void
        startWifi();
        Handler handler = mock(Handler.class);
        BidirectionalAsyncChannel channel = connectChannel(handler);
        // Successfully enabled responder.
        sendEnableResponderSucceed(channel, handler, CLIENT_KEY1);
!!!37151031.java!!!	testEnableResponderSecondTime() : void
        startWifi();
        Handler handler = mock(Handler.class);
        BidirectionalAsyncChannel channel = connectChannel(handler);
        sendEnableResponderSucceed(channel, handler, CLIENT_KEY1);
        // Calling enabling responder with the same key should succeed.
        sendEnableResponderSucceed(channel, handler, CLIENT_KEY1);
!!!37151159.java!!!	testEnableResponderMultiClient() : void
        startWifi();
        Handler handler = mock(Handler.class);
        BidirectionalAsyncChannel channel = connectChannel(handler);
        sendEnableResponderSucceed(channel, handler, CLIENT_KEY1);
        sendEnableResponderSucceed(channel, handler, CLIENT_KEY2);
        // Native method should be called only once when multiple clients enabled responder.
        verify(mWifiNative, times(1)).enableRttResponder(anyInt());
!!!37151287.java!!!	testDisableResponderSuccess() : void
        startWifi();
        Handler handler = mock(Handler.class);
        BidirectionalAsyncChannel channel = connectChannel(handler);
        sendEnableResponderSucceed(channel, handler, CLIENT_KEY1);
        // Disable after successfully enabling.
        sendDisableResponder(channel, CLIENT_KEY1, false);
        verify(mWifiNative).disableRttResponder();
!!!37151415.java!!!	testEnableResponderFailure() : void
        startWifi();
        Handler handler = mock(Handler.class);
        when(mWifiNative.enableRttResponder(anyInt())).thenReturn(null);
        BidirectionalAsyncChannel channel = connectChannel(handler);
        // Disable failed.
        sendEnableResponderFailed(channel, handler, CLIENT_KEY1, RttManager.REASON_UNSPECIFIED);
!!!37151543.java!!!	testDisableResponderNotStarted() : void
        startWifi();
        Handler handler = mock(Handler.class);
        BidirectionalAsyncChannel channel = connectChannel(handler);
        // Disable without enabling should fail.
        sendDisableResponder(channel, CLIENT_KEY1, false);
        // Native disable method shouldn't be called.
        verifyNoMoreInteractions(mWifiNative);
!!!37151671.java!!!	testDisableResponderMultiClient() : void
        startWifi();
        Handler handler = mock(Handler.class);
        BidirectionalAsyncChannel channel = connectChannel(handler);
        sendEnableResponderSucceed(channel, handler, CLIENT_KEY1);
        sendEnableResponderSucceed(channel, handler, CLIENT_KEY2);
        // Two clients enabled, one client disabled.
        sendDisableResponder(channel, CLIENT_KEY1, true);
        verify(mWifiNative, times(1)).getMacAddress();
        verifyNoMoreInteractions(mWifiNative);
!!!37151799.java!!!	testEnableResponderFailedWifiDisabled() : void
        Handler handler = mock(Handler.class);
        BidirectionalAsyncChannel channel = connectChannel(handler);
        // Wifi is disabled as startWifi() is not invoked.
        sendEnableResponderFailed(channel, handler, CLIENT_KEY1, RttManager.REASON_NOT_AVAILABLE);
        verifyNoMoreInteractions(mWifiNative);
!!!37151927.java!!!	testInitiatorEmptyParams() : void
        startWifi();
        Handler handler = mock(Handler.class);
        BidirectionalAsyncChannel channel = connectChannel(handler);
        sendRangingRequestFailed(channel, handler, CLIENT_KEY1, new ParcelableRttParams(null));
