class ScanResults
!!!37152055.java!!!	ScanResults(inout scanDetails : ArrayList<ScanDetail>, inout scanData : WifiScanner::ScanData, inout scanResults : ScanResult)
        mScanDetails.addAll(scanDetails);
        mScanData = scanData;
        mRawScanData = scanData;
        mScanResults = scanResults;
!!!37152183.java!!!	merge(inout  : ScanResults...others) : ScanResults
        ArrayList<ScanDetail> scanDetails = new ArrayList<>();
        ArrayList<ScanResult> scanDataResults = new ArrayList<>();
        ArrayList<ScanResult> rawScanResults = new ArrayList<>();
        for (ScanResults other : others) {
            scanDetails.addAll(other.getScanDetailArrayList());
            scanDataResults.addAll(Arrays.asList(other.getScanData().getResults()));
            rawScanResults.addAll(Arrays.asList(other.getRawScanResults()));
        }
        Collections.sort(scanDataResults, SCAN_RESULT_RSSI_COMPARATOR);
        int id = others[0].getScanData().getId();
        return new ScanResults(scanDetails, new ScanData(id, 0, scanDataResults
                        .toArray(new ScanResult[scanDataResults.size()])),
                rawScanResults.toArray(new ScanResult[rawScanResults.size()]));
!!!37152311.java!!!	generateBssid(inout r : Random) : String
        return String.format("%02X:%02X:%02X:%02X:%02X:%02X",
                r.nextInt(256), r.nextInt(256), r.nextInt(256),
                r.nextInt(256), r.nextInt(256), r.nextInt(256));
!!!37152439.java!!!	generateSsidIe(inout ssid : String) : ScanResult::InformationElement
        ScanResult.InformationElement ie = new ScanResult.InformationElement();
        ie.id = ScanResult.InformationElement.EID_SSID;
        ie.bytes = ssid.getBytes(Charset.forName("UTF-8"));
        return ie;
!!!37152567.java!!!	generateNativeResults(inout needIE : boolean, in seed : int, inout  : int...freqs) : ScanDetail
        ScanDetail[] results = new ScanDetail[freqs.length];
        // Seed the results based on the provided seed as well as the test method name
        // This provides more varied scan results between individual tests that are very similar.
        Random r = new Random(seed + WifiTestUtil.getTestMethod().hashCode());
        for (int i = 0; i < freqs.length; ++i) {
            int freq = freqs[i];
            String ssid = new BigInteger(128, r).toString(36);
            String bssid = generateBssid(r);
            int rssi = r.nextInt(40) - 99; // -99 to -60
            ScanResult.InformationElement[] ie;
            if (needIE) {
                ie = new ScanResult.InformationElement[1];
                ie[0] = generateSsidIe(ssid);
            } else {
                ie = new ScanResult.InformationElement[0];
            }
            List<String> anqpLines = new ArrayList<>();
            NetworkDetail nd = new NetworkDetail(bssid, ie, anqpLines, freq);
            ScanDetail detail = new ScanDetail(nd, WifiSsid.createFromAsciiEncoded(ssid),
                    bssid, "", rssi, freq,
                    Long.MAX_VALUE, /* needed so that scan results aren't rejected because
                                        they are older than scan start */
                    ie, anqpLines);
            results[i] = detail;
        }
        return results;
!!!37152695.java!!!	generateNativeResults(in seed : int, inout  : int...freqs) : ScanDetail
        return generateNativeResults(true, seed, freqs);
!!!37152823.java!!!	create(in id : int, inout  : int...freqs) : ScanResults
        return new ScanResults(id, -1, generateNativeResults(id, freqs));
!!!37152951.java!!!	createWithNoIE(in id : int, inout  : int...freqs) : ScanResults
        return new ScanResults(id, -1, generateNativeResults(false, id, freqs));
!!!37153079.java!!!	create(in id : int, inout  : ScanDetail...nativeResults) : ScanResults
        return new ScanResults(id, -1, nativeResults);
!!!37153207.java!!!	createOverflowing(in id : int, in maxResults : int, inout  : ScanDetail...nativeResults) : ScanResults
        return new ScanResults(id, maxResults, nativeResults);
!!!37153335.java!!!	ScanResults(in id : int, in maxResults : int, inout  : ScanDetail...nativeResults)
        mScanResults = new ScanResult[nativeResults.length];
        for (int i = 0; i < nativeResults.length; ++i) {
            mScanDetails.add(nativeResults[i]);
            mScanResults[i] = nativeResults[i].getScanResult();
        }
        ScanResult[] sortedScanResults = Arrays.copyOf(mScanResults, mScanResults.length);
        Arrays.sort(sortedScanResults, SCAN_RESULT_RSSI_COMPARATOR);
        mRawScanData = new ScanData(id, 0, sortedScanResults);
        if (maxResults == -1) {
            mScanData = mRawScanData;
        } else {
            ScanResult[] reducedScanResults = Arrays.copyOf(sortedScanResults,
                    Math.min(sortedScanResults.length, maxResults));
            mScanData = new ScanData(id, 0, reducedScanResults);
        }
!!!37153463.java!!!	getScanDetailArrayList() : ScanDetail
        return mScanDetails;
!!!37153591.java!!!	getScanData() : WifiScanner::ScanData
        return mScanData;
!!!37153719.java!!!	getRawScanResults() : ScanResult
        return mScanResults;
!!!37153847.java!!!	getRawScanData() : WifiScanner::ScanData
        return mRawScanData;
