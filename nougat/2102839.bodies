class ScanTestUtil
!!!37153975.java!!!	setupMockChannels(inout wifiNative : WifiNative, inout channels24 : int, inout channels5 : int, inout channelsDfs : int) : void
        when(wifiNative.getChannelsForBand(WifiScanner.WIFI_BAND_24_GHZ))
                .thenReturn(channels24);
        when(wifiNative.getChannelsForBand(WifiScanner.WIFI_BAND_5_GHZ))
                .thenReturn(channels5);
        when(wifiNative.getChannelsForBand(WifiScanner.WIFI_BAND_5_GHZ_DFS_ONLY))
                .thenReturn(channelsDfs);
!!!37154103.java!!!	createRequest(inout channels : WifiScanner::ChannelSpec, in period : int, in batch : int, in bssidsPerScan : int, in reportEvents : int) : WifiScanner::ScanSettings
        WifiScanner.ScanSettings request = new WifiScanner.ScanSettings();
        request.band = WifiScanner.WIFI_BAND_UNSPECIFIED;
        request.channels = channels;
        request.periodInMs = period;
        request.numBssidsPerScan = bssidsPerScan;
        request.maxScansToCache = batch;
        request.reportEvents = reportEvents;
        return request;
!!!37154231.java!!!	createRequest(in band : int, in period : int, in batch : int, in bssidsPerScan : int, in reportEvents : int) : WifiScanner::ScanSettings
        return createRequest(band, period, 0, 0, batch, bssidsPerScan, reportEvents);
!!!37154359.java!!!	createRequest(in band : int, in period : int, in maxPeriod : int, in stepCount : int, in batch : int, in bssidsPerScan : int, in reportEvents : int) : WifiScanner::ScanSettings
        WifiScanner.ScanSettings request = new WifiScanner.ScanSettings();
        request.band = band;
        request.channels = null;
        request.periodInMs = period;
        request.maxPeriodInMs = maxPeriod;
        request.stepCount = stepCount;
        request.numBssidsPerScan = bssidsPerScan;
        request.maxScansToCache = batch;
        request.reportEvents = reportEvents;
        return request;
!!!37155895.java!!!	computeSingleScanNativeSettings(inout requestSettings : WifiScanner::ScanSettings) : WifiNative::ScanSettings
        int reportEvents = requestSettings.reportEvents | WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN;
        NativeScanSettingsBuilder builder = new NativeScanSettingsBuilder()
                .withBasePeriod(0)
                .withMaxApPerScan(0)
                .withMaxPercentToCache(0)
                .withMaxScansToCache(0);
        if (requestSettings.band == WifiScanner.WIFI_BAND_UNSPECIFIED) {
            builder.addBucketWithChannels(0, reportEvents, requestSettings.channels);
        } else {
            builder.addBucketWithBand(0, reportEvents, requestSettings.band);
        }

        return builder.build();
!!!37156023.java!!!	createSingleScanNativeSettingsForChannels(in reportEvents : int, inout  : WifiScanner.ChannelSpec...channels) : WifiNative::ScanSettings
        int actualReportEvents = reportEvents | WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN;
        return new NativeScanSettingsBuilder()
                .withBasePeriod(0)
                .withMaxApPerScan(0)
                .withMaxPercentToCache(0)
                .withMaxScansToCache(0)
                .addBucketWithChannels(0, actualReportEvents, channels)
                .build();
!!!37156151.java!!!	createFreqSet(inout  : int...elements) : Set<Integer>
        Set<Integer> set = new HashSet<>();
        for (int e : elements) {
            set.add(e);
        }
        return set;
!!!37156279.java!!!	createScanResult(in freq : int) : ScanResult
        return new ScanResult(WifiSsid.createFromAsciiEncoded("AN SSID"), "00:00:00:00:00:00", 0L,
                -1, null, "", 0, freq, 0);
!!!37156407.java!!!	createScanData(inout freqs : int, in bucketsScanned : int) : WifiScanner::ScanData
        ScanResult[] results = new ScanResult[freqs.length];
        for (int i = 0; i < freqs.length; ++i) {
            results[i] = createScanResult(freqs[i]);
        }
        return new ScanData(0, 0, bucketsScanned, results);
!!!37156535.java!!!	createScanDatas(inout freqs : int, inout bucketsScanned : int) : WifiScanner::ScanData
        assumeTrue(freqs.length == bucketsScanned.length);
        ScanData[] data = new ScanData[freqs.length];
        for (int i = 0; i < freqs.length; ++i) {
            data[i] = createScanData(freqs[i], bucketsScanned[i]);
        }
        return data;
!!!37156663.java!!!	createScanDatas(inout freqs : int) : WifiScanner::ScanData
        return createScanDatas(freqs, new int[freqs.length] /* defaults all 0 */);
!!!37156791.java!!!	assertScanResultsEquals(inout prefix : String, inout expected : ScanResult, inout actual : ScanResult) : void
        assertNotNull(prefix + "expected ScanResults was null", expected);
        assertNotNull(prefix + "actual ScanResults was null", actual);
        assertEquals(prefix + "results.length", expected.length, actual.length);
        for (int j = 0; j < expected.length; ++j) {
            ScanResult expectedResult = expected[j];
            ScanResult actualResult = actual[j];
            assertEquals(prefix + "results[" + j + "].SSID",
                    expectedResult.SSID, actualResult.SSID);
            assertEquals(prefix + "results[" + j + "].wifiSsid",
                    expectedResult.wifiSsid.toString(), actualResult.wifiSsid.toString());
            assertEquals(prefix + "results[" + j + "].BSSID",
                    expectedResult.BSSID, actualResult.BSSID);
            assertEquals(prefix + "results[" + j + "].capabilities",
                    expectedResult.capabilities, actualResult.capabilities);
            assertEquals(prefix + "results[" + j + "].level",
                    expectedResult.level, actualResult.level);
            assertEquals(prefix + "results[" + j + "].frequency",
                    expectedResult.frequency, actualResult.frequency);
            assertEquals(prefix + "results[" + j + "].timestamp",
                    expectedResult.timestamp, actualResult.timestamp);
            assertEquals(prefix + "results[" + j + "].seen",
                    expectedResult.seen, actualResult.seen);
        }
!!!37156919.java!!!	assertScanResultsEquals(inout expected : ScanResult, inout actual : ScanResult) : void
        assertScanResultsEquals("", expected, actual);
!!!37157047.java!!!	assertScanDataEquals(inout prefix : String, inout expected : WifiScanner::ScanData, inout actual : WifiScanner::ScanData) : void
        assertNotNull(prefix + "expected ScanData was null", expected);
        assertNotNull(prefix + "actual ScanData was null", actual);
        assertEquals(prefix + "id", expected.getId(), actual.getId());
        assertEquals(prefix + "flags", expected.getFlags(), actual.getFlags());
        assertScanResultsEquals(prefix, expected.getResults(), actual.getResults());
!!!37157175.java!!!	assertScanDataEquals(inout expected : WifiScanner::ScanData, inout actual : WifiScanner::ScanData) : void
        assertScanDataEquals("", expected, actual);
!!!37157303.java!!!	assertScanDatasEquals(inout prefix : String, inout expected : WifiScanner::ScanData, inout actual : WifiScanner::ScanData) : void
        assertNotNull("expected " + prefix + "ScanData[] was null", expected);
        assertNotNull("actaul " + prefix + "ScanData[] was null", actual);
        assertEquals(prefix + "ScanData.length", expected.length, actual.length);
        for (int i = 0; i < expected.length; ++i) {
            assertScanDataEquals(prefix + "ScanData[" + i + "].", expected[i], actual[i]);
        }
!!!37157431.java!!!	assertScanDatasEquals(inout expected : WifiScanner::ScanData, inout actual : WifiScanner::ScanData) : void
        assertScanDatasEquals("", expected, actual);
!!!37157559.java!!!	channelsToSpec(inout  : int...channels) : WifiScanner::ChannelSpec
        WifiScanner.ChannelSpec[] channelSpecs = new WifiScanner.ChannelSpec[channels.length];
        for (int i = 0; i < channels.length; ++i) {
            channelSpecs[i] = new WifiScanner.ChannelSpec(channels[i]);
        }
        return channelSpecs;
!!!37157687.java!!!	assertNativeScanSettingsEquals(inout expected : WifiNative::ScanSettings, inout actual : WifiNative::ScanSettings) : void
        assertEquals("bssids per scan", expected.max_ap_per_scan, actual.max_ap_per_scan);
        assertEquals("scans to cache", expected.report_threshold_num_scans,
                actual.report_threshold_num_scans);
        assertEquals("percent to cache", expected.report_threshold_percent,
                actual.report_threshold_percent);
        assertEquals("base period", expected.base_period_ms, actual.base_period_ms);

        assertEquals("number of buckets", expected.num_buckets, actual.num_buckets);
        assertNotNull("buckets was null", actual.buckets);
        for (int i = 0; i < expected.buckets.length; ++i) {
            assertNotNull("buckets[" + i + "] was null", actual.buckets[i]);
            assertEquals("buckets[" + i + "].period",
                    expected.buckets[i].period_ms, actual.buckets[i].period_ms);
            assertEquals("buckets[" + i + "].reportEvents",
                    expected.buckets[i].report_events, actual.buckets[i].report_events);

            assertEquals("buckets[" + i + "].band",
                    expected.buckets[i].band, actual.buckets[i].band);
            if (expected.buckets[i].band == WifiScanner.WIFI_BAND_UNSPECIFIED) {
                Set<Integer> expectedChannels = new HashSet<>();
                for (WifiNative.ChannelSettings channel : expected.buckets[i].channels) {
                    expectedChannels.add(channel.frequency);
                }
                Set<Integer> actualChannels = new HashSet<>();
                for (WifiNative.ChannelSettings channel : actual.buckets[i].channels) {
                    actualChannels.add(channel.frequency);
                }
                assertEquals("channels", expectedChannels, actualChannels);
            } else {
                // since num_channels and channels are ignored when band is not
                // WifiScanner.WIFI_BAND_UNSPECIFIED just assert that there are no channels
                // the band equality was already checked above
                assertEquals("buckets[" + i + "].num_channels not 0", 0,
                        actual.buckets[i].num_channels);
                assertTrue("buckets[" + i + "].channels not null or empty",
                        actual.buckets[i].channels == null
                        || actual.buckets[i].channels.length == 0);
            }
        }
!!!37157815.java!!!	assertNativePnoSettingsEquals(inout expected : WifiNative::PnoSettings, inout actual : WifiNative::PnoSettings) : void
        assertNotNull("expected was null", expected);
        assertNotNull("actaul was null", actual);
        assertEquals("min5GHzRssi", expected.min5GHzRssi, actual.min5GHzRssi);
        assertEquals("min24GHzRssi", expected.min24GHzRssi, actual.min24GHzRssi);
        assertEquals("initialScoreMax", expected.initialScoreMax, actual.initialScoreMax);
        assertEquals("currentConnectionBonus", expected.currentConnectionBonus,
                actual.currentConnectionBonus);
        assertEquals("sameNetworkBonus", expected.sameNetworkBonus, actual.sameNetworkBonus);
        assertEquals("secureBonus", expected.secureBonus, actual.secureBonus);
        assertEquals("band5GHzBonus", expected.band5GHzBonus, actual.band5GHzBonus);
        assertEquals("isConnected", expected.isConnected, actual.isConnected);
        assertNotNull("expected networkList was null", expected.networkList);
        assertNotNull("actual networkList was null", actual.networkList);
        assertEquals("networkList.length", expected.networkList.length, actual.networkList.length);
        for (int i = 0; i < expected.networkList.length; i++) {
            assertEquals("networkList[" + i + "].ssid",
                    expected.networkList[i].ssid, actual.networkList[i].ssid);
            assertEquals("networkList[" + i + "].networkId",
                    expected.networkList[i].networkId, actual.networkList[i].networkId);
            assertEquals("networkList[" + i + "].priority",
                    expected.networkList[i].priority, actual.networkList[i].priority);
            assertEquals("networkList[" + i + "].flags",
                    expected.networkList[i].flags, actual.networkList[i].flags);
            assertEquals("networkList[" + i + "].auth_bit_field",
                    expected.networkList[i].auth_bit_field, actual.networkList[i].auth_bit_field);
        }
!!!37157943.java!!!	channelsToNativeSettings(inout  : int...channels) : WifiNative::ChannelSettings
        WifiNative.ChannelSettings[] channelSpecs = new WifiNative.ChannelSettings[channels.length];
        for (int i = 0; i < channels.length; ++i) {
            channelSpecs[i] = new WifiNative.ChannelSettings();
            channelSpecs[i].frequency = channels[i];
        }
        return channelSpecs;
!!!37158071.java!!!	bandIs(in expectedBand : int) : WifiNative::BucketSettings
        return new TypeSafeDiagnosingMatcher<WifiNative.BucketSettings>() {
            @Override
            public boolean matchesSafely(WifiNative.BucketSettings bucketSettings,
                    Description mismatchDescription) {
                if (bucketSettings.band != expectedBand) {
                    mismatchDescription
                            .appendText("did not have expected band ").appendValue(expectedBand)
                            .appendText(", was ").appendValue(bucketSettings.band);
                    return false;
                } else {
                    return true;
                }
            }

            @Override
            public void describeTo(final Description description) {
                description.appendText("bucket band is ").appendValue(expectedBand);
            }
        };
!!!37158199.java!!!	channelsAre(in  : int...expectedChannels) : WifiNative::BucketSettings
        return new TypeSafeDiagnosingMatcher<WifiNative.BucketSettings>() {
            @Override
            public boolean matchesSafely(WifiNative.BucketSettings bucketSettings,
                    Description mismatchDescription) {
                if (bucketSettings.band != WifiScanner.WIFI_BAND_UNSPECIFIED) {
                    mismatchDescription.appendText("did not have expected unspecified band, was ")
                            .appendValue(bucketSettings.band);
                    return false;
                } else if (bucketSettings.num_channels != expectedChannels.length) {
                    mismatchDescription
                            .appendText("did not have expected num_channels ")
                            .appendValue(expectedChannels.length)
                            .appendText(", was ").appendValue(bucketSettings.num_channels);
                    return false;
                } else if (bucketSettings.channels == null) {
                    mismatchDescription.appendText("had null channels array");
                    return false;
                } else if (bucketSettings.channels.length != expectedChannels.length) {
                    mismatchDescription
                            .appendText("did not have channels array length matching excepted ")
                            .appendValue(expectedChannels.length)
                            .appendText(", was ").appendValue(bucketSettings.channels.length);
                    return false;
                } else {
                    Set<Integer> foundChannelsSet = new HashSet<>();
                    for (int i = 0; i < bucketSettings.channels.length; ++i) {
                        foundChannelsSet.add(bucketSettings.channels[i].frequency);
                    }
                    Set<Integer> expectedChannelsSet = new HashSet<>();
                    for (int i = 0; i < expectedChannels.length; ++i) {
                        expectedChannelsSet.add(expectedChannels[i]);
                    }

                    if (!foundChannelsSet.containsAll(expectedChannelsSet)
                            || foundChannelsSet.size() != expectedChannelsSet.size()) {
                        Set<Integer> extraChannelsSet = new HashSet<>(foundChannelsSet);
                        extraChannelsSet.removeAll(expectedChannelsSet);
                        expectedChannelsSet.removeAll(foundChannelsSet);
                        mismatchDescription
                                .appendText("does not contain expected channels ")
                                .appendValue(expectedChannelsSet);
                        if (extraChannelsSet.size() > 0) {
                            mismatchDescription
                                    .appendText(", but contains extra channels ")
                                    .appendValue(extraChannelsSet);
                        }
                        return false;
                    } else {
                        return true;
                    }
                }
            }

            @Override
            public void describeTo(final Description description) {
                description.appendText("bucket channels are ").appendValue(expectedChannels);
            }
        };
