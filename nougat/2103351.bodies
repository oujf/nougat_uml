class WifiApConfigStoreTest
!!!37160503.java!!!	setUp() : void
        MockitoAnnotations.initMocks(this);

        /* Create a temporary file for AP config file storage. */
        mApConfigFile = File.createTempFile(TEST_AP_CONFIG_FILE_PREFIX, "");

        /* Setup expectations for Resources to return some default settings. */
        MockResources resources = new MockResources();
        resources.setString(R.string.config_wifi_framework_sap_2G_channel_list,
                            TEST_DEFAULT_2G_CHANNEL_LIST);
        resources.setString(R.string.wifi_tether_configure_ssid_default,
                            TEST_DEFAULT_AP_SSID);
        when(mContext.getResources()).thenReturn(resources);
!!!37160631.java!!!	cleanUp() : void
        /* Remove the temporary AP config file. */
        mApConfigFile.delete();
!!!37160759.java!!!	setupApConfig(inout ssid : String, inout preSharedKey : String, in keyManagement : int, in band : int, in channel : int) : WifiConfiguration
        WifiConfiguration config = new WifiConfiguration();
        config.SSID = ssid;
        config.preSharedKey = preSharedKey;
        config.allowedKeyManagement.set(keyManagement);
        config.apBand = band;
        config.apChannel = channel;
        return config;
!!!37160887.java!!!	writeApConfigFile(inout config : WifiConfiguration) : void
        Method m = WifiApConfigStore.class.getDeclaredMethod(
                "writeApConfiguration", String.class, WifiConfiguration.class);
        m.setAccessible(true);
        m.invoke(null, mApConfigFile.getPath(), config);
!!!37161015.java!!!	verifyApConfig(inout config1 : WifiConfiguration, inout config2 : WifiConfiguration) : void
        assertEquals(config1.SSID, config2.SSID);
        assertEquals(config1.preSharedKey, config2.preSharedKey);
        assertEquals(config1.getAuthType(), config2.getAuthType());
        assertEquals(config1.apBand, config2.apBand);
        assertEquals(config1.apChannel, config2.apChannel);
!!!37161143.java!!!	verifyDefaultApConfig(inout config : WifiConfiguration) : void
        assertEquals(TEST_DEFAULT_AP_SSID, config.SSID);
        assertTrue(config.allowedKeyManagement.get(KeyMgmt.WPA2_PSK));
!!!37161271.java!!!	initWithDefaultConfiguration() : void
        WifiApConfigStore store = new WifiApConfigStore(
                mContext, mBackupManagerProxy, mApConfigFile.getPath());
        verifyDefaultApConfig(store.getApConfiguration());
!!!37161399.java!!!	initWithExistingConfiguration() : void
        WifiConfiguration expectedConfig = setupApConfig(
                "ConfiguredAP",    /* SSID */
                "randomKey",       /* preshared key */
                KeyMgmt.WPA_EAP,   /* key management */
                1,                 /* AP band (5GHz) */
                40                 /* AP channel */);
        writeApConfigFile(expectedConfig);
        WifiApConfigStore store = new WifiApConfigStore(
                mContext, mBackupManagerProxy, mApConfigFile.getPath());
        verifyApConfig(expectedConfig, store.getApConfiguration());
!!!37161527.java!!!	setNullApConfiguration() : void
        /* Initialize WifiApConfigStore with existing configuration. */
        WifiConfiguration expectedConfig = setupApConfig(
                "ConfiguredAP",    /* SSID */
                "randomKey",       /* preshared key */
                KeyMgmt.WPA_EAP,   /* key management */
                1,                 /* AP band (5GHz) */
                40                 /* AP channel */);
        writeApConfigFile(expectedConfig);
        WifiApConfigStore store = new WifiApConfigStore(
                mContext, mBackupManagerProxy, mApConfigFile.getPath());
        verifyApConfig(expectedConfig, store.getApConfiguration());

        store.setApConfiguration(null);
        verifyDefaultApConfig(store.getApConfiguration());
        verify(mBackupManagerProxy).notifyDataChanged();
!!!37161655.java!!!	updateApConfiguration() : void
        /* Initialize WifiApConfigStore with default configuration. */
        WifiApConfigStore store = new WifiApConfigStore(
                mContext, mBackupManagerProxy, mApConfigFile.getPath());
        verifyDefaultApConfig(store.getApConfiguration());

        /* Update with a valid configuration. */
        WifiConfiguration expectedConfig = setupApConfig(
                "ConfiguredAP",    /* SSID */
                "randomKey",       /* preshared key */
                KeyMgmt.WPA_EAP,   /* key management */
                1,                 /* AP band (5GHz) */
                40                 /* AP channel */);
        store.setApConfiguration(expectedConfig);
        verifyApConfig(expectedConfig, store.getApConfiguration());
        verify(mBackupManagerProxy).notifyDataChanged();
