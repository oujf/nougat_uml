class WifiConfigStoreTest
!!!37170615.java!!!	setUp() : void
        MockitoAnnotations.initMocks(this);

        mMockKeyStore = new MockKeyStore();
        mWifiConfigStore = new WifiConfigStore(mWifiNative, mMockKeyStore.createMock(), null,
                false, true);
!!!37170743.java!!!	readNetworkVariableFromSupplicantFile() : void
        Map<String, String> ssidResults = readNetworkVariableFromSupplicantFile(KEY_SSID);
        assertEquals(NETWORK_VARS.size(), ssidResults.size());
        for (HashMap<String, String> single_network_vars : NETWORK_VARS) {
            assertEquals(ssidResults.get(single_network_vars.get(CONFIG_KEY)),
                    single_network_vars.get(KEY_SSID));
        }

        Map<String, String> pskResults = readNetworkVariableFromSupplicantFile(KEY_PSK);
        // Only network 3 is secured with a password.
        assertEquals(1, pskResults.size());
        assertEquals(pskResults.get(NETWORK_3_VARS.get(CONFIG_KEY)),
                    NETWORK_3_VARS.get(KEY_PSK));

        Map<String, String> keyMgmtResults = readNetworkVariableFromSupplicantFile(KEY_KEY_MGMT);
        assertEquals(NETWORK_VARS.size(), keyMgmtResults.size());
        for (HashMap<String, String> single_network_vars : NETWORK_VARS) {
            assertEquals(keyMgmtResults.get(single_network_vars.get(CONFIG_KEY)),
                    single_network_vars.get(KEY_KEY_MGMT));
        }

        Map<String, String> priorityResults = readNetworkVariableFromSupplicantFile(KEY_PRIORITY);
        assertEquals(NETWORK_VARS.size(), priorityResults.size());
        for (HashMap<String, String> single_network_vars : NETWORK_VARS) {
            assertEquals(priorityResults.get(single_network_vars.get(CONFIG_KEY)),
                    single_network_vars.get(KEY_PRIORITY));
        }

        Map<String, String> disabledResults = readNetworkVariableFromSupplicantFile(KEY_DISABLED);
        // All but network 0 are disabled.
        assertEquals(NETWORK_VARS.size() - 1, disabledResults.size());
        for (int i = 1; i < NETWORK_VARS.size(); ++i) {
            assertEquals(disabledResults.get(NETWORK_VARS.get(i).get(CONFIG_KEY)),
                    NETWORK_VARS.get(i).get(KEY_DISABLED));
        }

        Map<String, String> idStrResults = readNetworkVariableFromSupplicantFile(KEY_ID_STR);
        assertEquals(NETWORK_VARS.size(), idStrResults.size());
        for (HashMap<String, String> single_network_vars : NETWORK_VARS) {
            assertEquals(idStrResults.get(single_network_vars.get(CONFIG_KEY)),
                    single_network_vars.get(KEY_ID_STR));
        }
!!!37170871.java!!!	readNetworkVariableFromSupplicantFile(inout key : String) : String
        Map<String, String> result = new HashMap<>();
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new StringReader(TEST_WPA_SUPPLICANT_CONF));
            result = mWifiConfigStore.readNetworkVariablesFromReader(reader, key);
        } catch (IOException e) {
            fail("Error reading test supplicant conf string");
        } finally {
            try {
                if (reader != null) {
                    reader.close();
                }
            } catch (IOException e) {
                // Just ignore if we can't close the reader.
            }
        }
        return result;
