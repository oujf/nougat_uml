class WifiConfigurationTestUtil
!!!37170999.java!!!	generateWifiConfig(in networkId : int, in uid : int, inout ssid : String, inout shared : boolean, inout enabled : boolean, inout fqdn : String, inout providerFriendlyName : String) : WifiConfiguration
        final WifiConfiguration config = new WifiConfiguration();
        config.SSID = ssid;
        config.networkId = networkId;
        config.creatorUid = uid;
        config.shared = shared;
        config.status = enabled ? WifiConfiguration.Status.ENABLED
                : WifiConfiguration.Status.DISABLED;
        if (fqdn != null) {
            config.FQDN = fqdn;
            config.providerFriendlyName = providerFriendlyName;
            config.enterpriseConfig.setEapMethod(WifiEnterpriseConfig.Eap.SIM);
        }
        return config;
!!!37171127.java!!!	generateWifiConfig(in networkId : int, in uid : int, inout ssid : String, inout shared : boolean, inout enabled : boolean, inout fqdn : String, inout providerFriendlyName : String, in security : int) : WifiConfiguration
        WifiConfiguration config = generateWifiConfig(networkId, uid, ssid, shared, enabled, fqdn,
                providerFriendlyName);

        if (security == SECURITY_NONE) {
            config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);
        } else {
            if (((security & SECURITY_WEP) != 0) || ((security & SECURITY_PSK) != 0)) {
                config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);
            }

            if ((security & SECURITY_EAP) != 0) {
                config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_EAP);
                config.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.IEEE8021X);
            }
        }
        return config;
