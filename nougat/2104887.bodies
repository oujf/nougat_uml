class WifiLoggerTest
!!!37181879.java!!!	getLoggerRingBufferData() : byte
        return mWifiLogger.getBugReports().get(0).ringBuffers.get(FAKE_RING_BUFFER_NAME);
!!!37182007.java!!!	setUp() : void
        MockitoAnnotations.initMocks(this);
        mFakeRbs = new WifiNative.RingBufferStatus();
        mFakeRbs.name = FAKE_RING_BUFFER_NAME;

        WifiNative.RingBufferStatus[] ringBufferStatuses = new WifiNative.RingBufferStatus[] {
                mFakeRbs
        };

        when(mWifiNative.getRingBufferStatus()).thenReturn(ringBufferStatuses);
        when(mWifiNative.readKernelLog()).thenReturn("");
        when(mBuildProperties.isEngBuild()).thenReturn(false);
        when(mBuildProperties.isUserdebugBuild()).thenReturn(false);
        when(mBuildProperties.isUserBuild()).thenReturn(true);

        mWifiLogger = new WifiLogger(mWsm, mWifiNative, mBuildProperties);
        mWifiNative.enableVerboseLogging(0);
!!!37182135.java!!!	startLoggingRegistersLogEventHandler() : void
        final boolean verbosityToggle = false;  // even default mode wants log events from HAL
        mWifiLogger.startLogging(verbosityToggle);
        verify(mWifiNative).setLoggingEventHandler(anyObject());
!!!37182263.java!!!	startLoggingRegistersLogEventHandlerIfPriorAttemptFailed() : void
        final boolean verbosityToggle = false;  // even default mode wants log events from HAL

        when(mWifiNative.setLoggingEventHandler(anyObject())).thenReturn(false);
        mWifiLogger.startLogging(verbosityToggle);
        verify(mWifiNative).setLoggingEventHandler(anyObject());
        reset(mWifiNative);

        when(mWifiNative.setLoggingEventHandler(anyObject())).thenReturn(true);
        mWifiLogger.startLogging(verbosityToggle);
        verify(mWifiNative).setLoggingEventHandler(anyObject());
!!!37182391.java!!!	startLoggingDoesNotRegisterLogEventHandlerIfPriorAttemptSucceeded() : void
        final boolean verbosityToggle = false;  // even default mode wants log events from HAL

        when(mWifiNative.setLoggingEventHandler(anyObject())).thenReturn(true);
        mWifiLogger.startLogging(verbosityToggle);
        verify(mWifiNative).setLoggingEventHandler(anyObject());
        reset(mWifiNative);

        mWifiLogger.startLogging(verbosityToggle);
        verify(mWifiNative, never()).setLoggingEventHandler(anyObject());
!!!37182519.java!!!	startLoggingStopsAndRestartsRingBufferLogging() : void
        final boolean verbosityToggle = false;
        mWifiLogger.startLogging(verbosityToggle);
        verify(mWifiNative).startLoggingRingBuffer(
                eq(WifiLogger.VERBOSE_NO_LOG), anyInt(), anyInt(), anyInt(),
                eq(FAKE_RING_BUFFER_NAME));
        verify(mWifiNative).startLoggingRingBuffer(
                eq(WifiLogger.VERBOSE_NORMAL_LOG), anyInt(), anyInt(), anyInt(),
                eq(FAKE_RING_BUFFER_NAME));
!!!37182647.java!!!	stopLoggingResetsLogHandlerIfHandlerWasRegistered() : void
        final boolean verbosityToggle = false;  // even default mode wants log events from HAL

        when(mWifiNative.setLoggingEventHandler(anyObject())).thenReturn(true);
        mWifiLogger.startLogging(verbosityToggle);
        reset(mWifiNative);

        mWifiLogger.stopLogging();
        verify(mWifiNative).resetLogHandler();
!!!37182775.java!!!	stopLoggingOnlyResetsLogHandlerIfHandlerWasRegistered() : void
        final boolean verbosityToggle = false;  // even default mode wants log events from HAL
        mWifiLogger.stopLogging();
        verify(mWifiNative, never()).resetLogHandler();
!!!37182903.java!!!	multipleStopLoggingCallsOnlyResetLogHandlerOnce() : void
        final boolean verbosityToggle = false;  // even default mode wants log events from HAL

        when(mWifiNative.setLoggingEventHandler(anyObject())).thenReturn(true);
        mWifiLogger.startLogging(verbosityToggle);
        reset(mWifiNative);

        when(mWifiNative.resetLogHandler()).thenReturn(true);
        mWifiLogger.stopLogging();
        verify(mWifiNative).resetLogHandler();
        reset(mWifiNative);

        mWifiLogger.stopLogging();
        verify(mWifiNative, never()).resetLogHandler();
!!!37183031.java!!!	canCaptureAndStoreRingBufferData() : void
        final boolean verbosityToggle = false;
        mWifiLogger.startLogging(verbosityToggle);

        final byte[] data = new byte[WifiLogger.RING_BUFFER_BYTE_LIMIT_SMALL];
        mWifiLogger.onRingBufferData(mFakeRbs, data);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);

        byte[][] ringBufferData = getLoggerRingBufferData();
        assertEquals(1, ringBufferData.length);
        assertArrayEquals(data, ringBufferData[0]);
!!!37183159.java!!!	loggerDiscardsExtraneousData() : void
        final boolean verbosityToggle = false;
        mWifiLogger.startLogging(verbosityToggle);

        final byte[] data1 = new byte[WifiLogger.RING_BUFFER_BYTE_LIMIT_SMALL];
        final byte[] data2 = {1, 2, 3};
        mWifiLogger.onRingBufferData(mFakeRbs, data1);
        mWifiLogger.onRingBufferData(mFakeRbs, data2);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);

        byte[][] ringBufferData = getLoggerRingBufferData();
        assertEquals(1, ringBufferData.length);
        assertArrayEquals(data2, ringBufferData[0]);
!!!37183287.java!!!	startLoggingStartsPacketFateWithoutVerboseMode() : void
        final boolean verbosityToggle = false;
        mWifiLogger.startLogging(verbosityToggle);
        verify(mWifiNative).startPktFateMonitoring();
!!!37183415.java!!!	startLoggingStartsPacketFateInVerboseMode() : void
        final boolean verbosityToggle = true;
        mWifiLogger.startLogging(verbosityToggle);
        verify(mWifiNative).startPktFateMonitoring();
!!!37183543.java!!!	reportConnectionFailureIsIgnoredWithoutVerboseMode() : void
        final boolean verbosityToggle = false;
        mWifiLogger.startLogging(verbosityToggle);
        mWifiLogger.reportConnectionFailure();
        verify(mWifiNative).getTxPktFates(anyObject());
        verify(mWifiNative).getRxPktFates(anyObject());
!!!37183671.java!!!	reportConnectionFailureFetchesFatesInVerboseMode() : void
        final boolean verbosityToggle = true;
        mWifiLogger.startLogging(verbosityToggle);
        mWifiLogger.reportConnectionFailure();
        verify(mWifiNative).getTxPktFates(anyObject());
        verify(mWifiNative).getRxPktFates(anyObject());
!!!37183799.java!!!	loggerFetchesTxFatesEvenIfFetchingRxFatesFails() : void
        final boolean verbosityToggle = true;
        when(mWifiNative.getRxPktFates(anyObject())).thenReturn(false);
        mWifiLogger.startLogging(verbosityToggle);
        mWifiLogger.reportConnectionFailure();
        verify(mWifiNative).getTxPktFates(anyObject());
        verify(mWifiNative).getRxPktFates(anyObject());
!!!37183927.java!!!	loggerFetchesRxFatesEvenIfFetchingTxFatesFails() : void
        final boolean verbosityToggle = true;
        when(mWifiNative.getTxPktFates(anyObject())).thenReturn(false);
        mWifiLogger.startLogging(verbosityToggle);
        mWifiLogger.reportConnectionFailure();
        verify(mWifiNative).getTxPktFates(anyObject());
        verify(mWifiNative).getRxPktFates(anyObject());
!!!37184055.java!!!	dumpFetchesFates() : void
        final boolean verbosityToggle = false;
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mWifiLogger.startLogging(verbosityToggle);
        mWifiLogger.dump(new FileDescriptor(), pw, new String[]{"bogus", "args"});
        verify(mWifiNative).getTxPktFates(anyObject());
        verify(mWifiNative).getRxPktFates(anyObject());
!!!37184183.java!!!	dumpSucceedsWhenNoFatesHaveNotBeenFetched() : void
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mWifiLogger.dump(new FileDescriptor(), pw, new String[]{"bogus", "args"});

        String fateDumpString = sw.toString();
        assertTrue(fateDumpString.contains("Last failed"));
        // Verify dump terminator is present
        assertTrue(fateDumpString.contains(
                "--------------------------------------------------------------------"));
!!!37184311.java!!!	dumpSucceedsWhenFatesHaveBeenFetchedButAreEmpty() : void
        final boolean verbosityToggle = true;
        mWifiLogger.startLogging(verbosityToggle);
        mWifiLogger.reportConnectionFailure();
        verify(mWifiNative).getTxPktFates(anyObject());
        verify(mWifiNative).getRxPktFates(anyObject());

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mWifiLogger.dump(new FileDescriptor(), pw, new String[]{"bogus", "args"});

        String fateDumpString = sw.toString();
        assertTrue(fateDumpString.contains("Last failed"));
        // Verify dump terminator is present
        assertTrue(fateDumpString.contains(
                "--------------------------------------------------------------------"));
!!!37184439.java!!!	getDumpString(inout verbose : boolean) : String
        mWifiLogger.startLogging(verbose);
        mWifiNative.enableVerboseLogging(verbose ? 1 : 0);
        when(mWifiNative.getTxPktFates(anyObject())).then(new AnswerWithArguments() {
            public boolean answer(WifiNative.TxFateReport[] fates) {
                fates[0] = new WifiNative.TxFateReport(
                        WifiLoggerHal.TX_PKT_FATE_ACKED, 2, WifiLoggerHal.FRAME_TYPE_ETHERNET_II,
                        new byte[0]
                );
                fates[1] = new WifiNative.TxFateReport(
                        WifiLoggerHal.TX_PKT_FATE_ACKED, 0, WifiLoggerHal.FRAME_TYPE_ETHERNET_II,
                        new byte[0]
                );
                return true;
            }
        });
        when(mWifiNative.getRxPktFates(anyObject())).then(new AnswerWithArguments() {
            public boolean answer(WifiNative.RxFateReport[] fates) {
                fates[0] = new WifiNative.RxFateReport(
                        WifiLoggerHal.RX_PKT_FATE_SUCCESS, 3, WifiLoggerHal.FRAME_TYPE_ETHERNET_II,
                        new byte[0]
                );
                fates[1] = new WifiNative.RxFateReport(
                        WifiLoggerHal.RX_PKT_FATE_SUCCESS, 1, WifiLoggerHal.FRAME_TYPE_ETHERNET_II,
                        new byte[0]
                );
                return true;
            }
        });
        mWifiLogger.reportConnectionFailure();

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mWifiLogger.dump(new FileDescriptor(), pw, new String[]{"bogus", "args"});
        return sw.toString();
!!!37184567.java!!!	dumpShowsTxAndRxFates() : void
        final boolean verbosityToggle = false;
        String dumpString = getDumpString(verbosityToggle);
        assertTrue(dumpString.contains(WifiNative.FateReport.getTableHeader()));
        assertTrue(Pattern.compile("0 .* TX ").matcher(dumpString).find());
        assertTrue(Pattern.compile("1 .* RX ").matcher(dumpString).find());
        assertTrue(Pattern.compile("2 .* TX ").matcher(dumpString).find());
        assertTrue(Pattern.compile("3 .* RX ").matcher(dumpString).find());
        assertFalse(dumpString.contains("VERBOSE PACKET FATE DUMP"));
        assertFalse(dumpString.contains("Frame bytes"));
!!!37184695.java!!!	dumpShowsTxAndRxFatesVerbose() : void
        final boolean verbosityToggle = true;
        String dumpString = getDumpString(verbosityToggle);
        assertTrue(dumpString.contains(WifiNative.FateReport.getTableHeader()));
        assertTrue(Pattern.compile("0 .* TX ").matcher(dumpString).find());
        assertTrue(Pattern.compile("1 .* RX ").matcher(dumpString).find());
        assertTrue(Pattern.compile("2 .* TX ").matcher(dumpString).find());
        assertTrue(Pattern.compile("3 .* RX ").matcher(dumpString).find());
        assertTrue(dumpString.contains("VERBOSE PACKET FATE DUMP"));
        assertTrue(dumpString.contains("Frame bytes"));
!!!37184823.java!!!	dumpIsSortedByTimestamp() : void
        final boolean verbosityToggle = true;
        String dumpString = getDumpString(verbosityToggle);
        assertTrue(dumpString.contains(WifiNative.FateReport.getTableHeader()));
        assertTrue(Pattern.compile(
                "0 .* TX .*\n" +
                "1 .* RX .*\n" +
                "2 .* TX .*\n" +
                "3 .* RX "
        ).matcher(dumpString).find());

        int expected_index_of_verbose_frame_0 = dumpString.indexOf(
                "Frame direction: TX\nFrame timestamp: 0\n");
        int expected_index_of_verbose_frame_1 = dumpString.indexOf(
                "Frame direction: RX\nFrame timestamp: 1\n");
        int expected_index_of_verbose_frame_2 = dumpString.indexOf(
                "Frame direction: TX\nFrame timestamp: 2\n");
        int expected_index_of_verbose_frame_3 = dumpString.indexOf(
                "Frame direction: RX\nFrame timestamp: 3\n");
        assertFalse(-1 == expected_index_of_verbose_frame_0);
        assertFalse(-1 == expected_index_of_verbose_frame_1);
        assertFalse(-1 == expected_index_of_verbose_frame_2);
        assertFalse(-1 == expected_index_of_verbose_frame_3);
        assertTrue(expected_index_of_verbose_frame_0 < expected_index_of_verbose_frame_1);
        assertTrue(expected_index_of_verbose_frame_1 < expected_index_of_verbose_frame_2);
        assertTrue(expected_index_of_verbose_frame_2 < expected_index_of_verbose_frame_3);
!!!37184951.java!!!	dumpOmitsFateDetailInEngBuildsOutsideOfVerboseMode() : void
        final boolean verbosityToggle = false;
        when(mBuildProperties.isEngBuild()).thenReturn(true);
        when(mBuildProperties.isUserdebugBuild()).thenReturn(false);
        when(mBuildProperties.isUserBuild()).thenReturn(false);
        String dumpString = getDumpString(verbosityToggle);
        assertFalse(dumpString.contains("VERBOSE PACKET FATE DUMP"));
        assertFalse(dumpString.contains("Frame bytes"));
!!!37185079.java!!!	dumpOmitsFateDetailInUserdebugBuildsOutsideOfVerboseMode() : void
        final boolean verbosityToggle = false;
        when(mBuildProperties.isUserdebugBuild()).thenReturn(true);
        when(mBuildProperties.isEngBuild()).thenReturn(false);
        when(mBuildProperties.isUserBuild()).thenReturn(false);
        String dumpString = getDumpString(verbosityToggle);
        assertFalse(dumpString.contains("VERBOSE PACKET FATE DUMP"));
        assertFalse(dumpString.contains("Frame bytes"));
!!!37185207.java!!!	dumpOmitsFatesIfVerboseIsDisabledAfterFetch() : void
        final boolean verbosityToggle = true;
        mWifiLogger.startLogging(verbosityToggle);
        when(mWifiNative.getTxPktFates(anyObject())).then(new AnswerWithArguments() {
            public boolean answer(WifiNative.TxFateReport[] fates) {
                fates[0] = new WifiNative.TxFateReport(
                        WifiLoggerHal.TX_PKT_FATE_ACKED, 0, WifiLoggerHal.FRAME_TYPE_ETHERNET_II,
                        new byte[0]
                );
                return true;
            }
        });
        when(mWifiNative.getRxPktFates(anyObject())).then(new AnswerWithArguments() {
            public boolean answer(WifiNative.RxFateReport[] fates) {
                fates[0] = new WifiNative.RxFateReport(
                        WifiLoggerHal.RX_PKT_FATE_SUCCESS, 1, WifiLoggerHal.FRAME_TYPE_ETHERNET_II,
                        new byte[0]
                );
                return true;
            }
        });
        mWifiLogger.reportConnectionFailure();
        verify(mWifiNative).getTxPktFates(anyObject());
        verify(mWifiNative).getRxPktFates(anyObject());

        final boolean newVerbosityToggle = false;
        mWifiLogger.startLogging(newVerbosityToggle);

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mWifiLogger.dump(new FileDescriptor(), pw, new String[]{"bogus", "args"});

        String fateDumpString = sw.toString();
        assertFalse(fateDumpString.contains("VERBOSE PACKET FATE DUMP"));
        assertFalse(fateDumpString.contains("Frame bytes"));
!!!37185335.java!!!	ringBufferSizeIsSmallByDefault() : void
        final boolean verbosityToggle = false;
        mWifiLogger.startLogging(verbosityToggle);
        mWifiLogger.onRingBufferData(
                mFakeRbs, new byte[WifiLogger.RING_BUFFER_BYTE_LIMIT_SMALL + 1]);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        assertEquals(0, getLoggerRingBufferData().length);
!!!37185463.java!!!	ringBufferSizeIsSmallByDefaultOnUserdebugBuilds() : void
        final boolean verbosityToggle = false;
        when(mBuildProperties.isUserdebugBuild()).thenReturn(true);
        when(mBuildProperties.isEngBuild()).thenReturn(false);
        when(mBuildProperties.isUserBuild()).thenReturn(false);
        mWifiLogger.startLogging(verbosityToggle);
        mWifiLogger.onRingBufferData(
                mFakeRbs, new byte[WifiLogger.RING_BUFFER_BYTE_LIMIT_SMALL + 1]);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        assertEquals(0, getLoggerRingBufferData().length);
!!!37185591.java!!!	ringBufferSizeIsSmallByDefaultOnEngBuilds() : void
        final boolean verbosityToggle = false;
        when(mBuildProperties.isEngBuild()).thenReturn(true);
        when(mBuildProperties.isUserdebugBuild()).thenReturn(false);
        when(mBuildProperties.isUserBuild()).thenReturn(false);
        mWifiLogger.startLogging(verbosityToggle);
        mWifiLogger.onRingBufferData(
                mFakeRbs, new byte[WifiLogger.RING_BUFFER_BYTE_LIMIT_SMALL + 1]);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        assertEquals(0, getLoggerRingBufferData().length);
!!!37185719.java!!!	ringBufferSizeIsLargeInVerboseMode() : void
        final boolean verbosityToggle = true;
        mWifiLogger.startLogging(verbosityToggle);
        mWifiLogger.onRingBufferData(mFakeRbs, new byte[WifiLogger.RING_BUFFER_BYTE_LIMIT_LARGE]);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        assertEquals(1, getLoggerRingBufferData().length);
!!!37185847.java!!!	startLoggingGrowsRingBuffersIfNeeded() : void
        mWifiLogger.startLogging(false  /* verbose disabled */);
        mWifiLogger.startLogging(true  /* verbose enabled */);
        mWifiLogger.onRingBufferData(mFakeRbs, new byte[WifiLogger.RING_BUFFER_BYTE_LIMIT_LARGE]);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        assertEquals(1, getLoggerRingBufferData().length);
!!!37185975.java!!!	startLoggingShrinksRingBuffersIfNeeded() : void
        mWifiLogger.startLogging(true  /* verbose enabled */);
        mWifiLogger.onRingBufferData(
                mFakeRbs, new byte[WifiLogger.RING_BUFFER_BYTE_LIMIT_SMALL + 1]);

        // Existing data is nuked (too large).
        mWifiLogger.startLogging(false  /* verbose disabled */);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        assertEquals(0, getLoggerRingBufferData().length);

        // New data must obey limit as well.
        mWifiLogger.onRingBufferData(
                mFakeRbs, new byte[WifiLogger.RING_BUFFER_BYTE_LIMIT_SMALL + 1]);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        assertEquals(0, getLoggerRingBufferData().length);
!!!37186103.java!!!	captureBugReportSkipsFirmwareAndDriverDumpsByDefault() : void
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        verify(mWifiNative, never()).getFwMemoryDump();
        verify(mWifiNative, never()).getDriverStateDump();
!!!37186231.java!!!	captureBugReportTakesFirmwareAndDriverDumpsInVerboseMode() : void
        mWifiLogger.startLogging(true  /* verbose enabled */);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        verify(mWifiNative).getFwMemoryDump();
        verify(mWifiNative).getDriverStateDump();
!!!37186359.java!!!	dumpIncludesDriverStateDumpIfAvailable() : void
        when(mWifiNative.getDriverStateDump()).thenReturn(new byte[]{0, 1, 2});

        mWifiLogger.startLogging(true  /* verbose enabled */);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        verify(mWifiNative).getDriverStateDump();

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mWifiLogger.dump(new FileDescriptor(), pw, new String[]{});
        assertTrue(sw.toString().contains(WifiLogger.DRIVER_DUMP_SECTION_HEADER));
!!!37186487.java!!!	dumpOmitsDriverStateDumpIfUnavailable() : void
        mWifiLogger.startLogging(true  /* verbose enabled */);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        verify(mWifiNative).getDriverStateDump();

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mWifiLogger.dump(new FileDescriptor(), pw, new String[]{});
        assertFalse(sw.toString().contains(WifiLogger.DRIVER_DUMP_SECTION_HEADER));
!!!37186615.java!!!	dumpOmitsDriverStateDumpIfVerboseDisabledAfterCapture() : void
        when(mWifiNative.getDriverStateDump()).thenReturn(new byte[]{0, 1, 2});

        mWifiLogger.startLogging(true  /* verbose enabled */);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        verify(mWifiNative).getDriverStateDump();

        mWifiLogger.startLogging(false  /* verbose no longer enabled */);

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mWifiLogger.dump(new FileDescriptor(), pw, new String[]{});
        assertFalse(sw.toString().contains(WifiLogger.DRIVER_DUMP_SECTION_HEADER));
!!!37186743.java!!!	dumpIncludesFirmwareMemoryDumpIfAvailable() : void
        when(mWifiNative.getFwMemoryDump()).thenReturn(new byte[]{0, 1, 2});

        mWifiLogger.startLogging(true  /* verbose enabled */);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        verify(mWifiNative).getFwMemoryDump();

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mWifiLogger.dump(new FileDescriptor(), pw, new String[]{});
        assertTrue(sw.toString().contains(WifiLogger.FIRMWARE_DUMP_SECTION_HEADER));
!!!37186871.java!!!	dumpOmitsFirmwareMemoryDumpIfUnavailable() : void
        mWifiLogger.startLogging(true  /* verbose enabled */);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        verify(mWifiNative).getFwMemoryDump();

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mWifiLogger.dump(new FileDescriptor(), pw, new String[]{});
        assertFalse(sw.toString().contains(WifiLogger.FIRMWARE_DUMP_SECTION_HEADER));
!!!37186999.java!!!	dumpOmitsFirmwareMemoryDumpIfVerboseDisabledAfterCapture() : void
        when(mWifiNative.getFwMemoryDump()).thenReturn(new byte[]{0, 1, 2});

        mWifiLogger.startLogging(true  /* verbose enabled */);
        mWifiLogger.captureBugReportData(WifiLogger.REPORT_REASON_NONE);
        verify(mWifiNative).getFwMemoryDump();

        mWifiLogger.startLogging(false  /* verbose no longer enabled */);

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mWifiLogger.dump(new FileDescriptor(), pw, new String[]{});
        assertFalse(sw.toString().contains(WifiLogger.FIRMWARE_DUMP_SECTION_HEADER));
