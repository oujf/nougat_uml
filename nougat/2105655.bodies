class WifiQualifiedNetworkSelectorTest
!!!37191095.java!!!	setUp() : void
        mResource = getResource();
        mScoreManager = getNetworkScoreManager();
        mScoreCache = getScoreCache();
        mContext = getContext();
        mWifiConfigManager = getWifiConfigManager();
        mWifiInfo = getWifiInfo();
        mLocalLog = getLocalLog();

        mWifiQualifiedNetworkSelector = new WifiQualifiedNetworkSelector(mWifiConfigManager,
                mContext, mWifiInfo, mClock);
        mWifiQualifiedNetworkSelector.enableVerboseLogging(1);
        mWifiQualifiedNetworkSelector.setUserPreferredBand(1);
        mWifiQualifiedNetworkSelector.setWifiNetworkScoreCache(mScoreCache);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime());
!!!37191223.java!!!	cleanup() : void
        validateMockitoUsage();
!!!37191351.java!!!	getScanDetails(inout ssids : String, inout bssids : String, inout frequencies : int, inout caps : String, inout levels : int) : ScanDetail
        List<ScanDetail> scanDetailList = new ArrayList<ScanDetail>();
        long timeStamp = mClock.elapsedRealtime();
        for (int index = 0; index < ssids.length; index++) {
            ScanDetail scanDetail = new ScanDetail(WifiSsid.createFromAsciiEncoded(ssids[index]),
                    bssids[index], caps[index], levels[index], frequencies[index], timeStamp, 0);
            scanDetailList.add(scanDetail);
        }
        return scanDetailList;
!!!37191479.java!!!	getContext() : Context
        Context context = mock(Context.class);
        Resources resource = mock(Resources.class);

        when(context.getResources()).thenReturn(mResource);
        when(context.getSystemService(Context.NETWORK_SCORE_SERVICE)).thenReturn(mScoreManager);
        return context;
!!!37191607.java!!!	getResource() : Resources
        Resources resource = mock(Resources.class);

        when(resource.getInteger(R.integer.config_wifi_framework_SECURITY_AWARD)).thenReturn(80);
        when(resource.getInteger(R.integer.config_wifi_framework_RSSI_SCORE_OFFSET)).thenReturn(85);
        when(resource.getInteger(R.integer.config_wifi_framework_SAME_BSSID_AWARD)).thenReturn(24);
        when(resource.getInteger(R.integer.config_wifi_framework_LAST_SELECTION_AWARD))
                .thenReturn(480);
        when(resource.getInteger(R.integer.config_wifi_framework_PASSPOINT_SECURITY_AWARD))
                .thenReturn(40);
        when(resource.getInteger(R.integer.config_wifi_framework_SECURITY_AWARD)).thenReturn(80);
        when(resource.getInteger(R.integer.config_wifi_framework_RSSI_SCORE_SLOPE)).thenReturn(4);
        return resource;
!!!37191735.java!!!	getNetworkScoreManager() : NetworkScoreManager
        NetworkScoreManager networkScoreManager = mock(NetworkScoreManager.class);

        return networkScoreManager;
!!!37191863.java!!!	getScoreCache() : WifiNetworkScoreCache
        return mock(WifiNetworkScoreCache.class);
!!!37191991.java!!!	getLocalLog() : LocalLog
        return new LocalLog(0);
!!!37192119.java!!!	getWifiInfo() : WifiInfo
        WifiInfo wifiInfo = mock(WifiInfo.class);

        //simulate a disconnected state
        when(wifiInfo.is24GHz()).thenReturn(true);
        when(wifiInfo.is5GHz()).thenReturn(false);
        when(wifiInfo.getRssi()).thenReturn(-70);
        when(wifiInfo.getNetworkId()).thenReturn(WifiConfiguration.INVALID_NETWORK_ID);
        when(wifiInfo.getBSSID()).thenReturn(null);
        when(wifiInfo.getNetworkId()).thenReturn(-1);
        return wifiInfo;
!!!37192247.java!!!	getWifiConfigManager() : WifiConfigManager
        WifiConfigManager wifiConfigManager = mock(WifiConfigManager.class);
        wifiConfigManager.mThresholdSaturatedRssi24 = new AtomicInteger(
                WifiQualifiedNetworkSelector.RSSI_SATURATION_2G_BAND);
        wifiConfigManager.mBandAward5Ghz = new AtomicInteger(
                WifiQualifiedNetworkSelector.BAND_AWARD_5GHz);
        wifiConfigManager.mCurrentNetworkBoost = new AtomicInteger(
                WifiQualifiedNetworkSelector.SAME_NETWORK_AWARD);
        wifiConfigManager.mThresholdQualifiedRssi5 = new AtomicInteger(
                WifiQualifiedNetworkSelector.QUALIFIED_RSSI_5G_BAND);
        wifiConfigManager.mThresholdMinimumRssi24 = new AtomicInteger(
                WifiQualifiedNetworkSelector.MINIMUM_2G_ACCEPT_RSSI);
        wifiConfigManager.mThresholdMinimumRssi5 = new AtomicInteger(
                WifiQualifiedNetworkSelector.MINIMUM_5G_ACCEPT_RSSI);

        when(wifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);
        return wifiConfigManager;
!!!37192375.java!!!	generateWifiConfigurations(inout ssid : String, inout security : int) : WifiConfiguration
        if (ssid == null || security == null || ssid.length != security.length
                || ssid.length == 0) {
            return null;
        }

        WifiConfiguration[] configs = new WifiConfiguration[ssid.length];
        for (int index = 0; index < ssid.length; index++) {
            configs[index] = generateWifiConfig(index, 0, ssid[index], false, true, null, null,
                    security[index]);
        }

        return configs;
!!!37192503.java!!!	setConfigPasspoint(inout config : WifiConfiguration) : void
        config.FQDN = "android.qns.unitTest";
        config.providerFriendlyName = "android.qns.unitTest";
        WifiEnterpriseConfig enterpriseConfig = mock(WifiEnterpriseConfig.class);
        when(enterpriseConfig.getEapMethod()).thenReturn(WifiEnterpriseConfig.Eap.PEAP);

!!!37192631.java!!!	prepareConfigStore(in configs : WifiConfiguration) : void
        when(mWifiConfigManager.getWifiConfiguration(anyInt()))
                .then(new AnswerWithArguments() {
                    public WifiConfiguration answer(int netId) {
                        if (netId >= 0 && netId < configs.length) {
                            return configs[netId];
                        } else {
                            return null;
                        }
                    }
                });
!!!37192759.java!!!	scanResultLinkConfiguration(inout configs : WifiConfiguration, inout scanDetails : List<ScanDetail>) : void
        if (scanDetails.size() <= configs.length) {
            for (int i = 0; i < scanDetails.size(); i++) {
                ScanDetail scanDetail = scanDetails.get(i);
                List<WifiConfiguration> associateWithScanResult = new ArrayList<>();
                associateWithScanResult.add(configs[i]);
                when(mWifiConfigManager.updateSavedNetworkWithNewScanDetail(eq(scanDetail),
                        anyBoolean())).thenReturn(associateWithScanResult);
            }
        } else {
            for (int i = 0; i < configs.length; i++) {
                ScanDetail scanDetail = scanDetails.get(i);
                List<WifiConfiguration> associateWithScanResult = new ArrayList<>();
                associateWithScanResult.add(configs[i]);
                when(mWifiConfigManager.updateSavedNetworkWithNewScanDetail(eq(scanDetail),
                        anyBoolean())).thenReturn(associateWithScanResult);
            }

            // associated the remaining scan details with a NULL config.
            for (int i = configs.length; i < scanDetails.size(); i++) {
                when(mWifiConfigManager.updateSavedNetworkWithNewScanDetail(eq(scanDetails.get(i)),
                        anyBoolean())).thenReturn(null);
            }
        }
!!!37192887.java!!!	configureScoreCache(inout scanDetails : List<ScanDetail>, inout scores : Integer, inout meteredHints : boolean) : void
        for (int i = 0; i < scanDetails.size(); i++) {
            ScanDetail scanDetail = scanDetails.get(i);
            Integer score = scores[i];
            ScanResult scanResult = scanDetail.getScanResult();
            if (score != null) {
                when(mScoreCache.isScoredNetwork(scanResult)).thenReturn(true);
                when(mScoreCache.hasScoreCurve(scanResult)).thenReturn(true);
                when(mScoreCache.getNetworkScore(eq(scanResult), anyBoolean())).thenReturn(score);
                when(mScoreCache.getNetworkScore(scanResult)).thenReturn(score);
            } else {
                when(mScoreCache.isScoredNetwork(scanResult)).thenReturn(false);
                when(mScoreCache.hasScoreCurve(scanResult)).thenReturn(false);
                when(mScoreCache.getNetworkScore(eq(scanResult), anyBoolean())).thenReturn(
                        WifiNetworkScoreCache.INVALID_NETWORK_SCORE);
                when(mScoreCache.getNetworkScore(scanResult)).thenReturn(
                        WifiNetworkScoreCache.INVALID_NETWORK_SCORE);
            }
            when(mScoreCache.getMeteredHint(scanResult)).thenReturn(meteredHints[i]);
        }
!!!37193015.java!!!	verifySelectedResult(inout chosenScanResult : ScanResult, inout candidate : WifiConfiguration) : void
        ScanResult candidateScan = candidate.getNetworkSelectionStatus().getCandidate();
        assertEquals("choose the wrong SSID", chosenScanResult.SSID, candidate.SSID);
        assertEquals("choose the wrong BSSID", chosenScanResult.BSSID, candidateScan.BSSID);
!!!37193143.java!!!	chooseNetworkDisconnected2GHighestRssi() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 2417};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-70, -60};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);

        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);

        scanResultLinkConfiguration(savedConfigs, scanDetails);

        ScanResult chosenScanResult = scanDetails.get(scanDetails.size() - 1).getScanResult();

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        verifySelectedResult(chosenScanResult, candidate);
!!!37193271.java!!!	chooseNetworkDisconnected5GHighestRssi() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {5180, 5610};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-70, -60};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);

        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        ScanResult chosenScanResult = scanDetails.get(scanDetails.size() - 1).getScanResult();

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        verifySelectedResult(chosenScanResult, candidate);
!!!37193399.java!!!	chooseNetworkDisconnect5GOver2GTest() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-60, -65};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        ScanResult chosenScanResult = scanDetails.get(scanDetails.size() - 1).getScanResult();

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        verifySelectedResult(chosenScanResult, candidate);
!!!37193527.java!!!	chooseNetworkDisconnect2GOver5GTest() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-60, -75};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        verifySelectedResult(chosenScanResult, candidate);
!!!37193655.java!!!	chooseNetworkDisconnect2GRssiSaturationTest() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-50, -65};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        ScanResult chosenScanResult = scanDetails.get(scanDetails.size() - 1).getScanResult();

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        verifySelectedResult(chosenScanResult, candidate);
!!!37193783.java!!!	chooseNetworkMinimumRssiTest() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {WifiQualifiedNetworkSelector.MINIMUM_2G_ACCEPT_RSSI - 1,
                WifiQualifiedNetworkSelector.MINIMUM_5G_ACCEPT_RSSI - 1};
        int[] security = {SECURITY_EAP, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        assertEquals("choose the wrong SSID", null, candidate);
!!!37193911.java!!!	chooseNetworkSecurityOverPassPoint() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[ESS]"};
        int[] levels = {-70, -70};
        int[] security = {SECURITY_EAP, SECURITY_NONE};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        setConfigPasspoint(savedConfigs[1]);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        verifySelectedResult(chosenScanResult, candidate);
!!!37194039.java!!!	chooseNetworkPasspointOverOpen() : void
        String[] ssids = {"\"test1\"", "\"test2\""};
        String[] bssids = {"6c:f3:7f:ae:8c:f8", "6c:f3:7f:ae:8c:f4"};
        int[] frequencies = {2437, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-70, -70};
        int[] security = {SECURITY_NONE, SECURITY_NONE};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        setConfigPasspoint(savedConfigs[0]);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        verifySelectedResult(chosenScanResult, candidate);
!!!37194167.java!!!	chooseNetworkSecureOverOpen() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-70, -70};
        int[] security = {SECURITY_PSK, SECURITY_NONE};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);
        verifySelectedResult(chosenScanResult, candidate);
!!!37194295.java!!!	userSelectsNetworkForFirstTime() : void
        String[] ssids = {"\"test1\"", "\"test2\"", "\"test3\""};
        int[] security = {SECURITY_PSK, SECURITY_PSK, SECURITY_NONE};

        final WifiConfiguration[] configs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(configs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(Arrays.asList(configs));
        for (WifiConfiguration network : configs) {
            WifiConfiguration.NetworkSelectionStatus status = network.getNetworkSelectionStatus();
            status.setSeenInLastQualifiedNetworkSelection(true);
        }

        mWifiQualifiedNetworkSelector.userSelectNetwork(configs.length - 1, true);
        String key = configs[configs.length - 1].configKey();
        for (int index = 0; index < configs.length; index++) {
            WifiConfiguration config = configs[index];
            WifiConfiguration.NetworkSelectionStatus status = config.getNetworkSelectionStatus();
            if (index == configs.length - 1) {
                assertEquals("User selected network should not have prefernce over it", null,
                        status.getConnectChoice());
            } else {
                assertEquals("Wrong user preference", key, status.getConnectChoice());
            }
        }
!!!37194423.java!!!	chooseUserPreferredNetwork() : void
        String[] ssids = {"\"test1\"", "\"test2\"", "\"test3\""};
        int[] security = {SECURITY_PSK, SECURITY_PSK, SECURITY_NONE};

        final WifiConfiguration[] configs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(configs);
        for (WifiConfiguration network : configs) {
            WifiConfiguration.NetworkSelectionStatus status = network.getNetworkSelectionStatus();
            status.setSeenInLastQualifiedNetworkSelection(true);
        }

        when(mWifiConfigManager.getSavedNetworks()).thenReturn(Arrays.asList(configs));

        //set user preference
        mWifiQualifiedNetworkSelector.userSelectNetwork(ssids.length - 1, true);
        //Generate mocked recent scan results
        String[] bssids = {"6c:f3:7f:ae:8c:f3", "6c:f3:7f:ae:8c:f4", "6c:f3:7f:ae:8c:f5"};
        int[] frequencies = {2437, 5180, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]", "NONE"};
        int[] levels = {-50, -65, -55};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        scanResultLinkConfiguration(configs, scanDetails);

        ScanResult chosenScanResult = scanDetails.get(scanDetails.size() - 1).getScanResult();
        when(mWifiConfigManager.getWifiConfiguration(configs[2].configKey()))
                .thenReturn(configs[2]);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);
        verifySelectedResult(chosenScanResult, candidate);
!!!37194551.java!!!	enableBssidTest() : void
        String bssidA = "6c:f3:7f:ae:8c:f3";
        String bssidB = "6c:f3:7f:ae:8c:f4";
        //check by default these two BSSIDs should be enabled
        assertEquals("bssidA should be enabled by default",
                mWifiQualifiedNetworkSelector.isBssidDisabled(bssidA), false);
        assertEquals("bssidB should be enabled by default",
                mWifiQualifiedNetworkSelector.isBssidDisabled(bssidB), false);

        //disable bssidA 3 times, check whether A is dsiabled and B is still enabled
        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssidA, false);
        assertEquals("bssidA should be disabled",
                mWifiQualifiedNetworkSelector.isBssidDisabled(bssidA), false);
        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssidA, false);
        assertEquals("bssidA should be disabled",
                mWifiQualifiedNetworkSelector.isBssidDisabled(bssidA), false);
        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssidA, false);
        assertEquals("bssidA should be disabled",
                mWifiQualifiedNetworkSelector.isBssidDisabled(bssidA), true);
        assertEquals("bssidB should still be enabled",
                mWifiQualifiedNetworkSelector.isBssidDisabled(bssidB), false);

        //re-enable bssidA, check whether A is dsiabled and B is still enabled
        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssidA, true);
        assertEquals("bssidA should be enabled by default",
                mWifiQualifiedNetworkSelector.isBssidDisabled(bssidA), false);
        assertEquals("bssidB should be enabled by default",
                mWifiQualifiedNetworkSelector.isBssidDisabled(bssidB), false);

        //make sure illegal input will not cause crash
        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(null, false);
        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(null, true);
!!!37194679.java!!!	networkChooseWithOneBssidDisabled() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-65, -50};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();

        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssids[1], false);
        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssids[1], false);
        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssids[1], false);
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        verifySelectedResult(chosenScanResult, candidate);
!!!37194807.java!!!	networkChooseWithOneBssidReenaabled() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-65, -50};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        ScanResult chosenScanResult = scanDetails.get(1).getScanResult();

        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssids[1], false);
        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssids[1], false);
        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssids[1], false);
        //re-enable it
        mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssids[1], true);
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        verifySelectedResult(chosenScanResult, candidate);
!!!37194935.java!!!	networkChooseWithOneBssidDisableExpire() : void
        String[] ssids = {"\"test1\"", "\"test2\"", "\"test3\""};
        String[] bssids = {"6c:f3:7f:ae:8c:f3", "6c:f3:7f:ae:8c:f4", "6c:f3:7f:ae:8c:f5"};
        int[] frequencies = {2437, 5180, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]",
                "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-65, -50, -60};
        int[] security = {SECURITY_PSK, SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        ScanResult chosenScanResult = scanDetails.get(1).getScanResult();

        for (int index = 0; index < WifiQualifiedNetworkSelector.BSSID_BLACKLIST_THRESHOLD;
                index++) {
            mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssids[1], false);
            mWifiQualifiedNetworkSelector.enableBssidForQualityNetworkSelection(bssids[2], false);
        }

        //re-enable it
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime()
                + WifiQualifiedNetworkSelector.BSSID_BLACKLIST_EXPIRE_TIME);
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        verifySelectedResult(chosenScanResult, candidate);
!!!37195063.java!!!	networkChooseWithOneSsidDisabled() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-65, -50};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();

        when(mWifiConfigManager.tryEnableQualifiedNetwork(anyInt())).thenReturn(true);
        savedConfigs[1].getNetworkSelectionStatus().setNetworkSelectionStatus(
                WifiConfiguration.NetworkSelectionStatus.NETWORK_SELECTION_TEMPORARY_DISABLED);
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);

        verifySelectedResult(chosenScanResult, candidate);
!!!37195191.java!!!	noQNSWhenLinkBouncingDisconnected() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {WifiQualifiedNetworkSelector.MINIMUM_2G_ACCEPT_RSSI - 1,
                WifiQualifiedNetworkSelector.MINIMUM_5G_ACCEPT_RSSI - 1};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, true, false, true, false);

        assertEquals("choose the wrong network", null, candidate);
!!!37195319.java!!!	networkSelectionInShortGap() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-50, -65};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        //first QNS
        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);
        //immediately second QNS
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, false, true, false);
        ScanResult chosenScanResult = scanDetails.get(1).getScanResult();

        verifySelectedResult(chosenScanResult, candidate);
!!!37195447.java!!!	noNetworkSelectionDueToShortGap() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-50, -65};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        //first QNS
        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);
        //immediately second QNS
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        ScanResult chosenScanResult = scanDetails.get(1).getScanResult();
        assertEquals("choose the wrong BSSID", null, candidate);
!!!37195575.java!!!	forceNetworkSelectionInShortGap() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-50, -65};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        //first QNS
        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);
        //immediately second QNS
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(true,
                false, scanDetails, false, true, false, false);
        ScanResult chosenScanResult = scanDetails.get(1).getScanResult();

        verifySelectedResult(chosenScanResult, candidate);
!!!37195703.java!!!	noNewNetworkSelectionDuetoUserDisableSwitchWhenConnected() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-50, -65};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        assertEquals("choose the wrong BSSID", null, candidate);
        assertEquals("Should receive zero filteredScanDetails", 0,
                mWifiQualifiedNetworkSelector.getFilteredScanDetails().size());
!!!37195831.java!!!	noNewQNSCurrentNetworkQualified() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-65, WifiQualifiedNetworkSelector.QUALIFIED_RSSI_5G_BAND};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        //first time, connect to test2 due to 5GHz bonus
        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);
        when(mWifiInfo.getNetworkId()).thenReturn(1);
        when(mWifiInfo.getBSSID()).thenReturn(bssids[1]);
        when(mWifiInfo.is24GHz()).thenReturn(false);
        when(mWifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime() + 11 * 1000);

        levels[0] = -50; // if there is QNS, test1 will be chosen
        scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        assertEquals("choose the wrong BSSID", null, candidate);
!!!37195959.java!!!	noNewQNSLinkBouncing() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 5180};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-70, -75};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        //first connect to test2 due to 5GHz bonus
        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);
        when(mWifiInfo.getNetworkId()).thenReturn(1);
        when(mWifiInfo.getBSSID()).thenReturn(bssids[1]);
        when(mWifiInfo.is24GHz()).thenReturn(false);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime() + 11 * 1000);
        when(mWifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, true, true, false, false);
        assertEquals("choose the wrong BSSID", null, candidate);
!!!37196087.java!!!	currentNetworkNotQualifiedDueToBandMismatch() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-50, -65};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        when(mWifiInfo.getNetworkId()).thenReturn(0);
        when(mWifiInfo.getBSSID()).thenReturn(bssids[0]);
        when(mWifiInfo.is24GHz()).thenReturn(true);
        //connect to config2 first
        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);

        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime() + 11 * 1000);
        when(mWifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);

        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        verifySelectedResult(chosenScanResult, candidate);
!!!37196215.java!!!	currentNetworkNotQualifiedDueToOpenNetwork() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {5400, 5400};
        String[] caps = {"[ESS]", "[ESS]"};
        int[] levels = {-70, -65};
        int[] security = {SECURITY_NONE, SECURITY_NONE};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        //first connect to test2 because of RSSI
        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);
        when(mWifiInfo.getNetworkId()).thenReturn(1);
        when(mWifiInfo.getBSSID()).thenReturn(bssids[1]);
        when(mWifiInfo.is24GHz()).thenReturn(false);
        when(mWifiInfo.is5GHz()).thenReturn(true);
        when(mWifiConfigManager.isOpenNetwork(savedConfigs[1])).thenReturn(true);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime() + 11 * 1000);
        when(mWifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);
        levels[0] = -60;
        scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        verifySelectedResult(chosenScanResult, candidate);
!!!37196343.java!!!	currentNetworkNotQualifiedDueToEphemeral() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {5200, 5200};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-100, -50};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        savedConfigs[1].ephemeral = true;
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        //first connect to test2 since test1's RSSI is negligible
        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);
        when(mWifiInfo.getNetworkId()).thenReturn(1);
        when(mWifiInfo.getBSSID()).thenReturn(bssids[1]);
        when(mWifiInfo.is24GHz()).thenReturn(false);

        levels[0] = -70;
        scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        when(mWifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime() + 11 * 1000);

        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        verifySelectedResult(chosenScanResult, candidate);
!!!37196471.java!!!	currentNetworkNotQualifiedDueToLow5GRssi() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {5200, 5200};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-80, WifiQualifiedNetworkSelector.QUALIFIED_RSSI_5G_BAND - 1};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);
        when(mWifiInfo.getNetworkId()).thenReturn(1);
        when(mWifiInfo.getBSSID()).thenReturn(bssids[1]);
        when(mWifiInfo.getRssi()).thenReturn(levels[1]);
        when(mWifiInfo.is24GHz()).thenReturn(false);
        when(mWifiInfo.is5GHz()).thenReturn(true);

        when(mWifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime() + 11 * 1000);
        levels[0] = -60;
        scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        verifySelectedResult(chosenScanResult, candidate);
!!!37196599.java!!!	currentNetworkNotQualifiedDueToLow2GRssi() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-100, WifiQualifiedNetworkSelector.QUALIFIED_RSSI_24G_BAND - 1};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);
        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);

        when(mWifiInfo.getNetworkId()).thenReturn(1);
        when(mWifiInfo.getBSSID()).thenReturn(bssids[1]);
        when(mWifiInfo.getRssi()).thenReturn(levels[1]);
        when(mWifiInfo.is24GHz()).thenReturn(false);
        when(mWifiInfo.is5GHz()).thenReturn(true);

        when(mWifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);
        levels[0] = -60;
        scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime() + 11 * 1000);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        verifySelectedResult(chosenScanResult, candidate);
!!!37196727.java!!!	currentNetworkStayDueToSameNetworkBonus() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-100, -80};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);
        when(mWifiInfo.getNetworkId()).thenReturn(1);
        when(mWifiInfo.getBSSID()).thenReturn(bssids[1]);
        when(mWifiInfo.is24GHz()).thenReturn(true);

        when(mWifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);
        levels[0] = -80 + WifiQualifiedNetworkSelector.SAME_BSSID_AWARD / 4
                + WifiQualifiedNetworkSelector.SAME_NETWORK_AWARD / 4 - 1;
        scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime() + 11 * 1000);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        ScanResult chosenScanResult = scanDetails.get(1).getScanResult();
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        verifySelectedResult(chosenScanResult, candidate);
!!!37196855.java!!!	switchNetworkStayDueToCurrentNetworkRssiLow() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-100, -80};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);

        when(mWifiInfo.getNetworkId()).thenReturn(1);
        when(mWifiInfo.getBSSID()).thenReturn(bssids[1]);
        when(mWifiInfo.is24GHz()).thenReturn(true);

        when(mWifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);
        levels[0] = -80 + WifiQualifiedNetworkSelector.SAME_BSSID_AWARD / 4
                + WifiQualifiedNetworkSelector.SAME_NETWORK_AWARD / 4 + 1;
        scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime() + 11 * 1000);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        verifySelectedResult(chosenScanResult, candidate);
!!!37196983.java!!!	currentBssidStayDueToSameBSSIDBonus() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-100, -80};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        //link two configuration
        savedConfigs[0].linkedConfigurations = new HashMap<String, Integer>();
        savedConfigs[1].linkedConfigurations = new HashMap<String, Integer>();
        savedConfigs[0].linkedConfigurations.put(savedConfigs[1].configKey(), 1);
        savedConfigs[1].linkedConfigurations.put(savedConfigs[0].configKey(), 1);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);

        when(mWifiInfo.getNetworkId()).thenReturn(1);
        when(mWifiInfo.getBSSID()).thenReturn(bssids[1]);
        when(mWifiInfo.is24GHz()).thenReturn(true);

        when(mWifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);
        levels[0] = -80 + WifiQualifiedNetworkSelector.SAME_NETWORK_AWARD / 4 - 1;
        scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime() + 11 * 1000);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        ScanResult chosenScanResult = scanDetails.get(1).getScanResult();
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        verifySelectedResult(chosenScanResult, candidate);
!!!37197111.java!!!	swithBssidDueToLowRssi() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {2437, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS][ESS]"};
        int[] levels = {-100, -80};
        int[] security = {SECURITY_PSK, SECURITY_PSK};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(ssids, security);
        //link two configuration
        savedConfigs[0].linkedConfigurations = new HashMap<String, Integer>();
        savedConfigs[1].linkedConfigurations = new HashMap<String, Integer>();
        savedConfigs[0].linkedConfigurations.put(savedConfigs[1].configKey(), 1);
        savedConfigs[1].linkedConfigurations.put(savedConfigs[0].configKey(), 1);
        prepareConfigStore(savedConfigs);

        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false, false, scanDetails, false,
                false, true, false);

        when(mWifiInfo.getNetworkId()).thenReturn(1);
        when(mWifiInfo.getBSSID()).thenReturn(bssids[1]);
        when(mWifiInfo.is24GHz()).thenReturn(true);

        when(mWifiConfigManager.getEnableAutoJoinWhenAssociated()).thenReturn(true);
        levels[0] = -80 + WifiQualifiedNetworkSelector.SAME_BSSID_AWARD / 4 + 1;
        scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime() + 11 * 1000);
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();
        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(false,
                false, scanDetails, false, true, false, false);
        verifySelectedResult(chosenScanResult, candidate);
!!!37197239.java!!!	selectQualifiedNetworkChoosesEphemeral() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {5200, 5200};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[ESS]"};
        int[] levels = {-70, -70};
        Integer[] scores = {null, 120};
        boolean[] meteredHints = {false, true};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        configureScoreCache(scanDetails, scores, meteredHints);

        // No saved networks.
        when(mWifiConfigManager.updateSavedNetworkWithNewScanDetail(any(ScanDetail.class),
                anyBoolean())).thenReturn(null);

        WifiConfiguration unTrustedNetworkCandidate = mock(WifiConfiguration.class);
        // Setup the config as an invalid candidate. This is done to workaround a Mockito issue.
        // Basically Mockito is unable to mock package-private methods in classes loaded from a
        // different Jar (like all of the framework code) which results in the actual saveNetwork()
        // method being invoked in this case. Because the config is invalid it quickly returns.
        unTrustedNetworkCandidate.SSID = null;
        unTrustedNetworkCandidate.networkId = WifiConfiguration.INVALID_NETWORK_ID;
        ScanResult untrustedScanResult = scanDetails.get(1).getScanResult();
        when(mWifiConfigManager
                .wifiConfigurationFromScanResult(untrustedScanResult))
                .thenReturn(unTrustedNetworkCandidate);

        WifiConfiguration.NetworkSelectionStatus selectionStatus =
                mock(WifiConfiguration.NetworkSelectionStatus.class);
        when(unTrustedNetworkCandidate.getNetworkSelectionStatus()).thenReturn(selectionStatus);
        when(selectionStatus.getCandidate()).thenReturn(untrustedScanResult);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(
                false /* forceSelectNetwork */,
                true /* isUntrustedConnectionsAllowed */,
                scanDetails,
                false, /* isLinkDebouncing */
                false, /* isConnected */
                true, /* isDisconnected */
                false /* isSupplicantTransient */);
        verify(selectionStatus).setCandidate(untrustedScanResult);
        assertSame(unTrustedNetworkCandidate, candidate);
        assertEquals(meteredHints[1], candidate.meteredHint);
!!!37197367.java!!!	testGetFilteredScanDetailsReturnsOnlyConsideredScanDetails_untrustedAllowed() : void
        String[] ssids = {"\"test1\"", "\"test2\"", "\"test3\"", "\"test4\""};
        String[] bssids = {"6c:f3:7f:ae:8c:f3", "6c:f3:7f:ae:8c:f4", "de:ad:ba:b1:e5:55",
                "c0:ff:ee:ee:e3:ee"};
        int[] frequencies = {2437, 5180, 5180, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS]",
                "[WPA2-EAP-CCMP][ESS]"};
        int[] levels = {-60, -86, -50, -62};
        int[] security = {SECURITY_PSK, SECURITY_PSK, SECURITY_PSK, SECURITY_PSK};
        boolean[] meteredHints = {false, false, false, true};
        Integer[] scores = {null, null, null, 120};

        //Create all 4 scanDetails
        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);

        //Setup NetworkScoreCache for detecting ephemeral networks ("test4")
        configureScoreCache(scanDetails, scores, meteredHints);
        WifiConfiguration unTrustedNetworkCandidate = mock(WifiConfiguration.class);
        unTrustedNetworkCandidate.SSID = null;
        unTrustedNetworkCandidate.networkId = WifiConfiguration.INVALID_NETWORK_ID;
        ScanResult untrustedScanResult = scanDetails.get(3).getScanResult();
        when(mWifiConfigManager
                .wifiConfigurationFromScanResult(untrustedScanResult))
                .thenReturn(unTrustedNetworkCandidate);
        WifiConfiguration.NetworkSelectionStatus selectionStatus =
                        mock(WifiConfiguration.NetworkSelectionStatus.class);
        when(unTrustedNetworkCandidate.getNetworkSelectionStatus()).thenReturn(selectionStatus);

        //Set up associated configs for test1 & test2
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(
                Arrays.copyOfRange(ssids, 0, 2), Arrays.copyOfRange(security, 0, 2));
        prepareConfigStore(savedConfigs);
        List<ScanDetail> savedScanDetails = new ArrayList<ScanDetail>(scanDetails.subList(0, 2));
        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, savedScanDetails);

        //Force mock ConfigManager to return null (and not an empty list) for "test3" & "test4"
        when(mWifiConfigManager.updateSavedNetworkWithNewScanDetail(eq(scanDetails.get(2)),
                anyBoolean())).thenReturn(null);
        when(mWifiConfigManager.updateSavedNetworkWithNewScanDetail(eq(scanDetails.get(3)),
                anyBoolean())).thenReturn(null);

        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(
                false /* forceSelectNetwork */,
                true /* isUntrustedConnectionsAllowed */,
                scanDetails,
                false, /* isLinkDebouncing */
                false, /* isConnected */
                true, /* isDisconnected */
                false /* isSupplicantTransient */);

        verifySelectedResult(chosenScanResult, candidate);
        //Verify two scanDetails returned in the filteredScanDetails
        assertEquals(2, mWifiQualifiedNetworkSelector.getFilteredScanDetails().size());
        assertEquals(mWifiQualifiedNetworkSelector.getFilteredScanDetails().get(0).first.toString(),
                scanDetails.get(0).toString());
        assertEquals(mWifiQualifiedNetworkSelector.getFilteredScanDetails().get(1).first.toString(),
                scanDetails.get(3).toString());
!!!37197495.java!!!	testGetFilteredScanDetailsReturnsOnlyConsideredScanDetails_untrustedDisallowed() : void
        String[] ssids = {"\"test1\"", "\"test2\"", "\"test3\"", "\"test4\""};
        String[] bssids = {"6c:f3:7f:ae:8c:f3", "6c:f3:7f:ae:8c:f4", "de:ad:ba:b1:e5:55",
                "c0:ff:ee:ee:e3:ee"};
        int[] frequencies = {2437, 5180, 5180, 2437};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS]", "[WPA2-EAP-CCMP][ESS]",
                "[WPA2-EAP-CCMP][ESS]"};
        int[] levels = {-60, -86, -50, -62};
        int[] security = {SECURITY_PSK, SECURITY_PSK, SECURITY_PSK, SECURITY_PSK};
        boolean[] meteredHints = {false, false, false, true};
        Integer[] scores = {null, null, null, 120};

        //Create all 4 scanDetails
        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);

        //Setup NetworkScoreCache for detecting ephemeral networks ("test4")
        configureScoreCache(scanDetails, scores, meteredHints);
        WifiConfiguration unTrustedNetworkCandidate = mock(WifiConfiguration.class);
        unTrustedNetworkCandidate.SSID = null;
        unTrustedNetworkCandidate.networkId = WifiConfiguration.INVALID_NETWORK_ID;
        ScanResult untrustedScanResult = scanDetails.get(3).getScanResult();
        when(mWifiConfigManager
                .wifiConfigurationFromScanResult(untrustedScanResult))
                .thenReturn(unTrustedNetworkCandidate);
        WifiConfiguration.NetworkSelectionStatus selectionStatus =
                        mock(WifiConfiguration.NetworkSelectionStatus.class);
        when(unTrustedNetworkCandidate.getNetworkSelectionStatus()).thenReturn(selectionStatus);

        //Set up associated configs for test1 & test2
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(
                Arrays.copyOfRange(ssids, 0, 2), Arrays.copyOfRange(security, 0, 2));
        prepareConfigStore(savedConfigs);
        List<ScanDetail> savedScanDetails = new ArrayList<ScanDetail>(scanDetails.subList(0, 2));
        final List<WifiConfiguration> savedNetwork = Arrays.asList(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(savedNetwork);
        scanResultLinkConfiguration(savedConfigs, savedScanDetails);

        //Force mock ConfigManager to return null (and not an empty list) for "test3" & "test4"
        when(mWifiConfigManager.updateSavedNetworkWithNewScanDetail(eq(scanDetails.get(2)),
                anyBoolean())).thenReturn(null);
        when(mWifiConfigManager.updateSavedNetworkWithNewScanDetail(eq(scanDetails.get(3)),
                anyBoolean())).thenReturn(null);

        ScanResult chosenScanResult = scanDetails.get(0).getScanResult();

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(
                false /* forceSelectNetwork */,
                false /* isUntrustedConnectionsAllowed */,
                scanDetails,
                false, /* isLinkDebouncing */
                false, /* isConnected */
                true, /* isDisconnected */
                false /* isSupplicantTransient */);

        verifySelectedResult(chosenScanResult, candidate);
        //Verify two scanDetails returned in the filteredScanDetails
        assertEquals(1, mWifiQualifiedNetworkSelector.getFilteredScanDetails().size());
        assertEquals(mWifiQualifiedNetworkSelector.getFilteredScanDetails().get(0).first.toString(),
                scanDetails.get(0).toString());
!!!37197623.java!!!	selectQualifiedNetworkDoesNotChooseDeletedEphemeral() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {5200, 5200};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[ESS]"};
        int[] levels = {-70, -70};
        Integer[] scores = {20, 120};
        boolean[] meteredHints = {true, false};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        configureScoreCache(scanDetails, scores, meteredHints);

        // No saved networks.
        when(mWifiConfigManager.updateSavedNetworkWithNewScanDetail(any(ScanDetail.class),
                anyBoolean())).thenReturn(null);

        WifiConfiguration unTrustedNetworkCandidate = mock(WifiConfiguration.class);
        // Setup the config as an invalid candidate. This is done to workaround a Mockito issue.
        // Basically Mockito is unable to mock package-private methods in classes loaded from a
        // different Jar (like all of the framework code) which results in the actual saveNetwork()
        // method being invoked in this case. Because the config is invalid it quickly returns.
        unTrustedNetworkCandidate.SSID = null;
        unTrustedNetworkCandidate.networkId = WifiConfiguration.INVALID_NETWORK_ID;
        ScanResult untrustedScanResult = scanDetails.get(0).getScanResult();
        when(mWifiConfigManager
                .wifiConfigurationFromScanResult(untrustedScanResult))
                .thenReturn(unTrustedNetworkCandidate);

        // The second scan result is for an ephemeral network which was previously deleted
        when(mWifiConfigManager
                .wasEphemeralNetworkDeleted(scanDetails.get(0).getScanResult().SSID))
                .thenReturn(false);
        when(mWifiConfigManager
                .wasEphemeralNetworkDeleted(scanDetails.get(1).getScanResult().SSID))
                .thenReturn(true);

        WifiConfiguration.NetworkSelectionStatus selectionStatus =
                mock(WifiConfiguration.NetworkSelectionStatus.class);
        when(unTrustedNetworkCandidate.getNetworkSelectionStatus()).thenReturn(selectionStatus);
        when(selectionStatus.getCandidate()).thenReturn(untrustedScanResult);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(
                false /* forceSelectNetwork */,
                true /* isUntrustedConnectionsAllowed */,
                scanDetails,
                false, /* isLinkDebouncing */
                false, /* isConnected */
                true, /* isDisconnected */
                false /* isSupplicantTransient */);
        verify(selectionStatus).setCandidate(untrustedScanResult);
        assertSame(candidate, unTrustedNetworkCandidate);
        assertEquals(meteredHints[0], candidate.meteredHint);
!!!37197751.java!!!	selectQualifiedNetworkPrefersSavedWithoutExternalScores() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {5200, 5200};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[ESS]"};
        int[] security = {SECURITY_PSK, SECURITY_PSK};
        int[] levels = {-70, -70};
        Integer[] scores = {null, 120};
        boolean[] meteredHints = {false, true};

        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        configureScoreCache(scanDetails, scores, meteredHints);

        WifiConfiguration[] savedConfigs = generateWifiConfigurations(DEFAULT_SSIDS, security);
        savedConfigs[1].useExternalScores = true; // test2 is set to use external scores.
        prepareConfigStore(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(Arrays.asList(savedConfigs));
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(
                false /* forceSelectNetwork */,
                false /* isUntrustedConnectionsAllowed */,
                scanDetails,
                false, /* isLinkDebouncing */
                false, /* isConnected */
                true, /* isDisconnected */
                false /* isSupplicantTransient */);
        verifySelectedResult(scanDetails.get(0).getScanResult(), candidate);
        assertSame(candidate, savedConfigs[0]);
!!!37197879.java!!!	selectQualifiedNetworkSelectsSavedWithExternalScores() : void
        String[] ssids = {"\"test1\""};
        String[] bssids = {"6c:f3:7f:ae:8c:f3"};
        int[] frequencies = {5200};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]"};
        int[] security = {SECURITY_PSK, SECURITY_PSK};
        int[] levels = {-70};
        Integer[] scores = {120};
        boolean[] meteredHints = {false};

        // Scan details only contains 1 ssid, test1.
        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        configureScoreCache(scanDetails, scores, meteredHints);

        // The saved config contains 2 ssids, test1 & test2.
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(DEFAULT_SSIDS, security);
        savedConfigs[0].useExternalScores = true; // test1 is set to use external scores.
        prepareConfigStore(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(Arrays.asList(savedConfigs));
        scanResultLinkConfiguration(savedConfigs, scanDetails);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(
                false /* forceSelectNetwork */,
                false /* isUntrustedConnectionsAllowed */,
                scanDetails,
                false, /* isLinkDebouncing */
                false, /* isConnected */
                true, /* isDisconnected */
                false /* isSupplicantTransient */);
        verifySelectedResult(scanDetails.get(0).getScanResult(), candidate);
        assertSame(candidate, savedConfigs[0]);
!!!37198007.java!!!	selectQualifiedNetworkPrefersSavedWithExternalScoresOverUntrusted() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {5200, 5200};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[ESS]"};
        int[] security = {SECURITY_PSK, SECURITY_PSK};
        int[] levels = {-70, -70};
        Integer[] scores = {120, 120};
        boolean[] meteredHints = {false, true};

        // Both networks are in the scan results.
        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        configureScoreCache(scanDetails, scores, meteredHints);

        // Set up the associated configs only for test1
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(
                Arrays.copyOfRange(ssids, 0, 1), Arrays.copyOfRange(security, 0, 1));
        savedConfigs[0].useExternalScores = true; // test1 is set to use external scores.
        prepareConfigStore(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(Arrays.asList(savedConfigs));
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        WifiConfiguration unTrustedNetworkCandidate = mock(WifiConfiguration.class);
        when(mWifiConfigManager
                .wifiConfigurationFromScanResult(scanDetails.get(1).getScanResult()))
                .thenReturn(unTrustedNetworkCandidate);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(
                false /* forceSelectNetwork */,
                true /* isUntrustedConnectionsAllowed */,
                scanDetails,
                false, /* isLinkDebouncing */
                false, /* isConnected */
                true, /* isDisconnected */
                false /* isSupplicantTransient */);
        verifySelectedResult(scanDetails.get(0).getScanResult(), candidate);
        assertSame(candidate, savedConfigs[0]);
!!!37198135.java!!!	selectQualifiedNetworkPrefersUntrustedOverScoredSaved() : void
        String[] ssids = DEFAULT_SSIDS;
        String[] bssids = DEFAULT_BSSIDS;
        int[] frequencies = {5200, 5200};
        String[] caps = {"[WPA2-EAP-CCMP][ESS]", "[ESS]"};
        int[] security = {SECURITY_PSK, SECURITY_PSK};
        int[] levels = {-70, -70};
        Integer[] scores = {10, 120};
        boolean[] meteredHints = {false, true};

        // Both networks are in the scan results.
        List<ScanDetail> scanDetails = getScanDetails(ssids, bssids, frequencies, caps, levels);
        configureScoreCache(scanDetails, scores, meteredHints);

        // Set up the associated configs only for test1
        WifiConfiguration[] savedConfigs = generateWifiConfigurations(
                Arrays.copyOfRange(ssids, 0, 1), Arrays.copyOfRange(security, 0, 1));
        savedConfigs[0].useExternalScores = true; // test1 is set to use external scores.
        prepareConfigStore(savedConfigs);
        when(mWifiConfigManager.getSavedNetworks()).thenReturn(Arrays.asList(savedConfigs));
        scanResultLinkConfiguration(savedConfigs, scanDetails);
        WifiConfiguration unTrustedNetworkCandidate = mock(WifiConfiguration.class);
        unTrustedNetworkCandidate.SSID = null;
        unTrustedNetworkCandidate.networkId = WifiConfiguration.INVALID_NETWORK_ID;
        ScanResult untrustedScanResult = scanDetails.get(1).getScanResult();
        when(mWifiConfigManager
                .wifiConfigurationFromScanResult(untrustedScanResult))
                .thenReturn(unTrustedNetworkCandidate);
        WifiConfiguration.NetworkSelectionStatus selectionStatus =
                mock(WifiConfiguration.NetworkSelectionStatus.class);
        when(unTrustedNetworkCandidate.getNetworkSelectionStatus()).thenReturn(selectionStatus);
        when(selectionStatus.getCandidate()).thenReturn(untrustedScanResult);

        WifiConfiguration candidate = mWifiQualifiedNetworkSelector.selectQualifiedNetwork(
                false /* forceSelectNetwork */,
                true /* isUntrustedConnectionsAllowed */,
                scanDetails,
                false, /* isLinkDebouncing */
                false, /* isConnected */
                true, /* isDisconnected */
                false /* isSupplicantTransient */);
        verify(selectionStatus).setCandidate(untrustedScanResult);
        assertSame(unTrustedNetworkCandidate, candidate);
!!!37198263.java!!!	externalScoreEvaluator_untrustedIsBest() : void
        WifiQualifiedNetworkSelector.ExternalScoreEvaluator evaluator =
                new WifiQualifiedNetworkSelector.ExternalScoreEvaluator(mLocalLog, true);
        ScanResult untrustedScanResult = new ScanResult();
        int untrustedScore = 100;
        evaluator.evalUntrustedCandidate(untrustedScore, untrustedScanResult);

        ScanResult savedScanResult = new ScanResult();
        int savedScore = 50;
        WifiConfiguration savedConfig = new WifiConfiguration();
        evaluator.evalSavedCandidate(savedScore, savedConfig, savedScanResult);
        assertEquals(WifiQualifiedNetworkSelector.ExternalScoreEvaluator
                .BestCandidateType.UNTRUSTED_NETWORK, evaluator.getBestCandidateType());
        assertEquals(untrustedScore, evaluator.getHighScore());
        assertSame(untrustedScanResult, evaluator.getScanResultCandidate());
!!!37198391.java!!!	externalScoreEvaluator_savedIsBest() : void
        WifiQualifiedNetworkSelector.ExternalScoreEvaluator evaluator =
                new WifiQualifiedNetworkSelector.ExternalScoreEvaluator(mLocalLog, true);
        ScanResult untrustedScanResult = new ScanResult();
        int untrustedScore = 50;
        evaluator.evalUntrustedCandidate(untrustedScore, untrustedScanResult);

        ScanResult savedScanResult = new ScanResult();
        int savedScore = 100;
        WifiConfiguration savedConfig = new WifiConfiguration();
        evaluator.evalSavedCandidate(savedScore, savedConfig, savedScanResult);
        assertEquals(WifiQualifiedNetworkSelector.ExternalScoreEvaluator
                .BestCandidateType.SAVED_NETWORK, evaluator.getBestCandidateType());
        assertEquals(savedScore, evaluator.getHighScore());
        assertSame(savedScanResult, evaluator.getScanResultCandidate());
!!!37198519.java!!!	externalScoreEvaluator_tieScores() : void
        WifiQualifiedNetworkSelector.ExternalScoreEvaluator evaluator =
                new WifiQualifiedNetworkSelector.ExternalScoreEvaluator(mLocalLog, true);
        ScanResult untrustedScanResult = new ScanResult();
        int untrustedScore = 100;
        evaluator.evalUntrustedCandidate(untrustedScore, untrustedScanResult);

        ScanResult savedScanResult = new ScanResult();
        int savedScore = 100;
        WifiConfiguration savedConfig = new WifiConfiguration();
        evaluator.evalSavedCandidate(savedScore, savedConfig, savedScanResult);
        assertEquals(WifiQualifiedNetworkSelector.ExternalScoreEvaluator
                .BestCandidateType.SAVED_NETWORK, evaluator.getBestCandidateType());
        assertEquals(savedScore, evaluator.getHighScore());
        assertSame(savedScanResult, evaluator.getScanResultCandidate());
!!!37198647.java!!!	externalScoreEvaluator_multipleScores() : void
        WifiQualifiedNetworkSelector.ExternalScoreEvaluator evaluator =
                new WifiQualifiedNetworkSelector.ExternalScoreEvaluator(mLocalLog, true);
        ScanResult untrustedScanResult = new ScanResult();
        int untrustedScore = 100;
        evaluator.evalUntrustedCandidate(untrustedScore, untrustedScanResult);
        evaluator.evalUntrustedCandidate(80, new ScanResult());

        ScanResult savedScanResult = new ScanResult();
        int savedScore = 100;
        WifiConfiguration savedConfig = new WifiConfiguration();
        evaluator.evalSavedCandidate(savedScore, savedConfig, savedScanResult);
        evaluator.evalSavedCandidate(90, new WifiConfiguration(), new ScanResult());
        assertEquals(WifiQualifiedNetworkSelector.ExternalScoreEvaluator
                .BestCandidateType.SAVED_NETWORK, evaluator.getBestCandidateType());
        assertEquals(savedScore, evaluator.getHighScore());
        assertSame(savedScanResult, evaluator.getScanResultCandidate());
!!!37198775.java!!!	externalScoreEvaluator_nullScores() : void
        WifiQualifiedNetworkSelector.ExternalScoreEvaluator evaluator =
                new WifiQualifiedNetworkSelector.ExternalScoreEvaluator(mLocalLog, true);
        evaluator.evalUntrustedCandidate(null, new ScanResult());
        assertEquals(WifiQualifiedNetworkSelector.ExternalScoreEvaluator
                .BestCandidateType.NONE, evaluator.getBestCandidateType());
        evaluator.evalSavedCandidate(null, new WifiConfiguration(), new ScanResult());
        assertEquals(WifiQualifiedNetworkSelector.ExternalScoreEvaluator
                .BestCandidateType.NONE, evaluator.getBestCandidateType());
