class KnownBandsChannelCollectionTest
!!!37235383.java!!!	setUp() : void
            mChannelCollection = new NoBandChannelHelper().createChannelCollection();
!!!37235511.java!!!	empty() : void
            WifiNative.BucketSettings bucketSettings = new WifiNative.BucketSettings();
            mChannelCollection.fillBucketSettings(bucketSettings, Integer.MAX_VALUE);
            assertThat(bucketSettings, channelsAre());

            assertEquals(Collections.<Integer>emptySet(),
                    mChannelCollection.getSupplicantScanFreqs());

            assertTrue(mChannelCollection.isEmpty());
            assertFalse(mChannelCollection.containsChannel(2400));
!!!37235639.java!!!	clear() : void
            mChannelCollection.addBand(WifiScanner.WIFI_BAND_24_GHZ);
            mChannelCollection.clear();

            WifiNative.BucketSettings bucketSettings = new WifiNative.BucketSettings();
            mChannelCollection.fillBucketSettings(bucketSettings, Integer.MAX_VALUE);
            assertThat(bucketSettings, channelsAre());

            assertEquals(Collections.<Integer>emptySet(),
                    mChannelCollection.getSupplicantScanFreqs());

            assertTrue(mChannelCollection.isEmpty());
            assertFalse(mChannelCollection.containsChannel(2400));
!!!37235767.java!!!	addBand() : void
            mChannelCollection.addBand(WifiScanner.WIFI_BAND_24_GHZ);

            WifiNative.BucketSettings bucketSettings = new WifiNative.BucketSettings();
            mChannelCollection.fillBucketSettings(bucketSettings, Integer.MAX_VALUE);
            assertThat(bucketSettings, bandIs(ALL_BANDS));

            assertNull(mChannelCollection.getSupplicantScanFreqs());

            assertFalse(mChannelCollection.isEmpty());
            assertTrue(mChannelCollection.containsChannel(2400));
            assertTrue(mChannelCollection.containsChannel(5150));
!!!37235895.java!!!	addChannel_single() : void
            mChannelCollection.addChannel(2400);

            WifiNative.BucketSettings bucketSettings = new WifiNative.BucketSettings();
            mChannelCollection.fillBucketSettings(bucketSettings, Integer.MAX_VALUE);
            assertThat(bucketSettings, channelsAre(2400));

            assertEquals(new HashSet<Integer>(Arrays.asList(2400)),
                    mChannelCollection.getSupplicantScanFreqs());

            assertFalse(mChannelCollection.isEmpty());
            assertTrue(mChannelCollection.containsChannel(2400));
            assertFalse(mChannelCollection.containsChannel(5150));
!!!37236023.java!!!	addChannel_multiple() : void
            mChannelCollection.addChannel(2400);
            mChannelCollection.addChannel(2450);

            WifiNative.BucketSettings bucketSettings = new WifiNative.BucketSettings();
            mChannelCollection.fillBucketSettings(bucketSettings, Integer.MAX_VALUE);
            assertThat(bucketSettings, channelsAre(2400, 2450));

            assertEquals(new HashSet<Integer>(Arrays.asList(2400, 2450)),
                    mChannelCollection.getSupplicantScanFreqs());

            assertFalse(mChannelCollection.isEmpty());
            assertTrue(mChannelCollection.containsChannel(2400));
            assertFalse(mChannelCollection.containsChannel(5150));
!!!37236151.java!!!	addChannel_and_addBand_sameBand() : void
            mChannelCollection.addBand(WifiScanner.WIFI_BAND_24_GHZ);
            mChannelCollection.addChannel(2400);

            WifiNative.BucketSettings bucketSettings = new WifiNative.BucketSettings();
            mChannelCollection.fillBucketSettings(bucketSettings, Integer.MAX_VALUE);
            assertThat(bucketSettings, bandIs(ALL_BANDS));

            assertNull(mChannelCollection.getSupplicantScanFreqs());

            assertFalse(mChannelCollection.isEmpty());
            assertTrue(mChannelCollection.containsChannel(2400));
            assertTrue(mChannelCollection.containsChannel(5150));
!!!37236279.java!!!	addChannel_and_addBand_withDifferentBandChannel() : void
            mChannelCollection.addBand(WifiScanner.WIFI_BAND_24_GHZ);
            mChannelCollection.addChannel(5150);

            WifiNative.BucketSettings bucketSettings = new WifiNative.BucketSettings();
            mChannelCollection.fillBucketSettings(bucketSettings, Integer.MAX_VALUE);
            assertThat(bucketSettings, bandIs(ALL_BANDS));

            assertNull(mChannelCollection.getSupplicantScanFreqs());

            assertFalse(mChannelCollection.isEmpty());
            assertTrue(mChannelCollection.containsChannel(2400));
            assertTrue(mChannelCollection.containsChannel(5150));
!!!37236407.java!!!	addChannel_and_addBand_all() : void
            mChannelCollection.addBand(WifiScanner.WIFI_BAND_BOTH_WITH_DFS);
            mChannelCollection.addChannel(5150);

            WifiNative.BucketSettings bucketSettings = new WifiNative.BucketSettings();
            mChannelCollection.fillBucketSettings(bucketSettings, Integer.MAX_VALUE);
            assertThat(bucketSettings, bandIs(WifiScanner.WIFI_BAND_BOTH_WITH_DFS));

            assertNull(mChannelCollection.getSupplicantScanFreqs());

            assertFalse(mChannelCollection.isEmpty());
            assertTrue(mChannelCollection.containsChannel(2400));
            assertTrue(mChannelCollection.containsChannel(5150));
            assertTrue(mChannelCollection.containsChannel(5600));
!!!37236535.java!!!	addChannel_exceedMaxChannels() : void
            mChannelCollection.addChannel(5600);
            mChannelCollection.addChannel(5650);
            mChannelCollection.addChannel(5660);

            WifiNative.BucketSettings bucketSettings = new WifiNative.BucketSettings();
            mChannelCollection.fillBucketSettings(bucketSettings, 2);
            assertThat(bucketSettings, bandIs(ALL_BANDS));
!!!37236663.java!!!	addChannel_exceedMaxChannelsOnMultipleBands() : void
            mChannelCollection.addChannel(2400);
            mChannelCollection.addChannel(2450);
            mChannelCollection.addChannel(5150);

            WifiNative.BucketSettings bucketSettings = new WifiNative.BucketSettings();
            mChannelCollection.fillBucketSettings(bucketSettings, 2);
            assertThat(bucketSettings, bandIs(ALL_BANDS));
