class ScanScheduleUtilFilterTest
!!!37236791.java!!!	setUp() : void
        mChannelHelper = new PresetKnownBandsChannelHelper(
                new int[]{2400, 2450},
                new int[]{5150, 5175},
                new int[]{5600, 5650});
!!!37236919.java!!!	reportFullResultTrueForBandsWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                WifiScanner.WIFI_BAND_24_GHZ, 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        assertTrue(ScanScheduleUtil.shouldReportFullScanResultForSettings(mChannelHelper,
                        createScanResult(2400), 0, settings, -1));
!!!37237047.java!!!	reportFullResultFalseForBandsWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                WifiScanner.WIFI_BAND_24_GHZ, 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        assertFalse(ScanScheduleUtil.shouldReportFullScanResultForSettings(mChannelHelper,
                        createScanResult(5150), 0, settings, 0));
!!!37237175.java!!!	reportFullResultTrueForChannelsWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        assertTrue(ScanScheduleUtil.shouldReportFullScanResultForSettings(mChannelHelper,
                        createScanResult(2400), 0, settings, 0));
!!!37237303.java!!!	reportFullResultFalseForChannelsWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        assertFalse(ScanScheduleUtil.shouldReportFullScanResultForSettings(mChannelHelper,
                        createScanResult(5175), 0, settings, 0));
!!!37237431.java!!!	reportFullResultTrueForChannelsWithBucketDefinitlyScanned() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        assertTrue(ScanScheduleUtil.shouldReportFullScanResultForSettings(mChannelHelper,
                        createScanResult(2400), 5, settings, 2));
!!!37237559.java!!!	reportFullResultFalseForChannelsWithBucketDefinitlyNotScanned() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        assertFalse(ScanScheduleUtil.shouldReportFullScanResultForSettings(mChannelHelper,
                        createScanResult(2400), 1, settings, 1));
!!!37237687.java!!!	filterScanDataEmptyWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                new ScanData[0], settings, -1);
        assertScanDataFreqsEquals(null, results);
!!!37237815.java!!!	filterScanDataSingleNotMatchingWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{ { 2450 } }), settings, 0);
        assertScanDataFreqsEquals(null, results);
!!!37237943.java!!!	filterScanDataSingleNotMatchingWithDefinitlyScannedBucketIndex() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{ { 2450 } }), settings, -1);
        assertScanDataFreqsEquals(new int[][]{ { } }, results);
!!!37238071.java!!!	filterScanDataSingleNotMatchingWithBucketDefinitlyScanned() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{ { 2450 } }, new int[]{ 2 }), settings, 1);
        assertScanDataFreqsEquals(new int[][]{ { } }, results);
!!!37238199.java!!!	filterScanDataSingleMatchingWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{ { 2400 } }), settings, 0);

        assertScanDataFreqsEquals(new int[][]{ { 2400 } }, results);
!!!37238327.java!!!	filterScanDataSingleMatchingWithBucketDefinitlyNotScanned() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{ { 2400 } }, new int[] { 5 }), settings, 1);

        assertScanDataFreqsEquals(null, results);
!!!37238455.java!!!	filterScanDataSinglePartialMatchingWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{ { 2400, 2450, 5150, 5175 } }), settings, 0);

        assertScanDataFreqsEquals(new int[][]{ { 2400, 5150 } }, results);
!!!37238583.java!!!	filterScanDataMultipleNotMatchingWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{ { 2450 }, { 2450, 5175 } }), settings, 0);
        assertScanDataFreqsEquals(null, results);
!!!37238711.java!!!	filterScanDataMultipleNotMatchingWithOneDefinitlyScanned() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{ { 2450 }, { 2450, 5175 } }, new int[]{ 1, 8 }),
                settings, 3);
        assertScanDataFreqsEquals(new int[][]{ {} }, results);
!!!37238839.java!!!	filterScanDataMultipleMatchingWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{ { 2400 }, {2400, 5150} }), settings, 0);

        assertScanDataFreqsEquals(new int[][]{ { 2400 }, {2400, 5150} }, results);
!!!37238967.java!!!	filterScanDataMultiplePartialMatchingWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{ { 2400, 2450, 5150, 5175 }, { 2400, 2450, 5175 } }),
                settings, -1);

        assertScanDataFreqsEquals(new int[][]{ { 2400, 5150 }, { 2400 } }, results);
!!!37239095.java!!!	filterScanDataMultipleDuplicateFrequenciesWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{
                        { 2400, 2450, 5150, 5175, 2400 },
                        { 2400, 2450, 5175 },
                        { 5175, 5175, 5150 } }), settings, 0);

        assertScanDataFreqsEquals(new int[][]{ { 2400, 5150, 2400 }, { 2400 }, { 5150 } }, results);
!!!37239223.java!!!	filterScanDataMultipleSomeNotMatchingWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 20,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{
                        { 2400, 2450, 5150, 5175, 2400 },
                        { 5175 },
                        { 5175, 5175, 5150 } }), settings, 0);

        assertScanDataFreqsEquals(new int[][]{ { 2400, 5150, 2400 }, { 5150 } }, results);
!!!37239351.java!!!	filterScanDataExceedMaxBssidsPerScanWithNoBucketInfo() : void
        ScanSettings settings = createRequest(
                channelsToSpec(2400, 5150), 30000, 0, 3,
                WifiScanner.REPORT_EVENT_FULL_SCAN_RESULT
        );

        ScanData[] results = ScanScheduleUtil.filterResultsForSettings(mChannelHelper,
                createScanDatas(new int[][]{
                        { 2400, 2450, 5150, 5175, 2400, 2400},
                        { 5175 },
                        { 5175, 5175, 5150, 2400, 2400, 5150 } }), settings, 0);

        assertScanDataFreqsEquals(new int[][]{ { 2400, 5150, 2400 }, { 5150, 2400, 2400 } },
                results);
!!!37239479.java!!!	assertScanDataFreqsEquals(inout expected : int, inout results : WifiScanner::ScanData) : void
        if (expected == null) {
            assertNull("Expected no results", results);
        } else {
            assertNotNull("Expected some results", results);
            assertEquals("num scans", expected.length, results.length);
            for (int i = 0; i < expected.length; ++i) {
                assertNotNull("scan[" + i + "] was null", results[i]);
                assertEquals("num aps in scan[" + i + "]", expected[i].length,
                        results[i].getResults().length);
                for (int j = 0; j < expected[i].length; ++j) {
                    assertNotNull("ap result[" + i + "][" + j + "] was null",
                            results[i].getResults()[j]);
                    assertEquals("ap freq in result[" + i + "][" + j + "]", expected[i][j],
                            results[i].getResults()[j].frequency);
                }
            }
        }
