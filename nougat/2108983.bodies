class SupplicantPnoScannerTest
!!!37239607.java!!!	setup() : void
        MockitoAnnotations.initMocks(this);

        mLooper = new MockLooper();
        mAlarmManager = new MockAlarmManager();
        mWifiMonitor = new MockWifiMonitor();
        mResources = new MockResources();

        when(mWifiNative.getInterfaceName()).thenReturn("a_test_interface_name");
        when(mContext.getSystemService(Context.ALARM_SERVICE))
                .thenReturn(mAlarmManager.getAlarmManager());
        when(mContext.getResources()).thenReturn(mResources);
        when(mClock.elapsedRealtime()).thenReturn(SystemClock.elapsedRealtime());
!!!37239735.java!!!	startHwDisconnectedPnoScan() : void
        createScannerWithHwPnoScanSupport();

        WifiNative.PnoEventHandler pnoEventHandler = mock(WifiNative.PnoEventHandler.class);
        WifiNative.PnoSettings pnoSettings = createDummyPnoSettings(false);
        ScanResults scanResults = createDummyScanResults();

        InOrder order = inOrder(pnoEventHandler, mWifiNative);
        // Start PNO scan
        startSuccessfulPnoScan(null, pnoSettings, null, pnoEventHandler);
        expectSuccessfulHwDisconnectedPnoScan(order, pnoSettings, pnoEventHandler, scanResults);
        verifyNoMoreInteractions(pnoEventHandler);
!!!37239863.java!!!	pauseResumeHwDisconnectedPnoScanForSingleScan() : void
        createScannerWithHwPnoScanSupport();

        WifiNative.PnoEventHandler pnoEventHandler = mock(WifiNative.PnoEventHandler.class);
        WifiNative.PnoSettings pnoSettings = createDummyPnoSettings(false);
        WifiNative.ScanEventHandler eventHandler = mock(WifiNative.ScanEventHandler.class);
        WifiNative.ScanSettings settings = createDummyScanSettings();
        ScanResults scanResults = createDummyScanResults();

        InOrder order = inOrder(eventHandler, mWifiNative);
        // Start PNO scan
        startSuccessfulPnoScan(null, pnoSettings, null, pnoEventHandler);
        // Start single scan
        assertTrue(mScanner.startSingleScan(settings, eventHandler));
        // Verify that the PNO scan was paused and single scan runs successfully
        expectSuccessfulSingleScanWithHwPnoEnabled(order, eventHandler,
                expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ), new HashSet<Integer>(),
                scanResults);
        verifyNoMoreInteractions(eventHandler);

        order = inOrder(pnoEventHandler, mWifiNative);
        // Resume PNO scan after the single scan results are received and PNO monitor debounce
        // alarm fires.
        assertTrue("dispatch pno monitor alarm",
                mAlarmManager.dispatch(
                        SupplicantWifiScannerImpl.HwPnoDebouncer.PNO_DEBOUNCER_ALARM_TAG));
        assertEquals("dispatch message after alarm", 1, mLooper.dispatchAll());
        // Now verify that PNO scan is resumed successfully
        expectSuccessfulHwDisconnectedPnoScan(order, pnoSettings, pnoEventHandler, scanResults);
        verifyNoMoreInteractions(pnoEventHandler);
!!!37239991.java!!!	startSwDisconnectedPnoScan() : void
        createScannerWithSwPnoScanSupport();
        doSuccessfulSwPnoScanTest(false);
!!!37240119.java!!!	startHwConnectedPnoScan() : void
        createScannerWithHwPnoScanSupport();
        doSuccessfulSwPnoScanTest(true);
!!!37240247.java!!!	startSwConnectedPnoScan() : void
        createScannerWithSwPnoScanSupport();
        doSuccessfulSwPnoScanTest(true);
!!!37240375.java!!!	delayedHwDisconnectedPnoScanFailure() : void
        createScannerWithHwPnoScanSupport();

        WifiNative.PnoEventHandler pnoEventHandler = mock(WifiNative.PnoEventHandler.class);
        WifiNative.PnoSettings pnoSettings = createDummyPnoSettings(false);
        WifiNative.ScanEventHandler eventHandler = mock(WifiNative.ScanEventHandler.class);
        WifiNative.ScanSettings settings = createDummyScanSettings();
        ScanResults scanResults = createDummyScanResults();

        InOrder order = inOrder(eventHandler, mWifiNative);
        // Start PNO scan
        startSuccessfulPnoScan(null, pnoSettings, null, pnoEventHandler);
        // Start single scan
        assertTrue(mScanner.startSingleScan(settings, eventHandler));
        // Verify that the PNO scan was paused and single scan runs successfully
        expectSuccessfulSingleScanWithHwPnoEnabled(order, eventHandler,
                expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ), new HashSet<Integer>(),
                scanResults);
        verifyNoMoreInteractions(eventHandler);

        // Fail the PNO resume and check that the OnPnoScanFailed callback is invoked.
        order = inOrder(pnoEventHandler, mWifiNative);
        when(mWifiNative.setPnoScan(true)).thenReturn(false);
        assertTrue("dispatch pno monitor alarm",
                mAlarmManager.dispatch(
                        SupplicantWifiScannerImpl.HwPnoDebouncer.PNO_DEBOUNCER_ALARM_TAG));
        assertEquals("dispatch message after alarm", 1, mLooper.dispatchAll());
        order.verify(pnoEventHandler).onPnoScanFailed();
        verifyNoMoreInteractions(pnoEventHandler);

        // Add a new PNO scan request
        startSuccessfulPnoScan(null, pnoSettings, null, pnoEventHandler);
        assertTrue("dispatch pno monitor alarm",
                mAlarmManager.dispatch(
                        SupplicantWifiScannerImpl.HwPnoDebouncer.PNO_DEBOUNCER_ALARM_TAG));
        assertEquals("dispatch message after alarm", 1, mLooper.dispatchAll());
        expectSuccessfulHwDisconnectedPnoScan(order, pnoSettings, pnoEventHandler, scanResults);
        verifyNoMoreInteractions(pnoEventHandler);
!!!37240503.java!!!	doSuccessfulSwPnoScanTest(inout isConnectedPno : boolean) : void
        WifiNative.PnoEventHandler pnoEventHandler = mock(WifiNative.PnoEventHandler.class);
        WifiNative.PnoSettings pnoSettings = createDummyPnoSettings(isConnectedPno);
        WifiNative.ScanEventHandler scanEventHandler = mock(WifiNative.ScanEventHandler.class);
        WifiNative.ScanSettings scanSettings = createDummyScanSettings();
        ScanResults scanResults = createDummyScanResults();

        InOrder order = inOrder(scanEventHandler, mWifiNative);

        // Start PNO scan
        startSuccessfulPnoScan(scanSettings, pnoSettings, scanEventHandler, pnoEventHandler);

        expectSuccessfulSwPnoScan(order, scanEventHandler, scanResults);

        verifyNoMoreInteractions(pnoEventHandler);
!!!37240631.java!!!	createScannerWithHwPnoScanSupport() : void
        mResources.setBoolean(R.bool.config_wifi_background_scan_support, true);
        mScanner =
                new SupplicantWifiScannerImpl(mContext, mWifiNative, mLooper.getLooper(), mClock);
!!!37240759.java!!!	createScannerWithSwPnoScanSupport() : void
        mResources.setBoolean(R.bool.config_wifi_background_scan_support, false);
        mScanner =
                new SupplicantWifiScannerImpl(mContext, mWifiNative, mLooper.getLooper(), mClock);
!!!37240887.java!!!	createDummyPnoSettings(inout isConnected : boolean) : WifiNative::PnoSettings
        WifiNative.PnoSettings pnoSettings = new WifiNative.PnoSettings();
        pnoSettings.isConnected = isConnected;
        pnoSettings.networkList = new WifiNative.PnoNetwork[2];
        pnoSettings.networkList[0] = new WifiNative.PnoNetwork();
        pnoSettings.networkList[0].ssid = "ssid_pno_1";
        pnoSettings.networkList[0].networkId = 1;
        pnoSettings.networkList[0].priority = 1;
        pnoSettings.networkList[1] = new WifiNative.PnoNetwork();
        pnoSettings.networkList[1].ssid = "ssid_pno_2";
        pnoSettings.networkList[1].networkId = 2;
        pnoSettings.networkList[1].priority = 2;
        return pnoSettings;
!!!37241015.java!!!	createDummyScanSettings() : WifiNative::ScanSettings
        WifiNative.ScanSettings settings = new NativeScanSettingsBuilder()
                .withBasePeriod(10000)
                .withMaxApPerScan(10)
                .addBucketWithBand(10000, WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN,
                        WifiScanner.WIFI_BAND_24_GHZ)
                .build();
        return settings;
!!!37241143.java!!!	createDummyScanResults() : ScanResults
        return ScanResults.create(0, 2400, 2450, 2450, 2400, 2450, 2450, 2400, 2450, 2450);
!!!37241271.java!!!	startSuccessfulPnoScan(inout scanSettings : WifiNative::ScanSettings, inout pnoSettings : WifiNative::PnoSettings, inout scanEventHandler : WifiNative::ScanEventHandler, inout pnoEventHandler : WifiNative::PnoEventHandler) : void
        when(mWifiNative.setNetworkVariable(anyInt(), anyString(), anyString())).thenReturn(true);
        when(mWifiNative.enableNetworkWithoutConnect(anyInt())).thenReturn(true);
        // Scans succeed
        when(mWifiNative.scan(any(Set.class), any(Set.class))).thenReturn(true);
        when(mWifiNative.setPnoScan(anyBoolean())).thenReturn(true);

        if (mScanner.isHwPnoSupported(pnoSettings.isConnected)) {
            // This should happen only for HW PNO scan
            assertTrue(mScanner.setHwPnoList(pnoSettings, pnoEventHandler));
        } else {
            // This should happen only for SW PNO scan
            assertTrue(mScanner.startBatchedScan(scanSettings, scanEventHandler));

        }
!!!37241399.java!!!	expectedBandScanFreqs(in band : int) : Set<Integer>
        ChannelCollection collection = mScanner.getChannelHelper().createChannelCollection();
        collection.addBand(band);
        return collection.getSupplicantScanFreqs();
!!!37241527.java!!!	expectSuccessfulHwDisconnectedPnoScan(inout order : InOrder, inout pnoSettings : WifiNative::PnoSettings, inout eventHandler : WifiNative::PnoEventHandler, inout scanResults : ScanResults) : void
        for (int i = 0; i < pnoSettings.networkList.length; i++) {
            WifiNative.PnoNetwork network = pnoSettings.networkList[i];
            order.verify(mWifiNative).setNetworkVariable(network.networkId,
                    WifiConfiguration.priorityVarName, Integer.toString(network.priority));
            order.verify(mWifiNative).enableNetworkWithoutConnect(network.networkId);
        }
        // Verify  HW PNO scan started
        order.verify(mWifiNative).setPnoScan(true);

        // Setup scan results
        when(mWifiNative.getScanResults()).thenReturn(scanResults.getScanDetailArrayList());

        // Notify scan has finished
        mWifiMonitor.sendMessage(mWifiNative.getInterfaceName(), WifiMonitor.SCAN_RESULTS_EVENT);
        assertEquals("dispatch message after results event", 1, mLooper.dispatchAll());

        order.verify(eventHandler).onPnoNetworkFound(scanResults.getRawScanResults());
!!!37241655.java!!!	expectSuccessfulSingleScanWithHwPnoEnabled(inout order : InOrder, inout eventHandler : WifiNative::ScanEventHandler, inout expectedScanFreqs : Set<Integer>, inout expectedHiddenNetIds : Set<Integer>, inout scanResults : ScanResults) : void
        // Pause PNO scan first
        order.verify(mWifiNative).setPnoScan(false);

        order.verify(mWifiNative).scan(eq(expectedScanFreqs), eq(expectedHiddenNetIds));

        when(mWifiNative.getScanResults()).thenReturn(scanResults.getScanDetailArrayList());

        // Notify scan has finished
        mWifiMonitor.sendMessage(mWifiNative.getInterfaceName(), WifiMonitor.SCAN_RESULTS_EVENT);
        assertEquals("dispatch message after results event", 1, mLooper.dispatchAll());

        order.verify(eventHandler).onScanStatus(WifiNative.WIFI_SCAN_RESULTS_AVAILABLE);
        assertScanDataEquals(scanResults.getScanData(), mScanner.getLatestSingleScanResults());
!!!37241783.java!!!	expectSuccessfulSwPnoScan(inout order : InOrder, inout eventHandler : WifiNative::ScanEventHandler, inout scanResults : ScanResults) : void

        // Verify scan started
        order.verify(mWifiNative).scan(any(Set.class), any(Set.class));

        // Make sure that HW PNO scan was not started
        verify(mWifiNative, never()).setPnoScan(anyBoolean());

        // Setup scan results
        when(mWifiNative.getScanResults()).thenReturn(scanResults.getScanDetailArrayList());

        // Notify scan has finished
        mWifiMonitor.sendMessage(mWifiNative.getInterfaceName(), WifiMonitor.SCAN_RESULTS_EVENT);
        assertEquals("dispatch message after results event", 1, mLooper.dispatchAll());

        // Verify background scan results delivered
        order.verify(eventHandler).onScanStatus(WifiNative.WIFI_SCAN_RESULTS_AVAILABLE);
        WifiScanner.ScanData[] scanData = mScanner.getLatestBatchedScanResults(true);
        WifiScanner.ScanData lastScanData = scanData[scanData.length -1];
        assertScanDataEquals(scanResults.getScanData(), lastScanData);
