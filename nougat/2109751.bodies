class FrameParserTest
!!!37254967.java!!!	parseProbeResponseFrame() : void
        FrameParser parser = new FrameParser(
                TEST_PROBE_RESPONSE_FRAME_TYPE, TEST_PROBE_RESPONSE_FRAME_BYTES);
        assertEquals(TEST_PROBE_RESPONSE_FRAME_PROTOCOL_STRING, parser.mMostSpecificProtocolString);
        assertEquals(TEST_PROBE_RESPONSE_FRAME_TYPE_STRING, parser.mTypeString);
!!!37255095.java!!!	parseEapolFrames() : void
        FrameParser parser1 = new FrameParser(
                TEST_EAPOL_1_OF_4_FRAME_TYPE, TEST_EAPOL_1_OF_4_FRAME_BYTES);
        assertEquals(TEST_EAPOL_1_OF_4_FRAME_PROTOCOL_STRING, parser1.mMostSpecificProtocolString);
        assertEquals(TEST_EAPOL_1_OF_4_FRAME_TYPE_STRING, parser1.mTypeString);

        FrameParser parser2 = new FrameParser(
                TEST_EAPOL_2_OF_4_FRAME_TYPE, TEST_EAPOL_2_OF_4_FRAME_BYTES);
        assertEquals(TEST_EAPOL_2_OF_4_FRAME_PROTOCOL_STRING, parser2.mMostSpecificProtocolString);
        assertEquals(TEST_EAPOL_2_OF_4_FRAME_TYPE_STRING, parser2.mTypeString);
!!!37255223.java!!!	canParseStatusCodeOutOfNonHtOpenAuthenticationReply() : void
        FrameParser parser = new FrameParser(
                WifiLoggerHal.FRAME_TYPE_80211_MGMT,
                new byte[] {
                        (byte) 0xb0,  // type + subtype
                        0x00,  // flags
                        0x3c, 0x00,  // duration
                        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,  // addr1 -- RA
                        0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,  // addr2 -- TA
                        0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,  // addr3 -- BSSID
                        (byte) 0xa0, 0x3b,  // sequence + control
                        0x00, 0x00,  // auth algorithm
                        0x02, 0x00,  // auth sequence num
                        0x11, 0x00  // status code
                });
        assertEquals("802.11 Mgmt", parser.mMostSpecificProtocolString);
        assertEquals("Authentication", parser.mTypeString);
        assertEquals("17: Association denied; too many STAs", parser.mResultString);
!!!37255351.java!!!	canParseStatusCodeOutOfNonHtAssociationResponse() : void
        FrameParser parser = new FrameParser(
                WifiLoggerHal.FRAME_TYPE_80211_MGMT,
                new byte[] {
                        0x10,  // type + subtype
                        0x00,  // flags
                        0x3c, 0x00,  // duration
                        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,  // addr1 (RA)
                        0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,  // addr2 (TA)
                        0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,  // addr3 (BSSID)
                        (byte) 0xb0, (byte) 0xbc,   // sequence + control
                        0x01, 0x01,  // capabilities
                        0x00, 0x00,  // status code
                        0x01, (byte) 0xc0, 0x01, 0x08, (byte) 0x8c, 0x12, (byte) 0x98, 0x24,
                        (byte) 0xb0, 0x48, 0x60, 0x6c, 0x2d, 0x1a, 0x6e, 0x00, 0x1b, (byte) 0xff,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x16,
                        0x24, 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xbf,
                        0x0c, 0x00, 0x00, 0x00, 0x00, (byte) 0xfe, (byte) 0xff, 0x00, 0x00,
                        (byte) 0xfe, (byte) 0xff, 0x00, 0x00, (byte) 0xc0, 0x05, 0x00, 0x00, 0x00,
                        (byte) 0xfc, (byte) 0xff, 0x7f, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x40, (byte) 0xdd, 0x18, 0x00, 0x50, (byte) 0xf2, 0x02, 0x01, 0x01,
                        0x00, 0x00, 0x03, (byte) 0xa4, 0x00, 0x00, 0x27, (byte) 0xa4, 0x00, 0x00,
                        0x42, 0x43, 0x5e, 0x00, 0x62, 0x32, 0x2f, 0x00
                });
        assertEquals("802.11 Mgmt", parser.mMostSpecificProtocolString);
        assertEquals("Association Response", parser.mTypeString);
        assertEquals("0: Success", parser.mResultString);
!!!37255479.java!!!	doesNotParseStatusCodeOutOfNonHtOpenAuthenticationRequest() : void
        FrameParser parser = new FrameParser(
                WifiLoggerHal.FRAME_TYPE_80211_MGMT,
                new byte[] {
                        (byte) 0xb0,  // type + subtype
                        0x00,  // flags
                        0x00, 0x00,  // duration (from host; probably to be filled by firmware)
                        0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,  // addr1 (RA)
                        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,  // addr2 (TA)
                        0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,  // addr3 (BSSID)
                        0x10, (byte) 0x80,  // sequence + control
                        0x00, 0x00,  // auth algorithm
                        0x01, 0x00,  // auth sequence num
                        0x00, 0x00,  // status code; present but meaningless for first auth frame

                });
        assertEquals("802.11 Mgmt", parser.mMostSpecificProtocolString);
        assertEquals("Authentication", parser.mTypeString);
        assertEquals("N/A", parser.mResultString);
!!!37255607.java!!!	doesNotParseStatusCodeOutOfNonHtOpenAssociationRequest() : void
        FrameParser parser = new FrameParser(
                WifiLoggerHal.FRAME_TYPE_80211_MGMT,
                new byte[] {
                        0x00,  // type + subtype
                        0x00,  // flags
                        0x00, 0x00,  // duration (from host; probably to be filled by firmware)
                        0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,  // addr1 (RA)
                        0x00, 0x01, 0x02, 0x03, 0x04, 0x05,  // addr2 (TA)
                        0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,  // addr3 (BSSID)
                        0x20, (byte) 0x80,  // sequence + control
                        0x01, 0x11, 0x01, 0x00, 0x00, 0x0b, 0x71, 0x75,
                        0x69, 0x63, 0x68, 0x65, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x01, 0x08,
                        (byte) 0x8c, 0x12, (byte) 0x98, 0x24, (byte) 0xb0, 0x48, 0x60, 0x6c, 0x21,
                        0x02, 0x08, 0x18, 0x24, 0x32, 0x24, 0x01, 0x28, 0x01, 0x2c, 0x01, 0x30,
                        0x01, 0x34, 0x01, 0x38, 0x01, 0x3c, 0x01, 0x40, 0x01, 0x64, 0x01, 0x68,
                        0x01, 0x6c, 0x01, 0x70, 0x01, 0x74, 0x01, 0x78, 0x01, 0x7c, 0x01,
                        (byte) 0x80, 0x01, (byte) 0x84, 0x01, (byte) 0x88, 0x01, (byte) 0x8c, 0x01,
                        (byte) 0x90, 0x01, (byte) 0x95, 0x01, (byte) 0x99, 0x01, (byte) 0x9d, 0x01,
                        (byte) 0xa1, 0x01, (byte) 0xa5, 0x01, 0x2d, 0x1a, (byte) 0xef, 0x01, 0x1f,
                        (byte) 0xff, (byte) 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, (byte) 0xdd, 0x07, 0x00, 0x50, (byte) 0xf2, 0x02, 0x00, 0x01, 0x00,
                        (byte) 0xbf, 0x0c, (byte) 0x92, 0x71, (byte) 0x90, 0x33, (byte) 0xfa,
                        (byte) 0xff, 0x0c, 0x03, (byte) 0xfa, (byte) 0xff, 0x0c, 0x03, 0x7f, 0x09,
                        0x04, 0x00, 0x0a, 0x02, 0x01, 0x00, 0x00, 0x40, (byte) 0x80,
                });
        assertEquals("802.11 Mgmt", parser.mMostSpecificProtocolString);
        assertEquals("Association Request", parser.mTypeString);
        assertEquals("N/A", parser.mResultString);
