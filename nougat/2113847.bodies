class BaseCursorPagerAdapter
!!!37301175.java!!!	BaseCursorPagerAdapter(inout context : Context, inout fm : FragmentManager, inout c : Cursor)
        super(fm);
        init(context, c);
!!!37301431.java!!!	getItem(in position : int) : Fragment
        if (mCursor != null && moveCursorTo(position)) {
            return getItem(mContext, mCursor, position);
        }
        return null;
!!!37301559.java!!!	getCount() : int
        if (mCursor != null) {
            return mCursor.getCount();
        } else {
            return 0;
        }
!!!37301687.java!!!	instantiateItem(inout container : View, in position : int) : Object
        if (mCursor == null) {
            throw new IllegalStateException("this should only be called when the cursor is valid");
        }

        final Integer rowId;
        if (moveCursorTo(position)) {
            rowId = mCursor.getString(mRowIDColumn).hashCode();
        } else {
            rowId = null;
        }

        // Create the fragment and bind cursor data
        final Object obj = super.instantiateItem(container, position);
        if (obj != null) {
            mObjectRowMap.put(obj, rowId);
        }
        return obj;
!!!37301815.java!!!	destroyItem(inout container : View, in position : int, inout object : Object) : void
        mObjectRowMap.remove(object);

        super.destroyItem(container, position, object);
!!!37301943.java!!!	getItemPosition(inout object : Object) : int
        final Integer rowId = mObjectRowMap.get(object);
        if (rowId == null || mItemPosition == null) {
            return POSITION_NONE;
        }

        final int position = mItemPosition.get(rowId, POSITION_NONE);
        return position;
!!!37302071.java!!!	isDataValid() : boolean
        return mCursor != null;
!!!37302199.java!!!	getCursor() : Cursor
        return mCursor;
!!!37302327.java!!!	getDataItem(in position : int) : Object
        if (mCursor != null && moveCursorTo(position)) {
            return mCursor;
        } else {
            return null;
        }
!!!37302455.java!!!	getItemId(in position : int) : long
        if (mCursor != null && moveCursorTo(position)) {
            return mCursor.getString(mRowIDColumn).hashCode();
        } else {
            return 0;
        }
!!!37302583.java!!!	swapCursor(inout newCursor : Cursor) : Cursor
        if (Log.isLoggable(TAG, Log.VERBOSE)) {
            Log.v(TAG, "swapCursor old=" + (mCursor == null ? -1 : mCursor.getCount()) +
                    "; new=" + (newCursor == null ? -1 : newCursor.getCount()));
        }

        if (newCursor == mCursor) {
            return null;
        }
        Cursor oldCursor = mCursor;
        mCursor = newCursor;
        if (newCursor != null) {
            mRowIDColumn = newCursor.getColumnIndex(PhotoContract.PhotoViewColumns.URI);
        } else {
            mRowIDColumn = -1;
        }

        setItemPosition();
        notifyDataSetChanged();     // notify the observers about the new cursor
        return oldCursor;
!!!37302711.java!!!	convertToString(inout cursor : Cursor) : CharSequence
        return cursor == null ? "" : cursor.toString();
!!!37302839.java!!!	makeFragmentName(in viewId : int, in index : int) : String
        if (moveCursorTo(index)) {
            return "android:pager:" + viewId + ":" + mCursor.getString(mRowIDColumn).hashCode();
        } else {
            return super.makeFragmentName(viewId, index);
        }
!!!37302967.java!!!	moveCursorTo(in position : int) : boolean
        if (mCursor != null && !mCursor.isClosed()) {
            return mCursor.moveToPosition(position);
        }
        return false;
!!!37303095.java!!!	init(inout context : Context, inout c : Cursor) : void
        boolean cursorPresent = c != null;
        mCursor = c;
        mContext = context;
        mRowIDColumn = cursorPresent
                ? mCursor.getColumnIndex(PhotoContract.PhotoViewColumns.URI) : -1;
!!!37303223.java!!!	setItemPosition() : void
        if (mCursor == null || mCursor.isClosed()) {
            mItemPosition = null;
            return;
        }

        SparseIntArray itemPosition = new SparseIntArray(mCursor.getCount());

        mCursor.moveToPosition(-1);
        while (mCursor.moveToNext()) {
            final int rowId = mCursor.getString(mRowIDColumn).hashCode();
            final int position = mCursor.getPosition();

            itemPosition.append(rowId, position);
        }
        mItemPosition = itemPosition;
