class PhotoView
!!!37323575.java!!!	PhotoView(inout context : Context)
        super(context);
        initialize();
!!!37323703.java!!!	PhotoView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        initialize();
!!!37323831.java!!!	PhotoView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
        initialize();
!!!37323959.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        if (mScaleGetureDetector == null || mGestureDetector == null) {
            // We're being destroyed; ignore any touch events
            return true;
        }

        mScaleGetureDetector.onTouchEvent(event);
        mGestureDetector.onTouchEvent(event);
        final int action = event.getAction();

        switch (action) {
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_CANCEL:
                if (!mTranslateRunnable.mRunning) {
                    snap();
                }
                break;
        }

        return true;
!!!37324087.java!!!	onDoubleTap(inout e : MotionEvent) : boolean
        mDoubleTapOccurred = true;
        if (!mQuickScaleEnabled) {
            return scale(e);
        }
        return false;
!!!37324215.java!!!	onDoubleTapEvent(inout e : MotionEvent) : boolean
        final int action = e.getAction();
        boolean handled = false;

        switch (action) {
            case MotionEvent.ACTION_DOWN:
                if (mQuickScaleEnabled) {
                    mDownFocusX = e.getX();
                    mDownFocusY = e.getY();
                }
                break;
            case MotionEvent.ACTION_UP:
                if (mQuickScaleEnabled) {
                    handled = scale(e);
                }
                break;
            case MotionEvent.ACTION_MOVE:
                if (mQuickScaleEnabled && mDoubleTapOccurred) {
                    final int deltaX = (int) (e.getX() - mDownFocusX);
                    final int deltaY = (int) (e.getY() - mDownFocusY);
                    int distance = (deltaX * deltaX) + (deltaY * deltaY);
                    if (distance > sTouchSlopSquare) {
                        mDoubleTapOccurred = false;
                    }
                }
                break;

        }
        return handled;
!!!37324343.java!!!	scale(inout e : MotionEvent) : boolean
        boolean handled = false;
        if (mDoubleTapToZoomEnabled && mTransformsEnabled && mDoubleTapOccurred) {
            if (!mDoubleTapDebounce) {
                float currentScale = getScale();
                float targetScale;
                float centerX, centerY;

                // Zoom out if not default scale, otherwise zoom in
                if (currentScale > mMinScale) {
                    targetScale = mMinScale;
                    float relativeScale = targetScale / currentScale;
                    // Find the apparent origin for scaling that equals this scale and translate
                    centerX = (getWidth() / 2 - relativeScale * mTranslateRect.centerX()) /
                            (1 - relativeScale);
                    centerY = (getHeight() / 2 - relativeScale * mTranslateRect.centerY()) /
                            (1 - relativeScale);
                } else {
                     targetScale = currentScale * DOUBLE_TAP_SCALE_FACTOR;
                     // Ensure the target scale is within our bounds
                     targetScale = Math.max(mMinScale, targetScale);
                     targetScale = Math.min(mMaxScale, targetScale);
                     float relativeScale = targetScale / currentScale;
                     float widthBuffer = (getWidth() - mTranslateRect.width()) / relativeScale;
                     float heightBuffer = (getHeight() - mTranslateRect.height()) / relativeScale;
                     // Clamp the center if it would result in uneven borders
                     if (mTranslateRect.width() <= widthBuffer * 2) {
                         centerX = mTranslateRect.centerX();
                     } else {
                         centerX = Math.min(Math.max(mTranslateRect.left + widthBuffer,
                                 e.getX()), mTranslateRect.right - widthBuffer);
                     }
                     if (mTranslateRect.height() <= heightBuffer * 2) {
                         centerY = mTranslateRect.centerY();
                     } else {
                         centerY = Math.min(Math.max(mTranslateRect.top + heightBuffer,
                                 e.getY()), mTranslateRect.bottom - heightBuffer);
                     }
                }

                mScaleRunnable.start(currentScale, targetScale, centerX, centerY);
                handled = true;
            }
            mDoubleTapDebounce = false;
        }
        mDoubleTapOccurred = false;
        return handled;
!!!37324471.java!!!	onSingleTapConfirmed(inout e : MotionEvent) : boolean
        if (mExternalClickListener != null && !mIsDoubleTouch) {
            mExternalClickListener.onClick(this);
        }
        mIsDoubleTouch = false;
        return true;
!!!37324599.java!!!	onSingleTapUp(inout e : MotionEvent) : boolean
        return false;
!!!37324983.java!!!	onScroll(inout e1 : MotionEvent, inout e2 : MotionEvent, in distanceX : float, in distanceY : float) : boolean
        if (mTransformsEnabled && !mScaleRunnable.mRunning) {
            translate(-distanceX, -distanceY);
        }
        return true;
!!!37325111.java!!!	onDown(inout e : MotionEvent) : boolean
        if (mTransformsEnabled) {
            mTranslateRunnable.stop();
            mSnapRunnable.stop();
        }
        return true;
!!!37325239.java!!!	onFling(inout e1 : MotionEvent, inout e2 : MotionEvent, in velocityX : float, in velocityY : float) : boolean
        if (mTransformsEnabled && !mScaleRunnable.mRunning) {
            mTranslateRunnable.start(velocityX, velocityY);
        }
        return true;
!!!37325367.java!!!	onScale(inout detector : ScaleGestureDetector) : boolean
        if (mTransformsEnabled && !mScaleRunnable.mRunning) {
            mIsDoubleTouch = false;
            float currentScale = getScale();
            float newScale = currentScale * detector.getScaleFactor();
            scale(newScale, detector.getFocusX(), detector.getFocusY());
        }
        return true;
!!!37325495.java!!!	onScaleBegin(inout detector : ScaleGestureDetector) : boolean
        if (mTransformsEnabled && !mScaleRunnable.mRunning) {
            mScaleRunnable.stop();
            mIsDoubleTouch = true;
        }
        return true;
!!!37325623.java!!!	onScaleEnd(inout detector : ScaleGestureDetector) : void
        if (mTransformsEnabled && mIsDoubleTouch) {
            mDoubleTapDebounce = true;
            resetTransformations();
        }
!!!37325751.java!!!	setOnClickListener(inout listener : View::OnClickListener) : void
        mExternalClickListener = listener;
!!!37325879.java!!!	interceptMoveLeft(in origX : float, in origY : float) : boolean
        if (!mTransformsEnabled) {
            // Allow intercept if we're not in transform mode
            return false;
        } else if (mTranslateRunnable.mRunning) {
            // Don't allow touch intercept until we've stopped flinging
            return true;
        } else {
            mMatrix.getValues(mValues);
            mTranslateRect.set(mTempSrc);
            mMatrix.mapRect(mTranslateRect);

            final float viewWidth = getWidth();
            final float transX = mValues[Matrix.MTRANS_X];
            final float drawWidth = mTranslateRect.right - mTranslateRect.left;

            if (!mTransformsEnabled || drawWidth <= viewWidth) {
                // Allow intercept if not in transform mode or the image is smaller than the view
                return false;
            } else if (transX == 0) {
                // We're at the left-side of the image; allow intercepting movements to the right
                return false;
            } else if (viewWidth >= drawWidth + transX) {
                // We're at the right-side of the image; allow intercepting movements to the left
                return true;
            } else {
                // We're in the middle of the image; don't allow touch intercept
                return true;
            }
        }
!!!37326007.java!!!	interceptMoveRight(in origX : float, in origY : float) : boolean
        if (!mTransformsEnabled) {
            // Allow intercept if we're not in transform mode
            return false;
        } else if (mTranslateRunnable.mRunning) {
            // Don't allow touch intercept until we've stopped flinging
            return true;
        } else {
            mMatrix.getValues(mValues);
            mTranslateRect.set(mTempSrc);
            mMatrix.mapRect(mTranslateRect);

            final float viewWidth = getWidth();
            final float transX = mValues[Matrix.MTRANS_X];
            final float drawWidth = mTranslateRect.right - mTranslateRect.left;

            if (!mTransformsEnabled || drawWidth <= viewWidth) {
                // Allow intercept if not in transform mode or the image is smaller than the view
                return false;
            } else if (transX == 0) {
                // We're at the left-side of the image; allow intercepting movements to the right
                return true;
            } else if (viewWidth >= drawWidth + transX) {
                // We're at the right-side of the image; allow intercepting movements to the left
                return false;
            } else {
                // We're in the middle of the image; don't allow touch intercept
                return true;
            }
        }
!!!37326135.java!!!	clear() : void
        mGestureDetector = null;
        mScaleGetureDetector = null;
        mDrawable = null;
        mScaleRunnable.stop();
        mScaleRunnable = null;
        mTranslateRunnable.stop();
        mTranslateRunnable = null;
        mSnapRunnable.stop();
        mSnapRunnable = null;
        mRotateRunnable.stop();
        mRotateRunnable = null;
        setOnClickListener(null);
        mExternalClickListener = null;
        mDoubleTapOccurred = false;
!!!37326263.java!!!	bindDrawable(inout drawable : Drawable) : void
        boolean changed = false;
        if (drawable != null && drawable != mDrawable) {
            // Clear previous state.
            if (mDrawable != null) {
                mDrawable.setCallback(null);
            }

            mDrawable = drawable;

            // Reset mMinScale to ensure the bounds / matrix are recalculated
            mMinScale = 0f;

            // Set a callback?
            mDrawable.setCallback(this);

            changed = true;
        }

        configureBounds(changed);
        invalidate();
!!!37326391.java!!!	bindPhoto(inout photoBitmap : Bitmap) : void
        boolean currentDrawableIsBitmapDrawable = mDrawable instanceof BitmapDrawable;
        boolean changed = !(currentDrawableIsBitmapDrawable);
        if (mDrawable != null && currentDrawableIsBitmapDrawable) {
            final Bitmap drawableBitmap = ((BitmapDrawable) mDrawable).getBitmap();
            if (photoBitmap == drawableBitmap) {
                // setting the same bitmap; do nothing
                return;
            }

            changed = photoBitmap != null &&
                    (mDrawable.getIntrinsicWidth() != photoBitmap.getWidth() ||
                    mDrawable.getIntrinsicHeight() != photoBitmap.getHeight());

            // Reset mMinScale to ensure the bounds / matrix are recalculated
            mMinScale = 0f;
            mDrawable = null;
        }

        if (mDrawable == null && photoBitmap != null) {
            mDrawable = new BitmapDrawable(getResources(), photoBitmap);
        }

        configureBounds(changed);
        invalidate();
!!!37326519.java!!!	getPhoto() : Bitmap
        if (mDrawable != null && mDrawable instanceof BitmapDrawable) {
            return ((BitmapDrawable) mDrawable).getBitmap();
        }
        return null;
!!!37326647.java!!!	getDrawable() : Drawable
        return mDrawable;
!!!37326775.java!!!	getVideoData() : byte
        return mVideoBlob;
!!!37326903.java!!!	isVideo() : boolean
        return mVideoBlob != null;
!!!37327031.java!!!	isVideoReady() : boolean
        return mVideoBlob != null && mVideoReady;
!!!37327159.java!!!	isPhotoBound() : boolean
        return mDrawable != null;
!!!37327287.java!!!	setFullScreen(inout fullScreen : boolean, inout animate : boolean) : void
        if (fullScreen != mFullScreen) {
            mFullScreen = fullScreen;
            requestLayout();
            invalidate();
        }
!!!37327415.java!!!	enableAllowCrop(inout allowCrop : boolean) : void
        if (allowCrop && mHaveLayout) {
            throw new IllegalArgumentException("Cannot set crop after view has been laid out");
        }
        if (!allowCrop && mAllowCrop) {
            throw new IllegalArgumentException("Cannot unset crop mode");
        }
        mAllowCrop = allowCrop;
!!!37327543.java!!!	getCroppedPhoto() : Bitmap
        if (!mAllowCrop) {
            return null;
        }

        final Bitmap croppedBitmap = Bitmap.createBitmap(
                (int) CROPPED_SIZE, (int) CROPPED_SIZE, Bitmap.Config.ARGB_8888);
        final Canvas croppedCanvas = new Canvas(croppedBitmap);

        // scale for the final dimensions
        final int cropWidth = mCropRect.right - mCropRect.left;
        final float scaleWidth = CROPPED_SIZE / cropWidth;
        final float scaleHeight = CROPPED_SIZE / cropWidth;

        // translate to the origin & scale
        final Matrix matrix = new Matrix(mDrawMatrix);
        matrix.postTranslate(-mCropRect.left, -mCropRect.top);
        matrix.postScale(scaleWidth, scaleHeight);

        // draw the photo
        if (mDrawable != null) {
            croppedCanvas.concat(matrix);
            mDrawable.draw(croppedCanvas);
        }
        return croppedBitmap;
!!!37327671.java!!!	resetTransformations() : void
        // snap transformations; we don't animate
        mMatrix.set(mOriginalMatrix);

        // Invalidate the view because if you move off this PhotoView
        // to another one and come back, you want it to draw from scratch
        // in case you were zoomed in or translated (since those settings
        // are not preserved and probably shouldn't be).
        invalidate();
!!!37327799.java!!!	rotateClockwise() : void
        rotate(90, true);
!!!37327927.java!!!	rotateCounterClockwise() : void
        rotate(-90, true);
!!!37328055.java!!!	onDraw(inout canvas : Canvas) : void
        super.onDraw(canvas);

        // draw the photo
        if (mDrawable != null) {
            int saveCount = canvas.getSaveCount();
            canvas.save();

            if (mDrawMatrix != null) {
                canvas.concat(mDrawMatrix);
            }
            mDrawable.draw(canvas);

            canvas.restoreToCount(saveCount);

            if (mVideoBlob != null) {
                final Bitmap videoImage = (mVideoReady ? sVideoImage : sVideoNotReadyImage);
                final int drawLeft = (getWidth() - videoImage.getWidth()) / 2;
                final int drawTop = (getHeight() - videoImage.getHeight()) / 2;
                canvas.drawBitmap(videoImage, drawLeft, drawTop, null);
            }

            // Extract the drawable's bounds (in our own copy, to not alter the image)
            mTranslateRect.set(mDrawable.getBounds());
            if (mDrawMatrix != null) {
                mDrawMatrix.mapRect(mTranslateRect);
            }

            if (mAllowCrop) {
                int previousSaveCount = canvas.getSaveCount();
                canvas.drawRect(0, 0, getWidth(), getHeight(), sCropDimPaint);
                canvas.save();
                canvas.clipRect(mCropRect);

                if (mDrawMatrix != null) {
                    canvas.concat(mDrawMatrix);
                }

                mDrawable.draw(canvas);
                canvas.restoreToCount(previousSaveCount);
                canvas.drawRect(mCropRect, sCropPaint);
            }
        }
!!!37328183.java!!!	onLayout(inout changed : boolean, in left : int, in top : int, in right : int, in bottom : int) : void
        super.onLayout(changed, left, top, right, bottom);
        mHaveLayout = true;
        final int layoutWidth = getWidth();
        final int layoutHeight = getHeight();

        if (mAllowCrop) {
            mCropSize = Math.min(sCropSize, Math.min(layoutWidth, layoutHeight));
            final int cropLeft = (layoutWidth - mCropSize) / 2;
            final int cropTop = (layoutHeight - mCropSize) / 2;
            final int cropRight = cropLeft + mCropSize;
            final int cropBottom =  cropTop + mCropSize;

            // Create a crop region overlay. We need a separate canvas to be able to "punch
            // a hole" through to the underlying image.
            mCropRect.set(cropLeft, cropTop, cropRight, cropBottom);
        }
        configureBounds(changed);
!!!37328311.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        if (mFixedHeight != -1) {
            super.onMeasure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(mFixedHeight,
                    MeasureSpec.AT_MOST));
            setMeasuredDimension(getMeasuredWidth(), mFixedHeight);
        } else {
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        }
!!!37328439.java!!!	verifyDrawable(inout drawable : Drawable) : boolean
        return mDrawable == drawable || super.verifyDrawable(drawable);
!!!37328567.java!!!	invalidateDrawable(inout drawable : Drawable) : void
        // Only invalidate this view if the passed in drawable is displayed within this view. If
        // another drawable is passed in, have the parent view handle invalidation.
        if (mDrawable == drawable) {
            invalidate();
        } else {
            super.invalidateDrawable(drawable);
        }
!!!37328695.java!!!	setFixedHeight(in fixedHeight : int) : void
        final boolean adjustBounds = (fixedHeight != mFixedHeight);
        mFixedHeight = fixedHeight;
        setMeasuredDimension(getMeasuredWidth(), mFixedHeight);
        if (adjustBounds) {
            configureBounds(true);
            requestLayout();
        }
!!!37328823.java!!!	enableImageTransforms(inout enable : boolean) : void
        mTransformsEnabled = enable;
        if (!mTransformsEnabled) {
            resetTransformations();
        }
!!!37328951.java!!!	configureBounds(inout changed : boolean) : void
        if (mDrawable == null || !mHaveLayout) {
            return;
        }
        final int dwidth = mDrawable.getIntrinsicWidth();
        final int dheight = mDrawable.getIntrinsicHeight();

        final int vwidth = getWidth();
        final int vheight = getHeight();

        final boolean fits = (dwidth < 0 || vwidth == dwidth) &&
                (dheight < 0 || vheight == dheight);

        // We need to do the scaling ourself, so have the drawable use its native size.
        mDrawable.setBounds(0, 0, dwidth, dheight);

        // Create a matrix with the proper transforms
        if (changed || (mMinScale == 0 && mDrawable != null && mHaveLayout)) {
            generateMatrix();
            generateScale();
        }

        if (fits || mMatrix.isIdentity()) {
            // The bitmap fits exactly, no transform needed.
            mDrawMatrix = null;
        } else {
            mDrawMatrix = mMatrix;
        }
!!!37329079.java!!!	generateMatrix() : void
        final int dwidth = mDrawable.getIntrinsicWidth();
        final int dheight = mDrawable.getIntrinsicHeight();

        final int vwidth = mAllowCrop ? sCropSize : getWidth();
        final int vheight = mAllowCrop ? sCropSize : getHeight();

        final boolean fits = (dwidth < 0 || vwidth == dwidth) &&
                (dheight < 0 || vheight == dheight);

        if (fits && !mAllowCrop) {
            mMatrix.reset();
        } else {
            // Generate the required transforms for the photo
            mTempSrc.set(0, 0, dwidth, dheight);
            if (mAllowCrop) {
                mTempDst.set(mCropRect);
            } else {
                mTempDst.set(0, 0, vwidth, vheight);
            }
            RectF scaledDestination = new RectF(
                    (vwidth / 2) - (dwidth * mMaxInitialScaleFactor / 2),
                    (vheight / 2) - (dheight * mMaxInitialScaleFactor / 2),
                    (vwidth / 2) + (dwidth * mMaxInitialScaleFactor / 2),
                    (vheight / 2) + (dheight * mMaxInitialScaleFactor / 2));
            if(mTempDst.contains(scaledDestination)) {
                mMatrix.setRectToRect(mTempSrc, scaledDestination, Matrix.ScaleToFit.CENTER);
            } else {
                mMatrix.setRectToRect(mTempSrc, mTempDst, Matrix.ScaleToFit.CENTER);
            }
        }
        mOriginalMatrix.set(mMatrix);
!!!37329207.java!!!	generateScale() : void
        final int dwidth = mDrawable.getIntrinsicWidth();
        final int dheight = mDrawable.getIntrinsicHeight();

        final int vwidth = mAllowCrop ? getCropSize() : getWidth();
        final int vheight = mAllowCrop ? getCropSize() : getHeight();

        if (dwidth < vwidth && dheight < vheight && !mAllowCrop) {
            mMinScale = 1.0f;
        } else {
            mMinScale = getScale();
        }
        mMaxScale = Math.max(mMinScale * 4, 4);
!!!37329335.java!!!	getCropSize() : int
        return mCropSize > 0 ? mCropSize : sCropSize;
!!!37329463.java!!!	getScale() : float
        mMatrix.getValues(mValues);
        return mValues[Matrix.MSCALE_X];
!!!37329591.java!!!	scale(in newScale : float, in centerX : float, in centerY : float) : void
        // Rotate back to the original orientation
        mMatrix.postRotate(-mRotation, getWidth() / 2, getHeight() / 2);

        // Ensure that mMinScale <= newScale <= mMaxScale
        newScale = Math.max(newScale, mMinScale);
        newScale = Math.min(newScale, mMaxScale * SCALE_OVERZOOM_FACTOR);

        float currentScale = getScale();

        // Prepare to animate zoom out if over-zooming
        if (newScale > mMaxScale && currentScale <= mMaxScale) {
            Runnable zoomBackRunnable = new Runnable() {
                @Override
                public void run() {
                    // Scale back to the maximum if over-zoomed
                    float currentScale = getScale();
                    if (currentScale > mMaxScale) {
                        // The number of times the crop amount pulled in can fit on the screen
                        float marginFit = 1 / (1 - mMaxScale / currentScale);
                        // The (negative) relative maximum distance from an image edge such that
                        // when scaled this far from the edge, all of the image off-screen in that
                        // direction is pulled in
                        float relativeDistance = 1 - marginFit;
                        float finalCenterX = getWidth() / 2;
                        float finalCenterY = getHeight() / 2;
                        // This center will pull all of the margin from the lesser side, over will
                        // expose trim
                        float maxX = mTranslateRect.left * relativeDistance;
                        float maxY = mTranslateRect.top * relativeDistance;
                        // This center will pull all of the margin from the greater side, over will
                        // expose trim
                        float minX = getWidth() * marginFit + mTranslateRect.right *
                                relativeDistance;
                        float minY = getHeight() * marginFit + mTranslateRect.bottom *
                                relativeDistance;
                        // Adjust center according to bounds to avoid bad crop
                        if (minX > maxX) {
                            // Border is inevitable due to small image size, so we split the crop
                            finalCenterX = (minX + maxX) / 2;
                        } else {
                            finalCenterX = Math.min(Math.max(minX, finalCenterX), maxX);
                        }
                        if (minY > maxY) {
                            // Border is inevitable due to small image size, so we split the crop
                            finalCenterY = (minY + maxY) / 2;
                        } else {
                            finalCenterY = Math.min(Math.max(minY, finalCenterY), maxY);
                        }
                        mScaleRunnable.start(currentScale, mMaxScale, finalCenterX, finalCenterY);
                    }
                }
            };
            postDelayed(zoomBackRunnable, ZOOM_CORRECTION_DELAY);
        }

        float factor = newScale / currentScale;

        // Apply the scale factor
        mMatrix.postScale(factor, factor, centerX, centerY);

        // Re-apply any rotation
        mMatrix.postRotate(mRotation, getWidth() / 2, getHeight() / 2);

        invalidate();
!!!37329719.java!!!	translate(in tx : float, in ty : float) : int
        mTranslateRect.set(mTempSrc);
        mMatrix.mapRect(mTranslateRect);

        final float maxLeft = mAllowCrop ? mCropRect.left : 0.0f;
        final float maxRight = mAllowCrop ? mCropRect.right : getWidth();
        float l = mTranslateRect.left;
        float r = mTranslateRect.right;

        final float translateX;
        if (mAllowCrop) {
            // If we're cropping, allow the image to scroll off the edge of the screen
            translateX = Math.max(maxLeft - mTranslateRect.right,
                    Math.min(maxRight - mTranslateRect.left, tx));
        } else {
            // Otherwise, ensure the image never leaves the screen
            if (r - l < maxRight - maxLeft) {
                translateX = maxLeft + ((maxRight - maxLeft) - (r + l)) / 2;
            } else {
                translateX = Math.max(maxRight - r, Math.min(maxLeft - l, tx));
            }
        }

        float maxTop = mAllowCrop ? mCropRect.top: 0.0f;
        float maxBottom = mAllowCrop ? mCropRect.bottom : getHeight();
        float t = mTranslateRect.top;
        float b = mTranslateRect.bottom;

        final float translateY;
        if (mAllowCrop) {
            // If we're cropping, allow the image to scroll off the edge of the screen
            translateY = Math.max(maxTop - mTranslateRect.bottom,
                    Math.min(maxBottom - mTranslateRect.top, ty));
        } else {
            // Otherwise, ensure the image never leaves the screen
            if (b - t < maxBottom - maxTop) {
                translateY = maxTop + ((maxBottom - maxTop) - (b + t)) / 2;
            } else {
                translateY = Math.max(maxBottom - b, Math.min(maxTop - t, ty));
            }
        }

        // Do the translation
        mMatrix.postTranslate(translateX, translateY);
        invalidate();

        boolean didTranslateX = translateX == tx;
        boolean didTranslateY = translateY == ty;
        if (didTranslateX && didTranslateY) {
            return TRANSLATE_BOTH;
        } else if (didTranslateX) {
            return TRANSLATE_X_ONLY;
        } else if (didTranslateY) {
            return TRANSLATE_Y_ONLY;
        }
        return TRANSLATE_NONE;
!!!37329847.java!!!	snap() : void
        mTranslateRect.set(mTempSrc);
        mMatrix.mapRect(mTranslateRect);

        // Determine how much to snap in the horizontal direction [if any]
        float maxLeft = mAllowCrop ? mCropRect.left : 0.0f;
        float maxRight = mAllowCrop ? mCropRect.right : getWidth();
        float l = mTranslateRect.left;
        float r = mTranslateRect.right;

        final float translateX;
        if (r - l < maxRight - maxLeft) {
            // Image is narrower than view; translate to the center of the view
            translateX = maxLeft + ((maxRight - maxLeft) - (r + l)) / 2;
        } else if (l > maxLeft) {
            // Image is off right-edge of screen; bring it into view
            translateX = maxLeft - l;
        } else if (r < maxRight) {
            // Image is off left-edge of screen; bring it into view
            translateX = maxRight - r;
        } else {
            translateX = 0.0f;
        }

        // Determine how much to snap in the vertical direction [if any]
        float maxTop = mAllowCrop ? mCropRect.top : 0.0f;
        float maxBottom = mAllowCrop ? mCropRect.bottom : getHeight();
        float t = mTranslateRect.top;
        float b = mTranslateRect.bottom;

        final float translateY;
        if (b - t < maxBottom - maxTop) {
            // Image is shorter than view; translate to the bottom edge of the view
            translateY = maxTop + ((maxBottom - maxTop) - (b + t)) / 2;
        } else if (t > maxTop) {
            // Image is off bottom-edge of screen; bring it into view
            translateY = maxTop - t;
        } else if (b < maxBottom) {
            // Image is off top-edge of screen; bring it into view
            translateY = maxBottom - b;
        } else {
            translateY = 0.0f;
        }

        if (Math.abs(translateX) > SNAP_THRESHOLD || Math.abs(translateY) > SNAP_THRESHOLD) {
            mSnapRunnable.start(translateX, translateY);
        } else {
            mMatrix.postTranslate(translateX, translateY);
            invalidate();
        }
!!!37329975.java!!!	rotate(in degrees : float, inout animate : boolean) : void
        if (animate) {
            mRotateRunnable.start(degrees);
        } else {
            mRotation += degrees;
            mMatrix.postRotate(degrees, getWidth() / 2, getHeight() / 2);
            invalidate();
        }
!!!37330103.java!!!	initialize() : void
        Context context = getContext();

        if (!sInitialized) {
            sInitialized = true;

            Resources resources = context.getApplicationContext().getResources();

            sCropSize = resources.getDimensionPixelSize(R.dimen.photo_crop_width);

            sCropDimPaint = new Paint();
            sCropDimPaint.setAntiAlias(true);
            sCropDimPaint.setColor(resources.getColor(R.color.photo_crop_dim_color));
            sCropDimPaint.setStyle(Style.FILL);

            sCropPaint = new Paint();
            sCropPaint.setAntiAlias(true);
            sCropPaint.setColor(resources.getColor(R.color.photo_crop_highlight_color));
            sCropPaint.setStyle(Style.STROKE);
            sCropPaint.setStrokeWidth(resources.getDimension(R.dimen.photo_crop_stroke_width));

            final ViewConfiguration configuration = ViewConfiguration.get(context);
            final int touchSlop = configuration.getScaledTouchSlop();
            sTouchSlopSquare = touchSlop * touchSlop;
        }

        mGestureDetector = new GestureDetectorCompat(context, this, null);
        mScaleGetureDetector = new ScaleGestureDetector(context, this);
        mQuickScaleEnabled = ScaleGestureDetectorCompat.isQuickScaleEnabled(mScaleGetureDetector);
        mScaleRunnable = new ScaleRunnable(this);
        mTranslateRunnable = new TranslateRunnable(this);
        mSnapRunnable = new SnapRunnable(this);
        mRotateRunnable = new RotateRunnable(this);
!!!37332279.java!!!	setMaxInitialScale(in f : float) : void
        mMaxInitialScaleFactor = f;
