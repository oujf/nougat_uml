class ClassDefItem
!!!868023.java!!!	ClassDefItem(inout thisClass : CstType, in accessFlags : int, inout superclass : CstType, inout interfaces : TypeList, inout sourceFile : CstString)
        if (thisClass == null) {
            throw new NullPointerException("thisClass == null");
        }

        /*
         * TODO: Maybe check accessFlags and superclass, at
         * least for easily-checked stuff?
         */

        if (interfaces == null) {
            throw new NullPointerException("interfaces == null");
        }

        this.thisClass = thisClass;
        this.accessFlags = accessFlags;
        this.superclass = superclass;
        this.interfaces =
            (interfaces.size() == 0) ? null :  new TypeListItem(interfaces);
        this.sourceFile = sourceFile;
        this.classData = new ClassDataItem(thisClass);
        this.staticValuesItem = null;
        this.annotationsDirectory = new AnnotationsDirectoryItem();
!!!868151.java!!!	itemType() : ItemType
        return ItemType.TYPE_CLASS_DEF_ITEM;
!!!868279.java!!!	writeSize() : int
        return SizeOf.CLASS_DEF_ITEM;
!!!868407.java!!!	addContents(inout file : DexFile) : void
        TypeIdsSection typeIds = file.getTypeIds();
        MixedItemSection byteData = file.getByteData();
        MixedItemSection wordData = file.getWordData();
        MixedItemSection typeLists = file.getTypeLists();
        StringIdsSection stringIds = file.getStringIds();

        typeIds.intern(thisClass);

        if (!classData.isEmpty()) {
            MixedItemSection classDataSection = file.getClassData();
            classDataSection.add(classData);

            CstArray staticValues = classData.getStaticValuesConstant();
            if (staticValues != null) {
                staticValuesItem =
                    byteData.intern(new EncodedArrayItem(staticValues));
            }
        }

        if (superclass != null) {
            typeIds.intern(superclass);
        }

        if (interfaces != null) {
            interfaces = typeLists.intern(interfaces);
        }

        if (sourceFile != null) {
            stringIds.intern(sourceFile);
        }

        if (! annotationsDirectory.isEmpty()) {
            if (annotationsDirectory.isInternable()) {
                annotationsDirectory = wordData.intern(annotationsDirectory);
            } else {
                wordData.add(annotationsDirectory);
            }
        }
!!!868535.java!!!	writeTo(inout file : DexFile, inout out : AnnotatedOutput) : void
        boolean annotates = out.annotates();
        TypeIdsSection typeIds = file.getTypeIds();
        int classIdx = typeIds.indexOf(thisClass);
        int superIdx = (superclass == null) ? -1 :
            typeIds.indexOf(superclass);
        int interOff = OffsettedItem.getAbsoluteOffsetOr0(interfaces);
        int annoOff = annotationsDirectory.isEmpty() ? 0 :
            annotationsDirectory.getAbsoluteOffset();
        int sourceFileIdx = (sourceFile == null) ? -1 :
            file.getStringIds().indexOf(sourceFile);
        int dataOff = classData.isEmpty()? 0 : classData.getAbsoluteOffset();
        int staticValuesOff =
            OffsettedItem.getAbsoluteOffsetOr0(staticValuesItem);

        if (annotates) {
            out.annotate(0, indexString() + ' ' + thisClass.toHuman());
            out.annotate(4, "  class_idx:           " + Hex.u4(classIdx));
            out.annotate(4, "  access_flags:        " +
                         AccessFlags.classString(accessFlags));
            out.annotate(4, "  superclass_idx:      " + Hex.u4(superIdx) +
                         " // " + ((superclass == null) ? "<none>" :
                          superclass.toHuman()));
            out.annotate(4, "  interfaces_off:      " + Hex.u4(interOff));
            if (interOff != 0) {
                TypeList list = interfaces.getList();
                int sz = list.size();
                for (int i = 0; i < sz; i++) {
                    out.annotate(0, "    " + list.getType(i).toHuman());
                }
            }
            out.annotate(4, "  source_file_idx:     " + Hex.u4(sourceFileIdx) +
                         " // " + ((sourceFile == null) ? "<none>" :
                          sourceFile.toHuman()));
            out.annotate(4, "  annotations_off:     " + Hex.u4(annoOff));
            out.annotate(4, "  class_data_off:      " + Hex.u4(dataOff));
            out.annotate(4, "  static_values_off:   " +
                    Hex.u4(staticValuesOff));
        }

        out.writeInt(classIdx);
        out.writeInt(accessFlags);
        out.writeInt(superIdx);
        out.writeInt(interOff);
        out.writeInt(sourceFileIdx);
        out.writeInt(annoOff);
        out.writeInt(dataOff);
        out.writeInt(staticValuesOff);
!!!868663.java!!!	getThisClass() : CstType
        return thisClass;
!!!868791.java!!!	getAccessFlags() : int
        return accessFlags;
!!!868919.java!!!	getSuperclass() : CstType
        return superclass;
!!!869047.java!!!	getInterfaces() : TypeList
        if (interfaces == null) {
            return StdTypeList.EMPTY;
        }

        return interfaces.getList();
!!!869175.java!!!	getSourceFile() : CstString
        return sourceFile;
!!!869303.java!!!	addStaticField(inout field : EncodedField, inout value : Constant) : void
        classData.addStaticField(field, value);
!!!869431.java!!!	addInstanceField(inout field : EncodedField) : void
        classData.addInstanceField(field);
!!!869559.java!!!	addDirectMethod(inout method : EncodedMethod) : void
        classData.addDirectMethod(method);
!!!869687.java!!!	addVirtualMethod(inout method : EncodedMethod) : void
        classData.addVirtualMethod(method);
!!!869815.java!!!	getMethods() : EncodedMethod
        return classData.getMethods();
!!!869943.java!!!	setClassAnnotations(inout annotations : Annotations, inout dexFile : DexFile) : void
        annotationsDirectory.setClassAnnotations(annotations, dexFile);
!!!870071.java!!!	addFieldAnnotations(inout field : CstFieldRef, inout annotations : Annotations, inout dexFile : DexFile) : void
        annotationsDirectory.addFieldAnnotations(field, annotations, dexFile);
!!!870199.java!!!	addMethodAnnotations(inout method : CstMethodRef, inout annotations : Annotations, inout dexFile : DexFile) : void
        annotationsDirectory.addMethodAnnotations(method, annotations, dexFile);
!!!870327.java!!!	addParameterAnnotations(inout method : CstMethodRef, inout list : AnnotationsList, inout dexFile : DexFile) : void
        annotationsDirectory.addParameterAnnotations(method, list, dexFile);
!!!870455.java!!!	getMethodAnnotations(inout method : CstMethodRef) : Annotations
        return annotationsDirectory.getMethodAnnotations(method);
!!!870583.java!!!	getParameterAnnotations(inout method : CstMethodRef) : AnnotationsList
        return annotationsDirectory.getParameterAnnotations(method);
!!!870711.java!!!	debugPrint(inout out : Writer, inout verbose : boolean) : void
        PrintWriter pw = Writers.printWriterFor(out);

        pw.println(getClass().getName() + " {");
        pw.println("  accessFlags: " + Hex.u2(accessFlags));
        pw.println("  superclass: " + superclass);
        pw.println("  interfaces: " +
                ((interfaces == null) ? "<none>" : interfaces));
        pw.println("  sourceFile: " +
                ((sourceFile == null) ? "<none>" : sourceFile.toQuoted()));

        classData.debugPrint(out, verbose);
        annotationsDirectory.debugPrint(pw);

        pw.println("}");
