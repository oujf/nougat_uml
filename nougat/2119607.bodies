class LinkAccessibilityHelper
!!!37339447.java!!!	LinkAccessibilityHelper(inout view : TextView)
        super(view);
        mView = view;
!!!37339575.java!!!	getVirtualViewAt(in x : float, in y : float) : int
        final CharSequence text = mView.getText();
        if (text instanceof Spanned) {
            final Spanned spannedText = (Spanned) text;
            final int offset = getOffsetForPosition(mView, x, y);
            ClickableSpan[] linkSpans = spannedText.getSpans(offset, offset, ClickableSpan.class);
            if (linkSpans.length == 1) {
                ClickableSpan linkSpan = linkSpans[0];
                return spannedText.getSpanStart(linkSpan);
            }
        }
        return INVALID_ID;
!!!37339703.java!!!	getVisibleVirtualViews(inout virtualViewIds : List<Integer>) : void
        final CharSequence text = mView.getText();
        if (text instanceof Spanned) {
            final Spanned spannedText = (Spanned) text;
            ClickableSpan[] linkSpans = spannedText.getSpans(0, spannedText.length(),
                    ClickableSpan.class);
            for (ClickableSpan span : linkSpans) {
                virtualViewIds.add(spannedText.getSpanStart(span));
            }
        }
!!!37339831.java!!!	onPopulateEventForVirtualView(in virtualViewId : int, inout event : AccessibilityEvent) : void
        final ClickableSpan span = getSpanForOffset(virtualViewId);
        if (span != null) {
            event.setContentDescription(getTextForSpan(span));
        } else {
            Log.e(TAG, "LinkSpan is null for offset: " + virtualViewId);
            event.setContentDescription(mView.getText());
        }
!!!37339959.java!!!	onPopulateNodeForVirtualView(in virtualViewId : int, inout info : AccessibilityNodeInfoCompat) : void
        final ClickableSpan span = getSpanForOffset(virtualViewId);
        if (span != null) {
            info.setContentDescription(getTextForSpan(span));
        } else {
            Log.e(TAG, "LinkSpan is null for offset: " + virtualViewId);
            info.setContentDescription(mView.getText());
        }
        info.setFocusable(true);
        info.setClickable(true);
        getBoundsForSpan(span, mTempRect);
        if (!mTempRect.isEmpty()) {
            info.setBoundsInParent(getBoundsForSpan(span, mTempRect));
        } else {
            Log.e(TAG, "LinkSpan bounds is empty for: " + virtualViewId);
            mTempRect.set(0, 0, 1, 1);
            info.setBoundsInParent(mTempRect);
        }
        info.addAction(AccessibilityNodeInfoCompat.ACTION_CLICK);
!!!37340087.java!!!	onPerformActionForVirtualView(in virtualViewId : int, in action : int, inout arguments : Bundle) : boolean
        if (action == AccessibilityNodeInfoCompat.ACTION_CLICK) {
            ClickableSpan span = getSpanForOffset(virtualViewId);
            if (span != null) {
                span.onClick(mView);
                return true;
            } else {
                Log.e(TAG, "LinkSpan is null for offset: " + virtualViewId);
            }
        }
        return false;
!!!37340215.java!!!	getSpanForOffset(in offset : int) : ClickableSpan
        CharSequence text = mView.getText();
        if (text instanceof Spanned) {
            Spanned spannedText = (Spanned) text;
            ClickableSpan[] spans = spannedText.getSpans(offset, offset, ClickableSpan.class);
            if (spans.length == 1) {
                return spans[0];
            }
        }
        return null;
!!!37340343.java!!!	getTextForSpan(inout span : ClickableSpan) : CharSequence
        CharSequence text = mView.getText();
        if (text instanceof Spanned) {
            Spanned spannedText = (Spanned) text;
            return spannedText.subSequence(spannedText.getSpanStart(span),
                    spannedText.getSpanEnd(span));
        }
        return text;
!!!37340471.java!!!	getBoundsForSpan(inout span : ClickableSpan, inout outRect : Rect) : Rect
        CharSequence text = mView.getText();
        outRect.setEmpty();
        if (text instanceof Spanned) {
            Spanned spannedText = (Spanned) text;
            final int spanStart = spannedText.getSpanStart(span);
            final int spanEnd = spannedText.getSpanEnd(span);
            final Layout layout = mView.getLayout();
            final float xStart = layout.getPrimaryHorizontal(spanStart);
            final float xEnd = layout.getPrimaryHorizontal(spanEnd);
            final int lineStart = layout.getLineForOffset(spanStart);
            final int lineEnd = layout.getLineForOffset(spanEnd);
            layout.getLineBounds(lineStart, outRect);
            outRect.left = (int) xStart;
            if (lineEnd == lineStart) {
                outRect.right = (int) xEnd;
            } // otherwise just leave it at the end of the start line

            // Offset for padding
            outRect.offset(mView.getTotalPaddingLeft(), mView.getTotalPaddingTop());
        }
        return outRect;
!!!37340599.java!!!	getOffsetForPosition(inout view : TextView, in x : float, in y : float) : int
        if (view.getLayout() == null) return -1;
        final int line = getLineAtCoordinate(view, y);
        return getOffsetAtCoordinate(view, line, x);
!!!37340727.java!!!	convertToLocalHorizontalCoordinate(inout view : TextView, in x : float) : float
        x -= view.getTotalPaddingLeft();
        // Clamp the position to inside of the view.
        x = Math.max(0.0f, x);
        x = Math.min(view.getWidth() - view.getTotalPaddingRight() - 1, x);
        x += view.getScrollX();
        return x;
!!!37340855.java!!!	getLineAtCoordinate(inout view : TextView, in y : float) : int
        y -= view.getTotalPaddingTop();
        // Clamp the position to inside of the view.
        y = Math.max(0.0f, y);
        y = Math.min(view.getHeight() - view.getTotalPaddingBottom() - 1, y);
        y += view.getScrollY();
        return view.getLayout().getLineForVertical((int) y);
!!!37340983.java!!!	getOffsetAtCoordinate(inout view : TextView, in line : int, in x : float) : int
        x = convertToLocalHorizontalCoordinate(view, x);
        return view.getLayout().getOffsetForHorizontal(line, x);
