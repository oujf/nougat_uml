class SetupWizardLayout
!!!37356599.java!!!	SetupWizardLayout(inout context : Context)
        super(context, 0, 0);
        init(null, R.attr.suwLayoutTheme);
!!!37356727.java!!!	SetupWizardLayout(inout context : Context, in template : int)
        this(context, template, 0);
!!!37356855.java!!!	SetupWizardLayout(inout context : Context, in template : int, in containerId : int)
        super(context, template, containerId);
        init(null, R.attr.suwLayoutTheme);
!!!37356983.java!!!	SetupWizardLayout(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        init(attrs, R.attr.suwLayoutTheme);
!!!37357111.java!!!	SetupWizardLayout(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        super(context, attrs, defStyleAttr);
        init(attrs, defStyleAttr);
!!!37357239.java!!!	init(inout attrs : AttributeSet, in defStyleAttr : int) : void
        final TypedArray a = getContext().obtainStyledAttributes(attrs,
                R.styleable.SuwSetupWizardLayout, defStyleAttr, 0);

        // Set the background from XML, either directly or built from a bitmap tile
        final Drawable background =
                a.getDrawable(R.styleable.SuwSetupWizardLayout_suwBackground);
        if (background != null) {
            setLayoutBackground(background);
        } else {
            final Drawable backgroundTile =
                    a.getDrawable(R.styleable.SuwSetupWizardLayout_suwBackgroundTile);
            if (backgroundTile != null) {
                setBackgroundTile(backgroundTile);
            }
        }

        // Set the illustration from XML, either directly or built from image + horizontal tile
        final Drawable illustration =
                a.getDrawable(R.styleable.SuwSetupWizardLayout_suwIllustration);
        if (illustration != null) {
            setIllustration(illustration);
        } else {
            final Drawable illustrationImage =
                    a.getDrawable(R.styleable.SuwSetupWizardLayout_suwIllustrationImage);
            final Drawable horizontalTile = a.getDrawable(
                    R.styleable.SuwSetupWizardLayout_suwIllustrationHorizontalTile);
            if (illustrationImage != null && horizontalTile != null) {
                setIllustration(illustrationImage, horizontalTile);
            }
        }

        // Set the top padding of the illustration
        int decorPaddingTop = a.getDimensionPixelSize(
                R.styleable.SuwSetupWizardLayout_suwDecorPaddingTop, -1);
        if (decorPaddingTop == -1) {
            decorPaddingTop = getResources().getDimensionPixelSize(R.dimen.suw_decor_padding_top);
        }
        setDecorPaddingTop(decorPaddingTop);


        // Set the illustration aspect ratio. See Illustration.setAspectRatio(float). This will
        // override suwIllustrationPaddingTop if its value is not 0.
        float illustrationAspectRatio = a.getFloat(
                R.styleable.SuwSetupWizardLayout_suwIllustrationAspectRatio, -1f);
        if (illustrationAspectRatio == -1f) {
            final TypedValue out = new TypedValue();
            getResources().getValue(R.dimen.suw_illustration_aspect_ratio, out, true);
            illustrationAspectRatio = out.getFloat();
        }
        setIllustrationAspectRatio(illustrationAspectRatio);

        // Set the header text
        final CharSequence headerText =
                a.getText(R.styleable.SuwSetupWizardLayout_suwHeaderText);
        if (headerText != null) {
            setHeaderText(headerText);
        }

        a.recycle();
!!!37357367.java!!!	onSaveInstanceState() : Parcelable
        final Parcelable parcelable = super.onSaveInstanceState();
        final SavedState ss = new SavedState(parcelable);
        ss.mIsProgressBarShown = isProgressBarShown();
        return ss;
!!!37357495.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        if (!(state instanceof SavedState)) {
            Log.w(TAG, "Ignoring restore instance state " + state);
            super.onRestoreInstanceState(state);
            return;
        }

        final SavedState ss = (SavedState) state;
        super.onRestoreInstanceState(ss.getSuperState());
        final boolean isProgressBarShown = ss.mIsProgressBarShown;
        if (isProgressBarShown) {
            showProgressBar();
        } else {
            hideProgressBar();
        }
!!!37357623.java!!!	onInflateTemplate(inout inflater : LayoutInflater, in template : int) : View
        if (template == 0) {
            template = R.layout.suw_template;
        }
        try {
            return super.onInflateTemplate(inflater, template);
        } catch (RuntimeException e) {
            // Versions before M throws RuntimeException for unsuccessful attribute resolution
            // Versions M+ will throw an InflateException (which extends from RuntimeException)
            throw new InflateException("Unable to inflate layout. Are you using "
                    + "@style/SuwThemeMaterial (or its descendant) as your theme?", e);
        }
!!!37357751.java!!!	findContainer(in containerId : int) : ViewGroup
        if (containerId == 0) {
            containerId = R.id.suw_layout_content;
        }
        return super.findContainer(containerId);
!!!37357879.java!!!	getNavigationBar() : NavigationBar
        final View view = findManagedViewById(R.id.suw_layout_navigation_bar);
        return view instanceof NavigationBar ? (NavigationBar) view : null;
!!!37358007.java!!!	getScrollView() : ScrollView
        final View view = findManagedViewById(R.id.suw_bottom_scroll_view);
        return view instanceof ScrollView ? (ScrollView) view : null;
!!!37358135.java!!!	requireScrollToBottom() : void
        final NavigationBar navigationBar = getNavigationBar();
        final ScrollView scrollView = getScrollView();
        if (navigationBar != null && (scrollView instanceof BottomScrollView)) {
            RequireScrollHelper.requireScroll(navigationBar, (BottomScrollView) scrollView);
        } else {
            Log.e(TAG, "Both suw_layout_navigation_bar and suw_bottom_scroll_view must exist in"
                    + " the template to require scrolling.");
        }
!!!37358263.java!!!	setHeaderText(in title : int) : void
        final TextView titleView = getHeaderTextView();
        if (titleView != null) {
            titleView.setText(title);
        }
!!!37358391.java!!!	setHeaderText(inout title : CharSequence) : void
        final TextView titleView = getHeaderTextView();
        if (titleView != null) {
            titleView.setText(title);
        }
!!!37358519.java!!!	getHeaderText() : CharSequence
        final TextView titleView = getHeaderTextView();
        return titleView != null ? titleView.getText() : null;
!!!37358647.java!!!	getHeaderTextView() : TextView
        return (TextView) findManagedViewById(R.id.suw_layout_title);
!!!37358775.java!!!	setIllustration(inout drawable : Drawable) : void
        final View view = findManagedViewById(R.id.suw_layout_decor);
        if (view instanceof Illustration) {
            final Illustration illustration = (Illustration) view;
            illustration.setIllustration(drawable);
        }
!!!37358903.java!!!	setIllustration(in asset : int, in horizontalTile : int) : void
        final View view = findManagedViewById(R.id.suw_layout_decor);
        if (view instanceof Illustration) {
            final Illustration illustration = (Illustration) view;
            final Drawable illustrationDrawable = getIllustration(asset, horizontalTile);
            illustration.setIllustration(illustrationDrawable);
        }
!!!37359031.java!!!	setIllustration(inout asset : Drawable, inout horizontalTile : Drawable) : void
        final View view = findManagedViewById(R.id.suw_layout_decor);
        if (view instanceof Illustration) {
            final Illustration illustration = (Illustration) view;
            final Drawable illustrationDrawable = getIllustration(asset, horizontalTile);
            illustration.setIllustration(illustrationDrawable);
        }
!!!37359159.java!!!	setIllustrationAspectRatio(in aspectRatio : float) : void
        final View view = findManagedViewById(R.id.suw_layout_decor);
        if (view instanceof Illustration) {
            final Illustration illustration = (Illustration) view;
            illustration.setAspectRatio(aspectRatio);
        }
!!!37359287.java!!!	setDecorPaddingTop(in paddingTop : int) : void
        final View view = findManagedViewById(R.id.suw_layout_decor);
        if (view != null) {
            view.setPadding(view.getPaddingLeft(), paddingTop, view.getPaddingRight(),
                    view.getPaddingBottom());
        }
!!!37359415.java!!!	setLayoutBackground(inout background : Drawable) : void
        final View view = findManagedViewById(R.id.suw_layout_decor);
        if (view != null) {
            //noinspection deprecation
            view.setBackgroundDrawable(background);
        }
!!!37359543.java!!!	setBackgroundTile(in backgroundTile : int) : void
        final Drawable backgroundTileDrawable =
                getContext().getResources().getDrawable(backgroundTile);
        setBackgroundTile(backgroundTileDrawable);
!!!37359671.java!!!	setBackgroundTile(inout backgroundTile : Drawable) : void
        if (backgroundTile instanceof BitmapDrawable) {
            ((BitmapDrawable) backgroundTile).setTileModeXY(TileMode.REPEAT, TileMode.REPEAT);
        }
        setLayoutBackground(backgroundTile);
!!!37359799.java!!!	getIllustration(in asset : int, in horizontalTile : int) : Drawable
        final Context context = getContext();
        final Drawable assetDrawable = context.getResources().getDrawable(asset);
        final Drawable tile = context.getResources().getDrawable(horizontalTile);
        return getIllustration(assetDrawable, tile);
!!!37359927.java!!!	getIllustration(inout asset : Drawable, inout horizontalTile : Drawable) : Drawable
        final Context context = getContext();
        if (context.getResources().getBoolean(R.bool.suwUseTabletLayout)) {
            // If it is a "tablet" (sw600dp), create a LayerDrawable with the horizontal tile.
            if (horizontalTile instanceof BitmapDrawable) {
                ((BitmapDrawable) horizontalTile).setTileModeX(TileMode.REPEAT);
                ((BitmapDrawable) horizontalTile).setGravity(Gravity.TOP);
            }
            if (asset instanceof BitmapDrawable) {
                // Always specify TOP | LEFT, Illustration will flip the entire LayerDrawable.
                ((BitmapDrawable) asset).setGravity(Gravity.TOP | Gravity.LEFT);
            }
            final LayerDrawable layers =
                    new LayerDrawable(new Drawable[] { horizontalTile, asset });
            if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
                layers.setAutoMirrored(true);
            }
            return layers;
        } else {
            // If it is a "phone" (not sw600dp), simply return the illustration
            if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
                asset.setAutoMirrored(true);
            }
            return asset;
        }
!!!37360055.java!!!	findManagedViewById(in id : int) : View
        return findViewById(id);
!!!37360183.java!!!	isProgressBarShown() : boolean
        final View progressBar = findManagedViewById(R.id.suw_layout_progress);
        return progressBar != null && progressBar.getVisibility() == View.VISIBLE;
!!!37360311.java!!!	setProgressBarShown(inout shown : boolean) : void
        final View progressBar = findManagedViewById(R.id.suw_layout_progress);
        if (progressBar != null) {
            progressBar.setVisibility(shown ? View.VISIBLE : View.GONE);
        } else if (shown) {
            final ViewStub progressBarStub =
                    (ViewStub) findManagedViewById(R.id.suw_layout_progress_stub);
            if (progressBarStub != null) {
                progressBarStub.inflate();
            }
            if (mProgressBarColor != null) {
                setProgressBarColor(mProgressBarColor);
            }
        }
!!!37360439.java!!!	showProgressBar() : void
        setProgressBarShown(true);
!!!37360567.java!!!	hideProgressBar() : void
        setProgressBarShown(false);
!!!37360695.java!!!	setProgressBarColor(inout color : ColorStateList) : void
        mProgressBarColor = color;
        if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
            // Suppress lint error caused by
            // https://code.google.com/p/android/issues/detail?id=183136
            // noinspection AndroidLintWrongViewCast
            final ProgressBar bar = (ProgressBar) findViewById(R.id.suw_layout_progress);
            if (bar != null) {
                bar.setIndeterminateTintList(color);
            }
        }
!!!37360823.java!!!	getProgressBarColor() : ColorStateList
        return mProgressBarColor;
