class RecyclerItemAdapter
!!!37366199.java!!!	RecyclerItemAdapter(inout hierarchy : ItemHierarchy)
        mItemHierarchy = hierarchy;
        mItemHierarchy.registerObserver(this);
!!!37366327.java!!!	getItem(in position : int) : IItem
        return mItemHierarchy.getItemAt(position);
!!!37366455.java!!!	getItemId(in position : int) : long
        IItem mItem = getItem(position);
        if (mItem instanceof AbstractItem) {
            final int id = ((AbstractItem) mItem).getId();
            return id > 0 ? id : RecyclerView.NO_ID;
        } else {
            return RecyclerView.NO_ID;
        }
!!!37366583.java!!!	getItemCount() : int
        return mItemHierarchy.getCount();
!!!37366711.java!!!	onCreateViewHolder(inout parent : ViewGroup, in viewType : int) : ItemViewHolder
        final LayoutInflater inflater = LayoutInflater.from(parent.getContext());
        final View view = inflater.inflate(viewType, parent, false);
        final ItemViewHolder viewHolder = new ItemViewHolder(view);

        final TypedArray typedArray = parent.getContext()
                .obtainStyledAttributes(R.styleable.SuwRecyclerItemAdapter);
        Drawable selectableItemBackground = typedArray.getDrawable(
                R.styleable.SuwRecyclerItemAdapter_android_selectableItemBackground);
        if (selectableItemBackground == null) {
            selectableItemBackground = typedArray.getDrawable(
                    R.styleable.SuwRecyclerItemAdapter_selectableItemBackground);
        }

        final Drawable background = typedArray.getDrawable(
                R.styleable.SuwRecyclerItemAdapter_android_colorBackground);

        if (selectableItemBackground == null || background == null) {
            Log.e(TAG, "Cannot resolve required attributes."
                    + " selectableItemBackground=" + selectableItemBackground
                    + " background=" + background);
        } else {
            final Drawable[] layers = { background, selectableItemBackground };
            view.setBackgroundDrawable(new LayerDrawable(layers));
        }

        typedArray.recycle();

        view.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                final IItem item = viewHolder.getItem();
                if (mListener != null && item != null && item.isEnabled()) {
                    mListener.onItemSelected(item);
                }
            }
        });

        return viewHolder;
!!!37366839.java!!!	onBindViewHolder(inout holder : ItemViewHolder, in position : int) : void
        final IItem item = getItem(position);
        item.onBindView(holder.itemView);
        holder.setEnabled(item.isEnabled());
        holder.setItem(item);
!!!37366967.java!!!	getItemViewType(in position : int) : int
        // Use layout resource as item view type. RecyclerView item type does not have to be
        // contiguous.
        IItem item = getItem(position);
        return item.getLayoutResource();
!!!37367095.java!!!	onChanged(inout hierarchy : ItemHierarchy) : void
        notifyDataSetChanged();
!!!37367223.java!!!	findItemById(in id : int) : ItemHierarchy
        return mItemHierarchy.findItemById(id);
!!!37367351.java!!!	getRootItemHierarchy() : ItemHierarchy
        return mItemHierarchy;
!!!37367479.java!!!	setOnItemSelectedListener(inout listener : RecyclerItemAdapter::OnItemSelectedListener) : void
        mListener = listener;
