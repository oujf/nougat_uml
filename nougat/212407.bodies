class ArgumentsParser
!!!769847.java!!!	ArgumentsParser(inout arguments : String)
                this.arguments = arguments;
                index = 0;
!!!769975.java!!!	getCurrent() : String
                return current;
!!!770103.java!!!	getLastValue() : String
                return lastValue;
!!!770231.java!!!	getNext() : boolean
                if (index >= arguments.length) {
                    return false;
                }
                current = arguments[index];
                if (current.equals("--") || !current.startsWith("--")) {
                    return false;
                }
                index++;
                return true;
!!!770359.java!!!	getNextValue() : boolean
                if (index >= arguments.length) {
                    return false;
                }
                current = arguments[index];
                index++;
                return true;
!!!770487.java!!!	getRemaining() : String
                int n = arguments.length - index;
                String[] remaining = new String[n];
                if (n > 0) {
                    System.arraycopy(arguments, index, remaining, 0, n);
                }
                return remaining;
!!!770615.java!!!	isArg(inout prefix : String) : boolean
                int n = prefix.length();
                if (n > 0 && prefix.charAt(n-1) == '=') {
                    // Argument accepts a value. Capture it.
                    if (current.startsWith(prefix)) {
                        // Argument is in the form --name=value, split the value out
                        lastValue = current.substring(n);
                        return true;
                    } else {
                        // Check whether we have "--name value" as 2 arguments
                        prefix = prefix.substring(0, n-1);
                        if (current.equals(prefix)) {
                            if (getNextValue()) {
                                lastValue = current;
                                return true;
                            } else {
                                System.err.println("Missing value after parameter " + prefix);
                                throw new UsageException();
                            }
                        }
                        return false;
                    }
                } else {
                    // Argument does not accept a value.
                    return current.equals(prefix);
                }
