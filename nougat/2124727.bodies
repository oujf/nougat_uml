class ItemGroup
!!!37398455.java!!!	binarySearch(inout array : SparseIntArray, in value : int) : int
        final int size = array.size();
        int lo = 0;
        int hi = size - 1;

        while (lo <= hi) {
            final int mid = (lo + hi) >>> 1;
            final int midVal = array.valueAt(mid);

            if (midVal < value) {
                lo = mid + 1;
            } else if (midVal > value) {
                hi = mid - 1;
            } else {
                return array.keyAt(mid);  // value found
            }
        }
        // Value not found. Return the last item before our search range, which is the closest
        // value smaller than the value we are looking for.
        return array.keyAt(lo - 1);
!!!37398583.java!!!	ItemGroup()
        super();
!!!37398711.java!!!	ItemGroup(inout context : Context, inout attrs : AttributeSet)
        // Constructor for XML inflation
        super(context, attrs);
!!!37398839.java!!!	addChild(inout child : ItemHierarchy) : void
        mChildren.add(child);
        child.registerObserver(this);
        onHierarchyChanged();
!!!37398967.java!!!	removeChild(inout child : ItemHierarchy) : boolean
        if (mChildren.remove(child)) {
            child.unregisterObserver(this);
            onHierarchyChanged();
            return true;
        }
        return false;
!!!37399095.java!!!	clear() : void
        if (mChildren.size() == 0) {
            return;
        }

        for (ItemHierarchy item : mChildren) {
            item.unregisterObserver(this);
        }
        mChildren.clear();
        onHierarchyChanged();
!!!37399223.java!!!	getCount() : int
        updateDataIfNeeded();
        return mCount;
!!!37399351.java!!!	getItemAt(in position : int) : IItem
        int itemIndex = getItemIndex(position);
        ItemHierarchy item = mChildren.get(itemIndex);
        int subpos = position - mHierarchyStart.get(itemIndex);
        return item.getItemAt(subpos);
!!!37399479.java!!!	onChanged(inout hierarchy : ItemHierarchy) : void
        // Need to set dirty, because our children may have gotten more items.
        mDirty = true;
        notifyChanged();
!!!37399607.java!!!	onHierarchyChanged() : void
        onChanged(null);
!!!37399735.java!!!	findItemById(in id : int) : ItemHierarchy
        if (id == getId()) {
            return this;
        }
        for (ItemHierarchy child : mChildren) {
            ItemHierarchy childFindItem = child.findItemById(id);
            if (childFindItem != null) {
                return childFindItem;
            }
        }
        return null;
!!!37399863.java!!!	updateDataIfNeeded() : void
        if (mDirty) {
            mCount = 0;
            mHierarchyStart.clear();
            for (int itemIndex = 0; itemIndex < mChildren.size(); itemIndex++) {
                ItemHierarchy item = mChildren.get(itemIndex);
                if (item.getCount() > 0) {
                    mHierarchyStart.put(itemIndex, mCount);
                }
                mCount += item.getCount();
            }
            mDirty = false;
        }
!!!37399991.java!!!	getItemIndex(in position : int) : int
        updateDataIfNeeded();
        if (position < 0 || position >= mCount) {
            throw new IndexOutOfBoundsException("size=" + mCount + "; index=" + position);
        }
        int result = binarySearch(mHierarchyStart, position);
        if (result < 0) {
            throw new IllegalStateException("Cannot have item start index < 0");
        }
        return result;
