class ButtonBarItem
!!!37393207.java!!!	ButtonBarItem()
        super();
!!!37393335.java!!!	ButtonBarItem(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
!!!37393463.java!!!	getCount() : int
        return isVisible() ? 1 : 0;
!!!37393591.java!!!	isEnabled() : boolean
        // The children buttons are enabled and clickable, but the item itself is not
        return false;
!!!37393719.java!!!	getLayoutResource() : int
        return R.layout.suw_items_button_bar;
!!!37393847.java!!!	setVisible(inout visible : boolean) : void
        mVisible = visible;
!!!37393975.java!!!	isVisible() : boolean
        return mVisible;
!!!37394103.java!!!	getViewId() : int
        return getId();
!!!37394231.java!!!	onBindView(inout view : View) : void
        // Note: The efficiency could be improved by trying to recycle the buttons created by
        // ButtonItem
        final LinearLayout layout = (LinearLayout) view;
        layout.removeAllViews();

        for (ButtonItem buttonItem : mButtons) {
            Button button = buttonItem.createButton(layout);
            layout.addView(button);
        }

        view.setId(getViewId());
!!!37394359.java!!!	addChild(inout child : ItemHierarchy) : void
        if (child instanceof ButtonItem) {
            mButtons.add((ButtonItem) child);
        } else {
            throw new UnsupportedOperationException("Cannot add non-button item to Button Bar");
        }
!!!37394487.java!!!	findItemById(in id : int) : ItemHierarchy
        if (getId() == id) {
            return this;
        }
        for (ButtonItem button : mButtons) {
            final ItemHierarchy item = button.findItemById(id);
            if (item != null) {
                return item;
            }
        }
        return null;
