class BottomScrollView
!!!37403703.java!!!	BottomScrollView(inout context : Context)
        super(context);
!!!37403831.java!!!	BottomScrollView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
!!!37403959.java!!!	BottomScrollView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
!!!37404087.java!!!	setBottomScrollListener(inout l : BottomScrollView::BottomScrollListener) : void
        mListener = l;
!!!37404215.java!!!	getScrollThreshold() : int
        return mScrollThreshold;
!!!37404343.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
        super.onLayout(changed, l, t, r, b);
        final View child = getChildAt(0);
        if (child != null) {
            mScrollThreshold = Math.max(0, child.getMeasuredHeight() - b + t - getPaddingBottom());
        }
        if (b - t > 0) {
            // Post check scroll in the next run loop, so that the callback methods will be invoked
            // after the layout pass. This way a new layout pass will be scheduled if view
            // properties are changed in the callbacks.
            post(mCheckScrollRunnable);
        }
!!!37404471.java!!!	onScrollChanged(in l : int, in t : int, in oldl : int, in oldt : int) : void
        super.onScrollChanged(l, t, oldl, oldt);
        if (oldt != t) {
            checkScroll();
        }
!!!37404599.java!!!	checkScroll() : void
        if (mListener != null) {
            if (getScrollY() >= mScrollThreshold) {
                mListener.onScrolledToBottom();
            } else if (!mRequiringScroll) {
                mRequiringScroll = true;
                mListener.onRequiresScroll();
            }
        }
