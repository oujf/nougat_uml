class Illustration
!!!37408823.java!!!	Illustration(inout context : Context)
        super(context);
        init(null, 0);
!!!37408951.java!!!	Illustration(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        init(attrs, 0);
!!!37409079.java!!!	Illustration(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        super(context, attrs, defStyleAttr);
        init(attrs, defStyleAttr);
!!!37409207.java!!!	init(inout attrs : AttributeSet, in defStyleAttr : int) : void
        if (attrs != null) {
            TypedArray a = getContext().obtainStyledAttributes(attrs,
                    R.styleable.SuwIllustration, defStyleAttr, 0);
            mAspectRatio = a.getFloat(R.styleable.SuwIllustration_suwAspectRatio, 0.0f);
            a.recycle();
        }
        // Number of pixels of the 8dp baseline grid as defined in material design specs
        mBaselineGridSize = getResources().getDisplayMetrics().density * 8;
        setWillNotDraw(false);
!!!37409335.java!!!	setBackgroundDrawable(inout background : Drawable) : void
        if (background == mBackground) {
            return;
        }
        mBackground = background;
        invalidate();
        requestLayout();
!!!37409463.java!!!	setIllustration(inout illustration : Drawable) : void
        if (illustration == mIllustration) {
            return;
        }
        mIllustration = illustration;
        invalidate();
        requestLayout();
!!!37409591.java!!!	setAspectRatio(in aspectRatio : float) : void
        mAspectRatio = aspectRatio;
        invalidate();
        requestLayout();
!!!37409719.java!!!	setForeground(inout d : Drawable) : void
        setIllustration(d);
!!!37409847.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        if (mAspectRatio != 0.0f) {
            int parentWidth = MeasureSpec.getSize(widthMeasureSpec);
            int illustrationHeight = (int) (parentWidth / mAspectRatio);
            illustrationHeight -= illustrationHeight % mBaselineGridSize;
            setPadding(0, illustrationHeight, 0, 0);
        }
        if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
            //noinspection AndroidLintInlinedApi
            setOutlineProvider(ViewOutlineProvider.BOUNDS);
        }
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
!!!37409975.java!!!	onLayout(inout changed : boolean, in left : int, in top : int, in right : int, in bottom : int) : void
        final int layoutWidth = right - left;
        final int layoutHeight = bottom - top;
        if (mIllustration != null) {
            int intrinsicWidth = mIllustration.getIntrinsicWidth();
            int intrinsicHeight = mIllustration.getIntrinsicHeight();

            mViewBounds.set(0, 0, layoutWidth, layoutHeight);
            if (mAspectRatio != 0f) {
                mScale = layoutWidth / (float) intrinsicWidth;
                intrinsicWidth = layoutWidth;
                intrinsicHeight = (int) (intrinsicHeight * mScale);
            }
            Gravity.apply(Gravity.FILL_HORIZONTAL | Gravity.TOP, intrinsicWidth,
                    intrinsicHeight, mViewBounds, mIllustrationBounds);
            mIllustration.setBounds(mIllustrationBounds);
        }
        if (mBackground != null) {
            // Scale the background bounds by the same scale to compensate for the scale done to the
            // canvas in onDraw.
            mBackground.setBounds(0, 0, (int) Math.ceil(layoutWidth / mScale),
                    (int) Math.ceil((layoutHeight - mIllustrationBounds.height()) / mScale));
        }
        super.onLayout(changed, left, top, right, bottom);
!!!37410103.java!!!	onDraw(inout canvas : Canvas) : void
        if (mBackground != null) {
            // Draw the background filling parts not covered by the illustration
            canvas.save();
            canvas.translate(0, mIllustrationBounds.height());
            // Scale the background so its size matches the foreground
            canvas.scale(mScale, mScale, 0, 0);
            if (VERSION.SDK_INT > VERSION_CODES.JELLY_BEAN_MR1 &&
                    shouldMirrorDrawable(mBackground, getLayoutDirection())) {
                // Flip the illustration for RTL layouts
                canvas.scale(-1, 1);
                canvas.translate(-mBackground.getBounds().width(), 0);
            }
            mBackground.draw(canvas);
            canvas.restore();
        }
        if (mIllustration != null) {
            canvas.save();
            if (VERSION.SDK_INT > VERSION_CODES.JELLY_BEAN_MR1 &&
                    shouldMirrorDrawable(mIllustration, getLayoutDirection())) {
                // Flip the illustration for RTL layouts
                canvas.scale(-1, 1);
                canvas.translate(-mIllustrationBounds.width(), 0);
            }
            // Draw the illustration
            mIllustration.draw(canvas);
            canvas.restore();
        }
        super.onDraw(canvas);
!!!37410231.java!!!	shouldMirrorDrawable(inout drawable : Drawable, in layoutDirection : int) : boolean
        if (layoutDirection == LayoutDirection.RTL) {
            if (VERSION.SDK_INT >= VERSION_CODES.KITKAT) {
                return drawable.isAutoMirrored();
            } else if (VERSION.SDK_INT >= VERSION_CODES.JELLY_BEAN_MR1) {
                final int flags = getContext().getApplicationInfo().flags;
                //noinspection AndroidLintInlinedApi
                return (flags & ApplicationInfo.FLAG_SUPPORTS_RTL) != 0;
            }
        }
        return false;
