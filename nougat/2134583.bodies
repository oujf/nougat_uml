class SetupWizardLayoutTest
!!!37428919.java!!!	setUp() : void
        super.setUp();
        mContext = new ContextThemeWrapper(getInstrumentation().getContext(),
                R.style.SuwThemeMaterial_Light);
!!!37429047.java!!!	testDefaultTemplate() : void
        SetupWizardLayout layout = new SetupWizardLayout(mContext);
        assertDefaultTemplateInflated(layout);
!!!37429175.java!!!	testSetHeaderText() : void
        SetupWizardLayout layout = new SetupWizardLayout(mContext);
        TextView title = (TextView) layout.findViewById(R.id.suw_layout_title);
        layout.setHeaderText("Abracadabra");
        assertEquals("Header text should be \"Abracadabra\"", "Abracadabra", title.getText());
!!!37429303.java!!!	testAddView() : void
        SetupWizardLayout layout = new SetupWizardLayout(mContext);
        TextView tv = new TextView(mContext);
        tv.setId(R.id.test_view_id);
        layout.addView(tv);
        assertDefaultTemplateInflated(layout);
        View view = layout.findViewById(R.id.test_view_id);
        assertSame("The view added should be the same text view", tv, view);
!!!37429431.java!!!	testInflateFromXml() : void
        LayoutInflater inflater = LayoutInflater.from(mContext);
        SetupWizardLayout layout = (SetupWizardLayout) inflater.inflate(R.layout.test_layout, null);
        assertDefaultTemplateInflated(layout);
        View content = layout.findViewById(R.id.test_content);
        assertTrue("@id/test_content should be a TextView", content instanceof TextView);
!!!37429559.java!!!	testCustomTemplate() : void
        SetupWizardLayout layout = new SetupWizardLayout(mContext, R.layout.test_template);
        View templateView = layout.findViewById(R.id.test_template_view);
        assertNotNull("@id/test_template_view should exist in template", templateView);

        TextView tv = new TextView(mContext);
        tv.setId(R.id.test_view_id);
        layout.addView(tv);

        templateView = layout.findViewById(R.id.test_template_view);
        assertNotNull("@id/test_template_view should exist in template", templateView);
        View contentView = layout.findViewById(R.id.test_view_id);
        assertSame("The view added should be the same text view", tv, contentView);

        // The following methods should be no-ops because the custom template doesn't contain the
        // corresponding optional views. Just check that they don't throw exceptions.
        layout.setHeaderText("Abracadabra");
        layout.setIllustration(new ColorDrawable(Color.MAGENTA));
        layout.setLayoutBackground(new ColorDrawable(Color.RED));
!!!37429687.java!!!	testGetNavigationBar() : void
        final SetupWizardLayout layout = new SetupWizardLayout(mContext);
        final NavigationBar navigationBar = layout.getNavigationBar();
        assertEquals("Navigation bar should have ID = @id/suw_layout_navigation_bar",
                R.id.suw_layout_navigation_bar, navigationBar.getId());
!!!37429815.java!!!	testGetNavigationBarNull() : void
        // test_template does not have navigation bar so getNavigationBar() should return null.
        final SetupWizardLayout layout = new SetupWizardLayout(mContext, R.layout.test_template);
        final NavigationBar navigationBar = layout.getNavigationBar();
        assertNull("getNavigationBar() in test_template should return null", navigationBar);
!!!37429943.java!!!	testShowProgressBar() : void
        final SetupWizardLayout layout = new SetupWizardLayout(mContext);
        layout.showProgressBar();
        assertTrue("Progress bar should be shown", layout.isProgressBarShown());
        final View progressBar = layout.findViewById(R.id.suw_layout_progress);
        assertTrue("Progress bar view should be shown",
                progressBar instanceof ProgressBar && progressBar.getVisibility() == View.VISIBLE);
!!!37430071.java!!!	testHideProgressBar() : void
        final SetupWizardLayout layout = new SetupWizardLayout(mContext);
        layout.showProgressBar();
        assertTrue("Progress bar should be shown", layout.isProgressBarShown());
        layout.hideProgressBar();
        assertFalse("Progress bar should be hidden", layout.isProgressBarShown());
        final View progressBar = layout.findViewById(R.id.suw_layout_progress);
        assertTrue("Progress bar view should exist",
                progressBar == null || progressBar.getVisibility() != View.VISIBLE);
!!!37430199.java!!!	testShowProgressBarNotExist() : void
        // test_template does not have progress bar, so showNavigationBar() should do nothing.
        final SetupWizardLayout layout = new SetupWizardLayout(mContext, R.layout.test_template);
        layout.showProgressBar();
        assertFalse("Progress bar should not be shown", layout.isProgressBarShown());
!!!37430327.java!!!	testWrongTheme() : void
        // Test the error message when using the wrong theme
        mContext = new ContextThemeWrapper(getInstrumentation().getContext(),
                android.R.style.Theme);
        try {
            new SetupWizardLayout(mContext);
            fail("Should have thrown InflateException");
        } catch (InflateException e) {
            assertEquals("Exception message should mention correct theme to use",
                    "Unable to inflate layout. Are you using @style/SuwThemeMaterial "
                            + "(or its descendant) as your theme?", e.getMessage());
        }
!!!37430455.java!!!	testOnRestoreFromInstanceState() : void
        final SetupWizardLayout layout = new SetupWizardLayout(mContext);
        // noinspection ResourceType
        layout.setId(1234);

        SparseArray<Parcelable> container = new SparseArray<>();
        layout.saveHierarchyState(container);

        final SetupWizardLayout layout2 = new SetupWizardLayout(mContext);
        // noinspection ResourceType
        layout2.setId(1234);
        layout2.restoreHierarchyState(container);

        assertFalse("Progress bar should not be shown", layout2.isProgressBarShown());
!!!37430583.java!!!	testOnRestoreFromInstanceStateProgressBarShown() : void
        final SetupWizardLayout layout = new SetupWizardLayout(mContext);
        // noinspection ResourceType
        layout.setId(1234);

        layout.setProgressBarShown(true);

        SparseArray<Parcelable> container = new SparseArray<>();
        layout.saveHierarchyState(container);

        final SetupWizardLayout layout2 = new SetupWizardLayout(mContext);
        // noinspection ResourceType
        layout2.setId(1234);
        layout2.restoreHierarchyState(container);

        assertTrue("Progress bar should be shown", layout2.isProgressBarShown());
!!!37430711.java!!!	testOnRestoreFromIncompatibleInstanceState() : void
        final SetupWizardLayout layout = new SetupWizardLayout(mContext);
        // noinspection ResourceType
        layout.setId(1234);

        SparseArray<Parcelable> container = new SparseArray<>();
        container.put(1234, AbsSavedState.EMPTY_STATE);
        layout.restoreHierarchyState(container);

        // SetupWizardLayout shouldn't crash with incompatible Parcelable

        assertFalse("Progress bar should not be shown", layout.isProgressBarShown());
!!!37430839.java!!!	assertDefaultTemplateInflated(inout layout : SetupWizardLayout) : void
        View decorView = layout.findViewById(R.id.suw_layout_decor);
        View navbar = layout.findViewById(R.id.suw_layout_navigation_bar);
        View title = layout.findViewById(R.id.suw_layout_title);
        assertNotNull("@id/suw_layout_decor_view should not be null", decorView);
        assertTrue("@id/suw_layout_navigation_bar should be an instance of NavigationBar",
                navbar instanceof NavigationBar);
        assertNotNull("@id/suw_layout_title should not be null", title);
