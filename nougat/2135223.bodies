class SystemBarHelperTest
!!!37432503.java!!!	testAddVisibilityFlagView() : void
        final View view = createViewWithSystemUiVisibility(0x456);
        SystemBarHelper.addVisibilityFlag(view, 0x1400);
        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
            // Check that result is 0x1456, because 0x1400 | 0x456 = 0x1456.
            assertEquals("View visibility should be 0x1456", 0x1456, view.getSystemUiVisibility());
        }
!!!37432631.java!!!	testRemoveVisibilityFlagView() : void
        final View view = createViewWithSystemUiVisibility(0x456);
        SystemBarHelper.removeVisibilityFlag(view, 0x1400);
        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
            // Check that result is 0x56, because 0x456 & ~0x1400 = 0x56.
            assertEquals("View visibility should be 0x56", 0x56, view.getSystemUiVisibility());
        }
!!!37432759.java!!!	testAddVisibilityFlagWindow() : void
        final Window window = createWindowWithSystemUiVisibility(0x456);
        SystemBarHelper.addVisibilityFlag(window, 0x1400);
        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
            // Check that result is 0x1456 = 0x1400 | 0x456.
            assertEquals("View visibility should be 0x1456", 0x1456,
                    window.getAttributes().systemUiVisibility);
        }
!!!37432887.java!!!	testRemoveVisibilityFlagWindow() : void
        final Window window = createWindowWithSystemUiVisibility(0x456);
        SystemBarHelper.removeVisibilityFlag(window, 0x1400);
        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
            // Check that result is 0x56 = 0x456 & ~0x1400.
            assertEquals("View visibility should be 0x56", 0x56,
                    window.getAttributes().systemUiVisibility);
        }
!!!37433015.java!!!	testHideSystemBarsWindow() : void
        final Window window = createWindowWithSystemUiVisibility(0x456);
        SystemBarHelper.hideSystemBars(window);
        if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
            assertEquals("DEFAULT_IMMERSIVE_FLAGS should be added to window's systemUiVisibility",
                    DEFAULT_IMMERSIVE_FLAGS | 0x456,
                    window.getAttributes().systemUiVisibility);
            assertEquals(
                    "DEFAULT_IMMERSIVE_FLAGS should be added to decorView's systemUiVisibility",
                    DEFAULT_IMMERSIVE_FLAGS | 0x456,
                    window.getDecorView().getSystemUiVisibility());
            assertEquals("Navigation bar should be transparent", window.getNavigationBarColor(), 0);
            assertEquals("Status bar should be transparent", window.getStatusBarColor(), 0);
        }
!!!37433143.java!!!	testShowSystemBarsWindow() : void
        final Window window = createWindowWithSystemUiVisibility(0x456);
        SystemBarHelper.showSystemBars(window, getContext());
        if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
            assertEquals(
                    "DEFAULT_IMMERSIVE_FLAGS should be removed from window's systemUiVisibility",
                    0x456 & ~DEFAULT_IMMERSIVE_FLAGS,
                    window.getAttributes().systemUiVisibility);
            assertEquals(
                    "DEFAULT_IMMERSIVE_FLAGS should be removed from decorView's systemUiVisibility",
                    0x456 & ~DEFAULT_IMMERSIVE_FLAGS,
                    window.getDecorView().getSystemUiVisibility());
            assertEquals("Navigation bar should not be transparent",
                    window.getNavigationBarColor(), 0xff000000);
            assertEquals("Status bar should not be transparent",
                    window.getStatusBarColor(), 0xff000000);
        }
!!!37433271.java!!!	testHideSystemBarsNoInfiniteLoop() : void
        final TestWindow window = new TestWindow(getContext(), null);
        final HandlerThread thread = new HandlerThread("SystemBarHelperTest");
        thread.start();
        final Handler handler = new Handler(thread.getLooper());
        handler.post(new Runnable() {
            @Override
            public void run() {
                SystemBarHelper.hideSystemBars(window);
            }
        });
        SystemClock.sleep(500);  // Wait for the looper to drain all the messages
        thread.quit();
        // Initial peek + 3 retries = 4 tries total
        if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
            assertEquals("Peek decor view should give up after 4 tries", 4,
                    window.peekDecorViewCount);
        }
!!!37433399.java!!!	testHideSystemBarsDialog() : void
        final Dialog dialog = new Dialog(mContext);
        if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
            final WindowManager.LayoutParams attrs = dialog.getWindow().getAttributes();
            attrs.systemUiVisibility = 0x456;
            dialog.getWindow().setAttributes(attrs);
        }

        SystemBarHelper.hideSystemBars(dialog);
        if (VERSION.SDK_INT >= VERSION_CODES.LOLLIPOP) {
            assertEquals("DIALOG_IMMERSIVE_FLAGS should be added to window's systemUiVisibility",
                    DIALOG_IMMERSIVE_FLAGS | 0x456,
                    dialog.getWindow().getAttributes().systemUiVisibility);
        }
!!!37433527.java!!!	testSetBackButtonVisibleTrue() : void
        final Window window = createWindowWithSystemUiVisibility(0x456);
        SystemBarHelper.setBackButtonVisible(window, true);
        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
            assertEquals("View visibility should be 0x456", 0x456,
                    window.getAttributes().systemUiVisibility);
        }
!!!37433655.java!!!	testSetBackButtonVisibleFalse() : void
        final Window window = createWindowWithSystemUiVisibility(0x456);
        SystemBarHelper.setBackButtonVisible(window, false);
        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
            assertEquals("STATUS_BAR_DISABLE_BACK should be added to systemUiVisibility",
                    0x456 | STATUS_BAR_DISABLE_BACK, window.getAttributes().systemUiVisibility);
        }
!!!37433783.java!!!	createViewWithSystemUiVisibility(in vis : int) : View
        final View view = new View(getContext());
        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
            view.setSystemUiVisibility(vis);
        }
        return view;
!!!37433911.java!!!	createWindowWithSystemUiVisibility(in vis : int) : Window
        final Window window = new TestWindow(getContext(), createViewWithSystemUiVisibility(vis));
        if (VERSION.SDK_INT >= VERSION_CODES.HONEYCOMB) {
            WindowManager.LayoutParams attrs = window.getAttributes();
            attrs.systemUiVisibility = vis;
            window.setAttributes(attrs);
        }
        return window;
