class SetupWizardNavBar
!!!37443767.java!!!	SetupWizardNavBar()
        // no-arg constructor for fragments
!!!37443895.java!!!	onAttach(inout activity : Activity) : void
        super.onAttach(activity);
        mCallback = (NavigationBarListener) activity;
!!!37444023.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        Context context = new ContextThemeWrapper(getActivity(), getNavbarTheme());
        inflater = LayoutInflater.from(context);
        mNavigationBarView = (ViewGroup) inflater.inflate(R.layout.setup_wizard_navbar_layout,
                container, false);
        mNextButton = (Button) mNavigationBarView.findViewById(R.id.setup_wizard_navbar_next);
        mBackButton = (Button) mNavigationBarView.findViewById(R.id.setup_wizard_navbar_back);
        mNextButton.setOnClickListener(this);
        mBackButton.setOnClickListener(this);
        return mNavigationBarView;
!!!37444151.java!!!	onViewCreated(inout view : View, inout savedInstanceState : Bundle) : void
        super.onViewCreated(view, savedInstanceState);
        mCallback.onNavigationBarCreated(this);
        mNavigationBarView.setSystemUiVisibility(mSystemUiFlags);

        // Set the UI flags before draw because the visibility might change in unexpected /
        // undetectable times, like transitioning from a finishing activity that had a keyboard
        ViewTreeObserver viewTreeObserver = mNavigationBarView.getViewTreeObserver();
        viewTreeObserver.addOnPreDrawListener(this);
!!!37444279.java!!!	onPreDraw() : boolean
        // View.setSystemUiVisibility checks if the visibility changes before applying them
        // so the performance impact is contained
        mNavigationBarView.setSystemUiVisibility(mSystemUiFlags);
        return true;
!!!37444407.java!!!	setUseImmersiveMode(inout useImmersiveMode : boolean) : void
        // By default, enable layoutHideNavigation if immersive mode is used
        setUseImmersiveMode(useImmersiveMode, useImmersiveMode);
!!!37444535.java!!!	setUseImmersiveMode(inout useImmersiveMode : boolean, inout layoutHideNavigation : boolean) : void
        if (useImmersiveMode) {
            mSystemUiFlags |= IMMERSIVE_FLAGS;
            if (layoutHideNavigation) {
                mSystemUiFlags |= View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;
            }
        } else {
            mSystemUiFlags &= ~(IMMERSIVE_FLAGS | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
        }
        mNavigationBarView.setSystemUiVisibility(mSystemUiFlags);
!!!37444663.java!!!	getNavbarTheme() : int
        // Normally we can automatically guess the theme by comparing the foreground color against
        // the background color. But we also allow specifying explicitly using
        // setup_wizard_navbar_theme.
        TypedArray attributes = getActivity().obtainStyledAttributes(
                new int[] {
                        R.attr.setup_wizard_navbar_theme,
                        android.R.attr.colorForeground,
                        android.R.attr.colorBackground });
        int theme = attributes.getResourceId(0, 0);
        if (theme == 0) {
            // Compare the value of the foreground against the background color to see if current
            // theme is light-on-dark or dark-on-light.
            float[] foregroundHsv = new float[3];
            float[] backgroundHsv = new float[3];
            Color.colorToHSV(attributes.getColor(1, 0), foregroundHsv);
            Color.colorToHSV(attributes.getColor(2, 0), backgroundHsv);
            boolean isDarkBg = foregroundHsv[2] > backgroundHsv[2];
            theme = isDarkBg ? R.style.setup_wizard_navbar_theme_dark :
                    R.style.setup_wizard_navbar_theme_light;
        }
        attributes.recycle();
        return theme;
!!!37444791.java!!!	onClick(inout v : View) : void
        if (v == mBackButton) {
            mCallback.onNavigateBack();
        } else if (v == mNextButton) {
            mCallback.onNavigateNext();
        }
!!!37444919.java!!!	getBackButton() : Button
        return mBackButton;
!!!37445047.java!!!	getNextButton() : Button
        return mNextButton;
