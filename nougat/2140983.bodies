class SmsMessageBase
!!!37776951.java!!!	getServiceCenterAddress() : String
        return mScAddress;
!!!37777079.java!!!	getOriginatingAddress() : String
        if (mOriginatingAddress == null) {
            return null;
        }

        return mOriginatingAddress.getAddressString();
!!!37777207.java!!!	getDisplayOriginatingAddress() : String
        if (mIsEmail) {
            return mEmailFrom;
        } else {
            return getOriginatingAddress();
        }
!!!37777335.java!!!	getMessageBody() : String
        return mMessageBody;
!!!37777591.java!!!	getDisplayMessageBody() : String
        if (mIsEmail) {
            return mEmailBody;
        } else {
            return getMessageBody();
        }
!!!37777719.java!!!	getPseudoSubject() : String
        return mPseudoSubject == null ? "" : mPseudoSubject;
!!!37777847.java!!!	getTimestampMillis() : long
        return mScTimeMillis;
!!!37777975.java!!!	isEmail() : boolean
        return mIsEmail;
!!!37778103.java!!!	getEmailBody() : String
        return mEmailBody;
!!!37778231.java!!!	getEmailFrom() : String
        return mEmailFrom;
!!!37779127.java!!!	getUserData() : byte
        return mUserData;
!!!37779255.java!!!	getUserDataHeader() : SmsHeader
        return mUserDataHeader;
!!!37779383.java!!!	getPdu() : byte
        return mPdu;
!!!37779895.java!!!	getStatusOnIcc() : int
        return mStatusOnIcc;
!!!37780023.java!!!	getIndexOnIcc() : int
        return mIndexOnIcc;
!!!37780151.java!!!	parseMessageBody() : void
        // originatingAddress could be null if this message is from a status
        // report.
        if (mOriginatingAddress != null && mOriginatingAddress.couldBeEmailGateway()) {
            extractEmailAddressFromMessageBody();
        }
!!!37780279.java!!!	extractEmailAddressFromMessageBody() : void

        /* Some carriers may use " /" delimiter as below
         *
         * 1. [x@y][ ]/[subject][ ]/[body]
         * -or-
         * 2. [x@y][ ]/[body]
         */
         String[] parts = mMessageBody.split("( /)|( )", 2);
         if (parts.length < 2) return;
         mEmailFrom = parts[0];
         mEmailBody = parts[1];
         mIsEmail = Telephony.Mms.isEmailAddress(mEmailFrom);
!!!37780407.java!!!	findNextUnicodePosition(in currentPosition : int, in byteLimit : int, inout msgBody : CharSequence) : int
        int nextPos = Math.min(currentPosition + byteLimit / 2, msgBody.length());
        // Check whether the fragment ends in a character boundary. Some characters take 4-bytes
        // in UTF-16 encoding. Many carriers cannot handle
        // a fragment correctly if it does not end at a character boundary.
        if (nextPos < msgBody.length()) {
            BreakIterator breakIterator = BreakIterator.getCharacterInstance();
            breakIterator.setText(msgBody.toString());
            if (!breakIterator.isBoundary(nextPos)) {
                int breakPos = breakIterator.preceding(nextPos);
                while (breakPos + 4 <= nextPos
                        && Emoji.isRegionalIndicatorSymbol(
                            Character.codePointAt(msgBody, breakPos))
                        && Emoji.isRegionalIndicatorSymbol(
                            Character.codePointAt(msgBody, breakPos + 2))) {
                    // skip forward over flags (pairs of Regional Indicator Symbol)
                    breakPos += 4;
                }
                if (breakPos > currentPosition) {
                    nextPos = breakPos;
                } else if (Character.isHighSurrogate(msgBody.charAt(nextPos - 1))) {
                    // no character boundary in this fragment, try to at least land on a code point
                    nextPos -= 1;
                }
            }
        }
        return nextPos;
!!!37780535.java!!!	calcUnicodeEncodingDetails(inout msgBody : CharSequence) : GsmAlphabet::TextEncodingDetails
        TextEncodingDetails ted = new TextEncodingDetails();
        int octets = msgBody.length() * 2;
        ted.codeUnitSize = SmsConstants.ENCODING_16BIT;
        ted.codeUnitCount = msgBody.length();
        if (octets > SmsConstants.MAX_USER_DATA_BYTES) {
            // If EMS is not supported, break down EMS into single segment SMS
            // and add page info " x/y".
            // In the case of UCS2 encoding type, we need 8 bytes for this
            // but we only have 6 bytes from UDH, so truncate the limit for
            // each segment by 2 bytes (1 char).
            int maxUserDataBytesWithHeader = SmsConstants.MAX_USER_DATA_BYTES_WITH_HEADER;
            if (!SmsMessage.hasEmsSupport()) {
                // make sure total number of segments is less than 10
                if (octets <= 9 * (maxUserDataBytesWithHeader - 2)) {
                    maxUserDataBytesWithHeader -= 2;
                }
            }

            int pos = 0;  // Index in code units.
            int msgCount = 0;
            while (pos < msgBody.length()) {
                int nextPos = findNextUnicodePosition(pos, maxUserDataBytesWithHeader,
                        msgBody);
                if (nextPos == msgBody.length()) {
                    ted.codeUnitsRemaining = pos + maxUserDataBytesWithHeader / 2 -
                            msgBody.length();
                }
                pos = nextPos;
                msgCount++;
            }
            ted.msgCount = msgCount;
        } else {
            ted.msgCount = 1;
            ted.codeUnitsRemaining = (SmsConstants.MAX_USER_DATA_BYTES - octets) / 2;
        }

        return ted;
