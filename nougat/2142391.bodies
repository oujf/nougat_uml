class BaseCommands
!!!37516599.java!!!	BaseCommands(inout context : Context)
        mContext = context;  // May be null (if so we won't log statistics)
!!!37516727.java!!!	getRadioState() : CommandsInterface::RadioState
        return mState;
!!!37516855.java!!!	registerForRadioStateChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);

        synchronized (mStateMonitor) {
            mRadioStateChangedRegistrants.add(r);
            r.notifyRegistrant();
        }
!!!37516983.java!!!	unregisterForRadioStateChanged(inout h : Handler) : void
        synchronized (mStateMonitor) {
            mRadioStateChangedRegistrants.remove(h);
        }
!!!37517111.java!!!	registerForImsNetworkStateChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mImsNetworkStateChangedRegistrants.add(r);
!!!37517239.java!!!	unregisterForImsNetworkStateChanged(inout h : Handler) : void
        mImsNetworkStateChangedRegistrants.remove(h);
!!!37517367.java!!!	registerForOn(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);

        synchronized (mStateMonitor) {
            mOnRegistrants.add(r);

            if (mState.isOn()) {
                r.notifyRegistrant(new AsyncResult(null, null, null));
            }
        }
!!!37517495.java!!!	unregisterForOn(inout h : Handler) : void
        synchronized (mStateMonitor) {
            mOnRegistrants.remove(h);
        }
!!!37517623.java!!!	registerForAvailable(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);

        synchronized (mStateMonitor) {
            mAvailRegistrants.add(r);

            if (mState.isAvailable()) {
                r.notifyRegistrant(new AsyncResult(null, null, null));
            }
        }
!!!37517751.java!!!	unregisterForAvailable(inout h : Handler) : void
        synchronized(mStateMonitor) {
            mAvailRegistrants.remove(h);
        }
!!!37517879.java!!!	registerForNotAvailable(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);

        synchronized (mStateMonitor) {
            mNotAvailRegistrants.add(r);

            if (!mState.isAvailable()) {
                r.notifyRegistrant(new AsyncResult(null, null, null));
            }
        }
!!!37518007.java!!!	unregisterForNotAvailable(inout h : Handler) : void
        synchronized (mStateMonitor) {
            mNotAvailRegistrants.remove(h);
        }
!!!37518135.java!!!	registerForOffOrNotAvailable(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);

        synchronized (mStateMonitor) {
            mOffOrNotAvailRegistrants.add(r);

            if (mState == RadioState.RADIO_OFF || !mState.isAvailable()) {
                r.notifyRegistrant(new AsyncResult(null, null, null));
            }
        }
!!!37518263.java!!!	unregisterForOffOrNotAvailable(inout h : Handler) : void
        synchronized(mStateMonitor) {
            mOffOrNotAvailRegistrants.remove(h);
        }
!!!37518391.java!!!	registerForCallStateChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);

        mCallStateRegistrants.add(r);
!!!37518519.java!!!	unregisterForCallStateChanged(inout h : Handler) : void
        mCallStateRegistrants.remove(h);
!!!37518647.java!!!	registerForVoiceNetworkStateChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);

        mVoiceNetworkStateRegistrants.add(r);
!!!37518775.java!!!	unregisterForVoiceNetworkStateChanged(inout h : Handler) : void
        mVoiceNetworkStateRegistrants.remove(h);
!!!37518903.java!!!	registerForDataNetworkStateChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);

        mDataNetworkStateRegistrants.add(r);
!!!37519031.java!!!	unregisterForDataNetworkStateChanged(inout h : Handler) : void
        mDataNetworkStateRegistrants.remove(h);
!!!37519159.java!!!	registerForVoiceRadioTechChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mVoiceRadioTechChangedRegistrants.add(r);
!!!37519287.java!!!	unregisterForVoiceRadioTechChanged(inout h : Handler) : void
        mVoiceRadioTechChangedRegistrants.remove(h);
!!!37519415.java!!!	registerForIccStatusChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mIccStatusChangedRegistrants.add(r);
!!!37519543.java!!!	unregisterForIccStatusChanged(inout h : Handler) : void
        mIccStatusChangedRegistrants.remove(h);
!!!37519671.java!!!	setOnNewGsmSms(inout h : Handler, in what : int, inout obj : Object) : void
        mGsmSmsRegistrant = new Registrant (h, what, obj);
!!!37519799.java!!!	unSetOnNewGsmSms(inout h : Handler) : void
        if (mGsmSmsRegistrant != null && mGsmSmsRegistrant.getHandler() == h) {
            mGsmSmsRegistrant.clear();
            mGsmSmsRegistrant = null;
        }
!!!37519927.java!!!	setOnNewCdmaSms(inout h : Handler, in what : int, inout obj : Object) : void
        mCdmaSmsRegistrant = new Registrant (h, what, obj);
!!!37520055.java!!!	unSetOnNewCdmaSms(inout h : Handler) : void
        if (mCdmaSmsRegistrant != null && mCdmaSmsRegistrant.getHandler() == h) {
            mCdmaSmsRegistrant.clear();
            mCdmaSmsRegistrant = null;
        }
!!!37520183.java!!!	setOnNewGsmBroadcastSms(inout h : Handler, in what : int, inout obj : Object) : void
        mGsmBroadcastSmsRegistrant = new Registrant (h, what, obj);
!!!37520311.java!!!	unSetOnNewGsmBroadcastSms(inout h : Handler) : void
        if (mGsmBroadcastSmsRegistrant != null && mGsmBroadcastSmsRegistrant.getHandler() == h) {
            mGsmBroadcastSmsRegistrant.clear();
            mGsmBroadcastSmsRegistrant = null;
        }
!!!37520439.java!!!	setOnSmsOnSim(inout h : Handler, in what : int, inout obj : Object) : void
        mSmsOnSimRegistrant = new Registrant (h, what, obj);
!!!37520567.java!!!	unSetOnSmsOnSim(inout h : Handler) : void
        if (mSmsOnSimRegistrant != null && mSmsOnSimRegistrant.getHandler() == h) {
            mSmsOnSimRegistrant.clear();
            mSmsOnSimRegistrant = null;
        }
!!!37520695.java!!!	setOnSmsStatus(inout h : Handler, in what : int, inout obj : Object) : void
        mSmsStatusRegistrant = new Registrant (h, what, obj);
!!!37520823.java!!!	unSetOnSmsStatus(inout h : Handler) : void
        if (mSmsStatusRegistrant != null && mSmsStatusRegistrant.getHandler() == h) {
            mSmsStatusRegistrant.clear();
            mSmsStatusRegistrant = null;
        }
!!!37520951.java!!!	setOnSignalStrengthUpdate(inout h : Handler, in what : int, inout obj : Object) : void
        mSignalStrengthRegistrant = new Registrant (h, what, obj);
!!!37521079.java!!!	unSetOnSignalStrengthUpdate(inout h : Handler) : void
        if (mSignalStrengthRegistrant != null && mSignalStrengthRegistrant.getHandler() == h) {
            mSignalStrengthRegistrant.clear();
            mSignalStrengthRegistrant = null;
        }
!!!37521207.java!!!	setOnNITZTime(inout h : Handler, in what : int, inout obj : Object) : void
        mNITZTimeRegistrant = new Registrant (h, what, obj);
!!!37521335.java!!!	unSetOnNITZTime(inout h : Handler) : void
        if (mNITZTimeRegistrant != null && mNITZTimeRegistrant.getHandler() == h) {
            mNITZTimeRegistrant.clear();
            mNITZTimeRegistrant = null;
        }
!!!37521463.java!!!	setOnUSSD(inout h : Handler, in what : int, inout obj : Object) : void
        mUSSDRegistrant = new Registrant (h, what, obj);
!!!37521591.java!!!	unSetOnUSSD(inout h : Handler) : void
        if (mUSSDRegistrant != null && mUSSDRegistrant.getHandler() == h) {
            mUSSDRegistrant.clear();
            mUSSDRegistrant = null;
        }
!!!37521719.java!!!	setOnSuppServiceNotification(inout h : Handler, in what : int, inout obj : Object) : void
        mSsnRegistrant = new Registrant (h, what, obj);
!!!37521847.java!!!	unSetOnSuppServiceNotification(inout h : Handler) : void
        if (mSsnRegistrant != null && mSsnRegistrant.getHandler() == h) {
            mSsnRegistrant.clear();
            mSsnRegistrant = null;
        }
!!!37521975.java!!!	setOnCatSessionEnd(inout h : Handler, in what : int, inout obj : Object) : void
        mCatSessionEndRegistrant = new Registrant (h, what, obj);
!!!37522103.java!!!	unSetOnCatSessionEnd(inout h : Handler) : void
        if (mCatSessionEndRegistrant != null && mCatSessionEndRegistrant.getHandler() == h) {
            mCatSessionEndRegistrant.clear();
            mCatSessionEndRegistrant = null;
        }
!!!37522231.java!!!	setOnCatProactiveCmd(inout h : Handler, in what : int, inout obj : Object) : void
        mCatProCmdRegistrant = new Registrant (h, what, obj);
!!!37522359.java!!!	unSetOnCatProactiveCmd(inout h : Handler) : void
        if (mCatProCmdRegistrant != null && mCatProCmdRegistrant.getHandler() == h) {
            mCatProCmdRegistrant.clear();
            mCatProCmdRegistrant = null;
        }
!!!37522487.java!!!	setOnCatEvent(inout h : Handler, in what : int, inout obj : Object) : void
        mCatEventRegistrant = new Registrant (h, what, obj);
!!!37522615.java!!!	unSetOnCatEvent(inout h : Handler) : void
        if (mCatEventRegistrant != null && mCatEventRegistrant.getHandler() == h) {
            mCatEventRegistrant.clear();
            mCatEventRegistrant = null;
        }
!!!37522743.java!!!	setOnCatCallSetUp(inout h : Handler, in what : int, inout obj : Object) : void
        mCatCallSetUpRegistrant = new Registrant (h, what, obj);
!!!37522871.java!!!	unSetOnCatCallSetUp(inout h : Handler) : void
        if (mCatCallSetUpRegistrant != null && mCatCallSetUpRegistrant.getHandler() == h) {
            mCatCallSetUpRegistrant.clear();
            mCatCallSetUpRegistrant = null;
        }
!!!37522999.java!!!	setOnIccSmsFull(inout h : Handler, in what : int, inout obj : Object) : void
        mIccSmsFullRegistrant = new Registrant (h, what, obj);
!!!37523127.java!!!	unSetOnIccSmsFull(inout h : Handler) : void
        if (mIccSmsFullRegistrant != null && mIccSmsFullRegistrant.getHandler() == h) {
            mIccSmsFullRegistrant.clear();
            mIccSmsFullRegistrant = null;
        }
!!!37523255.java!!!	registerForIccRefresh(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mIccRefreshRegistrants.add(r);
!!!37523383.java!!!	setOnIccRefresh(inout h : Handler, in what : int, inout obj : Object) : void
        registerForIccRefresh(h, what, obj);
!!!37523511.java!!!	setEmergencyCallbackMode(inout h : Handler, in what : int, inout obj : Object) : void
        mEmergencyCallbackModeRegistrant = new Registrant (h, what, obj);
!!!37523639.java!!!	unregisterForIccRefresh(inout h : Handler) : void
        mIccRefreshRegistrants.remove(h);
!!!37523767.java!!!	unsetOnIccRefresh(inout h : Handler) : void
        unregisterForIccRefresh(h);
!!!37523895.java!!!	setOnCallRing(inout h : Handler, in what : int, inout obj : Object) : void
        mRingRegistrant = new Registrant (h, what, obj);
!!!37524023.java!!!	unSetOnCallRing(inout h : Handler) : void
        if (mRingRegistrant != null && mRingRegistrant.getHandler() == h) {
            mRingRegistrant.clear();
            mRingRegistrant = null;
        }
!!!37524151.java!!!	setOnSs(inout h : Handler, in what : int, inout obj : Object) : void
        mSsRegistrant = new Registrant (h, what, obj);
!!!37524279.java!!!	unSetOnSs(inout h : Handler) : void
        mSsRegistrant.clear();
!!!37524407.java!!!	setOnCatCcAlphaNotify(inout h : Handler, in what : int, inout obj : Object) : void
        mCatCcAlphaRegistrant = new Registrant (h, what, obj);
!!!37524535.java!!!	unSetOnCatCcAlphaNotify(inout h : Handler) : void
        mCatCcAlphaRegistrant.clear();
!!!37524663.java!!!	registerForInCallVoicePrivacyOn(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mVoicePrivacyOnRegistrants.add(r);
!!!37524791.java!!!	unregisterForInCallVoicePrivacyOn(inout h : Handler) : void
        mVoicePrivacyOnRegistrants.remove(h);
!!!37524919.java!!!	registerForInCallVoicePrivacyOff(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mVoicePrivacyOffRegistrants.add(r);
!!!37525047.java!!!	unregisterForInCallVoicePrivacyOff(inout h : Handler) : void
        mVoicePrivacyOffRegistrants.remove(h);
!!!37525175.java!!!	setOnRestrictedStateChanged(inout h : Handler, in what : int, inout obj : Object) : void
        mRestrictedStateRegistrant = new Registrant (h, what, obj);
!!!37525303.java!!!	unSetOnRestrictedStateChanged(inout h : Handler) : void
        if (mRestrictedStateRegistrant != null && mRestrictedStateRegistrant.getHandler() == h) {
            mRestrictedStateRegistrant.clear();
            mRestrictedStateRegistrant = null;
        }
!!!37525431.java!!!	registerForDisplayInfo(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mDisplayInfoRegistrants.add(r);
!!!37525559.java!!!	unregisterForDisplayInfo(inout h : Handler) : void
        mDisplayInfoRegistrants.remove(h);
!!!37525687.java!!!	registerForCallWaitingInfo(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mCallWaitingInfoRegistrants.add(r);
!!!37525815.java!!!	unregisterForCallWaitingInfo(inout h : Handler) : void
        mCallWaitingInfoRegistrants.remove(h);
!!!37525943.java!!!	registerForSignalInfo(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mSignalInfoRegistrants.add(r);
!!!37526071.java!!!	setOnUnsolOemHookRaw(inout h : Handler, in what : int, inout obj : Object) : void
        mUnsolOemHookRawRegistrant = new Registrant (h, what, obj);
!!!37526199.java!!!	unSetOnUnsolOemHookRaw(inout h : Handler) : void
        if (mUnsolOemHookRawRegistrant != null && mUnsolOemHookRawRegistrant.getHandler() == h) {
            mUnsolOemHookRawRegistrant.clear();
            mUnsolOemHookRawRegistrant = null;
        }
!!!37526327.java!!!	unregisterForSignalInfo(inout h : Handler) : void
        mSignalInfoRegistrants.remove(h);
!!!37526455.java!!!	registerForCdmaOtaProvision(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mOtaProvisionRegistrants.add(r);
!!!37526583.java!!!	unregisterForCdmaOtaProvision(inout h : Handler) : void
        mOtaProvisionRegistrants.remove(h);
!!!37526711.java!!!	registerForNumberInfo(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mNumberInfoRegistrants.add(r);
!!!37526839.java!!!	unregisterForNumberInfo(inout h : Handler) : void
        mNumberInfoRegistrants.remove(h);
!!!37526967.java!!!	registerForRedirectedNumberInfo(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mRedirNumInfoRegistrants.add(r);
!!!37527095.java!!!	unregisterForRedirectedNumberInfo(inout h : Handler) : void
        mRedirNumInfoRegistrants.remove(h);
!!!37527223.java!!!	registerForLineControlInfo(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mLineControlInfoRegistrants.add(r);
!!!37527351.java!!!	unregisterForLineControlInfo(inout h : Handler) : void
        mLineControlInfoRegistrants.remove(h);
!!!37527479.java!!!	registerFoT53ClirlInfo(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mT53ClirInfoRegistrants.add(r);
!!!37527607.java!!!	unregisterForT53ClirInfo(inout h : Handler) : void
        mT53ClirInfoRegistrants.remove(h);
!!!37527735.java!!!	registerForT53AudioControlInfo(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mT53AudCntrlInfoRegistrants.add(r);
!!!37527863.java!!!	unregisterForT53AudioControlInfo(inout h : Handler) : void
        mT53AudCntrlInfoRegistrants.remove(h);
!!!37527991.java!!!	registerForRingbackTone(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mRingbackToneRegistrants.add(r);
!!!37528119.java!!!	unregisterForRingbackTone(inout h : Handler) : void
        mRingbackToneRegistrants.remove(h);
!!!37528247.java!!!	registerForResendIncallMute(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mResendIncallMuteRegistrants.add(r);
!!!37528375.java!!!	unregisterForResendIncallMute(inout h : Handler) : void
        mResendIncallMuteRegistrants.remove(h);
!!!37528503.java!!!	registerForCdmaSubscriptionChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mCdmaSubscriptionChangedRegistrants.add(r);
!!!37528631.java!!!	unregisterForCdmaSubscriptionChanged(inout h : Handler) : void
        mCdmaSubscriptionChangedRegistrants.remove(h);
!!!37528759.java!!!	registerForCdmaPrlChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mCdmaPrlChangedRegistrants.add(r);
!!!37528887.java!!!	unregisterForCdmaPrlChanged(inout h : Handler) : void
        mCdmaPrlChangedRegistrants.remove(h);
!!!37529015.java!!!	registerForExitEmergencyCallbackMode(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mExitEmergencyCallbackModeRegistrants.add(r);
!!!37529143.java!!!	unregisterForExitEmergencyCallbackMode(inout h : Handler) : void
        mExitEmergencyCallbackModeRegistrants.remove(h);
!!!37529271.java!!!	registerForHardwareConfigChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mHardwareConfigChangeRegistrants.add(r);
!!!37529399.java!!!	unregisterForHardwareConfigChanged(inout h : Handler) : void
        mHardwareConfigChangeRegistrants.remove(h);
!!!37529527.java!!!	registerForRilConnected(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mRilConnectedRegistrants.add(r);
        if (mRilVersion != -1) {
            r.notifyRegistrant(new AsyncResult(null, new Integer(mRilVersion), null));
        }
!!!37529655.java!!!	unregisterForRilConnected(inout h : Handler) : void
        mRilConnectedRegistrants.remove(h);
!!!37529783.java!!!	registerForSubscriptionStatusChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mSubscriptionStatusRegistrants.add(r);
!!!37529911.java!!!	unregisterForSubscriptionStatusChanged(inout h : Handler) : void
        mSubscriptionStatusRegistrants.remove(h);
!!!37530039.java!!!	setRadioState(inout newState : CommandsInterface::RadioState) : void
        RadioState oldState;

        synchronized (mStateMonitor) {
            oldState = mState;
            mState = newState;

            if (oldState == mState) {
                // no state transition
                return;
            }

            mRadioStateChangedRegistrants.notifyRegistrants();

            if (mState.isAvailable() && !oldState.isAvailable()) {
                mAvailRegistrants.notifyRegistrants();
                onRadioAvailable();
            }

            if (!mState.isAvailable() && oldState.isAvailable()) {
                mNotAvailRegistrants.notifyRegistrants();
            }

            if (mState.isOn() && !oldState.isOn()) {
                mOnRegistrants.notifyRegistrants();
            }

            if ((!mState.isOn() || !mState.isAvailable())
                && !((!oldState.isOn() || !oldState.isAvailable()))
            ) {
                mOffOrNotAvailRegistrants.notifyRegistrants();
            }
        }
!!!37530295.java!!!	getLteOnCdmaMode() : int
        return TelephonyManager.getLteOnCdmaModeStatic();
!!!37530423.java!!!	registerForCellInfoList(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);
        mRilCellInfoListRegistrants.add(r);
!!!37530551.java!!!	unregisterForCellInfoList(inout h : Handler) : void
        mRilCellInfoListRegistrants.remove(h);
!!!37530679.java!!!	registerForSrvccStateChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant (h, what, obj);

        mSrvccStateRegistrants.add(r);
!!!37530807.java!!!	unregisterForSrvccStateChanged(inout h : Handler) : void
        mSrvccStateRegistrants.remove(h);
!!!37531063.java!!!	getRilVersion() : int
        return mRilVersion;
!!!37531831.java!!!	registerForRadioCapabilityChanged(inout h : Handler, in what : int, inout obj : Object) : void
        Registrant r = new Registrant(h, what, obj);
        mPhoneRadioCapabilityChangedRegistrants.add(r);
!!!37531959.java!!!	unregisterForRadioCapabilityChanged(inout h : Handler) : void
        mPhoneRadioCapabilityChangedRegistrants.remove(h);
!!!37532471.java!!!	registerForLceInfo(inout h : Handler, in what : int, inout obj : Object) : void
      mLceInfoRegistrant = new Registrant(h, what, obj);
!!!37532599.java!!!	unregisterForLceInfo(inout h : Handler) : void
      if (mLceInfoRegistrant != null && mLceInfoRegistrant.getHandler() == h) {
          mLceInfoRegistrant.clear();
          mLceInfoRegistrant = null;
      }
