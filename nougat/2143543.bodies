class Call
!!!37533239.java!!!	stateFromDCState(inout dcState : DriverCall::State) : Call::State
        switch (dcState) {
            case ACTIVE:        return State.ACTIVE;
            case HOLDING:       return State.HOLDING;
            case DIALING:       return State.DIALING;
            case ALERTING:      return State.ALERTING;
            case INCOMING:      return State.INCOMING;
            case WAITING:       return State.WAITING;
            default:            throw new RuntimeException ("illegal call state:" + dcState);
        }
!!!37533879.java!!!	hasConnection(inout c : Connection) : boolean
        return c.getCall() == this;
!!!37534007.java!!!	hasConnections() : boolean
        List<Connection> connections = getConnections();

        if (connections == null) {
            return false;
        }

        return connections.size() > 0;
!!!37534135.java!!!	getState() : Call::State
        return mState;
!!!37534263.java!!!	getConferenceParticipants() : ConferenceParticipant
        return null;
!!!37534391.java!!!	isIdle() : boolean
        return !getState().isAlive();
!!!37534519.java!!!	getEarliestConnection() : Connection
        List<Connection> l;
        long time = Long.MAX_VALUE;
        Connection c;
        Connection earliest = null;

        l = getConnections();

        if (l.size() == 0) {
            return null;
        }

        for (int i = 0, s = l.size() ; i < s ; i++) {
            c = l.get(i);
            long t;

            t = c.getCreateTime();

            if (t < time) {
                earliest = c;
                time = t;
            }
        }

        return earliest;
!!!37534647.java!!!	getEarliestCreateTime() : long
        List<Connection> l;
        long time = Long.MAX_VALUE;

        l = getConnections();

        if (l.size() == 0) {
            return 0;
        }

        for (int i = 0, s = l.size() ; i < s ; i++) {
            Connection c = l.get(i);
            long t;

            t = c.getCreateTime();

            time = t < time ? t : time;
        }

        return time;
!!!37534775.java!!!	getEarliestConnectTime() : long
        long time = Long.MAX_VALUE;
        List<Connection> l = getConnections();

        if (l.size() == 0) {
            return 0;
        }

        for (int i = 0, s = l.size() ; i < s ; i++) {
            Connection c = l.get(i);
            long t;

            t = c.getConnectTime();

            time = t < time ? t : time;
        }

        return time;
!!!37534903.java!!!	isDialingOrAlerting() : boolean
        return getState().isDialing();
!!!37535031.java!!!	isRinging() : boolean
        return getState().isRinging();
!!!37535159.java!!!	getLatestConnection() : Connection
        List<Connection> l = getConnections();
        if (l.size() == 0) {
            return null;
        }

        long time = 0;
        Connection latest = null;
        for (int i = 0, s = l.size() ; i < s ; i++) {
            Connection c = l.get(i);
            long t = c.getCreateTime();

            if (t > time) {
                latest = c;
                time = t;
            }
        }

        return latest;
!!!37535287.java!!!	hangupIfAlive() : void
        if (getState().isAlive()) {
            try {
                hangup();
            } catch (CallStateException ex) {
                Rlog.w(LOG_TAG, " hangupIfActive: caught " + ex);
            }
        }
!!!37535415.java!!!	clearDisconnected() : void
        for (int i = mConnections.size() - 1 ; i >= 0 ; i--) {
            Connection c = mConnections.get(i);
            if (c.getState() == State.DISCONNECTED) {
                mConnections.remove(i);
            }
        }

        if (mConnections.size() == 0) {
            setState(State.IDLE);
        }
!!!37535543.java!!!	setState(inout newState : Call::State) : void
        mState = newState;
