class TelephonyEventLog
!!!37805239.java!!!	TelephonyEventLog(in phoneId : int)
        super();

        mPhoneId = phoneId;
!!!37805367.java!!!	writeEvent(in tag : int, inout data : Bundle) : void
        writeEvent(System.currentTimeMillis(), tag, -1, -1, data);
!!!37805495.java!!!	writeEvent(in tag : int, in param1 : int, in param2 : int) : void
        writeEvent(System.currentTimeMillis(), tag, param1, param2, null);
!!!37805623.java!!!	writeEvent(in tag : int, in param1 : int, in param2 : int, inout data : Bundle) : void
        writeEvent(System.currentTimeMillis(), tag, param1, param2, data);
!!!37805751.java!!!	writeEvent(in timestamp : long, in tag : int, in param1 : int, in param2 : int, inout data : Bundle) : void
        Bundle b = data;
        if (b == null) {
            b = new Bundle();
        }
        b.putInt(DATA_KEY_PHONE_ID, mPhoneId);
        b.putInt(DATA_KEY_PARAM1, param1);
        b.putInt(DATA_KEY_PARAM2, param2);

        logEvent(timestamp, ConnectivityMetricsLogger.COMPONENT_TAG_TELEPHONY, tag, b);
!!!37805879.java!!!	equals(inout a : Object, inout b : Object) : boolean
        return (a == null ? b == null : a.equals(b));
!!!37806007.java!!!	writeServiceStateChanged(inout serviceState : ServiceState) : void
        Bundle b = new Bundle();
        boolean changed = false;
        if (mVoiceRegState != serviceState.getVoiceRegState()) {
            mVoiceRegState = serviceState.getVoiceRegState();
            b.putInt(SERVICE_STATE_VOICE_REG_STATE, mVoiceRegState);
            changed = true;
        }
        if (mDataRegState != serviceState.getDataRegState()) {
            mDataRegState = serviceState.getDataRegState();
            b.putInt(SERVICE_STATE_DATA_REG_STATE, mDataRegState);
            changed = true;
        }
        if (mVoiceRoamingType != serviceState.getVoiceRoamingType()) {
            mVoiceRoamingType = serviceState.getVoiceRoamingType();
            b.putInt(SERVICE_STATE_VOICE_ROAMING_TYPE, mVoiceRoamingType);
            changed = true;
        }
        if (mDataRoamingType != serviceState.getDataRoamingType()) {
            mDataRoamingType = serviceState.getDataRoamingType();
            b.putInt(SERVICE_STATE_DATA_ROAMING_TYPE, mDataRoamingType);
            changed = true;
        }
        if (!equals(mVoiceOperatorAlphaShort, serviceState.getVoiceOperatorAlphaShort())
                || !equals(mVoiceOperatorNumeric, serviceState.getVoiceOperatorNumeric())) {
            // TODO: Evaluate if we need to send AlphaLong. AlphaShort+Numeric might be enough.
            //b.putString(SERVICE_STATE_VOICE_ALPHA_LONG, serviceState.getVoiceOperatorAlphaLong());
            mVoiceOperatorAlphaShort = serviceState.getVoiceOperatorAlphaShort();
            mVoiceOperatorNumeric = serviceState.getVoiceOperatorNumeric();
            b.putString(SERVICE_STATE_VOICE_ALPNA_SHORT, mVoiceOperatorAlphaShort);
            b.putString(SERVICE_STATE_VOICE_NUMERIC, mVoiceOperatorNumeric);
            changed = true;
        }
        if (!equals(mDataOperatorAlphaShort, serviceState.getDataOperatorAlphaShort())
                || !equals(mDataOperatorNumeric, serviceState.getDataOperatorNumeric())) {
            // TODO: Evaluate if we need to send AlphaLong. AlphaShort+Numeric might be enough.
            //b.putString(SERVICE_STATE_DATA_ALPHA_LONG, serviceState.getDataOperatorAlphaLong());
            mDataOperatorAlphaShort = serviceState.getDataOperatorAlphaShort();
            mDataOperatorNumeric = serviceState.getDataOperatorNumeric();
            b.putString(SERVICE_STATE_DATA_ALPNA_SHORT, mDataOperatorAlphaShort);
            b.putString(SERVICE_STATE_DATA_NUMERIC, mDataOperatorNumeric);
            changed = true;
        }
        if (mRilVoiceRadioTechnology != serviceState.getRilVoiceRadioTechnology()) {
            mRilVoiceRadioTechnology = serviceState.getRilVoiceRadioTechnology();
            b.putInt(SERVICE_STATE_VOICE_RAT, mRilVoiceRadioTechnology);
            changed = true;
        }
        if (mRilDataRadioTechnology != serviceState.getRilDataRadioTechnology()) {
            mRilDataRadioTechnology = serviceState.getRilDataRadioTechnology();
            b.putInt(SERVICE_STATE_DATA_RAT, mRilDataRadioTechnology);
            changed = true;
        }
        if (mEmergencyOnly != serviceState.isEmergencyOnly()) {
            mEmergencyOnly = serviceState.isEmergencyOnly();
            b.putBoolean(SERVICE_STATE_EMERGENCY_ONLY, mEmergencyOnly);
            changed = true;
        }

        if (changed) {
            writeEvent(TAG_SERVICE_STATE, b);
        }
!!!37806135.java!!!	writeSetAirplaneMode(inout enabled : boolean) : void
        writeEvent(TAG_SETTINGS, SETTING_AIRPLANE_MODE, enabled ? 1 : 0);
!!!37806263.java!!!	writeSetCellDataEnabled(inout enabled : boolean) : void
        writeEvent(TAG_SETTINGS, SETTING_CELL_DATA_ENABLED, enabled ? 1 : 0);
!!!37806391.java!!!	writeSetDataRoamingEnabled(inout enabled : boolean) : void
        writeEvent(TAG_SETTINGS, SETTING_DATA_ROAMING_ENABLED, enabled ? 1 : 0);
!!!37806519.java!!!	writeSetPreferredNetworkType(in mode : int) : void
        writeEvent(TAG_SETTINGS, SETTING_PREFERRED_NETWORK_MODE, mode);
!!!37806647.java!!!	writeSetWifiEnabled(inout enabled : boolean) : void
        writeEvent(TAG_SETTINGS, SETTING_WIFI_ENABLED, enabled ? 1 : 0);
!!!37806775.java!!!	writeSetWfcMode(in mode : int) : void
        writeEvent(TAG_SETTINGS, SETTING_WFC_MODE, mode);
!!!37806903.java!!!	writeImsSetFeatureValue(in feature : int, in network : int, in value : int, in status : int) : void
        switch (feature) {
            case ImsConfig.FeatureConstants.FEATURE_TYPE_VOICE_OVER_LTE:
                writeEvent(TAG_SETTINGS, SETTING_VO_LTE_ENABLED, value);
                break;
            case ImsConfig.FeatureConstants.FEATURE_TYPE_VOICE_OVER_WIFI:
                writeEvent(TAG_SETTINGS, SETTING_VO_WIFI_ENABLED, value);
                break;
            case ImsConfig.FeatureConstants.FEATURE_TYPE_VIDEO_OVER_LTE:
                writeEvent(TAG_SETTINGS, SETTING_VI_LTE_ENABLED, value);
                break;
            case ImsConfig.FeatureConstants.FEATURE_TYPE_VIDEO_OVER_WIFI:
                writeEvent(TAG_SETTINGS, SETTING_VI_WIFI_ENABLED, value);
                break;
        }
!!!37807031.java!!!	writeOnImsConnectionState(in state : int, inout reasonInfo : ImsReasonInfo) : void
        writeEvent(TAG_IMS_CONNECTION_STATE, state, -1, imsReasonInfoToBundle(reasonInfo));
!!!37807159.java!!!	writeOnImsCapabilities(inout capabilities : boolean) : void
        boolean changed = false;
        for (int i = 0; i < capabilities.length; i++) {
            if (mImsCapabilities[i] != capabilities[i]) {
                mImsCapabilities[i] = capabilities[i];
                changed = true;
            }
        }

        if (changed) {
            Bundle b = new Bundle();
            b.putBoolean(DATA_KEY_VOLTE, capabilities[0]);
            b.putBoolean(DATA_KEY_VILTE, capabilities[1]);
            b.putBoolean(DATA_KEY_VOWIFI, capabilities[2]);
            b.putBoolean(DATA_KEY_VIWIFI, capabilities[3]);
            b.putBoolean(DATA_KEY_UTLTE, capabilities[4]);
            b.putBoolean(DATA_KEY_UTWIFI, capabilities[5]);
            writeEvent(TAG_IMS_CAPABILITIES, b);
        }
!!!37807287.java!!!	writeRilSetupDataCall(in rilSerial : int, in radioTechnology : int, in profile : int, inout apn : String, inout user : String, inout password : String, in authType : int, inout protocol : String) : void
        Bundle b = new Bundle();
        b.putInt(DATA_KEY_RAT, radioTechnology);
        b.putInt(DATA_KEY_DATA_PROFILE, profile);
        b.putString(DATA_KEY_APN, apn);
        b.putString(DATA_KEY_PROTOCOL, protocol);
        writeEvent(TAG_RIL_REQUEST, RIL_REQUEST_SETUP_DATA_CALL, rilSerial, b);
!!!37807415.java!!!	writeRilDeactivateDataCall(in rilSerial : int, in cid : int, in reason : int) : void
        Bundle b = new Bundle();
        b.putInt(DATA_KEY_DATA_CALL_CID, cid);
        b.putInt(DATA_KEY_DATA_DEACTIVATE_REASON, reason);
        writeEvent(TAG_RIL_REQUEST, RIL_REQUEST_DEACTIVATE_DATA_CALL, rilSerial, b);
!!!37807543.java!!!	writeRilDataCallList(inout dcsList : ArrayList<DataCallResponse>) : void
        Bundle b = new Bundle();
        int[] statuses = new int[dcsList.size()];
        int[] cids = new int[dcsList.size()];
        int[] actives = new int[dcsList.size()];
        String[] types = new String[dcsList.size()];
        String[] ifnames = new String[dcsList.size()];
        for (int i = 0; i < dcsList.size(); i++) {
            DataCallResponse dcs = dcsList.get(i);
            statuses[i] = dcs.status;
            cids[i] = dcs.cid;
            actives[i] = dcs.active;
            types[i] = dcs.type;
            ifnames[i] = dcs.ifname;
        }
        b.putIntArray(DATA_KEY_DATA_CALL_STATUSES, statuses);
        b.putIntArray(DATA_KEY_DATA_CALL_CIDS, cids);
        b.putIntArray(DATA_KEY_DATA_CALL_ACTIVES, actives);
        b.putStringArray(DATA_KEY_DATA_CALL_TYPES, types);
        b.putStringArray(DATA_KEY_DATA_CALL_IFNAMES, ifnames);
        writeEvent(TAG_DATA_CALL_LIST, -1, -1, b);
!!!37807671.java!!!	writeRilDial(in rilSerial : int, in clirMode : int, inout uusInfo : UUSInfo) : void
        Bundle b = new Bundle();
        b.putInt(DATA_KEY_CLIR_MODE, clirMode);
        writeEvent(TAG_RIL_REQUEST, RIL_REQUEST_DIAL, rilSerial, b);
!!!37807799.java!!!	writeRilCallRing(inout response : char) : void
        Bundle b = new Bundle();
        b.putCharArray(DATA_KEY_RIL_CALL_RING_RESPONSE, response);
        writeEvent(TAG_RIL_UNSOL_RESPONSE, RIL_UNSOL_CALL_RING, -1, b);
!!!37807927.java!!!	writeRilHangup(in rilSerial : int, in req : int, in gsmIndex : int) : void
        Bundle b = new Bundle();
        b.putInt(DATA_KEY_RIL_HANGUP_GSM_INDEX, gsmIndex);
        writeEvent(TAG_RIL_REQUEST, req, rilSerial, b);
!!!37808055.java!!!	writeRilAnswer(in rilSerial : int) : void
        writeEvent(TAG_RIL_REQUEST, RIL_REQUEST_ANSWER, rilSerial, null);
!!!37808183.java!!!	writeRilSrvcc(in rilSrvccState : int) : void
        writeEvent(TAG_RIL_UNSOL_RESPONSE, RIL_UNSOL_SRVCC_STATE_NOTIFY, rilSrvccState, null);
!!!37808311.java!!!	writeRilSendSms(in rilSerial : int, in req : int) : void
        writeEvent(TAG_RIL_REQUEST, req, rilSerial, null);
!!!37808439.java!!!	writeRilNewSms(in response : int) : void
        writeEvent(TAG_RIL_UNSOL_RESPONSE, response, -1, null);
!!!37808567.java!!!	writeOnRilSolicitedResponse(in rilSerial : int, in rilError : int, in rilRequest : int, inout ret : Object) : void
        Bundle b = new Bundle();
        if (rilError != 0) b.putInt(DATA_KEY_RIL_ERROR, rilError);
        switch (rilRequest) {
            case RIL_REQUEST_SETUP_DATA_CALL:
                DataCallResponse dataCall = (DataCallResponse)ret;
                b.putInt(DATA_KEY_DATA_CALL_STATUS, dataCall.status);
                b.putInt(DATA_KEY_DATA_CALL_RETRY, dataCall.suggestedRetryTime);
                b.putInt(DATA_KEY_DATA_CALL_CID, dataCall.cid);
                b.putInt(DATA_KEY_DATA_CALL_ACTIVE, dataCall.active);
                b.putString(DATA_KEY_DATA_CALL_TYPE, dataCall.type);
                b.putString(DATA_KEY_DATA_CALL_IFNAME, dataCall.ifname);
                writeEvent(TAG_RIL_RESPONSE, rilRequest, rilSerial, b);
                break;

            case RIL_REQUEST_DEACTIVATE_DATA_CALL:
            case RIL_REQUEST_HANGUP:
            case RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND:
            case RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND:
            case RIL_REQUEST_DIAL:
            case RIL_REQUEST_ANSWER:
                writeEvent(TAG_RIL_RESPONSE, rilRequest, rilSerial, b);
                break;

            case RIL_REQUEST_SEND_SMS:
            case RIL_REQUEST_SEND_SMS_EXPECT_MORE:
            case RIL_REQUEST_CDMA_SEND_SMS:
            case RIL_REQUEST_IMS_SEND_SMS:
                SmsResponse smsResponse = (SmsResponse)ret;
                b.putInt(DATA_KEY_SMS_MESSAGE_REF, smsResponse.mMessageRef);
                b.putString(DATA_KEY_SMS_ACK_PDU, smsResponse.mAckPdu);
                b.putInt(DATA_KEY_SMS_ERROR_CODE, smsResponse.mErrorCode);
                writeEvent(TAG_RIL_RESPONSE, rilRequest, rilSerial, b);
                break;
        }
!!!37808695.java!!!	writeOnRilTimeoutResponse(in rilSerial : int, in rilRequest : int) : void
        writeEvent(TAG_RIL_TIMEOUT_RESPONSE, rilRequest, rilSerial, null);
!!!37808823.java!!!	writePhoneState(inout phoneState : PhoneConstants::State) : void
        int state;
        switch (phoneState) {
            case IDLE: state = 0; break;
            case RINGING: state = 1; break;
            case OFFHOOK: state = 2; break;
            default: state = -1; break;
        }
        writeEvent(TAG_PHONE_STATE, state, -1);
!!!37808951.java!!!	writeImsCallState(inout session : ImsCallSession, inout callState : ImsPhoneCall.State) : void
        int state;
        switch (callState) {
            case IDLE: state = 0; break;
            case ACTIVE: state = 1; break;
            case HOLDING: state = 2; break;
            case DIALING: state = 3; break;
            case ALERTING: state = 4; break;
            case INCOMING: state = 5; break;
            case WAITING: state = 6; break;
            case DISCONNECTED: state = 7; break;
            case DISCONNECTING: state = 8; break;
            default: state = -1; break;
        }
        writeEvent(TAG_IMS_CALL_STATE, getCallId(session), state);
!!!37809079.java!!!	writeImsCallEvent(in tag : int, inout session : ImsCallSession) : void
        writeEvent(tag, getCallId(session), -1);
!!!37809207.java!!!	writeImsCallEvent(in tag : int, inout session : ImsCallSession, inout reasonInfo : ImsReasonInfo) : void
        writeEvent(tag, getCallId(session), -1,imsReasonInfoToBundle(reasonInfo));
!!!37809335.java!!!	imsReasonInfoToBundle(inout reasonInfo : ImsReasonInfo) : Bundle
        if (reasonInfo != null) {
            Bundle b = new Bundle();
            b.putInt(DATA_KEY_REASONINFO_CODE, reasonInfo.mCode);
            b.putInt(DATA_KEY_REASONINFO_EXTRA_CODE, reasonInfo.mExtraCode);
            b.putString(DATA_KEY_REASONINFO_EXTRA_MESSAGE, reasonInfo.mExtraMessage);
            return b;
        }
        return null;
!!!37809463.java!!!	writeOnImsCallStart(inout session : ImsCallSession, inout callee : String) : void
        Bundle b = new Bundle();
        b.putString(DATA_KEY_CALLEE, callee);
        writeEvent(TAG_IMS_CALL_START, getCallId(session), -1, b);
!!!37809591.java!!!	writeOnImsCallStartConference(inout session : ImsCallSession, inout participants : String) : void
        Bundle b = new Bundle();
        b.putStringArray(DATA_KEY_PARTICIPANTS, participants);
        writeEvent(TAG_IMS_CALL_START_CONFERENCE, getCallId(session), -1, b);
!!!37809719.java!!!	writeOnImsCallReceive(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_RECEIVE, session);
!!!37809847.java!!!	writeOnImsCallAccept(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_ACCEPT, session);
!!!37809975.java!!!	writeOnImsCallReject(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_REJECT, session);
!!!37810103.java!!!	writeOnImsCallTerminate(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_TERMINATE, session);
!!!37810231.java!!!	writeOnImsCallHold(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_HOLD, session);
!!!37810359.java!!!	writeOnImsCallResume(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_RESUME, session);
!!!37810487.java!!!	writeOnImsCallProgressing(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_PROGRESSING, session);
!!!37810615.java!!!	writeOnImsCallStarted(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_STARTED, session);
!!!37810743.java!!!	writeOnImsCallStartFailed(inout session : ImsCallSession, inout reasonInfo : ImsReasonInfo) : void
        writeImsCallEvent(TAG_IMS_CALL_START_FAILED, session, reasonInfo);
!!!37810871.java!!!	writeOnImsCallTerminated(inout session : ImsCallSession, inout reasonInfo : ImsReasonInfo) : void
        writeImsCallEvent(TAG_IMS_CALL_TERMINATED, session, reasonInfo);
!!!37810999.java!!!	writeOnImsCallHeld(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_HELD, session);
!!!37811127.java!!!	writeOnImsCallHoldReceived(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_HOLD_RECEIVED, session);
!!!37811255.java!!!	writeOnImsCallHoldFailed(inout session : ImsCallSession, inout reasonInfo : ImsReasonInfo) : void
        writeImsCallEvent(TAG_IMS_CALL_HOLD_FAILED, session, reasonInfo);
!!!37811383.java!!!	writeOnImsCallResumed(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_RESUMED, session);
!!!37811511.java!!!	writeOnImsCallResumeReceived(inout session : ImsCallSession) : void
        writeImsCallEvent(TAG_IMS_CALL_RESUME_RECEIVED, session);
!!!37811639.java!!!	writeOnImsCallResumeFailed(inout session : ImsCallSession, inout reasonInfo : ImsReasonInfo) : void
        writeImsCallEvent(TAG_IMS_CALL_RESUME_FAILED, session, reasonInfo);
!!!37811767.java!!!	writeOnImsCallHandover(inout session : ImsCallSession, in srcAccessTech : int, in targetAccessTech : int, inout reasonInfo : ImsReasonInfo) : void
        Bundle b = imsHandoverToBundle(srcAccessTech, targetAccessTech, reasonInfo);
        writeEvent(TAG_IMS_CALL_HANDOVER, getCallId(session), -1, b);
!!!37811895.java!!!	writeOnImsCallHandoverFailed(inout session : ImsCallSession, in srcAccessTech : int, in targetAccessTech : int, inout reasonInfo : ImsReasonInfo) : void
        Bundle b = imsHandoverToBundle(srcAccessTech, targetAccessTech, reasonInfo);
        writeEvent(TAG_IMS_CALL_HANDOVER_FAILED, getCallId(session), -1, b);
!!!37812023.java!!!	getCallId(inout session : ImsCallSession) : int
        if (session == null) {
            return -1;
        }

        try {
            return Integer.parseInt(session.getCallId());
        } catch (NumberFormatException nfe) {
            return -1;
        }
!!!37812151.java!!!	imsHandoverToBundle(in srcAccessTech : int, in targetAccessTech : int, inout reasonInfo : ImsReasonInfo) : Bundle
        Bundle b = new Bundle();
        b.putInt(DATA_KEY_SRC_TECH, srcAccessTech);
        b.putInt(DATA_KEY_TARGET_TECH, targetAccessTech);
        b.putInt(DATA_KEY_REASONINFO_CODE, reasonInfo.mCode);
        b.putInt(DATA_KEY_REASONINFO_EXTRA_CODE, reasonInfo.mExtraCode);
        b.putString(DATA_KEY_REASONINFO_EXTRA_MESSAGE, reasonInfo.mExtraMessage);
        return b;
