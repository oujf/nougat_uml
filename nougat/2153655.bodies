class AdnRecord
!!!38152375.java!!!	AdnRecord(inout record : byte)
        this(0, 0, record);
!!!38152503.java!!!	AdnRecord(in efid : int, in recordNumber : int, inout record : byte)
        this.mEfid = efid;
        this.mRecordNumber = recordNumber;
        parseRecord(record);
!!!38152631.java!!!	AdnRecord(inout alphaTag : String, inout number : String)
        this(0, 0, alphaTag, number);
!!!38152759.java!!!	AdnRecord(inout alphaTag : String, inout number : String, inout emails : String)
        this(0, 0, alphaTag, number, emails);
!!!38152887.java!!!	AdnRecord(in efid : int, in recordNumber : int, inout alphaTag : String, inout number : String, inout emails : String)
        this.mEfid = efid;
        this.mRecordNumber = recordNumber;
        this.mAlphaTag = alphaTag;
        this.mNumber = number;
        this.mEmails = emails;
!!!38153015.java!!!	AdnRecord(in efid : int, in recordNumber : int, inout alphaTag : String, inout number : String)
        this.mEfid = efid;
        this.mRecordNumber = recordNumber;
        this.mAlphaTag = alphaTag;
        this.mNumber = number;
        this.mEmails = null;
!!!38153143.java!!!	getAlphaTag() : String
        return mAlphaTag;
!!!38153271.java!!!	getEfid() : int
        return mEfid;
!!!38153399.java!!!	getRecId() : int
        return mRecordNumber;
!!!38153527.java!!!	getNumber() : String
        return mNumber;
!!!38153655.java!!!	setNumber(inout number : String) : void
        mNumber = number;
!!!38153783.java!!!	getEmails() : String
        return mEmails;
!!!38153911.java!!!	setEmails(inout emails : String) : void
        this.mEmails = emails;
!!!38154039.java!!!	toString() : String
        return "ADN Record '" + mAlphaTag + "' '" + mNumber + " " + mEmails + "'";
!!!38154167.java!!!	isEmpty() : boolean
        return TextUtils.isEmpty(mAlphaTag) && TextUtils.isEmpty(mNumber) && mEmails == null;
!!!38154295.java!!!	hasExtendedRecord() : boolean
        return mExtRecord != 0 && mExtRecord != 0xff;
!!!38154423.java!!!	stringCompareNullEqualsEmpty(inout s1 : String, inout s2 : String) : boolean
        if (s1 == s2) {
            return true;
        }
        if (s1 == null) {
            s1 = "";
        }
        if (s2 == null) {
            s2 = "";
        }
        return (s1.equals(s2));
!!!38154551.java!!!	isEqual(inout adn : AdnRecord) : boolean
        return ( stringCompareNullEqualsEmpty(mAlphaTag, adn.mAlphaTag) &&
                stringCompareNullEqualsEmpty(mNumber, adn.mNumber) &&
                Arrays.equals(mEmails, adn.mEmails));
!!!38154679.java!!!	describeContents() : int
        return 0;
!!!38154807.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mEfid);
        dest.writeInt(mRecordNumber);
        dest.writeString(mAlphaTag);
        dest.writeString(mNumber);
        dest.writeStringArray(mEmails);
!!!38154935.java!!!	buildAdnString(in recordSize : int) : byte
        byte[] bcdNumber;
        byte[] byteTag;
        byte[] adnString;
        int footerOffset = recordSize - FOOTER_SIZE_BYTES;

        // create an empty record
        adnString = new byte[recordSize];
        for (int i = 0; i < recordSize; i++) {
            adnString[i] = (byte) 0xFF;
        }

        if (TextUtils.isEmpty(mNumber)) {
            Rlog.w(LOG_TAG, "[buildAdnString] Empty dialing number");
            return adnString;   // return the empty record (for delete)
        } else if (mNumber.length()
                > (ADN_DIALING_NUMBER_END - ADN_DIALING_NUMBER_START + 1) * 2) {
            Rlog.w(LOG_TAG,
                    "[buildAdnString] Max length of dialing number is 20");
            return null;
        } else if (mAlphaTag != null && mAlphaTag.length() > footerOffset) {
            Rlog.w(LOG_TAG,
                    "[buildAdnString] Max length of tag is " + footerOffset);
            return null;
        } else {
            bcdNumber = PhoneNumberUtils.numberToCalledPartyBCD(mNumber);

            System.arraycopy(bcdNumber, 0, adnString,
                    footerOffset + ADN_TON_AND_NPI, bcdNumber.length);

            adnString[footerOffset + ADN_BCD_NUMBER_LENGTH]
                    = (byte) (bcdNumber.length);
            adnString[footerOffset + ADN_CAPABILITY_ID]
                    = (byte) 0xFF; // Capability Id
            adnString[footerOffset + ADN_EXTENSION_ID]
                    = (byte) 0xFF; // Extension Record Id

            if (!TextUtils.isEmpty(mAlphaTag)) {
                byteTag = GsmAlphabet.stringToGsm8BitPacked(mAlphaTag);
                System.arraycopy(byteTag, 0, adnString, 0, byteTag.length);
            }

            return adnString;
        }
!!!38155063.java!!!	appendExtRecord(inout extRecord : byte) : void
        try {
            if (extRecord.length != EXT_RECORD_LENGTH_BYTES) {
                return;
            }

            if ((extRecord[0] & EXT_RECORD_TYPE_MASK)
                    != EXT_RECORD_TYPE_ADDITIONAL_DATA) {
                return;
            }

            if ((0xff & extRecord[1]) > MAX_EXT_CALLED_PARTY_LENGTH) {
                // invalid or empty record
                return;
            }

            mNumber += PhoneNumberUtils.calledPartyBCDFragmentToString(
                                        extRecord, 2, 0xff & extRecord[1]);

            // We don't support ext record chaining.

        } catch (RuntimeException ex) {
            Rlog.w(LOG_TAG, "Error parsing AdnRecord ext record", ex);
        }
!!!38155191.java!!!	parseRecord(inout record : byte) : void
        try {
            mAlphaTag = IccUtils.adnStringFieldToString(
                            record, 0, record.length - FOOTER_SIZE_BYTES);

            int footerOffset = record.length - FOOTER_SIZE_BYTES;

            int numberLength = 0xff & record[footerOffset];

            if (numberLength > MAX_NUMBER_SIZE_BYTES) {
                // Invalid number length
                mNumber = "";
                return;
            }

            // Please note 51.011 10.5.1:
            //
            // "If the Dialling Number/SSC String does not contain
            // a dialling number, e.g. a control string deactivating
            // a service, the TON/NPI byte shall be set to 'FF' by
            // the ME (see note 2)."

            mNumber = PhoneNumberUtils.calledPartyBCDToString(
                            record, footerOffset + 1, numberLength);


            mExtRecord = 0xff & record[record.length - 1];

            mEmails = null;

        } catch (RuntimeException ex) {
            Rlog.w(LOG_TAG, "Error parsing AdnRecord", ex);
            mNumber = "";
            mAlphaTag = "";
            mEmails = null;
        }
