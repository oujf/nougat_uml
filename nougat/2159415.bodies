class PhoneSubInfoController
!!!37707959.java!!!	PhoneSubInfoController(inout context : Context, inout phone : Phone)
        mPhone = phone;
        if (ServiceManager.getService("iphonesubinfo") == null) {
            ServiceManager.addService("iphonesubinfo", this);
        }
        mContext = context;
        mAppOps = (AppOpsManager) mContext.getSystemService(Context.APP_OPS_SERVICE);
!!!37708087.java!!!	getDeviceId(inout callingPackage : String) : String
        return getDeviceIdForPhone(SubscriptionManager.getPhoneId(getDefaultSubscription()),
                callingPackage);
!!!37708215.java!!!	getDeviceIdForPhone(in phoneId : int, inout callingPackage : String) : String
        if (!checkReadPhoneState(callingPackage, "getDeviceId")) {
            return null;
        }
        if (!SubscriptionManager.isValidPhoneId(phoneId)) {
            phoneId = 0;
        }
        final Phone phone = mPhone[phoneId];
        if (phone != null) {
            phone.getContext().enforceCallingOrSelfPermission(
                    android.Manifest.permission.READ_PHONE_STATE,
                    "Requires READ_PHONE_STATE");
            return phone.getDeviceId();
        } else {
            loge("getDeviceIdForPhone phone " + phoneId + " is null");
            return null;
        }
!!!37708343.java!!!	getNaiForSubscriber(in subId : int, inout callingPackage : String) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            if (!checkReadPhoneState(callingPackage, "getNai")) {
                return null;
            }
            return phone.getNai();
        } else {
            loge("getNai phone is null for Subscription:" + subId);
            return null;
        }
!!!37708471.java!!!	getImeiForSubscriber(in subId : int, inout callingPackage : String) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            if (!checkReadPhoneState(callingPackage, "getImei")) {
                return null;
            }
            return phone.getImei();
        } else {
            loge("getDeviceId phone is null for Subscription:" + subId);
            return null;
        }
!!!37708599.java!!!	getDeviceSvn(inout callingPackage : String) : String
        return getDeviceSvnUsingSubId(getDefaultSubscription(), callingPackage);
!!!37708727.java!!!	getDeviceSvnUsingSubId(in subId : int, inout callingPackage : String) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            if (!checkReadPhoneState(callingPackage, "getDeviceSvn")) {
                return null;
            }
            return phone.getDeviceSvn();
        } else {
            loge("getDeviceSvn phone is null");
            return null;
        }
!!!37708855.java!!!	getSubscriberId(inout callingPackage : String) : String
        return getSubscriberIdForSubscriber(getDefaultSubscription(), callingPackage);
!!!37708983.java!!!	getSubscriberIdForSubscriber(in subId : int, inout callingPackage : String) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            if (!checkReadPhoneState(callingPackage, "getSubscriberId")) {
                return null;
            }
            return phone.getSubscriberId();
        } else {
            loge("getSubscriberId phone is null for Subscription:" + subId);
            return null;
        }
!!!37709111.java!!!	getIccSerialNumber(inout callingPackage : String) : String
        return getIccSerialNumberForSubscriber(getDefaultSubscription(), callingPackage);
!!!37709239.java!!!	getIccSerialNumberForSubscriber(in subId : int, inout callingPackage : String) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            if (!checkReadPhoneState(callingPackage, "getIccSerialNumber")) {
                return null;
            }
            return phone.getIccSerialNumber();
        } else {
            loge("getIccSerialNumber phone is null for Subscription:" + subId);
            return null;
        }
!!!37709367.java!!!	getLine1Number(inout callingPackage : String) : String
        return getLine1NumberForSubscriber(getDefaultSubscription(), callingPackage);
!!!37709495.java!!!	getLine1NumberForSubscriber(in subId : int, inout callingPackage : String) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            // This is open to apps with WRITE_SMS.
            if (!checkReadPhoneNumber(callingPackage, "getLine1Number")) {
                return null;
            }
            return phone.getLine1Number();
        } else {
            loge("getLine1Number phone is null for Subscription:" + subId);
            return null;
        }
!!!37709623.java!!!	getLine1AlphaTag(inout callingPackage : String) : String
        return getLine1AlphaTagForSubscriber(getDefaultSubscription(), callingPackage);
!!!37709751.java!!!	getLine1AlphaTagForSubscriber(in subId : int, inout callingPackage : String) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            if (!checkReadPhoneState(callingPackage, "getLine1AlphaTag")) {
                return null;
            }
            return phone.getLine1AlphaTag();
        } else {
            loge("getLine1AlphaTag phone is null for Subscription:" + subId);
            return null;
        }
!!!37709879.java!!!	getMsisdn(inout callingPackage : String) : String
        return getMsisdnForSubscriber(getDefaultSubscription(), callingPackage);
!!!37710007.java!!!	getMsisdnForSubscriber(in subId : int, inout callingPackage : String) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            if (!checkReadPhoneState(callingPackage, "getMsisdn")) {
                return null;
            }
            return phone.getMsisdn();
        } else {
            loge("getMsisdn phone is null for Subscription:" + subId);
            return null;
        }
!!!37710135.java!!!	getVoiceMailNumber(inout callingPackage : String) : String
        return getVoiceMailNumberForSubscriber(getDefaultSubscription(), callingPackage);
!!!37710263.java!!!	getVoiceMailNumberForSubscriber(in subId : int, inout callingPackage : String) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            if (!checkReadPhoneState(callingPackage, "getVoiceMailNumber")) {
                return null;
            }
            String number = PhoneNumberUtils.extractNetworkPortion(phone.getVoiceMailNumber());
            if (VDBG) log("VM: getVoiceMailNUmber: " + number);
            return number;
        } else {
            loge("getVoiceMailNumber phone is null for Subscription:" + subId);
            return null;
        }
!!!37710391.java!!!	getCompleteVoiceMailNumber() : String
        return getCompleteVoiceMailNumberForSubscriber(getDefaultSubscription());
!!!37710519.java!!!	getCompleteVoiceMailNumberForSubscriber(in subId : int) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            mContext.enforceCallingOrSelfPermission(CALL_PRIVILEGED, "Requires CALL_PRIVILEGED");
            String number = phone.getVoiceMailNumber();
            if (VDBG) log("VM: getCompleteVoiceMailNUmber: " + number);
            return number;
        } else {
            loge("getCompleteVoiceMailNumber phone is null for Subscription:" + subId);
            return null;
        }
!!!37710647.java!!!	getVoiceMailAlphaTag(inout callingPackage : String) : String
        return getVoiceMailAlphaTagForSubscriber(getDefaultSubscription(), callingPackage);
!!!37710775.java!!!	getVoiceMailAlphaTagForSubscriber(in subId : int, inout callingPackage : String) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            if (!checkReadPhoneState(callingPackage, "getVoiceMailAlphaTag")) {
                return null;
            }
            return phone.getVoiceMailAlphaTag();
        } else {
            loge("getVoiceMailAlphaTag phone is null for Subscription:" + subId);
            return null;
        }
!!!37710903.java!!!	getPhone(in subId : int) : Phone
        int phoneId = SubscriptionManager.getPhoneId(subId);
        if (!SubscriptionManager.isValidPhoneId(phoneId)) {
            phoneId = 0;
        }
        return mPhone[phoneId];
!!!37711031.java!!!	enforcePrivilegedPermissionOrCarrierPrivilege(inout phone : Phone) : void
        int permissionResult = mContext.checkCallingOrSelfPermission(
                READ_PRIVILEGED_PHONE_STATE);
        if (permissionResult == PackageManager.PERMISSION_GRANTED) {
            return;
        }
        log("No read privileged phone permission, check carrier privilege next.");
        UiccCard uiccCard = phone.getUiccCard();
        if (uiccCard == null) {
            throw new SecurityException("No Carrier Privilege: No UICC");
        }
        if (uiccCard.getCarrierPrivilegeStatusForCurrentTransaction(
                mContext.getPackageManager()) != CARRIER_PRIVILEGE_STATUS_HAS_ACCESS) {
            throw new SecurityException("No Carrier Privilege.");
        }
!!!37711159.java!!!	getDefaultSubscription() : int
        return  PhoneFactory.getDefaultSubscription();
!!!37711287.java!!!	getIsimImpi() : String
        Phone phone = getPhone(getDefaultSubscription());
        mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE,
                "Requires READ_PRIVILEGED_PHONE_STATE");
        IsimRecords isim = phone.getIsimRecords();
        if (isim != null) {
            return isim.getIsimImpi();
        } else {
            return null;
        }
!!!37711415.java!!!	getIsimDomain() : String
        Phone phone = getPhone(getDefaultSubscription());
        mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE,
                "Requires READ_PRIVILEGED_PHONE_STATE");
        IsimRecords isim = phone.getIsimRecords();
        if (isim != null) {
            return isim.getIsimDomain();
        } else {
            return null;
        }
!!!37711543.java!!!	getIsimImpu() : String
        Phone phone = getPhone(getDefaultSubscription());
        mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE,
                "Requires READ_PRIVILEGED_PHONE_STATE");
        IsimRecords isim = phone.getIsimRecords();
        if (isim != null) {
            return isim.getIsimImpu();
        } else {
            return null;
        }
!!!37711671.java!!!	getIsimIst() : String
        Phone phone = getPhone(getDefaultSubscription());
        mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE,
                "Requires READ_PRIVILEGED_PHONE_STATE");
        IsimRecords isim = phone.getIsimRecords();
        if (isim != null) {
            return isim.getIsimIst();
        } else {
            return null;
        }
!!!37711799.java!!!	getIsimPcscf() : String
        Phone phone = getPhone(getDefaultSubscription());
        mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE,
                "Requires READ_PRIVILEGED_PHONE_STATE");
        IsimRecords isim = phone.getIsimRecords();
        if (isim != null) {
            return isim.getIsimPcscf();
        } else {
            return null;
        }
!!!37711927.java!!!	getIsimChallengeResponse(inout nonce : String) : String
        Phone phone = getPhone(getDefaultSubscription());
        mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE,
                "Requires READ_PRIVILEGED_PHONE_STATE");
        IsimRecords isim = phone.getIsimRecords();
        if (isim != null) {
            return isim.getIsimChallengeResponse(nonce);
        } else {
            return null;
        }
!!!37712055.java!!!	getIccSimChallengeResponse(in subId : int, in appType : int, in authType : int, inout data : String) : String
        Phone phone = getPhone(subId);
        enforcePrivilegedPermissionOrCarrierPrivilege(phone);
        UiccCard uiccCard = phone.getUiccCard();
        if (uiccCard == null) {
            loge("getIccSimChallengeResponse() UiccCard is null");
            return null;
        }

        UiccCardApplication uiccApp = uiccCard.getApplicationByType(appType);
        if (uiccApp == null) {
            loge("getIccSimChallengeResponse() no app with specified type -- " +
                    appType);
            return null;
        } else {
            loge("getIccSimChallengeResponse() found app " + uiccApp.getAid()
                    + " specified type -- " + appType);
        }

        if(authType != UiccCardApplication.AUTH_CONTEXT_EAP_SIM &&
                authType != UiccCardApplication.AUTH_CONTEXT_EAP_AKA) {
            loge("getIccSimChallengeResponse() unsupported authType: " + authType);
            return null;
        }

        return uiccApp.getIccRecords().getIccSimChallengeResponse(authType, data);
!!!37712183.java!!!	getGroupIdLevel1(inout callingPackage : String) : String
        return getGroupIdLevel1ForSubscriber(getDefaultSubscription(), callingPackage);
!!!37712311.java!!!	getGroupIdLevel1ForSubscriber(in subId : int, inout callingPackage : String) : String
        Phone phone = getPhone(subId);
        if (phone != null) {
            if (!checkReadPhoneState(callingPackage, "getGroupIdLevel1")) {
                return null;
            }
            return phone.getGroupIdLevel1();
        } else {
            loge("getGroupIdLevel1 phone is null for Subscription:" + subId);
            return null;
        }
!!!37712439.java!!!	checkReadPhoneState(inout callingPackage : String, inout message : String) : boolean
        try {
            mContext.enforceCallingOrSelfPermission(READ_PRIVILEGED_PHONE_STATE, message);

            // SKIP checking run-time OP_READ_PHONE_STATE since self or using PRIVILEGED
            return true;
        } catch (SecurityException e) {
            mContext.enforceCallingOrSelfPermission(READ_PHONE_STATE, message);
        }

        return mAppOps.noteOp(AppOpsManager.OP_READ_PHONE_STATE, Binder.getCallingUid(),
                callingPackage) == AppOpsManager.MODE_ALLOWED;
!!!37712567.java!!!	checkReadPhoneNumber(inout callingPackage : String, inout message : String) : boolean
        // Default SMS app can always read it.
        if (mAppOps.noteOp(AppOpsManager.OP_WRITE_SMS,
                Binder.getCallingUid(), callingPackage) == AppOpsManager.MODE_ALLOWED) {
            return true;
        }
        try {
            return checkReadPhoneState(callingPackage, message);
        } catch (SecurityException readPhoneStateSecurityException) {
            try {
                // Can be read with READ_SMS too.
                mContext.enforceCallingOrSelfPermission(READ_SMS, message);
                return mAppOps.noteOp(AppOpsManager.OP_READ_SMS,
                        Binder.getCallingUid(), callingPackage) == AppOpsManager.MODE_ALLOWED;
            } catch (SecurityException readSmsSecurityException) {
                // Throw exception with message including both READ_PHONE_STATE and READ_SMS
                // permissions
                throw new SecurityException(message + ": Neither user " + Binder.getCallingUid() +
                        " nor current process has " + READ_PHONE_STATE + " or " + READ_SMS + ".");
            }
        }
!!!37712695.java!!!	log(inout s : String) : void
        Rlog.d(TAG, s);
!!!37712823.java!!!	loge(inout s : String) : void
        Rlog.e(TAG, s);
