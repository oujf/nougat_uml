class DcRequest
!!!37906615.java!!!	DcRequest(inout nr : NetworkRequest, inout context : Context)
        initApnPriorities(context);
        networkRequest = nr;
        apnId = apnIdForNetworkRequest(networkRequest);
        priority = priorityForApnId(apnId);
!!!37906743.java!!!	toString() : String
        return networkRequest.toString() + ", priority=" + priority + ", apnId=" + apnId;
!!!37906871.java!!!	hashCode() : int
        return networkRequest.hashCode();
!!!37906999.java!!!	equals(inout o : Object) : boolean
        if (o instanceof DcRequest) {
            return networkRequest.equals(((DcRequest)o).networkRequest);
        }
        return false;
!!!37907127.java!!!	compareTo(inout o : DcRequest) : int
        return o.priority - priority;
!!!37907255.java!!!	apnIdForNetworkRequest(inout nr : NetworkRequest) : int
        NetworkCapabilities nc = nr.networkCapabilities;
        // For now, ignore the bandwidth stuff
        if (nc.getTransportTypes().length > 0 &&
                nc.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) == false) {
            return APN_INVALID_ID;
        }

        // in the near term just do 1-1 matches.
        // TODO - actually try to match the set of capabilities
        int apnId = APN_INVALID_ID;

        boolean error = false;
        if (nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET)) {
            if (apnId != APN_INVALID_ID) error = true;
            apnId = APN_DEFAULT_ID;
        }
        if (nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_MMS)) {
            if (apnId != APN_INVALID_ID) error = true;
            apnId = APN_MMS_ID;
        }
        if (nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_SUPL)) {
            if (apnId != APN_INVALID_ID) error = true;
            apnId = APN_SUPL_ID;
        }
        if (nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_DUN)) {
            if (apnId != APN_INVALID_ID) error = true;
            apnId = APN_DUN_ID;
        }
        if (nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_FOTA)) {
            if (apnId != APN_INVALID_ID) error = true;
            apnId = APN_FOTA_ID;
        }
        if (nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_IMS)) {
            if (apnId != APN_INVALID_ID) error = true;
            apnId = APN_IMS_ID;
        }
        if (nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_CBS)) {
            if (apnId != APN_INVALID_ID) error = true;
            apnId = APN_CBS_ID;
        }
        if (nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_IA)) {
            if (apnId != APN_INVALID_ID) error = true;
            apnId = APN_IA_ID;
        }
        if (nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_RCS)) {
            if (apnId != APN_INVALID_ID) error = true;
            apnId = APN_INVALID_ID;
            loge("RCS APN type not yet supported");
        }
        if (nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_XCAP)) {
            if (apnId != APN_INVALID_ID) error = true;
            apnId = APN_INVALID_ID;
            loge("XCAP APN type not yet supported");
        }
        if (nc.hasCapability(NetworkCapabilities.NET_CAPABILITY_EIMS)) {
            if (apnId != APN_INVALID_ID) error = true;
            apnId = APN_EMERGENCY_ID;
        }
        if (error) {
            // TODO: If this error condition is removed, the framework's handling of
            // NET_CAPABILITY_NOT_RESTRICTED will need to be updated so requests for
            // say FOTA and INTERNET are marked as restricted.  This is not how
            // NetworkCapabilities.maybeMarkCapabilitiesRestricted currently works.
            loge("Multiple apn types specified in request - result is unspecified!");
        }
        if (apnId == APN_INVALID_ID) {
            loge("Unsupported NetworkRequest in Telephony: nr=" + nr);
        }
        return apnId;
!!!37907383.java!!!	initApnPriorities(inout context : Context) : void
        synchronized (sApnPriorityMap) {
            if (sApnPriorityMap.isEmpty()) {
                String[] networkConfigStrings = context.getResources().getStringArray(
                        com.android.internal.R.array.networkAttributes);
                for (String networkConfigString : networkConfigStrings) {
                    NetworkConfig networkConfig = new NetworkConfig(networkConfigString);
                    final int apnId = ApnContext.apnIdForType(networkConfig.type);
                    sApnPriorityMap.put(apnId, networkConfig.priority);
                }
            }
        }
!!!37907511.java!!!	priorityForApnId(in apnId : int) : int
        Integer priority = sApnPriorityMap.get(apnId);
        return (priority != null ? priority.intValue() : 0);
!!!37907639.java!!!	loge(inout s : String) : void
        Rlog.e(LOG_TAG, s);
