class UiccSmsController
!!!37814327.java!!!	UiccSmsController(inout phone : Phone)
        mPhone = phone;

        if (ServiceManager.getService("isms") == null) {
            ServiceManager.addService("isms", this);
        }
!!!37814455.java!!!	updateMessageOnIccEfForSubscriber(in subId : int, inout callingPackage : String, in index : int, in status : int, inout pdu : byte) : boolean
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null) {
            return iccSmsIntMgr.updateMessageOnIccEf(callingPackage, index, status, pdu);
        } else {
            Rlog.e(LOG_TAG,"updateMessageOnIccEfForSubscriber iccSmsIntMgr is null" +
                          " for Subscription: " + subId);
            return false;
        }
!!!37814583.java!!!	copyMessageToIccEfForSubscriber(in subId : int, inout callingPackage : String, in status : int, inout pdu : byte, inout smsc : byte) : boolean
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null) {
            return iccSmsIntMgr.copyMessageToIccEf(callingPackage, status, pdu, smsc);
        } else {
            Rlog.e(LOG_TAG,"copyMessageToIccEfForSubscriber iccSmsIntMgr is null" +
                          " for Subscription: " + subId);
            return false;
        }
!!!37814711.java!!!	getAllMessagesFromIccEfForSubscriber(in subId : int, inout callingPackage : String) : SmsRawData
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null) {
            return iccSmsIntMgr.getAllMessagesFromIccEf(callingPackage);
        } else {
            Rlog.e(LOG_TAG,"getAllMessagesFromIccEfForSubscriber iccSmsIntMgr is" +
                          " null for Subscription: " + subId);
            return null;
        }
!!!37814839.java!!!	sendDataForSubscriber(in subId : int, inout callingPackage : String, inout destAddr : String, inout scAddr : String, in destPort : int, inout data : byte, inout sentIntent : PendingIntent, inout deliveryIntent : PendingIntent) : void
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null) {
            iccSmsIntMgr.sendData(callingPackage, destAddr, scAddr, destPort, data,
                    sentIntent, deliveryIntent);
        } else {
            Rlog.e(LOG_TAG,"sendDataForSubscriber iccSmsIntMgr is null for" +
                          " Subscription: " + subId);
            // TODO: Use a more specific error code to replace RESULT_ERROR_GENERIC_FAILURE.
            sendErrorInPendingIntent(sentIntent, SmsManager.RESULT_ERROR_GENERIC_FAILURE);
        }
!!!37814967.java!!!	sendDataForSubscriberWithSelfPermissions(in subId : int, inout callingPackage : String, inout destAddr : String, inout scAddr : String, in destPort : int, inout data : byte, inout sentIntent : PendingIntent, inout deliveryIntent : PendingIntent) : void
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null) {
            iccSmsIntMgr.sendDataWithSelfPermissions(callingPackage, destAddr, scAddr, destPort, data,
                    sentIntent, deliveryIntent);
        } else {
            Rlog.e(LOG_TAG,"sendText iccSmsIntMgr is null for" +
                          " Subscription: " + subId);
        }
!!!37815095.java!!!	sendText(inout callingPackage : String, inout destAddr : String, inout scAddr : String, inout text : String, inout sentIntent : PendingIntent, inout deliveryIntent : PendingIntent) : void
        sendTextForSubscriber(getPreferredSmsSubscription(), callingPackage, destAddr, scAddr,
            text, sentIntent, deliveryIntent, true /* persistMessageForNonDefaultSmsApp*/);
!!!37815223.java!!!	sendTextForSubscriber(in subId : int, inout callingPackage : String, inout destAddr : String, inout scAddr : String, inout text : String, inout sentIntent : PendingIntent, inout deliveryIntent : PendingIntent, inout persistMessageForNonDefaultSmsApp : boolean) : void
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null) {
            iccSmsIntMgr.sendText(callingPackage, destAddr, scAddr, text, sentIntent,
                    deliveryIntent, persistMessageForNonDefaultSmsApp);
        } else {
            Rlog.e(LOG_TAG,"sendTextForSubscriber iccSmsIntMgr is null for" +
                          " Subscription: " + subId);
            sendErrorInPendingIntent(sentIntent, SmsManager.RESULT_ERROR_GENERIC_FAILURE);
        }
!!!37815351.java!!!	sendTextForSubscriberWithSelfPermissions(in subId : int, inout callingPackage : String, inout destAddr : String, inout scAddr : String, inout text : String, inout sentIntent : PendingIntent, inout deliveryIntent : PendingIntent) : void
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null) {
            iccSmsIntMgr.sendTextWithSelfPermissions(callingPackage, destAddr, scAddr, text,
                    sentIntent, deliveryIntent);
        } else {
            Rlog.e(LOG_TAG,"sendText iccSmsIntMgr is null for" +
                          " Subscription: " + subId);
        }
!!!37815479.java!!!	sendMultipartText(inout callingPackage : String, inout destAddr : String, inout scAddr : String, inout parts : List<String>, inout sentIntents : List<PendingIntent>, inout deliveryIntents : List<PendingIntent>) : void
         sendMultipartTextForSubscriber(getPreferredSmsSubscription(), callingPackage, destAddr,
                 scAddr, parts, sentIntents, deliveryIntents,
                 true /* persistMessageForNonDefaultSmsApp */);
!!!37815607.java!!!	sendMultipartTextForSubscriber(in subId : int, inout callingPackage : String, inout destAddr : String, inout scAddr : String, inout parts : List<String>, inout sentIntents : List<PendingIntent>, inout deliveryIntents : List<PendingIntent>, inout persistMessageForNonDefaultSmsApp : boolean) : void
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null ) {
            iccSmsIntMgr.sendMultipartText(callingPackage, destAddr, scAddr, parts, sentIntents,
                    deliveryIntents, persistMessageForNonDefaultSmsApp);
        } else {
            Rlog.e(LOG_TAG,"sendMultipartTextForSubscriber iccSmsIntMgr is null for" +
                          " Subscription: " + subId);
            sendErrorInPendingIntents(sentIntents, SmsManager.RESULT_ERROR_GENERIC_FAILURE);
        }
!!!37815735.java!!!	enableCellBroadcastForSubscriber(in subId : int, in messageIdentifier : int, in ranType : int) : boolean
        return enableCellBroadcastRangeForSubscriber(subId, messageIdentifier, messageIdentifier,
                ranType);
!!!37815863.java!!!	enableCellBroadcastRangeForSubscriber(in subId : int, in startMessageId : int, in endMessageId : int, in ranType : int) : boolean
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null ) {
            return iccSmsIntMgr.enableCellBroadcastRange(startMessageId, endMessageId, ranType);
        } else {
            Rlog.e(LOG_TAG,"enableCellBroadcastRangeForSubscriber iccSmsIntMgr is null for" +
                          " Subscription: " + subId);
        }
        return false;
!!!37815991.java!!!	disableCellBroadcastForSubscriber(in subId : int, in messageIdentifier : int, in ranType : int) : boolean
        return disableCellBroadcastRangeForSubscriber(subId, messageIdentifier, messageIdentifier,
                ranType);
!!!37816119.java!!!	disableCellBroadcastRangeForSubscriber(in subId : int, in startMessageId : int, in endMessageId : int, in ranType : int) : boolean
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null ) {
            return iccSmsIntMgr.disableCellBroadcastRange(startMessageId, endMessageId, ranType);
        } else {
            Rlog.e(LOG_TAG,"disableCellBroadcastRangeForSubscriber iccSmsIntMgr is null for" +
                          " Subscription:"+subId);
        }
       return false;
!!!37816247.java!!!	getPremiumSmsPermission(inout packageName : String) : int
        return getPremiumSmsPermissionForSubscriber(getPreferredSmsSubscription(), packageName);
!!!37816375.java!!!	getPremiumSmsPermissionForSubscriber(in subId : int, inout packageName : String) : int
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null ) {
            return iccSmsIntMgr.getPremiumSmsPermission(packageName);
        } else {
            Rlog.e(LOG_TAG, "getPremiumSmsPermissionForSubscriber iccSmsIntMgr is null");
        }
        //TODO Rakesh
        return 0;
!!!37816503.java!!!	setPremiumSmsPermission(inout packageName : String, in permission : int) : void
         setPremiumSmsPermissionForSubscriber(getPreferredSmsSubscription(), packageName, permission);
!!!37816631.java!!!	setPremiumSmsPermissionForSubscriber(in subId : int, inout packageName : String, in permission : int) : void
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null ) {
            iccSmsIntMgr.setPremiumSmsPermission(packageName, permission);
        } else {
            Rlog.e(LOG_TAG, "setPremiumSmsPermissionForSubscriber iccSmsIntMgr is null");
        }
!!!37816759.java!!!	isImsSmsSupportedForSubscriber(in subId : int) : boolean
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null ) {
            return iccSmsIntMgr.isImsSmsSupported();
        } else {
            Rlog.e(LOG_TAG, "isImsSmsSupportedForSubscriber iccSmsIntMgr is null");
        }
        return false;
!!!37816887.java!!!	isSmsSimPickActivityNeeded(in subId : int) : boolean
        final Context context = ActivityThread.currentApplication().getApplicationContext();
        TelephonyManager telephonyManager =
                (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
        List<SubscriptionInfo> subInfoList;
        final long identity = Binder.clearCallingIdentity();
        try {
            subInfoList = SubscriptionManager.from(context).getActiveSubscriptionInfoList();
        } finally {
            Binder.restoreCallingIdentity(identity);
        }

        if (subInfoList != null) {
            final int subInfoLength = subInfoList.size();

            for (int i = 0; i < subInfoLength; ++i) {
                final SubscriptionInfo sir = subInfoList.get(i);
                if (sir != null && sir.getSubscriptionId() == subId) {
                    // The subscription id is valid, sms sim pick activity not needed
                    return false;
                }
            }

            // If reached here and multiple SIMs and subs present, sms sim pick activity is needed
            if (subInfoLength > 0 && telephonyManager.getSimCount() > 1) {
                return true;
            }
        }

        return false;
!!!37817015.java!!!	getImsSmsFormatForSubscriber(in subId : int) : String
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null ) {
            return iccSmsIntMgr.getImsSmsFormat();
        } else {
            Rlog.e(LOG_TAG, "getImsSmsFormatForSubscriber iccSmsIntMgr is null");
        }
        return null;
!!!37817143.java!!!	injectSmsPduForSubscriber(in subId : int, inout pdu : byte, inout format : String, inout receivedIntent : PendingIntent) : void
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null) {
            iccSmsIntMgr.injectSmsPdu(pdu, format, receivedIntent);
        } else {
            Rlog.e(LOG_TAG, "injectSmsPduForSubscriber iccSmsIntMgr is null");
            // RESULT_SMS_GENERIC_ERROR is documented for injectSmsPdu
            sendErrorInPendingIntent(receivedIntent, Intents.RESULT_SMS_GENERIC_ERROR);
        }
!!!37817271.java!!!	getIccSmsInterfaceManager(in subId : int) : IccSmsInterfaceManager
        if (!isActiveSubId(subId)) {
            Rlog.e(LOG_TAG, "Subscription " + subId + " is inactive.");
            return null;
        }

        int phoneId = SubscriptionController.getInstance().getPhoneId(subId) ;
        //Fixme: for multi-subscription case
        if (!SubscriptionManager.isValidPhoneId(phoneId)
                || phoneId == SubscriptionManager.DEFAULT_PHONE_INDEX) {
            phoneId = 0;
        }

        try {
            return (IccSmsInterfaceManager)
                ((Phone)mPhone[(int)phoneId]).getIccSmsInterfaceManager();
        } catch (NullPointerException e) {
            Rlog.e(LOG_TAG, "Exception is :"+e.toString()+" For subscription :"+subId );
            e.printStackTrace();
            return null;
        } catch (ArrayIndexOutOfBoundsException e) {
            Rlog.e(LOG_TAG, "Exception is :"+e.toString()+" For subscription :"+subId );
            e.printStackTrace();
            return null;
        }
!!!37817399.java!!!	getPreferredSmsSubscription() : int
        return SubscriptionController.getInstance().getDefaultSmsSubId();
!!!37817527.java!!!	isSMSPromptEnabled() : boolean
        return PhoneFactory.isSMSPromptEnabled();
!!!37817655.java!!!	sendStoredText(in subId : int, inout callingPkg : String, inout messageUri : Uri, inout scAddress : String, inout sentIntent : PendingIntent, inout deliveryIntent : PendingIntent) : void
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null) {
            iccSmsIntMgr.sendStoredText(callingPkg, messageUri, scAddress, sentIntent,
                    deliveryIntent);
        } else {
            Rlog.e(LOG_TAG,"sendStoredText iccSmsIntMgr is null for subscription: " + subId);
            sendErrorInPendingIntent(sentIntent, SmsManager.RESULT_ERROR_GENERIC_FAILURE);
        }
!!!37817783.java!!!	sendStoredMultipartText(in subId : int, inout callingPkg : String, inout messageUri : Uri, inout scAddress : String, inout sentIntents : List<PendingIntent>, inout deliveryIntents : List<PendingIntent>) : void
        IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId);
        if (iccSmsIntMgr != null ) {
            iccSmsIntMgr.sendStoredMultipartText(callingPkg, messageUri, scAddress, sentIntents,
                    deliveryIntents);
        } else {
            Rlog.e(LOG_TAG,"sendStoredMultipartText iccSmsIntMgr is null for subscription: "
                    + subId);
            sendErrorInPendingIntents(sentIntents, SmsManager.RESULT_ERROR_GENERIC_FAILURE);
        }
!!!37817911.java!!!	isActiveSubId(in subId : int) : boolean
        return SubscriptionController.getInstance().isActiveSubId(subId);
!!!37818039.java!!!	sendErrorInPendingIntent(inout intent : PendingIntent, in errorCode : int) : void
        if (intent != null) {
            try {
                intent.send(errorCode);
            } catch (PendingIntent.CanceledException ex) {
            }
        }
!!!37818167.java!!!	sendErrorInPendingIntents(inout intents : List<PendingIntent>, in errorCode : int) : void
        for (PendingIntent intent : intents) {
            sendErrorInPendingIntent(intent, errorCode);
        }
