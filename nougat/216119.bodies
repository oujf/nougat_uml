class Dop
!!!799543.java!!!	Dop(in opcode : int, in family : int, in nextOpcode : int, inout format : InsnFormat, inout hasResult : boolean)
        if (!Opcodes.isValidShape(opcode)) {
            throw new IllegalArgumentException("bogus opcode");
        }

        if (!Opcodes.isValidShape(family)) {
            throw new IllegalArgumentException("bogus family");
        }

        if (!Opcodes.isValidShape(nextOpcode)) {
            throw new IllegalArgumentException("bogus nextOpcode");
        }

        if (format == null) {
            throw new NullPointerException("format == null");
        }

        this.opcode = opcode;
        this.family = family;
        this.nextOpcode = nextOpcode;
        this.format = format;
        this.hasResult = hasResult;
!!!799671.java!!!	toString() : String
        return getName();
!!!799799.java!!!	getOpcode() : int
        return opcode;
!!!799927.java!!!	getFamily() : int
        return family;
!!!800055.java!!!	getFormat() : InsnFormat
        return format;
!!!800183.java!!!	hasResult() : boolean
        return hasResult;
!!!800311.java!!!	getName() : String
        return OpcodeInfo.getName(opcode);
!!!800439.java!!!	getNextOpcode() : int
        return nextOpcode;
!!!800567.java!!!	getOppositeTest() : Dop
        switch (opcode) {
            case Opcodes.IF_EQ:  return Dops.IF_NE;
            case Opcodes.IF_NE:  return Dops.IF_EQ;
            case Opcodes.IF_LT:  return Dops.IF_GE;
            case Opcodes.IF_GE:  return Dops.IF_LT;
            case Opcodes.IF_GT:  return Dops.IF_LE;
            case Opcodes.IF_LE:  return Dops.IF_GT;
            case Opcodes.IF_EQZ: return Dops.IF_NEZ;
            case Opcodes.IF_NEZ: return Dops.IF_EQZ;
            case Opcodes.IF_LTZ: return Dops.IF_GEZ;
            case Opcodes.IF_GEZ: return Dops.IF_LTZ;
            case Opcodes.IF_GTZ: return Dops.IF_LEZ;
            case Opcodes.IF_LEZ: return Dops.IF_GTZ;
        }

        throw new IllegalArgumentException("bogus opcode: " + this);
