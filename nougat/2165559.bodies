class TelephonyDevController
!!!37802807.java!!!	logd(inout s : String) : void
        Rlog.d(LOG_TAG, s);
!!!37802935.java!!!	loge(inout s : String) : void
        Rlog.e(LOG_TAG, s);
!!!37803063.java!!!	create() : TelephonyDevController
        synchronized (mLock) {
            if (sTelephonyDevController != null) {
                throw new RuntimeException("TelephonyDevController already created!?!");
            }
            sTelephonyDevController = new TelephonyDevController();
            return sTelephonyDevController;
        }
!!!37803191.java!!!	getInstance() : TelephonyDevController
        synchronized (mLock) {
            if (sTelephonyDevController == null) {
                throw new RuntimeException("TelephonyDevController not yet created!?!");
            }
            return sTelephonyDevController;
        }
!!!37803319.java!!!	initFromResource() : void
        Resources resource = Resources.getSystem();
        String[] hwStrings = resource.getStringArray(
            com.android.internal.R.array.config_telephonyHardware);
        if (hwStrings != null) {
            for (String hwString : hwStrings) {
                HardwareConfig hw = new HardwareConfig(hwString);
                if (hw != null) {
                    if (hw.type == HardwareConfig.DEV_HARDWARE_TYPE_MODEM) {
                        updateOrInsert(hw, mModems);
                    } else if (hw.type == HardwareConfig.DEV_HARDWARE_TYPE_SIM) {
                        updateOrInsert(hw, mSims);
                    }
                }
            }
        }
!!!37803447.java!!!	TelephonyDevController()
        initFromResource();

        mModems.trimToSize();
        mSims.trimToSize();
!!!37803575.java!!!	registerRIL(inout cmdsIf : CommandsInterface) : void
        /* get the current configuration from this ril... */
        cmdsIf.getHardwareConfig(sRilHardwareConfig);
        /* ... process it ... */
        if (sRilHardwareConfig != null) {
            AsyncResult ar = (AsyncResult) sRilHardwareConfig.obj;
            if (ar.exception == null) {
                handleGetHardwareConfigChanged(ar);
            }
        }
        /* and register for async device configuration change. */
        cmdsIf.registerForHardwareConfigChanged(sTelephonyDevController, EVENT_HARDWARE_CONFIG_CHANGED, null);
!!!37803703.java!!!	unregisterRIL(inout cmdsIf : CommandsInterface) : void
        cmdsIf.unregisterForHardwareConfigChanged(sTelephonyDevController);
!!!37803831.java!!!	handleMessage(inout msg : Message) : void
        AsyncResult ar;
        switch (msg.what) {
            case EVENT_HARDWARE_CONFIG_CHANGED:
                if (DBG) logd("handleMessage: received EVENT_HARDWARE_CONFIG_CHANGED");
                ar = (AsyncResult) msg.obj;
                handleGetHardwareConfigChanged(ar);
            break;
            default:
                loge("handleMessage: Unknown Event " + msg.what);
        }
!!!37803959.java!!!	updateOrInsert(inout hw : HardwareConfig, inout list : ArrayList<HardwareConfig>) : void
        int size;
        HardwareConfig item;
        synchronized (mLock) {
            size = list.size();
            for (int i = 0 ; i < size ; i++) {
                item = list.get(i);
                if (item.uuid.compareTo(hw.uuid) == 0) {
                    if (DBG) logd("updateOrInsert: removing: " + item);
                    list.remove(i);
                }
            }
            if (DBG) logd("updateOrInsert: inserting: " + hw);
            list.add(hw);
        }
!!!37804087.java!!!	handleGetHardwareConfigChanged(inout ar : AsyncResult) : void
        if ((ar.exception == null) && (ar.result != null)) {
            List hwcfg = (List)ar.result;
            for (int i = 0 ; i < hwcfg.size() ; i++) {
                HardwareConfig hw = null;

                hw = (HardwareConfig) hwcfg.get(i);
                if (hw != null) {
                    if (hw.type == HardwareConfig.DEV_HARDWARE_TYPE_MODEM) {
                        updateOrInsert(hw, mModems);
                    } else if (hw.type == HardwareConfig.DEV_HARDWARE_TYPE_SIM) {
                        updateOrInsert(hw, mSims);
                    }
                }
            }
        } else {
            /* error detected, ignore.  are we missing some real time configutation
             * at this point?  what to do...
             */
            loge("handleGetHardwareConfigChanged - returned an error.");
        }
!!!37804215.java!!!	getModemCount() : int
        synchronized (mLock) {
            int count = mModems.size();
            if (DBG) logd("getModemCount: " + count);
            return count;
        }
!!!37804343.java!!!	getModem(in index : int) : HardwareConfig
        synchronized (mLock) {
            if (mModems.isEmpty()) {
                loge("getModem: no registered modem device?!?");
                return null;
            }

            if (index > getModemCount()) {
                loge("getModem: out-of-bounds access for modem device " + index + " max: " + getModemCount());
                return null;
            }

            if (DBG) logd("getModem: " + index);
            return mModems.get(index);
        }
!!!37804471.java!!!	getSimCount() : int
        synchronized (mLock) {
            int count = mSims.size();
            if (DBG) logd("getSimCount: " + count);
            return count;
        }
!!!37804599.java!!!	getSim(in index : int) : HardwareConfig
        synchronized (mLock) {
            if (mSims.isEmpty()) {
                loge("getSim: no registered sim device?!?");
                return null;
            }

            if (index > getSimCount()) {
                loge("getSim: out-of-bounds access for sim device " + index + " max: " + getSimCount());
                return null;
            }

            if (DBG) logd("getSim: " + index);
            return mSims.get(index);
        }
!!!37804727.java!!!	getModemForSim(in simIndex : int) : HardwareConfig
        synchronized (mLock) {
            if (mModems.isEmpty() || mSims.isEmpty()) {
                loge("getModemForSim: no registered modem/sim device?!?");
                return null;
            }

            if (simIndex > getSimCount()) {
                loge("getModemForSim: out-of-bounds access for sim device " + simIndex + " max: " + getSimCount());
                return null;
            }

            if (DBG) logd("getModemForSim " + simIndex);

            HardwareConfig sim = getSim(simIndex);
            for (HardwareConfig modem: mModems) {
                if (modem.uuid.equals(sim.modemUuid)) {
                    return modem;
                }
            }

            return null;
        }
!!!37804855.java!!!	getAllSimsForModem(in modemIndex : int) : HardwareConfig
        synchronized (mLock) {
            if (mSims.isEmpty()) {
                loge("getAllSimsForModem: no registered sim device?!?");
                return null;
            }

            if (modemIndex > getModemCount()) {
                loge("getAllSimsForModem: out-of-bounds access for modem device " + modemIndex + " max: " + getModemCount());
                return null;
            }

            if (DBG) logd("getAllSimsForModem " + modemIndex);

            ArrayList<HardwareConfig> result = new ArrayList<HardwareConfig>();
            HardwareConfig modem = getModem(modemIndex);
            for (HardwareConfig sim: mSims) {
                if (sim.modemUuid.equals(modem.uuid)) {
                    result.add(sim);
                }
            }
            return result;
        }
!!!37804983.java!!!	getAllModems() : HardwareConfig
        synchronized (mLock) {
            ArrayList<HardwareConfig> modems = new ArrayList<HardwareConfig>();
            if (mModems.isEmpty()) {
                if (DBG) logd("getAllModems: empty list.");
            } else {
                for (HardwareConfig modem: mModems) {
                    modems.add(modem);
                }
            }

            return modems;
        }
!!!37805111.java!!!	getAllSims() : HardwareConfig
        synchronized (mLock) {
            ArrayList<HardwareConfig> sims = new ArrayList<HardwareConfig>();
            if (mSims.isEmpty()) {
                if (DBG) logd("getAllSims: empty list.");
            } else {
                for (HardwareConfig sim: mSims) {
                    sims.add(sim);
                }
            }

            return sims;
        }
