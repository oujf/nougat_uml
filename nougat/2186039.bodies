class SipConnectionBase
!!!38056119.java!!!	SipConnectionBase(inout dialString : String)
        super(PhoneConstants.PHONE_TYPE_SIP);
        if (DBG) log("SipConnectionBase: ctor dialString=" + SipPhone.hidePii(dialString));
        mPostDialString = PhoneNumberUtils.extractPostDialPortion(dialString);

        mCreateTime = System.currentTimeMillis();
!!!38056247.java!!!	setState(inout state : Call::State) : void
        if (DBG) log("setState: state=" + state);
        switch (state) {
            case ACTIVE:
                if (mConnectTime == 0) {
                    mConnectTimeReal = SystemClock.elapsedRealtime();
                    mConnectTime = System.currentTimeMillis();
                }
                break;
            case DISCONNECTED:
                mDuration = getDurationMillis();
                mDisconnectTime = System.currentTimeMillis();
                break;
            case HOLDING:
                mHoldingStartTime = SystemClock.elapsedRealtime();
                break;
            default:
                // Ignore
                break;
        }
!!!38056375.java!!!	getCreateTime() : long
        if (VDBG) log("getCreateTime: ret=" + mCreateTime);
        return mCreateTime;
!!!38056503.java!!!	getConnectTime() : long
        if (VDBG) log("getConnectTime: ret=" + mConnectTime);
        return mConnectTime;
!!!38056631.java!!!	getDisconnectTime() : long
        if (VDBG) log("getDisconnectTime: ret=" + mDisconnectTime);
        return mDisconnectTime;
!!!38056759.java!!!	getDurationMillis() : long
        long dur;
        if (mConnectTimeReal == 0) {
            dur = 0;
        } else if (mDuration < 0) {
            dur = SystemClock.elapsedRealtime() - mConnectTimeReal;
        } else {
            dur = mDuration;
        }
        if (VDBG) log("getDurationMillis: ret=" + dur);
        return dur;
!!!38056887.java!!!	getHoldDurationMillis() : long
        long dur;
        if (getState() != Call.State.HOLDING) {
            // If not holding, return 0
            dur = 0;
        } else {
            dur = SystemClock.elapsedRealtime() - mHoldingStartTime;
        }
        if (VDBG) log("getHoldDurationMillis: ret=" + dur);
        return dur;
!!!38057015.java!!!	setDisconnectCause(in cause : int) : void
        if (DBG) log("setDisconnectCause: prev=" + mCause + " new=" + cause);
        mCause = cause;
!!!38057143.java!!!	getVendorDisconnectCause() : String
      return null;
!!!38057271.java!!!	proceedAfterWaitChar() : void
        if (DBG) log("proceedAfterWaitChar: ignore");
!!!38057399.java!!!	proceedAfterWildChar(inout str : String) : void
        if (DBG) log("proceedAfterWildChar: ignore");
!!!38057527.java!!!	cancelPostDial() : void
        if (DBG) log("cancelPostDial: ignore");
!!!38057783.java!!!	log(inout msg : String) : void
        Rlog.d(LOG_TAG, msg);
!!!38057911.java!!!	getNumberPresentation() : int
        // TODO: add PRESENTATION_URL
        if (VDBG) log("getNumberPresentation: ret=PRESENTATION_ALLOWED");
        return PhoneConstants.PRESENTATION_ALLOWED;
!!!38058039.java!!!	getUUSInfo() : UUSInfo
        // FIXME: what's this for SIP?
        if (VDBG) log("getUUSInfo: ? ret=null");
        return null;
!!!38058167.java!!!	getPreciseDisconnectCause() : int
        return 0;
!!!38058295.java!!!	getHoldingStartTime() : long
        return mHoldingStartTime;
!!!38058423.java!!!	getConnectTimeReal() : long
        return mConnectTimeReal;
!!!38058551.java!!!	getOrigConnection() : Connection
        return null;
!!!38058679.java!!!	isMultiparty() : boolean
        return false;
