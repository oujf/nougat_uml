class SipConnection
!!!38078519.java!!!	SipConnection(inout owner : SipPhone::SipCall, inout callee : SipProfile, inout originalNumber : String)
            super(originalNumber);
            mOwner = owner;
            mPeer = callee;
            mOriginalNumber = originalNumber;
!!!38078647.java!!!	SipConnection(inout owner : SipPhone::SipCall, inout callee : SipProfile)
            this(owner, callee, getUriString(callee));
!!!38078775.java!!!	getCnapName() : String
            String displayName = mPeer.getDisplayName();
            return TextUtils.isEmpty(displayName) ? null
                                                  : displayName;
!!!38078903.java!!!	getNumberPresentation() : int
            return PhoneConstants.PRESENTATION_ALLOWED;
!!!38079031.java!!!	initIncomingCall(inout sipAudioCall : SipAudioCall, inout newState : Call::State) : void
            setState(newState);
            mSipAudioCall = sipAudioCall;
            sipAudioCall.setListener(mAdapter); // call back to set state
            mIncoming = true;
!!!38079159.java!!!	acceptCall() : void
            try {
                mSipAudioCall.answerCall(TIMEOUT_ANSWER_CALL);
            } catch (SipException e) {
                throw new CallStateException("acceptCall(): " + e);
            }
!!!38079287.java!!!	changeOwner(inout owner : SipPhone::SipCall) : void
            mOwner = owner;
!!!38079415.java!!!	getAudioGroup() : AudioGroup
            if (mSipAudioCall == null) return null;
            return mSipAudioCall.getAudioGroup();
!!!38079543.java!!!	dial() : void
            setState(Call.State.DIALING);
            mSipAudioCall = mSipManager.makeAudioCall(mProfile, mPeer, null,
                    TIMEOUT_MAKE_CALL);
            mSipAudioCall.setListener(mAdapter);
!!!38079671.java!!!	hold() : void
            setState(Call.State.HOLDING);
            try {
                mSipAudioCall.holdCall(TIMEOUT_HOLD_CALL);
            } catch (SipException e) {
                throw new CallStateException("hold(): " + e);
            }
!!!38079799.java!!!	unhold(inout audioGroup : AudioGroup) : void
            mSipAudioCall.setAudioGroup(audioGroup);
            setState(Call.State.ACTIVE);
            try {
                mSipAudioCall.continueCall(TIMEOUT_HOLD_CALL);
            } catch (SipException e) {
                throw new CallStateException("unhold(): " + e);
            }
!!!38079927.java!!!	setMute(inout muted : boolean) : void
            if ((mSipAudioCall != null) && (muted != mSipAudioCall.isMuted())) {
                if (SCN_DBG) log("setState: prev muted=" + !muted + " new muted=" + muted);
                mSipAudioCall.toggleMute();
            }
!!!38080055.java!!!	getMute() : boolean
            return (mSipAudioCall == null) ? false
                                           : mSipAudioCall.isMuted();
!!!38080183.java!!!	setState(inout state : Call::State) : void
            if (state == mState) return;
            super.setState(state);
            mState = state;
!!!38080311.java!!!	getState() : Call::State
            return mState;
!!!38080439.java!!!	isIncoming() : boolean
            return mIncoming;
!!!38080567.java!!!	getAddress() : String
            // Phone app uses this to query caller ID. Return the original dial
            // number (which may be a PSTN number) instead of the peer's SIP
            // URI.
            return mOriginalNumber;
!!!38080695.java!!!	getCall() : SipPhone::SipCall
            return mOwner;
!!!38080823.java!!!	getPhone() : Phone
            return mOwner.getPhone();
!!!38080951.java!!!	hangup() : void
            synchronized (SipPhone.class) {
                if (SCN_DBG) log("hangup: conn=" + mPeer.getUriString()
                        + ": " + mState + ": on phone "
                        + getPhone().getPhoneName());
                if (!mState.isAlive()) return;
                try {
                    SipAudioCall sipAudioCall = mSipAudioCall;
                    if (sipAudioCall != null) {
                        sipAudioCall.setListener(null);
                        sipAudioCall.endCall();
                    }
                } catch (SipException e) {
                    throw new CallStateException("hangup(): " + e);
                } finally {
                    mAdapter.onCallEnded(((mState == Call.State.INCOMING)
                            || (mState == Call.State.WAITING))
                            ? DisconnectCause.INCOMING_REJECTED
                            : DisconnectCause.LOCAL);
                }
            }
!!!38081079.java!!!	separate() : void
            synchronized (SipPhone.class) {
                SipCall call = (getPhone() == SipPhone.this)
                        ? (SipCall) getBackgroundCall()
                        : (SipCall) getForegroundCall();
                if (call.getState() != Call.State.IDLE) {
                    throw new CallStateException(
                            "cannot put conn back to a call in non-idle state: "
                            + call.getState());
                }
                if (SCN_DBG) log("separate: conn="
                        + mPeer.getUriString() + " from " + mOwner + " back to "
                        + call);

                // separate the AudioGroup and connection from the original call
                Phone originalPhone = getPhone();
                AudioGroup audioGroup = call.getAudioGroup(); // may be null
                call.add(this);
                mSipAudioCall.setAudioGroup(audioGroup);

                // put the original call to bg; and the separated call becomes
                // fg if it was in bg
                originalPhone.switchHoldingAndActive();

                // start audio and notify the phone app of the state change
                call = (SipCall) getForegroundCall();
                mSipAudioCall.startAudio();
                call.onConnectionStateChanged(this);
            }
!!!38081207.java!!!	log(inout s : String) : void
            Rlog.d(SCN_TAG, s);
