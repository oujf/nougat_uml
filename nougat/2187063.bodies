class ModelInterpreter
!!!38084919.java!!!	ModelInterpreter(inout in : InputStream, inout out : OutputStream)
        mIn = in;
        mOut = out;

        init();
!!!38085047.java!!!	ModelInterpreter(inout sa : InetSocketAddress)
        mSS = new ServerSocket();

        mSS.setReuseAddress(true);
        mSS.bind(sa);

        init();
!!!38085175.java!!!	init() : void
        new Thread(this, "ModelInterpreter").start();
        mHandlerThread = new HandlerThread("ModelInterpreter");
        mHandlerThread.start();
        Looper looper = mHandlerThread.getLooper();
        mSimulatedCallState = new SimulatedGsmCallState(looper);
!!!38085303.java!!!	run() : void
        for (;;) {
            if (mSS != null) {
                Socket s;

                try {
                    s = mSS.accept();
                } catch (java.io.IOException ex) {
                    Rlog.w(LOG_TAG,
                        "IOException on socket.accept(); stopping", ex);
                    return;
                }

                try {
                    mIn = s.getInputStream();
                    mOut = s.getOutputStream();
                } catch (java.io.IOException ex) {
                    Rlog.w(LOG_TAG,
                        "IOException on accepted socket(); re-listening", ex);
                    continue;
                }

                Rlog.i(LOG_TAG, "New connection accepted");
            }


            mLineReader = new LineReader (mIn);

            println ("Welcome");

            for (;;) {
                String line;

                line = mLineReader.getNextLine();

                //System.out.println("MI<< " + line);

                if (line == null) {
                    break;
                }

                synchronized(mPausedResponseMonitor) {
                    while (mPausedResponseCount > 0) {
                        try {
                            mPausedResponseMonitor.wait();
                        } catch (InterruptedException ex) {
                        }
                    }
                }

                synchronized (this) {
                    try {
                        mFinalResponse = "OK";
                        processLine(line);
                        println(mFinalResponse);
                    } catch (InterpreterEx ex) {
                        println(ex.mResult);
                    } catch (RuntimeException ex) {
                        ex.printStackTrace();
                        println("ERROR");
                    }
                }
            }

            Rlog.i(LOG_TAG, "Disconnected");

            if (mSS == null) {
                // no reconnect in this case
                break;
            }
        }
!!!38085431.java!!!	triggerRing(inout number : String) : void
        synchronized (this) {
            boolean success;

            success = mSimulatedCallState.triggerRing(number);

            if (success) {
                println ("RING");
            }
        }
!!!38085559.java!!!	progressConnectingCallState() : void
        mSimulatedCallState.progressConnectingCallState();
!!!38085687.java!!!	progressConnectingToActive() : void
        mSimulatedCallState.progressConnectingToActive();
!!!38085815.java!!!	setAutoProgressConnectingCall(inout b : boolean) : void
        mSimulatedCallState.setAutoProgressConnectingCall(b);
!!!38085943.java!!!	setNextDialFailImmediately(inout b : boolean) : void
        mSimulatedCallState.setNextDialFailImmediately(b);
!!!38086071.java!!!	setNextCallFailCause(in gsmCause : int) : void
        //FIXME implement
!!!38086199.java!!!	triggerHangupForeground() : void
        boolean success;

        success = mSimulatedCallState.triggerHangupForeground();

        if (success) {
            println ("NO CARRIER");
        }
!!!38086327.java!!!	triggerHangupBackground() : void
        boolean success;

        success = mSimulatedCallState.triggerHangupBackground();

        if (success) {
            println ("NO CARRIER");
        }
!!!38086455.java!!!	triggerHangupAll() : void
        boolean success;

        success = mSimulatedCallState.triggerHangupAll();

        if (success) {
            println ("NO CARRIER");
        }
!!!38086583.java!!!	sendUnsolicited(inout unsol : String) : void
        synchronized (this) {
            println(unsol);
        }
!!!38086967.java!!!	triggerIncomingSMS(inout message : String) : void
/**************
        StringBuilder pdu = new StringBuilder();

        pdu.append ("00");      //SMSC address - 0 bytes

        pdu.append ("04");      // Message type indicator

        // source address: +18005551212
        pdu.append("918100551521F0");

        // protocol ID and data coding scheme
        pdu.append("0000");

        Calendar c = Calendar.getInstance();

        pdu.append (c.



        synchronized (this) {
            println("+CMT: ,1\r" + pdu.toString());
        }

**************/
!!!38087095.java!!!	pauseResponses() : void
        synchronized(mPausedResponseMonitor) {
            mPausedResponseCount++;
        }
!!!38087223.java!!!	resumeResponses() : void
        synchronized(mPausedResponseMonitor) {
            mPausedResponseCount--;

            if (mPausedResponseCount == 0) {
                mPausedResponseMonitor.notifyAll();
            }
        }
!!!38087351.java!!!	onAnswer() : void
        boolean success;

        success = mSimulatedCallState.onAnswer();

        if (!success) {
            throw new InterpreterEx("ERROR");
        }
!!!38087479.java!!!	onHangup() : void
        boolean success = false;

        success = mSimulatedCallState.onAnswer();

        if (!success) {
            throw new InterpreterEx("ERROR");
        }

        mFinalResponse = "NO CARRIER";
!!!38087607.java!!!	onCHLD(inout command : String) : void
        // command starts with "+CHLD="
        char c0;
        char c1 = 0;
        boolean success;

        c0 = command.charAt(6);

        if (command.length() >= 8) {
            c1 = command.charAt(7);
        }

        success = mSimulatedCallState.onChld(c0, c1);

        if (!success) {
            throw new InterpreterEx("ERROR");
        }
!!!38087735.java!!!	onDial(inout command : String) : void
        boolean success;

        success = mSimulatedCallState.onDial(command.substring(1));

        if (!success) {
            throw new InterpreterEx("ERROR");
        }
!!!38087863.java!!!	onCLCC() : void
        List<String> lines;

        lines = mSimulatedCallState.getClccLines();

        for (int i = 0, s = lines.size() ; i < s ; i++) {
            println (lines.get(i));
        }
!!!38087991.java!!!	onSMSSend(inout command : String) : void
        String pdu;

        print ("> ");
        pdu = mLineReader.getNextLineCtrlZ();

        println("+CMGS: 1");
!!!38088119.java!!!	processLine(inout line : String) : void
        String[] commands;

        commands = splitCommands(line);

        for (int i = 0; i < commands.length ; i++) {
            String command = commands[i];

            if (command.equals("A")) {
                onAnswer();
            } else if (command.equals("H")) {
                onHangup();
            } else if (command.startsWith("+CHLD=")) {
                onCHLD(command);
            } else if (command.equals("+CLCC")) {
                onCLCC();
            } else if (command.startsWith("D")) {
                onDial(command);
            } else if (command.startsWith("+CMGS=")) {
                onSMSSend(command);
            } else {
                boolean found = false;

                for (int j = 0; j < sDefaultResponses.length ; j++) {
                    if (command.equals(sDefaultResponses[j][0])) {
                        String r = sDefaultResponses[j][1];
                        if (r != null) {
                            println(r);
                        }
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    throw new InterpreterEx ("ERROR");
                }
            }
        }
!!!38088247.java!!!	splitCommands(inout line : String) : String
        if (!line.startsWith ("AT")) {
            throw new InterpreterEx("ERROR");
        }

        if (line.length() == 2) {
            // Just AT by itself
            return new String[0];
        }

        String ret[] = new String[1];

        //TODO fix case here too
        ret[0] = line.substring(2);

        return ret;
/****
        try {
            // i = 2 to skip over AT
            for (int i = 2, s = line.length() ; i < s ; i++) {
                // r"|([A-RT-Z]\d?)" # Normal commands eg ATA or I0
                // r"|(&[A-Z]\d*)" # & commands eg &C
                // r"|(S\d+(=\d+)?)" # S registers
                // r"((\+|%)\w+(\?|=([^;]+(;|$)))?)" # extended command eg +CREG=2


            }
        } catch (StringIndexOutOfBoundsException ex) {
            throw new InterpreterEx ("ERROR");
        }
***/
!!!38088375.java!!!	println(inout s : String) : void
        synchronized(this) {
            try {
                byte[] bytes =  s.getBytes("US-ASCII");

                //System.out.println("MI>> " + s);

                mOut.write(bytes);
                mOut.write('\r');
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
!!!38088503.java!!!	print(inout s : String) : void
        synchronized(this) {
            try {
                byte[] bytes =  s.getBytes("US-ASCII");

                //System.out.println("MI>> " + s + " (no <cr>)");

                mOut.write(bytes);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
!!!38088631.java!!!	shutdown() : void
        Looper looper = mHandlerThread.getLooper();
        if (looper != null) {
            looper.quit();
        }

        try {
            mIn.close();
        } catch (IOException ex) {
        }
        try {
            mOut.close();
        } catch (IOException ex) {
        }
