class SimulatedCommands
!!!38088759.java!!!	SimulatedCommands()
        super(null);  // Don't log statistics
        mHandlerThread = new HandlerThread("SimulatedCommands");
        mHandlerThread.start();
        Looper looper = mHandlerThread.getLooper();

        simulatedCallState = new SimulatedGsmCallState(looper);

        setRadioState(RadioState.RADIO_ON);
        mSimLockedState = INITIAL_LOCK_STATE;
        mSimLockEnabled = (mSimLockedState != SimLockState.NONE);
        mPinCode = DEFAULT_SIM_PIN_CODE;
        mSimFdnEnabledState = INITIAL_FDN_STATE;
        mSimFdnEnabled = (mSimFdnEnabledState != SimFdnState.NONE);
        mPin2Code = DEFAULT_SIM_PIN2_CODE;
!!!38088887.java!!!	log(inout str : String) : void
        Rlog.d(LOG_TAG, str);
!!!38089015.java!!!	getIccCardStatus(inout result : Message) : void
        if(mIccCardStatus!=null) {
            resultSuccess(result, mIccCardStatus);
        } else {
            resultFail(result, null, new RuntimeException("IccCardStatus not set"));
        }
!!!38089143.java!!!	supplyIccPin(inout pin : String, inout result : Message) : void
        if (mSimLockedState != SimLockState.REQUIRE_PIN) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin: wrong state, state=" +
                    mSimLockedState);
            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
            return;
        }

        if (pin != null && pin.equals(mPinCode)) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin: success!");
            mPinUnlockAttempts = 0;
            mSimLockedState = SimLockState.NONE;
            mIccStatusChangedRegistrants.notifyRegistrants();

            resultSuccess(result, null);

            return;
        }

        if (result != null) {
            mPinUnlockAttempts ++;

            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin: failed! attempt=" +
                    mPinUnlockAttempts);
            if (mPinUnlockAttempts >= DEFAULT_PIN1_ATTEMPT) {
                Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin: set state to REQUIRE_PUK");
                mSimLockedState = SimLockState.REQUIRE_PUK;
            }

            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
        }
!!!38089271.java!!!	supplyIccPuk(inout puk : String, inout newPin : String, inout result : Message) : void
        if (mSimLockedState != SimLockState.REQUIRE_PUK) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk: wrong state, state=" +
                    mSimLockedState);
            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
            return;
        }

        if (puk != null && puk.equals(SIM_PUK_CODE)) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk: success!");
            mSimLockedState = SimLockState.NONE;
            mPukUnlockAttempts = 0;
            mIccStatusChangedRegistrants.notifyRegistrants();

            resultSuccess(result, null);
            return;
        }

        if (result != null) {
            mPukUnlockAttempts ++;

            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk: failed! attempt=" +
                    mPukUnlockAttempts);
            if (mPukUnlockAttempts >= 10) {
                Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk: set state to SIM_PERM_LOCKED");
                mSimLockedState = SimLockState.SIM_PERM_LOCKED;
            }

            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
        }
!!!38089399.java!!!	supplyIccPin2(inout pin2 : String, inout result : Message) : void
        if (mSimFdnEnabledState != SimFdnState.REQUIRE_PIN2) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin2: wrong state, state=" +
                    mSimFdnEnabledState);
            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
            return;
        }

        if (pin2 != null && pin2.equals(mPin2Code)) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin2: success!");
            mPin2UnlockAttempts = 0;
            mSimFdnEnabledState = SimFdnState.NONE;

            resultSuccess(result, null);
            return;
        }

        if (result != null) {
            mPin2UnlockAttempts ++;

            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin2: failed! attempt=" +
                    mPin2UnlockAttempts);
            if (mPin2UnlockAttempts >= DEFAULT_PIN2_ATTEMPT) {
                Rlog.i(LOG_TAG, "[SimCmd] supplyIccPin2: set state to REQUIRE_PUK2");
                mSimFdnEnabledState = SimFdnState.REQUIRE_PUK2;
            }

            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
        }
!!!38089527.java!!!	supplyIccPuk2(inout puk2 : String, inout newPin2 : String, inout result : Message) : void
        if (mSimFdnEnabledState != SimFdnState.REQUIRE_PUK2) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk2: wrong state, state=" +
                    mSimLockedState);
            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
            return;
        }

        if (puk2 != null && puk2.equals(SIM_PUK2_CODE)) {
            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk2: success!");
            mSimFdnEnabledState = SimFdnState.NONE;
            mPuk2UnlockAttempts = 0;

            resultSuccess(result, null);
            return;
        }

        if (result != null) {
            mPuk2UnlockAttempts ++;

            Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk2: failed! attempt=" +
                    mPuk2UnlockAttempts);
            if (mPuk2UnlockAttempts >= 10) {
                Rlog.i(LOG_TAG, "[SimCmd] supplyIccPuk2: set state to SIM_PERM_LOCKED");
                mSimFdnEnabledState = SimFdnState.SIM_PERM_LOCKED;
            }

            CommandException ex = new CommandException(
                    CommandException.Error.PASSWORD_INCORRECT);
            resultFail(result, null, ex);
        }
!!!38089655.java!!!	changeIccPin(inout oldPin : String, inout newPin : String, inout result : Message) : void
        if (oldPin != null && oldPin.equals(mPinCode)) {
            mPinCode = newPin;
            resultSuccess(result, null);

            return;
        }

        Rlog.i(LOG_TAG, "[SimCmd] changeIccPin: pin failed!");

        CommandException ex = new CommandException(
                CommandException.Error.PASSWORD_INCORRECT);
        resultFail(result, null, ex);
!!!38089783.java!!!	changeIccPin2(inout oldPin2 : String, inout newPin2 : String, inout result : Message) : void
        if (oldPin2 != null && oldPin2.equals(mPin2Code)) {
            mPin2Code = newPin2;
            resultSuccess(result, null);

            return;
        }

        Rlog.i(LOG_TAG, "[SimCmd] changeIccPin2: pin2 failed!");

        CommandException ex = new CommandException(
                CommandException.Error.PASSWORD_INCORRECT);
        resultFail(result, null, ex);
!!!38089911.java!!!	changeBarringPassword(inout facility : String, inout oldPwd : String, inout newPwd : String, inout result : Message) : void
        unimplemented(result);
!!!38090039.java!!!	setSuppServiceNotifications(inout enable : boolean, inout result : Message) : void
        resultSuccess(result, null);

        if (enable && mSsnNotifyOn) {
            Rlog.w(LOG_TAG, "Supp Service Notifications already enabled!");
        }

        mSsnNotifyOn = enable;
!!!38090167.java!!!	queryFacilityLock(inout facility : String, inout pin : String, in serviceClass : int, inout result : Message) : void
        queryFacilityLockForApp(facility, pin, serviceClass, null, result);
!!!38090295.java!!!	queryFacilityLockForApp(inout facility : String, inout pin : String, in serviceClass : int, inout appId : String, inout result : Message) : void
        if (facility != null && facility.equals(CommandsInterface.CB_FACILITY_BA_SIM)) {
            if (result != null) {
                int[] r = new int[1];
                r[0] = (mSimLockEnabled ? 1 : 0);
                Rlog.i(LOG_TAG, "[SimCmd] queryFacilityLock: SIM is "
                        + (r[0] == 0 ? "unlocked" : "locked"));
                resultSuccess(result, r);
            }
            return;
        } else if (facility != null && facility.equals(CommandsInterface.CB_FACILITY_BA_FD)) {
            if (result != null) {
                int[] r = new int[1];
                r[0] = (mSimFdnEnabled ? 1 : 0);
                Rlog.i(LOG_TAG, "[SimCmd] queryFacilityLock: FDN is "
                        + (r[0] == 0 ? "disabled" : "enabled"));
                resultSuccess(result, r);
            }
            return;
        }

        unimplemented(result);
!!!38090423.java!!!	setFacilityLock(inout facility : String, inout lockEnabled : boolean, inout pin : String, in serviceClass : int, inout result : Message) : void
        setFacilityLockForApp(facility, lockEnabled, pin, serviceClass, null, result);
!!!38090551.java!!!	setFacilityLockForApp(inout facility : String, inout lockEnabled : boolean, inout pin : String, in serviceClass : int, inout appId : String, inout result : Message) : void
        if (facility != null &&
                facility.equals(CommandsInterface.CB_FACILITY_BA_SIM)) {
            if (pin != null && pin.equals(mPinCode)) {
                Rlog.i(LOG_TAG, "[SimCmd] setFacilityLock: pin is valid");
                mSimLockEnabled = lockEnabled;

                resultSuccess(result, null);

                return;
            }

            Rlog.i(LOG_TAG, "[SimCmd] setFacilityLock: pin failed!");

            CommandException ex = new CommandException(
                    CommandException.Error.GENERIC_FAILURE);
            resultFail(result, null, ex);

            return;
        }  else if (facility != null &&
                facility.equals(CommandsInterface.CB_FACILITY_BA_FD)) {
            if (pin != null && pin.equals(mPin2Code)) {
                Rlog.i(LOG_TAG, "[SimCmd] setFacilityLock: pin2 is valid");
                mSimFdnEnabled = lockEnabled;

                resultSuccess(result, null);

                return;
            }

            Rlog.i(LOG_TAG, "[SimCmd] setFacilityLock: pin2 failed!");

            CommandException ex = new CommandException(
                    CommandException.Error.GENERIC_FAILURE);
            resultFail(result, null, ex);

            return;
        }

        unimplemented(result);
!!!38090679.java!!!	supplyNetworkDepersonalization(inout netpin : String, inout result : Message) : void
        unimplemented(result);
!!!38090807.java!!!	getCurrentCalls(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getCurrentCalls(result);
        if ((mState == RadioState.RADIO_ON) && !isSimLocked()) {
            //Rlog.i("GSM", "[SimCmds] getCurrentCalls");
            resultSuccess(result, simulatedCallState.getDriverCalls());
        } else {
            //Rlog.i("GSM", "[SimCmds] getCurrentCalls: RADIO_OFF or SIM not ready!");
            resultFail(result, null,
                new CommandException(CommandException.Error.RADIO_NOT_AVAILABLE));
        }
!!!38090935.java!!!	getPDPContextList(inout result : Message) : void
        getDataCallList(result);
!!!38091063.java!!!	getDataCallList(inout result : Message) : void
        resultSuccess(result, new ArrayList<DataCallResponse>(0));
!!!38091191.java!!!	dial(inout address : String, in clirMode : int, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().dial(address, clirMode, result);
        simulatedCallState.onDial(address);

        resultSuccess(result, null);
!!!38091319.java!!!	dial(inout address : String, in clirMode : int, inout uusInfo : UUSInfo, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().dial(address, clirMode, uusInfo, result);
        simulatedCallState.onDial(address);

        resultSuccess(result, null);
!!!38091447.java!!!	getIMSI(inout result : Message) : void
        getIMSIForApp(null, result);
!!!38091575.java!!!	getIMSIForApp(inout aid : String, inout result : Message) : void
        resultSuccess(result, "012345678901234");
!!!38091703.java!!!	setIMEI(inout imei : String) : void
        mImei = imei;
!!!38091831.java!!!	getIMEI(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getIMEI(result);
        resultSuccess(result, mImei != null ? mImei : FAKE_IMEI);
!!!38091959.java!!!	setIMEISV(inout imeisv : String) : void
        mImeiSv = imeisv;
!!!38092087.java!!!	getIMEISV(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getIMEISV(result);
        resultSuccess(result, mImeiSv != null ? mImeiSv : FAKE_IMEISV);
!!!38092215.java!!!	hangupConnection(in gsmIndex : int, inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('1', (char)('0'+gsmIndex));

        if (!success){
            Rlog.i("GSM", "[SimCmd] hangupConnection: resultFail");
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            Rlog.i("GSM", "[SimCmd] hangupConnection: resultSuccess");
            resultSuccess(result, null);
        }
!!!38092343.java!!!	hangupWaitingOrBackground(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('0', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!38092471.java!!!	hangupForegroundResumeBackground(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('1', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!38092599.java!!!	switchWaitingOrHoldingAndActive(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('2', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!38092727.java!!!	conference(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('3', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!38092855.java!!!	explicitCallTransfer(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('4', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!38092983.java!!!	separateConnection(in gsmIndex : int, inout result : Message) : void
        boolean success;

        char ch = (char)(gsmIndex + '0');
        success = simulatedCallState.onChld('2', ch);

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!38093111.java!!!	acceptCall(inout result : Message) : void
        boolean success;

        SimulatedCommandsVerifier.getInstance().acceptCall(result);
        success = simulatedCallState.onAnswer();

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!38093239.java!!!	rejectCall(inout result : Message) : void
        boolean success;

        success = simulatedCallState.onChld('0', '\0');

        if (!success){
            resultFail(result, null, new RuntimeException("Hangup Error"));
        } else {
            resultSuccess(result, null);
        }
!!!38093367.java!!!	getLastCallFailCause(inout result : Message) : void
        LastCallFailCause mFailCause = new LastCallFailCause();
        mFailCause.causeCode = mNextCallFailCause;
        resultSuccess(result, mFailCause);
!!!38093495.java!!!	getLastPdpFailCause(inout result : Message) : void
        unimplemented(result);
!!!38093623.java!!!	getLastDataCallFailCause(inout result : Message) : void
        //
        unimplemented(result);
!!!38093751.java!!!	setMute(inout enableMute : boolean, inout result : Message) : void
unimplemented(result);
!!!38093879.java!!!	getMute(inout result : Message) : void
unimplemented(result);
!!!38094007.java!!!	setSignalStrength(inout signalStrength : SignalStrength) : void
        mSignalStrength = signalStrength;
!!!38094135.java!!!	getSignalStrength(inout result : Message) : void

        if (mSignalStrength == null) {
            mSignalStrength = new SignalStrength(
                20, // gsmSignalStrength
                0,  // gsmBitErrorRate
                -1, // cdmaDbm
                -1, // cdmaEcio
                -1, // evdoDbm
                -1, // evdoEcio
                -1, // evdoSnr
                99, // lteSignalStrength
                SignalStrength.INVALID,     // lteRsrp
                SignalStrength.INVALID,     // lteRsrq
                SignalStrength.INVALID,     // lteRssnr
                SignalStrength.INVALID,     // lteCqi
                SignalStrength.INVALID,     // tdScdmaRscp
                true                        // gsmFlag
            );
        }

        resultSuccess(result, mSignalStrength);
!!!38094263.java!!!	setBandMode(in bandMode : int, inout result : Message) : void
        resultSuccess(result, null);
!!!38094391.java!!!	queryAvailableBandMode(inout result : Message) : void
        int ret[] = new int [4];

        ret[0] = 4;
        ret[1] = Phone.BM_US_BAND;
        ret[2] = Phone.BM_JPN_BAND;
        ret[3] = Phone.BM_AUS_BAND;

        resultSuccess(result, ret);
!!!38094519.java!!!	sendTerminalResponse(inout contents : String, inout response : Message) : void
        resultSuccess(response, null);
!!!38094647.java!!!	sendEnvelope(inout contents : String, inout response : Message) : void
        resultSuccess(response, null);
!!!38094775.java!!!	sendEnvelopeWithStatus(inout contents : String, inout response : Message) : void
        resultSuccess(response, null);
!!!38094903.java!!!	handleCallSetupRequestFromSim(inout accept : boolean, inout response : Message) : void
        resultSuccess(response, null);
!!!38095031.java!!!	setVoiceRadioTech(in voiceRadioTech : int) : void
        mVoiceRadioTech = voiceRadioTech;
!!!38095159.java!!!	setVoiceRegState(in voiceRegState : int) : void
        mVoiceRegState = voiceRegState;
!!!38095287.java!!!	getVoiceRegistrationState(inout result : Message) : void
        mGetVoiceRegistrationStateCallCount.incrementAndGet();
        String ret[] = new String[14];

        ret[0] = Integer.toString(mVoiceRegState);
        ret[3] = Integer.toString(mVoiceRadioTech);

        resultSuccess(result, ret);
!!!38095415.java!!!	getGetVoiceRegistrationStateCallCount() : int
        return mGetVoiceRegistrationStateCallCount.get();
!!!38095543.java!!!	setDataRadioTech(in radioTech : int) : void
        mDataRadioTech = radioTech;
!!!38095671.java!!!	setDataRegState(in dataRegState : int) : void
        mDataRegState = dataRegState;
!!!38095799.java!!!	getDataRegistrationState(inout result : Message) : void
        mGetDataRegistrationStateCallCount.incrementAndGet();
        String ret[] = new String[11];

        ret[0] = Integer.toString(mDataRegState);
        ret[3] = Integer.toString(mDataRadioTech);

        resultSuccess(result, ret);
!!!38095927.java!!!	getGetDataRegistrationStateCallCount() : int
        return mGetDataRegistrationStateCallCount.get();
!!!38096055.java!!!	getOperator(inout result : Message) : void
        mGetOperatorCallCount.incrementAndGet();
        String[] ret = new String[3];

        ret[0] = FAKE_LONG_NAME;
        ret[1] = FAKE_SHORT_NAME;
        ret[2] = FAKE_MCC_MNC;

        resultSuccess(result, ret);
!!!38096183.java!!!	getGetOperatorCallCount() : int
        final int count = mGetOperatorCallCount.get();
        return mGetOperatorCallCount.get();
!!!38096311.java!!!	sendDtmf(in c : char, inout result : Message) : void
        resultSuccess(result, null);
!!!38096439.java!!!	startDtmf(in c : char, inout result : Message) : void
        resultSuccess(result, null);
!!!38096567.java!!!	stopDtmf(inout result : Message) : void
        resultSuccess(result, null);
!!!38096695.java!!!	sendBurstDtmf(inout dtmfString : String, in on : int, in off : int, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().sendBurstDtmf(dtmfString, on, off, result);
        resultSuccess(result, null);
!!!38096823.java!!!	sendSMS(inout smscPDU : String, inout pdu : String, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().sendSMS(smscPDU, pdu, result);
        resultSuccess(result, new SmsResponse(0 /*messageRef*/, null, 0));
!!!38096951.java!!!	sendSMSExpectMore(inout smscPDU : String, inout pdu : String, inout result : Message) : void
        unimplemented(result);
!!!38097079.java!!!	deleteSmsOnSim(in index : int, inout response : Message) : void
        Rlog.d(LOG_TAG, "Delete message at index " + index);
        unimplemented(response);
!!!38097207.java!!!	deleteSmsOnRuim(in index : int, inout response : Message) : void
        Rlog.d(LOG_TAG, "Delete RUIM message at index " + index);
        unimplemented(response);
!!!38097335.java!!!	writeSmsToSim(in status : int, inout smsc : String, inout pdu : String, inout response : Message) : void
        Rlog.d(LOG_TAG, "Write SMS to SIM with status " + status);
        unimplemented(response);
!!!38097463.java!!!	writeSmsToRuim(in status : int, inout pdu : String, inout response : Message) : void
        Rlog.d(LOG_TAG, "Write SMS to RUIM with status " + status);
        unimplemented(response);
!!!38097591.java!!!	setDataCallResponse(in success : boolean, in dcResponse : DataCallResponse) : void
        mDcResponse = dcResponse;
        mDcSuccess = success;
!!!38097719.java!!!	triggerNITZupdate(inout NITZStr : String) : void
        if (NITZStr != null) {
            mNITZTimeRegistrant.notifyRegistrant(new AsyncResult (null, new Object[]{NITZStr,
                    SystemClock.elapsedRealtime()}, null));
        }
!!!38097847.java!!!	setupDataCall(in radioTechnology : int, in profile : int, inout apn : String, inout user : String, inout password : String, in authType : int, inout protocol : String, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, profile, apn, user,
                password, authType, protocol, result);

        if (mDcResponse == null) {
            mDcResponse = new DataCallResponse();
            mDcResponse.version = 11;
            mDcResponse.status = 0;
            mDcResponse.suggestedRetryTime = -1;
            mDcResponse.cid = 1;
            mDcResponse.active = 2;
            mDcResponse.type = "IP";
            mDcResponse.ifname = "rmnet_data7";
            mDcResponse.mtu = 1440;
            mDcResponse.addresses = new String[]{"12.34.56.78"};
            mDcResponse.dnses = new String[]{"98.76.54.32"};
            mDcResponse.gateways = new String[]{"11.22.33.44"};
            mDcResponse.pcscf = new String[]{};
        }

        if (mDcSuccess) {
            resultSuccess(result, mDcResponse);
        } else {
            resultFail(result, mDcResponse, new RuntimeException("Setup data call failed!"));
        }
!!!38097975.java!!!	deactivateDataCall(in cid : int, in reason : int, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().deactivateDataCall(cid, reason, result);
        resultSuccess(result, null);
!!!38098103.java!!!	setPreferredNetworkType(in networkType : int, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().setPreferredNetworkType(networkType, result);
        mNetworkType = networkType;
        resultSuccess(result, null);
!!!38098231.java!!!	getPreferredNetworkType(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getPreferredNetworkType(result);
        int ret[] = new int[1];

        ret[0] = mNetworkType;
        resultSuccess(result, ret);
!!!38098359.java!!!	getNeighboringCids(inout result : Message) : void
        int ret[] = new int[7];

        ret[0] = 6;
        for (int i = 1; i<7; i++) {
            ret[i] = i;
        }
        resultSuccess(result, ret);
!!!38098487.java!!!	setLocationUpdates(inout enable : boolean, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().setLocationUpdates(enable, response);
        resultSuccess(response, null);
!!!38098615.java!!!	getSmscAddress(inout result : Message) : void
        unimplemented(result);
!!!38098743.java!!!	setSmscAddress(inout address : String, inout result : Message) : void
        unimplemented(result);
!!!38098871.java!!!	reportSmsMemoryStatus(inout available : boolean, inout result : Message) : void
        resultSuccess(result, null);
        SimulatedCommandsVerifier.getInstance().reportSmsMemoryStatus(available, result);
!!!38098999.java!!!	reportStkServiceIsRunning(inout result : Message) : void
        resultSuccess(result, null);
!!!38099127.java!!!	getCdmaSubscriptionSource(inout result : Message) : void
        unimplemented(result);
!!!38099255.java!!!	isSimLocked() : boolean
        if (mSimLockedState != SimLockState.NONE) {
            return true;
        }
        return false;
!!!38099383.java!!!	setRadioPower(inout on : boolean, inout result : Message) : void
        if(on) {
            setRadioState(RadioState.RADIO_ON);
        } else {
            setRadioState(RadioState.RADIO_OFF);
        }
!!!38099511.java!!!	acknowledgeLastIncomingGsmSms(inout success : boolean, in cause : int, inout result : Message) : void
        unimplemented(result);
        SimulatedCommandsVerifier.getInstance().
                acknowledgeLastIncomingGsmSms(success, cause, result);
!!!38099639.java!!!	acknowledgeLastIncomingCdmaSms(inout success : boolean, in cause : int, inout result : Message) : void
        unimplemented(result);
!!!38099767.java!!!	acknowledgeIncomingGsmSmsWithPdu(inout success : boolean, inout ackPdu : String, inout result : Message) : void
        unimplemented(result);
!!!38099895.java!!!	iccIO(in command : int, in fileid : int, inout path : String, in p1 : int, in p2 : int, in p3 : int, inout data : String, inout pin2 : String, inout response : Message) : void
        iccIOForApp(command, fileid, path, p1, p2, p3, data, pin2, null, response);
!!!38100023.java!!!	iccIOForApp(in command : int, in fileid : int, inout path : String, in p1 : int, in p2 : int, in p3 : int, inout data : String, inout pin2 : String, inout aid : String, inout result : Message) : void
        unimplemented(result);
!!!38100151.java!!!	queryCLIP(inout response : Message) : void
 unimplemented(response);
!!!38100279.java!!!	getCLIR(inout result : Message) : void
unimplemented(result);
!!!38100407.java!!!	setCLIR(in clirMode : int, inout result : Message) : void
unimplemented(result);
!!!38100535.java!!!	queryCallWaiting(in serviceClass : int, inout response : Message) : void
        unimplemented(response);
!!!38100663.java!!!	setCallWaiting(inout enable : boolean, in serviceClass : int, inout response : Message) : void
        unimplemented(response);
!!!38100791.java!!!	setCallForward(in action : int, in cfReason : int, in serviceClass : int, inout number : String, in timeSeconds : int, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().setCallForward(action, cfReason, serviceClass,
                number, timeSeconds, result);
        resultSuccess(result, null);
!!!38100919.java!!!	queryCallForwardStatus(in cfReason : int, in serviceClass : int, inout number : String, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().queryCallForwardStatus(cfReason, serviceClass,
                number, result);
        resultSuccess(result, null);
!!!38101047.java!!!	setNetworkSelectionModeAutomatic(inout result : Message) : void
unimplemented(result);
!!!38101175.java!!!	exitEmergencyCallbackMode(inout result : Message) : void
unimplemented(result);
!!!38101303.java!!!	setNetworkSelectionModeManual(inout operatorNumeric : String, inout result : Message) : void
unimplemented(result);
!!!38101431.java!!!	getNetworkSelectionMode(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getNetworkSelectionMode(result);
        getNetworkSelectionModeCallCount.incrementAndGet();
        int ret[] = new int[1];

        ret[0] = 0;
        resultSuccess(result, ret);
!!!38101559.java!!!	getGetNetworkSelectionModeCallCount() : int
        return getNetworkSelectionModeCallCount.get();
!!!38101687.java!!!	getAvailableNetworks(inout result : Message) : void
unimplemented(result);
!!!38101815.java!!!	getBasebandVersion(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getBasebandVersion(result);
        resultSuccess(result, "SimulatedCommands");
!!!38101943.java!!!	triggerIncomingStkCcAlpha(inout alphaString : String) : void
        if (mCatCcAlphaRegistrant != null) {
            mCatCcAlphaRegistrant.notifyResult(alphaString);
        }
!!!38102071.java!!!	sendStkCcAplha(inout alphaString : String) : void
        triggerIncomingStkCcAlpha(alphaString);
!!!38102199.java!!!	triggerIncomingUssd(inout statusCode : String, inout message : String) : void
        if (mUSSDRegistrant != null) {
            String[] result = {statusCode, message};
            mUSSDRegistrant.notifyResult(result);
        }
!!!38102327.java!!!	sendUSSD(inout ussdString : String, inout result : Message) : void

        // We simulate this particular sequence
        if (ussdString.equals("#646#")) {
            resultSuccess(result, null);

            // 0 == USSD-Notify
            triggerIncomingUssd("0", "You have NNN minutes remaining.");
        } else {
            resultSuccess(result, null);

            triggerIncomingUssd("0", "All Done");
        }
!!!38102455.java!!!	cancelPendingUssd(inout response : Message) : void
        resultSuccess(response, null);
!!!38102583.java!!!	resetRadio(inout result : Message) : void
        unimplemented(result);
!!!38102711.java!!!	invokeOemRilRequestRaw(inout data : byte, inout response : Message) : void
        // Just echo back data
        if (response != null) {
            AsyncResult.forMessage(response).result = data;
            response.sendToTarget();
        }
!!!38102839.java!!!	invokeOemRilRequestStrings(inout strings : String, inout response : Message) : void
        // Just echo back data
        if (response != null) {
            AsyncResult.forMessage(response).result = strings;
            response.sendToTarget();
        }
!!!38102967.java!!!	triggerRing(inout number : String) : void
        simulatedCallState.triggerRing(number);
        mCallStateRegistrants.notifyRegistrants();
!!!38103095.java!!!	progressConnectingCallState() : void
        simulatedCallState.progressConnectingCallState();
        mCallStateRegistrants.notifyRegistrants();
!!!38103223.java!!!	progressConnectingToActive() : void
        simulatedCallState.progressConnectingToActive();
        mCallStateRegistrants.notifyRegistrants();
!!!38103351.java!!!	setAutoProgressConnectingCall(inout b : boolean) : void
        simulatedCallState.setAutoProgressConnectingCall(b);
!!!38103479.java!!!	setNextDialFailImmediately(inout b : boolean) : void
        simulatedCallState.setNextDialFailImmediately(b);
!!!38103607.java!!!	setNextCallFailCause(in gsmCause : int) : void
        mNextCallFailCause = gsmCause;
!!!38103735.java!!!	triggerHangupForeground() : void
        simulatedCallState.triggerHangupForeground();
        mCallStateRegistrants.notifyRegistrants();
!!!38103863.java!!!	triggerHangupBackground() : void
        simulatedCallState.triggerHangupBackground();
        mCallStateRegistrants.notifyRegistrants();
!!!38103991.java!!!	triggerSsn(in type : int, in code : int) : void
        SuppServiceNotification not = new SuppServiceNotification();
        not.notificationType = type;
        not.code = code;
        mSsnRegistrant.notifyRegistrant(new AsyncResult(null, not, null));
!!!38104119.java!!!	shutdown() : void
        setRadioState(RadioState.RADIO_UNAVAILABLE);
        Looper looper = mHandlerThread.getLooper();
        if (looper != null) {
            looper.quit();
        }
!!!38104247.java!!!	triggerHangupAll() : void
        simulatedCallState.triggerHangupAll();
        mCallStateRegistrants.notifyRegistrants();
!!!38104375.java!!!	triggerIncomingSMS(inout message : String) : void
        //TODO
!!!38104503.java!!!	pauseResponses() : void
        mPausedResponseCount++;
!!!38104631.java!!!	resumeResponses() : void
        mPausedResponseCount--;

        if (mPausedResponseCount == 0) {
            for (int i = 0, s = mPausedResponses.size(); i < s ; i++) {
                mPausedResponses.get(i).sendToTarget();
            }
            mPausedResponses.clear();
        } else {
            Rlog.e("GSM", "SimulatedCommands.resumeResponses < 0");
        }
!!!38104759.java!!!	unimplemented(inout result : Message) : void
        if (result != null) {
            AsyncResult.forMessage(result).exception
                = new RuntimeException("Unimplemented");

            if (mPausedResponseCount > 0) {
                mPausedResponses.add(result);
            } else {
                result.sendToTarget();
            }
        }
!!!38104887.java!!!	resultSuccess(inout result : Message, inout ret : Object) : void
        if (result != null) {
            AsyncResult.forMessage(result).result = ret;
            if (mPausedResponseCount > 0) {
                mPausedResponses.add(result);
            } else {
                result.sendToTarget();
            }
        }
!!!38105015.java!!!	resultFail(inout result : Message, inout ret : Object, inout tr : Throwable) : void
        if (result != null) {
            AsyncResult.forMessage(result, ret, tr);
            if (mPausedResponseCount > 0) {
                mPausedResponses.add(result);
            } else {
                result.sendToTarget();
            }
        }
!!!38105143.java!!!	getDeviceIdentity(inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().getDeviceIdentity(response);
        resultSuccess(response, new String[] {FAKE_IMEI, FAKE_IMEISV, FAKE_ESN, FAKE_MEID});
!!!38105271.java!!!	getCDMASubscription(inout result : Message) : void
        String ret[] = new String[5];
        ret[0] = "123";
        ret[1] = "456";
        ret[2] = "789";
        ret[3] = "234";
        ret[4] = "345";
        resultSuccess(result, ret);
!!!38105399.java!!!	setCdmaSubscriptionSource(in cdmaSubscriptionType : int, inout response : Message) : void
        unimplemented(response);
!!!38105527.java!!!	queryCdmaRoamingPreference(inout response : Message) : void
        unimplemented(response);
!!!38105655.java!!!	setCdmaRoamingPreference(in cdmaRoamingType : int, inout response : Message) : void
        unimplemented(response);
!!!38105911.java!!!	getPreferredVoicePrivacy(inout result : Message) : void
        unimplemented(result);
!!!38106039.java!!!	setPreferredVoicePrivacy(inout enable : boolean, inout result : Message) : void
        unimplemented(result);
!!!38106167.java!!!	setTTYMode(in ttyMode : int, inout response : Message) : void
        Rlog.w(LOG_TAG, "Not implemented in SimulatedCommands");
        unimplemented(response);
!!!38106295.java!!!	queryTTYMode(inout response : Message) : void
        unimplemented(response);
!!!38106423.java!!!	sendCDMAFeatureCode(inout FeatureCode : String, inout response : Message) : void
        unimplemented(response);
!!!38106551.java!!!	sendCdmaSms(inout pdu : byte, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().sendCdmaSms(pdu, response);
        resultSuccess(response, null);
!!!38106679.java!!!	setCdmaBroadcastActivation(inout activate : boolean, inout response : Message) : void
        unimplemented(response);

!!!38106807.java!!!	getCdmaBroadcastConfig(inout response : Message) : void
        unimplemented(response);

!!!38106935.java!!!	setCdmaBroadcastConfig(inout configs : CdmaSmsBroadcastConfigInfo, inout response : Message) : void
        unimplemented(response);
!!!38107063.java!!!	forceDataDormancy(inout response : Message) : void
        unimplemented(response);
!!!38107191.java!!!	setGsmBroadcastActivation(inout activate : boolean, inout response : Message) : void
        unimplemented(response);
!!!38107319.java!!!	setGsmBroadcastConfig(inout config : SmsBroadcastConfigInfo, inout response : Message) : void
        unimplemented(response);
!!!38107447.java!!!	getGsmBroadcastConfig(inout response : Message) : void
        unimplemented(response);
!!!38107575.java!!!	supplyIccPinForApp(inout pin : String, inout aid : String, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().supplyIccPinForApp(pin, aid, response);
        if (mPinCode != null && mPinCode.equals(pin)) {
            resultSuccess(response, null);
            return;
        }

        Rlog.i(LOG_TAG, "[SimCmd] supplyIccPinForApp: pin failed!");
        CommandException ex = new CommandException(
                CommandException.Error.PASSWORD_INCORRECT);
        resultFail(response, new int[]{
                (--mPin1attemptsRemaining < 0) ? 0 : mPin1attemptsRemaining}, ex);
!!!38107703.java!!!	supplyIccPukForApp(inout puk : String, inout newPin : String, inout aid : String, inout response : Message) : void
        unimplemented(response);
!!!38107831.java!!!	supplyIccPin2ForApp(inout pin2 : String, inout aid : String, inout response : Message) : void
        unimplemented(response);
!!!38107959.java!!!	supplyIccPuk2ForApp(inout puk2 : String, inout newPin2 : String, inout aid : String, inout response : Message) : void
        unimplemented(response);
!!!38108087.java!!!	changeIccPinForApp(inout oldPin : String, inout newPin : String, inout aidPtr : String, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().changeIccPinForApp(oldPin, newPin, aidPtr,
                response);
        changeIccPin(oldPin, newPin, response);
!!!38108215.java!!!	changeIccPin2ForApp(inout oldPin2 : String, inout newPin2 : String, inout aidPtr : String, inout response : Message) : void
        unimplemented(response);
!!!38108343.java!!!	requestIsimAuthentication(inout nonce : String, inout response : Message) : void
        unimplemented(response);
!!!38108471.java!!!	requestIccSimAuthentication(in authContext : int, inout data : String, inout aid : String, inout response : Message) : void
        unimplemented(response);
!!!38108599.java!!!	getVoiceRadioTechnology(inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().getVoiceRadioTechnology(response);
        int ret[] = new int[1];
        ret[0] = mVoiceRadioTech;
        resultSuccess(response, ret);
!!!38108727.java!!!	setCellInfoList(inout list : List<CellInfo>) : void
        mCellInfoList = list;
!!!38108855.java!!!	getCellInfoList(inout response : Message) : void
        if (mCellInfoList == null) {
            Parcel p = Parcel.obtain();
            p.writeInt(1);
            p.writeInt(1);
            p.writeInt(2);
            p.writeLong(1453510289108L);
            p.writeInt(310);
            p.writeInt(260);
            p.writeInt(123);
            p.writeInt(456);
            p.writeInt(99);
            p.writeInt(3);
            p.setDataPosition(0);

            CellInfoGsm cellInfo = CellInfoGsm.CREATOR.createFromParcel(p);

            ArrayList<CellInfo> mCellInfoList = new ArrayList();
            mCellInfoList.add(cellInfo);
        }

        resultSuccess(response, mCellInfoList);
!!!38108983.java!!!	getRilVersion() : int
        return 11;
!!!38109111.java!!!	setCellInfoListRate(in rateInMillis : int, inout response : Message) : void
        unimplemented(response);
!!!38109495.java!!!	setImsRegistrationState(inout regState : int) : void
        mImsRegState = regState;
!!!38109623.java!!!	getImsRegistrationState(inout response : Message) : void
        if (mImsRegState == null) {
            mImsRegState = new int[]{1, PhoneConstants.PHONE_TYPE_NONE};
        }

        resultSuccess(response, mImsRegState);
!!!38109751.java!!!	sendImsCdmaSms(inout pdu : byte, in retry : int, in messageRef : int, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().sendImsCdmaSms(pdu, retry, messageRef, response);
        resultSuccess(response, new SmsResponse(0 /*messageRef*/, null, 0));
!!!38109879.java!!!	sendImsGsmSms(inout smscPDU : String, inout pdu : String, in retry : int, in messageRef : int, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().sendImsGsmSms(smscPDU, pdu, retry, messageRef,
                response);
        resultSuccess(response, new SmsResponse(0 /*messageRef*/, null, 0));
!!!38110007.java!!!	iccOpenLogicalChannel(inout AID : String, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().iccOpenLogicalChannel(AID, response);
        Object result = new int[]{mChannelId};
        resultSuccess(response, result);
!!!38110135.java!!!	iccCloseLogicalChannel(in channel : int, inout response : Message) : void
        unimplemented(response);
!!!38110263.java!!!	iccTransmitApduLogicalChannel(in channel : int, in cla : int, in instruction : int, in p1 : int, in p2 : int, in p3 : int, inout data : String, inout response : Message) : void
        SimulatedCommandsVerifier.getInstance().iccTransmitApduLogicalChannel(channel, cla,
                instruction, p1, p2, p3, data, response);
        if(mIccIoResultForApduLogicalChannel!=null) {
            resultSuccess(response, mIccIoResultForApduLogicalChannel);
        }else {
            resultFail(response, null, new RuntimeException("IccIoResult not set"));
        }
!!!38110391.java!!!	iccTransmitApduBasicChannel(in cla : int, in instruction : int, in p1 : int, in p2 : int, in p3 : int, inout data : String, inout response : Message) : void
        unimplemented(response);
!!!38110519.java!!!	nvReadItem(in itemID : int, inout response : Message) : void
        unimplemented(response);
!!!38110647.java!!!	nvWriteItem(in itemID : int, inout itemValue : String, inout response : Message) : void
        unimplemented(response);
!!!38110775.java!!!	nvWriteCdmaPrl(inout preferredRoamingList : byte, inout response : Message) : void
        unimplemented(response);
!!!38110903.java!!!	nvResetConfig(in resetType : int, inout response : Message) : void
        unimplemented(response);
!!!38111031.java!!!	getHardwareConfig(inout result : Message) : void
        unimplemented(result);
!!!38111159.java!!!	requestShutdown(inout result : Message) : void
        setRadioState(RadioState.RADIO_UNAVAILABLE);
!!!38111287.java!!!	startLceService(in report_interval_ms : int, inout pullMode : boolean, inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().startLceService(report_interval_ms, pullMode,
                result);
        unimplemented(result);
!!!38111415.java!!!	stopLceService(inout result : Message) : void
        unimplemented(result);
!!!38111543.java!!!	pullLceData(inout result : Message) : void
        unimplemented(result);
!!!38111671.java!!!	getModemActivityInfo(inout result : Message) : void
        unimplemented(result);
!!!38111799.java!!!	getRadioCapability(inout result : Message) : void
        SimulatedCommandsVerifier.getInstance().getRadioCapability(result);
        resultSuccess(result, new RadioCapability(0, 0, 0, 0xFFFF, null, 0));
!!!38111927.java!!!	notifySmsStatus(inout result : Object) : void
        if (mSmsStatusRegistrant != null) {
            mSmsStatusRegistrant.notifyRegistrant(new AsyncResult(null, result, null));
        }
!!!38112055.java!!!	notifyGsmBroadcastSms(inout result : Object) : void
        if (mGsmBroadcastSmsRegistrant != null) {
            mGsmBroadcastSmsRegistrant.notifyRegistrant(new AsyncResult(null, result, null));
        }
!!!38112183.java!!!	notifyIccSmsFull() : void
        if (mIccSmsFullRegistrant != null) {
            mIccSmsFullRegistrant.notifyRegistrant();
        }
!!!38112311.java!!!	notifyEmergencyCallbackMode() : void
        if (mEmergencyCallbackModeRegistrant != null) {
            mEmergencyCallbackModeRegistrant.notifyRegistrant();
        }
!!!38112439.java!!!	setEmergencyCallbackMode(inout h : Handler, in what : int, inout obj : Object) : void
        SimulatedCommandsVerifier.getInstance().setEmergencyCallbackMode(h, what, obj);
        super.setEmergencyCallbackMode(h, what, obj);
!!!38112567.java!!!	notifyExitEmergencyCallbackMode() : void
        if (mExitEmergencyCallbackModeRegistrants != null) {
            mExitEmergencyCallbackModeRegistrants.notifyRegistrants(
                    new AsyncResult (null, null, null));
        }
!!!38112695.java!!!	notifyImsNetworkStateChanged() : void
        if(mImsNetworkStateChangedRegistrants != null) {
            mImsNetworkStateChangedRegistrants.notifyRegistrants();
        }
!!!38112823.java!!!	registerForExitEmergencyCallbackMode(inout h : Handler, in what : int, inout obj : Object) : void
        SimulatedCommandsVerifier.getInstance().registerForExitEmergencyCallbackMode(h, what, obj);
        super.registerForExitEmergencyCallbackMode(h, what, obj);
!!!38112951.java!!!	notifyRadioOn() : void
        mOnRegistrants.notifyRegistrants();
!!!38113079.java!!!	notifyVoiceNetworkStateChanged() : void
        mVoiceNetworkStateRegistrants.notifyRegistrants();
!!!38113207.java!!!	notifyOtaProvisionStatusChanged() : void
        if (mOtaProvisionRegistrants != null) {
            int ret[] = new int[1];
            ret[0] = Phone.CDMA_OTA_PROVISION_STATUS_COMMITTED;
            mOtaProvisionRegistrants.notifyRegistrants(new AsyncResult(null, ret, null));
        }
!!!38113335.java!!!	notifySignalStrength() : void
        if (mSignalStrength == null) {
            mSignalStrength = new SignalStrength(
                    20, // gsmSignalStrength
                    0,  // gsmBitErrorRate
                    -1, // cdmaDbm
                    -1, // cdmaEcio
                    -1, // evdoDbm
                    -1, // evdoEcio
                    -1, // evdoSnr
                    99, // lteSignalStrength
                    SignalStrength.INVALID,     // lteRsrp
                    SignalStrength.INVALID,     // lteRsrq
                    SignalStrength.INVALID,     // lteRssnr
                    SignalStrength.INVALID,     // lteCqi
                    SignalStrength.INVALID,     // tdScdmaRscp
                    true                        // gsmFlag
            );
        }

        if (mSignalStrengthRegistrant != null) {
            mSignalStrengthRegistrant.notifyRegistrant(
                    new AsyncResult (null, mSignalStrength, null));
        }
!!!38113463.java!!!	setIccCardStatus(inout iccCardStatus : IccCardStatus) : void
        mIccCardStatus = iccCardStatus;
!!!38113591.java!!!	setIccIoResultForApduLogicalChannel(inout iccIoResult : IccIoResult) : void
        mIccIoResultForApduLogicalChannel = iccIoResult;
!!!38113719.java!!!	setOpenChannelId(in channelId : int) : void
        mChannelId = channelId;
!!!38113847.java!!!	setPin1RemainingAttempt(in pin1attemptsRemaining : int) : void
        mPin1attemptsRemaining = pin1attemptsRemaining;
!!!38113975.java!!!	setDataAllowed(inout allowed : boolean, inout result : Message) : void
        log("setDataAllowed = " + allowed);
        mAllowed.set(allowed);
        resultSuccess(result, null);
!!!38114103.java!!!	isDataAllowed() : boolean
        return mAllowed.get();
