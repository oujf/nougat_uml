class CallManagerTest
!!!38273975.java!!!	setUp() : void
        super.setUp(this.getClass().getSimpleName());
        restoreInstance(CallManager.class, "INSTANCE", null);
        /* Mock Phone and Call, initially all calls are idle */
        doReturn(ServiceState.STATE_IN_SERVICE).when(mServiceState).getState();
        doReturn(mBgCall).when(mPhone).getBackgroundCall();
        doReturn(mFgCall).when(mPhone).getForegroundCall();
        doReturn(mRingingCall).when(mPhone).getRingingCall();
        doReturn(mPhone).when(mBgCall).getPhone();
        doReturn(mPhone).when(mFgCall).getPhone();
        doReturn(mPhone).when(mRingingCall).getPhone();
        doReturn(Call.State.IDLE).when(mBgCall).getState();
        doReturn(Call.State.IDLE).when(mFgCall).getState();
        doReturn(Call.State.IDLE).when(mRingingCall).getState();
        doReturn(true).when(mBgCall).isIdle();
        doReturn(true).when(mFgCall).isIdle();
        doReturn(true).when(mRingingCall).isIdle();

        mCallManagerHandlerThread = new CallManagerHandlerThread(TAG);
        mCallManagerHandlerThread.start();
        waitUntilReady();
!!!38274103.java!!!	tearDown() : void
        CallManager.getInstance().unregisterPhone(mPhone);
        super.tearDown();
!!!38274231.java!!!	testSanity() : void
        assertEquals(mPhone, CallManager.getInstance().getDefaultPhone());
        assertFalse(CallManager.getInstance().hasActiveBgCall());
        assertFalse(CallManager.getInstance().hasActiveRingingCall());
        assertFalse(CallManager.getInstance().hasActiveFgCall());
        /* return the default phone if there is no any active call */
        assertEquals(mPhone, CallManager.getInstance().getRingingPhone());
        assertEquals(mPhone, CallManager.getInstance().getBgPhone());
        assertEquals(mPhone, CallManager.getInstance().getFgPhone());
!!!38274359.java!!!	testBasicDial() : void
        //verify can dial and dial function of the phone is being triggered
        CallManager.getInstance().dial(mPhone,
                PhoneNumberUtils.stripSeparators("+17005554141"), 0);
        ArgumentCaptor<String> mCaptorString = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<Integer> mCaptorInt = ArgumentCaptor.forClass(Integer.class);
        verify(mPhone, times(1)).dial(mCaptorString.capture(), mCaptorInt.capture());
        assertEquals(PhoneNumberUtils.stripSeparators("+17005554141"),
                mCaptorString.getValue());
        assertEquals(0, mCaptorInt.getValue().intValue());
!!!38274487.java!!!	testBasicAcceptCall() : void
        CallManager.getInstance().acceptCall(mRingingCall);
        verify(mPhone, times(1)).acceptCall(anyInt());
!!!38274615.java!!!	testBasicRejectCall() : void
        //verify can dial and dial function of the phone is being triggered
        CallManager.getInstance().rejectCall(mRingingCall);
        verify(mPhone, times(1)).rejectCall();
!!!38274743.java!!!	testSendDtmf() : void
        CallManager.getInstance().sendDtmf('a');
        verify(mPhone, times(0)).sendDtmf(eq('a'));

        //has active fg Call
        doReturn(false).when(mFgCall).isIdle();
        assertEquals(mFgCall, CallManager.getInstance().getActiveFgCall());
        CallManager.getInstance().sendDtmf('a');
        verify(mPhone, times(1)).sendDtmf(eq('a'));
!!!38274871.java!!!	testStartDtmf() : void
        doReturn(true).when(mFgCall).isIdle();
        assertFalse(CallManager.getInstance().startDtmf('a'));
        verify(mPhone, times(0)).startDtmf(anyChar());

        //has active fg Call
        doReturn(false).when(mFgCall).isIdle();
        assertEquals(mFgCall, CallManager.getInstance().getActiveFgCall());
        assertTrue(CallManager.getInstance().startDtmf('a'));
        verify(mPhone, times(1)).startDtmf('a');
!!!38274999.java!!!	testStopDtmf() : void
        doReturn(true).when(mFgCall).isIdle();
        CallManager.getInstance().stopDtmf();
        verify(mPhone, times(0)).stopDtmf();

        //has active fg Call
        doReturn(false).when(mFgCall).isIdle();
        assertEquals(mPhone, CallManager.getInstance().getFgPhone());
        CallManager.getInstance().stopDtmf();
        verify(mPhone, times(1)).stopDtmf();
!!!38275127.java!!!	testSendBurstDtmf() : void
        doReturn(true).when(mFgCall).isIdle();
        assertFalse(CallManager.getInstance().sendBurstDtmf("12*#", 0, 0, null));
        verify(mPhone, times(0)).sendBurstDtmf(anyString(), anyInt(), anyInt(), (Message) any());

        //has active fg Call
        doReturn(false).when(mFgCall).isIdle();
        assertTrue(CallManager.getInstance().sendBurstDtmf("12*#", 0, 0, null));
        verify(mPhone, times(1)).sendBurstDtmf("12*#", 0, 0, null);
!!!38275255.java!!!	testSetGetMute() : void
        CallManager.getInstance().setMute(false);
        verify(mPhone, times(0)).setMute(anyBoolean());

        //has active fg Call
        doReturn(false).when(mFgCall).isIdle();
        CallManager.getInstance().setMute(false);
        verify(mPhone, times(1)).setMute(false);

        CallManager.getInstance().setMute(true);
        verify(mPhone, times(1)).setMute(true);
!!!38275383.java!!!	testSwitchHoldingAndActive() : void
        /* case 1: only active call */
        doReturn(false).when(mFgCall).isIdle();
        CallManager.getInstance().switchHoldingAndActive(null);
        verify(mPhone, times(1)).switchHoldingAndActive();
        /* case 2: no active call but only held call, aka, unhold */
        doReturn(true).when(mFgCall).isIdle();
        CallManager.getInstance().switchHoldingAndActive(mBgCall);
        verify(mPhone, times(2)).switchHoldingAndActive();
        /* case 3: both active and held calls from same phone, aka, swap */
        doReturn(false).when(mFgCall).isIdle();
        CallManager.getInstance().switchHoldingAndActive(mBgCall);
        verify(mPhone, times(3)).switchHoldingAndActive();
        GsmCdmaPhone mPhoneHold = Mockito.mock(GsmCdmaPhone.class);
        /* case 4: active and held calls from different phones, aka, phone swap */
        doReturn(mPhoneHold).when(mBgCall).getPhone();
        CallManager.getInstance().switchHoldingAndActive(mBgCall);
        verify(mPhone, times(4)).switchHoldingAndActive();
        verify(mPhoneHold, times(1)).switchHoldingAndActive();
!!!38275511.java!!!	testHangupForegroundResumeBackground() : void
        CallManager.getInstance().hangupForegroundResumeBackground(mBgCall);
        /* no active fgCall */
        verify(mPhone, times(0)).switchHoldingAndActive();
        verify(mFgCall, times(0)).hangup();

        /* have active foreground call, get hanged up */
        doReturn(false).when(mFgCall).isIdle();
        CallManager.getInstance().hangupForegroundResumeBackground(mBgCall);
        verify(mFgCall, times(1)).hangup();
        verify(mPhone, times(0)).switchHoldingAndActive();

        /* mock bgcall and fgcall from different phone */
        GsmCdmaPhone mPhoneHold = Mockito.mock(GsmCdmaPhone.class);
        doReturn(mPhoneHold).when(mBgCall).getPhone();
        CallManager.getInstance().hangupForegroundResumeBackground(mBgCall);
        verify(mFgCall, times(2)).hangup();
        /* always hangup fgcall and both phone trigger swap */
        verify(mPhoneHold, times(1)).switchHoldingAndActive();
        verify(mPhone, times(1)).switchHoldingAndActive();
!!!38275639.java!!!	testFgCallActiveDial() : void
        /* set Fg/Bg Call state to active, verify CallManager Logical */
        doReturn(false).when(mFgCall).isIdle();
        doReturn(false).when(mBgCall).isIdle();
        assertTrue(CallManager.getInstance().hasActiveFgCall());
        assertTrue(CallManager.getInstance().hasActiveBgCall());
        assertTrue(CallManager.getInstance().hasActiveFgCall(mPhone.getSubId()));
        assertFalse(CallManager.getInstance().hasDisconnectedFgCall());
        /* try dial with non-idle foreground call and background call */
        CallManager.getInstance().dial(mPhone,
                PhoneNumberUtils.stripSeparators("+17005554141"), 0);
        ArgumentCaptor<String> mCaptorString = ArgumentCaptor.forClass(String.class);
        ArgumentCaptor<Integer> mCaptorInt = ArgumentCaptor.forClass(Integer.class);

        verify(mPhone, times(1)).dial(mCaptorString.capture(), mCaptorInt.capture());
        assertEquals(PhoneNumberUtils.stripSeparators("+17005554141"),
                mCaptorString.getValue());
        assertEquals(0, mCaptorInt.getValue().intValue());
!!!38275767.java!!!	testRegisterEvent() : void
        Field field = CallManager.class.getDeclaredField("EVENT_CALL_WAITING");
        field.setAccessible(true);
        int mEvent = (Integer) field.get(CallManager.getInstance());
        verify(mPhone, times(1)).registerForCallWaiting(isA(Handler.class),
                eq(mEvent), isNull());

        field = CallManager.class.getDeclaredField("EVENT_PRECISE_CALL_STATE_CHANGED");
        field.setAccessible(true);
        mEvent = (Integer) field.get(CallManager.getInstance());
        verify(mPhone, times(1)).registerForPreciseCallStateChanged(isA(Handler.class),
                eq(mEvent), isA(Object.class));

        field = CallManager.class.getDeclaredField("EVENT_RINGBACK_TONE");
        field.setAccessible(true);
        mEvent = (Integer) field.get(CallManager.getInstance());
        verify(mPhone, times(1)).registerForRingbackTone(isA(Handler.class),
                eq(mEvent), isA(Object.class));
!!!38275895.java!!!	testGetServiceState() : void
        // register for another phone
        ServiceState mSecondServiceState = mock(ServiceState.class);
        doReturn(mSecondServiceState).when(mSecondPhone).getServiceState();

        Message mRegisterPhone = mHandler.obtainMessage(PHONE_REGISTER_EVENT,
                mSecondPhone);
        setReady(false);
        mRegisterPhone.sendToTarget();

        waitUntilReady();

        // mPhone: STATE_IN_SERVICE > mPhoneSecond: state STATE_OUT_OF_SERVICE
        doReturn(ServiceState.STATE_OUT_OF_SERVICE).when(mSecondServiceState).getState();
        assertEquals(ServiceState.STATE_IN_SERVICE, CallManager.getInstance().getServiceState());

        // mPhone: STATE_IN_SERVICE > mPhoneSecond: state STATE_EMERGENCY_ONLY
        doReturn(ServiceState.STATE_EMERGENCY_ONLY).when(mSecondServiceState).getState();
        assertEquals(ServiceState.STATE_IN_SERVICE, CallManager.getInstance().getServiceState());

        // mPhone: STATE_IN_SERVICE > mPhoneSecond: state STATE_POWER_OFF
        doReturn(ServiceState.STATE_POWER_OFF).when(mSecondServiceState).getState();
        assertEquals(ServiceState.STATE_IN_SERVICE, CallManager.getInstance().getServiceState());

        // mPhone: STATE_EMERGENCY_ONLY < mPhoneSecond: state STATE_OUT_OF_SERVICE
        doReturn(ServiceState.STATE_OUT_OF_SERVICE).when(mSecondServiceState).getState();
        doReturn(ServiceState.STATE_EMERGENCY_ONLY).when(mServiceState).getState();
        assertEquals(ServiceState.STATE_OUT_OF_SERVICE,
                CallManager.getInstance().getServiceState());

        // mPhone: STATE_POWER_OFF < mPhoneSecond: state STATE_OUT_OF_SERVICE
        doReturn(ServiceState.STATE_POWER_OFF).when(mServiceState).getState();
        assertEquals(ServiceState.STATE_OUT_OF_SERVICE,
                CallManager.getInstance().getServiceState());

        /* mPhone: STATE_POWER_OFF < mPhoneSecond: state STATE_EMERGENCY_ONLY
           but OUT_OF_SERVICE will replaces EMERGENCY_ONLY and POWER_OFF */
        doReturn(ServiceState.STATE_EMERGENCY_ONLY).when(mSecondServiceState).getState();
        assertEquals(ServiceState.STATE_OUT_OF_SERVICE,
                CallManager.getInstance().getServiceState());
        CallManager.getInstance().unregisterPhone(mSecondPhone);
