class FakeContext
!!!38279991.java!!!	getPackageManager() : PackageManager
            return mPackageManager;
!!!38280119.java!!!	bindService(inout serviceIntent : Intent, inout connection : ServiceConnection, in flags : int) : boolean
            if (mServiceByServiceConnection.containsKey(connection)) {
                throw new RuntimeException("ServiceConnection already bound: " + connection);
            }
            IInterface service = mServiceByComponentName.get(serviceIntent.getComponent());
            if (service == null) {
                throw new RuntimeException("ServiceConnection not found: "
                        + serviceIntent.getComponent());
            }
            mServiceByServiceConnection.put(connection, service);
            connection.onServiceConnected(serviceIntent.getComponent(), service.asBinder());
            return true;
!!!38280247.java!!!	unbindService(inout connection : ServiceConnection) : void
            IInterface service = mServiceByServiceConnection.remove(connection);
            if (service == null) {
                throw new RuntimeException("ServiceConnection not found: " + connection);
            }
            connection.onServiceDisconnected(mComponentNameByService.get(service));
!!!38280375.java!!!	getSystemService(inout name : String) : Object
            synchronized (mSystemServices) {
                Object service = mSystemServices.get(name);
                if (service != null) return service;
            }
            switch (name) {
                case Context.TELEPHONY_SERVICE:
                    return mTelephonyManager;
                case Context.APP_OPS_SERVICE:
                    return mAppOpsManager;
                case Context.NOTIFICATION_SERVICE:
                    return mNotificationManager;
                case Context.USER_SERVICE:
                    return mUserManager;
                case Context.CARRIER_CONFIG_SERVICE:
                    return mCarrierConfigManager;
                case Context.POWER_SERVICE:
                    // PowerManager is a final class so cannot be mocked, return real service
                    return TestApplication.getAppContext().getSystemService(name);
                case Context.TELEPHONY_SUBSCRIPTION_SERVICE:
                    return mSubscriptionManager;
                case Context.WIFI_SERVICE:
                    return mWifiManager;
                case Context.ALARM_SERVICE:
                    return mAlarmManager;
                case Context.CONNECTIVITY_SERVICE:
                    return mConnectivityManager;
                case Context.USAGE_STATS_SERVICE:
                    return mUsageStatManager;
                default:
                    return null;
            }
!!!38280503.java!!!	getUserId() : int
            return 0;
!!!38280631.java!!!	getResources() : Resources
            return mResources;
!!!38280759.java!!!	getOpPackageName() : String
            return "com.android.internal.telephony";
!!!38280887.java!!!	getContentResolver() : ContentResolver
            return mContentResolver;
!!!38281143.java!!!	registerReceiver(inout receiver : BroadcastReceiver, inout filter : IntentFilter) : Intent
            return registerReceiver(receiver, filter, null, null);
!!!38281271.java!!!	registerReceiver(inout receiver : BroadcastReceiver, inout filter : IntentFilter, inout broadcastPermission : String, inout scheduler : Handler) : Intent
            return registerReceiverAsUser(receiver, null, filter, broadcastPermission, scheduler);
!!!38281399.java!!!	registerReceiverAsUser(inout receiver : BroadcastReceiver, inout user : UserHandle, inout filter : IntentFilter, inout broadcastPermission : String, inout scheduler : Handler) : Intent
            Intent result = null;
            synchronized (mBroadcastReceiversByAction) {
                for (int i = 0 ; i < filter.countActions() ; i++) {
                    mBroadcastReceiversByAction.put(filter.getAction(i), receiver);
                    if (result == null) {
                        result = mStickyBroadcastByAction.get(filter.getAction(i));
                    }
                }
            }

            return result;
!!!38281527.java!!!	sendBroadcast(inout intent : Intent) : void
            logd("sendBroadcast called for " + intent.getAction());
            synchronized (mBroadcastReceiversByAction) {
                for (BroadcastReceiver broadcastReceiver :
                        mBroadcastReceiversByAction.get(intent.getAction())) {
                    broadcastReceiver.onReceive(mContext, intent);
                }
            }
!!!38281655.java!!!	sendBroadcast(inout intent : Intent, inout receiverPermission : String) : void
            logd("sendBroadcast called for " + intent.getAction());
            sendBroadcast(intent);
!!!38281783.java!!!	sendBroadcastAsUser(inout intent : Intent, inout user : UserHandle) : void
            sendBroadcast(intent);
!!!38281911.java!!!	sendBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String) : void
            sendBroadcast(intent);
!!!38282039.java!!!	sendBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, in appOp : int) : void
            sendBroadcast(intent);
!!!38282167.java!!!	sendOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
            logd("sendOrderedBroadcastAsUser called for " + intent.getAction());
            sendBroadcast(intent);
            if (resultReceiver != null) {
                synchronized (mOrderedBroadcastReceivers) {
                    mOrderedBroadcastReceivers.put(intent, resultReceiver);
                }
            }
!!!38282295.java!!!	sendOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, in appOp : int, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
            logd("sendOrderedBroadcastAsUser called for " + intent.getAction());
            sendBroadcast(intent);
            if (resultReceiver != null) {
                synchronized (mOrderedBroadcastReceivers) {
                    mOrderedBroadcastReceivers.put(intent, resultReceiver);
                }
            }
!!!38282423.java!!!	sendOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout receiverPermission : String, in appOp : int, inout options : Bundle, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, inout initialData : String, inout initialExtras : Bundle) : void
            logd("sendOrderedBroadcastAsUser called for " + intent.getAction());
            sendBroadcast(intent);
            if (resultReceiver != null) {
                synchronized (mOrderedBroadcastReceivers) {
                    mOrderedBroadcastReceivers.put(intent, resultReceiver);
                }
            }
!!!38282551.java!!!	sendStickyBroadcast(inout intent : Intent) : void
            logd("sendStickyBroadcast called for " + intent.getAction());
            synchronized (mBroadcastReceiversByAction) {
                sendBroadcast(intent);
                mStickyBroadcastByAction.put(intent.getAction(), intent);
            }
!!!38282679.java!!!	sendStickyBroadcastAsUser(inout intent : Intent, inout ignored : UserHandle) : void
            logd("sendStickyBroadcastAsUser called for " + intent.getAction());
            sendStickyBroadcast(intent);
!!!38282807.java!!!	createPackageContextAsUser(inout packageName : String, in flags : int, inout user : UserHandle) : Context
            return this;
!!!38282935.java!!!	enforceCallingOrSelfPermission(inout permission : String, inout message : String) : void
            if (mPermissionTable.contains(permission)
                    || mPermissionTable.contains(PERMISSION_ENABLE_ALL)) {
                return;
            }
            logd("requested permission: " + permission + " got denied");
            throw new SecurityException(permission + " denied: " + message);
!!!38283063.java!!!	checkCallingOrSelfPermission(inout permission : String) : int
            return PackageManager.PERMISSION_GRANTED;
!!!38283191.java!!!	getSharedPreferences(inout name : String, in mode : int) : SharedPreferences
            return mSharedPreferences;
!!!38283319.java!!!	getPackageName() : String
            return "com.android.internal.telephony";
!!!38283447.java!!!	testMethod() : boolean
            return true;
!!!38283575.java!!!	testMethod1() : boolean
            return true;
!!!38283703.java!!!	testMethod2() : boolean
            return true;
