class GsmCdmaCallTest
!!!38287543.java!!!	setUp() : void
        super.setUp(getClass().getSimpleName());
        mCallUnderTest = new GsmCdmaCall(mCT);
!!!38287671.java!!!	tearDown() : void
        mCallUnderTest = null;
        super.tearDown();
!!!38287799.java!!!	testAttachDetach() : void
        //verify mConnections has 0 connections and is in IDLE state
        assertEquals(0, mCallUnderTest.mConnections.size());
        assertEquals(Call.State.IDLE, mCallUnderTest.getState());

        //attach
        mDriverCall.state = DriverCall.State.ACTIVE;
        mCallUnderTest.attach(mConnection1, mDriverCall);

        //verify mConnections has 1 connection and is not in idle
        assertEquals(1, mCallUnderTest.mConnections.size());
        assertEquals(Call.State.ACTIVE, mCallUnderTest.getState());

        //detach
        mCallUnderTest.detach(mConnection1);

        //verify mConnections has 0 connections and is in IDLE state
        assertEquals(0, mCallUnderTest.mConnections.size());
        assertEquals(Call.State.IDLE, mCallUnderTest.getState());
!!!38287927.java!!!	testMultiparty() : void
        //verify mConnections has 0 connections and is in IDLE state
        assertEquals(0, mCallUnderTest.mConnections.size());
        assertEquals(Call.State.IDLE, mCallUnderTest.getState());

        //verify isMultiparty is false
        assertEquals(false, mCallUnderTest.isMultiparty());

        //attach
        mDriverCall.state = DriverCall.State.ACTIVE;
        mCallUnderTest.attach(mConnection1, mDriverCall);

        //verify isMultiparty is false
        assertEquals(false, mCallUnderTest.isMultiparty());

        //attach
        mCallUnderTest.attach(mConnection2, mDriverCall);

        //verify isMultiparty is true
        assertEquals(true, mCallUnderTest.isMultiparty());
!!!38288055.java!!!	testHangup() : void
        //verify hangup calls mCT.hangup
        try {
            mCallUnderTest.hangup();
            verify(mCT).hangup(mCallUnderTest);
        } catch (Exception e) {
            fail("Exception " + e + " not expected");
        }
!!!38288183.java!!!	testConnectionDisconnected() : void
        //attach
        mDriverCall.state = DriverCall.State.ACTIVE;
        mCallUnderTest.attach(mConnection1, mDriverCall);
        mCallUnderTest.attach(mConnection2, mDriverCall);

        //both connections are active, state not change
        mCallUnderTest.connectionDisconnected(null);
        assertEquals(Call.State.ACTIVE, mCallUnderTest.getState());

        // only one attached connection get disconnected, state not changed
        doReturn(Call.State.DISCONNECTED).when(mConnection1).getState();
        mCallUnderTest.connectionDisconnected(null);
        assertEquals(Call.State.ACTIVE, mCallUnderTest.getState());

        doReturn(Call.State.DISCONNECTED).when(mConnection2).getState();
        mCallUnderTest.connectionDisconnected(null);
        assertEquals(Call.State.DISCONNECTED, mCallUnderTest.getState());
