class PhoneSwitcherTest
!!!38312247.java!!!	failAndStack(inout str : String) : void
        fail(str + "\n" + SubscriptionMonitorTest.stack());
!!!38312375.java!!!	stack() : String
        StringBuilder sb = new StringBuilder();
        for(StackTraceElement e : Thread.currentThread().getStackTrace()) {
            sb.append(e.toString()).append("\n");
        }
        return sb.toString();
!!!38313783.java!!!	waitABit() : void
        try {
            Thread.sleep(250);
        } catch (Exception e) {}
!!!38313911.java!!!	log(inout str : String) : void
        Rlog.d(LOG_TAG + " " + mTestName, str);
!!!38314039.java!!!	makeSubSpecificDefaultRequest(inout cs : ConnectivityServiceMock, in subId : int) : NetworkRequest
        NetworkCapabilities netCap = (new NetworkCapabilities()).
                addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).
                addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED).
                addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR);
        netCap.setNetworkSpecifier(Integer.toString(subId));
        return cs.requestNetwork(netCap, null, 0, new Binder(), -1);
!!!38314167.java!!!	makeSubSpecificMmsRequest(inout cs : ConnectivityServiceMock, in subId : int) : NetworkRequest
        NetworkCapabilities netCap = (new NetworkCapabilities()).
                addCapability(NetworkCapabilities.NET_CAPABILITY_MMS).
                addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED).
                addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR);
        netCap.setNetworkSpecifier(Integer.toString(subId));
        return cs.requestNetwork(netCap, null, 0, new Binder(), -1);
!!!38314295.java!!!	makeContext() : Context
        final ContextFixture contextFixture = new ContextFixture();
        String[] networkConfigString = getContext().getResources().getStringArray(
                com.android.internal.R.array.networkAttributes);
        contextFixture.putStringArrayResource(com.android.internal.R.array.networkAttributes,
                networkConfigString);
        return contextFixture.getTestDouble();
!!!38314423.java!!!	testRegister() : void
        mTestName = "testRegister";
        final int numPhones = 2;
        final int maxActivePhones = 1;
        final HandlerThread handlerThread = new HandlerThread("PhoneSwitcherTestThread");
        handlerThread.start();
        final ContextFixture contextFixture = new ContextFixture();
        String[] networkConfigString = getContext().getResources().getStringArray(
                com.android.internal.R.array.networkAttributes);
        contextFixture.putStringArrayResource(com.android.internal.R.array.networkAttributes,
                networkConfigString);
        final Context contextMock = contextFixture.getTestDouble();
        final ConnectivityServiceMock connectivityServiceMock =
                new ConnectivityServiceMock(contextMock);
        final ConnectivityManager cm =
                new ConnectivityManager(contextMock, connectivityServiceMock);
        contextFixture.setSystemService(Context.CONNECTIVITY_SERVICE, cm);
        final ITelephonyRegistry.Stub telRegistryMock = new TelephonyRegistryMock();
        final SubscriptionControllerMock subControllerMock =
                new SubscriptionControllerMock(contextMock, telRegistryMock, numPhones);
        final SimulatedCommands[] commandsInterfaces = new SimulatedCommands[numPhones];
        final PhoneMock[] phones = new PhoneMock[numPhones];
        for (int i = 0; i < numPhones; i++) {
            commandsInterfaces[i] = new SimulatedCommands();
        //    phones[i] = new PhoneMock(contextMock, commandsInterfaces[i]);
        }

        PhoneSwitcher phoneSwitcher = new PhoneSwitcher(maxActivePhones, numPhones,
                contextMock, subControllerMock, handlerThread.getLooper(), telRegistryMock,
                commandsInterfaces, phones);

        // verify nothing has been done while there are no inputs
        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed initially");
        if (phoneSwitcher.isPhoneActive(0))        fail("phone active initially");

        connectivityServiceMock.addDefaultRequest();
        waitABit();

        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed after request");
        if (phoneSwitcher.isPhoneActive(0))        fail("phone active after request");

        TestHandler testHandler = TestHandler.makeHandler();
        Object activePhoneSwitchObject = new Object();
        testHandler.setActivePhoneSwitchObject(activePhoneSwitchObject);

        testHandler.blockTilIdle();

        // not registered yet - shouldn't inc
        if (testHandler.getActivePhoneSwitchCount() != 0) {
            fail("pretest of ActivePhoneSwitchCount");
        }
        boolean threw = false;
        try {
            // should throw
            phoneSwitcher.registerForActivePhoneSwitch(2, testHandler,
                    TestHandler.ACTIVE_PHONE_SWITCH, activePhoneSwitchObject);
        } catch (IllegalArgumentException e) {
            threw = true;
        }
        if (threw == false) fail("register with bad phoneId didn't throw");

        phoneSwitcher.registerForActivePhoneSwitch(0, testHandler,
                TestHandler.ACTIVE_PHONE_SWITCH,
                activePhoneSwitchObject);
        testHandler.blockTilIdle();

        if (testHandler.getActivePhoneSwitchCount() != 1) {
            fail("post register of ActivePhoneSwitchCount not 1!");
        }

        subControllerMock.setDefaultDataSubId(0);
        testHandler.blockTilIdle();

        if (testHandler.getActivePhoneSwitchCount() != 1) {
            fail("after set of default to 0, ActivePhoneSwitchCount not 1!");
        }
        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed");

        subControllerMock.setSlotSubId(0, 0);
        waitABit();

        if (testHandler.getActivePhoneSwitchCount() != 2) {
            fail("after mapping of 0 to 0, ActivePhoneSwitchCount not 2!");
        }
        if (commandsInterfaces[0].isDataAllowed() == false) fail("data not allowed");

        // now try various things that should cause the active phone to switch:
        // 1 lose default via default sub change
        // 2 gain default via default sub change
        // 3 lose default via sub->phone change
        // 4 gain default via sub->phone change
        // 5 lose default network request
        // 6 gain subscription-specific request
        // 7 lose via sub->phone change
        // 8 gain via sub->phone change
        // 9 lose subscription-specific request
        // 10 don't switch phones when in emergency mode

        // 1 lose default via default sub change
        subControllerMock.setDefaultDataSubId(1);
        waitABit();
        if (testHandler.getActivePhoneSwitchCount() != 3) {
            fail("after set of default to 1, ActivePhoneSwitchCount not 3!");
        }
        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed");

        subControllerMock.setSlotSubId(1, 1);
        waitABit();
        if (testHandler.getActivePhoneSwitchCount() != 3) {
            fail("after mapping of 1 to 1, ActivePhoneSwitchCount not 3!");
        }
        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed");
        if (commandsInterfaces[1].isDataAllowed() == false) fail("data not allowed");

        // 2 gain default via default sub change
        subControllerMock.setDefaultDataSubId(0);
        waitABit();
        if (testHandler.getActivePhoneSwitchCount() != 4) {
            fail("after set of default to 0, ActivePhoneSwitchCount not 4!");
        }
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");
        if (commandsInterfaces[0].isDataAllowed() == false) fail("data not allowed");

        // 3 lose default via sub->phone change
        subControllerMock.setSlotSubId(0, 2);
        waitABit();

        if (testHandler.getActivePhoneSwitchCount() != 5) {
            fail("after mapping of 0 to 2, ActivePhoneSwitchCount not 5!");
        }
        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed");
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");

        // 4 gain default via sub->phone change
        subControllerMock.setSlotSubId(0, 0);
        waitABit();
        if (testHandler.getActivePhoneSwitchCount() != 6) {
            fail("after mapping of 0 to 0, ActivePhoneSwitchCount not 6!");
        }
        if (commandsInterfaces[0].isDataAllowed() == false) fail("data not allowed");
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");

        // 5 lose default network request
        connectivityServiceMock.removeDefaultRequest();
        waitABit();
        if (testHandler.getActivePhoneSwitchCount() != 7) {
            fail("after loss of network request, ActivePhoneSwitchCount not 7!");
        }
        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed");
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");

        // 6 gain subscription-specific request
        NetworkRequest request = makeSubSpecificDefaultRequest(connectivityServiceMock, 0);
        waitABit();
        if (testHandler.getActivePhoneSwitchCount() != 8) {
            fail("after gain of network request, ActivePhoneSwitchCount not 8!");
        }
        if (commandsInterfaces[0].isDataAllowed() == false) fail("data not allowed");
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");

        // 7 lose via sub->phone change
        subControllerMock.setSlotSubId(0, 1);
        waitABit();
        if (testHandler.getActivePhoneSwitchCount() != 9) {
            fail("after loss of request due to subId map change, ActivePhoneSwitchCount not 9!");
        }
        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed");
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");

        // 8 gain via sub->phone change
        subControllerMock.setSlotSubId(0, 0);
        waitABit();
        if (testHandler.getActivePhoneSwitchCount() != 10) {
            fail("after gain of request due to subId map change, ActivePhoneSwitchCount not 10!");
        }
        if (commandsInterfaces[0].isDataAllowed() == false) fail("data not allowed");
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");

        // 9 lose subscription-specific request
        connectivityServiceMock.releaseNetworkRequest(request);
        waitABit();
        if (testHandler.getActivePhoneSwitchCount() != 11) {
            fail("after release of request, ActivePhoneSwitchCount not 11!");
        }
        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed");
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");

        // 10 don't switch phones when in emergency mode
        // not ready yet - Phone turns out to be hard to stub out
//        phones[0].setInEmergencyCall(true);
//        connectivityServiceMock.addDefaultRequest();
//        waitABit();
//        if (testHandler.getActivePhoneSwitchCount() != 11) {
//            fail("after release of request, ActivePhoneSwitchCount not 11!");
//        }
//        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed");
//        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");
//
//        phones[0].setInEmergencyCall(false);
//        connectivityServiceMock.addDefaultRequest();
//        waitABit();
//        if (testHandler.getActivePhoneSwitchCount() != 12) {
//            fail("after release of request, ActivePhoneSwitchCount not 11!");
//        }
//        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed");
//        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");
        testHandler.die();
        handlerThread.quit();
!!!38314551.java!!!	testPrioritization() : void
        mTestName = "testPrioritization";
        final int numPhones = 2;
        final int maxActivePhones = 1;
        final HandlerThread handlerThread = new HandlerThread("PhoneSwitcherTestThread");
        handlerThread.start();
        final ContextFixture contextFixture = new ContextFixture();
        String[] networkConfigString = getContext().getResources().getStringArray(
                com.android.internal.R.array.networkAttributes);
        contextFixture.putStringArrayResource(com.android.internal.R.array.networkAttributes,
                networkConfigString);
        final Context contextMock = contextFixture.getTestDouble();
        final ConnectivityServiceMock connectivityServiceMock =
            new ConnectivityServiceMock(contextMock);
        final ConnectivityManager cm =
                new ConnectivityManager(contextMock, connectivityServiceMock);
        contextFixture.setSystemService(Context.CONNECTIVITY_SERVICE, cm);
        final ITelephonyRegistry.Stub telRegistryMock = new TelephonyRegistryMock();
        final SubscriptionControllerMock subControllerMock =
                new SubscriptionControllerMock(contextMock, telRegistryMock, numPhones);
        final SimulatedCommands[] commandsInterfaces = new SimulatedCommands[numPhones];
        final PhoneMock[] phones = new PhoneMock[numPhones];
        for (int i = 0; i < numPhones; i++) {
            commandsInterfaces[i] = new SimulatedCommands();
        }

        PhoneSwitcher phoneSwitcher = new PhoneSwitcher(maxActivePhones, numPhones,
                contextMock, subControllerMock, handlerThread.getLooper(), telRegistryMock,
                commandsInterfaces, phones);

        TestHandler testHandler = TestHandler.makeHandler();
        Object activePhoneSwitchObject = new Object();
        testHandler.setActivePhoneSwitchObject(activePhoneSwitchObject);

        connectivityServiceMock.addDefaultRequest();
        subControllerMock.setSlotSubId(0, 0);
        subControllerMock.setSlotSubId(1, 1);
        subControllerMock.setDefaultDataSubId(0);
        waitABit();
        phoneSwitcher.registerForActivePhoneSwitch(0, testHandler, TestHandler.ACTIVE_PHONE_SWITCH,
                activePhoneSwitchObject);
        waitABit();
        // verify initial conditions
        if (testHandler.getActivePhoneSwitchCount() != 1) {
            fail("Initial conditions not met: ActivePhoneSwitchCount not 1! " +
                    testHandler.getActivePhoneSwitchCount());
        }
        if (commandsInterfaces[0].isDataAllowed() == false) fail("data not allowed");
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");

        // now start a higher priority conneciton on the other sub
        NetworkRequest request = makeSubSpecificMmsRequest(connectivityServiceMock, 1);
        waitABit();
        if (testHandler.getActivePhoneSwitchCount() != 2) {
            fail("after gain of network request, ActivePhoneSwitchCount not 2!");
        }
        if (commandsInterfaces[0].isDataAllowed()) fail("data allowed");
        if (commandsInterfaces[1].isDataAllowed() == false) fail("data not allowed");

        testHandler.die();
        handlerThread.quit();
!!!38314679.java!!!	testHigherPriorityDefault() : void
        mTestName = "testPrioritization";
        final int numPhones = 2;
        final int maxActivePhones = 1;
        final HandlerThread handlerThread = new HandlerThread("PhoneSwitcherTestThread");
        handlerThread.start();
        final ContextFixture contextFixture = new ContextFixture();
        String[] networkConfigString = getContext().getResources().getStringArray(
                com.android.internal.R.array.networkAttributes);
        contextFixture.putStringArrayResource(com.android.internal.R.array.networkAttributes,
                networkConfigString);
        final Context contextMock = contextFixture.getTestDouble();
        final ConnectivityServiceMock connectivityServiceMock =
                new ConnectivityServiceMock(contextMock);
        final ConnectivityManager cm =
                new ConnectivityManager(contextMock, connectivityServiceMock);
        contextFixture.setSystemService(Context.CONNECTIVITY_SERVICE, cm);
        final ITelephonyRegistry.Stub telRegistryMock = new TelephonyRegistryMock();
        final SubscriptionControllerMock subControllerMock =
                new SubscriptionControllerMock(contextMock, telRegistryMock, numPhones);
        final SimulatedCommands[] commandsInterfaces = new SimulatedCommands[numPhones];
        final PhoneMock[] phones = new PhoneMock[numPhones];
        for (int i = 0; i < numPhones; i++) {
            commandsInterfaces[i] = new SimulatedCommands();
        }

        PhoneSwitcher phoneSwitcher = new PhoneSwitcher(maxActivePhones, numPhones,
                contextMock, subControllerMock, handlerThread.getLooper(), telRegistryMock,
                commandsInterfaces, phones);

        TestHandler testHandler = TestHandler.makeHandler();
        Object activePhoneSwitchObject = new Object();
        testHandler.setActivePhoneSwitchObject(activePhoneSwitchObject);

        connectivityServiceMock.addDefaultRequest();
        subControllerMock.setSlotSubId(0, 0);
        subControllerMock.setSlotSubId(1, 1);
        subControllerMock.setDefaultDataSubId(0);
        waitABit();

        // Phone 0 should be active
        if (commandsInterfaces[0].isDataAllowed() == false) fail("data not allowed");
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");

        connectivityServiceMock.setCurrentScoreForRequest(connectivityServiceMock.defaultRequest,
                100);
        waitABit();

        // should be no change
        if (commandsInterfaces[0].isDataAllowed() == false) fail("data not allowed");
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");

        connectivityServiceMock.setCurrentScoreForRequest(connectivityServiceMock.defaultRequest,
                0);
        waitABit();

        // should be no change
        if (commandsInterfaces[0].isDataAllowed() == false) fail("data not allowed");
        if (commandsInterfaces[1].isDataAllowed()) fail("data allowed");

        testHandler.die();
        handlerThread.quit();
