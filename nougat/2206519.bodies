class SubscriptionMonitorTest
!!!38330167.java!!!	failAndStack(inout str : String) : void
        fail(str + "\n" + SubscriptionMonitorTest.stack());
!!!38330295.java!!!	stack() : String
        StringBuilder sb = new StringBuilder();
        for(StackTraceElement e : Thread.currentThread().getStackTrace()) {
            sb.append(e.toString()).append("\n");
        }
        return sb.toString();
!!!38331959.java!!!	testRegister() : void
        final int numPhones = 2;
        final ContextFixture contextFixture = new ContextFixture();
        final Context context = contextFixture.getTestDouble();
        ITelephonyRegistry.Stub telRegistry = new TelephonyRegistryMock();
        SubscriptionControllerMock subController =
                new SubscriptionControllerMock(context, telRegistry, numPhones);

        SubscriptionMonitor testedSubMonitor =
                new SubscriptionMonitor(telRegistry, context, subController, numPhones);

        TestHandler testHandler = TestHandler.makeHandler();
        Object subChangedObject = new Object();
        testHandler.setSubscriptionChangedObject(subChangedObject);

        Object defaultSubChangedObject = new Object();
        testHandler.setDefaultSubscriptionChangedObject(defaultSubChangedObject);

        // try events before registering
        subController.setDefaultDataSubId(0);
        subController.setSlotSubId(0, 0);

        if (testHandler.getSubscriptionChangedCount() != 0) {
            fail("pretest of SubscriptionChangedCount");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 0) {
            fail("pretest of DefaultSubscriptionChangedCount");
        }

        testedSubMonitor.registerForSubscriptionChanged(0, testHandler,
                  TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);
        testHandler.blockTilIdle();

        if (testHandler.getSubscriptionChangedCount() != 1) {
            fail("test1 of SubscriptionChangedCount");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 0) {
            fail("test1 of DefaultSubscriptionChangedCount");
        }

        testedSubMonitor.registerForDefaultDataSubscriptionChanged(0, testHandler,
                TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);
        testHandler.blockTilIdle();

        if (testHandler.getSubscriptionChangedCount() != 1) {
            fail("test2 of SubscriptionChangedCount");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 1) {
            fail("test2 of DefaultSubscriptionChangedCount");
        }

        subController.setDefaultDataSubId(1);
        testHandler.blockTilIdle();

        if (testHandler.getSubscriptionChangedCount() != 1) {
            fail("test3 of SubscriptionChangedCount, " +
                    testHandler.getSubscriptionChangedCount() + " vs 1");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 2) {
            fail("test3 of DefaultSubscriptionChangedCount, " +
                    testHandler.getDefaultSubscriptionChangedCount() + " vs 2");
        }

        subController.setSlotSubId(0, 1);
        testHandler.blockTilIdle();

        if (testHandler.getSubscriptionChangedCount() != 2) {
            fail("test4 of SubscriptionChangedCount");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 3) {
            fail("test4 of DefaultSubscriptionChangedCount");
        }

        testedSubMonitor.unregisterForDefaultDataSubscriptionChanged(0, testHandler);
        subController.setSlotSubId(0, 0);
        testHandler.blockTilIdle();

        if (testHandler.getSubscriptionChangedCount() != 3) {
            fail("test5 of SubscriptionChangedCount, " +
                    testHandler.getSubscriptionChangedCount() + " vs 3");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 3) {
            fail("test5 of DefaultSubscriptionChangedCount, " +
                    testHandler.getDefaultSubscriptionChangedCount() + " vs 3");
        }

        testedSubMonitor.unregisterForSubscriptionChanged(0, testHandler);

        subController.setSlotSubId(0, 1);
        subController.setDefaultDataSubId(0);
        testHandler.blockTilIdle();

        if (testHandler.getSubscriptionChangedCount() != 3) {
            fail("test6 of SubscriptionChangedCount, " +
                    testHandler.getSubscriptionChangedCount() + " vs 3");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 3) {
            fail("test6 of DefaultSubscriptionChangedCount, " +
                    testHandler.getDefaultSubscriptionChangedCount() + " vs 3");
        }

        testHandler.die();
!!!38332087.java!!!	testBadRegister() : void
        final int numPhones = 2;
        final ContextFixture contextFixture = new ContextFixture();
        final Context context = contextFixture.getTestDouble();
        ITelephonyRegistry.Stub telRegistry = new TelephonyRegistryMock();
        SubscriptionControllerMock subController =
                new SubscriptionControllerMock(context, telRegistry, numPhones);

        SubscriptionMonitor testedSubMonitor =
                new SubscriptionMonitor(telRegistry, context, subController, numPhones);

        TestHandler testHandler = TestHandler.makeHandler();
        Object subChangedObject = new Object();
        testHandler.setSubscriptionChangedObject(subChangedObject);

        Object defaultSubChangedObject = new Object();
        testHandler.setDefaultSubscriptionChangedObject(defaultSubChangedObject);

        try {
            testedSubMonitor.registerForSubscriptionChanged(-1, testHandler,
                      TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);
            fail("IllegalArgumentException expected with bad phoneId");
        } catch (IllegalArgumentException e) {}
        try {
            testedSubMonitor.registerForDefaultDataSubscriptionChanged(-1, testHandler,
                    TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);
            fail("IllegalArgumentException expected with bad phoneId");
        } catch (IllegalArgumentException e) {}
        try {
            testedSubMonitor.registerForSubscriptionChanged(numPhones, testHandler,
                      TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);
            fail("IllegalArgumentException expected with bad phoneId");
        } catch (IllegalArgumentException e) {}
        try {
            testedSubMonitor.registerForDefaultDataSubscriptionChanged(numPhones, testHandler,
                    TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);
            fail("IllegalArgumentException expected with bad phoneId");
        } catch (IllegalArgumentException e) {}

        subController.setDefaultDataSubId(0);
        subController.setSlotSubId(0, 0);

        if (testHandler.getSubscriptionChangedCount() != 0) {
            fail("getSubscriptionChangedCount reported non-zero!");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 0) {
            fail("getDefaultSubscriptionChangedCount reported non-zero!");
        }

        testHandler.die();
!!!38332215.java!!!	testSpuriousNotifications() : void
        final int numPhones = 2;
        final ContextFixture contextFixture = new ContextFixture();
        final Context context = contextFixture.getTestDouble();
        ITelephonyRegistry.Stub telRegistry = new TelephonyRegistryMock();
        SubscriptionControllerMock subController =
                new SubscriptionControllerMock(context, telRegistry, numPhones);

        SubscriptionMonitor testedSubMonitor =
                new SubscriptionMonitor(telRegistry, context, subController, numPhones);

        TestHandler testHandler = TestHandler.makeHandler();
        Object subChangedObject = new Object();
        testHandler.setSubscriptionChangedObject(subChangedObject);

        Object defaultSubChangedObject = new Object();
        testHandler.setDefaultSubscriptionChangedObject(defaultSubChangedObject);

        final int PHONE_ID = 0;
        final int FIRST_SUB_ID = 0;
        final int SECOND_SUB_ID = 1;

        testedSubMonitor.registerForSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);
        testedSubMonitor.registerForDefaultDataSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);
        final int LOOP_COUNT = 1000;
        for (int i = 0; i < LOOP_COUNT; i++) {
            testedSubMonitor.unregisterForSubscriptionChanged(PHONE_ID, testHandler);
            testedSubMonitor.unregisterForDefaultDataSubscriptionChanged(PHONE_ID, testHandler);

            subController.setDefaultDataSubId(FIRST_SUB_ID);
            subController.setSlotSubId(PHONE_ID, FIRST_SUB_ID);

            subController.setDefaultDataSubId(SECOND_SUB_ID);
            subController.setSlotSubId(PHONE_ID, SECOND_SUB_ID);

            testedSubMonitor.registerForSubscriptionChanged(PHONE_ID, testHandler,
                    TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);
            testedSubMonitor.registerForDefaultDataSubscriptionChanged(PHONE_ID, testHandler,
                    TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);
        }
        testHandler.blockTilIdle();

        // should get one for every registration
        if (testHandler.getSubscriptionChangedCount() != 1 + LOOP_COUNT) {
            fail("getSubscriptionChangedCount reported " +
                    testHandler.getSubscriptionChangedCount() + " != " + (1 + LOOP_COUNT));
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 1 + LOOP_COUNT) {
            fail("getDefaultSubscriptionChangedCount reported " +
                    testHandler.getDefaultSubscriptionChangedCount() + " != " + (1 + LOOP_COUNT));
        }

        testHandler.die();
!!!38332343.java!!!	testMultiRegUnregistration() : void
        final int numPhones = 2;
        final ContextFixture contextFixture = new ContextFixture();
        final Context context = contextFixture.getTestDouble();
        ITelephonyRegistry.Stub telRegistry = new TelephonyRegistryMock();
        SubscriptionControllerMock subController =
                new SubscriptionControllerMock(context, telRegistry, numPhones);

        SubscriptionMonitor testedSubMonitor =
                new SubscriptionMonitor(telRegistry, context, subController, numPhones);

        TestHandler testHandler = TestHandler.makeHandler();
        Object subChangedObject = new Object();
        testHandler.setSubscriptionChangedObject(subChangedObject);

        Object defaultSubChangedObject = new Object();
        testHandler.setDefaultSubscriptionChangedObject(defaultSubChangedObject);

        final int PHONE_ID = 0;
        final int FIRST_SUB_ID = 0;
        final int SECOND_SUB_ID = 1;

        testedSubMonitor.registerForSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);
        testedSubMonitor.registerForDefaultDataSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);

        testedSubMonitor.registerForSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);
        testedSubMonitor.registerForDefaultDataSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);

        subController.setDefaultDataSubId(FIRST_SUB_ID);
        subController.setSlotSubId(PHONE_ID, FIRST_SUB_ID);

        subController.setDefaultDataSubId(SECOND_SUB_ID);
        subController.setSlotSubId(PHONE_ID, SECOND_SUB_ID);

        testHandler.blockTilIdle();

        // should get 1 for each registration and 4 for the two events
        if (testHandler.getSubscriptionChangedCount() != 6) {
            fail("getSubscriptionChangedCount reported " +
                    testHandler.getSubscriptionChangedCount() + " != 6");
        }
        // 2 for the 2 registrations, 2 for the single event in the first cluster (2 listeners)
        // 2 for the setDefatulDataSub in the second cluster (lost data sub)
        // 2 for the setSlotSubId (regain default)
        if (testHandler.getDefaultSubscriptionChangedCount() != 8) {
            fail("getDefaultSubscriptionChangedCount reported " +
                    testHandler.getDefaultSubscriptionChangedCount() + " != 8");
        }

        testedSubMonitor.unregisterForSubscriptionChanged(PHONE_ID, testHandler);
        testedSubMonitor.unregisterForDefaultDataSubscriptionChanged(PHONE_ID, testHandler);
        testedSubMonitor.unregisterForSubscriptionChanged(PHONE_ID, testHandler);
        testedSubMonitor.unregisterForDefaultDataSubscriptionChanged(PHONE_ID, testHandler);

        testHandler.die();
!!!38332471.java!!!	testEventFloodNotifications() : void
        final int numPhones = 2;
        final ContextFixture contextFixture = new ContextFixture();
        final Context context = contextFixture.getTestDouble();
        ITelephonyRegistry.Stub telRegistry = new TelephonyRegistryMock();
        SubscriptionControllerMock subController =
                new SubscriptionControllerMock(context, telRegistry, numPhones);

        SubscriptionMonitor testedSubMonitor =
                new SubscriptionMonitor(telRegistry, context, subController, numPhones);

        TestHandler testHandler = TestHandler.makeHandler();
        Object subChangedObject = new Object();
        testHandler.setSubscriptionChangedObject(subChangedObject);

        Object defaultSubChangedObject = new Object();
        testHandler.setDefaultSubscriptionChangedObject(defaultSubChangedObject);

        final int PHONE_ID = 0;
        final int FIRST_SUB_ID = 0;
        final int SECOND_SUB_ID = 1;

        testedSubMonitor.registerForSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);
        testedSubMonitor.registerForDefaultDataSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);

        final int LOOP_COUNT = 1;
        for (int i = 0; i < LOOP_COUNT; i++) {
            subController.setDefaultDataSubId(FIRST_SUB_ID);
            subController.setSlotSubId(PHONE_ID, FIRST_SUB_ID);

            subController.setDefaultDataSubId(SECOND_SUB_ID);
            subController.setSlotSubId(PHONE_ID, SECOND_SUB_ID);
        }
        testHandler.blockTilIdle();

        // should get one for registration + 2 per loop
        if (testHandler.getSubscriptionChangedCount() != 1 + (2 * LOOP_COUNT)) {
            fail("getSubscriptionChangedCount reported " +
                    testHandler.getSubscriptionChangedCount() + " != " + (1 + (2 * LOOP_COUNT)));
        }
        // should get one for registration + 3 for first loop + 4 for subsequent loops
        if (testHandler.getDefaultSubscriptionChangedCount() != (4 * LOOP_COUNT)) {
            fail("getDefaultSubscriptionChangedCount reported " +
                    testHandler.getDefaultSubscriptionChangedCount() + " != " +
                    (4 * LOOP_COUNT));
        }

        testHandler.die();
!!!38332599.java!!!	testNoDefaultNotifications() : void
        final int numPhones = 2;
        final ContextFixture contextFixture = new ContextFixture();
        final Context context = contextFixture.getTestDouble();
        ITelephonyRegistry.Stub telRegistry = new TelephonyRegistryMock();
        SubscriptionControllerMock subController =
                new SubscriptionControllerMock(context, telRegistry, numPhones);

        SubscriptionMonitor testedSubMonitor =
                new SubscriptionMonitor(telRegistry, context, subController, numPhones);

        TestHandler testHandler = TestHandler.makeHandler();
        Object subChangedObject = new Object();
        testHandler.setSubscriptionChangedObject(subChangedObject);

        Object defaultSubChangedObject = new Object();
        testHandler.setDefaultSubscriptionChangedObject(defaultSubChangedObject);

        final int PHONE_ID = 0;
        final int FIRST_SUB_ID = 0;
        final int SECOND_SUB_ID = 1;

        subController.setDefaultDataSubId(INVALID_SUBSCRIPTION_ID);
        subController.setSlotSubId(PHONE_ID, FIRST_SUB_ID);

        testedSubMonitor.registerForSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);
        testedSubMonitor.registerForDefaultDataSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);


        subController.setSlotSubId(PHONE_ID, SECOND_SUB_ID);
        subController.setSlotSubId(PHONE_ID, FIRST_SUB_ID);

        testHandler.blockTilIdle();

        if (testHandler.getSubscriptionChangedCount() != 3) {
            fail("getSubscriptionChangedCount reported " +
                    testHandler.getSubscriptionChangedCount() + " != 3");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 1) {
            fail("getDefaultSubscriptionChangedCount reported " +
                    testHandler.getDefaultSubscriptionChangedCount() + " != 1");
        }

        testHandler.die();
!!!38332727.java!!!	testNoSubChange() : void
        String TAG = "testNoSubChange";
        final int numPhones = 2;
        final ContextFixture contextFixture = new ContextFixture();
        final Context context = contextFixture.getTestDouble();
        ITelephonyRegistry.Stub telRegistry = new TelephonyRegistryMock();
        SubscriptionControllerMock subController =
                new SubscriptionControllerMock(context, telRegistry, numPhones);

        SubscriptionMonitor testedSubMonitor =
                new SubscriptionMonitor(telRegistry, context, subController, numPhones);

        TestHandler testHandler = TestHandler.makeHandler();
        Object subChangedObject = new Object();
        testHandler.setSubscriptionChangedObject(subChangedObject);

        Object defaultSubChangedObject = new Object();
        testHandler.setDefaultSubscriptionChangedObject(defaultSubChangedObject);

        final int PHONE_ID = 0;
        final int FIRST_SUB_ID = 0;
        final int SECOND_SUB_ID = 1;

        testHandler.blockTilIdle();
        Rlog.d(TAG, "1");

        testedSubMonitor.registerForSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);

        testHandler.blockTilIdle();
        Rlog.d(TAG, "2");

        testedSubMonitor.registerForDefaultDataSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);

        testHandler.blockTilIdle();
        Rlog.d(TAG, "3");

        subController.setSlotSubId(PHONE_ID, FIRST_SUB_ID);

        testHandler.blockTilIdle();
        Rlog.d(TAG, "4");

        subController.setDefaultDataSubId(FIRST_SUB_ID);

        testHandler.blockTilIdle();
        Rlog.d(TAG, "5");

        if (testHandler.getSubscriptionChangedCount() != 2) {
            fail("getSubscriptionChangedCount reported " +
                    testHandler.getSubscriptionChangedCount() + " != 2");
        }
        // 1 gained for reg  and 1 for the setting above
        if (testHandler.getDefaultSubscriptionChangedCount() != 2) {
            fail("getDefaultSubscriptionChangedCount reported " +
                    testHandler.getDefaultSubscriptionChangedCount() + " != 2");
        }

        Rlog.d(TAG, "6");

        // cause a notification that subscription info changed
        subController.notifySubscriptionInfoChanged();
        testHandler.blockTilIdle();

        Rlog.d(TAG, "7");

        if (testHandler.getSubscriptionChangedCount() != 2) {
            fail("getSubscriptionChangedCount reported " +
                    testHandler.getSubscriptionChangedCount() + " != 2");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 2) {
            fail("getDefaultSubscriptionChangedCount reported " +
                    testHandler.getDefaultSubscriptionChangedCount() + " != 2");
        }

        // now change the default - should cause a default notification (we lost the default)
        subController.setDefaultDataSubId(SECOND_SUB_ID);

        testHandler.blockTilIdle();
        Rlog.d(TAG, "8");

        if (testHandler.getSubscriptionChangedCount() != 2) {
            fail("getSubscriptionChangedCount reported " +
                    testHandler.getSubscriptionChangedCount() + " != 2");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 3) {
            fail("getDefaultSubscriptionChangedCount reported " +
                    testHandler.getDefaultSubscriptionChangedCount() + " != 3");
        }
        testHandler.die();
!!!38332855.java!!!	testSubBeforeDefaultNotifications() : void
        final int numPhones = 2;
        final ContextFixture contextFixture = new ContextFixture();
        final Context context = contextFixture.getTestDouble();
        ITelephonyRegistry.Stub telRegistry = new TelephonyRegistryMock();
        SubscriptionControllerMock subController =
                new SubscriptionControllerMock(context, telRegistry, numPhones);

        SubscriptionMonitor testedSubMonitor =
                new SubscriptionMonitor(telRegistry, context, subController, numPhones);

        TestHandler testHandler = TestHandler.makeHandler();
        Object subChangedObject = new Object();
        testHandler.setSubscriptionChangedObject(subChangedObject);

        Object defaultSubChangedObject = new Object();
        testHandler.setDefaultSubscriptionChangedObject(defaultSubChangedObject);

        final int PHONE_ID = 0;
        final int SECOND_PHONE_ID = 1;
        final int FIRST_SUB_ID = 0;
        final int SECOND_SUB_ID = 1;
        testedSubMonitor.registerForSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);
        testedSubMonitor.registerForDefaultDataSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);
        subController.setSlotSubId(PHONE_ID, -2);
        subController.setSlotSubId(SECOND_PHONE_ID, -3);
        testHandler.blockTilIdle();
        // should get one for registration and 1 for the change
        if (testHandler.getSubscriptionChangedCount() != 2) {
            fail("test1 " + testHandler.getSubscriptionChangedCount() + " != 2");
        }
        // should get one for registration
        if (testHandler.getDefaultSubscriptionChangedCount() != 1) {
            fail("test2 " + testHandler.getDefaultSubscriptionChangedCount() + " != 1");
        }

        subController.setDefaultDataSubId(FIRST_SUB_ID);
        testHandler.blockTilIdle();

        // no change
        if (testHandler.getSubscriptionChangedCount() != 2) {
            fail("test3 " + testHandler.getSubscriptionChangedCount() + " != 2");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 1) {
            fail("test4 " + testHandler.getDefaultSubscriptionChangedCount() + " != 1");
        }

        subController.setSlotSubId(PHONE_ID, FIRST_SUB_ID);
        testHandler.blockTilIdle();

        // should get one more default-change-notification
        if (testHandler.getSubscriptionChangedCount() != 3) {
            fail("test5 " + testHandler.getSubscriptionChangedCount() + " != 3");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 2) {
            fail("test6 " + testHandler.getDefaultSubscriptionChangedCount() + " != 2");
        }

        subController.setDefaultDataSubId(SECOND_SUB_ID);
        testHandler.blockTilIdle();

        // should get one more default-change-notification
        if (testHandler.getSubscriptionChangedCount() != 3) {
            fail("test7 " + testHandler.getSubscriptionChangedCount() + " != 3");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 3) {
            fail("test8 " + testHandler.getDefaultSubscriptionChangedCount() + " != 3");
        }

        subController.setDefaultDataSubId(FIRST_SUB_ID);
        testHandler.blockTilIdle();

        // should get one more default-change-notification
        if (testHandler.getSubscriptionChangedCount() != 3) {
            fail("test9 " + testHandler.getSubscriptionChangedCount() + " != 3");
        }
        if (testHandler.getDefaultSubscriptionChangedCount() != 4) {
            fail("test10 " + testHandler.getDefaultSubscriptionChangedCount() + " != 4");
        }

        testHandler.die();
!!!38332983.java!!!	testSimSwapNotifications() : void
        final int numPhones = 1;
        final ContextFixture contextFixture = new ContextFixture();
        final Context context = contextFixture.getTestDouble();
        ITelephonyRegistry.Stub telRegistry = new TelephonyRegistryMock();
        SubscriptionControllerMock subController =
                new SubscriptionControllerMock(context, telRegistry, numPhones);

        SubscriptionMonitor testedSubMonitor =
                new SubscriptionMonitor(telRegistry, context, subController, numPhones);

        TestHandler testHandler = TestHandler.makeHandler();
        Object subChangedObject = new Object();
        testHandler.setSubscriptionChangedObject(subChangedObject);

        Object defaultSubChangedObject = new Object();
        testHandler.setDefaultSubscriptionChangedObject(defaultSubChangedObject);

        final int PHONE_ID = 0;
        final int FIRST_SUB_ID = 0;
        final int SECOND_SUB_ID = 1;
        testedSubMonitor.registerForSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.SUBSCRIPTION_CHANGED, subChangedObject);
        testedSubMonitor.registerForDefaultDataSubscriptionChanged(PHONE_ID, testHandler,
                TestHandler.DEFAULT_SUBSCRIPTION_CHANGED, defaultSubChangedObject);
        subController.setSlotSubId(PHONE_ID, -2);
        testHandler.blockTilIdle();
        // should get one for registration and 1 for the change
        if (testHandler.getSubscriptionChangedCount() != 2) {
            fail("test1 " + testHandler.getSubscriptionChangedCount() + " != 2");
        }
        // should get one for registration
        if (testHandler.getDefaultSubscriptionChangedCount() != 1) {
            fail("test2 " + testHandler.getDefaultSubscriptionChangedCount() + " != 1");
        }

        subController.setSlotSubId(PHONE_ID, FIRST_SUB_ID);
        testHandler.blockTilIdle();
        if (testHandler.getSubscriptionChangedCount() != 3) {
            fail("test3 " + testHandler.getSubscriptionChangedCount() + " != 3");
        }

        subController.setDefaultDataSubId(FIRST_SUB_ID);
        testHandler.blockTilIdle();
        if (testHandler.getDefaultSubscriptionChangedCount() != 2) {
            fail("test4 " + testHandler.getDefaultSubscriptionChangedCount() + " != 2");
        }

        // ok - now for the sim swap
        subController.setSlotSubId(PHONE_ID, -2);
        testHandler.blockTilIdle();
        if (testHandler.getDefaultSubscriptionChangedCount() != 3) {
            fail("test5 " + testHandler.getDefaultSubscriptionChangedCount() + " != 3");
        }
        if (testHandler.getSubscriptionChangedCount() != 4) {
            fail("test6 " + testHandler.getSubscriptionChangedCount() + " != 4");
        }

        subController.setSlotSubId(PHONE_ID, SECOND_SUB_ID);
        testHandler.blockTilIdle();

        if (testHandler.getSubscriptionChangedCount() != 5) {
            fail("test7 " + testHandler.getSubscriptionChangedCount() + " != 5");
        }

        subController.setDefaultDataSubId(SECOND_SUB_ID);
        testHandler.blockTilIdle();

        if (testHandler.getDefaultSubscriptionChangedCount() != 4) {
            fail("test8 " + testHandler.getDefaultSubscriptionChangedCount() + " != 4");
        }
        // no change
        if (testHandler.getSubscriptionChangedCount() != 5) {
            fail("test9 " + testHandler.getSubscriptionChangedCount() + " != 5");
        }

        testHandler.die();
