class TestHandler
!!!38330423.java!!!	TestHandler(inout looper : Looper)
            super(looper);
!!!38330551.java!!!	die() : void
            if(handlerThread != null) {
                handlerThread.quit();
                handlerThread = null;
            }
!!!38330679.java!!!	blockTilIdle() : void
            Object lock = new Object();
            synchronized (lock) {
                Message msg = this.obtainMessage(IN_IDLE, lock);
                msg.sendToTarget();
                try {
                    lock.wait();
                } catch (InterruptedException e) {}
            }
!!!38330807.java!!!	makeHandler() : SubscriptionMonitorTest::TestHandler
            final HandlerThread handlerThread = new HandlerThread("TestHandler");
            handlerThread.start();
            final TestHandler result = new TestHandler(handlerThread.getLooper());
            result.handlerThread = handlerThread;
            return result;
!!!38330935.java!!!	objectEquals(inout o1 : Object, inout o2 : Object) : boolean
            if (o1 == null) return (o2 == null);
            return o1.equals(o2);
!!!38331063.java!!!	failAndStack(inout str : String) : void
            SubscriptionMonitorTest.failAndStack(str);
!!!38331191.java!!!	handleMessage(inout msg : Message) : void
            switch (msg.what) {
                case SUBSCRIPTION_CHANGED: {
                    AsyncResult ar = (AsyncResult)(msg.obj);
                    if (objectEquals(ar.userObj, mSubscriptionChangedObject.get()) == false) {
                        failAndStack("Subscription Changed object is incorrect!");
                    }
                    mSubscriptionChangedCount.incrementAndGet();
                    Rlog.d(LOG_TAG, "SUBSCRIPTION_CHANGED, inc to " +
                            mSubscriptionChangedCount.get());
                    break;
                }
                case DEFAULT_SUBSCRIPTION_CHANGED: {
                    AsyncResult ar = (AsyncResult)(msg.obj);
                    if (objectEquals(ar.userObj,
                            mDefaultSubscriptionChangedObject.get()) == false) {
                        failAndStack("Default Subscription Changed object is incorrect!");
                    }
                    mDefaultSubscriptionChangedCount.incrementAndGet();
                    Rlog.d(LOG_TAG, "DEFAULT_SUBSCRIPTION_CHANGED, inc to " +
                            mDefaultSubscriptionChangedCount.get());
                    break;
                }
                case IN_IDLE: {
                    Object lock = msg.obj;
                    synchronized (lock) {
                        lock.notify();
                    }
                    break;
                }
            }
!!!38331319.java!!!	reset() : void
            mSubscriptionChangedCount.set(0);
            mSubscriptionChangedObject.set(null);

            mDefaultSubscriptionChangedCount.set(0);
            mDefaultSubscriptionChangedObject.set(null);
!!!38331447.java!!!	setSubscriptionChangedObject(inout o : Object) : void
            mSubscriptionChangedObject.set(o);
!!!38331575.java!!!	setDefaultSubscriptionChangedObject(inout o : Object) : void
            mDefaultSubscriptionChangedObject.set(o);
!!!38331703.java!!!	getSubscriptionChangedCount() : int
            return mSubscriptionChangedCount.get();
!!!38331831.java!!!	getDefaultSubscriptionChangedCount() : int
            return mDefaultSubscriptionChangedCount.get();
