class TelephonyTestUtils
!!!38334903.java!!!	createNewInstance(inout className : String, inout  : Object...params) : Object
        try {
            Class clazz = Class.forName(className);
            int numParam = params.length;
            Class<?>[] paramType = new Class[numParam];
            for (int i = 0; i < numParam; i++) {
                paramType[i] = params[i].getClass();
            }
            Constructor constructor = clazz.getDeclaredConstructor(paramType);
            constructor.setAccessible(true);

            return constructor.newInstance(params);
        } catch (Exception e) {
            Assert.fail(e.toString());
            return null;
        }
!!!38335031.java!!!	invokeStaticMethod(inout clazz : Class, inout method : String, inout  : Object...params) : Object
        try {
            int numParam = params.length;
            Class<?>[] paramType = new Class[numParam];
            for (int i = 0; i < numParam; i++) {
                paramType[i] = params[i].getClass();
            }
            Method methodReflection = clazz.getDeclaredMethod(method, paramType);
            methodReflection.setAccessible(true);
            return methodReflection.invoke(null, params);
        } catch (Exception e) {
            Assert.fail(e.toString());
            return null;
        }
!!!38335159.java!!!	invokeStaticMethodThrowsException(inout clazz : Class, inout method : String, inout  : Object...params) : Object
        try {
            int numParam = params.length;
            Class<?>[] paramType = new Class[numParam];
            for (int i = 0; i < numParam; i++) {
                paramType[i] = params[i].getClass();
            }
            Method methodReflection = clazz.getDeclaredMethod(method, paramType);
            methodReflection.setAccessible(true);
            return methodReflection.invoke(null, params);
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        } catch (Exception e) {
            Assert.fail(e.toString());
            return null;
        }
!!!38335287.java!!!	invokeNonStaticMethod(inout clazz : Class, inout caller : Object, inout method : String, inout  : Object...params) : Object
        try {
            int numParam = params.length;
            Class<?>[] paramType = new Class[numParam];
            for (int i = 0; i < numParam; i++) {
                paramType[i] = params[i].getClass();
            }
            Method methodReflection = clazz.getDeclaredMethod(method, paramType);
            methodReflection.setAccessible(true);
            return methodReflection.invoke(caller, params);
        } catch (Exception e) {
            Assert.fail(e.toString());
            return null;
        }
!!!38335415.java!!!	invokeNonStaticMethodThrowsException(inout clazz : Class, inout caller : Object, inout method : String, inout  : Object...params) : Object
        try {
            int numParam = params.length;
            Class<?>[] paramType = new Class[numParam];
            for (int i = 0; i < numParam; i++) {
                paramType[i] = params[i].getClass();
            }
            Method methodReflection = clazz.getDeclaredMethod(method, paramType);
            methodReflection.setAccessible(true);
            return methodReflection.invoke(caller, params);
        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        } catch (Exception e) {
            Assert.fail(e.toString());
            return null;
        }
!!!38335543.java!!!	waitForMs(in ms : long) : void
        try {
            Thread.sleep(ms);
        } catch (InterruptedException e) {
            logd("InterruptedException while waiting: " + e);
        }
!!!38335671.java!!!	logd(inout s : String) : void
        Log.d(TAG, s);
