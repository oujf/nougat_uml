class Wap230WspContentTypeTest
!!!38336695.java!!!	testHasExpectedNumberOfShortMimeTypes() : void
        assertEquals(WSP_DEFINED_SHORT_MIME_TYPE_COUNT, WELL_KNOWN_SHORT_MIME_TYPES.size());
!!!38336823.java!!!	testHasExpectedNumberOfLongMimeTypes() : void
        assertEquals(WSP_DEFINED_LONG_MIME_TYPE_COUNT, WELL_KNOWN_LONG_MIME_TYPES.size());
!!!38336951.java!!!	testWellKnownShortIntegerMimeTypeValues() : void

        for (int value : Wap230WspContentTypeTest.WELL_KNOWN_SHORT_MIME_TYPES.keySet()) {
            WspTypeDecoder unit = new WspTypeDecoder(
                    HexDump.toByteArray((byte) (value | WSP_SHORT_INTEGER_MASK)));
            assertTrue(unit.decodeContentType(0));
            String mimeType = unit.getValueString();
            int wellKnownValue = (int) unit.getValue32();
            assertEquals(Wap230WspContentTypeTest.WELL_KNOWN_SHORT_MIME_TYPES.get(value), mimeType);
            assertEquals(value, wellKnownValue);
            assertEquals(1, unit.getDecodedDataLength());
        }
!!!38337079.java!!!	testWellKnownLongIntegerMimeTypeValues() : void
        byte headerLength = 3;
        byte typeLength = 2;
        for (int value : Wap230WspContentTypeTest.WELL_KNOWN_SHORT_MIME_TYPES.keySet()) {
            byte[] data = new byte[10];
            data[0] = headerLength;
            data[1] = typeLength;
            data[2] = (byte) (value >> 8);
            data[3] = (byte) (value & 0xFF);
            WspTypeDecoder unit = new WspTypeDecoder(data);
            assertTrue(unit.decodeContentType(0));
            String mimeType = unit.getValueString();
            int wellKnownValue = (int) unit.getValue32();
            assertEquals(Wap230WspContentTypeTest.WELL_KNOWN_SHORT_MIME_TYPES.get(value), mimeType);
            assertEquals(value, wellKnownValue);
            assertEquals(4, unit.getDecodedDataLength());
        }
!!!38337207.java!!!	testDecodeReturnsFalse_WhenOnlyAZeroBytePresent() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x00);
        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertFalse(unit.decodeContentType(0));
!!!38337335.java!!!	testConstrainedMediaExtensionMedia() : void

        String testType = "application/wibble";
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(testType.getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));
        String mimeType = unit.getValueString();
        assertEquals(testType, mimeType);
        assertEquals(-1, unit.getValue32());
        assertEquals(19, unit.getDecodedDataLength());
!!!38337463.java!!!	testGeneralFormShortLengthExtensionMedia() : void

        String testType = "12345678901234567890123456789";
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(testType.length() + 1);
        out.write(testType.getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();
        assertEquals(testType, mimeType);
        assertEquals(-1, unit.getValue32());
        assertEquals(31, unit.getDecodedDataLength());
!!!38337591.java!!!	testGeneralFormShortLengthWellKnownShortInteger() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x01);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();
        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());
        assertEquals(2, unit.getDecodedDataLength());

!!!38337719.java!!!	testGeneralFormShortLengthWellKnownShortIntegerWithUnknownValue() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x01);
        out.write(SHORT_MIME_TYPE_UNASSIGNED | WSP_SHORT_INTEGER_MASK);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();
        assertNull(mimeType);
        assertEquals(SHORT_MIME_TYPE_UNASSIGNED, unit.getValue32());
        assertEquals(2, unit.getDecodedDataLength());

!!!38337847.java!!!	testGeneralFormShortLengthWellKnownLongInteger() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();

        out.write(0x03); // header length
        out.write(0x02); // type length (2 octets)
        out.write(LONG_MIME_TYPE_OMA_DIRECTORY_XML >> 8);
        out.write(LONG_MIME_TYPE_OMA_DIRECTORY_XML & 0xFF);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals("application/oma-directory+xml", mimeType);
        assertEquals(LONG_MIME_TYPE_OMA_DIRECTORY_XML, unit.getValue32());
        assertEquals(4, unit.getDecodedDataLength());
!!!38337975.java!!!	testGeneralFormShortLengthWellKnownLongIntegerWithUnknownValue() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();

        out.write(0x03); // Value-length, short-length
        out.write(0x02); // long-integer length (2 octets)
        out.write(LONG_MIME_TYPE_UNASSIGNED >> 8);
        out.write(LONG_MIME_TYPE_UNASSIGNED & 0xFF);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertNull(mimeType);
        assertEquals(LONG_MIME_TYPE_UNASSIGNED, unit.getValue32());
        assertEquals(4, unit.getDecodedDataLength());

!!!38338103.java!!!	testGeneralFormLengthQuoteWellKnownShortInteger() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();

        out.write(WSP_LENGTH_QUOTE);
        out.write(0x01); // Length as UINTVAR
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();
        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());
        assertEquals(3, unit.getDecodedDataLength());

!!!38338231.java!!!	testGeneralFormLengthQuoteWellKnownShortIntegerWithUnknownValue() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();

        out.write(WSP_LENGTH_QUOTE);
        out.write(0x01); // Length as UINTVAR
        out.write(SHORT_MIME_TYPE_UNASSIGNED | WSP_SHORT_INTEGER_MASK);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();
        assertNull(mimeType);
        assertEquals(SHORT_MIME_TYPE_UNASSIGNED, unit.getValue32());
        assertEquals(3, unit.getDecodedDataLength());
!!!38338359.java!!!	testGeneralFormLengthQuoteWellKnownLongInteger() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();

        out.write(WSP_LENGTH_QUOTE);
        out.write(0x03); // Length as UINTVAR
        out.write(0x02); // long-integer length (2 octets)
        out.write(LONG_MIME_TYPE_OMA_DIRECTORY_XML >> 8);
        out.write(LONG_MIME_TYPE_OMA_DIRECTORY_XML & 0xFF);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals("application/oma-directory+xml", mimeType);
        assertEquals(LONG_MIME_TYPE_OMA_DIRECTORY_XML, unit.getValue32());
        assertEquals(5, unit.getDecodedDataLength());

!!!38338487.java!!!	testGeneralFormLengthQuoteWellKnownLongIntegerWithUnknownValue() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();

        out.write(WSP_LENGTH_QUOTE);
        out.write(0x03); // Length as UINTVAR
        out.write(0x02); // long-integer length (2 octets)
        out.write(LONG_MIME_TYPE_UNASSIGNED >> 8);
        out.write(LONG_MIME_TYPE_UNASSIGNED & 0xFF);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertNull(mimeType);
        assertEquals(LONG_MIME_TYPE_UNASSIGNED, unit.getValue32());
        assertEquals(5, unit.getDecodedDataLength());

!!!38338615.java!!!	testGeneralFormLengthQuoteExtensionMedia() : void

        String testType = "application/wibble";
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        out.write(WSP_LENGTH_QUOTE);
        out.write(testType.length() + 1); // Length as UINTVAR

        out.write(testType.getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(testType, mimeType);
        assertEquals(-1, unit.getValue32());
        assertEquals(21, unit.getDecodedDataLength());

!!!38338743.java!!!	testGeneralFormLengthQuoteExtensionMediaWithNiceLongMimeType() : void

        String testType =
                "01234567890123456789012345678901234567890123456789012345678901234567890123456789"
                +"01234567890123456789012345678901234567890123456789012345678901234567890123456789";
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        out.write(WSP_LENGTH_QUOTE);
        out.write(0x81); // Length as UINTVAR (161 decimal, 0xA1), 2 bytes
        out.write(0x21);

        out.write(testType.getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(testType, mimeType);
        assertEquals(-1, unit.getValue32());
        assertEquals(164, unit.getDecodedDataLength());

!!!38338871.java!!!	testConstrainedMediaExtensionMediaWithSpace() : void

        String testType = " application/wibble";
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(testType.getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(testType, mimeType);
        assertEquals(-1, unit.getValue32());
        assertEquals(20, unit.getDecodedDataLength());

!!!38338999.java!!!	testTypedParamWellKnownShortIntegerNoValue() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x03); // Value-length, short-length
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write(TYPED_PARAM_DOMAIN | WSP_SHORT_INTEGER_MASK);
        out.write(PARAM_NO_VALUE);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());

        assertEquals(4, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals(null, params.get("Domain"));

!!!38339127.java!!!	testTypedParamWellKnownShortIntegerTokenText() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x14); // Value-length, short-length
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write(TYPED_PARAM_DOMAIN | WSP_SHORT_INTEGER_MASK);
        out.write("wdstechnology.com".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());

        assertEquals(out.toByteArray().length, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("wdstechnology.com", params.get("Domain"));

!!!38339255.java!!!	testTypedParamWellKnownLongIntegerTokenText() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x15);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write(0x01);
        out.write(TYPED_PARAM_DOMAIN);
        out.write("wdstechnology.com".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());

        assertEquals(22, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("wdstechnology.com", params.get("Domain"));

!!!38339383.java!!!	testTypedParamWellKnownShortIntegerQuotedText() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x15);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write(TYPED_PARAM_DOMAIN | WSP_SHORT_INTEGER_MASK);
        out.write(WSP_QUOTE);
        out.write("wdstechnology.com".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(0x3F, unit.getValue32());
        assertEquals(22, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("wdstechnology.com", params.get("Domain"));

!!!38339511.java!!!	testTypedParamWellKnownShortIntegerCompactIntegerValue() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x3);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write(TYPED_PARAM_SEC | WSP_SHORT_INTEGER_MASK);
        out.write(0x01 | WSP_SHORT_INTEGER_MASK);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(0x3F, unit.getValue32());
        assertEquals(4, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("1", params.get("SEC"));

!!!38339639.java!!!	testTypedParamWellKnownShortIntegerCompactIntegerValue_0() : void
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x3);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write(TYPED_PARAM_SEC | WSP_SHORT_INTEGER_MASK);
        out.write(0x00 | WSP_SHORT_INTEGER_MASK);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(0x3F, unit.getValue32());
        assertEquals(4, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("0", params.get("SEC"));
!!!38339767.java!!!	testTypedParamWellKnownShortIntegerMultipleParameters() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x0B);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write(TYPED_PARAM_SEC | WSP_SHORT_INTEGER_MASK);
        out.write(0x01 | WSP_SHORT_INTEGER_MASK);
        out.write(TYPED_PARAM_MAC | WSP_SHORT_INTEGER_MASK);
        out.write(WSP_QUOTE);
        out.write("imapc".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());
        assertEquals(12, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("1", params.get("SEC"));
        assertEquals("imapc", params.get("MAC"));
!!!38339895.java!!!	testUntypedParamIntegerValueShortInteger() : void
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x0A);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write("MYPARAM".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR); // EOS
        out.write(0x45 | WSP_SHORT_INTEGER_MASK);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());
        assertEquals(11, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("69", params.get("MYPARAM"));
!!!38340023.java!!!	testUntypedParamIntegerValueLongInteger() : void
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x0C);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write("MYPARAM".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);
        out.write(0x02); // Short Length
        out.write(0x42); // Long Integer byte 1
        out.write(0x69); // Long Integer byte 2

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(0x3F, unit.getValue32());
        assertEquals(13, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("17001", params.get("MYPARAM"));
!!!38340151.java!!!	testUntypedParamTextNoValue() : void
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x0A);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write("MYPARAM".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);
        out.write(PARAM_NO_VALUE);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));
        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());
        assertEquals(11, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals(null, params.get("MYPARAM"));

!!!38340279.java!!!	testUntypedParamTextTokenText() : void
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x11);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write("MYPARAM".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);
        out.write("myvalue".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));
        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());
        assertEquals(18, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("myvalue", params.get("MYPARAM"));
!!!38340407.java!!!	testUntypedParamTextQuotedString() : void
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x11);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write("MYPARAM".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);
        out.write(WSP_QUOTE);
        out.write("myvalue".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));
        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());
        assertEquals(19, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("myvalue", params.get("MYPARAM"));

!!!38340535.java!!!	testDecodesReturnsFalse_ForParamWithMissingValue() : void
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x09);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write("MYPARAM".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertFalse(unit.decodeContentType(0));
!!!38340663.java!!!	testTypedParamTextQValue() : void
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x04);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write(TYPED_PARAM_Q);
        out.write(0x83); // Q value byte 1
        out.write(0x31); // Q value byte 2

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));
        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(0x3F, unit.getValue32());
        assertEquals(5, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("433", params.get("Q"));

!!!38340791.java!!!	testTypedParamUnassignedWellKnownShortIntegerTokenText() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x14);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write(PARAM_UNASSIGNED | WSP_SHORT_INTEGER_MASK);
        out.write("wdstechnology.com".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());

        assertEquals(21, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("wdstechnology.com", params.get("unassigned/0x42"));

!!!38340919.java!!!	testTypedParamUnassignedWellKnownLongIntegerTokenText() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x15);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write(0x01); // Short-length of well-known parameter token
        out.write(PARAM_UNASSIGNED);
        out.write("wdstechnology.com".getBytes("US-ASCII"));
        out.write(WSP_STRING_TERMINATOR);

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertTrue(unit.decodeContentType(0));

        String mimeType = unit.getValueString();

        assertEquals(STRING_MIME_TYPE_ROLLOVER_CERTIFICATE, mimeType);
        assertEquals(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE, unit.getValue32());

        assertEquals(22, unit.getDecodedDataLength());

        Map<String, String> params = unit.getContentParameters();
        assertEquals("wdstechnology.com", params.get("unassigned/0x42"));
!!!38341047.java!!!	testDecodesReturnsFalse_WhenParamValueNotTerminated() : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        out.write(0x15);
        out.write(SHORT_MIME_TYPE_ROLLOVER_CERTIFICATE | WSP_SHORT_INTEGER_MASK);
        out.write(0x01);
        out.write(PARAM_UNASSIGNED);
        out.write("wdstechnology.com".getBytes("US-ASCII"));

        WspTypeDecoder unit = new WspTypeDecoder(out.toByteArray());
        assertFalse(unit.decodeContentType(0));
