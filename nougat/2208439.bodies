class ApnContextTest
!!!38351799.java!!!	setUp() : void
        super.setUp(getClass().getSimpleName());
        mNetworkConfig.dependencyMet = true;
        mApnContext = new ApnContext(mPhone, PhoneConstants.APN_TYPE_DEFAULT, TAG, mNetworkConfig,
                mDcTracker);
!!!38351927.java!!!	tearDown() : void
        mApnContext = null;
        super.tearDown();
!!!38352055.java!!!	testSetGetApnSetting() : void
        mApnContext.setApnSetting(mApnSetting);
        assertEquals(mApnSetting, mApnContext.getApnSetting());
!!!38352183.java!!!	testGetApnType() : void
        assertEquals(PhoneConstants.APN_TYPE_DEFAULT, mApnContext.getApnType());
!!!38352311.java!!!	testConnectionGeneration() : void
        for (int i = 0; i < 100; i++) {
            mApnContext.incAndGetConnectionGeneration();
            assertEquals(i + 1, mApnContext.getConnectionGeneration());
        }
!!!38352439.java!!!	testDataCallAsyncChannel() : void

        DcAsyncChannel dcAc = mock(DcAsyncChannel.class);

        mApnContext.setDataConnectionAc(dcAc);
        assertEquals(dcAc, mApnContext.getDcAc());
        mApnContext.releaseDataConnection("");
        assertNull(mApnContext.getDcAc());
        assertEquals(DctConstants.State.IDLE, mApnContext.getState());
!!!38352567.java!!!	testDependencyMet() : void
        assertTrue(mApnContext.getDependencyMet());
        mApnContext.setDependencyMet(false);
        assertFalse(mApnContext.getDependencyMet());
!!!38352695.java!!!	testReason() : void
        mApnContext.setReason("dataEnabled");
        assertEquals("dataEnabled", mApnContext.getReason());
        mApnContext.setReason("simLoaded");
        assertEquals("simLoaded", mApnContext.getReason());
!!!38352823.java!!!	testState() : void
        mApnContext.setState(DctConstants.State.DISCONNECTING);
        assertEquals(DctConstants.State.DISCONNECTING, mApnContext.getState());
        mApnContext.setEnabled(true);
        mApnContext.setDependencyMet(true);
        assertFalse(mApnContext.isConnectable());

        mApnContext.setState(DctConstants.State.SCANNING);
        assertTrue(mApnContext.isConnectable());
        assertTrue(mApnContext.isConnectedOrConnecting());

        mApnContext.setState(DctConstants.State.FAILED);
        assertTrue(mApnContext.isDisconnected());
        mApnContext.setState(DctConstants.State.IDLE);
        assertTrue(mApnContext.isDisconnected());
!!!38352951.java!!!	testRefCount() : void
        LocalLog log = new LocalLog(3);
        mApnContext.incRefCount(log);
        verify(mDcTracker, times(1)).setEnabled(eq(DctConstants.APN_DEFAULT_ID), eq(true));
        mApnContext.incRefCount(log);
        verify(mDcTracker, times(1)).setEnabled(eq(DctConstants.APN_DEFAULT_ID), eq(true));

        mApnContext.decRefCount(log);
        verify(mDcTracker, never()).setEnabled(eq(DctConstants.APN_DEFAULT_ID), eq(false));
        mApnContext.decRefCount(log);
        verify(mDcTracker, times(1)).setEnabled(eq(DctConstants.APN_DEFAULT_ID), eq(false));
!!!38353079.java!!!	testConcurrentVoiceAndDataAllowed() : void
        mApnContext.setConcurrentVoiceAndDataAllowed(true);
        assertTrue(mApnContext.isConcurrentVoiceAndDataAllowed());
        mApnContext.setConcurrentVoiceAndDataAllowed(false);
        assertFalse(mApnContext.isConcurrentVoiceAndDataAllowed());
!!!38353207.java!!!	testEnableDisable() : void
        mApnContext.setEnabled(true);
        assertTrue(mApnContext.isEnabled());
        mApnContext.setEnabled(false);
        assertFalse(mApnContext.isEnabled());
!!!38353335.java!!!	testProvisionApn() : void
        mContextFixture.putResource(R.string.mobile_provisioning_apn, "fake_apn");

        ApnSetting myApn = new ApnSetting(
                2163,                   // id
                "44010",                // numeric
                "sp-mode",              // name
                "fake_apn",             // apn
                "",                     // proxy
                "",                     // port
                "",                     // mmsc
                "",                     // mmsproxy
                "",                     // mmsport
                "",                     // user
                "",                     // password
                -1,                     // authtype
                new String[]{"default", "supl"},     // types
                "IP",                   // protocol
                "IP",                   // roaming_protocol
                true,                   // carrier_enabled
                0,                      // bearer
                0,                      // bearer_bitmask
                0,                      // profile_id
                false,                  // modem_cognitive
                0,                      // max_conns
                0,                      // wait_time
                0,                      // max_conns_time
                0,                      // mtu
                "",                     // mvno_type
                "");                    // mnvo_match_data

        mApnContext.setApnSetting(myApn);
        assertTrue(mApnContext.isProvisioningApn());
        mApnContext.setApnSetting(mApnSetting);
        assertFalse(mApnContext.isProvisioningApn());
!!!38353463.java!!!	testIsReady() : void
        mApnContext.setEnabled(true);
        mApnContext.setDependencyMet(true);
        assertTrue(mApnContext.isReady());

        mApnContext.setEnabled(false);
        assertFalse(mApnContext.isReady());

        mApnContext.setDependencyMet(false);
        assertFalse(mApnContext.isReady());

        mApnContext.setEnabled(true);
        assertFalse(mApnContext.isReady());
!!!38353591.java!!!	testErrorCodeRetry() : void
        mContextFixture.putStringArrayResource(
                com.android.internal.R.array.config_cell_retries_per_error_code,
                new String[]{"36,2"});
        mApnContext.resetErrorCodeRetries();

        assertFalse(mApnContext.restartOnError(36));
        assertTrue(mApnContext.restartOnError(36));
        assertFalse(mApnContext.restartOnError(37));
