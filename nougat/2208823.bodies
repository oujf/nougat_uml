class DataConnectionTest
!!!38356535.java!!!	setUp() : void
        logd("+Setup!");
        super.setUp(getClass().getSimpleName());

        doReturn("fake.action_detached").when(mPhone).getActionDetached();
        replaceInstance(ConnectionParams.class, "mApnContext", mCp, mApnContext);
        replaceInstance(ConnectionParams.class, "mRilRat", mCp,
                ServiceState.RIL_RADIO_TECHNOLOGY_UMTS);
        doReturn(mApn1).when(mApnContext).getApnSetting();
        doReturn(PhoneConstants.APN_TYPE_DEFAULT).when(mApnContext).getApnType();

        mDcFailBringUp.saveParameters(0, 0, -2);
        doReturn(mDcFailBringUp).when(mDcTesterFailBringUpAll).getDcFailBringUp();

        mContextFixture.putStringArrayResource(com.android.internal.R.array.
                config_mobile_tcp_buffers, new String[]{
                "umts:131072,262144,1452032,4096,16384,399360",
                "hspa:131072,262144,2441216,4096,16384,399360",
                "hsupa:131072,262144,2441216,4096,16384,399360",
                "hsdpa:131072,262144,2441216,4096,16384,399360",
                "hspap:131072,262144,2441216,4096,16384,399360",
                "edge:16384,32768,131072,4096,16384,65536",
                "gprs:4096,8192,24576,4096,8192,24576",
                "1xrtt:16384,32768,131070,4096,16384,102400",
                "evdo:131072,262144,1048576,4096,16384,524288",
                "lte:524288,1048576,8388608,262144,524288,4194304"});


        mDcp.mApnContext = mApnContext;

        new DataConnectionTestHandler(getClass().getSimpleName()).start();

        waitUntilReady();
        logd("-Setup!");
!!!38356663.java!!!	tearDown() : void
        logd("tearDown");
        mDc = null;
        mDcc = null;
        super.tearDown();
!!!38356791.java!!!	getCurrentState() : IState
        Method method = StateMachine.class.getDeclaredMethod("getCurrentState");
        method.setAccessible(true);
        return (IState) method.invoke(mDc);
!!!38356919.java!!!	getSuggestedRetryDelay(inout ar : AsyncResult) : long
        Class[] cArgs = new Class[1];
        cArgs[0] = AsyncResult.class;
        Method method = DataConnection.class.getDeclaredMethod("getSuggestedRetryDelay", cArgs);
        method.setAccessible(true);
        return (long) method.invoke(mDc, ar);
!!!38357047.java!!!	testSanity() : void
        assertEquals("DcInactiveState", getCurrentState().getName());
!!!38357175.java!!!	testConnectEvent() : void
        testSanity();

        mDc.sendMessage(DataConnection.EVENT_CONNECT, mCp);
        waitForMs(100);

        verify(mCT, times(1)).registerForVoiceCallStarted(any(Handler.class),
                eq(DataConnection.EVENT_DATA_CONNECTION_VOICE_CALL_STARTED), eq(null));
        verify(mCT, times(1)).registerForVoiceCallEnded(any(Handler.class),
                eq(DataConnection.EVENT_DATA_CONNECTION_VOICE_CALL_ENDED), eq(null));

        verify(mSimulatedCommandsVerifier, times(1)).setupDataCall(
                eq(ServiceState.RIL_RADIO_TECHNOLOGY_UMTS), eq(0), eq("spmode.ne.jp"),
                eq(""), eq(""), eq(0), eq("IP"), any(Message.class));

        assertEquals("DcActiveState", getCurrentState().getName());
!!!38357303.java!!!	testDisconnectEvent() : void
        testConnectEvent();

        mDc.sendMessage(DataConnection.EVENT_DISCONNECT, mDcp);
        waitForMs(100);

        verify(mSimulatedCommandsVerifier, times(1)).deactivateDataCall(eq(1),
                eq(RILConstants.DEACTIVATE_REASON_NONE), any(Message.class));

        assertEquals("DcInactiveState", getCurrentState().getName());
!!!38357431.java!!!	testModemSuggestRetry() : void
        DataCallResponse response = new DataCallResponse();
        response.suggestedRetryTime = 0;
        AsyncResult ar = new AsyncResult(null, response, null);
        assertEquals(response.suggestedRetryTime, getSuggestedRetryDelay(ar));

        response.suggestedRetryTime = 1000;
        assertEquals(response.suggestedRetryTime, getSuggestedRetryDelay(ar));

        response.suggestedRetryTime = 9999;
        assertEquals(response.suggestedRetryTime, getSuggestedRetryDelay(ar));
!!!38357559.java!!!	testModemNotSuggestRetry() : void
        DataCallResponse response = new DataCallResponse();
        response.suggestedRetryTime = -1;
        AsyncResult ar = new AsyncResult(null, response, null);
        assertEquals(RetryManager.NO_SUGGESTED_RETRY_DELAY, getSuggestedRetryDelay(ar));

        response.suggestedRetryTime = -5;
        assertEquals(RetryManager.NO_SUGGESTED_RETRY_DELAY, getSuggestedRetryDelay(ar));

        response.suggestedRetryTime = Integer.MIN_VALUE;
        assertEquals(RetryManager.NO_SUGGESTED_RETRY_DELAY, getSuggestedRetryDelay(ar));
!!!38357687.java!!!	testModemSuggestNoRetry() : void
        DataCallResponse response = new DataCallResponse();
        response.suggestedRetryTime = Integer.MAX_VALUE;
        AsyncResult ar = new AsyncResult(null, response, null);
        assertEquals(RetryManager.NO_RETRY, getSuggestedRetryDelay(ar));
