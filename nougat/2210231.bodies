class TelephonyNetworkFactoryTest
!!!38364087.java!!!	waitABit() : void
        try {
            Thread.sleep(250);
        } catch (Exception e) {}
!!!38364215.java!!!	log(inout str : String) : void
        Rlog.d(LOG_TAG + " " + mTestName, str);
!!!38364599.java!!!	makeTnf(in phoneId : int, inout ts : TelephonyNetworkFactoryTest::TestSetup) : TelephonyNetworkFactory
        return new TelephonyNetworkFactory(ts.phoneSwitcherMock, ts.subscriptionControllerMock,
                ts.subscriptionMonitorMock, ts.looper, ts.contextMock, phoneId, ts.dcTrackerMock);
!!!38364727.java!!!	makeSubSpecificDefaultRequest(inout ts : TelephonyNetworkFactoryTest::TestSetup, in subId : int) : NetworkRequest
        NetworkCapabilities netCap = (new NetworkCapabilities()).
                addCapability(NetworkCapabilities.NET_CAPABILITY_INTERNET).
                addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED).
                addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR);
        netCap.setNetworkSpecifier(Integer.toString(subId));
        return ts.connectivityServiceMock.requestNetwork(netCap, null, 0, new Binder(), -1);
!!!38364855.java!!!	makeSubSpecificMmsRequest(inout ts : TelephonyNetworkFactoryTest::TestSetup, in subId : int) : NetworkRequest
        NetworkCapabilities netCap = (new NetworkCapabilities()).
                addCapability(NetworkCapabilities.NET_CAPABILITY_MMS).
                addCapability(NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED).
                addTransportType(NetworkCapabilities.TRANSPORT_CELLULAR);
        netCap.setNetworkSpecifier(Integer.toString(subId));
        return ts.connectivityServiceMock.requestNetwork(netCap, null, 0, new Binder(), -1);
!!!38364983.java!!!	testActive() : void
        mTestName = "testActive";
        final int numberOfPhones = 1;
        final int phoneId = 0;
        final int subId = 0;

        TestSetup ts = new TestSetup(numberOfPhones);

        TelephonyNetworkFactory tnf = makeTnf(phoneId, ts);

        ts.subscriptionControllerMock.setDefaultDataSubId(subId);
        ts.subscriptionControllerMock.setSlotSubId(phoneId, subId);
        ts.subscriptionMonitorMock.notifySubscriptionChanged(phoneId);
        ts.subscriptionMonitorMock.notifyDefaultSubscriptionChanged(phoneId);

        ts.connectivityServiceMock.addDefaultRequest();
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 0) {
            fail("pretest of LiveRequests != 0");
        }

        ts.phoneSwitcherMock.setPhoneActive(phoneId, true);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 1) {
            fail("post-active test of LiveRequests != 1");
        }

        NetworkRequest subSpecificDefault = makeSubSpecificDefaultRequest(ts, subId);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 2) {
            fail("post-second-request test of LiveRequests != 2");
        }

        ts.phoneSwitcherMock.setPhoneActive(phoneId, false);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 0) {
            fail("post-inactive test of LiveRequests != 0");
        }

        NetworkRequest subSpecificMms = makeSubSpecificMmsRequest(ts, subId);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 0) {
            fail("post-mms-add test of LiveRequests != 0");
        }

        ts.phoneSwitcherMock.setPhoneActive(phoneId, true);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 3) {
            fail("post-active-mms-add test of LiveRequests != 3");
        }

        ts.connectivityServiceMock.releaseNetworkRequest(subSpecificDefault);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 2) {
            fail("post-remove-default test of LiveRequests != 2");
        }

        ts.phoneSwitcherMock.setPhoneActive(phoneId, false);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 0) {
            fail("test 8, LiveRequests != 0");
        }

        ts.connectivityServiceMock.releaseNetworkRequest(subSpecificMms);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 0) {
            fail("test 9, LiveRequests != 0");
        }

        ts.phoneSwitcherMock.setPhoneActive(phoneId, true);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 1) {
            fail("test 10, LiveRequests != 1," + ts.dcTrackerMock.getNumberOfLiveRequests());
        }

        ts.die();
!!!38365111.java!!!	testRequests() : void
        mTestName = "testActive";
        final int numberOfPhones = 2;
        final int phoneId = 0;
        final int altPhoneId = 1;
        final int subId = 0;
        final int altSubId = 1;
        final int unusedSubId = 2;

        TestSetup ts = new TestSetup(numberOfPhones);

        TelephonyNetworkFactory tnf = makeTnf(phoneId, ts);

        ts.subscriptionControllerMock.setDefaultDataSubId(subId);
        ts.subscriptionControllerMock.setSlotSubId(phoneId, subId);
        ts.subscriptionMonitorMock.notifySubscriptionChanged(phoneId);
        ts.subscriptionMonitorMock.notifyDefaultSubscriptionChanged(phoneId);
        waitABit();

        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 0) {
            fail("test 1, LiveRequests != 0");
        }

        ts.phoneSwitcherMock.setPhoneActive(phoneId, true);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 0) {
            fail("test 2, LiveRequests != 0");
        }

        ts.connectivityServiceMock.addDefaultRequest();
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 1) {
            fail("test 3, LiveRequests != 1");
        }

        ts.subscriptionControllerMock.setSlotSubId(altPhoneId, altSubId);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 1) {
            fail("test 4, LiveRequests != 1");
        }

        ts.subscriptionControllerMock.setDefaultDataSubId(altSubId);
        ts.subscriptionMonitorMock.notifyDefaultSubscriptionChanged(phoneId);
        ts.subscriptionMonitorMock.notifyDefaultSubscriptionChanged(altPhoneId);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 0) {
            fail("test 5, LiveRequests != 0");
        }

        NetworkRequest subSpecificMms = makeSubSpecificMmsRequest(ts, subId);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 1) {
            fail("test 6,  LiveRequests != 1");
        }

        ts.subscriptionControllerMock.setSlotSubId(phoneId, unusedSubId);
        ts.subscriptionMonitorMock.notifySubscriptionChanged(phoneId);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 0) {
            fail("test 7,  LiveRequests != 0");
        }

        NetworkRequest subSpecificDefault = makeSubSpecificDefaultRequest(ts, subId);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 0) {
            fail("test 8, LiveRequests != 0");
        }

        ts.subscriptionControllerMock.setSlotSubId(phoneId, subId);
        ts.subscriptionMonitorMock.notifySubscriptionChanged(phoneId);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 2) {
            fail("test 9,  LiveRequests != 2");
        }

        ts.subscriptionControllerMock.setDefaultDataSubId(subId);
        ts.subscriptionMonitorMock.notifyDefaultSubscriptionChanged(phoneId);
        ts.subscriptionMonitorMock.notifyDefaultSubscriptionChanged(altPhoneId);
        ts.subscriptionMonitorMock.notifyDefaultSubscriptionChanged(phoneId);
        waitABit();
        if (ts.dcTrackerMock.getNumberOfLiveRequests() != 3) {
            fail("test 10, LiveRequests != 3");
        }
        ts.die();
