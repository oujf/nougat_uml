class PhoneSwitcherMock
!!!38437943.java!!!	PhoneSwitcherMock(in numPhones : int, inout looper : Looper)
        super(looper);

        mNumPhones = numPhones;
        mActivePhoneRegistrants = new RegistrantList[numPhones];
        mIsActive = new AtomicBoolean[numPhones];
        for(int i = 0; i < numPhones; i++) {
            mActivePhoneRegistrants[i] = new RegistrantList();
            mIsActive[i] = new AtomicBoolean(false);
        }
!!!38438071.java!!!	resendDataAllowed(in phoneId : int) : void
        throw new RuntimeException("resendPhone not implemented");
!!!38438199.java!!!	isPhoneActive(in phoneId : int) : boolean
        return mIsActive[phoneId].get();
!!!38438327.java!!!	registerForActivePhoneSwitch(in phoneId : int, inout h : Handler, in what : int, inout o : Object) : void
        validatePhoneId(phoneId);
        Registrant r = new Registrant(h, what, o);
        mActivePhoneRegistrants[phoneId].add(r);
        r.notifyRegistrant();
!!!38438455.java!!!	unregisterForActivePhoneSwitch(in phoneId : int, inout h : Handler) : void
        validatePhoneId(phoneId);
        mActivePhoneRegistrants[phoneId].remove(h);
!!!38438583.java!!!	validatePhoneId(in phoneId : int) : void
        if (phoneId < 0 || phoneId >= mNumPhones) {
            throw new IllegalArgumentException("Invalid PhoneId");
        }
!!!38438711.java!!!	setPhoneActive(in phoneId : int, inout active : boolean) : void
        validatePhoneId(phoneId);
        if (mIsActive[phoneId].getAndSet(active) != active) {
            mActivePhoneRegistrants[phoneId].notifyRegistrants();
        }
