class ImsPhoneCallTest
!!!38374455.java!!!	setUp() : void
        super.setUp(getClass().getSimpleName());
        replaceInstance(ImsPhoneCallTracker.class, "mPhone", mImsCT, mImsPhone);

        mImsCallUT = new ImsPhoneCall(mImsCT, ImsPhoneCall.CONTEXT_FOREGROUND);
!!!38374583.java!!!	tearDown() : void
        mImsCallUT = null;
        super.tearDown();
!!!38374711.java!!!	testAttachDetach() : void
        //verify mConnections has 0 connections and is in IDLE state
        assertEquals(0, mImsCallUT.mConnections.size());
        assertEquals(Call.State.IDLE, mImsCallUT.getState());

        //attach
        mImsCallUT.attach(mConnection1, Call.State.ACTIVE);

        //verify mConnections has 1 connection and is not in idle
        assertEquals(1, mImsCallUT.mConnections.size());
        assertEquals(Call.State.ACTIVE, mImsCallUT.getState());

        //detach
        mImsCallUT.detach(mConnection1);

        //verify mConnections has 0 connections and is in IDLE state
        assertEquals(0, mImsCallUT.mConnections.size());
        assertEquals(Call.State.IDLE, mImsCallUT.getState());
!!!38374839.java!!!	testConnectionDisconnected() : void
        mImsCallUT.attach(mConnection1, Call.State.ACTIVE);
        mImsCallUT.attach(mConnection2, Call.State.ACTIVE);
        //both connections are active, state not change
        mImsCallUT.connectionDisconnected(null);
        assertEquals(Call.State.ACTIVE, mImsCallUT.getState());
        // only one attached connection get disconnected, state not changed
        doReturn(Call.State.DISCONNECTED).when(mConnection1).getState();
        mImsCallUT.connectionDisconnected(null);
        assertEquals(Call.State.ACTIVE, mImsCallUT.getState());
        doReturn(Call.State.DISCONNECTED).when(mConnection2).getState();
        mImsCallUT.connectionDisconnected(null);
        assertEquals(Call.State.DISCONNECTED, mImsCallUT.getState());
!!!38374967.java!!!	testHangup() : void
        try {
            mImsCallUT.hangup();
            verify(mImsCT).hangup(eq(mImsCallUT));
        } catch (Exception e) {
            fail("Exception " + e + " not expected");
        }
!!!38375095.java!!!	testUpdateRingBackTone() : void
        //Mock local tone
        mMediaProfile.mAudioDirection = ImsStreamMediaProfile.DIRECTION_INACTIVE;
        mImsCallProfile.mMediaProfile = mMediaProfile;

        mImsCallUT.update(null, mImsCall, Call.State.ALERTING);
        verify(mImsPhone, times(1)).startRingbackTone();
        assertEquals(Call.State.ALERTING, mImsCallUT.getState());
        mImsCallUT.update(null, mImsCall, Call.State.ACTIVE);
        verify(mImsPhone, times(1)).stopRingbackTone();
        assertEquals(Call.State.ACTIVE, mImsCallUT.getState());
!!!38375223.java!!!	testSwitchWith() : void
        // this call in active state with connection 1 attached
        mImsCallUT.attach(mConnection1, Call.State.ACTIVE);
        // that call in idle state with connection 2 attached
        ImsPhoneCall mImsCallThat = new ImsPhoneCall(mImsCT, ImsPhoneCall.CONTEXT_FOREGROUND);
        mImsCallThat.attach(mConnection2, Call.State.IDLE);

        mImsCallUT.switchWith(mImsCallThat);
        assertEquals(Call.State.ACTIVE, mImsCallThat.getState());
        assertEquals(Call.State.IDLE, mImsCallUT.getState());
        assertEquals(mConnection1, mImsCallThat.getConnections().get(0));
        assertEquals(mConnection2, mImsCallUT.getConnections().get(0));
!!!38375351.java!!!	testMultiParty() : void
        doReturn(mImsCall).when(mConnection1).getImsCall();
        assertFalse(mImsCallUT.isMultiparty());
        verify(mImsCall, times(0)).isMultiparty();

        //get the ImsCall from the first Connection
        mImsCallUT.attach(mConnection1, Call.State.ACTIVE);
        mImsCallUT.isMultiparty();
        verify(mImsCall, times(1)).isMultiparty();
