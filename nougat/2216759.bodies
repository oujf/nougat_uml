class TimeZoneResultAdapter
!!!38463799.java!!!	TimeZoneResultAdapter(inout context : Context, inout tzd : TimeZoneData, inout l : TimeZonePickerView::OnTimeZoneSetListener)
        super();

        mContext = context;
        mTimeZoneData = tzd;
        mTimeZoneSetListener = l;

        mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        mFilteredTimeZoneIndices = new int[mTimeZoneData.size()];

        onSetFilter(TimeZoneFilterTypeAdapter.FILTER_TYPE_NONE, null, 0);
!!!38463927.java!!!	hasResults() : boolean
        return mHasResults;
!!!38464055.java!!!	getLastFilterType() : int
        return mLastFilterType;
!!!38464183.java!!!	getLastFilterString() : String
        return mLastFilterString;
!!!38464311.java!!!	getLastFilterTime() : int
        return mLastFilterTime;
!!!38464439.java!!!	onSetFilter(in filterType : int, inout str : String, in time : int) : void
        if (DEBUG) {
            Log.d(TAG, "onSetFilter: " + filterType + " [" + str + "] " + time);
        }

        mLastFilterType = filterType;
        mLastFilterString = str;
        mLastFilterTime = time;

        mFilteredTimeZoneLength = 0;
        int idx = 0;

        switch (filterType) {
            case TimeZoneFilterTypeAdapter.FILTER_TYPE_EMPTY:
                mFilteredTimeZoneIndices[mFilteredTimeZoneLength++] = EMPTY_INDEX;
                break;
            case TimeZoneFilterTypeAdapter.FILTER_TYPE_NONE:
                // Show the default/current value first
                int defaultTzIndex = mTimeZoneData.getDefaultTimeZoneIndex();
                if (defaultTzIndex != -1) {
                    mFilteredTimeZoneIndices[mFilteredTimeZoneLength++] = defaultTzIndex;
                }

                // Show the recent selections
                SharedPreferences prefs = mContext.getSharedPreferences(SHARED_PREFS_NAME,
                        Context.MODE_PRIVATE);
                String recentsString = prefs.getString(KEY_RECENT_TIMEZONES, null);
                if (!TextUtils.isEmpty(recentsString)) {
                    String[] recents = recentsString.split(RECENT_TIMEZONES_DELIMITER);
                    for (int i = recents.length - 1; i >= 0; i--) {
                        if (!TextUtils.isEmpty(recents[i])
                                && !recents[i].equals(mTimeZoneData.mDefaultTimeZoneId)) {
                            int index = mTimeZoneData.findIndexByTimeZoneIdSlow(recents[i]);
                            if (index != -1) {
                                mFilteredTimeZoneIndices[mFilteredTimeZoneLength++] = index;
                            }
                        }
                    }
                }

                break;
            case TimeZoneFilterTypeAdapter.FILTER_TYPE_GMT:
                ArrayList<Integer> indices = mTimeZoneData.getTimeZonesByOffset(time);
                if (indices != null) {
                    for (Integer i : indices) {
                        mFilteredTimeZoneIndices[mFilteredTimeZoneLength++] = i;
                    }
                }
                break;
            case TimeZoneFilterTypeAdapter.FILTER_TYPE_COUNTRY:
                ArrayList<Integer> tzIds = mTimeZoneData.mTimeZonesByCountry.get(str);
                if (tzIds != null) {
                    for (Integer tzi : tzIds) {
                        mFilteredTimeZoneIndices[mFilteredTimeZoneLength++] = tzi;
                    }
                }
                break;
            case TimeZoneFilterTypeAdapter.FILTER_TYPE_STATE:
                // TODO Filter by state
                break;
            default:
                throw new IllegalArgumentException();
        }
        mHasResults = mFilteredTimeZoneLength > 0;

        notifyDataSetChanged();
!!!38464567.java!!!	saveRecentTimezone(inout id : String) : void
        SharedPreferences prefs = mContext.getSharedPreferences(SHARED_PREFS_NAME,
                Context.MODE_PRIVATE);
        String recentsString = prefs.getString(KEY_RECENT_TIMEZONES, null);
        if (recentsString == null) {
            recentsString = id;
        } else {
            // De-dup
            LinkedHashSet<String> recents = new LinkedHashSet<String>();
            for(String tzId : recentsString.split(RECENT_TIMEZONES_DELIMITER)) {
                if (!recents.contains(tzId) && !id.equals(tzId)) {
                    recents.add(tzId);
                }
            }

            Iterator<String> it = recents.iterator();
            while (recents.size() >= MAX_RECENT_TIMEZONES) {
                if (!it.hasNext()) {
                    break;
                }
                it.next();
                it.remove();
            }
            recents.add(id);

            StringBuilder builder = new StringBuilder();
            boolean first = true;
            for (String recent : recents) {
                if (first) {
                    first = false;
                } else {
                    builder.append(RECENT_TIMEZONES_DELIMITER);
                }
                builder.append(recent);
            }
            recentsString = builder.toString();
        }

        prefs.edit().putString(KEY_RECENT_TIMEZONES, recentsString).apply();
!!!38464695.java!!!	getCount() : int
        return mFilteredTimeZoneLength;
!!!38464823.java!!!	getItem(in position : int) : Object
        if (position < 0 || position >= mFilteredTimeZoneLength) {
            return null;
        }

        return mTimeZoneData.get(mFilteredTimeZoneIndices[position]);
!!!38464951.java!!!	areAllItemsEnabled() : boolean
        return false;
!!!38465079.java!!!	isEnabled(in position : int) : boolean
        return mFilteredTimeZoneIndices[position] >= 0;
!!!38465207.java!!!	getItemId(in position : int) : long
        return mFilteredTimeZoneIndices[position];
!!!38465335.java!!!	getView(in position : int, inout convertView : View, inout parent : ViewGroup) : View
        View v = convertView;

        if (mFilteredTimeZoneIndices[position] == EMPTY_INDEX) {
            v = mInflater.inflate(R.layout.empty_time_zone_item, null);
            return v;
        }

        // We'll need to re-inflate the view if it was null, or if it was used as an empty item.
        if (v == null || v.findViewById(R.id.empty_item) != null) {
            v = mInflater.inflate(R.layout.time_zone_item, null);
            ViewHolder.setupViewHolder(v);
        }

        ViewHolder vh = (ViewHolder) v.getTag();

        TimeZoneInfo tzi = mTimeZoneData.get(mFilteredTimeZoneIndices[position]);
        v.setTag(VIEW_TAG_TIME_ZONE, tzi);

        vh.timeZone.setText(tzi.mDisplayName);

        vh.timeOffset.setText(tzi.getGmtDisplayName(mContext));

        String location = tzi.mCountry;
        if (location == null) {
            vh.location.setVisibility(View.INVISIBLE);
        } else {
            vh.location.setText(location);
            vh.location.setVisibility(View.VISIBLE);
        }

        return v;
!!!38465463.java!!!	hasStableIds() : boolean
        return true;
!!!38465591.java!!!	onItemClick(inout parent : AdapterView, inout v : View, in position : int, in id : long) : void
        if (mTimeZoneSetListener != null) {
            TimeZoneInfo tzi = (TimeZoneInfo) v.getTag(VIEW_TAG_TIME_ZONE);
            if (tzi != null) {
              mTimeZoneSetListener.onTimeZoneSet(tzi);
              saveRecentTimezone(tzi.mTzId);
            }
        }
