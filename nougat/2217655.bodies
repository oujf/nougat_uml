class VCardComposer
!!!38472247.java!!!	VCardComposer(inout context : Context)
        this(context, VCardConfig.VCARD_TYPE_DEFAULT, null, true);
!!!38472375.java!!!	VCardComposer(inout context : Context, in vcardType : int)
        this(context, vcardType, null, true);
!!!38472503.java!!!	VCardComposer(inout context : Context, in vcardType : int, inout charset : String)
        this(context, vcardType, charset, true);
!!!38472631.java!!!	VCardComposer(in context : Context, in vcardType : int, in careHandlerErrors : boolean)
        this(context, vcardType, null, careHandlerErrors);
!!!38472759.java!!!	VCardComposer(in context : Context, in vcardType : int, inout charset : String, in careHandlerErrors : boolean)
        this(context, context.getContentResolver(), vcardType, charset, careHandlerErrors);
!!!38472887.java!!!	VCardComposer(in context : Context, inout resolver : ContentResolver, in vcardType : int, inout charset : String, in careHandlerErrors : boolean)
        // Not used right now
        // mContext = context;
        mVCardType = vcardType;
        mContentResolver = resolver;

        mIsDoCoMo = VCardConfig.isDoCoMo(vcardType);

        charset = (TextUtils.isEmpty(charset) ? VCardConfig.DEFAULT_EXPORT_CHARSET : charset);
        final boolean shouldAppendCharsetParam = !(
                VCardConfig.isVersion30(vcardType) && UTF_8.equalsIgnoreCase(charset));

        if (mIsDoCoMo || shouldAppendCharsetParam) {
            if (SHIFT_JIS.equalsIgnoreCase(charset)) {
                mCharset = charset;
            } else {
                /* Log.w(LOG_TAG,
                        "The charset \"" + charset + "\" is used while "
                        + SHIFT_JIS + " is needed to be used."); */
                if (TextUtils.isEmpty(charset)) {
                    mCharset = SHIFT_JIS;
                } else {
                    mCharset = charset;
                }
            }
        } else {
            if (TextUtils.isEmpty(charset)) {
                mCharset = UTF_8;
            } else {
                mCharset = charset;
            }
        }

        Log.d(LOG_TAG, "Use the charset \"" + mCharset + "\"");
!!!38473015.java!!!	init() : boolean
        return init(null, null);
!!!38473143.java!!!	initWithRawContactsEntityUri(inout contentUriForRawContactsEntity : Uri) : boolean
        return init(Contacts.CONTENT_URI, sContactsProjection, null, null, null,
                contentUriForRawContactsEntity);
!!!38473271.java!!!	init(in selection : String, in selectionArgs : String) : boolean
        return init(Contacts.CONTENT_URI, sContactsProjection, selection, selectionArgs,
                null, null);
!!!38473399.java!!!	init(in contentUri : Uri, in selection : String, in selectionArgs : String, in sortOrder : String) : boolean
        return init(contentUri, sContactsProjection, selection, selectionArgs, sortOrder, null);
!!!38473527.java!!!	init(in contentUri : Uri, in selection : String, in selectionArgs : String, in sortOrder : String, in contentUriForRawContactsEntity : Uri) : boolean
        return init(contentUri, sContactsProjection, selection, selectionArgs, sortOrder,
                contentUriForRawContactsEntity);
!!!38473655.java!!!	init(in contentUri : Uri, in projection : String, in selection : String, in selectionArgs : String, in sortOrder : String, inout contentUriForRawContactsEntity : Uri) : boolean
        if (!ContactsContract.AUTHORITY.equals(contentUri.getAuthority())) {
            if (DEBUG) Log.d(LOG_TAG, "Unexpected contentUri: " + contentUri);
            mErrorReason = FAILURE_REASON_UNSUPPORTED_URI;
            return false;
        }

        if (!initInterFirstPart(contentUriForRawContactsEntity)) {
            return false;
        }
        if (!initInterCursorCreationPart(contentUri, projection, selection, selectionArgs,
                sortOrder)) {
            return false;
        }
        if (!initInterMainPart()) {
            return false;
        }
        return initInterLastPart();
!!!38473783.java!!!	init(inout cursor : Cursor) : boolean
        return initWithCallback(cursor, null);
!!!38473911.java!!!	initWithCallback(inout cursor : Cursor, inout rawContactEntitlesInfoCallback : VCardComposer::RawContactEntitlesInfoCallback) : boolean
        if (!initInterFirstPart(null)) {
            return false;
        }
        mCursorSuppliedFromOutside = true;
        mCursor = cursor;
        mRawContactEntitlesInfoCallback = rawContactEntitlesInfoCallback;
        if (!initInterMainPart()) {
            return false;
        }
        return initInterLastPart();
!!!38474039.java!!!	initInterFirstPart(inout contentUriForRawContactsEntity : Uri) : boolean
        mContentUriForRawContactsEntity =
                (contentUriForRawContactsEntity != null ? contentUriForRawContactsEntity :
                        RawContactsEntity.CONTENT_URI);
        if (mInitDone) {
            Log.e(LOG_TAG, "init() is already called");
            return false;
        }
        return true;
!!!38474167.java!!!	initInterCursorCreationPart(in contentUri : Uri, in projection : String, in selection : String, in selectionArgs : String, in sortOrder : String) : boolean
        mCursorSuppliedFromOutside = false;
        mCursor = mContentResolver.query(
                contentUri, projection, selection, selectionArgs, sortOrder);
        if (mCursor == null) {
            Log.e(LOG_TAG, String.format("Cursor became null unexpectedly"));
            mErrorReason = FAILURE_REASON_FAILED_TO_GET_DATABASE_INFO;
            return false;
        }
        return true;
!!!38474295.java!!!	initInterMainPart() : boolean
        if (mCursor.getCount() == 0 || !mCursor.moveToFirst()) {
            if (DEBUG) {
                Log.d(LOG_TAG,
                    String.format("mCursor has an error (getCount: %d): ", mCursor.getCount()));
            }
            closeCursorIfAppropriate();
            return false;
        }
        mIdColumn = mCursor.getColumnIndex(Data.CONTACT_ID);
        if (mIdColumn < 0) {
            mIdColumn = mCursor.getColumnIndex(Contacts._ID);
        }
        return mIdColumn >= 0;
!!!38474423.java!!!	initInterLastPart() : boolean
        mInitDone = true;
        mTerminateCalled = false;
        return true;
!!!38474551.java!!!	createOneEntry() : String
        return createOneEntry(null);
!!!38474679.java!!!	createOneEntry(inout getEntityIteratorMethod : Method) : String
        if (mIsDoCoMo && !mFirstVCardEmittedInDoCoMoCase) {
            mFirstVCardEmittedInDoCoMoCase = true;
            // Previously we needed to emit empty data for this specific case, but actually
            // this doesn't work now, as resolver doesn't return any data with "-1" contactId.
            // TODO: re-introduce or remove this logic. Needs to modify unit test when we
            // re-introduce the logic.
            // return createOneEntryInternal("-1", getEntityIteratorMethod);
        }

        final String vcard = createOneEntryInternal(mCursor.getLong(mIdColumn),
                getEntityIteratorMethod);
        if (!mCursor.moveToNext()) {
            Log.e(LOG_TAG, "Cursor#moveToNext() returned false");
        }
        return vcard;
!!!38475063.java!!!	createOneEntryInternal(in contactId : long, in getEntityIteratorMethod : Method) : String
        final Map<String, List<ContentValues>> contentValuesListMap =
                new HashMap<String, List<ContentValues>>();
        // The resolver may return the entity iterator with no data. It is possible.
        // e.g. If all the data in the contact of the given contact id are not exportable ones,
        //      they are hidden from the view of this method, though contact id itself exists.
        EntityIterator entityIterator = null;
        try {
            Uri uri = mContentUriForRawContactsEntity;
            if (mRawContactEntitlesInfoCallback != null) {
                RawContactEntitlesInfo rawContactEntitlesInfo =
                        mRawContactEntitlesInfoCallback.getRawContactEntitlesInfo(contactId);
                uri = rawContactEntitlesInfo.rawContactEntitlesUri;
                contactId = rawContactEntitlesInfo.contactId;
            }
            final String selection = Data.CONTACT_ID + "=?";
            final String[] selectionArgs = new String[] {String.valueOf(contactId)};
            if (getEntityIteratorMethod != null) {
                // Please note that this branch is executed by unit tests only
                try {
                    entityIterator = (EntityIterator)getEntityIteratorMethod.invoke(null,
                            mContentResolver, uri, selection, selectionArgs, null);
                } catch (IllegalArgumentException e) {
                    Log.e(LOG_TAG, "IllegalArgumentException has been thrown: " +
                            e.getMessage());
                } catch (IllegalAccessException e) {
                    Log.e(LOG_TAG, "IllegalAccessException has been thrown: " +
                            e.getMessage());
                } catch (InvocationTargetException e) {
                    Log.e(LOG_TAG, "InvocationTargetException has been thrown: ", e);
                    throw new RuntimeException("InvocationTargetException has been thrown");
                }
            } else {
                entityIterator = RawContacts.newEntityIterator(mContentResolver.query(
                        uri, null, selection, selectionArgs, null));
            }

            if (entityIterator == null) {
                Log.e(LOG_TAG, "EntityIterator is null");
                return "";
            }

            if (!entityIterator.hasNext()) {
                Log.w(LOG_TAG, "Data does not exist. contactId: " + contactId);
                return "";
            }

            while (entityIterator.hasNext()) {
                Entity entity = entityIterator.next();
                for (NamedContentValues namedContentValues : entity.getSubValues()) {
                    ContentValues contentValues = namedContentValues.values;
                    String key = contentValues.getAsString(Data.MIMETYPE);
                    if (key != null) {
                        List<ContentValues> contentValuesList =
                                contentValuesListMap.get(key);
                        if (contentValuesList == null) {
                            contentValuesList = new ArrayList<ContentValues>();
                            contentValuesListMap.put(key, contentValuesList);
                        }
                        contentValuesList.add(contentValues);
                    }
                }
            }
        } finally {
            if (entityIterator != null) {
                entityIterator.close();
            }
        }

        return buildVCard(contentValuesListMap);
!!!38475191.java!!!	setPhoneNumberTranslationCallback(inout callback : VCardPhoneNumberTranslationCallback) : void
        mPhoneTranslationCallback = callback;
!!!38475319.java!!!	buildVCard(in contentValuesListMap : Map<String, List<ContentValues>>) : String
        if (contentValuesListMap == null) {
            Log.e(LOG_TAG, "The given map is null. Ignore and return empty String");
            return "";
        } else {
            final VCardBuilder builder = new VCardBuilder(mVCardType, mCharset);
            builder.appendNameProperties(contentValuesListMap.get(StructuredName.CONTENT_ITEM_TYPE))
                    .appendNickNames(contentValuesListMap.get(Nickname.CONTENT_ITEM_TYPE))
                    .appendPhones(contentValuesListMap.get(Phone.CONTENT_ITEM_TYPE),
                            mPhoneTranslationCallback)
                    .appendEmails(contentValuesListMap.get(Email.CONTENT_ITEM_TYPE))
                    .appendPostals(contentValuesListMap.get(StructuredPostal.CONTENT_ITEM_TYPE))
                    .appendOrganizations(contentValuesListMap.get(Organization.CONTENT_ITEM_TYPE))
                    .appendWebsites(contentValuesListMap.get(Website.CONTENT_ITEM_TYPE));
            if ((mVCardType & VCardConfig.FLAG_REFRAIN_IMAGE_EXPORT) == 0) {
                builder.appendPhotos(contentValuesListMap.get(Photo.CONTENT_ITEM_TYPE));
            }
            builder.appendNotes(contentValuesListMap.get(Note.CONTENT_ITEM_TYPE))
                    .appendEvents(contentValuesListMap.get(Event.CONTENT_ITEM_TYPE))
                    .appendIms(contentValuesListMap.get(Im.CONTENT_ITEM_TYPE))
                    .appendSipAddresses(contentValuesListMap.get(SipAddress.CONTENT_ITEM_TYPE))
                    .appendRelation(contentValuesListMap.get(Relation.CONTENT_ITEM_TYPE));
            return builder.toString();
        }
!!!38475447.java!!!	terminate() : void
        closeCursorIfAppropriate();
        mTerminateCalled = true;
!!!38475575.java!!!	closeCursorIfAppropriate() : void
        if (!mCursorSuppliedFromOutside && mCursor != null) {
            try {
                mCursor.close();
            } catch (SQLiteException e) {
                Log.e(LOG_TAG, "SQLiteException on Cursor#close(): " + e.getMessage());
            }
            mCursor = null;
        }
!!!38475703.java!!!	finalize() : void
        try {
            if (!mTerminateCalled) {
                Log.e(LOG_TAG, "finalized() is called before terminate() being called");
            }
        } finally {
            super.finalize();
        }
!!!38475831.java!!!	getCount() : int
        if (mCursor == null) {
            Log.w(LOG_TAG, "This object is not ready yet.");
            return 0;
        }
        return mCursor.getCount();
!!!38475959.java!!!	isAfterLast() : boolean
        if (mCursor == null) {
            Log.w(LOG_TAG, "This object is not ready yet.");
            return false;
        }
        return mCursor.isAfterLast();
!!!38476087.java!!!	getErrorReason() : String
        return mErrorReason;
