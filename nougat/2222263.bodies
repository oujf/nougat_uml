class VCardParserImpl_V30
!!!38520631.java!!!	VCardParserImpl_V30()
        super();
!!!38520759.java!!!	VCardParserImpl_V30(in vcardType : int)
        super(vcardType);
!!!38520887.java!!!	getVersion() : int
        return VCardConfig.VERSION_30;
!!!38521015.java!!!	getVersionString() : String
        return VCardConstants.VERSION_V30;
!!!38521143.java!!!	getLine() : String
        if (mPreviousLine != null) {
            String ret = mPreviousLine;
            mPreviousLine = null;
            return ret;
        } else {
            return mReader.readLine();
        }
!!!38521271.java!!!	getNonEmptyLine() : String
        String line;
        StringBuilder builder = null;
        while ((line = mReader.readLine()) != null) {
            // Skip empty lines in order to accomodate implementations that
            // send line termination variations such as \r\r\n.
            if (line.length() == 0) {
                continue;
            } else if (line.charAt(0) == ' ' || line.charAt(0) == '\t') {
                // RFC 2425 describes line continuation as \r\n followed by
                // a single ' ' or '\t' whitespace character.
                if (builder == null) {
                    builder = new StringBuilder();
                }
                if (mPreviousLine != null) {
                    builder.append(mPreviousLine);
                    mPreviousLine = null;
                }
                builder.append(line.substring(1));
            } else {
                if (builder != null || mPreviousLine != null) {
                    break;
                }
                mPreviousLine = line;
            }
        }

        String ret = null;
        if (builder != null) {
            ret = builder.toString();
        } else if (mPreviousLine != null) {
            ret = mPreviousLine;
        }
        mPreviousLine = line;
        if (ret == null) {
            throw new VCardException("Reached end of buffer.");
        }
        return ret;
!!!38521399.java!!!	readBeginVCard(inout allowGarbage : boolean) : boolean
        // TODO: vCard 3.0 supports group.
        return super.readBeginVCard(allowGarbage);
!!!38521527.java!!!	handleParams(inout propertyData : VCardProperty, in params : String) : void
        try {
            super.handleParams(propertyData, params);
        } catch (VCardException e) {
            // maybe IANA type
            String[] strArray = params.split("=", 2);
            if (strArray.length == 2) {
                handleAnyParam(propertyData, strArray[0], strArray[1]);
            } else {
                // Must not come here in the current implementation.
                throw new VCardException(
                        "Unknown params value: " + params);
            }
        }
!!!38521655.java!!!	handleAnyParam(inout propertyData : VCardProperty, in paramName : String, in paramValue : String) : void
        splitAndPutParam(propertyData, paramName, paramValue);
!!!38521783.java!!!	handleParamWithoutName(inout property : VCardProperty, in paramValue : String) : void
        handleType(property, paramValue);
!!!38521911.java!!!	handleType(inout property : VCardProperty, in paramValue : String) : void
        splitAndPutParam(property, VCardConstants.PARAM_TYPE, paramValue);
!!!38522039.java!!!	splitAndPutParam(inout property : VCardProperty, inout paramName : String, inout paramValue : String) : void
        // "comma,separated:inside.dquote",pref
        //   -->
        // - comma,separated:inside.dquote
        // - pref
        //
        // Note: Though there's a code, we don't need to take much care of
        // wrongly-added quotes like the example above, as they induce
        // parse errors at the top level (when splitting a line into parts).
        StringBuilder builder = null;  // Delay initialization.
        boolean insideDquote = false;
        final int length = paramValue.length();
        for (int i = 0; i < length; i++) {
            final char ch = paramValue.charAt(i);
            if (ch == '"') {
                if (insideDquote) {
                    // End of Dquote.
                    property.addParameter(paramName, encodeParamValue(builder.toString()));
                    builder = null;
                    insideDquote = false;
                } else {
                    if (builder != null) {
                        if (builder.length() > 0) {
                            // e.g.
                            // pref"quoted"
                            Log.w(LOG_TAG, "Unexpected Dquote inside property.");
                        } else {
                            // e.g.
                            // pref,"quoted"
                            // "quoted",pref
                            property.addParameter(paramName, encodeParamValue(builder.toString()));
                        }
                    }
                    insideDquote = true;
                }
            } else if (ch == ',' && !insideDquote) {
                if (builder == null) {
                    Log.w(LOG_TAG, "Comma is used before actual string comes. (" +
                            paramValue + ")");
                } else {
                    property.addParameter(paramName, encodeParamValue(builder.toString()));
                    builder = null;
                }
            } else {
                // To stop creating empty StringBuffer at the end of parameter,
                // we delay creating this object until this point.
                if (builder == null) {
                    builder = new StringBuilder();
                }
                builder.append(ch);
            }
        }
        if (insideDquote) {
            // e.g.
            // "non-quote-at-end
            Log.d(LOG_TAG, "Dangling Dquote.");
        }
        if (builder != null) {
            if (builder.length() == 0) {
                Log.w(LOG_TAG, "Unintended behavior. We must not see empty StringBuilder " +
                        "at the end of parameter value parsing.");
            } else {
                property.addParameter(paramName, encodeParamValue(builder.toString()));
            }
        }
!!!38522167.java!!!	encodeParamValue(inout paramValue : String) : String
        return VCardUtils.convertStringCharset(
                paramValue, VCardConfig.DEFAULT_INTERMEDIATE_CHARSET, "UTF-8");
!!!38522295.java!!!	handleAgent(inout property : VCardProperty) : void
        // The way how vCard 3.0 supports "AGENT" is completely different from vCard 2.1.
        //
        // e.g.
        // AGENT:BEGIN:VCARD\nFN:Joe Friday\nTEL:+1-919-555-7878\n
        //  TITLE:Area Administrator\, Assistant\n EMAIL\;TYPE=INTERN\n
        //  ET:jfriday@host.com\nEND:VCARD\n
        //
        // TODO: fix this.
        //
        // issue:
        //  vCard 3.0 also allows this as an example.
        //
        // AGENT;VALUE=uri:
        //  CID:JQPUBLIC.part3.960129T083020.xyzMail@host3.com
        //
        // This is not vCard. Should we support this?
        //
        // Just ignore the line for now, since we cannot know how to handle it...
        if (!mEmittedAgentWarning) {
            Log.w(LOG_TAG, "AGENT in vCard 3.0 is not supported yet. Ignore it");
            mEmittedAgentWarning = true;
        }
!!!38522423.java!!!	getBase64(in firstString : String) : String
        return firstString;
!!!38522551.java!!!	maybeUnescapeText(in text : String) : String
        return unescapeText(text);
!!!38522679.java!!!	unescapeText(in text : String) : String
        StringBuilder builder = new StringBuilder();
        final int length = text.length();
        for (int i = 0; i < length; i++) {
            char ch = text.charAt(i);
            if (ch == '\\' && i < length - 1) {
                final char next_ch = text.charAt(++i);
                if (next_ch == 'n' || next_ch == 'N') {
                    builder.append("\n");
                } else {
                    builder.append(next_ch);
                }
            } else {
                builder.append(ch);
            }
        }
        return builder.toString();
!!!38522807.java!!!	maybeUnescapeCharacter(in ch : char) : String
        return unescapeCharacter(ch);
!!!38522935.java!!!	unescapeCharacter(in ch : char) : String
        if (ch == 'n' || ch == 'N') {
            return "\n";
        } else {
            return String.valueOf(ch);
        }
!!!38523063.java!!!	getKnownPropertyNameSet() : String
        return VCardParser_V30.sKnownPropertyNameSet;
