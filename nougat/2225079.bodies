class VCardExporterTests
!!!38536247.java!!!	testSimpleV21() : void
        mVerifier.initForExportTest(V21);
        mVerifier.addInputEntry().addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "Ando")
                .put(StructuredName.GIVEN_NAME, "Roid");
        mVerifier.addPropertyNodesVerifierElem()
                .addExpectedNode("FN", "Roid Ando")
                .addExpectedNode("N", "Ando;Roid;;;",
                        Arrays.asList("Ando", "Roid", "", "", ""));
!!!38536375.java!!!	testStructuredNameBasic(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        mVerifier.addInputEntry().addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "AppropriateFamilyName")
                .put(StructuredName.GIVEN_NAME, "AppropriateGivenName")
                .put(StructuredName.MIDDLE_NAME, "AppropriateMiddleName")
                .put(StructuredName.PREFIX, "AppropriatePrefix")
                .put(StructuredName.SUFFIX, "AppropriateSuffix")
                .put(StructuredName.DISPLAY_NAME, "DISPLAY NAME");

        mVerifier.addPropertyNodesVerifierElem()
                .addExpectedNodeWithOrder("N",
                        "AppropriateFamilyName;AppropriateGivenName;AppropriateMiddleName;"
                        + "AppropriatePrefix;AppropriateSuffix",
                        Arrays.asList("AppropriateFamilyName", "AppropriateGivenName",
                                "AppropriateMiddleName", "AppropriatePrefix", "AppropriateSuffix"))
                .addExpectedNodeWithOrder("FN", "DISPLAY NAME");
!!!38536503.java!!!	testStructuredNameBasicV21() : void
        testStructuredNameBasic(V21);
!!!38536631.java!!!	testStructuredNameBasicV30() : void
        testStructuredNameBasic(V30);
!!!38536759.java!!!	testStructuredNameBasicV40() : void
        testStructuredNameBasic(V40);
!!!38536887.java!!!	testStructuredNameUsePrimaryCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        final ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "DoNotEmitFamilyName1")
                .put(StructuredName.GIVEN_NAME, "DoNotEmitGivenName1")
                .put(StructuredName.MIDDLE_NAME, "DoNotEmitMiddleName1")
                .put(StructuredName.PREFIX, "DoNotEmitPrefix1")
                .put(StructuredName.SUFFIX, "DoNotEmitSuffix1")
                .put(StructuredName.DISPLAY_NAME, "DoNotEmitDisplayName1");

        // With "IS_PRIMARY=1". This is what we should use.
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "AppropriateFamilyName")
                .put(StructuredName.GIVEN_NAME, "AppropriateGivenName")
                .put(StructuredName.MIDDLE_NAME, "AppropriateMiddleName")
                .put(StructuredName.PREFIX, "AppropriatePrefix")
                .put(StructuredName.SUFFIX, "AppropriateSuffix")
                .put(StructuredName.DISPLAY_NAME, "AppropriateDisplayName")
                .put(StructuredName.IS_PRIMARY, 1);

        // With "IS_PRIMARY=1", but we should ignore this time, since this is second, not first.
        // vCard 2.1 does not specify anything about the number of N properties. We choose not
        // emitting this property.
        // vCard 3.0 does (There must be one N property)
        // vCard 4.0 (rev13) does (cardinality (0, 1)).
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "DoNotEmitFamilyName2")
                .put(StructuredName.GIVEN_NAME, "DoNotEmitGivenName2")
                .put(StructuredName.MIDDLE_NAME, "DoNotEmitMiddleName2")
                .put(StructuredName.PREFIX, "DoNotEmitPrefix2")
                .put(StructuredName.SUFFIX, "DoNotEmitSuffix2")
                .put(StructuredName.DISPLAY_NAME, "DoNotEmitDisplayName2")
                .put(StructuredName.IS_PRIMARY, 1);

       mVerifier.addPropertyNodesVerifierElem()
                .addExpectedNodeWithOrder("N",
                        "AppropriateFamilyName;AppropriateGivenName;AppropriateMiddleName;"
                        + "AppropriatePrefix;AppropriateSuffix",
                        Arrays.asList("AppropriateFamilyName", "AppropriateGivenName",
                                "AppropriateMiddleName", "AppropriatePrefix", "AppropriateSuffix"))
                .addExpectedNodeWithOrder("FN", "AppropriateDisplayName");
!!!38537015.java!!!	testStructuredNameUsePrimaryV21() : void
        testStructuredNameUsePrimaryCommon(V21);
!!!38537143.java!!!	testStructuredNameUsePrimaryV30() : void
        testStructuredNameUsePrimaryCommon(V30);
!!!38537271.java!!!	testStructuredNameUsePrimaryV40() : void
        testStructuredNameUsePrimaryCommon(V40);
!!!38537399.java!!!	testStructuredNameUseSuperPrimaryCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        final ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "DoNotEmitFamilyName1")
                .put(StructuredName.GIVEN_NAME, "DoNotEmitGivenName1")
                .put(StructuredName.MIDDLE_NAME, "DoNotEmitMiddleName1")
                .put(StructuredName.PREFIX, "DoNotEmitPrefix1")
                .put(StructuredName.SUFFIX, "DoNotEmitSuffix1")
                .put(StructuredName.DISPLAY_NAME, "DoNotEmitDisplay1");

        // With "IS_PRIMARY=1", but we should ignore this time.
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "DoNotEmitFamilyName2")
                .put(StructuredName.GIVEN_NAME, "DoNotEmitGivenName2")
                .put(StructuredName.MIDDLE_NAME, "DoNotEmitMiddleName2")
                .put(StructuredName.PREFIX, "DoNotEmitPrefix2")
                .put(StructuredName.SUFFIX, "DoNotEmitSuffix2")
                .put(StructuredName.DISPLAY_NAME, "DoNotEmitDisplay2")
                .put(StructuredName.IS_PRIMARY, 1);

        // With "IS_SUPER_PRIMARY=1". This is what we should use.
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "AppropriateFamilyName")
                .put(StructuredName.GIVEN_NAME, "AppropriateGivenName")
                .put(StructuredName.MIDDLE_NAME, "AppropriateMiddleName")
                .put(StructuredName.PREFIX, "AppropriatePrefix")
                .put(StructuredName.SUFFIX, "AppropriateSuffix")
                .put(StructuredName.DISPLAY_NAME, "AppropriateDisplayName")
                .put(StructuredName.IS_SUPER_PRIMARY, 1);

        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "DoNotEmitFamilyName3")
                .put(StructuredName.GIVEN_NAME, "DoNotEmitGivenName3")
                .put(StructuredName.MIDDLE_NAME, "DoNotEmitMiddleName3")
                .put(StructuredName.PREFIX, "DoNotEmitPrefix3")
                .put(StructuredName.SUFFIX, "DoNotEmitSuffix3")
                .put(StructuredName.DISPLAY_NAME, "DoNotEmitDisplay3")
                .put(StructuredName.IS_PRIMARY, 1);

        final PropertyNodesVerifierElem elem = mVerifier.addPropertyNodesVerifierElem();
        elem.addExpectedNodeWithOrder("N",
                "AppropriateFamilyName;AppropriateGivenName;AppropriateMiddleName;"
                + "AppropriatePrefix;AppropriateSuffix",
                Arrays.asList("AppropriateFamilyName", "AppropriateGivenName",
                        "AppropriateMiddleName", "AppropriatePrefix", "AppropriateSuffix"));

        elem.addExpectedNodeWithOrder("FN", "AppropriateDisplayName");
!!!38537527.java!!!	testStructuredNameUseSuperPrimaryV21() : void
        testStructuredNameUseSuperPrimaryCommon(V21);
!!!38537655.java!!!	testStructuredNameUseSuperPrimaryV30() : void
        testStructuredNameUseSuperPrimaryCommon(V30);
!!!38537783.java!!!	testStructuredNameUseSuperPrimaryV40() : void
        testStructuredNameUseSuperPrimaryCommon(V40);
!!!38537911.java!!!	testStructuredNamePhoneticNameCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        final ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "AppropriateFamilyName")
                .put(StructuredName.GIVEN_NAME, "AppropriateGivenName")
                .put(StructuredName.MIDDLE_NAME, "AppropriateMiddleName")
                .put(StructuredName.PREFIX, "AppropriatePrefix")
                .put(StructuredName.SUFFIX, "AppropriateSuffix")
                .put(StructuredName.DISPLAY_NAME, "AppropriateDisplayName")
                .put(StructuredName.PHONETIC_FAMILY_NAME, "AppropriatePhoneticFamily")
                .put(StructuredName.PHONETIC_GIVEN_NAME, "AppropriatePhoneticGiven")
                .put(StructuredName.PHONETIC_MIDDLE_NAME, "AppropriatePhoneticMiddle");

        final PropertyNodesVerifierElem elem = mVerifier.addPropertyNodesVerifierElem();
        if (VCardConfig.isVersion40(vcardType)) {
            final ContentValues contentValues = new ContentValues();
            contentValues.put("SORT-AS",
                    "AppropriateFamilyName;AppropriateGivenName;AppropriateMiddleName");
            // vCard 4.0 (rev13) now uses SORT-AS parameter, which is not compatible with
            // either 2.1 nor 3.0.
            elem.addExpectedNodeWithOrder("N",
                    "AppropriateFamilyName;AppropriateGivenName;AppropriateMiddleName;"
                    + "AppropriatePrefix;AppropriateSuffix",
                    Arrays.asList("AppropriateFamilyName", "AppropriateGivenName",
                            "AppropriateMiddleName", "AppropriatePrefix", "AppropriateSuffix"),
                    contentValues);
        } else {
            elem.addExpectedNodeWithOrder("N",
                    "AppropriateFamilyName;AppropriateGivenName;AppropriateMiddleName;"
                    + "AppropriatePrefix;AppropriateSuffix",
                    Arrays.asList("AppropriateFamilyName", "AppropriateGivenName",
                            "AppropriateMiddleName", "AppropriatePrefix", "AppropriateSuffix"));
            if (VCardConfig.isVersion30(vcardType)) {
                elem.addExpectedNode("SORT-STRING",
                        "AppropriatePhoneticGiven AppropriatePhoneticMiddle"
                        + " AppropriatePhoneticFamily");
            }
        }

        elem.addExpectedNodeWithOrder("FN", "AppropriateDisplayName")
            .addExpectedNode("X-PHONETIC-FIRST-NAME", "AppropriatePhoneticGiven")
            .addExpectedNode("X-PHONETIC-MIDDLE-NAME", "AppropriatePhoneticMiddle")
            .addExpectedNode("X-PHONETIC-LAST-NAME", "AppropriatePhoneticFamily");
!!!38538039.java!!!	testStructuredNamePhoneticNameV21() : void
        testStructuredNamePhoneticNameCommon(V21);
!!!38538167.java!!!	testStructuredNamePhoneticNameV30() : void
        testStructuredNamePhoneticNameCommon(V30);
!!!38538295.java!!!	testStructuredNamePhoneticNameV40() : void
        testStructuredNamePhoneticNameCommon(V40);
!!!38538423.java!!!	testStructuredNameComplicatedCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        final ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "DoNotEmitFamilyName1")
                .put(StructuredName.GIVEN_NAME, "DoNotEmitGivenName1")
                .put(StructuredName.MIDDLE_NAME, "DoNotEmitMiddleName1")
                .put(StructuredName.PREFIX, "DoNotEmitPrefix1")
                .put(StructuredName.SUFFIX, "DoNotEmitSuffix1")
                .put(StructuredName.PHONETIC_FAMILY_NAME, "DoNotEmitPhoneticFamily1")
                .put(StructuredName.PHONETIC_GIVEN_NAME, "DoNotEmitPhoneticGiven1")
                .put(StructuredName.PHONETIC_MIDDLE_NAME, "DoNotEmitPhoneticMiddle1");

        // With "IS_PRIMARY=1", but we should ignore this time.
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "DoNotEmitFamilyName2")
                .put(StructuredName.GIVEN_NAME, "DoNotEmitGivenName2")
                .put(StructuredName.MIDDLE_NAME, "DoNotEmitMiddleName2")
                .put(StructuredName.PREFIX, "DoNotEmitPrefix2")
                .put(StructuredName.SUFFIX, "DoNotEmitSuffix2")
                .put(StructuredName.PHONETIC_FAMILY_NAME, "DoNotEmitPhoneticFamily2")
                .put(StructuredName.PHONETIC_GIVEN_NAME, "DoNotEmitPhoneticGiven2")
                .put(StructuredName.PHONETIC_MIDDLE_NAME, "DoNotEmitPhoneticMiddle2")
                .put(StructuredName.IS_PRIMARY, 1);

        // With "IS_SUPER_PRIMARY=1". This is what we should use.
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "AppropriateFamilyName")
                .put(StructuredName.GIVEN_NAME, "AppropriateGivenName")
                .put(StructuredName.MIDDLE_NAME, "AppropriateMiddleName")
                .put(StructuredName.PREFIX, "AppropriatePrefix")
                .put(StructuredName.SUFFIX, "AppropriateSuffix")
                .put(StructuredName.PHONETIC_FAMILY_NAME, "AppropriatePhoneticFamily")
                .put(StructuredName.PHONETIC_GIVEN_NAME, "AppropriatePhoneticGiven")
                .put(StructuredName.PHONETIC_MIDDLE_NAME, "AppropriatePhoneticMiddle")
                .put(StructuredName.IS_SUPER_PRIMARY, 1);

        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "DoNotEmitFamilyName3")
                .put(StructuredName.GIVEN_NAME, "DoNotEmitGivenName3")
                .put(StructuredName.MIDDLE_NAME, "DoNotEmitMiddleName3")
                .put(StructuredName.PREFIX, "DoNotEmitPrefix3")
                .put(StructuredName.SUFFIX, "DoNotEmitSuffix3")
                .put(StructuredName.PHONETIC_FAMILY_NAME, "DoNotEmitPhoneticFamily3")
                .put(StructuredName.PHONETIC_GIVEN_NAME, "DoNotEmitPhoneticGiven3")
                .put(StructuredName.PHONETIC_MIDDLE_NAME, "DoNotEmitPhoneticMiddle3")
                .put(StructuredName.IS_PRIMARY, 1);

        final PropertyNodesVerifierElem elem = mVerifier.addPropertyNodesVerifierElem();
        if (VCardConfig.isVersion40(vcardType)) {
            final ContentValues contentValues = new ContentValues();
            contentValues.put("SORT-AS",
                    "AppropriateFamilyName;AppropriateGivenName;AppropriateMiddleName");
            // vCard 4.0 (rev13) now uses SORT-AS parameter, which is not compatible with
            // either 2.1 nor 3.0.
            elem.addExpectedNodeWithOrder("N",
                    "AppropriateFamilyName;AppropriateGivenName;AppropriateMiddleName;"
                    + "AppropriatePrefix;AppropriateSuffix",
                    Arrays.asList("AppropriateFamilyName", "AppropriateGivenName",
                            "AppropriateMiddleName", "AppropriatePrefix", "AppropriateSuffix"),
                    contentValues);
        } else {
            elem.addExpectedNodeWithOrder("N",
                    "AppropriateFamilyName;AppropriateGivenName;AppropriateMiddleName;"
                    + "AppropriatePrefix;AppropriateSuffix",
                    Arrays.asList("AppropriateFamilyName", "AppropriateGivenName",
                            "AppropriateMiddleName", "AppropriatePrefix", "AppropriateSuffix"));
            if (VCardConfig.isVersion30(vcardType)) {
                elem.addExpectedNode("SORT-STRING",
                        "AppropriatePhoneticGiven AppropriatePhoneticMiddle"
                        + " AppropriatePhoneticFamily");
            }
        }

        elem.addExpectedNodeWithOrder("FN",
                "AppropriatePrefix AppropriateGivenName "
                + "AppropriateMiddleName AppropriateFamilyName AppropriateSuffix")
            .addExpectedNode("X-PHONETIC-FIRST-NAME", "AppropriatePhoneticGiven")
            .addExpectedNode("X-PHONETIC-MIDDLE-NAME", "AppropriatePhoneticMiddle")
            .addExpectedNode("X-PHONETIC-LAST-NAME", "AppropriatePhoneticFamily");
!!!38538551.java!!!	testStructuredNameComplicatedV21() : void
        testStructuredNameComplicatedCommon(V21);
!!!38538679.java!!!	testStructuredNameComplicatedV30() : void
        testStructuredNameComplicatedCommon(V30);
!!!38538807.java!!!	testStructuredNameComplicatedV40() : void
        testStructuredNameComplicatedCommon(V40);
!!!38538935.java!!!	testNickNameV30() : void
        mVerifier.initForExportTest(V30);
        mVerifier.addInputEntry().addContentValues(Nickname.CONTENT_ITEM_TYPE)
                .put(Nickname.NAME, "Nicky");

        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
            .addExpectedNodeWithOrder("NICKNAME", "Nicky");
!!!38539063.java!!!	testNickNameV40() : void
        mVerifier.initForExportTest(V40);
        mVerifier.addInputEntry().addContentValues(Nickname.CONTENT_ITEM_TYPE)
                .put(Nickname.NAME, "Nicky");

        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
            .addExpectedNodeWithOrder("NICKNAME", "Nicky");
!!!38539191.java!!!	testPhoneBasicCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        mVerifier.addInputEntry().addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "1")
                .put(Phone.TYPE, Phone.TYPE_HOME);
        if (VCardConfig.isVersion40(vcardType)) {
            mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                    .addExpectedNode("TEL", "tel:1", new TypeSet("HOME"));
        } else {
            mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                    .addExpectedNode("TEL", "1", new TypeSet("HOME"));
        }
!!!38539319.java!!!	testPhoneBasicV21() : void
        testPhoneBasicCommon(V21);
!!!38539447.java!!!	testPhoneBasicV30() : void
        testPhoneBasicCommon(V30);
!!!38539575.java!!!	testPhoneBasicV40() : void
        testPhoneBasicCommon(V40);
!!!38539703.java!!!	testPhoneRefrainFormatting() : void
        mVerifier.initForExportTest(V21 | VCardConfig.FLAG_REFRAIN_PHONE_NUMBER_FORMATTING);
        mVerifier.addInputEntry().addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "1234567890(abcdefghijklmnopqrstuvwxyz)")
                .put(Phone.TYPE, Phone.TYPE_HOME);
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("TEL", "1234567890(abcdefghijklmnopqrstuvwxyz)",
                        new TypeSet("HOME"));
!!!38539831.java!!!	testPhoneVariousTypeSupport(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "10")
                .put(Phone.TYPE, Phone.TYPE_HOME);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "20")
                .put(Phone.TYPE, Phone.TYPE_WORK);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "30")
                .put(Phone.TYPE, Phone.TYPE_FAX_HOME);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "40")
                .put(Phone.TYPE, Phone.TYPE_FAX_WORK);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "50")
                .put(Phone.TYPE, Phone.TYPE_MOBILE);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "60")
                .put(Phone.TYPE, Phone.TYPE_PAGER);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "70")
                .put(Phone.TYPE, Phone.TYPE_OTHER);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "80")
                .put(Phone.TYPE, Phone.TYPE_CAR);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "90")
                .put(Phone.TYPE, Phone.TYPE_COMPANY_MAIN);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "100")
                .put(Phone.TYPE, Phone.TYPE_ISDN);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "110")
                .put(Phone.TYPE, Phone.TYPE_MAIN);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "120")
                .put(Phone.TYPE, Phone.TYPE_OTHER_FAX);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "130")
                .put(Phone.TYPE, Phone.TYPE_TELEX);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "140")
                .put(Phone.TYPE, Phone.TYPE_WORK_MOBILE);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "150")
                .put(Phone.TYPE, Phone.TYPE_WORK_PAGER);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "160")
                .put(Phone.TYPE, Phone.TYPE_MMS);

        if (VCardConfig.isVersion40(vcardType)) {
            // Currently pager type has special logic...
            mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                    .addExpectedNode("TEL", "tel:10", new TypeSet("HOME"))
                    .addExpectedNode("TEL", "tel:20", new TypeSet("WORK"))
                    .addExpectedNode("TEL", "tel:30", new TypeSet("HOME", "FAX"))
                    .addExpectedNode("TEL", "tel:40", new TypeSet("WORK", "FAX"))
                    .addExpectedNode("TEL", "tel:50", new TypeSet("CELL"))
                    .addExpectedNode("TEL", "60", new TypeSet("PAGER"))
                    .addExpectedNode("TEL", "tel:70", new TypeSet("VOICE"))
                    .addExpectedNode("TEL", "tel:80", new TypeSet("CAR"))
                    .addExpectedNode("TEL", "tel:90", new TypeSet("WORK", "PREF"))
                    .addExpectedNode("TEL", "tel:100", new TypeSet("ISDN"))
                    .addExpectedNode("TEL", "tel:110", new TypeSet("PREF"))
                    .addExpectedNode("TEL", "tel:120", new TypeSet("FAX"))
                    .addExpectedNode("TEL", "tel:130", new TypeSet("TLX"))
                    .addExpectedNode("TEL", "tel:140", new TypeSet("WORK", "CELL"))
                    .addExpectedNode("TEL", "tel:150", new TypeSet("WORK", "PAGER"))
                    .addExpectedNode("TEL", "tel:160", new TypeSet("MSG"));
        } else {
            mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                    .addExpectedNode("TEL", "10", new TypeSet("HOME"))
                    .addExpectedNode("TEL", "20", new TypeSet("WORK"))
                    .addExpectedNode("TEL", "30", new TypeSet("HOME", "FAX"))
                    .addExpectedNode("TEL", "40", new TypeSet("WORK", "FAX"))
                    .addExpectedNode("TEL", "50", new TypeSet("CELL"))
                    .addExpectedNode("TEL", "60", new TypeSet("PAGER"))
                    .addExpectedNode("TEL", "70", new TypeSet("VOICE"))
                    .addExpectedNode("TEL", "80", new TypeSet("CAR"))
                    .addExpectedNode("TEL", "90", new TypeSet("WORK", "PREF"))
                    .addExpectedNode("TEL", "100", new TypeSet("ISDN"))
                    .addExpectedNode("TEL", "110", new TypeSet("PREF"))
                    .addExpectedNode("TEL", "120", new TypeSet("FAX"))
                    .addExpectedNode("TEL", "130", new TypeSet("TLX"))
                    .addExpectedNode("TEL", "140", new TypeSet("WORK", "CELL"))
                    .addExpectedNode("TEL", "150", new TypeSet("WORK", "PAGER"))
                    .addExpectedNode("TEL", "160", new TypeSet("MSG"));
        }
!!!38539959.java!!!	testPhoneVariousTypeSupportV21() : void
        testPhoneVariousTypeSupport(V21);
!!!38540087.java!!!	testPhoneVariousTypeSupportV30() : void
        testPhoneVariousTypeSupport(V30);
!!!38540215.java!!!	testPhoneVariousTypeSupportV40() : void
        testPhoneVariousTypeSupport(V40);
!!!38540343.java!!!	testPhonePrefHandlingCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "1")
                .put(Phone.TYPE, Phone.TYPE_HOME);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "2")
                .put(Phone.TYPE, Phone.TYPE_WORK)
                .put(Phone.IS_PRIMARY, 1);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "3")
                .put(Phone.TYPE, Phone.TYPE_FAX_HOME)
                .put(Phone.IS_PRIMARY, 1);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "4")
                .put(Phone.TYPE, Phone.TYPE_FAX_WORK);

        if (VCardConfig.isVersion40(vcardType)) {
            mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                    .addExpectedNode("TEL", "tel:4", new TypeSet("WORK", "FAX"))
                    .addExpectedNode("TEL", "tel:3", new TypeSet("HOME", "FAX", "PREF"))
                    .addExpectedNode("TEL", "tel:2", new TypeSet("WORK", "PREF"))
                    .addExpectedNode("TEL", "tel:1", new TypeSet("HOME"));
        } else {
            mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                    .addExpectedNode("TEL", "4", new TypeSet("WORK", "FAX"))
                    .addExpectedNode("TEL", "3", new TypeSet("HOME", "FAX", "PREF"))
                    .addExpectedNode("TEL", "2", new TypeSet("WORK", "PREF"))
                    .addExpectedNode("TEL", "1", new TypeSet("HOME"));
        }
!!!38540471.java!!!	testPhonePrefHandlingV21() : void
        testPhonePrefHandlingCommon(V21);
!!!38540599.java!!!	testPhonePrefHandlingV30() : void
        testPhonePrefHandlingCommon(V30);
!!!38540727.java!!!	testPhonePrefHandlingV40() : void
        testPhonePrefHandlingCommon(V40);
!!!38540855.java!!!	testMiscPhoneTypeHandling(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "1")
                .put(Phone.TYPE, Phone.TYPE_CUSTOM)
                .put(Phone.LABEL, "Modem");
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "2")
                .put(Phone.TYPE, Phone.TYPE_CUSTOM)
                .put(Phone.LABEL, "MSG");
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "3")
                .put(Phone.TYPE, Phone.TYPE_CUSTOM)
                .put(Phone.LABEL, "BBS");
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "4")
                .put(Phone.TYPE, Phone.TYPE_CUSTOM)
                .put(Phone.LABEL, "VIDEO");
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "5")
                .put(Phone.TYPE, Phone.TYPE_CUSTOM);
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "6")
                .put(Phone.TYPE, Phone.TYPE_CUSTOM)
                .put(Phone.LABEL, "_AUTO_CELL");  // The old indicator for the type mobile.
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "7")
                .put(Phone.TYPE, Phone.TYPE_CUSTOM)
                .put(Phone.LABEL, "\u643A\u5E2F");  // Mobile phone in Japanese Kanji
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.NUMBER, "8")
                .put(Phone.TYPE, Phone.TYPE_CUSTOM)
                .put(Phone.LABEL, "invalid");
        PropertyNodesVerifierElem elem = mVerifier.addPropertyNodesVerifierElemWithEmptyName();
        if (VCardConfig.isVersion40(vcardType)) {
            // vCard 4.0 (rev.13) does not allow bare number but URI.
            elem.addExpectedNode("TEL", "tel:1", new TypeSet("Modem"))
                    .addExpectedNode("TEL", "tel:2", new TypeSet("MSG"))
                    .addExpectedNode("TEL", "tel:3", new TypeSet("BBS"))
                    .addExpectedNode("TEL", "tel:4", new TypeSet("VIDEO"))
                    .addExpectedNode("TEL", "tel:5", new TypeSet("VOICE"))
                    .addExpectedNode("TEL", "tel:6", new TypeSet("CELL"))
                    .addExpectedNode("TEL", "tel:7", new TypeSet("CELL"))
                    .addExpectedNode("TEL", "tel:8", new TypeSet("invalid"));
        } else if (VCardConfig.isVersion30(vcardType)) {
            // vCard 3.0 accepts "invalid". Also stop using toUpper()
            elem.addExpectedNode("TEL", "1", new TypeSet("Modem"))
                    .addExpectedNode("TEL", "2", new TypeSet("MSG"))
                    .addExpectedNode("TEL", "3", new TypeSet("BBS"))
                    .addExpectedNode("TEL", "4", new TypeSet("VIDEO"))
                    .addExpectedNode("TEL", "5", new TypeSet("VOICE"))
                    .addExpectedNode("TEL", "6", new TypeSet("CELL"))
                    .addExpectedNode("TEL", "7", new TypeSet("CELL"))
                    .addExpectedNode("TEL", "8", new TypeSet("invalid"));
        } else {
            elem.addExpectedNode("TEL", "1", new TypeSet("MODEM"))
                    .addExpectedNode("TEL", "2", new TypeSet("MSG"))
                    .addExpectedNode("TEL", "3", new TypeSet("BBS"))
                    .addExpectedNode("TEL", "4", new TypeSet("VIDEO"))
                    .addExpectedNode("TEL", "5", new TypeSet("VOICE"))
                    .addExpectedNode("TEL", "6", new TypeSet("CELL"))
                    .addExpectedNode("TEL", "7", new TypeSet("CELL"))
                    .addExpectedNode("TEL", "8", new TypeSet("X-invalid"));
        }
!!!38540983.java!!!	testPhoneTypeHandlingV21() : void
        testMiscPhoneTypeHandling(V21);
!!!38541111.java!!!	testPhoneTypeHandlingV30() : void
        testMiscPhoneTypeHandling(V30);
!!!38541239.java!!!	testPhoneTypeHandlingV40() : void
        testMiscPhoneTypeHandling(V40);
!!!38541367.java!!!	testEmailBasicCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        mVerifier.addInputEntry().addContentValues(Email.CONTENT_ITEM_TYPE)
                .put(Email.DATA, "sample@example.com");
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
            .addExpectedNode("EMAIL", "sample@example.com");
!!!38541495.java!!!	testEmailBasicV21() : void
        testEmailBasicCommon(V21);
!!!38541623.java!!!	testEmailBasicV30() : void
        testEmailBasicCommon(V30);
!!!38541751.java!!!	testEmailBasicV40() : void
        testEmailBasicCommon(V40);
!!!38541879.java!!!	testEmailVariousTypeSupportCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Email.CONTENT_ITEM_TYPE)
                .put(Email.DATA, "type_home@example.com")
                .put(Email.TYPE, Email.TYPE_HOME);
        entry.addContentValues(Email.CONTENT_ITEM_TYPE)
                .put(Email.DATA, "type_work@example.com")
                .put(Email.TYPE, Email.TYPE_WORK);
        entry.addContentValues(Email.CONTENT_ITEM_TYPE)
                .put(Email.DATA, "type_mobile@example.com")
                .put(Email.TYPE, Email.TYPE_MOBILE);
        entry.addContentValues(Email.CONTENT_ITEM_TYPE)
                .put(Email.DATA, "type_other@example.com")
                .put(Email.TYPE, Email.TYPE_OTHER);
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("EMAIL", "type_home@example.com", new TypeSet("HOME"))
                .addExpectedNode("EMAIL", "type_work@example.com", new TypeSet("WORK"))
                .addExpectedNode("EMAIL", "type_mobile@example.com", new TypeSet("CELL"))
                .addExpectedNode("EMAIL", "type_other@example.com");
!!!38542007.java!!!	testEmailVariousTypeSupportV21() : void
        testEmailVariousTypeSupportCommon(V21);
!!!38542135.java!!!	testEmailVariousTypeSupportV30() : void
        testEmailVariousTypeSupportCommon(V30);
!!!38542263.java!!!	testEmailVariousTypeSupportV40() : void
        testEmailVariousTypeSupportCommon(V40);
!!!38542391.java!!!	testEmailPrefHandlingCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Email.CONTENT_ITEM_TYPE)
                .put(Email.DATA, "type_home@example.com")
                .put(Email.TYPE, Email.TYPE_HOME)
                .put(Email.IS_PRIMARY, 1);
        entry.addContentValues(Email.CONTENT_ITEM_TYPE)
                .put(Email.DATA, "type_notype@example.com")
                .put(Email.IS_PRIMARY, 1);

        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("EMAIL", "type_notype@example.com", new TypeSet("PREF"))
                .addExpectedNode("EMAIL", "type_home@example.com", new TypeSet("HOME", "PREF"));
!!!38542519.java!!!	testEmailPrefHandlingV21() : void
        testEmailPrefHandlingCommon(V21);
!!!38542647.java!!!	testEmailPrefHandlingV30() : void
        testEmailPrefHandlingCommon(V30);
!!!38542775.java!!!	testEmailPrefHandlingV40() : void
        testEmailPrefHandlingCommon(V40);
!!!38542903.java!!!	testPostalAddressCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        mVerifier.addInputEntry().addContentValues(StructuredPostal.CONTENT_ITEM_TYPE)
                .put(StructuredPostal.POBOX, "Pobox")
                .put(StructuredPostal.NEIGHBORHOOD, "Neighborhood")
                .put(StructuredPostal.STREET, "Street")
                .put(StructuredPostal.CITY, "City")
                .put(StructuredPostal.REGION, "Region")
                .put(StructuredPostal.POSTCODE, "100")
                .put(StructuredPostal.COUNTRY, "Country")
                .put(StructuredPostal.FORMATTED_ADDRESS, "Formatted Address")
                .put(StructuredPostal.TYPE, StructuredPostal.TYPE_WORK);
        // adr-value    = 0*6(text-value ";") text-value
        //              ; PO Box, Extended Address, Street, Locality, Region, Postal Code,
        //              ; Country Name
        //
        // The NEIGHBORHOOD field is appended after the CITY field.
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("ADR",
                        Arrays.asList("Pobox", "", "Street", "City Neighborhood",
                                "Region", "100", "Country"), new TypeSet("WORK"));
!!!38543031.java!!!	testPostalAddressV21() : void
        testPostalAddressCommon(V21);
!!!38543159.java!!!	testPostalAddressV30() : void
        testPostalAddressCommon(V30);
!!!38543287.java!!!	testPostalAddressV40() : void
        testPostalAddressCommon(V40);
!!!38543415.java!!!	testPostalAddressNonNeighborhood(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        mVerifier.addInputEntry().addContentValues(StructuredPostal.CONTENT_ITEM_TYPE)
                .put(StructuredPostal.CITY, "City");
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("ADR",
                        Arrays.asList("", "", "", "City", "", "", ""), new TypeSet("HOME"));
!!!38543543.java!!!	testPostalAddressNonNeighborhoodV21() : void
        testPostalAddressNonNeighborhood(V21);
!!!38543671.java!!!	testPostalAddressNonNeighborhoodV30() : void
        testPostalAddressNonNeighborhood(V30);
!!!38543799.java!!!	testPostalAddressNonNeighborhoodV40() : void
        testPostalAddressNonNeighborhood(V40);
!!!38543927.java!!!	testPostalAddressNonCity(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        mVerifier.addInputEntry().addContentValues(StructuredPostal.CONTENT_ITEM_TYPE)
                .put(StructuredPostal.NEIGHBORHOOD, "Neighborhood");
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("ADR",
                        Arrays.asList("", "", "", "Neighborhood", "", "", ""), new TypeSet("HOME"));
!!!38544055.java!!!	testPostalAddressNonCityV21() : void
        testPostalAddressNonCity(V21);
!!!38544183.java!!!	testPostalAddressNonCityV30() : void
        testPostalAddressNonCity(V30);
!!!38544311.java!!!	testPostalAddressNonCityV40() : void
        testPostalAddressNonCity(V40);
!!!38544439.java!!!	testPostalOnlyWithFormattedAddressCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        mVerifier.addInputEntry().addContentValues(StructuredPostal.CONTENT_ITEM_TYPE)
                .put(StructuredPostal.REGION, "")  // Must be ignored.
                .put(StructuredPostal.FORMATTED_ADDRESS,
                "Formatted address CA 123-334 United Statue");
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNodeWithOrder("ADR", ";Formatted address CA 123-334 United Statue;;;;;",
                        Arrays.asList("", "Formatted address CA 123-334 United Statue",
                                "", "", "", "", ""), new TypeSet("HOME"));
!!!38544567.java!!!	testPostalOnlyWithFormattedAddressV21() : void
        testPostalOnlyWithFormattedAddressCommon(V21);
!!!38544695.java!!!	testPostalOnlyWithFormattedAddressV30() : void
        testPostalOnlyWithFormattedAddressCommon(V30);
!!!38544823.java!!!	testPostalOnlyWithFormattedAddressV40() : void
        testPostalOnlyWithFormattedAddressCommon(V40);
!!!38544951.java!!!	testPostalWithBothStructuredAndFormattedCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        mVerifier.addInputEntry().addContentValues(StructuredPostal.CONTENT_ITEM_TYPE)
                .put(StructuredPostal.POBOX, "Pobox")
                .put(StructuredPostal.COUNTRY, "Country")
                .put(StructuredPostal.FORMATTED_ADDRESS,
                        "Formatted address CA 123-334 United Statue");  // Should be ignored
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("ADR", "Pobox;;;;;;Country",
                        Arrays.asList("Pobox", "", "", "", "", "", "Country"),
                        new TypeSet("HOME"));
!!!38545079.java!!!	testPostalWithBothStructuredAndFormattedV21() : void
        testPostalWithBothStructuredAndFormattedCommon(V21);
!!!38545207.java!!!	testPostalWithBothStructuredAndFormattedV30() : void
        testPostalWithBothStructuredAndFormattedCommon(V30);
!!!38545335.java!!!	testPostalWithBothStructuredAndFormattedV40() : void
        testPostalWithBothStructuredAndFormattedCommon(V40);
!!!38545463.java!!!	testOrganizationCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Organization.CONTENT_ITEM_TYPE)
                .put(Organization.COMPANY, "CompanyX")
                .put(Organization.DEPARTMENT, "DepartmentY")
                .put(Organization.TITLE, "TitleZ")
                .put(Organization.JOB_DESCRIPTION, "Description Rambda")  // Ignored.
                .put(Organization.OFFICE_LOCATION, "Mountain View")  // Ignored.
                .put(Organization.PHONETIC_NAME, "PhoneticName!")  // Ignored
                .put(Organization.SYMBOL, "(^o^)/~~");  // Ignore him (her).
        entry.addContentValues(Organization.CONTENT_ITEM_TYPE)
                .putNull(Organization.COMPANY)
                .put(Organization.DEPARTMENT, "DepartmentXX")
                .putNull(Organization.TITLE);
        entry.addContentValues(Organization.CONTENT_ITEM_TYPE)
                .put(Organization.COMPANY, "CompanyXYZ")
                .putNull(Organization.DEPARTMENT)
                .put(Organization.TITLE, "TitleXYZYX");
        // Currently we do not use group but depend on the order.
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNodeWithOrder("ORG", "CompanyX;DepartmentY",
                        Arrays.asList("CompanyX", "DepartmentY"))
                .addExpectedNodeWithOrder("TITLE", "TitleZ")
                .addExpectedNodeWithOrder("ORG", "DepartmentXX")
                .addExpectedNodeWithOrder("ORG", "CompanyXYZ")
                .addExpectedNodeWithOrder("TITLE", "TitleXYZYX");
!!!38545591.java!!!	testOrganizationV21() : void
        testOrganizationCommon(V21);
!!!38545719.java!!!	testOrganizationV30() : void
        testOrganizationCommon(V30);
!!!38545847.java!!!	testOrganizationV40() : void
        testOrganizationCommon(V40);
!!!38545975.java!!!	testImVariousTypeSupportCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Im.CONTENT_ITEM_TYPE)
                .put(Im.PROTOCOL, Im.PROTOCOL_AIM)
                .put(Im.DATA, "aim");
        entry.addContentValues(Im.CONTENT_ITEM_TYPE)
                .put(Im.PROTOCOL, Im.PROTOCOL_MSN)
                .put(Im.DATA, "msn");
        entry.addContentValues(Im.CONTENT_ITEM_TYPE)
                .put(Im.PROTOCOL, Im.PROTOCOL_YAHOO)
                .put(Im.DATA, "yahoo");
        entry.addContentValues(Im.CONTENT_ITEM_TYPE)
                .put(Im.PROTOCOL, Im.PROTOCOL_SKYPE)
                .put(Im.DATA, "skype");
        entry.addContentValues(Im.CONTENT_ITEM_TYPE)
                .put(Im.PROTOCOL, Im.PROTOCOL_QQ)
                .put(Im.DATA, "qq");
        entry.addContentValues(Im.CONTENT_ITEM_TYPE)
                .put(Im.PROTOCOL, Im.PROTOCOL_GOOGLE_TALK)
                .put(Im.DATA, "google talk");
        entry.addContentValues(Im.CONTENT_ITEM_TYPE)
                .put(Im.PROTOCOL, Im.PROTOCOL_ICQ)
                .put(Im.DATA, "icq");
        entry.addContentValues(Im.CONTENT_ITEM_TYPE)
                .put(Im.PROTOCOL, Im.PROTOCOL_JABBER)
                .put(Im.DATA, "jabber");
        entry.addContentValues(Im.CONTENT_ITEM_TYPE)
                .put(Im.PROTOCOL, Im.PROTOCOL_NETMEETING)
                .put(Im.DATA, "netmeeting");

        // No determined way to express unknown type...
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("X-JABBER", "jabber")
                .addExpectedNode("X-ICQ", "icq")
                .addExpectedNode("X-GOOGLE-TALK", "google talk")
                .addExpectedNode("X-QQ", "qq")
                .addExpectedNode("X-SKYPE-USERNAME", "skype")
                .addExpectedNode("X-YAHOO", "yahoo")
                .addExpectedNode("X-MSN", "msn")
                .addExpectedNode("X-NETMEETING", "netmeeting")
                .addExpectedNode("X-AIM", "aim");
!!!38546103.java!!!	testImBasiV21() : void
        testImVariousTypeSupportCommon(V21);
!!!38546231.java!!!	testImBasicV30() : void
        testImVariousTypeSupportCommon(V30);
!!!38546359.java!!!	testImBasicV40() : void
        testImVariousTypeSupportCommon(V40);
!!!38546487.java!!!	testImPrefHandlingCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Im.CONTENT_ITEM_TYPE)
                .put(Im.PROTOCOL, Im.PROTOCOL_AIM)
                .put(Im.DATA, "aim1");
        entry.addContentValues(Im.CONTENT_ITEM_TYPE)
                .put(Im.PROTOCOL, Im.PROTOCOL_AIM)
                .put(Im.DATA, "aim2")
                .put(Im.TYPE, Im.TYPE_HOME)
                .put(Im.IS_PRIMARY, 1);

        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("X-AIM", "aim1")
                .addExpectedNode("X-AIM", "aim2", new TypeSet("HOME", "PREF"));
!!!38546615.java!!!	testImPrefHandlingV21() : void
        testImPrefHandlingCommon(V21);
!!!38546743.java!!!	testImPrefHandlingV30() : void
        testImPrefHandlingCommon(V30);
!!!38546871.java!!!	testImPrefHandlingV40() : void
        testImPrefHandlingCommon(V40);
!!!38546999.java!!!	testWebsiteCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Website.CONTENT_ITEM_TYPE)
                .put(Website.URL, "http://website.example.android.com/index.html")
                .put(Website.TYPE, Website.TYPE_BLOG);
        entry.addContentValues(Website.CONTENT_ITEM_TYPE)
                .put(Website.URL, "ftp://ftp.example.android.com/index.html")
                .put(Website.TYPE, Website.TYPE_FTP);

        // We drop TYPE information since vCard (especially 3.0) does not allow us to emit it.
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("URL", "ftp://ftp.example.android.com/index.html")
                .addExpectedNode("URL", "http://website.example.android.com/index.html");
!!!38547127.java!!!	testWebsiteV21() : void
        testWebsiteCommon(V21);
!!!38547255.java!!!	testWebsiteV30() : void
        testWebsiteCommon(V30);
!!!38547383.java!!!	testWebsiteV40() : void
        testWebsiteCommon(V40);
!!!38547511.java!!!	getAndroidPropValue(in mimeType : String, inout value : String, inout type : Integer) : String
        return getAndroidPropValue(mimeType, value, type, null);
!!!38547639.java!!!	getAndroidPropValue(in mimeType : String, inout value : String, inout type : Integer, inout label : String) : String
        return (mimeType + ";" + value + ";"
                + (type != null ? type : "") + ";"
                + (label != null ? label : "") + ";;;;;;;;;;;;");
!!!38547767.java!!!	testEventCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Event.CONTENT_ITEM_TYPE)
                .put(Event.TYPE, Event.TYPE_ANNIVERSARY)
                .put(Event.START_DATE, "1982-06-16");
        entry.addContentValues(Event.CONTENT_ITEM_TYPE)
                .put(Event.TYPE, Event.TYPE_BIRTHDAY)
                .put(Event.START_DATE, "2008-10-22");
        entry.addContentValues(Event.CONTENT_ITEM_TYPE)
                .put(Event.TYPE, Event.TYPE_OTHER)
                .put(Event.START_DATE, "2018-03-12");
        entry.addContentValues(Event.CONTENT_ITEM_TYPE)
                .put(Event.TYPE, Event.TYPE_CUSTOM)
                .put(Event.LABEL, "The last day")
                .put(Event.START_DATE, "When the Tower of Hanoi with 64 rings is completed.");
        entry.addContentValues(Event.CONTENT_ITEM_TYPE)
                .put(Event.TYPE, Event.TYPE_BIRTHDAY)
                .put(Event.START_DATE, "2009-05-19");  // Should be ignored.
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("BDAY", "2008-10-22")
                .addExpectedNode("X-ANDROID-CUSTOM",
                        getAndroidPropValue(
                                Event.CONTENT_ITEM_TYPE, "1982-06-16", Event.TYPE_ANNIVERSARY))
                .addExpectedNode("X-ANDROID-CUSTOM",
                        getAndroidPropValue(
                                Event.CONTENT_ITEM_TYPE, "2018-03-12", Event.TYPE_OTHER))
                .addExpectedNode("X-ANDROID-CUSTOM",
                        getAndroidPropValue(
                                Event.CONTENT_ITEM_TYPE,
                                "When the Tower of Hanoi with 64 rings is completed.",
                                Event.TYPE_CUSTOM, "The last day"));
!!!38547895.java!!!	testEventV21() : void
        testEventCommon(V21);
!!!38548023.java!!!	testEventV30() : void
        testEventCommon(V30);
!!!38548151.java!!!	testEventV40() : void
        testEventCommon(V40);
!!!38548279.java!!!	testNoteCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Note.CONTENT_ITEM_TYPE)
                .put(Note.NOTE, "note1");
        entry.addContentValues(Note.CONTENT_ITEM_TYPE)
                .put(Note.NOTE, "note2")
                .put(Note.IS_PRIMARY, 1);  // Just ignored.
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNodeWithOrder("NOTE", "note1")
                .addExpectedNodeWithOrder("NOTE", "note2");
!!!38548407.java!!!	testNoteV21() : void
        testNoteCommon(V21);
!!!38548535.java!!!	testNoteV30() : void
        testNoteCommon(V30);
!!!38548663.java!!!	testNoteV40() : void
        testNoteCommon(V40);
!!!38548791.java!!!	testPhotoCommon(in vcardType : int) : void
        final boolean useB =
            (VCardConfig.isVersion30(vcardType) || VCardConfig.isVersion40(vcardType));
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "PhotoTest");
        entry.addContentValues(Photo.CONTENT_ITEM_TYPE)
                .put(Photo.PHOTO, sPhotoByteArray);

        ContentValues contentValuesForPhoto = new ContentValues();
        contentValuesForPhoto.put("ENCODING", (useB ? "b" : "BASE64"));
        mVerifier.addPropertyNodesVerifierElem()
                .addExpectedNode("FN", "PhotoTest")
                .addExpectedNode("N", "PhotoTest;;;;",
                        Arrays.asList("PhotoTest", "", "", "", ""))
                .addExpectedNodeWithOrder("PHOTO", null, null, sPhotoByteArray,
                        contentValuesForPhoto, new TypeSet("JPEG"), null);
!!!38548919.java!!!	testPhotoV21() : void
        testPhotoCommon(V21);
!!!38549047.java!!!	testPhotoV30() : void
        testPhotoCommon(V30);
!!!38549175.java!!!	testPhotoV40() : void
        testPhotoCommon(V40);
!!!38549303.java!!!	testRelationCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        mVerifier.addInputEntry().addContentValues(Relation.CONTENT_ITEM_TYPE)
                .put(Relation.TYPE, Relation.TYPE_MOTHER)
                .put(Relation.NAME, "Ms. Mother");
        mVerifier.addContentValuesVerifierElem().addExpected(Relation.CONTENT_ITEM_TYPE)
                .put(Relation.TYPE, Relation.TYPE_MOTHER)
                .put(Relation.NAME, "Ms. Mother");
!!!38549431.java!!!	testRelationV21() : void
        testRelationCommon(V21);
!!!38549559.java!!!	testRelationV30() : void
        testRelationCommon(V30);
!!!38549687.java!!!	testV30HandleEscape() : void
        mVerifier.initForExportTest(V30);
        mVerifier.addInputEntry().addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "\\")
                .put(StructuredName.GIVEN_NAME, ";")
                .put(StructuredName.MIDDLE_NAME, ",")
                .put(StructuredName.PREFIX, "\n")
                .put(StructuredName.DISPLAY_NAME, "[<{Unescaped:Asciis}>]");
        // Verifies the vCard String correctly escapes each character which must be escaped.
        mVerifier.addLineVerifierElem()
                .addExpected("N:\\\\;\\;;\\,;\\n;")
                .addExpected("FN:[<{Unescaped:Asciis}>]");
        mVerifier.addPropertyNodesVerifierElem()
                .addExpectedNode("FN", "[<{Unescaped:Asciis}>]")
                .addExpectedNode("N", Arrays.asList("\\", ";", ",", "\n", ""));
!!!38549815.java!!!	testNickNameV21() : void
        mVerifier.initForExportTest(V21);
        mVerifier.addInputEntry().addContentValues(Nickname.CONTENT_ITEM_TYPE)
                .put(Nickname.NAME, "Nicky");
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("X-ANDROID-CUSTOM",
                        Nickname.CONTENT_ITEM_TYPE + ";Nicky;;;;;;;;;;;;;;");
        mVerifier.addContentValuesVerifierElem().addExpected(Nickname.CONTENT_ITEM_TYPE)
                .put(Nickname.NAME, "Nicky");
!!!38549943.java!!!	testTolerateBrokenPhoneNumberEntryV21() : void
        mVerifier.initForExportTest(V21);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.TYPE, Phone.TYPE_HOME)
                .put(Phone.NUMBER, "111-222-3333 (Miami)\n444-5555-666 (Tokyo)\n"
                        + "777-888-9999 (Chicago)\n111-222-3333 (Miami)");
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("TEL", "111-222-3333", new TypeSet("HOME"))
                .addExpectedNode("TEL", "444-555-5666", new TypeSet("HOME"))
                .addExpectedNode("TEL", "777-888-9999", new TypeSet("HOME"));
!!!38550071.java!!!	testPickUpNonEmptyContentValuesCommon(in vcardType : int) : void
        mVerifier.initForExportTest(vcardType);
        ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.IS_PRIMARY, 1);  // Empty name. Should be ignored.
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "family1")  // Not primary. Should be ignored.
                .put(StructuredName.DISPLAY_NAME, "display");
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.IS_PRIMARY, 1)
                .put(StructuredName.FAMILY_NAME, "family2")  // This entry is what we want.
                .put(StructuredName.DISPLAY_NAME, "display");
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.IS_PRIMARY, 1)
                .put(StructuredName.FAMILY_NAME, "family3")
                .put(StructuredName.DISPLAY_NAME, "display");
        entry.addContentValues(StructuredName.CONTENT_ITEM_TYPE)
                .put(StructuredName.FAMILY_NAME, "family4")
                .put(StructuredName.DISPLAY_NAME, "display");
        mVerifier.addPropertyNodesVerifierElem()
                .addExpectedNode("N", Arrays.asList("family2", "", "", "", ""))
                .addExpectedNode("FN", "display");
!!!38550199.java!!!	testPickUpNonEmptyContentValuesV21() : void
        testPickUpNonEmptyContentValuesCommon(V21);
!!!38550327.java!!!	testPickUpNonEmptyContentValuesV30() : void
        testPickUpNonEmptyContentValuesCommon(V30);
!!!38550455.java!!!	testPickUpNonEmptyContentValuesV40() : void
        testPickUpNonEmptyContentValuesCommon(V40);
!!!38550583.java!!!	testUseMultiByteTypeV30() : void
        mVerifier.initForExportTest(V30);
        final ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.TYPE, Phone.TYPE_CUSTOM)
                .put(Phone.LABEL, "\u96FB\u8A71")
                .put(Phone.NUMBER, "1");
        mVerifier.addLineVerifierElem()
                .addExpected("N:")
                .addExpected("FN:")
                .addExpected("TEL;TYPE=\u96FB\u8A71:1");
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("TEL", "1", new TypeSet("\u96FB\u8A71"));
!!!38550711.java!!!	testSipAddressV21() : void
        mVerifier.initForExportTest(V21);
        final ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(SipAddress.CONTENT_ITEM_TYPE)
                .put(SipAddress.SIP_ADDRESS, "gold");
        mVerifier.addLineVerifierElem()
                .addExpected("X-SIP:gold");
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("X-SIP", "gold");
!!!38550839.java!!!	testSipAddressV30() : void
        mVerifier.initForExportTest(V30);
        final ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(SipAddress.CONTENT_ITEM_TYPE)
                .put(SipAddress.SIP_ADDRESS, "android@example.com");
        mVerifier.addLineVerifierElem()
                .addExpected("N:")
                .addExpected("FN:")
                .addExpected("IMPP:sip:android@example.com");
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("IMPP", "sip:android@example.com");
!!!38550967.java!!!	testPauseAndWaitConversionV30() : void
        mVerifier.initForExportTest(V30);
        final ContactEntry entry = mVerifier.addInputEntry();
        // Insert numbers with PAUSE (',' internally, 'p' for outside) and
        // WAIT (';' internally, 'w' for outside)
        entry.addContentValues(Phone.CONTENT_ITEM_TYPE)
                .put(Phone.TYPE, Phone.TYPE_HOME)
                .put(Phone.NUMBER, "111,222;333");
        mVerifier.addLineVerifierElem()
                .addExpected("N:")
                .addExpected("FN:")
                .addExpected("TEL;TYPE=HOME:111p222w333");
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("TEL", "111p222w333", new TypeSet("HOME"));
!!!38551095.java!!!	testSipAddressV40() : void
        mVerifier.initForExportTest(V40);
        final ContactEntry entry = mVerifier.addInputEntry();
        entry.addContentValues(SipAddress.CONTENT_ITEM_TYPE)
                .put(SipAddress.SIP_ADDRESS, "android@example.com");
        mVerifier.addLineVerifierElem()
                .addExpected("FN:")
                .addExpected("TEL:sip:android@example.com");
        mVerifier.addPropertyNodesVerifierElemWithEmptyName()
                .addExpectedNode("TEL", "sip:android@example.com");
