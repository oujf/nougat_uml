class VCardVerifier
!!!38577079.java!!!	VCardVerifier(inout androidTestCase : AndroidTestCase)
        mAndroidTestCase = androidTestCase;
        mExportTestResolver = null;
        mInputStream = null;
        mInitialized = false;
        mVerified = false;
!!!38577207.java!!!	initForImportTest(in vcardType : int, in resId : int) : void
        if (mInitialized) {
            AndroidTestCase.fail("Already initialized");
        }
        mVCardType = vcardType;
        mIsDoCoMo = VCardConfig.isDoCoMo(vcardType);
        setInputResourceId(resId);
        mInitialized = true;
!!!38577335.java!!!	initForExportTest(in vcardType : int) : void
        initForExportTest(vcardType, "UTF-8");
!!!38577463.java!!!	initForExportTest(in vcardType : int, inout charset : String) : void
        if (mInitialized) {
            AndroidTestCase.fail("Already initialized");
        }
        mExportTestResolver = new ExportTestResolver(mAndroidTestCase);
        mVCardType = vcardType;
        mIsDoCoMo = VCardConfig.isDoCoMo(vcardType);
        mInitialized = true;
        if (TextUtils.isEmpty(charset)) {
            mCharset = "UTF-8";
        } else {
            mCharset = charset;
        }
!!!38577591.java!!!	setInputResourceId(in resId : int) : void
        final InputStream inputStream =
                mAndroidTestCase.getContext().getResources().openRawResource(resId);
        if (inputStream == null) {
            AndroidTestCase.fail("Wrong resId: " + resId);
        }
        setInputStream(inputStream);
!!!38577719.java!!!	setInputStream(inout inputStream : InputStream) : void
        if (mExportTestResolver != null) {
            AndroidTestCase.fail("addInputEntry() is called.");
        } else if (mInputStream != null) {
            AndroidTestCase.fail("InputStream is already set");
        }
        mInputStream = inputStream;
!!!38577847.java!!!	addInputEntry() : ContactEntry
        if (!mInitialized) {
            AndroidTestCase.fail("Not initialized");
        }
        if (mInputStream != null) {
            AndroidTestCase.fail("setInputStream is called");
        }
        return mExportTestResolver.addInputContactEntry();
!!!38577975.java!!!	addPropertyNodesVerifierElemWithoutVersion() : PropertyNodesVerifierElem
        if (!mInitialized) {
            AndroidTestCase.fail("Not initialized");
        }
        if (mPropertyNodesVerifier == null) {
            mPropertyNodesVerifier = new PropertyNodesVerifier(mAndroidTestCase);
        }
        return mPropertyNodesVerifier.addPropertyNodesVerifierElem();
!!!38578103.java!!!	addPropertyNodesVerifierElem() : PropertyNodesVerifierElem
        final PropertyNodesVerifierElem elem = addPropertyNodesVerifierElemWithoutVersion();
        final String versionString;
        if (VCardConfig.isVersion21(mVCardType)) {
            versionString = "2.1";
        } else if (VCardConfig.isVersion30(mVCardType)) {
            versionString = "3.0";
        } else if (VCardConfig.isVersion40(mVCardType)) {
            versionString = "4.0";
        } else {
            throw new RuntimeException("Unexpected vcard type during a unit test");
        }
        elem.addExpectedNodeWithOrder("VERSION", versionString);

        return elem;
!!!38578231.java!!!	addPropertyNodesVerifierElemWithEmptyName() : PropertyNodesVerifierElem
        if (!mInitialized) {
            AndroidTestCase.fail("Not initialized");
        }
        final PropertyNodesVerifierElem elem = addPropertyNodesVerifierElem();
        if (VCardConfig.isVersion40(mVCardType)) {
            elem.addExpectedNodeWithOrder("FN", "");
        } else if (VCardConfig.isVersion30(mVCardType)) {
            elem.addExpectedNodeWithOrder("N", "");
            elem.addExpectedNodeWithOrder("FN", "");
        } else if (mIsDoCoMo) {
            elem.addExpectedNodeWithOrder("N", "");
        }
        return elem;
!!!38578359.java!!!	addLineVerifierElem() : LineVerifierElem
        if (!mInitialized) {
            AndroidTestCase.fail("Not initialized");
        }
        if (mLineVerifier == null) {
            mLineVerifier = new LineVerifier(mAndroidTestCase, mVCardType);
        }
        return mLineVerifier.addLineVerifierElem();
!!!38578487.java!!!	addContentValuesVerifierElem() : ContentValuesVerifierElem
        if (!mInitialized) {
            AndroidTestCase.fail("Not initialized");
        }
        if (mContentValuesVerifier == null) {
            mContentValuesVerifier = new ContentValuesVerifier();
        }

        return mContentValuesVerifier.addElem(mAndroidTestCase);
!!!38578615.java!!!	addVCardExceptionVerifier(inout contents : String) : void
        mExceptionContents = contents;
!!!38578743.java!!!	verifyWithInputStream(inout is : InputStream) : void
        try {
            // Note: we must not specify charset toward vCard parsers. This code checks whether
            // those parsers are able to encode given binary without any extra information for
            // charset.
            final VCardParser parser = VCardUtils.getAppropriateParser(mVCardType);
            if (mContentValuesVerifier != null) {
                final VCardEntryConstructor constructor = new VCardEntryConstructor(mVCardType);
                constructor.addEntryHandler(mContentValuesVerifier);
                parser.addInterpreter(constructor);
            }
            if (mPropertyNodesVerifier != null) {
                parser.addInterpreter(mPropertyNodesVerifier);
            }
            parser.parse(is);
            if (mExceptionContents != null) {
                // exception contents exists, we expect an exception to occur.
                AndroidTestCase.fail();
            }
        } catch (VCardException e) {
            if (mExceptionContents != null) {
                AndroidTestCase.assertTrue(e.getMessage().contains(mExceptionContents));
            } else {
                Log.e(LOG_TAG, "VCardException", e);
                AndroidTestCase.fail("Unexpected VCardException: " + e.getMessage());
            }
        }
!!!38578871.java!!!	verifyOneVCardForExport(in vcard : String) : void
        if (DEBUG) Log.d(LOG_TAG, vcard);
        InputStream is = null;
        try {
            is = new ByteArrayInputStream(vcard.getBytes(mCharset));
            verifyWithInputStream(is);
        } catch (IOException e) {
            AndroidTestCase.fail("Unexpected IOException: " + e.getMessage());
        } finally {
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    AndroidTestCase.fail("Unexpected IOException: " + e.getMessage());
                }
            }
        }
!!!38578999.java!!!	verify() : void
        if (!mInitialized) {
            TestCase.fail("Not initialized.");
        }
        if (mVerified) {
            TestCase.fail("verify() was called twice.");
        }

        if (mInputStream != null) {
            if (mExportTestResolver != null){
                TestCase.fail("There are two input sources.");
            }
            verifyForImportTest();
        } else if (mExportTestResolver != null){
            verifyForExportTest();
        } else {
            TestCase.fail("No input is determined");
        }
        mVerified = true;
!!!38579127.java!!!	verifyForImportTest() : void
        if (mLineVerifier != null) {
            AndroidTestCase.fail("Not supported now.");
        }

        try {
            verifyWithInputStream(mInputStream);
        } catch (IOException e) {
            AndroidTestCase.fail("IOException was thrown: " + e.getMessage());
        } finally {
            if (mInputStream != null) {
                try {
                    mInputStream.close();
                } catch (IOException e) {
                }
            }
        }
!!!38579255.java!!!	mockGetEntityIteratorMethod(in resolver : ContentResolver, in uri : Uri, in selection : String, in selectionArgs : String, in sortOrder : String) : EntityIterator
        if (ExportTestResolver.class.equals(resolver.getClass())) {
            return ((ExportTestResolver)resolver).getProvider().queryEntities(
                    uri, selection, selectionArgs, sortOrder);
        }

        Log.e(LOG_TAG, "Unexpected provider given.");
        return null;
!!!38579383.java!!!	getMockGetEntityIteratorMethod() : Method
        return this.getClass().getMethod("mockGetEntityIteratorMethod",
                ContentResolver.class, Uri.class, String.class, String[].class, String.class);
!!!38579511.java!!!	verifyForExportTest() : void
        final CustomMockContext context = new CustomMockContext(mExportTestResolver);
        final ContentResolver resolver = context.getContentResolver();
        final VCardComposer composer = new VCardComposer(context, mVCardType, mCharset);
        // projection is ignored.
        final Cursor cursor = resolver.query(CONTACTS_TEST_CONTENT_URI, null, null, null, null);
        if (!composer.init(cursor)) {
            AndroidTestCase.fail("init() failed. Reason: " + composer.getErrorReason());
        }
        AndroidTestCase.assertFalse(composer.isAfterLast());
        try {
            while (!composer.isAfterLast()) {
                Method mockGetEntityIteratorMethod = null;
                try {
                    mockGetEntityIteratorMethod = getMockGetEntityIteratorMethod();
                } catch (Exception e) {
                    AndroidTestCase.fail("Exception thrown: " + e);
                }
                AndroidTestCase.assertNotNull(mockGetEntityIteratorMethod);
                final String vcard = composer.createOneEntry(mockGetEntityIteratorMethod);
                AndroidTestCase.assertNotNull(vcard);
                if (mLineVerifier != null) {
                    mLineVerifier.verify(vcard);
                }
                verifyOneVCardForExport(vcard);
            }
        } finally {
            composer.terminate();
        }
