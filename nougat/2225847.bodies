class VCardParserTests
!!!38562359.java!!!	testSimple() : void
        InputStream inputStream = getContext().getResources().openRawResource(R.raw.v21_simple_1);
        try {
            VCardParser parser = new VCardParser_V21();
            MockVCardInterpreter interpreter = new MockVCardInterpreter();
            interpreter.addExpectedOrder(Order.START)
                    .addExpectedOrder(Order.START_ENTRY)
                    .addExpectedOrder(Order.PROPERTY_CREATED)
                    .addExpectedOrder(Order.END_ENTRY)
                    .addExpectedOrder(Order.END);
            parser.addInterpreter(interpreter);
            parser.parse(inputStream);
            interpreter.verify();
        } finally {
            inputStream.close();
        }
!!!38562487.java!!!	testNest() : void
        InputStream inputStream = getContext().getResources().openRawResource(R.raw.v21_nest);
        try {
            VCardParser parser = new VCardParser_V21();
            MockVCardInterpreter interpreter = new MockVCardInterpreter();
            interpreter.addExpectedOrder(Order.START)
                    .addExpectedOrder(Order.START_ENTRY)
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For VERSION
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For N
                    .addExpectedOrder(Order.START_ENTRY)  // First nested vCard begins
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For VERSION
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For N
                    .addExpectedOrder(Order.END_ENTRY)  // First nested vCard ends
                    .addExpectedOrder(Order.START_ENTRY)  // Second nested vCard begins
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For VERSION
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For N
                    .addExpectedOrder(Order.END_ENTRY)  // Second nested vCard ends
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.END_ENTRY)
                    .addExpectedOrder(Order.END);
            parser.addInterpreter(interpreter);
            parser.parse(inputStream);
            interpreter.verify();
        } finally {
            inputStream.close();
        }
!!!38562615.java!!!	testIosMultiline() : void
        InputStream inputStream = getContext().getResources().openRawResource(R.raw.v30_ios_613_multiline);
        try {
            VCardParser parser = new VCardParser_V30();
            MockVCardInterpreter interpreter = new MockVCardInterpreter();
            interpreter.addExpectedOrder(Order.START)
                    .addExpectedOrder(Order.START_ENTRY)
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For VERSION
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For N
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For FN
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For ORG
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For item1
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For item2
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For item3
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For PHOTO
                    .addExpectedOrder(Order.END_ENTRY)
                    .addExpectedOrder(Order.END);
            parser.addInterpreter(interpreter);
            parser.parse(inputStream);
            interpreter.verify();
        } finally {
            inputStream.close();
        }
!!!38562743.java!!!	testParseOne() : void
        InputStream inputStream =
                getContext().getResources().openRawResource(R.raw.v21_multiple_entry);
        try {
            VCardParser parser = new VCardParser_V21();
            MockVCardInterpreter interpreter = new MockVCardInterpreter();
            interpreter.addExpectedOrder(Order.START)
                    .addExpectedOrder(Order.START_ENTRY)
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For VERSION
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For N
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For SOUND
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.END_ENTRY)
                    .addExpectedOrder(Order.START_ENTRY)
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For VERSION
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For N
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For SOUND
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.END_ENTRY)
                    .addExpectedOrder(Order.START_ENTRY)
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For VERSION
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For N
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For SOUND
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.END_ENTRY)
                    .addExpectedOrder(Order.END);
            parser.addInterpreter(interpreter);
            // Use parse() to check we
            parser.parse(inputStream);
            interpreter.verify();
        } finally {
            inputStream.close();
        }

        inputStream = getContext().getResources().openRawResource(R.raw.v21_multiple_entry);
        try {
            VCardParser parser = new VCardParser_V21();
            MockVCardInterpreter interpreter = new MockVCardInterpreter();
            interpreter.addExpectedOrder(Order.START)
                    .addExpectedOrder(Order.START_ENTRY)
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For VERSION
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For N
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For SOUND
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.PROPERTY_CREATED)  // For TEL
                    .addExpectedOrder(Order.END_ENTRY)
                    .addExpectedOrder(Order.END);
            parser.addInterpreter(interpreter);
            parser.parseOne(inputStream);
            interpreter.verify();
        } finally {
            inputStream.close();
        }

