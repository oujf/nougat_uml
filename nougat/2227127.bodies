class ExportTestProvider
!!!38567095.java!!!	buildInputEntry() : ContactEntry
        ContactEntry contactEntry = new ContactEntry();
        mContactEntryList.add(contactEntry);
        return contactEntry;
!!!38567223.java!!!	queryEntities(inout uri : Uri, inout selection : String, inout selectionArgs : String, inout sortOrder : String) : EntityIterator
        TestCase.assertTrue(uri != null);
        TestCase.assertTrue(ContentResolver.SCHEME_CONTENT.equals(uri.getScheme()));
        final String authority = uri.getAuthority();
        TestCase.assertTrue(RawContacts.CONTENT_URI.getAuthority().equals(authority));
        TestCase.assertTrue((Data.CONTACT_ID + "=?").equals(selection));
        TestCase.assertEquals(1, selectionArgs.length);
        final int id = Integer.parseInt(selectionArgs[0]);
        TestCase.assertTrue(id >= 0);
        TestCase.assertTrue(id < mContactEntryList.size());

        return new MockEntityIterator(mContactEntryList.get(id).getList());
!!!38567351.java!!!	query(inout uri : Uri, inout projection : String, inout selection : String, inout selectionArgs : String, inout sortOrder : String) : Cursor
        TestCase.assertTrue(VCardVerifier.CONTACTS_TEST_CONTENT_URI.equals(uri));
        // In this test, following arguments are not supported.
        TestCase.assertNull(selection);
        TestCase.assertNull(selectionArgs);
        TestCase.assertNull(sortOrder);

        return new MockCursor() {
            int mCurrentPosition = -1;

            @Override
            public int getCount() {
                return mContactEntryList.size();
            }

            @Override
            public boolean moveToFirst() {
                mCurrentPosition = 0;
                return true;
            }

            @Override
            public boolean moveToNext() {
                if (mCurrentPosition < mContactEntryList.size()) {
                    mCurrentPosition++;
                    return true;
                } else {
                    return false;
                }
            }

            @Override
            public boolean isBeforeFirst() {
                return mCurrentPosition < 0;
            }

            @Override
            public boolean isAfterLast() {
                return mCurrentPosition >= mContactEntryList.size();
            }

            @Override
            public int getColumnIndex(String columnName) {
                TestCase.assertEquals(Data.CONTACT_ID, columnName);
                return 0;
            }

            @Override
            public int getInt(int columnIndex) {
                TestCase.assertEquals(0, columnIndex);
                TestCase.assertTrue(mCurrentPosition >= 0
                        && mCurrentPosition < mContactEntryList.size());
                return mCurrentPosition;
            }

            @Override
            public long getLong(int columnIndex) {
                return getInt(columnIndex);
            }

            @Override
            public String getString(int columnIndex) {
                return String.valueOf(getInt(columnIndex));
            }

            @Override
            public void close() {
            }
        };
