class VNodeBuilder
!!!38570551.java!!!	VNodeBuilder()
        this(VCardConfig.DEFAULT_IMPORT_CHARSET, false);
!!!38570679.java!!!	VNodeBuilder(inout targetCharset : String, inout strictLineBreakParsing : boolean)
        mSourceCharset = VCardConfig.DEFAULT_INTERMEDIATE_CHARSET;
        if (targetCharset != null) {
            mTargetCharset = targetCharset;
        } else {
            mTargetCharset = VCardConfig.DEFAULT_IMPORT_CHARSET;
        }
        mStrictLineBreakParsing = strictLineBreakParsing;
!!!38571063.java!!!	onEntryStarted() : void
        mCurrentVNode = new VNode();
        mVNodeList.add(mCurrentVNode);
!!!38571191.java!!!	onEntryEnded() : void
        int lastIndex = mVNodeList.size() - 1;
        mVNodeList.remove(lastIndex--);
        mCurrentVNode = lastIndex >= 0 ? mVNodeList.get(lastIndex) : null;
!!!38571319.java!!!	onPropertyCreated(inout property : VCardProperty) : void
        // TODO: remove PropertyNode.
        PropertyNode propNode = new PropertyNode();
        propNode.propName = property.getName();
        List<String> groupList = property.getGroupList();
        if (groupList != null) {
            propNode.propGroupSet.addAll(groupList);
        }
        Map<String, Collection<String>> propertyParameterMap = property.getParameterMap();
        for (String paramType : propertyParameterMap.keySet()) {
            Collection<String> paramValueList = propertyParameterMap.get(paramType);
            if (paramType.equalsIgnoreCase("TYPE")) {
                propNode.paramMap_TYPE.addAll(paramValueList);
            } else {
                for (String paramValue : paramValueList) {
                    propNode.paramMap.put(paramType, paramValue);
                }
            }
        }

        // TODO: just redundant

        if (property.getRawValue() == null) {
            propNode.propValue_bytes = null;
            propNode.propValue_vector.clear();
            propNode.propValue_vector.add("");
            propNode.propValue = "";
            return;
        }

        final List<String> values = property.getValueList();
        if (values == null || values.size() == 0) {
            propNode.propValue_vector.clear();
            propNode.propValue_vector.add("");
            propNode.propValue = "";
        } else {
            propNode.propValue_vector.addAll(values);
            propNode.propValue = listToString(propNode.propValue_vector);
        }
        propNode.propValue_bytes = property.getByteValue();

        mCurrentVNode.propList.add(propNode);
!!!38571447.java!!!	listToString(inout list : List<String>) : String
        int size = list.size();
        if (size > 1) {
            StringBuilder typeListB = new StringBuilder();
            for (String type : list) {
                typeListB.append(type).append(";");
            }
            int len = typeListB.length();
            if (len > 0 && typeListB.charAt(len - 1) == ';') {
                return typeListB.substring(0, len - 1);
            }
            return typeListB.toString();
        } else if (size == 1) {
            return list.get(0);
        } else {
            return "";
        }
!!!38571575.java!!!	getResult() : String
        throw new RuntimeException("Not supported");
!!!38571703.java!!!	getVNodeList() : VNode
        return mVNodeList;
!!!38571831.java!!!	getCurrentVNode() : VNode
        return mCurrentVNode;
