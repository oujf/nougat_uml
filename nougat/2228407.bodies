class PropertyNodesVerifierElem
!!!38573239.java!!!	PropertyNodesVerifierElem(inout androidTestCase : AndroidTestCase)
        mOrderedNodeMap = new HashMap<String, List<PropertyNode>>();
        mUnorderedNodeList = new ArrayList<PropertyNode>();
!!!38573367.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValue : String) : PropertyNodesVerifierElem
        return addExpectedNodeWithOrder(propName, propValue, null, null, null, null, null);
!!!38573495.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValue : String, inout contentValues : ContentValues) : PropertyNodesVerifierElem
        return addExpectedNodeWithOrder(propName, propValue, null,
                null, contentValues, null, null);
!!!38573623.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValueList : List<String>, inout contentValues : ContentValues) : PropertyNodesVerifierElem
        return addExpectedNodeWithOrder(propName, null, propValueList,
                null, contentValues, null, null);
!!!38573751.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValue : String, inout propValueList : List<String>) : PropertyNodesVerifierElem
        return addExpectedNodeWithOrder(propName, propValue, propValueList, null,
                null, null, null);
!!!38573879.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValueList : List<String>) : PropertyNodesVerifierElem
        final String propValue = concatinateListWithSemiColon(propValueList);
        return addExpectedNodeWithOrder(propName, propValue.toString(), propValueList,
                null, null, null, null);
!!!38574007.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValue : String, inout paramMap_TYPE : PropertyNodesVerifierElem::TypeSet) : PropertyNodesVerifierElem
        return addExpectedNodeWithOrder(propName, propValue, null,
                null, null, paramMap_TYPE, null);
!!!38574135.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValueList : List<String>, inout paramMap_TYPE : PropertyNodesVerifierElem::TypeSet) : PropertyNodesVerifierElem
        return addExpectedNodeWithOrder(propName, null, propValueList, null, null,
                paramMap_TYPE, null);
!!!38574263.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValueList : List<String>, inout paramMap : ContentValues, inout paramMap_TYPE : PropertyNodesVerifierElem::TypeSet) : PropertyNodesVerifierElem
        return addExpectedNodeWithOrder(propName, null, propValueList, null, paramMap,
                paramMap_TYPE, null);
!!!38574391.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValue : String, inout paramMap : ContentValues, inout paramMap_TYPE : PropertyNodesVerifierElem::TypeSet) : PropertyNodesVerifierElem
        return addExpectedNodeWithOrder(propName, propValue, null, null,
                paramMap, paramMap_TYPE, null);
!!!38574519.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValue : String, inout propValueList : List<String>, inout paramMap_TYPE : PropertyNodesVerifierElem::TypeSet) : PropertyNodesVerifierElem
        return addExpectedNodeWithOrder(propName, propValue, propValueList, null, null,
                paramMap_TYPE, null);
!!!38574647.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValue : String, inout propValueList : List<String>, inout paramMap : ContentValues) : PropertyNodesVerifierElem
        return addExpectedNodeWithOrder(propName, propValue, propValueList, null, paramMap,
                null, null);
!!!38574775.java!!!	addExpectedNodeWithOrder(inout propName : String, inout propValue : String, inout propValueList : List<String>, inout propValue_bytes : byte, inout paramMap : ContentValues, inout paramMap_TYPE : PropertyNodesVerifierElem::TypeSet, inout propGroupSet : PropertyNodesVerifierElem::GroupSet) : PropertyNodesVerifierElem
        if (propValue == null && propValueList != null) {
            propValue = concatinateListWithSemiColon(propValueList);
        }
        final PropertyNode propertyNode = new PropertyNode(propName,
                propValue, propValueList, propValue_bytes,
                paramMap, paramMap_TYPE, propGroupSet);
        List<PropertyNode> expectedNodeList = mOrderedNodeMap.get(propName);
        if (expectedNodeList == null) {
            expectedNodeList = new ArrayList<PropertyNode>();
            mOrderedNodeMap.put(propName, expectedNodeList);
        }
        expectedNodeList.add(propertyNode);
        return this;
!!!38574903.java!!!	addExpectedNode(inout propName : String, inout propValue : String) : PropertyNodesVerifierElem
        return addExpectedNode(propName, propValue, null, null, null, null, null);
!!!38575031.java!!!	addExpectedNode(inout propName : String, inout propValue : String, inout contentValues : ContentValues) : PropertyNodesVerifierElem
        return addExpectedNode(propName, propValue, null, null, contentValues, null, null);
!!!38575159.java!!!	addExpectedNode(inout propName : String, inout propValueList : List<String>, inout contentValues : ContentValues) : PropertyNodesVerifierElem
        return addExpectedNode(propName, null,
                propValueList, null, contentValues, null, null);
!!!38575287.java!!!	addExpectedNode(inout propName : String, inout propValue : String, inout propValueList : List<String>) : PropertyNodesVerifierElem
        return addExpectedNode(propName, propValue, propValueList, null, null, null, null);
!!!38575415.java!!!	addExpectedNode(inout propName : String, inout propValueList : List<String>) : PropertyNodesVerifierElem
        return addExpectedNode(propName, null, propValueList,
                null, null, null, null);
!!!38575543.java!!!	addExpectedNode(inout propName : String, inout propValue : String, inout paramMap_TYPE : PropertyNodesVerifierElem::TypeSet) : PropertyNodesVerifierElem
        return addExpectedNode(propName, propValue, null, null, null, paramMap_TYPE, null);
!!!38575671.java!!!	addExpectedNode(inout propName : String, inout propValueList : List<String>, inout paramMap_TYPE : PropertyNodesVerifierElem::TypeSet) : PropertyNodesVerifierElem
        final String propValue = concatinateListWithSemiColon(propValueList);
        return addExpectedNode(propName, propValue, propValueList, null, null,
                paramMap_TYPE, null);
!!!38575799.java!!!	addExpectedNode(inout propName : String, inout propValue : String, inout propValueList : List<String>, inout paramMap_TYPE : PropertyNodesVerifierElem::TypeSet) : PropertyNodesVerifierElem
        return addExpectedNode(propName, propValue, propValueList, null, null,
                paramMap_TYPE, null);
!!!38575927.java!!!	addExpectedNode(inout propName : String, inout propValue : String, inout paramMap : ContentValues, inout paramMap_TYPE : PropertyNodesVerifierElem::TypeSet) : PropertyNodesVerifierElem
        return addExpectedNode(propName, propValue, null, null,
                paramMap, paramMap_TYPE, null);
!!!38576055.java!!!	addExpectedNode(inout propName : String, inout propValue : String, inout propValueList : List<String>, inout propValue_bytes : byte, inout paramMap : ContentValues, inout paramMap_TYPE : PropertyNodesVerifierElem::TypeSet, inout propGroupSet : PropertyNodesVerifierElem::GroupSet) : PropertyNodesVerifierElem
        if (propValue == null && propValueList != null) {
            propValue = concatinateListWithSemiColon(propValueList);
        }
        mUnorderedNodeList.add(new PropertyNode(propName, propValue,
                propValueList, propValue_bytes, paramMap, paramMap_TYPE, propGroupSet));
        return this;
!!!38576183.java!!!	verify(inout vnode : VNode) : void
        for (PropertyNode actualNode : vnode.propList) {
            verifyNode(actualNode.propName, actualNode);
        }

        if (!mOrderedNodeMap.isEmpty() || !mUnorderedNodeList.isEmpty()) {
            final List<String> expectedProps = new ArrayList<String>();
            for (List<PropertyNode> nodes : mOrderedNodeMap.values()) {
                for (PropertyNode node : nodes) {
                    if (!expectedProps.contains(node.propName)) {
                        expectedProps.add(node.propName);
                    }
                }
            }
            for (PropertyNode node : mUnorderedNodeList) {
                if (!expectedProps.contains(node.propName)) {
                    expectedProps.add(node.propName);
                }
            }
            TestCase.fail("Expected property " + Arrays.toString(expectedProps.toArray())
                    + " was not found.");
        }
!!!38576311.java!!!	verifyNode(in propName : String, in actualNode : PropertyNode) : void
        final List<PropertyNode> expectedNodeList = mOrderedNodeMap.get(propName);
        final int size = (expectedNodeList != null ? expectedNodeList.size() : 0);
        if (size > 0) {
            for (int i = 0; i < size; i++) {
                final PropertyNode expectedNode = expectedNodeList.get(i);
                final List<PropertyNode> expectedButDifferentValueList =
                        new ArrayList<PropertyNode>();
                if (expectedNode.propName.equals(propName)) {
                    if (expectedNode.equals(actualNode)) {
                        expectedNodeList.remove(i);
                        if (expectedNodeList.size() == 0) {
                            mOrderedNodeMap.remove(propName);
                        }
                        return;
                    } else {
                        expectedButDifferentValueList.add(expectedNode);
                    }
                }

                // "actualNode" is not in ordered expected list.
                // Try looking over unordered expected list.
                if (tryFoundExpectedNodeFromUnorderedList(actualNode,
                        expectedButDifferentValueList)) {
                    return;
                }

                if (!expectedButDifferentValueList.isEmpty()) {
                    // Same propName exists but with different value(s).
                    failWithExpectedNodeList(propName, actualNode,
                            expectedButDifferentValueList);
                } else {
                    // There's no expected node with same propName.
                    TestCase.fail("Unexpected property \"" + propName + "\" exists.");
                }
            }
        } else {
            List<PropertyNode> expectedButDifferentValueList =
                new ArrayList<PropertyNode>();
            if (tryFoundExpectedNodeFromUnorderedList(actualNode, expectedButDifferentValueList)) {
                return;
            } else {
                if (!expectedButDifferentValueList.isEmpty()) {
                    // Same propName exists but with different value(s).
                    failWithExpectedNodeList(propName, actualNode,
                            expectedButDifferentValueList);
                } else {
                    // There's no expected node with same propName.
                    TestCase.fail("Unexpected property \"" + propName + "\" exists.");
                }
            }
        }
!!!38576439.java!!!	concatinateListWithSemiColon(inout array : List<String>) : String
        StringBuffer buffer = new StringBuffer();
        boolean first = true;
        for (String propValueElem : array) {
            if (first) {
                first = false;
            } else {
                buffer.append(';');
            }
            buffer.append(propValueElem);
        }

        return buffer.toString();
!!!38576567.java!!!	tryFoundExpectedNodeFromUnorderedList(inout actualNode : PropertyNode, inout expectedButDifferentValueList : List<PropertyNode>) : boolean
        final String propName = actualNode.propName;
        int unorderedListSize = mUnorderedNodeList.size();
        for (int i = 0; i < unorderedListSize; i++) {
            PropertyNode unorderedExpectedNode = mUnorderedNodeList.get(i);
            if (unorderedExpectedNode.propName.equals(propName)) {
                if (unorderedExpectedNode.equals(actualNode)) {
                    mUnorderedNodeList.remove(i);
                    return true;
                }
                expectedButDifferentValueList.add(unorderedExpectedNode);
            }
        }
        return false;
!!!38576695.java!!!	failWithExpectedNodeList(inout propName : String, inout actualNode : PropertyNode, inout expectedNodeList : List<PropertyNode>) : void
        StringBuilder builder = new StringBuilder();
        for (PropertyNode expectedNode : expectedNodeList) {
            builder.append("expected: ");
            builder.append(expectedNode.toString());
            builder.append("\n");
        }
        TestCase.fail("Property \"" + propName + "\" has wrong value.\n"
                + builder.toString()
                + "  actual: " + actualNode.toString());
