class Triangle
!!!38584247.java!!!	createFloatBuffer(inout buf : float) : FloatBuffer
        ByteBuffer bb = ByteBuffer.allocateDirect(buf.length * 4);
        bb.order(ByteOrder.nativeOrder());
        FloatBuffer fb = bb.asFloatBuffer();
        fb.put(buf);
        fb.position(0);
        return fb;
!!!38584375.java!!!	setup(in key : int) : String
        String s = new String();
        int tmp;

        tmp = key % 2;
        key /= 2;
        if (tmp != 0) {
            s += "N";
            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);
        } else {
            s += "L";
            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);
        }

        tmp = key % 2;
        key /= 2;
        if (tmp != 0) {
            s += "N";
            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_NEAREST);
        } else {
            s += "L";
            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);
        }

        tmp = key % 3;
        key /= 3;
        switch(tmp) {
        case 0:
            s += "_CE";
            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);
            break;
        case 1:
            s += "_RE";
            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_REPEAT);
            break;
        case 2:
            s += "_MR";
            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_MIRRORED_REPEAT);
            break;
        }

        tmp = key % 3;
        key /= 3;
        switch(tmp) {
        case 0:
            s += "_CE";
            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);
            break;
        case 1:
            s += "_RE";
            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_REPEAT);
            break;
        case 2:
            s += "_MR";
            GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_MIRRORED_REPEAT);
            break;
        }

        if (key > 0) done = true;
        return s;
!!!38584503.java!!!	Triangle(inout testImage : Bitmap)
        vertexBuffer = createFloatBuffer(triangleCoords);

        // prepare shaders and OpenGL program
        int vertexShader = GenImage.loadShader(GLES20.GL_VERTEX_SHADER, vertexShaderCode);
        int fragmentShader = GenImage.loadShader(GLES20.GL_FRAGMENT_SHADER, fragmentShaderCode);

        mProgram = GLES20.glCreateProgram();             // create empty OpenGL Program
        GLES20.glAttachShader(mProgram, vertexShader);   // add the vertex shader to program
        GLES20.glAttachShader(mProgram, fragmentShader); // add the fragment shader to program
        GLES20.glLinkProgram(mProgram);                  // create OpenGL program executables

        GLES20.glGenTextures(1, mTextureIDs, 0);

        // Bind to the texture in OpenGL
        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mTextureIDs[0]);
        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, testImage, 0);
!!!38584631.java!!!	draw() : void
        GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
        String ext = setup(key++);

        // Add program to OpenGL environment
        GLES20.glUseProgram(mProgram);

        int posA = GLES20.glGetAttribLocation(mProgram, "aPosition");
        GLES20.glEnableVertexAttribArray(posA);
        GLES20.glVertexAttribPointer(posA, 3, GLES20.GL_FLOAT, false, 12, vertexBuffer);

        int sampUni = GLES20.glGetUniformLocation(mProgram, "uSamp");
        GLES20.glUniform1i(sampUni, 0);

        // Draw the triangle
        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, triangleCoords.length / 3);

        if (!done) {
            IntBuffer ib = IntBuffer.allocate(512*512);
            ib.position(0);
            GLES20.glReadPixels(0,0, 512, 512, GLES20.GL_RGBA,
                                GLES20.GL_UNSIGNED_BYTE, ib);

            Bitmap bmp = Bitmap.createBitmap(512, 512, Bitmap.Config.ARGB_8888);
            bmp.setPixels(ib.array(), 0, 512, 0, 0, 512, 512);

            try {
                String s = new String("/sdcard/imgs/RsSampImg_");
                s += ext + ".png";
                FileOutputStream out = new FileOutputStream(s);
                bmp.compress(Bitmap.CompressFormat.PNG, 95, out);
                out.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            bmp.recycle();
        }
