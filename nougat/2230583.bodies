class Region
!!!38590519.java!!!	Region(inout xy : float, inout img : Bitmap)
        mPointsXY = xy;
        mFindRegion = new FindRegion(mPointsXY, img);
!!!38590647.java!!!	getSourceLocation() : Drawable
        final Path path = new Path();
        Rect bounds = mFindRegion.getRoiBounds();
        for (int i = 0; i < mPointsXY.length; i += 2) {
            if (i == 0) {
                path.moveTo(mPointsXY[i] - bounds.left + mCutOffsetX,
                        mPointsXY[i + 1] - bounds.top + mCutOffsetY);
            } else {
                path.lineTo(mPointsXY[i] - bounds.left + mCutOffsetX,
                        mPointsXY[i + 1] - bounds.top + mCutOffsetY);
            }
        }
        path.close();
        Drawable d = new Drawable() {
            Paint paint1 = new Paint();
            Paint paint2 = new Paint();

            {
                paint1.setStyle(Paint.Style.STROKE);
                paint2.setStyle(Paint.Style.STROKE);
                paint1.setColor(Color.BLACK);
                paint1.setStrokeWidth(2);
                paint2.setColor(Color.BLUE);
            }

            @Override
            public void draw(Canvas canvas) {
                canvas.drawPath(path, paint1);
                canvas.drawPath(path, paint2);
            }

            @Override
            public void setAlpha(int alpha) {
            }

            @Override
            public void setColorFilter(ColorFilter cf) {
            }

            @Override
            public int getOpacity() {
                return 0;
            }
        };
        return d;
!!!38590775.java!!!	findMatch(inout findRegion : ScriptC_find_region, inout mRs : RenderScript, inout image : Bitmap) : Drawable
        Rect mRoiBounds = mFindRegion.findMatch(findRegion, mRs, image);
        int cutOffsetX = mFindRegion.getCutOffsetX();
        int cutOffsetY = mFindRegion.getCutOffsetY();
        final Path path = new Path();
        for (int i = 0; i < mPointsXY.length; i += 2) {
            if (i == 0) {
                path.moveTo(mPointsXY[i] - mRoiBounds.left + cutOffsetX,
                        mPointsXY[i + 1] - mRoiBounds.top + cutOffsetY);
            } else {
                path.lineTo(mPointsXY[i] - mRoiBounds.left + cutOffsetX,
                        mPointsXY[i + 1] - mRoiBounds.top + cutOffsetY);
            }
        }

        path.close();


        Drawable d = new Drawable() {
            Paint paint = new Paint();

            {
                paint.setStyle(Paint.Style.STROKE);
            }

            @Override
            public void draw(Canvas canvas) {
                canvas.drawPath(path, paint);
            }

            @Override
            public void setAlpha(int alpha) {
            }

            @Override
            public void setColorFilter(ColorFilter cf) {
            }

            @Override
            public int getOpacity() {
                return 0;
            }
        };
        return d;
!!!38590903.java!!!	createMutableBitmap(inout image : Bitmap, in x : int, in y : int, in width : int, in height : int) : Bitmap
        Bitmap ret = Bitmap.createBitmap(image, x, y, width, height);
        return ret.copy(Bitmap.Config.ARGB_8888, true);
!!!38591031.java!!!	heal(inout healing : ScriptC_healing, inout rs : RenderScript, inout image : Bitmap, inout output : Bitmap) : void
        Healing h = new Healing(
                mFindRegion.getRoiBounds(),
                mPointsXY,
                mFindRegion.getCutOffsetX(),
                mFindRegion.getCutOffsetY());
        h.heal(healing, rs, image, output);
        mUndoBitmap = h.getmUndoBitmap();
!!!38591159.java!!!	undo(inout output : Bitmap) : void
        Canvas c = new Canvas(output);
        Rect roi;
        roi = mFindRegion.getRoiBounds();
        c.drawBitmap(mUndoBitmap, roi.left, roi.top, null);
