class RenderScript
!!!38619703.java!!!	setBlackList(inout blackList : String) : void
        if (blackList != null) {
            mBlackList = blackList;
        }
!!!38619831.java!!!	forceCompat() : void
        sNative = 0;
!!!38621239.java!!!	getDispatchAPILevel() : int
        return mDispatchAPILevel;
!!!38621367.java!!!	isUseNative() : boolean
        return useNative;
!!!38621623.java!!!	setupNative(in sdkVersion : int, inout ctx : Context) : boolean
        // if targetSdkVersion is higher than the device api version, always use compat mode.
        // Workaround for KK
        if (android.os.Build.VERSION.SDK_INT < sdkVersion &&
            android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.LOLLIPOP) {
            sNative = 0;
        }

        if (sNative == -1) {

            // get the value of the debug.rs.forcecompat property
            int forcecompat = 0;
            try {
                Class<?> sysprop = Class.forName("android.os.SystemProperties");
                Class[] signature = {String.class, Integer.TYPE};
                Method getint = sysprop.getDeclaredMethod("getInt", signature);
                Object[] args = {"debug.rs.forcecompat", new Integer(0)};
                forcecompat = ((java.lang.Integer)getint.invoke(null, args)).intValue();
            } catch (Exception e) {

            }

            if ((android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT)
                     && forcecompat == 0) {
                sNative = 1;
            } else {
                sNative = 0;
            }


            if (sNative == 1) {
                // Workarounds that may disable thunking go here
                ApplicationInfo info;
                try {
                    info = ctx.getPackageManager().getApplicationInfo(ctx.getPackageName(),
                                                                      PackageManager.GET_META_DATA);
                } catch (PackageManager.NameNotFoundException e) {
                    // assume no workarounds needed
                    return true;
                }
                long minorVersion = 0;

                // load minorID from reflection
                try {
                    Class<?> javaRS = Class.forName("android.renderscript.RenderScript");
                    Method getMinorID = javaRS.getDeclaredMethod("getMinorID");
                    minorVersion = ((java.lang.Long)getMinorID.invoke(null)).longValue();
                } catch (Exception e) {
                    // minor version remains 0 on devices with no possible WARs
                }

                if (info.metaData != null) {
                    // asynchronous teardown: minor version 1+
                    if (info.metaData.getBoolean("com.android.support.v8.renderscript.EnableAsyncTeardown") == true) {
                        if (minorVersion == 0) {
                            sNative = 0;
                        }
                    }

                    // blur issues on some drivers with 4.4
                    if (info.metaData.getBoolean("com.android.support.v8.renderscript.EnableBlurWorkaround") == true) {
                        if (android.os.Build.VERSION.SDK_INT <= 19) {
                            //android.util.Log.e("rs", "war on");
                            sNative = 0;
                        }
                    }
                }
                // end of workarounds
            }
        }

        if (sNative == 1) {
            // check against the blacklist
            if (mBlackList.length() > 0) {
                String deviceInfo = '(' +
                                    android.os.Build.MANUFACTURER +
                                    ':' +
                                    android.os.Build.PRODUCT +
                                    ':' +
                                    android.os.Build.MODEL +
                                    ')';
                if (mBlackList.contains(deviceInfo)) {
                    sNative = 0;
                    return false;
                }
            }
            return true;
        }
        return false;
!!!38621751.java!!!	setupDiskCache(inout cacheDir : File) : void
        File f = new File(cacheDir, CACHE_PATH);
        mCachePath = f.getAbsolutePath();
        f.mkdirs();
!!!38622135.java!!!	nContextCreate(in dev : long, in ver : int, in sdkVer : int, in contextType : int, inout nativeLibDir : String) : long
        return rsnContextCreate(dev, ver, sdkVer, contextType, nativeLibDir);
!!!38622391.java!!!	nContextDestroy() : void
        validate();

        // take teardown lock
        // teardown lock can only be taken when no objects are being destroyed
        ReentrantReadWriteLock.WriteLock wlock = mRWLock.writeLock();
        wlock.lock();

        long curCon = mContext;
        // context is considered dead as of this point
        mContext = 0;

        wlock.unlock();
        rsnContextDestroy(curCon);
!!!38622647.java!!!	nContextSetPriority(in p : int) : void
        validate();
        rsnContextSetPriority(mContext, p);
!!!38622903.java!!!	nContextDump(in bits : int) : void
        validate();
        rsnContextDump(mContext, bits);
!!!38623159.java!!!	nContextFinish() : void
        validate();
        rsnContextFinish(mContext);
!!!38623415.java!!!	nContextSendMessage(in id : int, inout data : int) : void
        validate();
        rsnContextSendMessage(mContext, id, data);
!!!38623671.java!!!	nObjDestroy(in id : long) : void
        // There is a race condition here.  The calling code may be run
        // by the gc while teardown is occuring.  This protects againts
        // deleting dead objects.
        if (mContext != 0) {
            rsnObjDestroy(mContext, id);
        }
!!!38623927.java!!!	nElementCreate(in type : long, in kind : int, inout norm : boolean, in vecSize : int) : long
        validate();
        return rsnElementCreate(mContext, type, kind, norm, vecSize);
!!!38624183.java!!!	nElementCreate2(inout elements : long, inout names : String, inout arraySizes : int) : long
        validate();
        return rsnElementCreate2(mContext, elements, names, arraySizes);
!!!38624439.java!!!	nElementGetNativeData(in id : long, inout elementData : int) : void
        validate();
        rsnElementGetNativeData(mContext, id, elementData);
!!!38624695.java!!!	nElementGetSubElements(in id : long, inout IDs : long, inout names : String, inout arraySizes : int) : void
        validate();
        rsnElementGetSubElements(mContext, id, IDs, names, arraySizes);
!!!38624951.java!!!	nTypeCreate(in eid : long, in x : int, in y : int, in z : int, inout mips : boolean, inout faces : boolean, in yuv : int) : long
        validate();
        return rsnTypeCreate(mContext, eid, x, y, z, mips, faces, yuv);
!!!38625207.java!!!	nTypeGetNativeData(in id : long, inout typeData : long) : void
        validate();
        rsnTypeGetNativeData(mContext, id, typeData);
!!!38625463.java!!!	nAllocationCreateTyped(in type : long, in mip : int, in usage : int, in pointer : long) : long
        validate();
        return rsnAllocationCreateTyped(mContext, type, mip, usage, pointer);
!!!38625719.java!!!	nAllocationCreateFromBitmap(in type : long, in mip : int, inout bmp : Bitmap, in usage : int) : long
        validate();
        return rsnAllocationCreateFromBitmap(mContext, type, mip, bmp, usage);
!!!38625975.java!!!	nAllocationCreateBitmapBackedAllocation(in type : long, in mip : int, inout bmp : Bitmap, in usage : int) : long
        validate();
        return rsnAllocationCreateBitmapBackedAllocation(mContext, type, mip, bmp, usage);
!!!38626231.java!!!	nAllocationCubeCreateFromBitmap(in type : long, in mip : int, inout bmp : Bitmap, in usage : int) : long
        validate();
        return rsnAllocationCubeCreateFromBitmap(mContext, type, mip, bmp, usage);
!!!38626487.java!!!	nAllocationCreateBitmapRef(in type : long, inout bmp : Bitmap) : long
        validate();
        return rsnAllocationCreateBitmapRef(mContext, type, bmp);
!!!38626743.java!!!	nAllocationCreateFromAssetStream(in mips : int, in assetStream : int, in usage : int) : long
        validate();
        return rsnAllocationCreateFromAssetStream(mContext, mips, assetStream, usage);
!!!38626999.java!!!	nAllocationCopyToBitmap(in alloc : long, inout bmp : Bitmap) : void
        validate();
        rsnAllocationCopyToBitmap(mContext, alloc, bmp);
!!!38627255.java!!!	nAllocationSyncAll(in alloc : long, in src : int) : void
        validate();
        rsnAllocationSyncAll(mContext, alloc, src);
!!!38627511.java!!!	nAllocationSetSurface(in alloc : long, inout sur : Surface) : void
        validate();
        rsnAllocationSetSurface(mContext, alloc, sur);
!!!38627767.java!!!	nAllocationIoSend(in alloc : long) : void
        validate();
        rsnAllocationIoSend(mContext, alloc);
!!!38628023.java!!!	nAllocationIoReceive(in alloc : long) : void
        validate();
        rsnAllocationIoReceive(mContext, alloc);
!!!38628279.java!!!	nAllocationGetByteBuffer(in alloc : long, in xBytesSize : int, in dimY : int, in dimZ : int) : ByteBuffer
        validate();
        return rsnAllocationGetByteBuffer(mContext, alloc, xBytesSize, dimY, dimZ);
!!!38628535.java!!!	nAllocationGetStride(in alloc : long) : long
        validate();
        return rsnAllocationGetStride(mContext, alloc);
!!!38628791.java!!!	nAllocationGenerateMipmaps(in alloc : long) : void
        validate();
        rsnAllocationGenerateMipmaps(mContext, alloc);
!!!38629047.java!!!	nAllocationCopyFromBitmap(in alloc : long, inout bmp : Bitmap) : void
        validate();
        rsnAllocationCopyFromBitmap(mContext, alloc, bmp);
!!!38629303.java!!!	nAllocationData1D(in id : long, in off : int, in mip : int, in count : int, inout d : Object, in sizeBytes : int, inout dt : Element::DataType, in mSize : int, inout usePadding : boolean) : void
        validate();
        rsnAllocationData1D(mContext, id, off, mip, count, d, sizeBytes, dt.mID, mSize, usePadding);
!!!38629559.java!!!	nAllocationElementData1D(in id : long, in xoff : int, in mip : int, in compIdx : int, inout d : byte, in sizeBytes : int) : void
        validate();
        rsnAllocationElementData1D(mContext, id, xoff, mip, compIdx, d, sizeBytes);
!!!38629815.java!!!	nAllocationData2D(in dstAlloc : long, in dstXoff : int, in dstYoff : int, in dstMip : int, in dstFace : int, in width : int, in height : int, in srcAlloc : long, in srcXoff : int, in srcYoff : int, in srcMip : int, in srcFace : int) : void
        validate();
        rsnAllocationData2D(mContext,
                            dstAlloc, dstXoff, dstYoff,
                            dstMip, dstFace,
                            width, height,
                            srcAlloc, srcXoff, srcYoff,
                            srcMip, srcFace);
!!!38630071.java!!!	nAllocationData2D(in id : long, in xoff : int, in yoff : int, in mip : int, in face : int, in w : int, in h : int, inout d : Object, in sizeBytes : int, inout dt : Element::DataType, in mSize : int, inout usePadding : boolean) : void
        validate();
        rsnAllocationData2D(mContext, id, xoff, yoff, mip, face, w, h, d, sizeBytes, dt.mID, mSize, usePadding);
!!!38630327.java!!!	nAllocationData2D(in id : long, in xoff : int, in yoff : int, in mip : int, in face : int, inout b : Bitmap) : void
        validate();
        rsnAllocationData2D(mContext, id, xoff, yoff, mip, face, b);
!!!38630583.java!!!	nAllocationData3D(in dstAlloc : long, in dstXoff : int, in dstYoff : int, in dstZoff : int, in dstMip : int, in width : int, in height : int, in depth : int, in srcAlloc : long, in srcXoff : int, in srcYoff : int, in srcZoff : int, in srcMip : int) : void
        validate();
        rsnAllocationData3D(mContext,
                            dstAlloc, dstXoff, dstYoff, dstZoff,
                            dstMip, width, height, depth,
                            srcAlloc, srcXoff, srcYoff, srcZoff, srcMip);
!!!38630839.java!!!	nAllocationData3D(in id : long, in xoff : int, in yoff : int, in zoff : int, in mip : int, in w : int, in h : int, in depth : int, inout d : Object, in sizeBytes : int, inout dt : Element::DataType, in mSize : int, inout usePadding : boolean) : void
        validate();
        rsnAllocationData3D(mContext, id, xoff, yoff, zoff, mip, w, h, depth, d, sizeBytes,
                            dt.mID, mSize, usePadding);
!!!38631095.java!!!	nAllocationRead(in id : long, inout d : Object, inout dt : Element::DataType, in mSize : int, inout usePadding : boolean) : void
        validate();
        rsnAllocationRead(mContext, id, d, dt.mID, mSize, usePadding);
!!!38631351.java!!!	nAllocationRead1D(in id : long, in off : int, in mip : int, in count : int, inout d : Object, in sizeBytes : int, inout dt : Element::DataType, in mSize : int, inout usePadding : boolean) : void
        validate();
        rsnAllocationRead1D(mContext, id, off, mip, count, d, sizeBytes, dt.mID, mSize, usePadding);
!!!38631607.java!!!	nAllocationRead2D(in id : long, in xoff : int, in yoff : int, in mip : int, in face : int, in w : int, in h : int, inout d : Object, in sizeBytes : int, inout dt : Element::DataType, in mSize : int, inout usePadding : boolean) : void
        validate();
        rsnAllocationRead2D(mContext, id, xoff, yoff, mip, face, w, h, d, sizeBytes, dt.mID, mSize, usePadding);
!!!38631863.java!!!	nAllocationGetType(in id : long) : long
        validate();
        return rsnAllocationGetType(mContext, id);
!!!38632119.java!!!	nAllocationResize1D(in id : long, in dimX : int) : void
        validate();
        rsnAllocationResize1D(mContext, id, dimX);
!!!38632375.java!!!	nAllocationResize2D(in id : long, in dimX : int, in dimY : int) : void
        validate();
        rsnAllocationResize2D(mContext, id, dimX, dimY);
!!!38632631.java!!!	nScriptBindAllocation(in script : long, in alloc : long, in slot : int, inout mUseInc : boolean) : void
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        rsnScriptBindAllocation(curCon, script, alloc, slot, mUseInc);
!!!38632887.java!!!	nScriptSetTimeZone(in script : long, inout timeZone : byte, inout mUseInc : boolean) : void
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        rsnScriptSetTimeZone(curCon, script, timeZone, mUseInc);
!!!38633143.java!!!	nScriptInvoke(in id : long, in slot : int, inout mUseInc : boolean) : void
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        rsnScriptInvoke(curCon, id, slot, mUseInc);
!!!38633783.java!!!	nScriptForEach(in id : long, in slot : int, in ain : long, in aout : long, inout params : byte, inout mUseInc : boolean) : void
        validate();
        if (params == null) {
            rsnScriptForEach(mContext, mIncCon, id, slot, ain, aout, mUseInc);
        } else {
            rsnScriptForEach(mContext, mIncCon, id, slot, ain, aout, params, mUseInc);
        }
!!!38633911.java!!!	nScriptForEachClipped(in id : long, in slot : int, in ain : long, in aout : long, inout params : byte, in xstart : int, in xend : int, in ystart : int, in yend : int, in zstart : int, in zend : int, inout mUseInc : boolean) : void
        validate();
        if (params == null) {
            rsnScriptForEachClipped(mContext, mIncCon, id, slot, ain, aout, xstart, xend, ystart, yend, zstart, zend, mUseInc);
        } else {
            rsnScriptForEachClipped(mContext, mIncCon, id, slot, ain, aout, params, xstart, xend, ystart, yend, zstart, zend, mUseInc);
        }
!!!38634167.java!!!	nScriptForEach(in id : long, in slot : int, inout ains : long, in aout : long, inout params : byte, inout limits : int) : void
        if (!mEnableMultiInput) {
            Log.e(LOG_TAG, "Multi-input kernels are not supported, please change targetSdkVersion to >= 23");
            throw new RSRuntimeException("Multi-input kernels are not supported before API 23)");
        }
        validate();
        rsnScriptForEach(mContext, id, slot, ains, aout, params, limits);
!!!38634423.java!!!	nScriptReduce(in id : long, in slot : int, inout ains : long, in aout : long, inout limits : int) : void
        validate();
        rsnScriptReduce(mContext, id, slot, ains, aout, limits);
!!!38634679.java!!!	nScriptInvokeV(in id : long, in slot : int, inout params : byte, inout mUseInc : boolean) : void
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        rsnScriptInvokeV(curCon, id, slot, params, mUseInc);
!!!38634935.java!!!	nScriptSetVarI(in id : long, in slot : int, in val : int, inout mUseInc : boolean) : void
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        rsnScriptSetVarI(curCon, id, slot, val, mUseInc);
!!!38635191.java!!!	nScriptSetVarJ(in id : long, in slot : int, in val : long, inout mUseInc : boolean) : void
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        rsnScriptSetVarJ(curCon, id, slot, val, mUseInc);
!!!38635447.java!!!	nScriptSetVarF(in id : long, in slot : int, in val : float, inout mUseInc : boolean) : void
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        rsnScriptSetVarF(curCon, id, slot, val, mUseInc);
!!!38635703.java!!!	nScriptSetVarD(in id : long, in slot : int, in val : double, inout mUseInc : boolean) : void
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        rsnScriptSetVarD(curCon, id, slot, val, mUseInc);
!!!38635959.java!!!	nScriptSetVarV(in id : long, in slot : int, inout val : byte, inout mUseInc : boolean) : void
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        rsnScriptSetVarV(curCon, id, slot, val, mUseInc);
!!!38636215.java!!!	nScriptSetVarVE(in id : long, in slot : int, inout val : byte, in e : long, inout dims : int, inout mUseInc : boolean) : void
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        rsnScriptSetVarVE(curCon, id, slot, val, e, dims, mUseInc);
!!!38636471.java!!!	nScriptSetVarObj(in id : long, in slot : int, in val : long, inout mUseInc : boolean) : void
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        rsnScriptSetVarObj(curCon, id, slot, val, mUseInc);
!!!38636727.java!!!	nScriptCCreate(inout resName : String, inout cacheDir : String, inout script : byte, in length : int) : long
        validate();
        return rsnScriptCCreate(mContext, resName, cacheDir, script, length);
!!!38636983.java!!!	nScriptIntrinsicCreate(in id : int, in eid : long, inout mUseInc : boolean) : long
        validate();
        if (mUseInc) {
            if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.LOLLIPOP) {
                Log.e(LOG_TAG, "Incremental Intrinsics are not supported, please change targetSdkVersion to >= 21");
                throw new RSRuntimeException("Incremental Intrinsics are not supported before Lollipop (API 21)");
            }

            if (!mIncLoaded) {
                try {
                    System.loadLibrary("RSSupport");
                } catch (UnsatisfiedLinkError e) {
                    Log.e(LOG_TAG, "Error loading RS Compat library for Incremental Intrinsic Support: " + e);
                    throw new RSRuntimeException("Error loading RS Compat library for Incremental Intrinsic Support: " + e);
                }
                if (!nIncLoadSO(SUPPORT_LIB_API, mNativeLibDir + "/libRSSupport.so")) {
                    throw new RSRuntimeException("Error loading libRSSupport library for Incremental Intrinsic Support");
                }
                mIncLoaded = true;
            }
            if (mIncCon == 0) {
                //Create a dummy compat context (synchronous).
                long device = nIncDeviceCreate();
                mIncCon = nIncContextCreate(device, 0, 0, 0);
            }
            return rsnScriptIntrinsicCreate(mIncCon, id, eid, mUseInc);
        } else {
            return rsnScriptIntrinsicCreate(mContext, id, eid, mUseInc);
        }
!!!38637239.java!!!	nScriptKernelIDCreate(in sid : long, in slot : int, in sig : int, inout mUseInc : boolean) : long
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        return rsnScriptKernelIDCreate(curCon, sid, slot, sig, mUseInc);
!!!38637495.java!!!	nScriptInvokeIDCreate(in sid : long, in slot : int) : long
        validate();
        return rsnScriptInvokeIDCreate(mContext, sid, slot);
!!!38637751.java!!!	nScriptFieldIDCreate(in sid : long, in slot : int, inout mUseInc : boolean) : long
        validate();
        long curCon = mContext;
        if (mUseInc) {
            curCon = mIncCon;
        }
        return rsnScriptFieldIDCreate(curCon, sid, slot, mUseInc);
!!!38638007.java!!!	nScriptGroupCreate(inout kernels : long, inout src : long, inout dstk : long, inout dstf : long, inout types : long) : long
        validate();
        return rsnScriptGroupCreate(mContext, kernels, src, dstk, dstf, types);
!!!38638263.java!!!	nScriptGroupSetInput(in group : long, in kernel : long, in alloc : long) : void
        validate();
        rsnScriptGroupSetInput(mContext, group, kernel, alloc);
!!!38638519.java!!!	nScriptGroupSetOutput(in group : long, in kernel : long, in alloc : long) : void
        validate();
        rsnScriptGroupSetOutput(mContext, group, kernel, alloc);
!!!38638775.java!!!	nScriptGroupExecute(in group : long) : void
        validate();
        rsnScriptGroupExecute(mContext, group);
!!!38639031.java!!!	nSamplerCreate(in magFilter : int, in minFilter : int, in wrapS : int, in wrapT : int, in wrapR : int, in aniso : float) : long
        validate();
        return rsnSamplerCreate(mContext, magFilter, minFilter, wrapS, wrapT, wrapR, aniso);
!!!38639287.java!!!	nClosureCreate(in kernelID : long, in returnValue : long, inout fieldIDs : long, inout values : long, inout sizes : int, inout depClosures : long, inout depFieldIDs : long) : long
      validate();
      long c = rsnClosureCreate(mContext, kernelID, returnValue, fieldIDs, values,
          sizes, depClosures, depFieldIDs);
      if (c == 0) {
          throw new RSRuntimeException("Failed creating closure.");
      }
      return c;
!!!38639543.java!!!	nInvokeClosureCreate(in invokeID : long, inout params : byte, inout fieldIDs : long, inout values : long, inout sizes : int) : long
      validate();
      long c = rsnInvokeClosureCreate(mContext, invokeID, params, fieldIDs,
          values, sizes);
      if (c == 0) {
          throw new RSRuntimeException("Failed creating closure.");
      }
      return c;
!!!38639799.java!!!	nClosureSetArg(in closureID : long, in index : int, in value : long, in size : int) : void
      validate();
      rsnClosureSetArg(mContext, closureID, index, value, size);
!!!38640055.java!!!	nClosureSetGlobal(in closureID : long, in fieldID : long, in value : long, in size : int) : void
      validate(); // TODO: is this necessary?
      rsnClosureSetGlobal(mContext, closureID, fieldID, value, size);
!!!38640311.java!!!	nScriptGroup2Create(inout name : String, inout cachePath : String, inout closures : long) : long
      validate();
      return rsnScriptGroup2Create(mContext, name, cachePath, closures);
!!!38640567.java!!!	nScriptGroup2Execute(in groupID : long) : void
      validate();
      rsnScriptGroup2Execute(mContext, groupID);
!!!38640823.java!!!	nScriptIntrinsicBLAS_Single(in id : long, in func : int, in TransA : int, in TransB : int, in Side : int, in Uplo : int, in Diag : int, in M : int, in N : int, in K : int, in alpha : float, in A : long, in B : long, in beta : float, in C : long, in incX : int, in incY : int, in KL : int, in KU : int, inout mUseInc : boolean) : void
        validate();
        rsnScriptIntrinsicBLAS_Single(mContext, mIncCon, id, func, TransA, TransB, Side, Uplo, Diag, M, N, K, alpha, A, B, beta, C, incX, incY, KL, KU, mUseInc);
!!!38641079.java!!!	nScriptIntrinsicBLAS_Double(in id : long, in func : int, in TransA : int, in TransB : int, in Side : int, in Uplo : int, in Diag : int, in M : int, in N : int, in K : int, in alpha : double, in A : long, in B : long, in beta : double, in C : long, in incX : int, in incY : int, in KL : int, in KU : int, inout mUseInc : boolean) : void
        validate();
        rsnScriptIntrinsicBLAS_Double(mContext, mIncCon, id, func, TransA, TransB, Side, Uplo, Diag, M, N, K, alpha, A, B, beta, C, incX, incY, KL, KU, mUseInc);
!!!38641335.java!!!	nScriptIntrinsicBLAS_Complex(in id : long, in func : int, in TransA : int, in TransB : int, in Side : int, in Uplo : int, in Diag : int, in M : int, in N : int, in K : int, in alphaX : float, in alphaY : float, in A : long, in B : long, in betaX : float, in betaY : float, in C : long, in incX : int, in incY : int, in KL : int, in KU : int, inout mUseInc : boolean) : void
        validate();
        rsnScriptIntrinsicBLAS_Complex(mContext, mIncCon, id, func, TransA, TransB, Side, Uplo, Diag, M, N, K, alphaX, alphaY, A, B, betaX, betaY, C, incX, incY, KL, KU, mUseInc);
!!!38641591.java!!!	nScriptIntrinsicBLAS_Z(in id : long, in func : int, in TransA : int, in TransB : int, in Side : int, in Uplo : int, in Diag : int, in M : int, in N : int, in K : int, in alphaX : double, in alphaY : double, in A : long, in B : long, in betaX : double, in betaY : double, in C : long, in incX : int, in incY : int, in KL : int, in KU : int, inout mUseInc : boolean) : void
        validate();
        rsnScriptIntrinsicBLAS_Z(mContext, mIncCon, id, func, TransA, TransB, Side, Uplo, Diag, M, N, K, alphaX, alphaY, A, B, betaX, betaY, C, incX, incY, KL, KU, mUseInc);
!!!38641847.java!!!	nScriptIntrinsicBLAS_BNNM(in id : long, in M : int, in N : int, in K : int, in A : long, in a_offset : int, in B : long, in b_offset : int, in C : long, in c_offset : int, in c_mult_int : int, inout mUseInc : boolean) : void
        validate();
        rsnScriptIntrinsicBLAS_BNNM(mContext, mIncCon, id, M, N, K, A, a_offset, B, b_offset, C, c_offset, c_mult_int, mUseInc);
!!!38642487.java!!!	nIncContextCreate(in dev : long, in ver : int, in sdkVer : int, in contextType : int) : long
        return rsnIncContextCreate(dev, ver, sdkVer, contextType);
!!!38642743.java!!!	nIncContextDestroy() : void
        validate();

        // take teardown lock
        // teardown lock can only be taken when no objects are being destroyed
        ReentrantReadWriteLock.WriteLock wlock = mRWLock.writeLock();
        wlock.lock();

        long curCon = mIncCon;
        // context is considered dead as of this point
        mIncCon = 0;

        wlock.unlock();
        rsnIncContextDestroy(curCon);
!!!38642999.java!!!	nIncContextFinish() : void
        validate();
        rsnIncContextFinish(mIncCon);
!!!38643255.java!!!	nIncObjDestroy(in id : long) : void
        // There is a race condition here.  The calling code may be run
        // by the gc while teardown is occuring.  This protects againts
        // deleting dead objects.
        if (mIncCon != 0) {
            rsnIncObjDestroy(mIncCon, id);
        }
!!!38643511.java!!!	nIncElementCreate(in type : long, in kind : int, inout norm : boolean, in vecSize : int) : long
        validate();
        return rsnIncElementCreate(mIncCon, type, kind, norm, vecSize);
!!!38643767.java!!!	nIncTypeCreate(in eid : long, in x : int, in y : int, in z : int, inout mips : boolean, inout faces : boolean, in yuv : int) : long
        validate();
        return rsnIncTypeCreate(mIncCon, eid, x, y, z, mips, faces, yuv);
!!!38644023.java!!!	nIncAllocationCreateTyped(in alloc : long, in type : long, in xBytesSize : int) : long
        validate();
        return rsnIncAllocationCreateTyped(mContext, mIncCon, alloc, type, xBytesSize);
!!!38644279.java!!!	setMessageHandler(inout msg : RenderScript::RSMessageHandler) : void
        mMessageCallback = msg;
!!!38644407.java!!!	getMessageHandler() : RenderScript::RSMessageHandler
        return mMessageCallback;
!!!38644535.java!!!	sendMessage(in id : int, inout data : int) : void
        nContextSendMessage(id, data);
!!!38644791.java!!!	setErrorHandler(inout msg : RenderScript::RSErrorHandler) : void
        mErrorCallback = msg;
!!!38644919.java!!!	getErrorHandler() : RenderScript::RSErrorHandler
        return mErrorCallback;
!!!38645175.java!!!	validateObject(inout o : BaseObj) : void
        if (o != null) {
            if (o.mRS != this) {
                throw new RSIllegalArgumentException("Attempting to use an object across contexts.");
            }
        }
!!!38645303.java!!!	validate() : void
        if (mContext == 0) {
            throw new RSInvalidStateException("Calling RS with no Context active.");
        }
!!!38645431.java!!!	usingIO() : boolean
        return useIOlib;
!!!38645559.java!!!	setPriority(inout p : RenderScript::Priority) : void
        validate();
        nContextSetPriority(p.mID);
!!!38645943.java!!!	RenderScript(inout ctx : Context)
        mContextType = ContextType.NORMAL;
        if (ctx != null) {
            mApplicationContext = ctx.getApplicationContext();
            // Only set mNativeLibDir for API 9+.
            if (android.os.Build.VERSION.SDK_INT > android.os.Build.VERSION_CODES.FROYO) {
                mNativeLibDir = mApplicationContext.getApplicationInfo().nativeLibraryDir;
            }
        }
        mIncCon = 0;
        mIncLoaded = false;
        mRWLock = new ReentrantReadWriteLock();
!!!38646071.java!!!	getApplicationContext() : Context
        return mApplicationContext;
!!!38646199.java!!!	internalCreate(inout ctx : Context, in sdkVersion : int, inout ct : RenderScript::ContextType, in flags : int) : RenderScript
        RenderScript rs = new RenderScript(ctx);

        if (sSdkVersion == -1) {
            sSdkVersion = sdkVersion;
        } else if (sSdkVersion != sdkVersion) {
            throw new RSRuntimeException("Can't have two contexts with different SDK versions in support lib");
        }
        useNative = setupNative(sSdkVersion, ctx);
        synchronized(lock) {
            if (sInitialized == false) {
                try {
                    Class<?> vm_runtime = Class.forName("dalvik.system.VMRuntime");
                    Method get_runtime = vm_runtime.getDeclaredMethod("getRuntime");
                    sRuntime = get_runtime.invoke(null);
                    registerNativeAllocation = vm_runtime.getDeclaredMethod("registerNativeAllocation", Integer.TYPE);
                    registerNativeFree = vm_runtime.getDeclaredMethod("registerNativeFree", Integer.TYPE);
                    sUseGCHooks = true;
                } catch (Exception e) {
                    Log.e(LOG_TAG, "No GC methods");
                    sUseGCHooks = false;
                }
                try {
                    // For API 9 - 22, always use the absolute path of librsjni.so
                    // http://b/25226912
                    if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.M &&
                        rs.mNativeLibDir != null) {
                        System.load(rs.mNativeLibDir + "/librsjni.so");
                    } else {
                        System.loadLibrary("rsjni");
                    }
                    sInitialized = true;
                    sPointerSize = rsnSystemGetPointerSize();
                } catch (UnsatisfiedLinkError e) {
                    Log.e(LOG_TAG, "Error loading RS jni library: " + e);
                    throw new RSRuntimeException("Error loading RS jni library: " + e + " Support lib API: " + SUPPORT_LIB_VERSION);
                }
            }
        }

        if (useNative) {
            android.util.Log.v(LOG_TAG, "RS native mode");
        } else {
            android.util.Log.v(LOG_TAG, "RS compat mode");
        }

        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
            useIOlib = true;
        }

        // The target API level used to init dispatchTable.
        int dispatchAPI = sdkVersion;
        if (sdkVersion < android.os.Build.VERSION.SDK_INT) {
            // If the device API is higher than target API level, init dispatch table based on device API.
            dispatchAPI = android.os.Build.VERSION.SDK_INT;
        }

        String rssupportPath = null;
        // For API 9 - 22, always use the absolute path of libRSSupport.so
        // http://b/25226912
        if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.M &&
            rs.mNativeLibDir != null) {
            rssupportPath = rs.mNativeLibDir + "/libRSSupport.so";
        }
        if (!rs.nLoadSO(useNative, dispatchAPI, rssupportPath)) {
            if (useNative) {
                android.util.Log.v(LOG_TAG, "Unable to load libRS.so, falling back to compat mode");
                useNative = false;
            }
            try {
                if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.M &&
                    rs.mNativeLibDir != null) {
                    System.load(rssupportPath);
                } else {
                    System.loadLibrary("RSSupport");
                }
            } catch (UnsatisfiedLinkError e) {
                Log.e(LOG_TAG, "Error loading RS Compat library: " + e + " Support lib version: " + SUPPORT_LIB_VERSION);
                throw new RSRuntimeException("Error loading RS Compat library: " + e + " Support lib version: " + SUPPORT_LIB_VERSION);
            }
            if (!rs.nLoadSO(false, dispatchAPI, rssupportPath)) {
                Log.e(LOG_TAG, "Error loading RS Compat library: nLoadSO() failed; Support lib version: " + SUPPORT_LIB_VERSION);
                throw new RSRuntimeException("Error loading libRSSupport library, Support lib version: " + SUPPORT_LIB_VERSION);
            }
        }

        if (useIOlib) {
            try {
                System.loadLibrary("RSSupportIO");
            } catch (UnsatisfiedLinkError e) {
                useIOlib = false;
            }
            if (!useIOlib || !rs.nLoadIOSO()) {
                android.util.Log.v(LOG_TAG, "Unable to load libRSSupportIO.so, USAGE_IO not supported");
                useIOlib = false;
            }
        }

        // For old APIs with dlopen bug, need to load blas lib in Java first.
        // Only try load to blasV8 when the desired API level includes IntrinsicBLAS.
        if (dispatchAPI >= 23) {
            // Enable multi-input kernels only when diapatchAPI is M+.
            rs.mEnableMultiInput = true;
            try {
                System.loadLibrary("blasV8");
            } catch (UnsatisfiedLinkError e) {
                Log.v(LOG_TAG, "Unable to load BLAS lib, ONLY BNNM will be supported: " + e);
            }
        }

        long device = rs.nDeviceCreate();
        rs.mContext = rs.nContextCreate(device, 0, sdkVersion, ct.mID, rs.mNativeLibDir);
        rs.mContextType = ct;
        rs.mContextFlags = flags;
        rs.mContextSdkVersion = sdkVersion;
        rs.mDispatchAPILevel = dispatchAPI;
        if (rs.mContext == 0) {
            throw new RSDriverException("Failed to create RS context.");
        }
        rs.mMessageThread = new MessageThread(rs);
        rs.mMessageThread.start();
        return rs;
!!!38646327.java!!!	create(inout ctx : Context) : RenderScript
        return create(ctx, ContextType.NORMAL);
!!!38646455.java!!!	create(inout ctx : Context, inout ct : RenderScript::ContextType) : RenderScript
        return create(ctx, ct, CREATE_FLAG_NONE);
!!!38646583.java!!!	create(inout ctx : Context, inout ct : RenderScript::ContextType, in flags : int) : RenderScript
        int v = ctx.getApplicationInfo().targetSdkVersion;
        return create(ctx, v, ct, flags);
!!!38646711.java!!!	create(inout ctx : Context, in sdkVersion : int) : RenderScript
        return create(ctx, sdkVersion, ContextType.NORMAL, CREATE_FLAG_NONE);
!!!38646839.java!!!	create(inout ctx : Context, in sdkVersion : int, inout ct : RenderScript::ContextType) : RenderScript
        return create(ctx, sdkVersion, ct, CREATE_FLAG_NONE);
!!!38646967.java!!!	create(inout ctx : Context, in sdkVersion : int, inout ct : RenderScript::ContextType, in flags : int) : RenderScript
        synchronized (mProcessContextList) {
            for (RenderScript prs : mProcessContextList) {
                if ((prs.mContextType == ct) &&
                    (prs.mContextFlags == flags) &&
                    (prs.mContextSdkVersion == sdkVersion)) {

                    return prs;
                }
            }

            RenderScript prs = internalCreate(ctx, sdkVersion, ct, flags);
            prs.mIsProcessContext = true;
            mProcessContextList.add(prs);
            return prs;
        }
!!!38647095.java!!!	releaseAllContexts() : void
        ArrayList<RenderScript> oldList;
        synchronized (mProcessContextList) {
            oldList = mProcessContextList;
            mProcessContextList = new ArrayList<RenderScript>();
        }

        for (RenderScript prs : oldList) {
            prs.mIsProcessContext = false;
            prs.destroy();
        }
        oldList.clear();
!!!38647223.java!!!	createMultiContext(inout ctx : Context, inout ct : RenderScript::ContextType, in flags : int, in API_number : int) : RenderScript
        return internalCreate(ctx, API_number, ct, flags);
!!!38647351.java!!!	contextDump() : void
        validate();
        nContextDump(0);
!!!38647479.java!!!	finish() : void
        nContextFinish();
!!!38647607.java!!!	helpDestroy() : void
        boolean shouldDestroy = false;
        synchronized(this) {
            if (!mDestroyed) {
                shouldDestroy = true;
                mDestroyed = true;
            }
        }

        if (shouldDestroy) {
            nContextFinish();
            if (mIncCon != 0) {
                nIncContextFinish();
                nIncContextDestroy();
                mIncCon = 0;
            }
            nContextDeinitToClient(mContext);
            mMessageThread.mRun = false;
            // Interrupt mMessageThread so it gets to see immediately that mRun is false
            // and exit rightaway.
            mMessageThread.interrupt();

            // Wait for mMessageThread to join.  Try in a loop, in case this thread gets interrupted
            // during the wait.  If interrupted, set the "interrupted" status of the current thread.
            boolean hasJoined = false, interrupted = false;
            while (!hasJoined) {
                try {
                    mMessageThread.join();
                    hasJoined = true;
                } catch (InterruptedException e) {
                    interrupted = true;
                }
            }
            if (interrupted) {
                Log.v(LOG_TAG, "Interrupted during wait for MessageThread to join");
                Thread.currentThread().interrupt();
            }

            nContextDestroy();
        }
!!!38647735.java!!!	finalize() : void
        helpDestroy();
        super.finalize();
!!!38647863.java!!!	destroy() : void
        if (mIsProcessContext) {
            // users cannot destroy a process context
            return;
        }
        validate();
        helpDestroy();
!!!38647991.java!!!	isAlive() : boolean
        return mContext != 0;
!!!38648119.java!!!	safeID(inout o : BaseObj) : long
        if(o != null) {
            return o.getID(this);
        }
        return 0;
