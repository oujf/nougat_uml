class GroupTest
!!!38602679.java!!!	GroupTest(inout useNative : boolean)
        mUseNative = useNative;
!!!38602807.java!!!	createTest(inout res : Resources) : void
        mWidth = mInPixelsAllocation.getType().getX();
        mHeight = mInPixelsAllocation.getType().getY();

        mConvolve = ScriptIntrinsicConvolve3x3.create(mRS, Element.U8_4(mRS));
        mMatrix = ScriptIntrinsicColorMatrix.create(mRS, Element.U8_4(mRS));

        float f[] = new float[9];
        f[0] =  0.f;    f[1] = -1.f;    f[2] =  0.f;
        f[3] = -1.f;    f[4] =  5.f;    f[5] = -1.f;
        f[6] =  0.f;    f[7] = -1.f;    f[8] =  0.f;
        mConvolve.setCoefficients(f);

        Matrix4f m = new Matrix4f();
        m.set(1, 0, 0.2f);
        m.set(1, 1, 0.9f);
        m.set(1, 2, 0.2f);
        mMatrix.setColorMatrix(m);

        Type.Builder tb = new Type.Builder(mRS, Element.U8_4(mRS));
        tb.setX(mWidth);
        tb.setY(mHeight);
        Type connect = tb.create();

        if (mUseNative) {
            ScriptGroup.Builder2 b = new ScriptGroup.Builder2(mRS);
            ScriptGroup.Input in = b.addInput();
            ScriptGroup.Closure c;

            c = b.addKernel(mConvolve.getKernelID(),
                            connect,
                            new ScriptGroup.Binding(mConvolve.getFieldID_Input(), in));

            c = b.addKernel(mMatrix.getKernelID(),
                            mOutPixelsAllocation.getType(),
                            c.getReturn());
            mGroup = b.create("group", c.getReturn());
        } else {
            mScratchPixelsAllocation1 = Allocation.createTyped(mRS, connect);
        }
!!!38602935.java!!!	runTest() : void
        mConvolve.setInput(mInPixelsAllocation);
        if (mUseNative) {
            mOutPixelsAllocation = (Allocation)mGroup.execute(mInPixelsAllocation)[0];
        } else {
            mConvolve.forEach(mScratchPixelsAllocation1);
            mMatrix.forEach(mScratchPixelsAllocation1, mOutPixelsAllocation);
        }
