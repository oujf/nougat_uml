class Processor
!!!38648503.java!!!	runTest() : void
            if (mBars[0] != mBarsOld[0]) {
                mTest.onBar1Changed(mBars[0]);
                mBarsOld[0] = mBars[0];
            }
            if (mBars[1] != mBarsOld[1]) {
                mTest.onBar2Changed(mBars[1]);
                mBarsOld[1] = mBars[1];
            }
            if (mBars[2] != mBarsOld[2]) {
                mTest.onBar3Changed(mBars[2]);
                mBarsOld[2] = mBars[2];
            }
            if (mBars[3] != mBarsOld[3]) {
                mTest.onBar4Changed(mBars[3]);
                mBarsOld[3] = mBars[3];
            }
            if (mBars[4] != mBarsOld[4]) {
                mTest.onBar5Changed(mBars[4]);
                mBarsOld[4] = mBars[4];
            }
            mTest.runTest();
!!!38648631.java!!!	Processor(inout rs : RenderScript, inout benchmarkMode : boolean)
            mRS = rs;
            mRS.setMessageHandler(new MessageProcessor());
            mScriptUtils = new ScriptC_util(mRS);

            switch(mBitmapWidth) {
            case 1920:
                mInPixelsAllocation = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img1920x1080a);
                mInPixelsAllocation2 = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img1920x1080b);
                mBitmapOut1 = Bitmap.createBitmap(1920, 1080, Bitmap.Config.ARGB_8888);
                mBitmapOut2 = Bitmap.createBitmap(1920, 1080, Bitmap.Config.ARGB_8888);
                break;
            case 1280:
                mInPixelsAllocation = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img1280x720a);
                mInPixelsAllocation2 = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img1280x720b);
                mBitmapOut1 = Bitmap.createBitmap(1280, 720, Bitmap.Config.ARGB_8888);
                mBitmapOut2 = Bitmap.createBitmap(1280, 720, Bitmap.Config.ARGB_8888);
                break;
            case 800:
                mInPixelsAllocation = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img800x450a);
                mInPixelsAllocation2 = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img800x450b);
                mBitmapOut1 = Bitmap.createBitmap(800, 450, Bitmap.Config.ARGB_8888);
                mBitmapOut2 = Bitmap.createBitmap(800, 450, Bitmap.Config.ARGB_8888);
                break;
            default:
                throw new RuntimeException("unhandled bitmap width.");
            }

            mBitmapOut1.setHasAlpha(false);
            mBitmapOut2.setHasAlpha(false);
            mOutDisplayAllocation1 = Allocation.createFromBitmap(mRS, mBitmapOut1);
            mOutDisplayAllocation2 = Allocation.createFromBitmap(mRS, mBitmapOut2);
            mBenchmarkMode = benchmarkMode;
            start();
!!!38648759.java!!!	Processor(inout rs : RenderScript, inout v : TextureView, inout benchmarkMode : boolean)
            mRS = rs;
            mRS.setMessageHandler(new MessageProcessor());
            mScriptUtils = new ScriptC_util(mRS);
            mDisplayViewIO = v;

            switch(mBitmapWidth) {
            case 1920:
                mInPixelsAllocation = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img1920x1080a);
                mInPixelsAllocation2 = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img1920x1080b);
                break;
            case 1280:
                mInPixelsAllocation = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img1280x720a);
                mInPixelsAllocation2 = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img1280x720b);
                break;
            case 800:
                mInPixelsAllocation = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img800x450a);
                mInPixelsAllocation2 = Allocation.createFromBitmapResource(
                        mRS, getResources(), R.drawable.img800x450b);
                break;
            }

            mOutDisplayAllocationIO = Allocation.createTyped(mRS, mInPixelsAllocation.getType(),
                                                               Allocation.MipmapControl.MIPMAP_NONE,
                                                               Allocation.USAGE_SCRIPT |
                                                               Allocation.USAGE_IO_OUTPUT);
            mOutPixelsAllocationIO = mOutDisplayAllocationIO;

            mBenchmarkMode = benchmarkMode;
            start();
!!!38648887.java!!!	runBenchmarkLoop(in minTime : float) : ImageProcessingActivity2::Processor::Result
            mUpdatesPending = 0;
            Result r = new Result();

            long t = java.lang.System.currentTimeMillis();
            do {
                synchronized(this) {
                    // Shows pending is used to track the number of kernels in the RS pipeline
                    // We throttle it to 2.  This provide some buffering to allow a kernel to be started
                    // before we are nofitied the previous finished.  However, larger numbers are uncommon
                    // in interactive apps as they introduce 'lag' between user input and display.
                    mShowsPending++;
                    if (mShowsPending > 2) {
                        try {
                            this.wait();
                        } catch(InterruptedException e) {
                        }
                    }
                }

                // If animations are enabled update the test state.
                if (mToggleAnimate) {
                    mTest.animateBars(r.totalTime);
                }

                // Run the kernel
                if (!mToggleIO) {
                    if (mActiveBitmap == 0) {
                        mTest.mOutPixelsAllocation = mOutDisplayAllocation1;
                    } else {
                        mTest.mOutPixelsAllocation = mOutDisplayAllocation2;
                    }
                } else {
                    mTest.mOutPixelsAllocation = mOutDisplayAllocationIO;
                }

                mTest.runTest();
                r.iterations ++;

                if (!mToggleIO) {
                    if (mToggleDisplay) {
                        if (mActiveBitmap == 0) {
                            mOutDisplayAllocation1.copyTo(mBitmapOut1);
                        } else {
                            mOutDisplayAllocation2.copyTo(mBitmapOut2);
                        }
                    }

                }
                // Send our RS message handler a message so we know when this work has completed
                mScriptUtils.invoke_utilSendMessage(mActiveBitmap);
                mActiveBitmap ^= 1;

                long t2 = java.lang.System.currentTimeMillis();
                r.totalTime = (t2 - t) / 1000.f;
            } while (r.totalTime < minTime);

            mRS.finish();
            long t2 = java.lang.System.currentTimeMillis();
            r.totalTime = (t2 - t) / 1000.f;

            // Even if we are not displaying as we go, show the final output
            if (!mToggleIO) {
                mOutDisplayAllocation1.copyTo(mBitmapOut1);
                mOutDisplayAllocation2.copyTo(mBitmapOut2);
            }
            return r;
!!!38649015.java!!!	getBenchmark() : float
            mDoingBenchmark = true;
            mUpdatesPending = 0;

            long result = 0;
            float runtime = 1.f;
            if (mToggleLong) {
                runtime = 10.f;
            }

            // We run a short bit of work before starting the actual test
            // this is to let any power management do its job and respond
            runBenchmarkLoop(0.3f);

            // Run the actual benchmark
            Result r = runBenchmarkLoop(runtime);

            Log.v("rs", "Test: time=" + r.totalTime +"s,  frames=" + r.iterations +
                  ", avg=" + r.totalTime / r.iterations * 1000.f);

            mDoingBenchmark = false;
            return r.totalTime / r.iterations * 1000.f;
!!!38649143.java!!!	run() : void
            Surface lastSurface = null;
            while (mRun) {
                // Our loop for launching tests or benchmarks
                synchronized(this) {
                    // If we have no work to do, or we have displays pending, wait
                    if ((mUpdatesPending == 0) || (mShowsPending != 0)) {
                        try {
                            this.wait();
                        } catch(InterruptedException e) {
                        }
                    }
                    if (mToggleIO) {
                        if ((mOutSurface == null) || (mOutPixelsAllocationIO == null)) {
                            continue;
                        }
                        if (lastSurface != mOutSurface) {
                            mOutDisplayAllocationIO.setSurface(mOutSurface);
                            lastSurface = mOutSurface;
                        }
                    }
                    // We may have been asked to exit while waiting
                    if (!mRun) return;

                }

                if (mBenchmarkMode) {
                    // Loop over the tests we want to benchmark
                    for (int ct=0; (ct < mTestList.length) && mRun; ct++) {

                        // For reproducibility we wait a short time for any sporadic work
                        // created by the user touching the screen to launch the test to pass.
                        // Also allows for things to settle after the test changes.
                        mRS.finish();
                        try {
                            sleep(250);
                        } catch(InterruptedException e) {
                        }

                        // If we just ran a test, we destroy it here to relieve some memory pressure
                        if (mTest != null) {
                            mTest.destroy();
                        }

                        // Select the next test
                        mTest = changeTest(mTestList[ct], false);

                        // If the user selected the "long pause" option, wait
                        if (mTogglePause) {
                            for (int i=0; (i < 100) && mRun; i++) {
                                try {
                                    sleep(100);
                                } catch(InterruptedException e) {
                                }
                            }
                        }

                        // Run the test
                        mTestResults[ct] = getBenchmark();
                    }
                    onBenchmarkFinish(mRun);
                    return;
                } else {
                    boolean update = false;
                    synchronized(this) {
                        // If we have updates to process and are not blocked by pending shows,
                        // start the next kernel
                        if ((mUpdatesPending > 0) && (mShowsPending == 0)) {
                            mUpdatesPending = 0;
                            update = true;
                            mShowsPending++;
                        }
                    }

                    if (update) {
                        // Run the kernel
                        if (mActiveBitmap == 0) {
                            mTest.mOutPixelsAllocation = mOutDisplayAllocation1;
                        } else {
                            mTest.mOutPixelsAllocation = mOutDisplayAllocation2;
                        }
                        if (mToggleIO) {
                            mTest.mOutPixelsAllocation = mOutDisplayAllocationIO;
                        }
                        runTest();

                        if (mToggleDisplay && !mToggleIO) {
                            if (mActiveBitmap == 0) {
                                mOutDisplayAllocation1.copyTo(mBitmapOut1);
                            } else {
                                mOutDisplayAllocation2.copyTo(mBitmapOut2);
                            }
                        }

                        // Send our RS message handler a message so we know when this work has completed
                        mScriptUtils.invoke_utilSendMessage(mActiveBitmap);
                        mActiveBitmap ^= 1;
                    }
                }
            }

!!!38649271.java!!!	update() : void
            // Something UI related has changed, enqueue an update if one is not
            // already pending.  Wake the worker if needed.
            synchronized(this) {
                if (mUpdatesPending < 2) {
                    mUpdatesPending++;
                    notifyAll();
                }
            }
!!!38649399.java!!!	setSurface(inout s : Surface) : void
            synchronized(this) {
                mOutSurface = s;
                notifyAll();
            }
            //update();
!!!38649527.java!!!	exit() : void
            mRun = false;

            synchronized(this) {
                notifyAll();
            }

            try {
                this.join();
            } catch(InterruptedException e) {
            }

            mInPixelsAllocation.destroy();
            mInPixelsAllocation2.destroy();

            if (mTest != null) {
                mTest.destroy();
                mTest = null;
            }

            if(!mToggleIO) {
                mOutDisplayAllocation1.destroy();
                mOutDisplayAllocation2.destroy();
            } else {
                if (mOutPixelsAllocationIO != mOutDisplayAllocationIO) {
                    mOutPixelsAllocationIO.destroy();
                }
                mOutDisplayAllocationIO.destroy();
            }
            mRS.destroy();

            mInPixelsAllocation = null;
            mInPixelsAllocation2 = null;
            mOutDisplayAllocation1 = null;
            mOutDisplayAllocation2 = null;
            mOutDisplayAllocationIO = null;
            mOutPixelsAllocationIO = null;
            mRS = null;
