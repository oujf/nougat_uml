class CameraPreviewActivity
!!!38663607.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        setContentView(R.layout.cf_main);

        mPreviewView = (TextureView) findViewById(R.id.preview_view);
        mOutputView = (TextureView) findViewById(R.id.format_view);

        mPreviewView.setSurfaceTextureListener(this);

        int numCameras = Camera.getNumberOfCameras();
        String[] cameraNames = new String[numCameras];
        for (int i = 0; i < numCameras; i++) {
            cameraNames[i] = "Camera " + i;
        }
        mCameraSpinner = (Spinner) findViewById(R.id.cameras_selection);
        mCameraSpinner.setAdapter(
            new ArrayAdapter<String>(
                this, R.layout.cf_format_list_item, cameraNames));
        mCameraSpinner.setOnItemSelectedListener(mCameraSpinnerListener);

        mResolutionSpinner = (Spinner) findViewById(R.id.resolution_selection);
        mResolutionSpinner.setOnItemSelectedListener(mResolutionSelectedListener);

        mRS = RenderScript.create(this);
        mFilterYuv = new RsYuv(mRS);
        mOutputView.setSurfaceTextureListener(mFilterYuv);
!!!38663735.java!!!	onResume() : void
        super.onResume();

        setUpCamera(mCameraSpinner.getSelectedItemPosition());
!!!38663863.java!!!	onPause() : void
        super.onPause();

        shutdownCamera();
!!!38663991.java!!!	onSurfaceTextureAvailable(inout surface : SurfaceTexture, in width : int, in height : int) : void
        mPreviewTexture = surface;
        mPreviewTexWidth = width;
        mPreviewTexHeight = height;
        if (mCamera != null) {
            startPreview();
        }
!!!38664119.java!!!	onSurfaceTextureSizeChanged(inout surface : SurfaceTexture, in width : int, in height : int) : void
        // Ignored, Camera does all the work for us
!!!38664247.java!!!	onSurfaceTextureDestroyed(inout surface : SurfaceTexture) : boolean
        return true;
!!!38664375.java!!!	onSurfaceTextureUpdated(inout surface : SurfaceTexture) : void
        // Invoked every time there's a new Camera preview frame
!!!38664503.java!!!	setUpCamera(in id : int) : void
        shutdownCamera();

        mCurrentCameraId = id;
        mCamera = Camera.open(id);
        Camera.Parameters p = mCamera.getParameters();

        // Get preview resolutions

        List<Camera.Size> unsortedSizes = p.getSupportedPreviewSizes();

        class SizeCompare implements Comparator<Camera.Size> {
            public int compare(Camera.Size lhs, Camera.Size rhs) {
                if (lhs.width < rhs.width) return -1;
                if (lhs.width > rhs.width) return 1;
                if (lhs.height < rhs.height) return -1;
                if (lhs.height > rhs.height) return 1;
                return 0;
            }
        };

        SizeCompare s = new SizeCompare();
        TreeSet<Camera.Size> sortedResolutions = new TreeSet<Camera.Size>(s);
        sortedResolutions.addAll(unsortedSizes);

        mPreviewSizes = new ArrayList<Camera.Size>(sortedResolutions);

        String[] availableSizeNames = new String[mPreviewSizes.size()];
        for (int i = 0; i < mPreviewSizes.size(); i++) {
            availableSizeNames[i] =
                    Integer.toString(mPreviewSizes.get(i).width) + " x " +
                    Integer.toString(mPreviewSizes.get(i).height);
        }
        mResolutionSpinner.setAdapter(
            new ArrayAdapter<String>(
                this, R.layout.cf_format_list_item, availableSizeNames));


        // Set initial values
	//
        int initialSize = mPreviewSizes.size() - 1;

	mNextPreviewSize = mPreviewSizes.get(initialSize);
        mResolutionSpinner.setSelection(initialSize);

	if(mPreviewTexture != null)
	{
            startPreview();
        }
!!!38664631.java!!!	shutdownCamera() : void
        if (mCamera != null) {
            mCamera.setPreviewCallbackWithBuffer(null);
            mCamera.stopPreview();
            mCamera.release();
            mCamera = null;
            mState = STATE_OFF;
        }
!!!38664759.java!!!	startPreview() : void
        if (mState != STATE_OFF) {
            // Stop for a while to drain callbacks
            mCamera.setPreviewCallbackWithBuffer(null);
            mCamera.stopPreview();
            mState = STATE_OFF;
            Handler h = new Handler();
            Runnable mDelayedPreview = new Runnable() {
                public void run() {
                    startPreview();
                }
            };
            h.postDelayed(mDelayedPreview, 300);
            return;
        }
        mState = STATE_PREVIEW;

        Matrix transform = new Matrix();
        float widthRatio = mNextPreviewSize.width / (float)mPreviewTexWidth;
        float heightRatio = mNextPreviewSize.height / (float)mPreviewTexHeight;

        transform.setScale(1, heightRatio/widthRatio);
        transform.postTranslate(0,
                mPreviewTexHeight * (1 - heightRatio/widthRatio)/2);

        mPreviewView.setTransform(transform);
        mOutputView.setTransform(transform);

        mPreviewSize   = mNextPreviewSize;

        Camera.Parameters p = mCamera.getParameters();
        p.setPreviewFormat(ImageFormat.NV21);
        p.setPreviewSize(mPreviewSize.width, mPreviewSize.height);
        mCamera.setParameters(p);

        mCamera.setPreviewCallbackWithBuffer(this);
        int expectedBytes = mPreviewSize.width * mPreviewSize.height *
                ImageFormat.getBitsPerPixel(ImageFormat.NV21) / 8;
        for (int i=0; i < 4; i++) {
            mCamera.addCallbackBuffer(new byte[expectedBytes]);
        }
        //mFormatView.setColorFilter(mYuv2RgbFilter);

        mProcessingFirstFrame = true;
        try {
            mCamera.setPreviewTexture(mPreviewTexture);
            mCamera.startPreview();
        } catch (IOException ioe) {
            // Something bad happened
            Log.e(TAG, "Unable to start up preview");
        }

!!!38665143.java!!!	onPreviewFrame(inout data : byte, inout camera : Camera) : void
        if (mProcessInProgress || mState != STATE_PREVIEW) {
            mCamera.addCallbackBuffer(data);
            return;
        }
        if (data == null) {
            return;
        }

        int expectedBytes = mPreviewSize.width * mPreviewSize.height *
                ImageFormat.getBitsPerPixel(ImageFormat.NV21) / 8;

        if (expectedBytes != data.length) {
            Log.e(TAG, "Mismatched size of buffer! Expected ");

            mState = STATE_NO_CALLBACKS;
            mCamera.setPreviewCallbackWithBuffer(null);
            return;
        }

        mProcessInProgress = true;

        if ((mFilterYuv == null) ||
            (mPreviewSize.width != mFilterYuv.getWidth()) ||
            (mPreviewSize.height != mFilterYuv.getHeight()) ) {

            mFilterYuv.reset(mPreviewSize.width, mPreviewSize.height);
        }

        mProcessInProgress = true;
        new ProcessPreviewDataTask().execute(data);
