class KernelDataForRenderScript
!!!38672823.java!!!	getNumSubPixels() : int
    return NUM_SUB_PIXELS;
!!!38672951.java!!!	getMaxKernelRadius() : int
    return MAX_KERNEL_RADIUS;
!!!38673079.java!!!	setUseNewRS(inout choice : boolean) : void
UseNewRS = choice;
!!!38673207.java!!!	computeKernelRadiusFromDiskRadius(in diskRadius : float) : int
    return (int) (diskRadius) + 1;
!!!38673335.java!!!	getKernelInfo() : ScriptField_KernelInfo
    return kernelInfo;
!!!38673463.java!!!	KernelDataForRenderScript(in targetLayer : int, inout blurStack : BlurStack, inout renderScript : RenderScript)
		if (UseNewRS) {
			// Use the new version of renderscript files.
 			int numDepths = blurStack.getNumDepths(targetLayer);
			infoAllocation = Allocation.createSized(
        	renderScript, Element.F32_4(renderScript),
        	numDepths);

			infoArray = new float[4*numDepths];
    		// Generates information for each blur kernel matrix.
    		int offset = 0;
    		for (int m = 0; m < numDepths; ++m) {
      			int depth = blurStack.getDepth(targetLayer, m);
      			float diskRadius = blurStack.getDiskRadius(depth);
      			int kernelRadius = computeKernelRadiusFromDiskRadius(diskRadius);

				infoArray[m*4] = offset;
				infoArray[m*4 + 1] = kernelRadius;
				infoArray[m*4 + 2] = kernelRadius;
	
      			// Updates offset variable.
      			int kernelLength = (2 * kernelRadius + 1) * (2 * kernelRadius + 1);
      			offset += kernelLength;
    		}
			infoAllocation.copyFrom(infoArray);
    		stackLength = offset;
		} else {
			// Use original version of renderscript files.
    		int numDepths = blurStack.getNumDepths(targetLayer);
    		kernelInfo = new ScriptField_KernelInfo(renderScript, numDepths);

    		// Generates information for each blur kernel matrix.
    		int offset = 0;
    		for (int m = 0; m < numDepths; ++m) {
      			int depth = blurStack.getDepth(targetLayer, m);
      			float diskRadius = blurStack.getDiskRadius(depth);
      			int kernelRadius = computeKernelRadiusFromDiskRadius(diskRadius);
      			// Sets information for the {@code m}'th kernel matrix.
      			kernelInfo.set_offset(m, offset, true);
      			kernelInfo.set_radius_x(m, kernelRadius, true);
      			kernelInfo.set_radius_y(m, kernelRadius, true);
      			// Updates offset variable.
      			int kernelLength = (2 * kernelRadius + 1) * (2 * kernelRadius + 1);
      			offset += kernelLength;
    		}
    		stackLength = offset;
		}
