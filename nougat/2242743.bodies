class RefocusFilter
!!!38675127.java!!!	RefocusFilter(inout rs : RenderScript)
    renderScript = rs;
!!!38675255.java!!!	compute(inout inputImage : Bitmap, inout blurStack : BlurStack) : Bitmap

    // Initializes {@code scriptC} and allocates required memory buffers
    // (defined in subclasses) that interface between Java and Render Script.
    initializeScriptAndBuffers(inputImage,
        blurStack.getLayerInfo(blurStack.getFocusLayer()));

    // Processes layers from back-most to focal depth (including the focal
    // depth).
    if (!processLayersFromBackToFocus(blurStack)) {
      return null;
    }

    // Processes layers from front-most to focal depth (excluding the focal
    // depth).
    if (!processLayersFromFrontToFocus(blurStack)) {
      return null;
    }

    // Extracts the result from .rs file to Java.
    Bitmap resultImage = extractResultImage();
    renderScript.finish();

    Log.d(TAG, "filterAndBlendAllLayersUsingKernel is finished");
    return resultImage;
!!!38675383.java!!!	processLayersFromBackToFocus(inout blurStack : BlurStack) : boolean
    for (int targetLayer = blurStack.getNumLayers() - 1;
        targetLayer >= blurStack.getFocusLayer(); --targetLayer) {
      // Sets up target layer info in Render Script.
      LayerInfo layerInfo = blurStack.getLayerInfo(targetLayer);
      setTargetLayer(layerInfo);

      // For a layer that is behind the focal depth, its back depth has the
      // largest blur kernel radius. Uses the kernel radius as dilation radius
      // of this layer.
      int dilationRadius = getKernelRadius(layerInfo.backDepth, blurStack);
      setBlendInfo(dilationRadius);

      // Sends blur kernel matrix data to Render Script.
      setKernelData(targetLayer, blurStack);

      // Marks active pixels (pixels that on this layer).
      // Marks pixels that are close enough (within dilationRadius) to the
      // active pixels.
      // Computes distance transform of the active pixels in their neighborhood
      // and use the distance value as matte for layer blending later.
      computeLayerMatteBehindFocalDepth();

      // Computes filtering for pixels on the target layer and saves the
      // filtering result in a buffer {@code g_fuzzy_image} in .rs file.
      filterLayerBehindFocalDepth();

      // Replaces active pixels in {@code g_sharp_image} with the filtering
      // result saved in {@code g_fuzzy_image}. The replacement is soft,
      // blending {@code g_sharp_image} and {@code g_fuzzy_image} using the
      // computed matte. Uses the blending result as the sharp input image for
      // the next iteration.
      updateSharpImageUsingFuzzyImage();
    }
    return true;
!!!38675511.java!!!	processLayersFromFrontToFocus(inout blurStack : BlurStack) : boolean
    // At this point, the input image {@code g_sharp_image} has been updated by
    // the first pass from back-most layer to focus layer {@code
    // processLayersFromBackToFocus}.
    for (int targetLayer = 0; targetLayer < blurStack.getFocusLayer();
        ++targetLayer) {
      // Sets up target layer info in Render Script.
      LayerInfo layerInfo = blurStack.getLayerInfo(targetLayer);
      setTargetLayer(layerInfo);

      // For a layer that is in front of the focal depth, its front depth has
      // the largest blur kernel radius. Uses the kernel radius as dilation
      // radius of this layer.
      int dilationRadius = getKernelRadius(layerInfo.frontDepth, blurStack);
      setBlendInfo(dilationRadius);

      // Sends blur kernel matrix data to Render Script.
      setKernelData(targetLayer, blurStack);

      // Marks active pixels (pixels that on this layer).
      // Marks pixels that are close enough (within dilationRadius) to the
      // active pixels.
      // Computes distance transform of the active pixels in their neighborhood
      // and use the distance value as matte for layer blending later.
      computeLayerMatteInFrontOfFocalDepth();

      // Computes filtering for pixels on the target layer and accumulates the
      // filtering result to an buffer {@code g_fuzzy_image} in .rs file.
      // The accumulating operation is soft, using the computed matte values.
      filterLayerInFrontOfFocalDepth();
    }

    // Fills in the pixels on or behind the focal depth in {@code g_fuzzy_image}
    // using pixels in {@code g_sharp_image}. Does the filling in a soft way by
    // blending using the matte. Uses the blending result (saved in {@code
    // g_fuzzy_image}) as the final output image.
    finalizeFuzzyImageUsingSharpImage();
    return true;
!!!38675639.java!!!	getKernelRadius(in depth : int, inout blurStack : BlurStack) : int
    int kernelRadius = KernelDataForRenderScript
        .computeKernelRadiusFromDiskRadius(blurStack.getDiskRadius(depth));
    return kernelRadius;
