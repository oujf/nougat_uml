class ImageBuffersForRenderScriptF32
!!!38683959.java!!!	ImageBuffersForRenderScriptF32(inout image : Bitmap, in margin : int, inout renderScript : RenderScript, inout scriptC : ScriptC_layered_filter_fast_f32)
    super(image, margin, renderScript);

    sharpImageAllocation = Allocation.createSized(
        renderScript, Element.F32_4(renderScript),
        imageWidthPadded * imageHeightPadded);

    fuzzyImageAllocation = Allocation.createSized(
        renderScript, Element.F32_4(renderScript),
        imageWidthPadded * imageHeightPadded);

    integralImageAllocation = Allocation.createSized(renderScript,
        Element.F32_4(renderScript), imageWidthPadded * imageHeightPadded);

    scriptC.bind_g_sharp_image_buffer(sharpImageAllocation);
    scriptC.bind_g_fuzzy_image_buffer(fuzzyImageAllocation);
    scriptC.bind_g_integral_image_buffer(integralImageAllocation);
!!!38684087.java!!!	initializeRenderScript(inout focalLayer : LayerInfo, inout scriptC : ScriptC_layered_filter_fast_f32) : void
    long startnow;
    long endnow;

    startnow = System.nanoTime();
    scriptC.invoke_InitializeF32(imageWidthPadded, imageHeightPadded,
        paddedMargin, focalLayer.frontDepth, focalLayer.backDepth);
    endnow = System.nanoTime();
    Log.d(myTAG, "Initialize: " + (endnow - startnow) + " ns");
    // At this point, {@code inAllocation} contains input RGBD image in Java.
    // {@code g_sharp_image} is a global pointer that points the focus image in
    // Render Script. The following function copies {@code inAllocation} in
    // Java to {@code g_sharp_image) in Render Script.
    startnow = System.nanoTime();
    scriptC.forEach_UnpackInputImage(inAllocation);
    endnow = System.nanoTime();
    Log.d(myTAG, "UnpackInputImage: " + (endnow - startnow) + " ns");
