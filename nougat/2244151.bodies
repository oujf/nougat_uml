class RefocusFilterF32
!!!38684599.java!!!	RefocusFilterF32(inout rs : RenderScript)
    super(rs);
!!!38684727.java!!!	initializeScriptAndBuffers(inout inputImage : Bitmap, inout focalLayer : LayerInfo) : void
    scriptC = new ScriptC_layered_filter_fast_f32(renderScript);

    // Allocates, binds, and initializes buffers that interface between Java
    // and Render Script.
    // + 1 is for the boundary case of using integral image.
    KernelDataForRenderScript.setUseNewRS(false);
    int margin = KernelDataForRenderScript.getMaxKernelRadius() + 1;
    buffers = new ImageBuffersForRenderScriptF32(inputImage, margin,
        renderScript, scriptC);
    buffers.initializeRenderScript(focalLayer, scriptC);
!!!38684855.java!!!	extractResultImage() : Bitmap
    // Extracts the result from .rs file to {@code buffers.outputImage} in Java.
    long startnow;
    long endnow;
    startnow = System.nanoTime();
    scriptC.forEach_PackOutputImage(buffers.outAllocation);
    endnow = System.nanoTime();
    Log.d(myTAG, "PackOutputImage: "+(endnow - startnow)+ " ns" );

    buffers.outAllocation.copyTo(buffers.outputImage);
    return buffers.outputImage;
!!!38684983.java!!!	extractSharpImage(inout name : String) : void

    Bitmap mBitmap = Bitmap.createBitmap(buffers.inputImage.getWidth(),
            buffers.inputImage.getHeight(), Bitmap.Config.ARGB_8888);
    Allocation mAllocation = Allocation.createFromBitmap(renderScript, mBitmap);
    scriptC.forEach_PackSharpImage(mAllocation);

    mAllocation.copyTo(mBitmap);
    MediaStoreSaver.savePNG(mBitmap, "sharpF32", name, renderScript.getApplicationContext());
!!!38685111.java!!!	extractFuzzyImage(inout name : String) : void

    Bitmap mBitmap = Bitmap.createBitmap(buffers.inputImage.getWidth(),
            buffers.inputImage.getHeight(), Bitmap.Config.ARGB_8888);
    Allocation mAllocation = Allocation.createFromBitmap(renderScript, mBitmap);
    scriptC.forEach_PackFuzzyImage(mAllocation);

    mAllocation.copyTo(mBitmap);
    MediaStoreSaver.savePNG(mBitmap, "fuzzyF32", name, renderScript.getApplicationContext());
!!!38685239.java!!!	setTargetLayer(inout layerInfo : LayerInfo) : void
    scriptC.invoke_SetTargetLayer(layerInfo.frontDepth, layerInfo.backDepth);
!!!38685367.java!!!	setBlendInfo(in dilationRadius : int) : void
    scriptC.invoke_SetBlendInfo(dilationRadius);
!!!38685495.java!!!	setKernelData(in targetLayer : int, inout blurStack : BlurStack) : void
    KernelDataForRenderScriptF32 kernelData =
        new KernelDataForRenderScriptF32(targetLayer, blurStack, renderScript);

    if (ENABLE_FAST_FILTER
        && kernelData.minDiskRadius > MIN_DISC_RADIUS_FOR_FAST_FILTER) {
      useFastFilterForCurrentLayer = true;
    } else {
      useFastFilterForCurrentLayer = false;
    }

    scriptC.bind_g_kernel_info(kernelData.getKernelInfo());
    scriptC.bind_g_kernel_stack(kernelData.stackAllocation);
!!!38685623.java!!!	computeLayerMatteBehindFocalDepth() : void
    // Marks active pixels (pixels that are on this target layer);
    // Marks adjacent pixels that are close enough to active pixels;
    long startnow;
    long endnow;
    startnow = System.nanoTime();
    scriptC.forEach_MarkLayerMask(buffers.inAllocation);
    endnow = System.nanoTime();
    Log.d(myTAG, "MarkLayerMask: "+(endnow - startnow)+ " ns" );

    startnow = System.nanoTime();
    scriptC.forEach_ComputeLayerMatteBehindFocalDepth(buffers.inAllocation);
    endnow = System.nanoTime();
    Log.d(myTAG, "ComputeLayerMatteBehindFocalDepth: "+(endnow - startnow)+ " ns" );
!!!38685751.java!!!	filterLayerBehindFocalDepth() : void
    // Filters the target layer and saves the result to {@code g_accum_map} in
    // .rs file.
    long startnow;
    long endnow;
    if (useFastFilterForCurrentLayer) {
      scriptC.invoke_SetUseIntegralImage(1);
      Script.LaunchOptions launchOptions = new Script.LaunchOptions();
      launchOptions.setX(0, 1);
      launchOptions.setY(0, buffers.inputImage.getHeight());

      startnow = System.nanoTime();
      scriptC.forEach_ComputeIntegralImageForLayerBehindFocalDepth(
          buffers.inAllocation, launchOptions);
      endnow = System.nanoTime();
      Log.d(myTAG, "ComputeIntegralImageForLayerBehindFocalDepth: "+(endnow - startnow)+ " ns" );
    } else {
      scriptC.invoke_SetUseIntegralImage(0);
    }

    startnow = System.nanoTime();
    scriptC.forEach_FilterLayerBehindFocalDepth(buffers.inAllocation);
    endnow = System.nanoTime();
    Log.d(myTAG, "FilterLayerBehindFocalDepth: "+(endnow - startnow)+ " ns" );

    //extractFuzzyImage("fuzzy_behind");
    //extractSharpImage("sharp_behind");
!!!38685879.java!!!	updateSharpImageUsingFuzzyImage() : void
		// Log the kernel execution time
    long startnow;
    long endnow;
    startnow = System.nanoTime();
    scriptC.forEach_UpdateSharpImageUsingFuzzyImage(buffers.inAllocation);
    endnow = System.nanoTime();
    Log.d(myTAG, "UpdateSharpImageUsingFuzzyImage: "+(endnow - startnow)+ " ns" );

    //extractSharpImage("sharp_update");
!!!38686007.java!!!	computeLayerMatteInFrontOfFocalDepth() : void
    // Marks active pixels (pixels that are on this target layer);
    // Marks adjacent pixels that are close enough to active pixels;
    long startnow;
    long endnow;
    startnow = System.nanoTime();
    scriptC.forEach_MarkLayerMask(buffers.inAllocation);
    endnow = System.nanoTime();
    Log.d(myTAG, "MarkLayerMask: "+(endnow - startnow)+ " ns" );

    startnow = System.nanoTime();
    scriptC.forEach_ComputeLayerMatteInFrontOfFocalDepth(buffers.inAllocation);
    endnow = System.nanoTime();
    Log.d(myTAG, "ComputeLayerMatteInFrontOfFocalDepth: "+(endnow - startnow)+ " ns" );
!!!38686135.java!!!	filterLayerInFrontOfFocalDepth() : void
    // Filters the target layer and accumulates the result to {@code
    // g_accum_map} in .rs file.
    long startnow;
    long endnow;
    if (useFastFilterForCurrentLayer) {
      scriptC.invoke_SetUseIntegralImage(1);
      Script.LaunchOptions launchOptions = new Script.LaunchOptions();
      launchOptions.setX(0, 1);
      launchOptions.setY(0, buffers.inputImage.getHeight());

      startnow = System.nanoTime();
      scriptC.forEach_ComputeIntegralImageForLayerInFrontOfFocalDepth(
          buffers.inAllocation, launchOptions);
      endnow = System.nanoTime();
      Log.d(myTAG, "ComputeIntegralImageForLayerInFrontOfFocalDepth: "+(endnow - startnow)+ " ns" );
    } else {
      scriptC.invoke_SetUseIntegralImage(0);
    }
    startnow = System.nanoTime();
    scriptC.forEach_FilterLayerInFrontOfFocalDepth(buffers.inAllocation);
    endnow = System.nanoTime();
    Log.d(myTAG, "FilterLayerInFrontOfFocalDepth: "+(endnow - startnow)+ " ns" );

    //extractFuzzyImage("fuzzy_front");
    //extractSharpImage("sharp_front");
!!!38686263.java!!!	finalizeFuzzyImageUsingSharpImage() : void
    // Blends {@code g_accum_map} and {@code g_focus_map} in .rs file.
    // Saves the result in {@code g_accum_map}.
    long startnow;
    long endnow;
    startnow = System.nanoTime();
    scriptC.forEach_FinalizeFuzzyImageUsingSharpImage(buffers.inAllocation);
    endnow = System.nanoTime();
    Log.d(myTAG, "FinalizeFuzzyImageUsingSharpImage: "+(endnow - startnow)+ " ns" );
