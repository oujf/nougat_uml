class Processor
!!!38688183.java!!!	runTest() : void
            mTest.runTest();
!!!38688311.java!!!	Processor(inout rs : RenderScript, inout benchmarkMode : boolean)
            mRS = rs;
            mRS.setMessageHandler(new MessageProcessor());
            mBenchmarkMode = benchmarkMode;
            start();
!!!38688439.java!!!	runBenchmarkLoop(in minTime : float) : BlasBenchmark::Processor::Result
            Result r = new Result();
            long t = java.lang.System.currentTimeMillis();

            r.testInfo = mTest.getTestInfo();
            do {
                // Run the kernel
                mTest.runTest();
                r.iterations ++;
                // Send our RS message handler a message so we know when this work has completed
                mRS.sendMessage(0, null);

                long t2 = java.lang.System.currentTimeMillis();
                r.totalTime += (t2 - t) / 1000.f;
                t = t2;
            } while (r.totalTime < minTime);

            // Wait for any stray operations to complete and update the final time
            mRS.finish();
            long t2 = java.lang.System.currentTimeMillis();
            r.totalTime += (t2 - t) / 1000.f;
            t = t2;
            return r;
!!!38688567.java!!!	getBenchmark() : BlasBenchmark::Processor::Result
            mDoingBenchmark = true;

            long result = 0;
            float runtime = 1.f;
            if (mToggleLong) {
                runtime = 10.f;
            }

            // We run a short bit of work before starting the actual test
            // this is to let any power management do its job and respond
            runBenchmarkLoop(0.3f);

            // Run the actual benchmark
            Result r = runBenchmarkLoop(runtime);

            Log.v("rs", "Test: time=" + r.totalTime +"s,  iterations=" + r.iterations +
                  ", avg=" + r.totalTime / r.iterations * 1000.f);

            mDoingBenchmark = false;
            return r;
!!!38688695.java!!!	run() : void
            while (mRun) {
                // Our loop for launching tests or benchmarks
                synchronized(this) {
                    // We may have been asked to exit while waiting
                    if (!mRun) return;
                }

                if (mBenchmarkMode) {
                    // Loop over the tests we want to benchmark
                    for (int ct=0; (ct < mTestList.length) && mRun; ct++) {

                        // For reproducibility we wait a short time for any sporadic work
                        // created by the user touching the screen to launch the test to pass.
                        // Also allows for things to settle after the test changes.
                        mRS.finish();
                        try {
                            sleep(250);
                        } catch(InterruptedException e) {
                        }

                        // If we just ran a test, we destroy it here to relieve some memory pressure
                        if (mTest != null) {
                            mTest.destroy();
                        }

                        // Select the next test
                        mTest = changeTest(mTestList[ct], false);
                        // If the user selected the "long pause" option, wait
                        if (mTogglePause) {
                            for (int i=0; (i < 100) && mRun; i++) {
                                try {
                                    sleep(100);
                                } catch(InterruptedException e) {
                                }
                            }
                        }

                        // Run the test
                        Result r = getBenchmark();
                        mTestResults[ct] = r.totalTime / r.iterations * 1000.f;
                        mTestInfo[ct] = r.testInfo;
                    }
                    onBenchmarkFinish(mRun);
                } else {
                    // Run the kernel
                    runTest();
                    // Send our RS message handler a message so we know when this work has completed
                    mRS.sendMessage(0, null);
                }
            }

!!!38688823.java!!!	exit() : void
            mRun = false;

            synchronized(this) {
                notifyAll();
            }

            try {
                this.join();
            } catch(InterruptedException e) {
            }

            if (mTest != null) {
                mTest.destroy();
                mTest = null;
            }
            mRS.destroy();
            mRS = null;
