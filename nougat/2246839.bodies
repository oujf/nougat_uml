class CameraView
!!!38703543.java!!!	CameraView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        mContext = context;

        mRS = RenderScript.create(mContext);
        SurfaceHolder.Callback callback = new SurfaceHolder.Callback() {
            @Override
            public void surfaceCreated(SurfaceHolder holder) {
            }

            @Override
            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
                mPreviewSurface = holder.getSurface();
                setupProcessor();
            }

            @Override
            public void surfaceDestroyed(SurfaceHolder holder) {
                mPreviewSurface = null;
            }
        };
        getHolder().addCallback(callback);
        mCameraManager = (CameraManager) mContext.getSystemService(mContext.CAMERA_SERVICE);

        CameraOps.ErrorDisplayer errorDisplayer = new CameraOps.ErrorDisplayer() {

            @Override
            public void showErrorDialog(String errorMessage) {
                Log.v(TAG, "ERROR");
                if (mErrorCallback != null) {
                    mErrorCallback.showError(errorMessage);
                }
                //MessageDialogFragment.newInstance(errorMessage).show(getFragmentManager(), FRAGMENT_DIALOG);
            }

            @Override
            public String getErrorString(CameraAccessException e) {
                switch (e.getReason()) {
                    case CameraAccessException.CAMERA_DISABLED:
                        return mContext.getString(R.string.camera_disabled);
                    case CameraAccessException.CAMERA_DISCONNECTED:
                        return mContext.getString(R.string.camera_disconnected);
                    case CameraAccessException.CAMERA_ERROR:
                        return mContext.getString(R.string.camera_error);
                    default:
                        return mContext.getString(R.string.camera_unknown, e.getReason());

                }
            }
        };

        CameraOps.CameraReadyListener cameraReadyListener = new CameraOps.CameraReadyListener() {
            @Override
            public void onCameraReady() {
                mCameraOps.setUpCamera(mProcessingNormalSurface);
            }
        };
        setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                return touchScreen(event);
            }
        });
        mCameraOps = new CameraOps(mCameraManager,
                errorDisplayer,
                cameraReadyListener);
!!!38703671.java!!!	resume(inout activity : Activity) : void
        mActivity = activity;

        String errorMessage = mCameraOps.resume();
        if (errorMessage != null) {
            if (mErrorCallback != null) {
                mErrorCallback.showError(errorMessage);
            }
        } else {

            Size outputSize = mCameraOps.getBestSize();
            mProcessor = new ViewfinderProcessor(mRS, outputSize);
            // Configure the output view - this will fire surfaceChanged
            setAspectRatio((float) outputSize.getWidth() / outputSize.getHeight());
            getHolder().setFixedSize(outputSize.getWidth(), outputSize.getHeight());
        }
!!!38703799.java!!!	pause() : void
        mCameraOps.pause();
!!!38703927.java!!!	setupProcessor() : void
        if (mProcessor == null || mPreviewSurface == null) return;
        mProcessor.setOutputSurface(mPreviewSurface);
        mProcessingNormalSurface = mProcessor.getInputSurface();
        mCameraOps.setSurface(mProcessingNormalSurface);
!!!38704055.java!!!	takePicture() : void
        // Orientation
        int rotation = mActivity.getWindowManager().getDefaultDisplay().getRotation();
        int jpegRotation = Surface.ROTATION_0;
        switch (rotation) {
            case 90:
                jpegRotation = Surface.ROTATION_0;
                break;
            case 0:
                jpegRotation = Surface.ROTATION_90;
                break;
            case 180:
                jpegRotation = Surface.ROTATION_270;
                break;
            case 270:
                jpegRotation = Surface.ROTATION_180;
                break;
        }
        String name = "Simple" + System.currentTimeMillis() + ".jpg";
        mCameraOps.captureStillPicture(jpegRotation, name, mContext.getContentResolver());
!!!38704183.java!!!	touchScreen(inout event : MotionEvent) : boolean
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            mDownY = event.getY();
            mExposureDown = mCameraOps.getExposure();
            mFocusDistDown = mCameraOps.getFocusDistance();
            if (mFocusDistDown == 0.0) {
                mFocusDistDown = 0.01f;
            }
        }
        float distanceY = event.getY() - mDownY;
        float width = getWidth();
        float height = getHeight();

        float yDistNorm = distanceY / height;

        float ACCELERATION_FACTOR = 8;
        float scaleFactor = (float) Math.pow(2.f, yDistNorm * ACCELERATION_FACTOR);

        switch (mode) {
            case MODE_SPEED:
                long exp = (long) (mExposureDown * scaleFactor);
                exp = Math.min(mCameraOps.getExpMax(), exp);
                mCameraOps.setExposure(Math.max(mCameraOps.getExpMin(), exp));
                Log.v(TAG, "mExposure =" + mCameraOps.getExposure());
                break;
            case MODE_FOCUS:
                float focusDist = mFocusDistDown * scaleFactor;
                focusDist = Math.max(0.0f, Math.min(mCameraOps.getFocusMin(), focusDist));
                if (focusDist < 0.01) focusDist = 0;
                mCameraOps.setFocusDistance(focusDist);
                Log.v(TAG, "mFocusDist =" + focusDist);
                break;
            case MODE_ISO:
                ACCELERATION_FACTOR = 2;
                scaleFactor = (float) Math.pow(2.f, yDistNorm * ACCELERATION_FACTOR);
                int iso = (int) (getIso() * scaleFactor);
                iso = Math.min(mCameraOps.getIsoMax(), iso);
                mCameraOps.setIso(Math.max(mCameraOps.getIsoMin(), iso));
                break;
        }

        if (mParametersChangedCallback != null) {
            mParametersChangedCallback.parametersChanged();
        }
        mCameraOps.setParameters();

        return true;
!!!38704311.java!!!	setMode(in mode : byte) : void
        this.mode = mode;
!!!38704439.java!!!	getMode() : byte
        return mode;
!!!38704567.java!!!	getIso() : int
        return mCameraOps.getIso();
!!!38704695.java!!!	setIso(in iso : int) : void
        mCameraOps.setIso(iso);
        if (mParametersChangedCallback != null) {
            mParametersChangedCallback.parametersChanged();
        }
        mCameraOps.setParameters();
!!!38704823.java!!!	getExposure() : long
        return mCameraOps.getExposure();
!!!38704951.java!!!	setExposure(in exposure : long) : void
        mCameraOps.setExposure(exposure);
        if (mParametersChangedCallback != null) {
            mParametersChangedCallback.parametersChanged();
        }
        mCameraOps.setParameters();
!!!38705079.java!!!	getFocusDist() : float
        return mCameraOps.getFocusDistance();
!!!38705207.java!!!	setFocusInMeters(in dist : float) : void
        float min = mCameraOps.getFocusMin();
        float d = 10 / (dist + 10 / min);
        setFocusDist(d);
!!!38705335.java!!!	setFocusDist(in dist : float) : void
        mCameraOps.setFocusDistance(dist);
        mCameraOps.setParameters();
!!!38705463.java!!!	getMinFocusDistance() : float
        return mCameraOps.getFocusMin();
!!!38705591.java!!!	setAutofocus(inout autofocus : boolean) : void
        mCameraOps.setAutoFocus(autofocus);
        mCameraOps.setParameters();
!!!38705719.java!!!	isAutoExposure() : boolean
        return mCameraOps.isAutoExposure();
!!!38705847.java!!!	isAutofocus() : boolean
        return mCameraOps.isAutoFocus();
!!!38705975.java!!!	setAutoExposure(inout autoExposure : boolean) : void
        mCameraOps.setAutoExposure(autoExposure);
        mCameraOps.setParameters();
!!!38706231.java!!!	setErrorCallback(inout errorCallback : CameraView::ErrorCallback) : void
        mErrorCallback = errorCallback;
!!!38706487.java!!!	setParametersChangedCallback(inout parametersChangedCallback : CameraView::ParametersChangedCallback) : void
        mParametersChangedCallback = parametersChangedCallback;
!!!38706615.java!!!	getFps() : float
        return mProcessor.getmFps();
