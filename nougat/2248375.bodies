class UnitTest
!!!38711095.java!!!	UnitTest(inout rstc : RSTestCore, inout n : String, in initResult : int, inout ctx : Context)
        super();
        mRSTC = rstc;
        name = n;
        msgHandled = false;
        mCtx = ctx;
        result = initResult;
        testID = numTests++;
!!!38711223.java!!!	UnitTest(inout rstc : RSTestCore, inout n : String, inout ctx : Context)
        this(rstc, n, 0, ctx);
!!!38711351.java!!!	UnitTest(inout rstc : RSTestCore, inout ctx : Context)
        this (rstc, "<Unknown>", ctx);
!!!38711479.java!!!	UnitTest(inout ctx : Context)
        this (null, ctx);
!!!38711607.java!!!	_RS_ASSERT(inout message : String, inout b : boolean) : void
        if(b == false) {
            Log.e(name, message + " FAILED");
            failTest();
        }
!!!38711735.java!!!	updateUI() : void
        if (mItem != null) {
            mItem.result = result;
            msgHandled = true;
            try {
                mRSTC.refreshTestResults();
            }
            catch (IllegalStateException e) {
                /* Ignore the case where our message receiver has been
                   disconnected. This happens when we leave the application
                   before it finishes running all of the unit tests. */
            }
        }
!!!38711863.java!!!	waitForMessage() : void
        while (!msgHandled) {
            yield();
        }
!!!38711991.java!!!	getResult() : int
        return result;
!!!38712119.java!!!	failTest() : void
        result = -1;
        updateUI();
!!!38712247.java!!!	passTest() : void
        if (result != -1) {
            result = 1;
        }
        updateUI();
!!!38712375.java!!!	toString() : String
        String out = name;
        if (result == 1) {
            out += " - PASSED";
        }
        else if (result == -1) {
            out += " - FAILED";
        }
        return out;
!!!38712503.java!!!	setItem(inout item : ScriptField_ListAllocs_s.Item) : void
        mItem = item;
!!!38712631.java!!!	run() : void
        /* This method needs to be implemented for each subclass */
        if (mRSTC != null) {
            mRSTC.refreshTestResults();
        }
