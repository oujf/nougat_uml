class UT_reduce_backward
!!!38740023.java!!!	UT_reduce_backward(inout rstc : RSTestCore, inout res : Resources, inout ctx : Context)
        super(rstc, "reduce_backward", ctx);
!!!38740151.java!!!	createInputArrayByte(in len : int, in seed : int) : byte
        byte[] array = new byte[len];
        (new Random(seed)).nextBytes(array);
        return array;
!!!38740279.java!!!	createInputArrayFloat(in len : int, in seed : int) : float
        Random rand = new Random(seed);
        float[] array = new float[len];
        for (int i = 0; i < len; ++i)
            array[i] = rand.nextFloat();
        return array;
!!!38740407.java!!!	createInputArrayInt(in len : int, in seed : int) : int
        Random rand = new Random(seed);
        int[] array = new int[len];
        for (int i = 0; i < len; ++i)
            array[i] = rand.nextInt();
        return array;
!!!38740535.java!!!	createInputArrayInt(in len : int, in seed : int, in eltRange : int) : int
        Random rand = new Random(seed);
        int[] array = new int[len];
        for (int i = 0; i < len; ++i)
            array[i] = rand.nextInt(eltRange);
        return array;
!!!38740663.java!!!	result(inout testName : String, inout javaRslt : T, inout rsRslt : T) : boolean
        final boolean success = javaRslt.equals(rsRslt);
        Log.i(TAG,
                testName + ": java " + javaRslt + ", rs " + rsRslt + ": " +
                (success ? "PASSED" : "FAILED"));
        return success;
!!!38740791.java!!!	result(inout testName : String, inout javaRslt : Float2, inout rsRslt : Float2) : boolean
        final boolean success = (javaRslt.x == rsRslt.x) && (javaRslt.y == rsRslt.y);
        Log.i(TAG,
                testName +
                ": java (" + javaRslt.x + ", " + javaRslt.y + ")" +
                ", rs (" + rsRslt.x + ", " + rsRslt.y + ")" +
                ": " + (success ? "PASSED" : "FAILED"));
        return success;
!!!38740919.java!!!	result(inout testName : String, inout javaRslt : Int2, inout rsRslt : Int2) : boolean
        final boolean success = (javaRslt.x == rsRslt.x) && (javaRslt.y == rsRslt.y);
        Log.i(TAG,
                testName +
                ": java (" + javaRslt.x + ", " + javaRslt.y + ")" +
                ", rs (" + rsRslt.x + ", " + rsRslt.y + ")" +
                ": " + (success ? "PASSED" : "FAILED"));
        return success;
!!!38741047.java!!!	addint(inout input : int) : int
        int rslt = 0;
        for (int idx = 0; idx < input.length; ++idx)
            rslt += input[idx];
        return rslt;
!!!38741175.java!!!	addint1D(inout RS : RenderScript, inout s : ScriptC_reduce_backward) : boolean
        final int[] input = createInputArrayInt(100000, 0, 1 << 13);

        final int javaRslt = addint(input);
        final int rsRslt = s.reduce_addint(input).get();

        return result("addint1D", javaRslt, rsRslt);
!!!38741303.java!!!	addint2D(inout RS : RenderScript, inout s : ScriptC_reduce_backward) : boolean
        final int dimX = 450, dimY = 225;

        final int[] inputArray = createInputArrayInt(dimX * dimY, 1, 1 << 13);
        Type.Builder typeBuilder = new Type.Builder(RS, Element.I32(RS));
        typeBuilder.setX(dimX).setY(dimY);
        Allocation inputAllocation = Allocation.createTyped(RS, typeBuilder.create());
        inputAllocation.copy2DRangeFrom(0, 0, dimX, dimY, inputArray);

        final int javaRslt = addint(inputArray);
        final int rsRslt = s.reduce_addint(inputAllocation).get();

        return result("addint2D", javaRslt, rsRslt);
!!!38741431.java!!!	findMinAndMax(inout input : float) : Int2
        float minVal = Float.POSITIVE_INFINITY;
        int minIdx = -1;
        float maxVal = Float.NEGATIVE_INFINITY;
        int maxIdx = -1;

        for (int idx = 0; idx < input.length; ++idx) {
            if (input[idx] < minVal) {
                minVal = input[idx];
                minIdx = idx;
            }
            if (input[idx] > maxVal) {
                maxVal = input[idx];
                maxIdx = idx;
            }
        }

        return new Int2(minIdx, maxIdx);
!!!38741559.java!!!	findMinAndMax(inout RS : RenderScript, inout s : ScriptC_reduce_backward) : boolean
        final float[] input = createInputArrayFloat(100000, 4);

        final Int2 javaRslt = findMinAndMax(input);
        final Int2 rsRslt = s.reduce_findMinAndMax(input).get();

        // Note that the Java and RenderScript algorithms are not
        // guaranteed to find the same cells -- but they should
        // find cells of the same value.
        final Float2 javaVal = new Float2(input[javaRslt.x], input[javaRslt.y]);
        final Float2 rsVal = new Float2(input[rsRslt.x], input[rsRslt.y]);

        return result("findMinAndMax", javaVal, rsVal);
!!!38741687.java!!!	fz(inout RS : RenderScript, inout s : ScriptC_reduce_backward) : boolean
        final int inputLen = 100000;
        int[] input = createInputArrayInt(inputLen, 5);
        // just in case we got unlucky
        input[(new Random(6)).nextInt(inputLen)] = 0;

        final int rsRslt = s.reduce_fz(input).get();

        final boolean success = (input[rsRslt] == 0);
        Log.i(TAG,
                "fz: input[" + rsRslt + "] == " + input[rsRslt] + ": " +
                (success ? "PASSED" : "FAILED"));
        return success;
!!!38741815.java!!!	fz2(inout RS : RenderScript, inout s : ScriptC_reduce_backward) : boolean
        final int dimX = 225, dimY = 450;
        final int inputLen = dimX * dimY;

        int[] inputArray = createInputArrayInt(inputLen, 7);
        // just in case we got unlucky
        inputArray[(new Random(8)).nextInt(inputLen)] = 0;

        Type.Builder typeBuilder = new Type.Builder(RS, Element.I32(RS));
        typeBuilder.setX(dimX).setY(dimY);
        Allocation inputAllocation = Allocation.createTyped(RS, typeBuilder.create());
        inputAllocation.copy2DRangeFrom(0, 0, dimX, dimY, inputArray);

        final Int2 rsRslt = s.reduce_fz2(inputAllocation).get();

        final int cellVal = inputArray[rsRslt.x + dimX * rsRslt.y];
        final boolean success = (cellVal == 0);
        Log.i(TAG,
                "fz2: input[" + rsRslt.x + ", " + rsRslt.y + "] == " + cellVal + ": " +
                (success ? "PASSED" : "FAILED"));
        return success;
!!!38741943.java!!!	fz3(inout RS : RenderScript, inout s : ScriptC_reduce_backward) : boolean
        final int dimX = 59, dimY = 48, dimZ = 37;
        final int inputLen = dimX * dimY * dimZ;

        int[] inputArray = createInputArrayInt(inputLen, 9);
        // just in case we got unlucky
        inputArray[(new Random(10)).nextInt(inputLen)] = 0;

        Type.Builder typeBuilder = new Type.Builder(RS, Element.I32(RS));
        typeBuilder.setX(dimX).setY(dimY).setZ(dimZ);
        Allocation inputAllocation = Allocation.createTyped(RS, typeBuilder.create());
        inputAllocation.copy3DRangeFrom(0, 0, 0, dimX, dimY, dimZ, inputArray);

        final Int3 rsRslt = s.reduce_fz3(inputAllocation).get();

        final int cellVal = inputArray[rsRslt.x + dimX * rsRslt.y + dimX * dimY * rsRslt.z];
        final boolean success = (cellVal == 0);
        Log.i(TAG,
                "fz3: input[" + rsRslt.x + ", " + rsRslt.y + ", " + rsRslt.z + "] == " + cellVal + ": " +
                (success ? "PASSED" : "FAILED"));
        return success;
!!!38742071.java!!!	histogram(inout RS : RenderScript, in inputArray : byte) : long
        Allocation inputAllocation = Allocation.createSized(RS, Element.U8(RS), inputArray.length);
        inputAllocation.copyFrom(inputArray);

        Allocation outputAllocation = Allocation.createSized(RS, Element.U32(RS), histogramBucketCount);

        ScriptIntrinsicHistogram scriptHsg = ScriptIntrinsicHistogram.create(RS, Element.U8(RS));
        scriptHsg.setOutput(outputAllocation);
        scriptHsg.forEach(inputAllocation);

        int[] outputArrayMistyped = new int[histogramBucketCount];
        outputAllocation.copyTo(outputArrayMistyped);

        long[] outputArray = new long[histogramBucketCount];
        for (int i = 0; i < histogramBucketCount; ++i)
            outputArray[i] = outputArrayMistyped[i] & (long)0xffffffff;
        return outputArray;
!!!38742199.java!!!	histogram(inout RS : RenderScript, inout s : ScriptC_reduce_backward) : boolean
        final byte[] inputArray = createInputArrayByte(100000, 11);

        final long[] javaRslt = histogram(RS, inputArray);
        _RS_ASSERT("javaRslt unexpected length: " + javaRslt.length, javaRslt.length == histogramBucketCount);
        final long[] rsRslt = s.reduce_histogram(inputArray).get();
        _RS_ASSERT("rsRslt unexpected length: " + rsRslt.length, rsRslt.length == histogramBucketCount);

        for (int i = 0; i < histogramBucketCount; ++i) {
            if (javaRslt[i] != rsRslt[i]) {
                Log.i(TAG,
                        "histogram[" + i + "]: java " + javaRslt[i] + ", rs " + rsRslt[i] + ": FAILED");
                return false;
            }
        }

        Log.i(TAG, "histogram: PASSED");
        return true;
!!!38742327.java!!!	mode(inout RS : RenderScript, in inputArray : byte) : Int2
        long[] hsg = histogram(RS, inputArray);

        int modeIdx = 0;
        for (int i = 1; i < hsg.length; ++i)
            if (hsg[i] > hsg[modeIdx]) modeIdx =i;
        return new Int2(modeIdx, (int)hsg[modeIdx]);
!!!38742455.java!!!	mode(inout RS : RenderScript, inout s : ScriptC_reduce_backward) : boolean
        final byte[] inputArray = createInputArrayByte(100000, 12);

        final Int2 javaRslt = mode(RS, inputArray);
        final Int2 rsRslt = s.reduce_mode(inputArray).get();

        return result("mode", javaRslt, rsRslt);
!!!38742583.java!!!	run() : void
        RenderScript pRS = RenderScript.create(mCtx);
        ScriptC_reduce_backward s = new ScriptC_reduce_backward(pRS);
        s.set_negInf(Float.NEGATIVE_INFINITY);
        s.set_posInf(Float.POSITIVE_INFINITY);

        boolean pass = true;
        pass &= addint1D(pRS, s);
        pass &= addint2D(pRS, s);
        pass &= findMinAndMax(pRS, s);
        pass &= fz(pRS, s);
        pass &= fz2(pRS, s);
        pass &= fz3(pRS, s);
        pass &= histogram(pRS, s);
        pass &= mode(pRS, s);

        pRS.finish();
        pRS.destroy();

        Log.i(TAG, pass ? "PASSED" : "FAILED");
        if (pass)
            passTest();
        else
            failTest();
