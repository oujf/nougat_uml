class UT_script_group2_gatherscatter
!!!38744887.java!!!	UT_script_group2_gatherscatter(inout rstc : RSTestCore, inout res : Resources, inout ctx : Context)
        super(rstc, TAG, ctx);
        mRes = res;
!!!38745015.java!!!	initializeGlobals(inout RS : RenderScript, inout s : ScriptC_addup) : void
        mArray = new int[ARRAY_SIZE * 4];

        for (int i = 0; i < ARRAY_SIZE; i++) {
            mArray[i*4] = i * 7;
            mArray[i*4 + 1] = i * 7 + 1;
            mArray[i*4 + 2] = i * 7 + 2;
            mArray[i*4 + 3] = i * 7 + 3;
        }
!!!38745143.java!!!	run() : void
        RenderScript pRS = RenderScript.create(mCtx);
        ScriptC_addup s = new ScriptC_addup(pRS);
        pRS.setMessageHandler(mRsMessage);
        initializeGlobals(pRS, s);

        Allocation input = Allocation.createSized(pRS, Element.I32_4(pRS), ARRAY_SIZE);
        input.copyFrom(mArray);

        ScriptGroup.Builder2 builder = new ScriptGroup.Builder2(pRS);

        ScriptGroup.Input unbound = builder.addInput();

        ScriptGroup.Closure c = null;
        ScriptGroup.Future f = null;
        int stride;
        for (stride = ARRAY_SIZE / 2; stride >= 1; stride >>= 1) {
            ScriptGroup.Binding binding;
            if (f == null) {
                binding = new ScriptGroup.Binding(s.getFieldID_a_in(), unbound);
            } else {
                binding = new ScriptGroup.Binding(s.getFieldID_a_in(), f);
            }
            c = builder.addKernel(s.getKernelID_add(),
                                  Type.createX(pRS, Element.I32_4(pRS), stride),
                                  new ScriptGroup.Binding(s.getFieldID_reduction_stride(), stride),
                                  binding);
            f = c.getReturn();
        }

        ScriptGroup group = builder.create("Summation", c.getReturn());

        if (c == null) {
            return;
        }

        int[] a = new int[4];
        ((Allocation)group.execute(input)[0]).copyTo(a);

        pRS.finish();
        pRS.destroy();

        boolean failed = false;
        for (int i = 0; i < 4; i++) {
            if (failed == false &&
                a[i] != ARRAY_SIZE * (ARRAY_SIZE - 1) * 7 / 2 + i * ARRAY_SIZE) {
                Log.e(TAG, "a["+i+"]="+a[i]+", should be "+
                      (ARRAY_SIZE * (ARRAY_SIZE - 1) * 7 / 2 + i * ARRAY_SIZE));
                failed = true;
            }
        }
        if (failed) {
            failTest();
            return;
        }
        passTest();
