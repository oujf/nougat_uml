class UT_alloc_copy
!!!38750903.java!!!	UT_alloc_copy(inout rstc : RSTestCore, inout res : Resources, inout ctx : Context)
        super(rstc, "Allocation CopyTo", ctx);
        mRes = res;
!!!38751031.java!!!	run() : void
        RenderScript mRS = RenderScript.create(mCtx);

        allocation_copy1DRangeTo_Byte(mRS);
        allocation_copy1DRangeTo_Short(mRS);
        allocation_copy1DRangeTo_Int(mRS);
        allocation_copy1DRangeTo_Float(mRS);
        allocation_copy1DRangeTo_Long(mRS);

        allocation_copy2DRangeTo_Byte(mRS);
        allocation_copy2DRangeTo_Short(mRS);
        allocation_copy2DRangeTo_Int(mRS);
        allocation_copy2DRangeTo_Float(mRS);
        allocation_copy2DRangeTo_Long(mRS);

        allocation_copy1DRangeToUnchecked_Byte(mRS);
        allocation_copy1DRangeToUnchecked_Short(mRS);
        allocation_copy1DRangeToUnchecked_Int(mRS);
        allocation_copy1DRangeToUnchecked_Float(mRS);
        allocation_copy1DRangeToUnchecked_Long(mRS);

        mRS.destroy();
        passTest();
!!!38751159.java!!!	allocation_copy1DRangeTo_Byte(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(512);
        int arr_len = width;

        byte[] inArray = new byte[arr_len];
        byte[] outArray = new byte[arr_len];
        random.nextBytes(inArray);

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I8(mRS));
        typeBuilder.setX(width);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        int offset = random.nextInt(arr_len);
        int count = arr_len - offset;
        alloc.copy1DRangeFrom(offset, count, inArray);
        alloc.copy1DRangeTo(offset, count, outArray);

        boolean result = true;
        for (int i = 0; i < count; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        for (int i = count; i < arr_len; i++) {
            if (outArray[i] != 0) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy1DRangeTo_Byte TEST PASSED");
        } else {
            failTest();
        }
!!!38751287.java!!!	allocation_copy1DRangeTo_Short(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(512);
        int arr_len = width;

        short[] inArray = new short[arr_len];
        short[] outArray = new short[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = (short)random.nextInt();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I16(mRS));
        typeBuilder.setX(width);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        int offset = random.nextInt(arr_len);
        int count = arr_len - offset;
        alloc.copy1DRangeFrom(offset, count, inArray);
        alloc.copy1DRangeTo(offset, count, outArray);

        boolean result = true;
        for (int i = 0; i < count; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        for (int i = count; i < arr_len; i++) {
            if (outArray[i] != 0) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy1DRangeTo_Short TEST PASSED");
        } else {
            failTest();
        }
!!!38751415.java!!!	allocation_copy1DRangeTo_Int(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(512);
        int arr_len = width;

        int[] inArray = new int[arr_len];
        int[] outArray = new int[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = random.nextInt();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I32(mRS));
        typeBuilder.setX(width);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        int offset = random.nextInt(arr_len);
        int count = arr_len - offset;
        alloc.copy1DRangeFrom(offset, count, inArray);
        alloc.copy1DRangeTo(offset, count, outArray);

        boolean result = true;
        for (int i = 0; i < count; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        for (int i = count; i < arr_len; i++) {
            if (outArray[i] != 0) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy1DRangeTo_Int TEST PASSED");
        } else {
            failTest();
        }
!!!38751543.java!!!	allocation_copy1DRangeTo_Float(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(512);
        int arr_len = width;

        float[] inArray = new float[arr_len];
        float[] outArray = new float[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = random.nextFloat();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.F32(mRS));
        typeBuilder.setX(width);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        int offset = random.nextInt(arr_len);
        int count = arr_len - offset;
        alloc.copy1DRangeFrom(offset, count, inArray);
        alloc.copy1DRangeTo(offset, count, outArray);

        boolean result = true;
        for (int i = 0; i < count; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        for (int i = count; i < arr_len; i++) {
            if (outArray[i] != 0f) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy1DRangeTo_Float TEST PASSED");
        } else {
            failTest();
        }
!!!38751671.java!!!	allocation_copy1DRangeTo_Long(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(512);
        int arr_len = width;

        long[] inArray = new long[arr_len];
        long[] outArray = new long[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = random.nextLong();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I64(mRS));
        typeBuilder.setX(width);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        int offset = random.nextInt(arr_len);
        int count = arr_len - offset;
        alloc.copy1DRangeFrom(offset, count, inArray);
        alloc.copy1DRangeTo(offset, count, outArray);

        boolean result = true;
        for (int i = 0; i < count; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        for (int i = count; i < arr_len; i++) {
            if (outArray[i] != 0) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy1DRangeTo_Long TEST PASSED");
        } else {
            failTest();
        }
!!!38751799.java!!!	allocation_copy2DRangeTo_Byte(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(128);
        int height = random.nextInt(128);
        int xoff = random.nextInt(width);
        int yoff = random.nextInt(height);
        int xcount = width - xoff;
        int ycount = height - yoff;
        int arr_len = xcount * ycount;

        byte[] inArray = new byte[arr_len];
        byte[] outArray = new byte[arr_len];
        random.nextBytes(inArray);

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I8(mRS));
        typeBuilder.setX(width).setY(height);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        alloc.copy2DRangeFrom(xoff, yoff, xcount, ycount, inArray);
        alloc.copy2DRangeTo(xoff, yoff, xcount, ycount, outArray);

        boolean result = true;
        for (int i = 0; i < arr_len; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy2DRangeTo_Byte TEST PASSED");
        } else {
            failTest();
        }
!!!38751927.java!!!	allocation_copy2DRangeTo_Short(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(128);
        int height = random.nextInt(128);
        int xoff = random.nextInt(width);
        int yoff = random.nextInt(height);
        int xcount = width - xoff;
        int ycount = height - yoff;
        int arr_len = xcount * ycount;

        short[] inArray = new short[arr_len];
        short[] outArray = new short[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = (short)random.nextInt();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I16(mRS));
        typeBuilder.setX(width).setY(height);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        alloc.copy2DRangeFrom(xoff, yoff, xcount, ycount, inArray);
        alloc.copy2DRangeTo(xoff, yoff, xcount, ycount, outArray);

        boolean result = true;
        for (int i = 0; i < arr_len; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy2DRangeTo_Short TEST PASSED");
        } else {
            failTest();
        }
!!!38752055.java!!!	allocation_copy2DRangeTo_Int(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(128);
        int height = random.nextInt(128);
        int xoff = random.nextInt(width);
        int yoff = random.nextInt(height);
        int xcount = width - xoff;
        int ycount = height - yoff;
        int arr_len = xcount * ycount;

        int[] inArray = new int[arr_len];
        int[] outArray = new int[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = random.nextInt();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I32(mRS));
        typeBuilder.setX(width).setY(height);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        alloc.copy2DRangeFrom(xoff, yoff, xcount, ycount, inArray);
        alloc.copy2DRangeTo(xoff, yoff, xcount, ycount, outArray);

        boolean result = true;
        for (int i = 0; i < arr_len; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy2DRangeTo_Int TEST PASSED");
        } else {
            failTest();
        }
!!!38752183.java!!!	allocation_copy2DRangeTo_Float(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(128);
        int height = random.nextInt(128);
        int xoff = random.nextInt(width);
        int yoff = random.nextInt(height);
        int xcount = width - xoff;
        int ycount = height - yoff;
        int arr_len = xcount * ycount;

        float[] inArray = new float[arr_len];
        float[] outArray = new float[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = random.nextFloat();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.F32(mRS));
        typeBuilder.setX(width).setY(height);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        alloc.copy2DRangeFrom(xoff, yoff, xcount, ycount, inArray);
        alloc.copy2DRangeTo(xoff, yoff, xcount, ycount, outArray);

        boolean result = true;
        for (int i = 0; i < arr_len; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy2DRangeTo_Float TEST PASSED");
        } else {
            failTest();
        }
!!!38752311.java!!!	allocation_copy2DRangeTo_Long(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(128);
        int height = random.nextInt(128);
        int xoff = random.nextInt(width);
        int yoff = random.nextInt(height);
        int xcount = width - xoff;
        int ycount = height - yoff;
        int arr_len = xcount * ycount;

        long[] inArray = new long[arr_len];
        long[] outArray = new long[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = random.nextLong();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I64(mRS));
        typeBuilder.setX(width).setY(height);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        alloc.copy2DRangeFrom(xoff, yoff, xcount, ycount, inArray);
        alloc.copy2DRangeTo(xoff, yoff, xcount, ycount, outArray);

        boolean result = true;
        for (int i = 0; i < arr_len; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy2DRangeTo_Long TEST PASSED");
        } else {
            failTest();
        }
!!!38752439.java!!!	allocation_copy1DRangeToUnchecked_Byte(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(512);
        int arr_len = width;

        byte[] inArray = new byte[arr_len];
        byte[] outArray = new byte[arr_len];
        random.nextBytes(inArray);

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I8(mRS));
        typeBuilder.setX(width);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        int offset = random.nextInt(arr_len);
        int count = arr_len - offset;
        alloc.copy1DRangeFrom(offset, count, inArray);
        alloc.copy1DRangeToUnchecked(offset, count, outArray);

        boolean result = true;
        for (int i = 0; i < count; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        for (int i = count; i < arr_len; i++) {
            if (outArray[i] != 0) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy1DRangeToUnchecked_Byte TEST PASSED");
        } else {
            failTest();
        }
!!!38752567.java!!!	allocation_copy1DRangeToUnchecked_Short(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(512);
        int arr_len = width;

        short[] inArray = new short[arr_len];
        short[] outArray = new short[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = (short)random.nextInt();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I16(mRS));
        typeBuilder.setX(width);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        int offset = random.nextInt(arr_len);
        int count = arr_len - offset;
        alloc.copy1DRangeFrom(offset, count, inArray);
        alloc.copy1DRangeToUnchecked(offset, count, outArray);

        boolean result = true;
        for (int i = 0; i < count; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        for (int i = count; i < arr_len; i++) {
            if (outArray[i] != 0) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy1DRangeToUnchecked_Short TEST PASSED");
        } else {
            failTest();
        }
!!!38752695.java!!!	allocation_copy1DRangeToUnchecked_Int(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(512);
        int arr_len = width;

        int[] inArray = new int[arr_len];
        int[] outArray = new int[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = random.nextInt();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I32(mRS));
        typeBuilder.setX(width);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        int offset = random.nextInt(arr_len);
        int count = arr_len - offset;
        alloc.copy1DRangeFrom(offset, count, inArray);
        alloc.copy1DRangeToUnchecked(offset, count, outArray);

        boolean result = true;
        for (int i = 0; i < count; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        for (int i = count; i < arr_len; i++) {
            if (outArray[i] != 0) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy1DRangeToUnchecked_Int TEST PASSED");
        } else {
            failTest();
        }
!!!38752823.java!!!	allocation_copy1DRangeToUnchecked_Float(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(512);
        int arr_len = width;

        float[] inArray = new float[arr_len];
        float[] outArray = new float[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = random.nextFloat();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.F32(mRS));
        typeBuilder.setX(width);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        int offset = random.nextInt(arr_len);
        int count = arr_len - offset;
        alloc.copy1DRangeFrom(offset, count, inArray);
        alloc.copy1DRangeToUnchecked(offset, count, outArray);

        boolean result = true;
        for (int i = 0; i < count; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        for (int i = count; i < arr_len; i++) {
            if (outArray[i] != 0f) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy1DRangeToUnchecked_Float TEST PASSED");
        } else {
            failTest();
        }
!!!38752951.java!!!	allocation_copy1DRangeToUnchecked_Long(inout mRS : RenderScript) : void
        Random random = new Random(0x172d8ab9);
        int width = random.nextInt(512);
        int arr_len = width;

        long[] inArray = new long[arr_len];
        long[] outArray = new long[arr_len];

        for (int i = 0; i < arr_len; i++) {
            inArray[i] = random.nextLong();
        }

        Type.Builder typeBuilder = new Type.Builder(mRS, Element.I64(mRS));
        typeBuilder.setX(width);
        Allocation alloc = Allocation.createTyped(mRS, typeBuilder.create());
        int offset = random.nextInt(arr_len);
        int count = arr_len - offset;
        alloc.copy1DRangeFrom(offset, count, inArray);
        alloc.copy1DRangeToUnchecked(offset, count, outArray);

        boolean result = true;
        for (int i = 0; i < count; i++) {
            if (inArray[i] != outArray[i]) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        for (int i = count; i < arr_len; i++) {
            if (outArray[i] != 0) {
                result = false;
                android.util.Log.v("Allocation CopyTo Test", "Failed: " + i + " " + inArray[i] + " " + outArray[i]);
                break;
            }
        }
        if (result) {
            android.util.Log.v("Allocation CopyTo Test", "copy1DRangeToUnchecked_Long TEST PASSED");
        } else {
            failTest();
        }
