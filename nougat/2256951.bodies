class Filters
!!!38768055.java!!!	Filters(in mode : int, inout filter : int)
    mMode = mode;
    mIndices = new int[filter.length];
    System.arraycopy(filter, 0, mIndices, 0, filter.length);
    mFilters = new FilterInterface[filter.length+2];
!!!38768183.java!!!	createTest(inout res : Resources) : void
    s_uc2f = new ScriptC_uc4tof4(mRS);
    s_f2uc = new ScriptC_f4touc4(mRS);
    for (int i = 0; i < mIndices.length; i++) {
      try {
        /*
        Constructor[] constructors = mFilterClasses[mIndices[i]].getConstructors();
        for (Constructor ctr : constructors) {
          Log.i("Filters", "constructor " + ctr);
        }
        */
        Constructor constructor =
            // mFilterClasses[i].getConstructor(new Class[]{ RenderScript.class });
            //mFilterClasses[i].getConstructor(RenderScript.class);
            mFilterClasses[mIndices[i]].getConstructors()[0];
        try {
          mFilters[i] = (FilterInterface)constructor.newInstance(this, mRS);
        } catch (Exception e) {
          Log.e("Filters", "newInstance caught " + e);
          System.exit(-2);
        }
        mFilters[i].init();
      } catch (Exception e) {
        Log.e("Filters", "getConstructor caught " + e + " for " +
              mFilterClasses[mIndices[i]].getName());
        System.exit(-1);
      }

    }

    mWidth = mInPixelsAllocation.getType().getX();
    mHeight = mInPixelsAllocation.getType().getY();

    Type.Builder tb = new Type.Builder(mRS, Element.F32_4(mRS));
    tb.setX(mWidth);
    tb.setY(mHeight);
    Type connect = tb.create();

    switch (mMode) {
      case NATIVE1:
          ScriptGroup.Builder b = new ScriptGroup.Builder(mRS);
          b.addKernel(s_uc2f.getKernelID_uc4tof4());
          b.addKernel(mFilters[0].getKernelID());
          b.addConnection(connect, s_uc2f.getKernelID_uc4tof4(),
              mFilters[0].getKernelID());

          for (int i = 0; i < mIndices.length; i++) {
            b.addKernel(mFilters[i].getKernelID());
            b.addConnection(connect, mFilters[i-1].getKernelID(),
                mFilters[i].getKernelID());
          }

          b.addKernel(s_f2uc.getKernelID_f4touc4());
          b.addConnection(mOutPixelsAllocation.getType(),
              mFilters[0].getKernelID(), s_f2uc.getKernelID_f4touc4());

          mGroup = b.create();
          break;
      case NATIVE2: {
        ScriptGroup.Builder2 b2 = new ScriptGroup.Builder2(mRS);

        for (int i = 0; i < mIndices.length; i++) {
          mFilters[i].prepInit(b2);
        }

        ScriptGroup.Input in = b2.addInput();

        ScriptGroup.Closure c = b2.addKernel(s_uc2f.getKernelID_uc4tof4(),
            connect, in);

        for (int i = 0; i < mIndices.length; i++) {
            c = mFilters[i].asyncLaunch(b2, c.getReturn(), connect);
        }

        c = b2.addKernel(s_f2uc.getKernelID_f4touc4(),
            mOutPixelsAllocation.getType(),
            c.getReturn());

        final String name = mFilters[0].getClass().getSimpleName() + "-" +
                mFilters[1].getClass().getSimpleName();
        mGroup2 = b2.create(name, c.getReturn());
      }
        break;
      case EMULATED:
        mScratchPixelsAllocation[0] = Allocation.createTyped(mRS, connect);
        mScratchPixelsAllocation[1] = Allocation.createTyped(mRS, connect);
        break;
    }
!!!38768311.java!!!	runTest() : void
        switch (mMode) {
          case NATIVE1:
            // mGroup.setInput(mFilters[0].getKernelID(), mInPixelsAllocation);
            mGroup.setInput(s_uc2f.getKernelID_uc4tof4(), mInPixelsAllocation);
            // mGroup.setOutput(mFilters[mIndices.length - 1].getKernelID(), mOutPixelsAllocation);
            mGroup.setOutput(s_f2uc.getKernelID_f4touc4(), mOutPixelsAllocation);
            mGroup.execute();
            break;
          case NATIVE2:
            mOutPixelsAllocation = (Allocation)mGroup2.execute(mInPixelsAllocation)[0];
            break;
          case EMULATED:
            s_uc2f.forEach_uc4tof4(mInPixelsAllocation, mScratchPixelsAllocation[0]);
            for (int i = 0; i < mIndices.length; i++) {
              mFilters[i].forEach(mScratchPixelsAllocation[i % 2],
                  mScratchPixelsAllocation[(i+1) % 2]);
            }
            s_f2uc.forEach_f4touc4(mScratchPixelsAllocation[mIndices.length % 2],
                mOutPixelsAllocation);
            break;
        }
