class ScriptGroupTestActivity
!!!38768439.java!!!	updateDisplay() : void
        mHandler.sendMessage(Message.obtain());
!!!38768951.java!!!	changeTest(in pos1 : int, in pos2 : int, in mode : int) : void
    if (mTest != null) {
      mTest.destroy();
    }

    final int[] index = new int[] { pos1, pos2 };
    mTest = new Filters(mode, index);

    mTest.createBaseTest(this);

    mTest.runTest();
    updateDisplay();
    mBenchmarkResult.setText("Result: not run");
!!!38769079.java!!!	getFilterName(in pos : int) : String
    return Filters.mFilterClasses[pos].getSimpleName();
!!!38769207.java!!!	getFilterNames() : String
    ArrayList<String> list = new ArrayList<String>();
    final int n = Filters.mFilterClasses.length;
    for (int i = 0; i < n; i++) {
      list.add(getFilterName(i));
    }
    return list.toArray(new String[0]);
!!!38769335.java!!!	setupTests() : void
    String[] names = getFilterNames();
    mModeSpinner.setAdapter(new ArrayAdapter<String>(
        this, R.layout.spinner_layout, new String[] {"emulated", "native"}));
    mTestSpinner1.setAdapter(new ArrayAdapter<String>(
        this, R.layout.spinner_layout, names));
    mTestSpinner2.setAdapter(new ArrayAdapter<String>(
        this, R.layout.spinner_layout, names));
!!!38769463.java!!!	init() : void
        mRS = RenderScript.create(this);
        mInPixelsAllocation = Allocation.createFromBitmapResource(
                mRS, getResources(), R.drawable.img1600x1067);
        mBitmapOut = Bitmap.createBitmap(mInPixelsAllocation.getType().getX(),
                                         mInPixelsAllocation.getType().getY(),
                                         Bitmap.Config.ARGB_8888);
        mOutPixelsAllocation = Allocation.createFromBitmap(mRS, mBitmapOut);

        mDisplayView = (ImageView) findViewById(R.id.display);
        mDisplayView.setImageBitmap(mBitmapOut);

        mModeSpinner = (Spinner) findViewById(R.id.modeselection);
        mModeSpinner.setOnItemSelectedListener(mModeSpinnerListener);
        mTestSpinner1 = (Spinner) findViewById(R.id.filterselection);
        mTestSpinner1.setOnItemSelectedListener(mTestSpinner1Listener);
        mTestSpinner2 = (Spinner) findViewById(R.id.filter2selection);
        mTestSpinner2.setOnItemSelectedListener(mTestSpinner2Listener);

        mBenchmarkResult = (TextView) findViewById(R.id.benchmarkText);
        mBenchmarkResult.setText("Result: not run");

        setupTests();
        changeTest(0, 0, 0);
!!!38769591.java!!!	cleanup() : void
        synchronized(this) {
            RenderScript rs = mRS;
            mRS = null;
            while(mDoingBenchmark) {
                try {
                    Thread.sleep(1, 0);
                } catch(InterruptedException e) {
                }

            }
            rs.destroy();
        }

        mInPixelsAllocation = null;
        mOutPixelsAllocation = null;
        mBitmapOut = null;
!!!38769719.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        init();
!!!38769847.java!!!	onPause() : void
        super.onPause();

        cleanup();
!!!38769975.java!!!	onResume() : void
        super.onResume();

        if (null == mRS) {
            init();
        }
!!!38770103.java!!!	benchmark(inout v : View) : void
        float t = getBenchmark();
        //long javaTime = javaFilter();
        //mBenchmarkResult.setText("RS: " + t + " ms  Java: " + javaTime + " ms");
        mBenchmarkResult.setText("Result: " + t + " ms");
        Log.v(TAG, "getBenchmark: Renderscript frame time core ms " + t);
!!!38770231.java!!!	benchmark_all(inout v : View) : void
        // write result into a file
        File externalStorage = Environment.getExternalStorageDirectory();
        if (!externalStorage.canWrite()) {
            Log.v(TAG, "sdcard is not writable");
            return;
        }
        File resultFile = new File(externalStorage, RESULT_FILE);
        resultFile.setWritable(true, false);
        try {
            BufferedWriter rsWriter = new BufferedWriter(new FileWriter(resultFile));
            Log.v(TAG, "Saved results in: " + resultFile.getAbsolutePath());
            final int n = Filters.mFilterClasses.length;
            for (int i = 0; i < n; i++) {
              for (int j = 0; j < n; j++) {
                for (int k = 0; k < 2; k++) {
                  changeTest(i, j, k);
                float t = getBenchmark();
                String tn = getFilterName(i) + "-" + getFilterName(j);
                if (k == 0) {
                  tn += " (emulated)";
                } else {
                  tn += " (native)";
                }
                String s = new String("" + tn.toString() + ", " + t);
                rsWriter.write(s + "\n");
                Log.v(TAG, "Test " + s + "ms\n");
                }
              }
            }
            rsWriter.close();
        } catch (IOException e) {
            Log.v(TAG, "Unable to write result file " + e.getMessage());
        }
            changeTest(0, 0, 0);
        Log.v(TAG, "result file:"+resultFile.getAbsolutePath());
!!!38770359.java!!!	getBenchmark() : float
        if (mRS == null) {
            return 0;
        }
        mDoingBenchmark = true;

        mTest.setupBenchmark();
        long result = 0;

        //Log.v(TAG, "Warming");
        long t = java.lang.System.currentTimeMillis() + 250;
        do {
            mTest.runTest();
            mTest.finish();
        } while (t > java.lang.System.currentTimeMillis());

        //Log.v(TAG, "Benchmarking");
        int ct = 0;
        t = java.lang.System.currentTimeMillis();
        do {
            mTest.runTest();
            mTest.finish();
            ct++;
        } while ((t+1000) > java.lang.System.currentTimeMillis());
        t = java.lang.System.currentTimeMillis() - t;
        float ft = (float)t;
        ft /= ct;

        mTest.exitBenchmark();
        mDoingBenchmark = false;

        return ft;
