class VrView
!!!38772407.java!!!	setMode(in mode : byte) : void
        mMode = mode;
!!!38772535.java!!!	VrView(inout context : Context)
        super(context);
        setup(context);
        paint.setFilterBitmap(true);
!!!38772663.java!!!	VrView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        setup(context);
!!!38772791.java!!!	VrView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        super(context, attrs, defStyleAttr);
        setup(context);
!!!38772919.java!!!	VrView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);
        setup(context);
!!!38773047.java!!!	setup(inout context : Context) : void
        setBackgroundColor(Color.BLACK);
        if (isInEditMode()) {
            return;
        }
        setSurfaceTextureListener(new TextureView.SurfaceTextureListener() {

            @Override
            public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {
                mSurfaceTexture = surface;
            }

            @Override
            public void onSurfaceTextureSizeChanged(SurfaceTexture surface, int width, int height) {
                mSurfaceTexture = surface;
            }

            @Override
            public boolean onSurfaceTextureDestroyed(SurfaceTexture surface) {
                return false;
            }

            @Override
            public void onSurfaceTextureUpdated(SurfaceTexture surface) {
            }
        });

        mScaleDetector = new ScaleGestureDetector(context,
                new ScaleGestureDetector.OnScaleGestureListener() {
                    @Override
                    public boolean onScale(ScaleGestureDetector detector) {
                        double width = mState1.mTransform.getScreenWidth() / detector.getScaleFactor();
                        mState1.mTransform.setScreenWidth(width);
                        panMove(detector.getFocusX(), detector.getFocusY());
                        render(4);
                        return true;
                    }

                    @Override
                    public boolean onScaleBegin(ScaleGestureDetector detector) {
                        panDown(detector.getFocusX(), detector.getFocusY());
                        mInScale = true;
                        return true;
                    }

                    @Override
                    public void onScaleEnd(ScaleGestureDetector detector) {
                        mInScale = false;
                    }
                });
!!!38773303.java!!!	onTouchEvent(inout e : MotionEvent) : boolean
        if (mPreviousMode == 1) {
            mPipline.cancel();
        }
        boolean handled = mScaleDetector.onTouchEvent(e);
        if (e.getPointerCount() > 1) {
            return true;
        }
        if (mInScale) {
            return true;
        }
        int action = e.getAction();
        if (action == MotionEvent.ACTION_DOWN) {
            actionDown(e);
        } else if (action == MotionEvent.ACTION_MOVE) {
            actionMove(e);
            render(4);
        } else if (action == MotionEvent.ACTION_UP) {
            actionUp(e);
            refresh = 1;
            render(1);
        }
        return true;
!!!38773431.java!!!	panMove(in x : float, in y : float) : void
        double dist_x = (mDownPointX - x) * mDownScreenWidth / getWidth();
        double dist_y = (y - mDownPointY) * mDownScreenWidth / getWidth();
        double[] p;
        p = mState1.mTransform.getEyePoint();
        p[0] = mDownEyePoint[0] + dist_x * mDownRightVector[0] + dist_y * mDownUpVector[0];
        p[1] = mDownEyePoint[1] + dist_x * mDownRightVector[1] + dist_y * mDownUpVector[1];
        p[2] = mDownEyePoint[2] + dist_x * mDownRightVector[2] + dist_y * mDownUpVector[2];
        mState1.mTransform.setEyePoint(p);
        p = mState1.mTransform.getLookPoint();
        p[0] = mDownLookPoint[0] + dist_x * mDownRightVector[0] + dist_y * mDownUpVector[0];
        p[1] = mDownLookPoint[1] + dist_x * mDownRightVector[1] + dist_y * mDownUpVector[1];
        p[2] = mDownLookPoint[2] + dist_x * mDownRightVector[2] + dist_y * mDownUpVector[2];
        mState1.mTransform.setLookPoint(p);
!!!38773559.java!!!	panDown(in x : float, in y : float) : void
        mDownPointX = x;
        mDownPointY = y;
        mDownScreenWidth = mState1.mTransform.getScreenWidth();
        double[] p;
        p = mState1.mTransform.getLookPoint();
        System.arraycopy(p, 0, mDownLookPoint, 0, 3);
        p = mState1.mTransform.getEyePoint();
        System.arraycopy(p, 0, mDownEyePoint, 0, 3);
        p = mState1.mTransform.getUpVector();
        System.arraycopy(p, 0, mDownUpVector, 0, 3);
        mDownRightVector[0] = mDownLookPoint[0] - mDownEyePoint[0];
        mDownRightVector[1] = mDownLookPoint[1] - mDownEyePoint[1];
        mDownRightVector[2] = mDownLookPoint[2] - mDownEyePoint[2];
        VectorUtil.normalize(mDownRightVector);
        VectorUtil.cross(mDownRightVector, mDownUpVector, mDownRightVector);
!!!38773687.java!!!	actionDown(inout e : MotionEvent) : void
        panDown(e.getX(), e.getY());

        switch (mMode) {
            case ROTATE_MODE:
                mState1.mTransform.trackBallDown(e.getX(), e.getY());
                break;

            case CUT_X_MODE:
            case CUT_Y_MODE:
            case CUT_Z_MODE:
                float[] trim = mState1.mCubeVolume.getTrim();
                System.arraycopy(trim, 0, mCurrentTrim, 0, 6);
                break;
        }
!!!38773815.java!!!	actionMove(inout e : MotionEvent) : void
        float deltax, deltay;

        switch (mMode) {
            case ROTATE_MODE:

                mState1.mTransform.trackBallMove(e.getX(), e.getY());

                break;

            case CUT_X_MODE:
                deltax = (float) ((mDownPointX - e.getX()) / getWidth());
                deltay = (float) -((mDownPointY - e.getY()) / getWidth());
                cut(0, deltax, deltay);
                break;
            case CUT_Y_MODE:
                deltax = (float) ((mDownPointX - e.getX()) / getWidth());
                deltay = (float) -((mDownPointY - e.getY()) / getWidth());
                cut(1, deltax, deltay);
                break;
            case CUT_Z_MODE:
                deltax = (float) ((mDownPointX - e.getX()) / getWidth());
                deltay = (float) -((mDownPointY - e.getY()) / getWidth());
                cut(2, deltax, deltay);
                break;

        }
!!!38774071.java!!!	cut(in side : int, in fractionx : float, in fractiony : float) : void
        float[] f = Arrays.copyOf(mCurrentTrim, mCurrentTrim.length);
        f[side] += fractionx;
        if (f[side] < 0) f[side] = 0;
        if (f[side] > .8) f[side] = .8f;
        f[side + 3] += fractiony;
        if (f[side + 3] < 0) f[side + 3] = 0;
        if (f[side + 3] > .8) f[side + 3] = .8f;
        mState1.mCubeVolume = new Cube(mState1.mVolume, 5f, f);
        mState1.mCubeScreen = new TriData(mState1.mCubeVolume);
        mState1.mCubeScreen.scale(mState1.mVolume.mVoxelDim);
!!!38774199.java!!!	resetCut() : void
        Arrays.fill(mCurrentTrim, 0);
        mState1.mCubeVolume = new Cube(mState1.mVolume, 5f, mCurrentTrim);
        mState1.mCubeScreen = new TriData(mState1.mCubeVolume);
        mState1.mCubeScreen.scale(mState1.mVolume.mVoxelDim);
        mState1.mTransform.look(looks[last_look], mState1.mCubeScreen, getWidth(), getHeight());
        mState1.mTransform.setScreenWidth(.6f * mState1.mTransform.getScreenWidth());
        last_look = (last_look + 1) % looks.length;
        render(4);
!!!38774327.java!!!	setVolume(inout rs : RenderScript, inout v : Volume) : void
        mState1.mRs = rs;
        mState1.mVolume = v;
        mState1.mCubeVolume = new Cube(mState1.mVolume, 5f);
        mState1.mCubeScreen = new TriData(mState1.mCubeVolume);
        mState1.mCubeScreen.scale(v.mVoxelDim);
        mState1.mTransform.setVoxelDim(v.mVoxelDim);
        mState1.mTransform.look(ViewMatrix.DOWN_AT, mState1.mCubeScreen, getWidth(), getHeight());
        setLook(mState1.mVolume.getLookNames()[0]);
!!!38774455.java!!!	look(in k : int) : void
        mState1.mTransform.look(looks[k], mState1.mCubeVolume, getWidth(), getHeight());
        render(4);
        render(1);
!!!38774583.java!!!	render(in downSample : int) : void

        if (mRenderTesk == null) {
            mRenderTesk = new VrRenderTesk();
            refresh = 0;
            mRenderTesk.execute(downSample);
        } else {
            refresh = downSample;
        }
!!!38774711.java!!!	getLooks() : String
        return mState1.mVolume.getLookNames();
!!!38774839.java!!!	setLook(inout look : String) : void
        int[][] color = mState1.mVolume.getLookColor(look);
        int[][] opacity = mState1.mVolume.getLookOpactiy(look);
        mState1.mMaterial.setup(opacity, color);
        if (mBinGridTask == null) {
            mBinGridTask = new VrBinGridTask();
            mBinGridTask.execute(mState1.mVolume);
        }
