class VrRenderTesk
!!!38774967.java!!!	onPreExecute() : void
            mStateLow.copyData(mState1);
!!!38775095.java!!!	onCancelled() : void
            mPipline.cancel();
!!!38775223.java!!!	doInBackground(inout  : Integer...down) : Long
            if (mState1.mRs == null) return 0L;
            if (mSurfaceTexture == null) return 0L;
            int sample = 4;
            VrState state = mStateLow;
            if (down[0] == 1) {
                if (mPreviousMode == 4) {
                    mState1.copyData(mLastDrawn);
                } else {
                    mState1.copyData(mStateLow);
                }
                // mStateLow.mScrAllocation.setSurface(null);
                state = mState1;
                sample = 1;
                if (mStateLow.mScrAllocation != null) {
                    mStateLow.mScrAllocation.setSurface(null);
                }
            } else {
                if (mState1.mScrAllocation != null) {
                    mState1.mScrAllocation.setSurface(null);
                }
            }

            if (mPreviousMode != sample) {
                if (mSurface != null) {
                    mSurface.release();
                }
                mSurface = new Surface(mSurfaceTexture);
            }
            mPreviousMode = sample;

            int img_width = getWidth() / sample;
            int img_height = getHeight() / sample;
            state.createOutputAllocation(mSurface, img_width, img_height);

            mPipline.initBuffers(state);

            if (mPipline.isCancel()) {
                return 0L;
            }
            long start = System.nanoTime();
            addTimeLine(null);
            mPipline.setupTriangles(state);

            if (mPipline.isCancel()) {
                return 0L;
            }
            mPipline.rasterizeTriangles(state);

            if (mPipline.isCancel()) {
                return 0L;
            }
            mPipline.raycast(state);

            if (mPipline.isCancel()) {
                return 0L;
            }
            mLastDrawn.copyData(state);
            state.mRs.finish();
            state.mScrAllocation.ioSend();

            long time = System.nanoTime();
            addLine("vr(" + img_width + "," + img_height + "): " + (time - start) / 1E6f + " ms");
            return 0L;
!!!38775351.java!!!	addTimeLine(inout line : String) : void
            if (line == null) {
                m_last_time = System.nanoTime();
                return;
            }
            long time = System.nanoTime();
            float ftime = (time - m_last_time) / 1E6f;
            if (ftime > 100)
                addLine(line + ": " + (ftime / 1E3f) + " sec");
            else
                addLine(line + ": " + (ftime) + " ms");
            m_last_time = System.nanoTime();
!!!38775479.java!!!	addLine(inout line : String) : void
            publishProgress(line);
!!!38775607.java!!!	onProgressUpdate(inout  : String...progress) : void
            Log.v(LOGTAG, progress[0]);
!!!38775735.java!!!	onPostExecute(inout result : Long) : void
            invalidate();
            mRenderTesk = null;
            if (refresh != 0) {
                render(refresh);
            }
