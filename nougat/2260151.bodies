class Cube
!!!38778807.java!!!	Cube(inout v : Volume, in delta : float)
        this(v, delta, new float[]{0, 0, 0, 0, 0, 0});
!!!38778935.java!!!	Cube(inout v : Volume, in delta : float, inout trim : float)
        this();
        this.mTrim = trim;
        float minx = delta + trim[0] * (v.mDimx - delta);
        float miny = delta + trim[1] * (v.mDimy - delta);
        float minz = delta + trim[2] * (v.mDimz - delta);
        float maxx = v.mDimx - delta - trim[3] * (v.mDimx - delta);
        float maxy = v.mDimy - delta - trim[4] * (v.mDimy - delta);
        float maxz = v.mDimz - delta - trim[5] * (v.mDimz - delta);
        mVert = new float[]{
                minx, miny, minz,
                maxx, miny, minz,
                maxx, maxy, minz,
                minx, maxy, minz,
                minx, miny, maxz,
                maxx, miny, maxz,
                maxx, maxy, maxz,
                minx, maxy, maxz,
        };
!!!38779063.java!!!	clone(inout src : Cube) : void
        System.arraycopy(src.mTrim, 0, mTrim, 0, mTrim.length);
        mVert = Arrays.copyOf(src.mVert, src.mVert.length);
        mIndex = Arrays.copyOf(src.mIndex, src.mIndex.length);
!!!38779191.java!!!	getTrim() : float
        return mTrim;
!!!38779319.java!!!	toString() : String
        return "CUBE[" + fs(mVert, 0, 3) + "][" + fs(mVert, 18, 3) + "]";
!!!38779447.java!!!	fs(inout f : float, in off : int, in n : int) : String
        DecimalFormat df = new DecimalFormat("##0.000");
        String ret = "";
        for (int i = off; i < off + n; i++) {
            String s = "       " + df.format(f[i]);

            if (i != off) {
                ret += ",";
            }
            ret += s.substring(s.length() - 8);

        }
        return ret;
!!!38779575.java!!!	Cube()
        mVert = new float[]{
                -1.f, -1.f, -1.f,
                1.f, -1.f, -1.f,
                1.f, 1.f, -1.f,
                -1.f, 1.f, -1.f,
                -1.f, -1.f, 1.f,
                1.f, -1.f, 1.f,
                1.f, 1.f, 1.f,
                -1.f, 1.f, 1.f,
        };

        mIndex = new int[]{
                2, 1, 0,
                0, 3, 2,
                7, 4, 5,
                5, 6, 7,
                1, 2, 6,
                6, 5, 1,
                4, 7, 3,
                3, 0, 4,
                2, 3, 7,
                7, 6, 2,
                0, 1, 5,
                5, 4, 0
        };
        for (int i = 0; i < mIndex.length; i++) {
            mIndex[i] *= 3;
        }
