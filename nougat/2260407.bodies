class Matrix
!!!38780983.java!!!	makeRotation() : void
        {
            double[] v = {m[0], m[4], m[8]};
            VectorUtil.normalize(v);
            m[0] = v[0];
            m[4] = v[1];
            m[8] = v[2];
        }
        {
            double[] v = {m[1], m[5], m[9]};
            VectorUtil.normalize(v);
            m[1] = v[0];
            m[5] = v[1];
            m[9] = v[2];
        }
        {
            double[] v = {m[2], m[6], m[10]};
            VectorUtil.normalize(v);
            m[2] = v[0];
            m[6] = v[1];
            m[10] = v[2];
        }

!!!38781111.java!!!	trim(inout s : String) : String
        return s.substring(s.length() - 7);
!!!38781239.java!!!	print() : void
        DecimalFormat df = new DecimalFormat("      ##0.000");
        for (int i = 0; i < 4; i++) {
            String s="";
            for (int j = 0; j < 4; j++) {
               s+= ((j == 0) ? "[ " : " , ") + trim("       "+df.format(m[i * 4 + j]));
            }
            Log.v(LOGTAG, s+"]");
        }
!!!38781367.java!!!	Matrix()
        m = new double[4 * 4];
        setToUnit();
!!!38781495.java!!!	Matrix(inout matrix : Matrix)
        this(Arrays.copyOf(matrix.m, matrix.m.length));
!!!38781623.java!!!	Matrix(inout m : double)
        this.m = m;
!!!38781751.java!!!	setToUnit() : void
        for (int i = 1; i < m.length; i++) {
            m[i] = 0;
        }
        m[0] = 1;
        m[5] = 1;
        m[10] = 1;
        m[15] = 1;
!!!38781879.java!!!	mult4(inout src : float, inout dest : float) : void
        for (int i = 0; i < 4; i++) {
            int col = i * 4;
            double sum = 0;
            for (int j = 0; j < 4; j++) {
                sum += m[col + j] * src[j];
            }
            dest[i] = (float) sum;
        }
!!!38782007.java!!!	mult3(inout src : float, inout dest : float) : void
        for (int i = 0; i < 3; i++) {
            int col = i * 4;
            double sum = m[col + 3];
            for (int j = 0; j < 3; j++) {
                sum += m[col + j] * src[j];
            }
            dest[i] = (float) sum;
        }
!!!38782135.java!!!	mult3v(inout src : float, inout dest : float) : void
        for (int i = 0; i < 3; i++) {
            int col = i * 4;
            double sum = 0;
            for (int j = 0; j < 3; j++) {
                sum += m[col + j] * src[j];
            }
            dest[i] = (float) sum;
        }
!!!38782263.java!!!	mult4(inout src : double, inout dest : double) : void
        for (int i = 0; i < 4; i++) {
            int col = i * 4;
            double sum = 0;
            for (int j = 0; j < 4; j++) {
                sum += m[col + j] * src[j];
            }
            dest[i] = (float) sum;
        }
!!!38782391.java!!!	mult3(inout src : double, inout dest : double) : void
        for (int i = 0; i < 3; i++) {
            int col = i * 4;
            double sum = m[col + 3];
            for (int j = 0; j < 3; j++) {
                sum += m[col + j] * src[j];
            }
            dest[i] = (float) sum;
        }
!!!38782519.java!!!	mult3v(inout src : double, inout dest : double) : void
        for (int i = 0; i < 3; i++) {
            int col = i * 4;
            double sum = 0;
            for (int j = 0; j < 3; j++) {
                sum += m[col + j] * src[j];
            }
            dest[i] = (float) sum;
        }
!!!38782647.java!!!	vecmult(inout src : double) : double
        double[] ret = new double[3];
        mult3v(src, ret);
        return ret;
!!!38782775.java!!!	mult3(inout src : float, in off1 : int, inout dest : float, in off2 : int) : void

        int col = 0 * 4;
        double sum = m[col + 3];
        for (int j = 0; j < 3; j++) {
            sum += m[col + j] * src[j + off1];
        }
        float v0 = (float) sum;


        col = 1 * 4;
        sum = m[col + 3];
        for (int j = 0; j < 3; j++) {
            sum += m[col + j] * src[j + off1];
        }

        float v1 = (float) sum;


        col = 2 * 4;
        sum = m[col + 3];
        for (int j = 0; j < 3; j++) {
            sum += m[col + j] * src[j + off1];
        }
        float v2 = (float) sum;

        dest[off2] = v0;
        dest[1 + off2] = v1;
        dest[2 + off2] = v2;

!!!38782903.java!!!	invers() : Matrix
        double[] inv = new double[16];

        inv[0] = m[5] * m[10] * m[15] -
                m[5] * m[11] * m[14] -
                m[9] * m[6] * m[15] +
                m[9] * m[7] * m[14] +
                m[13] * m[6] * m[11] -
                m[13] * m[7] * m[10];

        inv[4] = -m[4] * m[10] * m[15] +
                m[4] * m[11] * m[14] +
                m[8] * m[6] * m[15] -
                m[8] * m[7] * m[14] -
                m[12] * m[6] * m[11] +
                m[12] * m[7] * m[10];

        inv[8] = m[4] * m[9] * m[15] -
                m[4] * m[11] * m[13] -
                m[8] * m[5] * m[15] +
                m[8] * m[7] * m[13] +
                m[12] * m[5] * m[11] -
                m[12] * m[7] * m[9];

        inv[12] = -m[4] * m[9] * m[14] +
                m[4] * m[10] * m[13] +
                m[8] * m[5] * m[14] -
                m[8] * m[6] * m[13] -
                m[12] * m[5] * m[10] +
                m[12] * m[6] * m[9];

        inv[1] = -m[1] * m[10] * m[15] +
                m[1] * m[11] * m[14] +
                m[9] * m[2] * m[15] -
                m[9] * m[3] * m[14] -
                m[13] * m[2] * m[11] +
                m[13] * m[3] * m[10];

        inv[5] = m[0] * m[10] * m[15] -
                m[0] * m[11] * m[14] -
                m[8] * m[2] * m[15] +
                m[8] * m[3] * m[14] +
                m[12] * m[2] * m[11] -
                m[12] * m[3] * m[10];

        inv[9] = -m[0] * m[9] * m[15] +
                m[0] * m[11] * m[13] +
                m[8] * m[1] * m[15] -
                m[8] * m[3] * m[13] -
                m[12] * m[1] * m[11] +
                m[12] * m[3] * m[9];

        inv[13] = m[0] * m[9] * m[14] -
                m[0] * m[10] * m[13] -
                m[8] * m[1] * m[14] +
                m[8] * m[2] * m[13] +
                m[12] * m[1] * m[10] -
                m[12] * m[2] * m[9];

        inv[2] = m[1] * m[6] * m[15] -
                m[1] * m[7] * m[14] -
                m[5] * m[2] * m[15] +
                m[5] * m[3] * m[14] +
                m[13] * m[2] * m[7] -
                m[13] * m[3] * m[6];

        inv[6] = -m[0] * m[6] * m[15] +
                m[0] * m[7] * m[14] +
                m[4] * m[2] * m[15] -
                m[4] * m[3] * m[14] -
                m[12] * m[2] * m[7] +
                m[12] * m[3] * m[6];

        inv[10] = m[0] * m[5] * m[15] -
                m[0] * m[7] * m[13] -
                m[4] * m[1] * m[15] +
                m[4] * m[3] * m[13] +
                m[12] * m[1] * m[7] -
                m[12] * m[3] * m[5];

        inv[14] = -m[0] * m[5] * m[14] +
                m[0] * m[6] * m[13] +
                m[4] * m[1] * m[14] -
                m[4] * m[2] * m[13] -
                m[12] * m[1] * m[6] +
                m[12] * m[2] * m[5];

        inv[3] = -m[1] * m[6] * m[11] +
                m[1] * m[7] * m[10] +
                m[5] * m[2] * m[11] -
                m[5] * m[3] * m[10] -
                m[9] * m[2] * m[7] +
                m[9] * m[3] * m[6];

        inv[7] = m[0] * m[6] * m[11] -
                m[0] * m[7] * m[10] -
                m[4] * m[2] * m[11] +
                m[4] * m[3] * m[10] +
                m[8] * m[2] * m[7] -
                m[8] * m[3] * m[6];

        inv[11] = -m[0] * m[5] * m[11] +
                m[0] * m[7] * m[9] +
                m[4] * m[1] * m[11] -
                m[4] * m[3] * m[9] -
                m[8] * m[1] * m[7] +
                m[8] * m[3] * m[5];

        inv[15] = m[0] * m[5] * m[10] -
                m[0] * m[6] * m[9] -
                m[4] * m[1] * m[10] +
                m[4] * m[2] * m[9] +
                m[8] * m[1] * m[6] -
                m[8] * m[2] * m[5];


        double det;
        det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];

        if (det == 0) {
            return null;
        }

        det = 1.0 / det;

        double[] out = new double[16];

        for (int i = 0; i < 16; i++) {
            out[i] = inv[i] * det;
        }

        Matrix ret = new Matrix(out);
        return ret;
!!!38783031.java!!!	getAsFloats(inout fm : float) : void
        for (int y = 0; y < 4; y++) {
            int col = y * 4;

            for (int x = 0; x < 4; x++)
                fm[y + x * 4] = (float) m[x + y * 4];
        }
!!!38783159.java!!!	mult(inout b : Matrix) : Matrix
        return new Matrix(multiply(this.m, b.m));
!!!38783287.java!!!	premult(inout b : Matrix) : Matrix
        return new Matrix(multiply(b.m, this.m));
!!!38783415.java!!!	multiply(inout a : double, inout b : double) : double
        double[] resultant = new double[16];
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                for (int k = 0; k < 4; k++) {
                    resultant[i + 4 * j] += a[i + 4 * k] * b[k + 4 * j];
                }
            }
        }

        return resultant;
!!!38783543.java!!!	clone(inout src : Matrix) : void
        System.arraycopy(src.m, 0, m, 0, m.length);
