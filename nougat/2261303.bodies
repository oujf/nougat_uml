class ViewMatrix
!!!38789943.java!!!	clone(inout src : ViewMatrix) : void
        if (src.mLookPoint != null) {
            System.arraycopy(src.mLookPoint, 0, mLookPoint, 0, mLookPoint.length);
        }
        if (src.mEyePoint != null) {
            System.arraycopy(src.mEyePoint, 0, mEyePoint, 0, mEyePoint.length);
        }
        if (src.mUpVector != null) {
            System.arraycopy(src.mUpVector, 0, mUpVector, 0, mUpVector.length);
        }
        mScreenWidth = src.mScreenWidth;

        if (src.mScreenDim != null) {
            System.arraycopy(src.mScreenDim, 0, mScreenDim, 0, mScreenDim.length);
        }
        if (src.mStartV != null) {
            System.arraycopy(src.mStartV, 0, mStartV, 0, mStartV.length);
        }
        if (src.mMoveToV != null) {
            System.arraycopy(src.mMoveToV, 0, mMoveToV, 0, mMoveToV.length);
        }


        if (src.mStartEyePoint != null) {
            if (mStartEyePoint == null) {
                mStartEyePoint = Arrays.copyOf(src.mStartEyePoint,src.mStartEyePoint.length);
            } else {
                System.arraycopy(src.mStartEyePoint, 0, mStartEyePoint, 0, mStartEyePoint.length);
            }
        }
        if (src.mStartUpVector != null) {
            if (mStartUpVector == null) {
                mStartUpVector = Arrays.copyOf(src.mStartUpVector,src.mStartUpVector.length);
            } else {
                System.arraycopy(src.mStartUpVector, 0, mStartUpVector, 0, mStartUpVector.length);
            }
        }
        if (src.mStartMatrix != null) {
            if (mStartMatrix == null) {
                mStartMatrix = new Matrix();
            }
            mStartMatrix.clone(src.mStartMatrix);
        }
        mQ.clone(src.mQ);
        super.clone(src);
!!!38790071.java!!!	toStr(in d : double) : String
        String s = "         " + df.format(d);
        return s.substring(s.length() - 9);
!!!38790199.java!!!	toStr(inout d : double) : String
        String s = "[";
        for (int i = 0; i < d.length; i++) {
            s += toStr(d[i]);
        }

        return s + "]";
!!!38790327.java!!!	print() : void
        Log.v(LOGTAG, "mLookPoint  :" + toStr(mLookPoint));
        Log.v(LOGTAG, "mEyePoint   :" + toStr(mEyePoint));
        Log.v(LOGTAG, "mUpVector   :" + toStr(mUpVector));
        Log.v(LOGTAG, "mScreenWidth: " + toStr(mScreenWidth));
        Log.v(LOGTAG, "mScreenDim  :[" + mScreenDim[0] + ", " + mScreenDim[1] + "]");
!!!38790455.java!!!	ViewMatrix()
        mLookPoint = new double[3];
        mEyePoint = new double[3];
        mUpVector = new double[3];
        mScreenDim = new int[2];
!!!38790583.java!!!	setScreenDim(in x : int, in y : int) : void
        mScreenDim = new int[]{x, y};
!!!38790711.java!!!	getLookPoint() : double
        return mLookPoint;
!!!38790839.java!!!	setLookPoint(inout mLookPoint : double) : void
        this.mLookPoint = mLookPoint;
!!!38790967.java!!!	getEyePoint() : double
        return mEyePoint;
!!!38791095.java!!!	setEyePoint(inout mEyePoint : double) : void
        this.mEyePoint = mEyePoint;
!!!38791223.java!!!	getUpVector() : double
        return mUpVector;
!!!38791351.java!!!	setUpVector(inout mUpVector : double) : void
        this.mUpVector = mUpVector;
!!!38791479.java!!!	getScreenWidth() : double
        return mScreenWidth;
!!!38791607.java!!!	setScreenWidth(in screenWidth : double) : void
        this.mScreenWidth = screenWidth;
!!!38791735.java!!!	makeUnit() : void

!!!38791863.java!!!	calcMatrix() : void
        if (mScreenDim == null) {
            return;
        }
        double scale = mScreenWidth / mScreenDim[0];
        double[] zv = {
                mLookPoint[0] - mEyePoint[0],
                mLookPoint[1] - mEyePoint[1],
                mLookPoint[2] - mEyePoint[2]
        };
        VectorUtil.normalize(zv);


        double[] m = new double[16];
        m[2] = zv[0];
        m[6] = zv[1];
        m[10] = zv[2];
        m[14] = 0;

        calcRight(zv, mUpVector, zv);
        double[] right = zv;

        m[0] = right[0] * scale;
        m[4] = right[1] * scale;
        m[8] = right[2] * scale;
        m[12] = 0;

        m[1] = -mUpVector[0] * scale;
        m[5] = -mUpVector[1] * scale;
        m[9] = -mUpVector[2] * scale;
        m[13] = 0;
        double sw = mScreenDim[0] / 2 - 0.5;
        double sh = mScreenDim[1] / 2 - 0.5;
        double sz = -0.5;
        m[3] = mEyePoint[0] - (m[0] * sw + m[1] * sh + m[2] * sz);
        m[7] = mEyePoint[1] - (m[4] * sw + m[5] * sh + m[6] * sz);
        m[11] = mEyePoint[2] - (m[8] * sw + m[9] * sh + m[10] * sz);

        m[15] = 1;
        this.m = m;
!!!38791991.java!!!	calcRight(inout a : double, inout b : double, inout out : double) : void
        VectorUtil.cross(a, b, out);
!!!38792119.java!!!	main(inout args : String) : void
        double[] up = {0, 0, 1};
        double[] look = {0, 0, 0};
        double[] eye = {-10, 0, 0};
        ViewMatrix v = new ViewMatrix();
        v.setEyePoint(eye);
        v.setLookPoint(look);
        v.setUpVector(up);
        v.setScreenWidth(10);
        v.setScreenDim(512, 512);
        v.calcMatrix();
!!!38792247.java!!!	calcLook(inout tri : TriData, inout voxelDim : float, in w : int, in h : int) : void
        float minx = Float.MAX_VALUE, miny = Float.MAX_VALUE, minz = Float.MAX_VALUE;
        float maxx = -Float.MAX_VALUE, maxy = -Float.MAX_VALUE, maxz = -Float.MAX_VALUE;

        for (int i = 0; i < tri.mVert.length; i += 3) {
            maxx = Math.max(tri.mVert[i], maxx);
            minx = Math.min(tri.mVert[i], minx);
            maxy = Math.max(tri.mVert[i + 1], maxy);
            miny = Math.min(tri.mVert[i + 1], miny);
            maxz = Math.max(tri.mVert[i + 2], maxz);
            minz = Math.min(tri.mVert[i + 2], minz);
        }
        mLookPoint = new double[]{voxelDim[0] * (maxx + minx) / 2,
                voxelDim[1] * (maxy + miny) / 2,
                voxelDim[2] * (maxz + minz) / 2};
        mScreenWidth = Math.max(voxelDim[0] * (maxx - minx),
                Math.max(voxelDim[1] * (maxy - miny),
                        voxelDim[2] * (maxz - minz))) * 2;
!!!38792375.java!!!	calcLook(inout triW : TriData, in w : int, in h : int) : void
        float minx = Float.MAX_VALUE, miny = Float.MAX_VALUE, minz = Float.MAX_VALUE;
        float maxx = -Float.MAX_VALUE, maxy = -Float.MAX_VALUE, maxz = -Float.MAX_VALUE;

        for (int i = 0; i < triW.mVert.length; i += 3) {
            maxx = Math.max(triW.mVert[i], maxx);
            minx = Math.min(triW.mVert[i], minx);
            maxy = Math.max(triW.mVert[i + 1], maxy);
            miny = Math.min(triW.mVert[i + 1], miny);
            maxz = Math.max(triW.mVert[i + 2], maxz);
            minz = Math.min(triW.mVert[i + 2], minz);
        }
        mLookPoint = new double[]{(maxx + minx) / 2, (maxy + miny) / 2, (maxz + minz) / 2};

        mScreenWidth = 2 * Math.max((maxx - minx), Math.max((maxy - miny), (maxz - minz)));
!!!38792503.java!!!	look(in dir : char, inout tri : TriData, inout voxelDim : float, in w : int, in h : int) : void
        calcLook(tri, w, h);
        int dx = ((dir >> 4) & 0xF);
        int dy = ((dir >> 8) & 0xF);
        int dz = ((dir >> 0) & 0xF);
        if (dx > 1) {
            dx = -1;
        }
        if (dy > 1) {
            dy = -1;
        }
        if (dz > 1) {
            dz = -1;
        }
        mEyePoint = new double[]{mLookPoint[0] + 2 * mScreenWidth * dx,
                mLookPoint[1] + 2 * mScreenWidth * dy,
                mLookPoint[2] + 2 * mScreenWidth * dz};
        double[] zv = new double[]{-dx, -dy, -dz};
        double[] rv = new double[]{(dx == 0) ? 1 : 0, (dx == 0) ? 0 : 1, 0};
        double[] up = new double[3];
        VectorUtil.norm(zv);
        VectorUtil.norm(rv);

        VectorUtil.cross(zv, rv, up);
        VectorUtil.cross(zv, up, rv);
        VectorUtil.cross(zv, rv, up);
        mUpVector = up;
        mScreenDim = new int[]{w, h};
        calcMatrix();
!!!38792631.java!!!	lookAt(inout tri : TriData, inout voxelDim : float, in w : int, in h : int) : void
        calcLook(tri, voxelDim, w, h);

        mEyePoint = new double[]{mLookPoint[0] + mScreenWidth,
                mLookPoint[1] + mScreenWidth,
                mLookPoint[2] + mScreenWidth};
        double[] zv = new double[]{-1, -1, -1};
        double[] rv = new double[]{1, 1, 0};
        double[] up = new double[3];
        VectorUtil.norm(zv);
        VectorUtil.norm(rv);

        VectorUtil.cross(zv, rv, up);
        VectorUtil.cross(zv, up, rv);
        VectorUtil.cross(zv, rv, up);
        mUpVector = up;
        mScreenDim = new int[]{w, h};
        calcMatrix();
!!!38792759.java!!!	trackBallUP(in x : float, in y : float) : void

!!!38792887.java!!!	trackBallDown(in x : float, in y : float) : void

        ballToVec(x, y, mStartV);
        mStartEyePoint = Arrays.copyOf(mEyePoint, m.length);
        mStartUpVector = Arrays.copyOf(mUpVector, m.length);
        mStartMatrix = new Matrix(this);
        mStartMatrix.makeRotation();
!!!38793015.java!!!	trackBallMove(in x : float, in y : float) : void
        ballToVec(x, y, mMoveToV);

        double angle = Quaternion.calcAngle(mStartV, mMoveToV);
        if (angle < 0.0001) {
            calcMatrix();
            return;
        }
        double[] axis = Quaternion.calcAxis(mStartV, mMoveToV);


        axis = mStartMatrix.vecmult(axis);

        mQ.set(angle, axis);

        VectorUtil.sub(mLookPoint, mStartEyePoint, mEyePoint);

        mEyePoint = mQ.rotateVec(mEyePoint);
        mUpVector = mQ.rotateVec(mStartUpVector);

        VectorUtil.sub(mLookPoint, mEyePoint, mEyePoint);
        calcMatrix();
!!!38793143.java!!!	ballToVec(in x : float, in y : float, inout v : double) : void
        float ballRadius = Math.min(mScreenDim[0], mScreenDim[1]) * .4f;
        double cx = mScreenDim[0] / 2.;
        double cy = mScreenDim[1] / 2.;

        double dx = (cx - x) / ballRadius;
        double dy = (cy - y) / ballRadius;
        double scale = dx * dx + dy * dy;
        if (scale > 1) {
            scale = Math.sqrt(scale);
            dx = dx / scale;
            dy = dy / scale;
        }

        double dz = Math.sqrt(Math.abs(1 - (dx * dx + dy * dy)));
        v[0] = dx;
        v[1] = dy;
        v[2] = dz;
        VectorUtil.normalize(v);
