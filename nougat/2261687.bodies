class VrPipline1
!!!38794679.java!!!	initBuffers(inout state : VrState) : void
        super.initBuffers(state);
!!!38794807.java!!!	trim(in d : double) : String
        String s = df.format(d);
        return s.substring(s.length() - 6);
!!!38794935.java!!!	trim(inout d : float) : String
        String ret = "";
        for (int i = 0; i < d.length; i++) {
            ret += ((i == 0) ? "[ " : " , ") + trim(d[i]);
        }
        return ret + ("]");
!!!38795063.java!!!	creatOpacityAllocation(inout state : VrState) : void
        scriptC_vr.set_opacity(state.mMaterial.getOpacityAllocation(state.mRs));
!!!38795191.java!!!	creatColorMapAllocation(inout state : VrState) : void
        scriptC_vr.set_color_map(state.mMaterial.getColorMapAllocation(state.mRs));
!!!38795319.java!!!	setupTriangles(inout state : VrState) : void
        super.setupTriangles(state);
        if (mCancel){
            return;
        }
        Matrix m = state.mTransform.getMatrix(Transform.SCREEN_SPACE, Transform.VOLUME_SPACE);
        m.getAsFloats(mMatrixBuffer);
        Matrix4f matrix4f = new Matrix4f(mMatrixBuffer);
        if (scriptC_vr == null) {
            scriptC_vr = new ScriptC_vr(state.mRs);
        }
        if (script_resize == null) {
            script_resize = ScriptIntrinsicResize.create(state.mRs);
        }
        scriptC_vr.set_matrix4(matrix4f);
        for (int i = 0; i < 9; i++) {
            int x = i % 3;
            int y = i / 3;
            mMatrixBuffer[i] = mMatrixBuffer[x + y * 4];
        }
        Matrix3f matrix3f = new Matrix3f(mMatrixBuffer);
        scriptC_vr.set_matrix3(matrix3f);
        creatColorMapAllocation(state);
        creatOpacityAllocation(state);
        scriptC_vr.invoke_setup_vectors();
!!!38795447.java!!!	raycast(inout state : VrState) : void
        if (mCancel){
            return;
        }
        scriptC_vr.set_volume(state.mVolume.mVolumeAllocation);
        scriptC_vr.set_bricks(state.mRsMask.mBrick_allocation);
        scriptC_vr.set_brick_dimx(state.mRsMask.m_bricks_dimx);
        scriptC_vr.set_brick_dimy(state.mRsMask.m_bricks_dimy);
        if (mCancel){
            return;
        }
        scriptC_vr.set_zbuff(state.mzRangeFullAllocation);
        if (mCancel){
            return;
        }
        if (state.mImgWidth*state.mImgHeight < 512*512) {
            scriptC_vr.forEach_draw_z_buffer(state.mzRangeFullAllocation, state.mScrAllocation);
        } else {
            int blocks = state.mImgWidth*state.mImgHeight/(256*256);
            for (int i = 0; i < blocks; i++) {
                options.setX(0,state.mImgWidth);
                options.setY(i*state.mImgHeight/blocks, (i+1)*state.mImgHeight/blocks);
                scriptC_vr.forEach_draw_z_buffer(state.mzRangeFullAllocation, state.mScrAllocation, options);
                state.mRs.finish();
                if (mCancel){
                    Log.v(LOGTAG, "cancel");
                    return;
                }
            }


        }

