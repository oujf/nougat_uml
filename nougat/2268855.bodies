class CustomTabsClient
!!!38805175.java!!!	CustomTabsClient(inout service : ICustomTabsService, inout componentName : ComponentName)
        mService = service;
        mServiceComponentName = componentName;
!!!38805303.java!!!	bindCustomTabsService(inout context : Context, inout packageName : String, inout connection : CustomTabsServiceConnection) : boolean
        Intent intent = new Intent(CustomTabsService.ACTION_CUSTOM_TABS_CONNECTION);
        if (!TextUtils.isEmpty(packageName)) intent.setPackage(packageName);
        return context.bindService(intent, connection,
                Context.BIND_AUTO_CREATE | Context.BIND_WAIVE_PRIORITY);
!!!38805431.java!!!	getPackageName(inout context : Context, inout packages : List<String>) : String
        return getPackageName(context, packages, false);
!!!38805559.java!!!	getPackageName(inout context : Context, inout packages : List<String>, inout ignoreDefault : boolean) : String
        PackageManager pm = context.getPackageManager();

        List<String> packageNames = packages == null ? new ArrayList<String>() : packages;
        Intent activityIntent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://"));

        if (!ignoreDefault) {
            ResolveInfo defaultViewHandlerInfo = pm.resolveActivity(activityIntent, 0);
            if (defaultViewHandlerInfo != null) {
                String packageName = defaultViewHandlerInfo.activityInfo.packageName;
                packageNames = new ArrayList<String>(packageNames.size() + 1);
                packageNames.add(packageName);
                if (packages != null) packageNames.addAll(packages);
            }
        }

        Intent serviceIntent = new Intent(CustomTabsService.ACTION_CUSTOM_TABS_CONNECTION);
        for (String packageName : packageNames) {
            serviceIntent.setPackage(packageName);
            if (pm.resolveService(serviceIntent, 0) != null) return packageName;
        }
        return null;
!!!38805687.java!!!	connectAndInitialize(inout context : Context, inout packageName : String) : boolean
        if (packageName == null) return false;
        final Context applicationContext = context.getApplicationContext();
        CustomTabsServiceConnection connection = new CustomTabsServiceConnection() {
            @Override
            public final void onCustomTabsServiceConnected(
                    ComponentName name, CustomTabsClient client) {
                client.warmup(0);
                // Unbinding immediately makes the target process "Empty", provided that it is
                // not used by anyone else, and doesn't contain any Activity. This makes it
                // likely to get killed, but is preferable to keeping the connection around.
                applicationContext.unbindService(this);
            }

           @Override
           public final void onServiceDisconnected(ComponentName componentName) { }
        };
        try {
            return bindCustomTabsService(applicationContext, packageName, connection);
        } catch (SecurityException e) {
            return false;
        }
!!!38805815.java!!!	warmup(in flags : long) : boolean
        try {
            return mService.warmup(flags);
        } catch (RemoteException e) {
            return false;
        }
!!!38805943.java!!!	newSession(in callback : CustomTabsCallback) : CustomTabsSession
        ICustomTabsCallback.Stub wrapper = new ICustomTabsCallback.Stub() {
            @Override
            public void onNavigationEvent(int navigationEvent, Bundle extras) {
                if (callback != null) callback.onNavigationEvent(navigationEvent, extras);
            }

            @Override
            public void extraCallback(String callbackName, Bundle args) throws RemoteException {
                if (callback != null) callback.extraCallback(callbackName, args);
            }
        };

        try {
            if (!mService.newSession(wrapper)) return null;
        } catch (RemoteException e) {
            return null;
        }
        return new CustomTabsSession(mService, wrapper, mServiceComponentName);
!!!38806071.java!!!	extraCommand(inout commandName : String, inout args : Bundle) : Bundle
        try {
            return mService.extraCommand(commandName, args);
        } catch (RemoteException e) {
            return null;
        }
