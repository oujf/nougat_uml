class CircularBorderDrawable
!!!38812343.java!!!	CircularBorderDrawable()
        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
        mPaint.setStyle(Paint.Style.STROKE);
!!!38812471.java!!!	setGradientColors(in topOuterStrokeColor : int, in topInnerStrokeColor : int, in bottomOuterStrokeColor : int, in bottomInnerStrokeColor : int) : void
        mTopOuterStrokeColor = topOuterStrokeColor;
        mTopInnerStrokeColor = topInnerStrokeColor;
        mBottomOuterStrokeColor = bottomOuterStrokeColor;
        mBottomInnerStrokeColor = bottomInnerStrokeColor;
!!!38812599.java!!!	setBorderWidth(in width : float) : void
        if (mBorderWidth != width) {
            mBorderWidth = width;
            mPaint.setStrokeWidth(width * DRAW_STROKE_WIDTH_MULTIPLE);
            mInvalidateShader = true;
            invalidateSelf();
        }
!!!38812727.java!!!	draw(inout canvas : Canvas) : void
        if (mInvalidateShader) {
            mPaint.setShader(createGradientShader());
            mInvalidateShader = false;
        }

        final float halfBorderWidth = mPaint.getStrokeWidth() / 2f;
        final RectF rectF = mRectF;

        // We need to inset the oval bounds by half the border width. This is because stroke draws
        // the center of the border on the dimension. Whereas we want the stroke on the inside.
        copyBounds(mRect);
        rectF.set(mRect);
        rectF.left += halfBorderWidth;
        rectF.top += halfBorderWidth;
        rectF.right -= halfBorderWidth;
        rectF.bottom -= halfBorderWidth;

        canvas.save();
        canvas.rotate(mRotation, rectF.centerX(), rectF.centerY());
        // Draw the oval
        canvas.drawOval(rectF, mPaint);
        canvas.restore();
!!!38812855.java!!!	getPadding(inout padding : Rect) : boolean
        final int borderWidth = Math.round(mBorderWidth);
        padding.set(borderWidth, borderWidth, borderWidth, borderWidth);
        return true;
!!!38812983.java!!!	setAlpha(in alpha : int) : void
        mPaint.setAlpha(alpha);
        invalidateSelf();
!!!38813111.java!!!	setBorderTint(inout tint : ColorStateList) : void
        if (tint != null) {
            mCurrentBorderTintColor = tint.getColorForState(getState(), mCurrentBorderTintColor);
        }
        mBorderTint = tint;
        mInvalidateShader = true;
        invalidateSelf();
!!!38813239.java!!!	setColorFilter(inout colorFilter : ColorFilter) : void
        mPaint.setColorFilter(colorFilter);
        invalidateSelf();
!!!38813367.java!!!	getOpacity() : int
        return mBorderWidth > 0 ? PixelFormat.TRANSLUCENT : PixelFormat.TRANSPARENT;
!!!38813495.java!!!	setRotation(in rotation : float) : void
        if (rotation != mRotation) {
            mRotation = rotation;
            invalidateSelf();
        }
!!!38813623.java!!!	onBoundsChange(inout bounds : Rect) : void
        mInvalidateShader = true;
!!!38813751.java!!!	isStateful() : boolean
        return (mBorderTint != null && mBorderTint.isStateful()) || super.isStateful();
!!!38813879.java!!!	onStateChange(inout state : int) : boolean
        if (mBorderTint != null) {
            final int newColor = mBorderTint.getColorForState(state, mCurrentBorderTintColor);
            if (newColor != mCurrentBorderTintColor) {
                mInvalidateShader = true;
                mCurrentBorderTintColor = newColor;
            }
        }
        if (mInvalidateShader) {
            invalidateSelf();
        }
        return mInvalidateShader;
!!!38814007.java!!!	createGradientShader() : Shader
        final Rect rect = mRect;
        copyBounds(rect);

        final float borderRatio = mBorderWidth / rect.height();

        final int[] colors = new int[6];
        colors[0] = ColorUtils.compositeColors(mTopOuterStrokeColor, mCurrentBorderTintColor);
        colors[1] = ColorUtils.compositeColors(mTopInnerStrokeColor, mCurrentBorderTintColor);
        colors[2] = ColorUtils.compositeColors(
                ColorUtils.setAlphaComponent(mTopInnerStrokeColor, 0), mCurrentBorderTintColor);
        colors[3] = ColorUtils.compositeColors(
                ColorUtils.setAlphaComponent(mBottomInnerStrokeColor, 0), mCurrentBorderTintColor);
        colors[4] = ColorUtils.compositeColors(mBottomInnerStrokeColor, mCurrentBorderTintColor);
        colors[5] = ColorUtils.compositeColors(mBottomOuterStrokeColor, mCurrentBorderTintColor);

        final float[] positions = new float[6];
        positions[0] = 0f;
        positions[1] = borderRatio;
        positions[2] = 0.5f;
        positions[3] = 0.5f;
        positions[4] = 1f - borderRatio;
        positions[5] = 1f;

        return new LinearGradient(
                0, rect.top,
                0, rect.bottom,
                colors, positions,
                Shader.TileMode.CLAMP);
