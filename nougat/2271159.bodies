class ShadowDrawableWrapper
!!!38822711.java!!!	ShadowDrawableWrapper(inout resources : Resources, inout content : Drawable, in radius : float, in shadowSize : float, in maxShadowSize : float)
        super(content);

        mShadowStartColor = resources.getColor(R.color.design_fab_shadow_start_color);
        mShadowMiddleColor = resources.getColor(R.color.design_fab_shadow_mid_color);
        mShadowEndColor = resources.getColor(R.color.design_fab_shadow_end_color);

        mCornerShadowPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);
        mCornerShadowPaint.setStyle(Paint.Style.FILL);
        mCornerRadius = Math.round(radius);
        mContentBounds = new RectF();
        mEdgeShadowPaint = new Paint(mCornerShadowPaint);
        mEdgeShadowPaint.setAntiAlias(false);
        setShadowSize(shadowSize, maxShadowSize);
!!!38822839.java!!!	toEven(in value : float) : int
        int i = Math.round(value);
        return (i % 2 == 1) ? i - 1 : i;
!!!38822967.java!!!	setAddPaddingForCorners(inout addPaddingForCorners : boolean) : void
        mAddPaddingForCorners = addPaddingForCorners;
        invalidateSelf();
!!!38823095.java!!!	setAlpha(in alpha : int) : void
        super.setAlpha(alpha);
        mCornerShadowPaint.setAlpha(alpha);
        mEdgeShadowPaint.setAlpha(alpha);
!!!38823223.java!!!	onBoundsChange(inout bounds : Rect) : void
        mDirty = true;
!!!38823351.java!!!	setShadowSize(in shadowSize : float, in maxShadowSize : float) : void
        if (shadowSize < 0 || maxShadowSize < 0) {
            throw new IllegalArgumentException("invalid shadow size");
        }
        shadowSize = toEven(shadowSize);
        maxShadowSize = toEven(maxShadowSize);
        if (shadowSize > maxShadowSize) {
            shadowSize = maxShadowSize;
            if (!mPrintedShadowClipWarning) {
                mPrintedShadowClipWarning = true;
            }
        }
        if (mRawShadowSize == shadowSize && mRawMaxShadowSize == maxShadowSize) {
            return;
        }
        mRawShadowSize = shadowSize;
        mRawMaxShadowSize = maxShadowSize;
        mShadowSize = Math.round(shadowSize * SHADOW_MULTIPLIER);
        mMaxShadowSize = maxShadowSize;
        mDirty = true;
        invalidateSelf();
!!!38823479.java!!!	getPadding(inout padding : Rect) : boolean
        int vOffset = (int) Math.ceil(calculateVerticalPadding(mRawMaxShadowSize, mCornerRadius,
                mAddPaddingForCorners));
        int hOffset = (int) Math.ceil(calculateHorizontalPadding(mRawMaxShadowSize, mCornerRadius,
                mAddPaddingForCorners));
        padding.set(hOffset, vOffset, hOffset, vOffset);
        return true;
!!!38823607.java!!!	calculateVerticalPadding(in maxShadowSize : float, in cornerRadius : float, inout addPaddingForCorners : boolean) : float
        if (addPaddingForCorners) {
            return (float) (maxShadowSize * SHADOW_MULTIPLIER + (1 - COS_45) * cornerRadius);
        } else {
            return maxShadowSize * SHADOW_MULTIPLIER;
        }
!!!38823735.java!!!	calculateHorizontalPadding(in maxShadowSize : float, in cornerRadius : float, inout addPaddingForCorners : boolean) : float
        if (addPaddingForCorners) {
            return (float) (maxShadowSize + (1 - COS_45) * cornerRadius);
        } else {
            return maxShadowSize;
        }
!!!38823863.java!!!	getOpacity() : int
        return PixelFormat.TRANSLUCENT;
!!!38823991.java!!!	setCornerRadius(in radius : float) : void
        radius = Math.round(radius);
        if (mCornerRadius == radius) {
            return;
        }
        mCornerRadius = radius;
        mDirty = true;
        invalidateSelf();
!!!38824119.java!!!	draw(inout canvas : Canvas) : void
        if (mDirty) {
            buildComponents(getBounds());
            mDirty = false;
        }
        drawShadow(canvas);

        super.draw(canvas);
!!!38824247.java!!!	setRotation(in rotation : float) : void
        if (mRotation != rotation) {
            mRotation = rotation;
            invalidateSelf();
        }
!!!38824375.java!!!	drawShadow(inout canvas : Canvas) : void
        final int rotateSaved = canvas.save();
        canvas.rotate(mRotation, mContentBounds.centerX(), mContentBounds.centerY());

        final float edgeShadowTop = -mCornerRadius - mShadowSize;
        final float shadowOffset = mCornerRadius;
        final boolean drawHorizontalEdges = mContentBounds.width() - 2 * shadowOffset > 0;
        final boolean drawVerticalEdges = mContentBounds.height() - 2 * shadowOffset > 0;

        final float shadowOffsetTop = mRawShadowSize - (mRawShadowSize * SHADOW_TOP_SCALE);
        final float shadowOffsetHorizontal = mRawShadowSize - (mRawShadowSize * SHADOW_HORIZ_SCALE);
        final float shadowOffsetBottom = mRawShadowSize - (mRawShadowSize * SHADOW_BOTTOM_SCALE);

        final float shadowScaleHorizontal = shadowOffset / (shadowOffset + shadowOffsetHorizontal);
        final float shadowScaleTop = shadowOffset / (shadowOffset + shadowOffsetTop);
        final float shadowScaleBottom = shadowOffset / (shadowOffset + shadowOffsetBottom);

        // LT
        int saved = canvas.save();
        canvas.translate(mContentBounds.left + shadowOffset, mContentBounds.top + shadowOffset);
        canvas.scale(shadowScaleHorizontal, shadowScaleTop);
        canvas.drawPath(mCornerShadowPath, mCornerShadowPaint);
        if (drawHorizontalEdges) {
            // TE
            canvas.scale(1f / shadowScaleHorizontal, 1f);
            canvas.drawRect(0, edgeShadowTop,
                    mContentBounds.width() - 2 * shadowOffset, -mCornerRadius,
                    mEdgeShadowPaint);
        }
        canvas.restoreToCount(saved);
        // RB
        saved = canvas.save();
        canvas.translate(mContentBounds.right - shadowOffset, mContentBounds.bottom - shadowOffset);
        canvas.scale(shadowScaleHorizontal, shadowScaleBottom);
        canvas.rotate(180f);
        canvas.drawPath(mCornerShadowPath, mCornerShadowPaint);
        if (drawHorizontalEdges) {
            // BE
            canvas.scale(1f / shadowScaleHorizontal, 1f);
            canvas.drawRect(0, edgeShadowTop,
                    mContentBounds.width() - 2 * shadowOffset, -mCornerRadius + mShadowSize,
                    mEdgeShadowPaint);
        }
        canvas.restoreToCount(saved);
        // LB
        saved = canvas.save();
        canvas.translate(mContentBounds.left + shadowOffset, mContentBounds.bottom - shadowOffset);
        canvas.scale(shadowScaleHorizontal, shadowScaleBottom);
        canvas.rotate(270f);
        canvas.drawPath(mCornerShadowPath, mCornerShadowPaint);
        if (drawVerticalEdges) {
            // LE
            canvas.scale(1f / shadowScaleBottom, 1f);
            canvas.drawRect(0, edgeShadowTop,
                    mContentBounds.height() - 2 * shadowOffset, -mCornerRadius, mEdgeShadowPaint);
        }
        canvas.restoreToCount(saved);
        // RT
        saved = canvas.save();
        canvas.translate(mContentBounds.right - shadowOffset, mContentBounds.top + shadowOffset);
        canvas.scale(shadowScaleHorizontal, shadowScaleTop);
        canvas.rotate(90f);
        canvas.drawPath(mCornerShadowPath, mCornerShadowPaint);
        if (drawVerticalEdges) {
            // RE
            canvas.scale(1f / shadowScaleTop, 1f);
            canvas.drawRect(0, edgeShadowTop,
                    mContentBounds.height() - 2 * shadowOffset, -mCornerRadius, mEdgeShadowPaint);
        }
        canvas.restoreToCount(saved);

        canvas.restoreToCount(rotateSaved);
!!!38824503.java!!!	buildShadowCorners() : void
        RectF innerBounds = new RectF(-mCornerRadius, -mCornerRadius, mCornerRadius, mCornerRadius);
        RectF outerBounds = new RectF(innerBounds);
        outerBounds.inset(-mShadowSize, -mShadowSize);

        if (mCornerShadowPath == null) {
            mCornerShadowPath = new Path();
        } else {
            mCornerShadowPath.reset();
        }
        mCornerShadowPath.setFillType(Path.FillType.EVEN_ODD);
        mCornerShadowPath.moveTo(-mCornerRadius, 0);
        mCornerShadowPath.rLineTo(-mShadowSize, 0);
        // outer arc
        mCornerShadowPath.arcTo(outerBounds, 180f, 90f, false);
        // inner arc
        mCornerShadowPath.arcTo(innerBounds, 270f, -90f, false);
        mCornerShadowPath.close();

        float shadowRadius = -outerBounds.top;
        if (shadowRadius > 0f) {
            float startRatio = mCornerRadius / shadowRadius;
            float midRatio = startRatio + ((1f - startRatio) / 2f);
            mCornerShadowPaint.setShader(new RadialGradient(0, 0, shadowRadius,
                    new int[]{0, mShadowStartColor, mShadowMiddleColor, mShadowEndColor},
                    new float[]{0f, startRatio, midRatio, 1f},
                    Shader.TileMode.CLAMP));
        }

        // we offset the content shadowSize/2 pixels up to make it more realistic.
        // this is why edge shadow shader has some extra space
        // When drawing bottom edge shadow, we use that extra space.
        mEdgeShadowPaint.setShader(new LinearGradient(0, innerBounds.top, 0, outerBounds.top,
                new int[]{mShadowStartColor, mShadowMiddleColor, mShadowEndColor},
                new float[]{0f, .5f, 1f}, Shader.TileMode.CLAMP));
        mEdgeShadowPaint.setAntiAlias(false);
!!!38824631.java!!!	buildComponents(inout bounds : Rect) : void
        // Card is offset SHADOW_MULTIPLIER * maxShadowSize to account for the shadow shift.
        // We could have different top-bottom offsets to avoid extra gap above but in that case
        // center aligning Views inside the CardView would be problematic.
        final float verticalOffset = mRawMaxShadowSize * SHADOW_MULTIPLIER;
        mContentBounds.set(bounds.left + mRawMaxShadowSize, bounds.top + verticalOffset,
                bounds.right - mRawMaxShadowSize, bounds.bottom - verticalOffset);

        getWrappedDrawable().setBounds((int) mContentBounds.left, (int) mContentBounds.top,
                (int) mContentBounds.right, (int) mContentBounds.bottom);

        buildShadowCorners();
!!!38824759.java!!!	getCornerRadius() : float
        return mCornerRadius;
!!!38824887.java!!!	setShadowSize(in size : float) : void
        setShadowSize(size, mRawMaxShadowSize);
!!!38825015.java!!!	setMaxShadowSize(in size : float) : void
        setShadowSize(mRawShadowSize, size);
!!!38825143.java!!!	getShadowSize() : float
        return mRawShadowSize;
!!!38825271.java!!!	getMaxShadowSize() : float
        return mRawMaxShadowSize;
!!!38825399.java!!!	getMinWidth() : float
        final float content = 2 *
                Math.max(mRawMaxShadowSize, mCornerRadius + mRawMaxShadowSize / 2);
        return content + mRawMaxShadowSize * 2;
!!!38825527.java!!!	getMinHeight() : float
        final float content = 2 * Math.max(mRawMaxShadowSize, mCornerRadius
                + mRawMaxShadowSize * SHADOW_MULTIPLIER / 2);
        return content + (mRawMaxShadowSize * SHADOW_MULTIPLIER) * 2;
