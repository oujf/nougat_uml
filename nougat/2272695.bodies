class FloatingActionButtonEclairMr1
!!!38833847.java!!!	FloatingActionButtonEclairMr1(inout view : VisibilityAwareImageButton, inout shadowViewDelegate : ShadowViewDelegate)
        super(view, shadowViewDelegate);

        mAnimationDuration = view.getResources().getInteger(android.R.integer.config_shortAnimTime);

        mStateListAnimator = new StateListAnimator();
        mStateListAnimator.setTarget(view);

        // Elevate with translationZ when pressed or focused
        mStateListAnimator.addState(PRESSED_ENABLED_STATE_SET,
                setupAnimation(new ElevateToTranslationZAnimation()));
        mStateListAnimator.addState(FOCUSED_ENABLED_STATE_SET,
                setupAnimation(new ElevateToTranslationZAnimation()));
        // Reset back to elevation by default
        mStateListAnimator.addState(EMPTY_STATE_SET,
                setupAnimation(new ResetElevationAnimation()));
!!!38833975.java!!!	setBackgroundDrawable(inout backgroundTint : ColorStateList, inout backgroundTintMode : PorterDuff::Mode, in rippleColor : int, in borderWidth : int) : void
        // Now we need to tint the original background with the tint, using
        // an InsetDrawable if we have a border width
        mShapeDrawable = DrawableCompat.wrap(createShapeDrawable());
        DrawableCompat.setTintList(mShapeDrawable, backgroundTint);
        if (backgroundTintMode != null) {
            DrawableCompat.setTintMode(mShapeDrawable, backgroundTintMode);
        }

        // Now we created a mask Drawable which will be used for touch feedback.
        GradientDrawable touchFeedbackShape = createShapeDrawable();

        // We'll now wrap that touch feedback mask drawable with a ColorStateList. We do not need
        // to inset for any border here as LayerDrawable will nest the padding for us
        mRippleDrawable = DrawableCompat.wrap(touchFeedbackShape);
        DrawableCompat.setTintList(mRippleDrawable, createColorStateList(rippleColor));

        final Drawable[] layers;
        if (borderWidth > 0) {
            mBorderDrawable = createBorderDrawable(borderWidth, backgroundTint);
            layers = new Drawable[] {mBorderDrawable, mShapeDrawable, mRippleDrawable};
        } else {
            mBorderDrawable = null;
            layers = new Drawable[] {mShapeDrawable, mRippleDrawable};
        }

        mContentBackground = new LayerDrawable(layers);

        mShadowDrawable = new ShadowDrawableWrapper(
                mView.getResources(),
                mContentBackground,
                mShadowViewDelegate.getRadius(),
                mElevation,
                mElevation + mPressedTranslationZ);
        mShadowDrawable.setAddPaddingForCorners(false);
        mShadowViewDelegate.setBackgroundDrawable(mShadowDrawable);
!!!38834103.java!!!	setBackgroundTintList(inout tint : ColorStateList) : void
        if (mShapeDrawable != null) {
            DrawableCompat.setTintList(mShapeDrawable, tint);
        }
        if (mBorderDrawable != null) {
            mBorderDrawable.setBorderTint(tint);
        }
!!!38834231.java!!!	setBackgroundTintMode(inout tintMode : PorterDuff::Mode) : void
        if (mShapeDrawable != null) {
            DrawableCompat.setTintMode(mShapeDrawable, tintMode);
        }
!!!38834359.java!!!	setRippleColor(in rippleColor : int) : void
        if (mRippleDrawable != null) {
            DrawableCompat.setTintList(mRippleDrawable, createColorStateList(rippleColor));
        }
!!!38834487.java!!!	getElevation() : float
        return mElevation;
!!!38834615.java!!!	onElevationChanged(in elevation : float) : void
        if (mShadowDrawable != null) {
            mShadowDrawable.setShadowSize(elevation, elevation + mPressedTranslationZ);
            updatePadding();
        }
!!!38834743.java!!!	onTranslationZChanged(in translationZ : float) : void
        if (mShadowDrawable != null) {
            mShadowDrawable.setMaxShadowSize(mElevation + translationZ);
            updatePadding();
        }
!!!38834871.java!!!	onDrawableStateChanged(inout state : int) : void
        mStateListAnimator.setState(state);
!!!38834999.java!!!	jumpDrawableToCurrentState() : void
        mStateListAnimator.jumpToCurrentState();
!!!38835127.java!!!	hide(in listener : FloatingActionButtonImpl::InternalVisibilityChangedListener, in fromUser : boolean) : void
        if (mIsHiding || mView.getVisibility() != View.VISIBLE) {
            // A hide animation is in progress, or we're already hidden. Skip the call
            if (listener != null) {
                listener.onHidden();
            }
            return;
        }

        Animation anim = android.view.animation.AnimationUtils.loadAnimation(
                mView.getContext(), R.anim.design_fab_out);
        anim.setInterpolator(AnimationUtils.FAST_OUT_LINEAR_IN_INTERPOLATOR);
        anim.setDuration(SHOW_HIDE_ANIM_DURATION);
        anim.setAnimationListener(new AnimationUtils.AnimationListenerAdapter() {
            @Override
            public void onAnimationStart(Animation animation) {
                mIsHiding = true;
            }

            @Override
            public void onAnimationEnd(Animation animation) {
                mIsHiding = false;
                mView.internalSetVisibility(View.GONE, fromUser);
                if (listener != null) {
                    listener.onHidden();
                }
            }
        });
        mView.startAnimation(anim);
!!!38835255.java!!!	show(in listener : FloatingActionButtonImpl::InternalVisibilityChangedListener, in fromUser : boolean) : void
        if (mView.getVisibility() != View.VISIBLE || mIsHiding) {
            // If the view is not visible, or is visible and currently being hidden, run
            // the show animation
            mView.clearAnimation();
            mView.internalSetVisibility(View.VISIBLE, fromUser);
            Animation anim = android.view.animation.AnimationUtils.loadAnimation(
                    mView.getContext(), R.anim.design_fab_in);
            anim.setDuration(SHOW_HIDE_ANIM_DURATION);
            anim.setInterpolator(AnimationUtils.LINEAR_OUT_SLOW_IN_INTERPOLATOR);
            anim.setAnimationListener(new AnimationListenerAdapter() {
                @Override
                public void onAnimationEnd(Animation animation) {
                    if (listener != null) {
                        listener.onShown();
                    }
                }
            });
            mView.startAnimation(anim);
        } else {
            if (listener != null) {
                listener.onShown();
            }
        }
!!!38835383.java!!!	onCompatShadowChanged() : void
        // Ignore pre-v21
!!!38835511.java!!!	getPadding(inout rect : Rect) : void
        mShadowDrawable.getPadding(rect);
!!!38835639.java!!!	setupAnimation(inout animation : Animation) : Animation
        animation.setInterpolator(AnimationUtils.FAST_OUT_SLOW_IN_INTERPOLATOR);
        animation.setDuration(mAnimationDuration);
        return animation;
!!!38836407.java!!!	createColorStateList(in selectedColor : int) : ColorStateList
        final int[][] states = new int[3][];
        final int[] colors = new int[3];
        int i = 0;

        states[i] = FOCUSED_ENABLED_STATE_SET;
        colors[i] = selectedColor;
        i++;

        states[i] = PRESSED_ENABLED_STATE_SET;
        colors[i] = selectedColor;
        i++;

        // Default enabled state
        states[i] = new int[0];
        colors[i] = Color.TRANSPARENT;
        i++;

        return new ColorStateList(states, colors);
