class ValueAnimatorCompatImplEclairMr1
!!!38836535.java!!!	start() : void
        if (mIsRunning) {
            // If we're already running, ignore
            return;
        }

        if (mInterpolator == null) {
            mInterpolator = new AccelerateDecelerateInterpolator();
        }

        mStartTime = SystemClock.uptimeMillis();
        mIsRunning = true;

        // Reset the animated fraction
        mAnimatedFraction = 0f;

        if (mListener != null) {
            mListener.onAnimationStart();
        }

        sHandler.postDelayed(mRunnable, HANDLER_DELAY);
!!!38836663.java!!!	isRunning() : boolean
        return mIsRunning;
!!!38836791.java!!!	setInterpolator(inout interpolator : Interpolator) : void
        mInterpolator = interpolator;
!!!38836919.java!!!	setListener(inout listener : ValueAnimatorCompat::Impl::AnimatorListenerProxy) : void
        mListener = listener;
!!!38837047.java!!!	setUpdateListener(inout updateListener : ValueAnimatorCompat::Impl::AnimatorUpdateListenerProxy) : void
        mUpdateListener = updateListener;
!!!38837175.java!!!	setIntValues(in from : int, in to : int) : void
        mIntValues[0] = from;
        mIntValues[1] = to;
!!!38837303.java!!!	getAnimatedIntValue() : int
        return AnimationUtils.lerp(mIntValues[0], mIntValues[1], getAnimatedFraction());
!!!38837431.java!!!	setFloatValues(in from : float, in to : float) : void
        mFloatValues[0] = from;
        mFloatValues[1] = to;
!!!38837559.java!!!	getAnimatedFloatValue() : float
        return AnimationUtils.lerp(mFloatValues[0], mFloatValues[1], getAnimatedFraction());
!!!38837687.java!!!	setDuration(in duration : long) : void
        mDuration = duration;
!!!38837815.java!!!	cancel() : void
        mIsRunning = false;
        sHandler.removeCallbacks(mRunnable);

        if (mListener != null) {
            mListener.onAnimationCancel();
            mListener.onAnimationEnd();
        }
!!!38837943.java!!!	getAnimatedFraction() : float
        return mAnimatedFraction;
!!!38838071.java!!!	end() : void
        if (mIsRunning) {
            mIsRunning = false;
            sHandler.removeCallbacks(mRunnable);

            // Set our animated fraction to 1
            mAnimatedFraction = 1f;

            if (mUpdateListener != null) {
                mUpdateListener.onAnimationUpdate();
            }

            if (mListener != null) {
                mListener.onAnimationEnd();
            }
        }
!!!38838199.java!!!	getDuration() : long
        return mDuration;
!!!38838327.java!!!	update() : void
        if (mIsRunning) {
            // Update the animated fraction
            final long elapsed = SystemClock.uptimeMillis() - mStartTime;
            final float linearFraction = MathUtils.constrain(elapsed / (float) mDuration, 0f, 1f);
            mAnimatedFraction = mInterpolator != null
                    ? mInterpolator.getInterpolation(linearFraction)
                    : linearFraction;

            // If we're running, dispatch tp the listener
            if (mUpdateListener != null) {
                mUpdateListener.onAnimationUpdate();
            }

            // Check to see if we've passed the animation duration
            if (SystemClock.uptimeMillis() >= (mStartTime + mDuration)) {
                mIsRunning = false;

                if (mListener != null) {
                    mListener.onAnimationEnd();
                }
            }
        }

        if (mIsRunning) {
            // If we're still running, post another delayed runnable
            sHandler.postDelayed(mRunnable, HANDLER_DELAY);
        }
