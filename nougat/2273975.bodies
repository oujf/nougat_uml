class FloatingActionButtonLollipop
!!!38841655.java!!!	FloatingActionButtonLollipop(inout view : VisibilityAwareImageButton, inout shadowViewDelegate : ShadowViewDelegate)
        super(view, shadowViewDelegate);

        mInterpolator = view.isInEditMode() ? null
                : AnimationUtils.loadInterpolator(mView.getContext(),
                        android.R.interpolator.fast_out_slow_in);
!!!38841783.java!!!	setBackgroundDrawable(inout backgroundTint : ColorStateList, inout backgroundTintMode : PorterDuff::Mode, in rippleColor : int, in borderWidth : int) : void
        // Now we need to tint the shape background with the tint
        mShapeDrawable = DrawableCompat.wrap(createShapeDrawable());
        DrawableCompat.setTintList(mShapeDrawable, backgroundTint);
        if (backgroundTintMode != null) {
            DrawableCompat.setTintMode(mShapeDrawable, backgroundTintMode);
        }

        final Drawable rippleContent;
        if (borderWidth > 0) {
            mBorderDrawable = createBorderDrawable(borderWidth, backgroundTint);
            rippleContent = new LayerDrawable(new Drawable[]{mBorderDrawable, mShapeDrawable});
        } else {
            mBorderDrawable = null;
            rippleContent = mShapeDrawable;
        }

        mRippleDrawable = new RippleDrawable(ColorStateList.valueOf(rippleColor),
                rippleContent, null);

        mContentBackground = mRippleDrawable;

        mShadowViewDelegate.setBackgroundDrawable(mRippleDrawable);
!!!38841911.java!!!	setRippleColor(in rippleColor : int) : void
        if (mRippleDrawable instanceof RippleDrawable) {
            ((RippleDrawable) mRippleDrawable).setColor(ColorStateList.valueOf(rippleColor));
        } else {
            super.setRippleColor(rippleColor);
        }
!!!38842039.java!!!	onElevationChanged(in elevation : float) : void
        mView.setElevation(elevation);
        if (mShadowViewDelegate.isCompatPaddingEnabled()) {
            updatePadding();
        }
!!!38842167.java!!!	onTranslationZChanged(in translationZ : float) : void
        StateListAnimator stateListAnimator = new StateListAnimator();
        // Animate translationZ to our value when pressed or focused
        stateListAnimator.addState(PRESSED_ENABLED_STATE_SET,
                setupAnimator(ObjectAnimator.ofFloat(mView, "translationZ", translationZ)));
        stateListAnimator.addState(FOCUSED_ENABLED_STATE_SET,
                setupAnimator(ObjectAnimator.ofFloat(mView, "translationZ", translationZ)));
        // Animate translationZ to 0 otherwise
        stateListAnimator.addState(EMPTY_STATE_SET,
                setupAnimator(ObjectAnimator.ofFloat(mView, "translationZ", 0f)));
        mView.setStateListAnimator(stateListAnimator);

        if (mShadowViewDelegate.isCompatPaddingEnabled()) {
            updatePadding();
        }
!!!38842295.java!!!	getElevation() : float
        return mView.getElevation();
!!!38842423.java!!!	onCompatShadowChanged() : void
        updatePadding();
!!!38842551.java!!!	onPaddingUpdated(inout padding : Rect) : void
        if (mShadowViewDelegate.isCompatPaddingEnabled()) {
            mInsetDrawable = new InsetDrawable(mRippleDrawable,
                    padding.left, padding.top, padding.right, padding.bottom);
            mShadowViewDelegate.setBackgroundDrawable(mInsetDrawable);
        } else {
            mShadowViewDelegate.setBackgroundDrawable(mRippleDrawable);
        }
!!!38842679.java!!!	onDrawableStateChanged(inout state : int) : void
        // no-op
!!!38842807.java!!!	jumpDrawableToCurrentState() : void
        // no-op
!!!38842935.java!!!	requirePreDrawListener() : boolean
        return false;
!!!38843063.java!!!	setupAnimator(inout animator : Animator) : Animator
        animator.setInterpolator(mInterpolator);
        return animator;
!!!38843191.java!!!	newCircularDrawable() : CircularBorderDrawable
        return new CircularBorderDrawableLollipop();
!!!38843319.java!!!	getPadding(inout rect : Rect) : void
        if (mShadowViewDelegate.isCompatPaddingEnabled()) {
            final float radius = mShadowViewDelegate.getRadius();
            final float maxShadowSize = getElevation() + mPressedTranslationZ;
            final int hPadding = (int) Math.ceil(
                    ShadowDrawableWrapper.calculateHorizontalPadding(maxShadowSize, radius, false));
            final int vPadding = (int) Math.ceil(
                    ShadowDrawableWrapper.calculateVerticalPadding(maxShadowSize, radius, false));
            rect.set(hPadding, vPadding, hPadding, vPadding);
        } else {
            rect.set(0, 0, 0, 0);
        }
