class MenuBuilder
!!!38852791.java!!!	MenuBuilder(inout context : Context)
        mContext = context;
        mResources = context.getResources();
        mItems = new ArrayList<>();

        mVisibleItems = new ArrayList<>();
        mIsVisibleItemsStale = true;

        mActionItems = new ArrayList<>();
        mNonActionItems = new ArrayList<>();
        mIsActionItemsStale = true;

        setShortcutsVisibleInner(true);
!!!38852919.java!!!	setDefaultShowAsAction(in defaultShowAsAction : int) : MenuBuilder
        mDefaultShowAsAction = defaultShowAsAction;
        return this;
!!!38853047.java!!!	addMenuPresenter(inout presenter : MenuPresenter) : void
        addMenuPresenter(presenter, mContext);
!!!38853175.java!!!	addMenuPresenter(inout presenter : MenuPresenter, inout menuContext : Context) : void
        mPresenters.add(new WeakReference<MenuPresenter>(presenter));
        presenter.initForMenu(menuContext, this);
        mIsActionItemsStale = true;
!!!38853303.java!!!	removeMenuPresenter(inout presenter : MenuPresenter) : void
        for (WeakReference<MenuPresenter> ref : mPresenters) {
            final MenuPresenter item = ref.get();
            if (item == null || item == presenter) {
                mPresenters.remove(ref);
            }
        }
!!!38853431.java!!!	dispatchPresenterUpdate(inout cleared : boolean) : void
        if (mPresenters.isEmpty()) return;

        stopDispatchingItemsChanged();
        for (WeakReference<MenuPresenter> ref : mPresenters) {
            final MenuPresenter presenter = ref.get();
            if (presenter == null) {
                mPresenters.remove(ref);
            } else {
                presenter.updateMenuView(cleared);
            }
        }
        startDispatchingItemsChanged();
!!!38853559.java!!!	dispatchSubMenuSelected(inout subMenu : SubMenuBuilder, inout preferredPresenter : MenuPresenter) : boolean
        if (mPresenters.isEmpty()) return false;

        boolean result = false;

        // Try the preferred presenter first.
        if (preferredPresenter != null) {
            result = preferredPresenter.onSubMenuSelected(subMenu);
        }

        for (WeakReference<MenuPresenter> ref : mPresenters) {
            final MenuPresenter presenter = ref.get();
            if (presenter == null) {
                mPresenters.remove(ref);
            } else if (!result) {
                result = presenter.onSubMenuSelected(subMenu);
            }
        }
        return result;
!!!38853687.java!!!	dispatchSaveInstanceState(inout outState : Bundle) : void
        if (mPresenters.isEmpty()) return;

        SparseArray<Parcelable> presenterStates = new SparseArray<Parcelable>();

        for (WeakReference<MenuPresenter> ref : mPresenters) {
            final MenuPresenter presenter = ref.get();
            if (presenter == null) {
                mPresenters.remove(ref);
            } else {
                final int id = presenter.getId();
                if (id > 0) {
                    final Parcelable state = presenter.onSaveInstanceState();
                    if (state != null) {
                        presenterStates.put(id, state);
                    }
                }
            }
        }

        outState.putSparseParcelableArray(PRESENTER_KEY, presenterStates);
!!!38853815.java!!!	dispatchRestoreInstanceState(inout state : Bundle) : void
        SparseArray<Parcelable> presenterStates = state.getSparseParcelableArray(PRESENTER_KEY);

        if (presenterStates == null || mPresenters.isEmpty()) return;

        for (WeakReference<MenuPresenter> ref : mPresenters) {
            final MenuPresenter presenter = ref.get();
            if (presenter == null) {
                mPresenters.remove(ref);
            } else {
                final int id = presenter.getId();
                if (id > 0) {
                    Parcelable parcel = presenterStates.get(id);
                    if (parcel != null) {
                        presenter.onRestoreInstanceState(parcel);
                    }
                }
            }
        }
!!!38853943.java!!!	savePresenterStates(inout outState : Bundle) : void
        dispatchSaveInstanceState(outState);
!!!38854071.java!!!	restorePresenterStates(inout state : Bundle) : void
        dispatchRestoreInstanceState(state);
!!!38854199.java!!!	saveActionViewStates(inout outStates : Bundle) : void
        SparseArray<Parcelable> viewStates = null;

        final int itemCount = size();
        for (int i = 0; i < itemCount; i++) {
            final MenuItem item = getItem(i);
            final View v = MenuItemCompat.getActionView(item);
            if (v != null && v.getId() != View.NO_ID) {
                if (viewStates == null) {
                    viewStates = new SparseArray<Parcelable>();
                }
                v.saveHierarchyState(viewStates);
                if (MenuItemCompat.isActionViewExpanded(item)) {
                    outStates.putInt(EXPANDED_ACTION_VIEW_ID, item.getItemId());
                }
            }
            if (item.hasSubMenu()) {
                final SubMenuBuilder subMenu = (SubMenuBuilder) item.getSubMenu();
                subMenu.saveActionViewStates(outStates);
            }
        }

        if (viewStates != null) {
            outStates.putSparseParcelableArray(getActionViewStatesKey(), viewStates);
        }
!!!38854327.java!!!	restoreActionViewStates(inout states : Bundle) : void
        if (states == null) {
            return;
        }

        SparseArray<Parcelable> viewStates = states.getSparseParcelableArray(
                getActionViewStatesKey());

        final int itemCount = size();
        for (int i = 0; i < itemCount; i++) {
            final MenuItem item = getItem(i);
            final View v = MenuItemCompat.getActionView(item);
            if (v != null && v.getId() != View.NO_ID) {
                v.restoreHierarchyState(viewStates);
            }
            if (item.hasSubMenu()) {
                final SubMenuBuilder subMenu = (SubMenuBuilder) item.getSubMenu();
                subMenu.restoreActionViewStates(states);
            }
        }

        final int expandedId = states.getInt(EXPANDED_ACTION_VIEW_ID);
        if (expandedId > 0) {
            MenuItem itemToExpand = findItem(expandedId);
            if (itemToExpand != null) {
                MenuItemCompat.expandActionView(itemToExpand);
            }
        }
!!!38854455.java!!!	getActionViewStatesKey() : String
        return ACTION_VIEW_STATES_KEY;
!!!38854583.java!!!	setCallback(inout cb : MenuBuilder::Callback) : void
        mCallback = cb;
!!!38854711.java!!!	addInternal(in group : int, in id : int, in categoryOrder : int, inout title : CharSequence) : MenuItem
        final int ordering = getOrdering(categoryOrder);

        final MenuItemImpl item = createNewMenuItem(group, id, categoryOrder, ordering, title,
                mDefaultShowAsAction);

        if (mCurrentMenuInfo != null) {
            // Pass along the current menu info
            item.setMenuInfo(mCurrentMenuInfo);
        }

        mItems.add(findInsertIndex(mItems, ordering), item);
        onItemsChanged(true);

        return item;
!!!38854839.java!!!	createNewMenuItem(in group : int, in id : int, in categoryOrder : int, in ordering : int, inout title : CharSequence, in defaultShowAsAction : int) : MenuItemImpl
        return new MenuItemImpl(this, group, id, categoryOrder, ordering, title,
                defaultShowAsAction);
!!!38854967.java!!!	add(inout title : CharSequence) : MenuItem
        return addInternal(0, 0, 0, title);
!!!38855095.java!!!	add(in titleRes : int) : MenuItem
        return addInternal(0, 0, 0, mResources.getString(titleRes));
!!!38855223.java!!!	add(in group : int, in id : int, in categoryOrder : int, inout title : CharSequence) : MenuItem
        return addInternal(group, id, categoryOrder, title);
!!!38855351.java!!!	add(in group : int, in id : int, in categoryOrder : int, in title : int) : MenuItem
        return addInternal(group, id, categoryOrder, mResources.getString(title));
!!!38855479.java!!!	addSubMenu(inout title : CharSequence) : SubMenu
        return addSubMenu(0, 0, 0, title);
!!!38855607.java!!!	addSubMenu(in titleRes : int) : SubMenu
        return addSubMenu(0, 0, 0, mResources.getString(titleRes));
!!!38855735.java!!!	addSubMenu(in group : int, in id : int, in categoryOrder : int, inout title : CharSequence) : SubMenu
        final MenuItemImpl item = (MenuItemImpl) addInternal(group, id, categoryOrder, title);
        final SubMenuBuilder subMenu = new SubMenuBuilder(mContext, this, item);
        item.setSubMenu(subMenu);

        return subMenu;
!!!38855863.java!!!	addSubMenu(in group : int, in id : int, in categoryOrder : int, in title : int) : SubMenu
        return addSubMenu(group, id, categoryOrder, mResources.getString(title));
!!!38855991.java!!!	addIntentOptions(in group : int, in id : int, in categoryOrder : int, inout caller : ComponentName, inout specifics : Intent, inout intent : Intent, in flags : int, inout outSpecificItems : MenuItem) : int
        PackageManager pm = mContext.getPackageManager();
        final List<ResolveInfo> lri =
                pm.queryIntentActivityOptions(caller, specifics, intent, 0);
        final int N = lri != null ? lri.size() : 0;

        if ((flags & FLAG_APPEND_TO_GROUP) == 0) {
            removeGroup(group);
        }

        for (int i = 0; i < N; i++) {
            final ResolveInfo ri = lri.get(i);
            Intent rintent = new Intent(
                    ri.specificIndex < 0 ? intent : specifics[ri.specificIndex]);
            rintent.setComponent(new ComponentName(
                    ri.activityInfo.applicationInfo.packageName,
                    ri.activityInfo.name));
            final MenuItem item = add(group, id, categoryOrder, ri.loadLabel(pm))
                    .setIcon(ri.loadIcon(pm))
                    .setIntent(rintent);
            if (outSpecificItems != null && ri.specificIndex >= 0) {
                outSpecificItems[ri.specificIndex] = item;
            }
        }

        return N;
!!!38856119.java!!!	removeItem(in id : int) : void
        removeItemAtInt(findItemIndex(id), true);
!!!38856247.java!!!	removeGroup(in group : int) : void
        final int i = findGroupIndex(group);

        if (i >= 0) {
            final int maxRemovable = mItems.size() - i;
            int numRemoved = 0;
            while ((numRemoved++ < maxRemovable) && (mItems.get(i).getGroupId() == group)) {
                // Don't force update for each one, this method will do it at the end
                removeItemAtInt(i, false);
            }

            // Notify menu views
            onItemsChanged(true);
        }
!!!38856375.java!!!	removeItemAtInt(in index : int, inout updateChildrenOnMenuViews : boolean) : void
        if ((index < 0) || (index >= mItems.size())) return;

        mItems.remove(index);

        if (updateChildrenOnMenuViews) onItemsChanged(true);
!!!38856503.java!!!	removeItemAt(in index : int) : void
        removeItemAtInt(index, true);
!!!38856631.java!!!	clearAll() : void
        mPreventDispatchingItemsChanged = true;
        clear();
        clearHeader();
        mPreventDispatchingItemsChanged = false;
        mItemsChangedWhileDispatchPrevented = false;
        onItemsChanged(true);
!!!38856759.java!!!	clear() : void
        if (mExpandedItem != null) {
            collapseItemActionView(mExpandedItem);
        }
        mItems.clear();

        onItemsChanged(true);
!!!38856887.java!!!	setExclusiveItemChecked(inout item : MenuItem) : void
        final int group = item.getGroupId();

        final int N = mItems.size();
        for (int i = 0; i < N; i++) {
            MenuItemImpl curItem = mItems.get(i);
            if (curItem.getGroupId() == group) {
                if (!curItem.isExclusiveCheckable()) continue;
                if (!curItem.isCheckable()) continue;

                // Check the item meant to be checked, uncheck the others (that are in the group)
                curItem.setCheckedInt(curItem == item);
            }
        }
!!!38857015.java!!!	setGroupCheckable(in group : int, inout checkable : boolean, inout exclusive : boolean) : void
        final int N = mItems.size();

        for (int i = 0; i < N; i++) {
            MenuItemImpl item = mItems.get(i);
            if (item.getGroupId() == group) {
                item.setExclusiveCheckable(exclusive);
                item.setCheckable(checkable);
            }
        }
!!!38857143.java!!!	setGroupVisible(in group : int, inout visible : boolean) : void
        final int N = mItems.size();

        // We handle the notification of items being changed ourselves, so we use setVisibleInt rather
        // than setVisible and at the end notify of items being changed

        boolean changedAtLeastOneItem = false;
        for (int i = 0; i < N; i++) {
            MenuItemImpl item = mItems.get(i);
            if (item.getGroupId() == group) {
                if (item.setVisibleInt(visible)) changedAtLeastOneItem = true;
            }
        }

        if (changedAtLeastOneItem) onItemsChanged(true);
!!!38857271.java!!!	setGroupEnabled(in group : int, inout enabled : boolean) : void
        final int N = mItems.size();

        for (int i = 0; i < N; i++) {
            MenuItemImpl item = mItems.get(i);
            if (item.getGroupId() == group) {
                item.setEnabled(enabled);
            }
        }
!!!38857399.java!!!	hasVisibleItems() : boolean
        if (mOverrideVisibleItems) {
            return true;
        }

        final int size = size();

        for (int i = 0; i < size; i++) {
            MenuItemImpl item = mItems.get(i);
            if (item.isVisible()) {
                return true;
            }
        }

        return false;
!!!38857527.java!!!	findItem(in id : int) : MenuItem
        final int size = size();
        for (int i = 0; i < size; i++) {
            MenuItemImpl item = mItems.get(i);
            if (item.getItemId() == id) {
                return item;
            } else if (item.hasSubMenu()) {
                MenuItem possibleItem = item.getSubMenu().findItem(id);

                if (possibleItem != null) {
                    return possibleItem;
                }
            }
        }

        return null;
!!!38857655.java!!!	findItemIndex(in id : int) : int
        final int size = size();

        for (int i = 0; i < size; i++) {
            MenuItemImpl item = mItems.get(i);
            if (item.getItemId() == id) {
                return i;
            }
        }

        return -1;
!!!38857783.java!!!	findGroupIndex(in group : int) : int
        return findGroupIndex(group, 0);
!!!38857911.java!!!	findGroupIndex(in group : int, in start : int) : int
        final int size = size();

        if (start < 0) {
            start = 0;
        }

        for (int i = start; i < size; i++) {
            final MenuItemImpl item = mItems.get(i);

            if (item.getGroupId() == group) {
                return i;
            }
        }

        return -1;
!!!38858039.java!!!	size() : int
        return mItems.size();
!!!38858167.java!!!	getItem(in index : int) : MenuItem
        return mItems.get(index);
!!!38858295.java!!!	isShortcutKey(in keyCode : int, inout event : KeyEvent) : boolean
        return findItemWithShortcutForKey(keyCode, event) != null;
!!!38858423.java!!!	setQwertyMode(inout isQwerty : boolean) : void
        mQwertyMode = isQwerty;

        onItemsChanged(false);
!!!38858551.java!!!	getOrdering(in categoryOrder : int) : int
        final int index = (categoryOrder & CATEGORY_MASK) >> CATEGORY_SHIFT;

        if (index < 0 || index >= sCategoryToOrder.length) {
            throw new IllegalArgumentException("order does not contain a valid category.");
        }

        return (sCategoryToOrder[index] << CATEGORY_SHIFT) | (categoryOrder & USER_MASK);
!!!38858679.java!!!	isQwertyMode() : boolean
        return mQwertyMode;
!!!38858807.java!!!	setShortcutsVisible(inout shortcutsVisible : boolean) : void
        if (mShortcutsVisible == shortcutsVisible) {
            return;
        }

        setShortcutsVisibleInner(shortcutsVisible);
        onItemsChanged(false);
!!!38858935.java!!!	setShortcutsVisibleInner(inout shortcutsVisible : boolean) : void
        mShortcutsVisible = shortcutsVisible
                && mResources.getConfiguration().keyboard != Configuration.KEYBOARD_NOKEYS
                && mResources.getBoolean(R.bool.abc_config_showMenuShortcutsWhenKeyboardPresent);
!!!38859063.java!!!	isShortcutsVisible() : boolean
        return mShortcutsVisible;
!!!38859191.java!!!	getResources() : Resources
        return mResources;
!!!38859319.java!!!	getContext() : Context
        return mContext;
!!!38859447.java!!!	dispatchMenuItemSelected(inout menu : MenuBuilder, inout item : MenuItem) : boolean
        return mCallback != null && mCallback.onMenuItemSelected(menu, item);
!!!38859575.java!!!	changeMenuMode() : void
        if (mCallback != null) {
            mCallback.onMenuModeChange(this);
        }
!!!38859703.java!!!	findInsertIndex(inout items : ArrayList<MenuItemImpl>, in ordering : int) : int
        for (int i = items.size() - 1; i >= 0; i--) {
            MenuItemImpl item = items.get(i);
            if (item.getOrdering() <= ordering) {
                return i + 1;
            }
        }

        return 0;
!!!38859831.java!!!	performShortcut(in keyCode : int, inout event : KeyEvent, in flags : int) : boolean
        final MenuItemImpl item = findItemWithShortcutForKey(keyCode, event);

        boolean handled = false;

        if (item != null) {
            handled = performItemAction(item, flags);
        }

        if ((flags & FLAG_ALWAYS_PERFORM_CLOSE) != 0) {
            close(true /* closeAllMenus */);
        }

        return handled;
!!!38859959.java!!!	findItemsWithShortcutForKey(inout items : List<MenuItemImpl>, in keyCode : int, inout event : KeyEvent) : void
        final boolean qwerty = isQwertyMode();
        final int metaState = event.getMetaState();
        final KeyCharacterMap.KeyData possibleChars = new KeyCharacterMap.KeyData();
        // Get the chars associated with the keyCode (i.e using any chording combo)
        final boolean isKeyCodeMapped = event.getKeyData(possibleChars);
        // The delete key is not mapped to '\b' so we treat it specially
        if (!isKeyCodeMapped && (keyCode != KeyEvent.KEYCODE_DEL)) {
            return;
        }

        // Look for an item whose shortcut is this key.
        final int N = mItems.size();
        for (int i = 0; i < N; i++) {
            MenuItemImpl item = mItems.get(i);
            if (item.hasSubMenu()) {
                ((MenuBuilder)item.getSubMenu()).findItemsWithShortcutForKey(items, keyCode, event);
            }
            final char shortcutChar = qwerty ? item.getAlphabeticShortcut() : item.getNumericShortcut();
            if (((metaState & (KeyEvent.META_SHIFT_ON | KeyEvent.META_SYM_ON)) == 0) &&
                  (shortcutChar != 0) &&
                  (shortcutChar == possibleChars.meta[0]
                      || shortcutChar == possibleChars.meta[2]
                      || (qwerty && shortcutChar == '\b' &&
                          keyCode == KeyEvent.KEYCODE_DEL)) &&
                  item.isEnabled()) {
                items.add(item);
            }
        }
!!!38860087.java!!!	findItemWithShortcutForKey(in keyCode : int, inout event : KeyEvent) : MenuItemImpl
        // Get all items that can be associated directly or indirectly with the keyCode
        ArrayList<MenuItemImpl> items = mTempShortcutItemList;
        items.clear();
        findItemsWithShortcutForKey(items, keyCode, event);

        if (items.isEmpty()) {
            return null;
        }

        final int metaState = event.getMetaState();
        final KeyCharacterMap.KeyData possibleChars = new KeyCharacterMap.KeyData();
        // Get the chars associated with the keyCode (i.e using any chording combo)
        event.getKeyData(possibleChars);

        // If we have only one element, we can safely returns it
        final int size = items.size();
        if (size == 1) {
            return items.get(0);
        }

        final boolean qwerty = isQwertyMode();
        // If we found more than one item associated with the key,
        // we have to return the exact match
        for (int i = 0; i < size; i++) {
            final MenuItemImpl item = items.get(i);
            final char shortcutChar = qwerty ? item.getAlphabeticShortcut() :
                    item.getNumericShortcut();
            if ((shortcutChar == possibleChars.meta[0] &&
                    (metaState & KeyEvent.META_ALT_ON) == 0)
                || (shortcutChar == possibleChars.meta[2] &&
                    (metaState & KeyEvent.META_ALT_ON) != 0)
                || (qwerty && shortcutChar == '\b' &&
                    keyCode == KeyEvent.KEYCODE_DEL)) {
                return item;
            }
        }
        return null;
!!!38860215.java!!!	performIdentifierAction(in id : int, in flags : int) : boolean
        // Look for an item whose identifier is the id.
        return performItemAction(findItem(id), flags);
!!!38860343.java!!!	performItemAction(inout item : MenuItem, in flags : int) : boolean
        return performItemAction(item, null, flags);
!!!38860471.java!!!	performItemAction(inout item : MenuItem, inout preferredPresenter : MenuPresenter, in flags : int) : boolean
        MenuItemImpl itemImpl = (MenuItemImpl) item;

        if (itemImpl == null || !itemImpl.isEnabled()) {
            return false;
        }

        boolean invoked = itemImpl.invoke();

        final ActionProvider provider = itemImpl.getSupportActionProvider();
        final boolean providerHasSubMenu = provider != null && provider.hasSubMenu();
        if (itemImpl.hasCollapsibleActionView()) {
            invoked |= itemImpl.expandActionView();
            if (invoked) {
                close(true /* closeAllMenus */);
            }
        } else if (itemImpl.hasSubMenu() || providerHasSubMenu) {
            if (!itemImpl.hasSubMenu()) {
                itemImpl.setSubMenu(new SubMenuBuilder(getContext(), this, itemImpl));
            }

            final SubMenuBuilder subMenu = (SubMenuBuilder) itemImpl.getSubMenu();
            if (providerHasSubMenu) {
                provider.onPrepareSubMenu(subMenu);
            }
            invoked |= dispatchSubMenuSelected(subMenu, preferredPresenter);
            if (!invoked) {
                close(true /* closeAllMenus */);
            }
        } else {
            if ((flags & FLAG_PERFORM_NO_CLOSE) == 0) {
                close(true /* closeAllMenus */);
            }
        }

        return invoked;
!!!38860599.java!!!	close(inout closeAllMenus : boolean) : void
        if (mIsClosing) return;

        mIsClosing = true;
        for (WeakReference<MenuPresenter> ref : mPresenters) {
            final MenuPresenter presenter = ref.get();
            if (presenter == null) {
                mPresenters.remove(ref);
            } else {
                presenter.onCloseMenu(this, closeAllMenus);
            }
        }
        mIsClosing = false;
!!!38860727.java!!!	close() : void
        close(true /* closeAllMenus */);
!!!38860855.java!!!	onItemsChanged(inout structureChanged : boolean) : void
        if (!mPreventDispatchingItemsChanged) {
            if (structureChanged) {
                mIsVisibleItemsStale = true;
                mIsActionItemsStale = true;
            }

            dispatchPresenterUpdate(structureChanged);
        } else {
            mItemsChangedWhileDispatchPrevented = true;
        }
!!!38860983.java!!!	stopDispatchingItemsChanged() : void
        if (!mPreventDispatchingItemsChanged) {
            mPreventDispatchingItemsChanged = true;
            mItemsChangedWhileDispatchPrevented = false;
        }
!!!38861111.java!!!	startDispatchingItemsChanged() : void
        mPreventDispatchingItemsChanged = false;

        if (mItemsChangedWhileDispatchPrevented) {
            mItemsChangedWhileDispatchPrevented = false;
            onItemsChanged(true);
        }
!!!38861239.java!!!	onItemVisibleChanged(inout item : MenuItemImpl) : void
        // Notify of items being changed
        mIsVisibleItemsStale = true;
        onItemsChanged(true);
!!!38861367.java!!!	onItemActionRequestChanged(inout item : MenuItemImpl) : void
        // Notify of items being changed
        mIsActionItemsStale = true;
        onItemsChanged(true);
!!!38861495.java!!!	getVisibleItems() : MenuItemImpl
        if (!mIsVisibleItemsStale) return mVisibleItems;

        // Refresh the visible items
        mVisibleItems.clear();

        final int itemsSize = mItems.size();
        MenuItemImpl item;
        for (int i = 0; i < itemsSize; i++) {
            item = mItems.get(i);
            if (item.isVisible()) mVisibleItems.add(item);
        }

        mIsVisibleItemsStale = false;
        mIsActionItemsStale = true;

        return mVisibleItems;
!!!38861623.java!!!	flagActionItems() : void
        // Important side effect: if getVisibleItems is stale it may refresh,
        // which can affect action items staleness.
        final ArrayList<MenuItemImpl> visibleItems = getVisibleItems();

        if (!mIsActionItemsStale) {
            return;
        }

        // Presenters flag action items as needed.
        boolean flagged = false;
        for (WeakReference<MenuPresenter> ref : mPresenters) {
            final MenuPresenter presenter = ref.get();
            if (presenter == null) {
                mPresenters.remove(ref);
            } else {
                flagged |= presenter.flagActionItems();
            }
        }

        if (flagged) {
            mActionItems.clear();
            mNonActionItems.clear();
            final int itemsSize = visibleItems.size();
            for (int i = 0; i < itemsSize; i++) {
                MenuItemImpl item = visibleItems.get(i);
                if (item.isActionButton()) {
                    mActionItems.add(item);
                } else {
                    mNonActionItems.add(item);
                }
            }
        } else {
            // Nobody flagged anything, everything is a non-action item.
            // (This happens during a first pass with no action-item presenters.)
            mActionItems.clear();
            mNonActionItems.clear();
            mNonActionItems.addAll(getVisibleItems());
        }
        mIsActionItemsStale = false;
!!!38861751.java!!!	getActionItems() : MenuItemImpl
        flagActionItems();
        return mActionItems;
!!!38861879.java!!!	getNonActionItems() : MenuItemImpl
        flagActionItems();
        return mNonActionItems;
!!!38862007.java!!!	clearHeader() : void
        mHeaderIcon = null;
        mHeaderTitle = null;
        mHeaderView = null;

        onItemsChanged(false);
!!!38862135.java!!!	setHeaderInternal(in titleRes : int, in title : CharSequence, in iconRes : int, in icon : Drawable, in view : View) : void
        final Resources r = getResources();

        if (view != null) {
            mHeaderView = view;

            // If using a custom view, then the title and icon aren't used
            mHeaderTitle = null;
            mHeaderIcon = null;
        } else {
            if (titleRes > 0) {
                mHeaderTitle = r.getText(titleRes);
            } else if (title != null) {
                mHeaderTitle = title;
            }

            if (iconRes > 0) {
                mHeaderIcon = ContextCompat.getDrawable(getContext(), iconRes);
            } else if (icon != null) {
                mHeaderIcon = icon;
            }

            // If using the title or icon, then a custom view isn't used
            mHeaderView = null;
        }

        // Notify of change
        onItemsChanged(false);
!!!38862263.java!!!	setHeaderTitleInt(inout title : CharSequence) : MenuBuilder
        setHeaderInternal(0, title, 0, null, null);
        return this;
!!!38862391.java!!!	setHeaderTitleInt(in titleRes : int) : MenuBuilder
        setHeaderInternal(titleRes, null, 0, null, null);
        return this;
!!!38862519.java!!!	setHeaderIconInt(inout icon : Drawable) : MenuBuilder
        setHeaderInternal(0, null, 0, icon, null);
        return this;
!!!38862647.java!!!	setHeaderIconInt(in iconRes : int) : MenuBuilder
        setHeaderInternal(0, null, iconRes, null, null);
        return this;
!!!38862775.java!!!	setHeaderViewInt(inout view : View) : MenuBuilder
        setHeaderInternal(0, null, 0, null, view);
        return this;
!!!38862903.java!!!	getHeaderTitle() : CharSequence
        return mHeaderTitle;
!!!38863031.java!!!	getHeaderIcon() : Drawable
        return mHeaderIcon;
!!!38863159.java!!!	getHeaderView() : View
        return mHeaderView;
!!!38863287.java!!!	getRootMenu() : MenuBuilder
        return this;
!!!38863415.java!!!	setCurrentMenuInfo(inout menuInfo : ContextMenu::ContextMenuInfo) : void
        mCurrentMenuInfo = menuInfo;
!!!38863543.java!!!	setOptionalIconsVisible(inout visible : boolean) : void
        mOptionalIconsVisible = visible;
!!!38863671.java!!!	getOptionalIconsVisible() : boolean
        return mOptionalIconsVisible;
!!!38863799.java!!!	expandItemActionView(inout item : MenuItemImpl) : boolean
        if (mPresenters.isEmpty()) return false;

        boolean expanded = false;

        stopDispatchingItemsChanged();
        for (WeakReference<MenuPresenter> ref : mPresenters) {
            final MenuPresenter presenter = ref.get();
            if (presenter == null) {
                mPresenters.remove(ref);
            } else if ((expanded = presenter.expandItemActionView(this, item))) {
                break;
            }
        }
        startDispatchingItemsChanged();

        if (expanded) {
            mExpandedItem = item;
        }
        return expanded;
!!!38863927.java!!!	collapseItemActionView(inout item : MenuItemImpl) : boolean
        if (mPresenters.isEmpty() || mExpandedItem != item) return false;

        boolean collapsed = false;

        stopDispatchingItemsChanged();
        for (WeakReference<MenuPresenter> ref : mPresenters) {
            final MenuPresenter presenter = ref.get();
            if (presenter == null) {
                mPresenters.remove(ref);
            } else if ((collapsed = presenter.collapseItemActionView(this, item))) {
                break;
            }
        }
        startDispatchingItemsChanged();

        if (collapsed) {
            mExpandedItem = null;
        }
        return collapsed;
!!!38864055.java!!!	getExpandedItem() : MenuItemImpl
        return mExpandedItem;
!!!38864183.java!!!	setOverrideVisibleItems(inout override : boolean) : void
        mOverrideVisibleItems = override;
