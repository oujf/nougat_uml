class NavigationMenuPresenter
!!!38870327.java!!!	initForMenu(inout context : Context, inout menu : MenuBuilder) : void
        mLayoutInflater = LayoutInflater.from(context);
        mMenu = menu;
        Resources res = context.getResources();
        mPaddingSeparator = res.getDimensionPixelOffset(
                R.dimen.design_navigation_separator_vertical_padding);
!!!38870455.java!!!	getMenuView(inout root : ViewGroup) : MenuView
        if (mMenuView == null) {
            mMenuView = (NavigationMenuView) mLayoutInflater.inflate(
                    R.layout.design_navigation_menu, root, false);
            if (mAdapter == null) {
                mAdapter = new NavigationMenuAdapter();
            }
            mHeaderLayout = (LinearLayout) mLayoutInflater
                    .inflate(R.layout.design_navigation_item_header,
                            mMenuView, false);
            mMenuView.setAdapter(mAdapter);
        }
        return mMenuView;
!!!38870583.java!!!	updateMenuView(inout cleared : boolean) : void
        if (mAdapter != null) {
            mAdapter.update();
        }
!!!38870711.java!!!	setCallback(inout cb : MenuPresenter::Callback) : void
        mCallback = cb;
!!!38870839.java!!!	onSubMenuSelected(inout subMenu : SubMenuBuilder) : boolean
        return false;
!!!38870967.java!!!	onCloseMenu(inout menu : MenuBuilder, inout allMenusAreClosing : boolean) : void
        if (mCallback != null) {
            mCallback.onCloseMenu(menu, allMenusAreClosing);
        }
!!!38871095.java!!!	flagActionItems() : boolean
        return false;
!!!38871223.java!!!	expandItemActionView(inout menu : MenuBuilder, inout item : MenuItemImpl) : boolean
        return false;
!!!38871351.java!!!	collapseItemActionView(inout menu : MenuBuilder, inout item : MenuItemImpl) : boolean
        return false;
!!!38871479.java!!!	getId() : int
        return mId;
!!!38871607.java!!!	setId(in id : int) : void
        mId = id;
!!!38871735.java!!!	onSaveInstanceState() : Parcelable
        Bundle state = new Bundle();
        if (mMenuView != null) {
            SparseArray<Parcelable> hierarchy = new SparseArray<>();
            mMenuView.saveHierarchyState(hierarchy);
            state.putSparseParcelableArray(STATE_HIERARCHY, hierarchy);
        }
        if (mAdapter != null) {
            state.putBundle(STATE_ADAPTER, mAdapter.createInstanceState());
        }
        return state;
!!!38871863.java!!!	onRestoreInstanceState(inout parcelable : Parcelable) : void
        Bundle state = (Bundle) parcelable;
        SparseArray<Parcelable> hierarchy = state.getSparseParcelableArray(STATE_HIERARCHY);
        if (hierarchy != null) {
            mMenuView.restoreHierarchyState(hierarchy);
        }
        Bundle adapterState = state.getBundle(STATE_ADAPTER);
        if (adapterState != null) {
            mAdapter.restoreInstanceState(adapterState);
        }
!!!38871991.java!!!	setCheckedItem(inout item : MenuItemImpl) : void
        mAdapter.setCheckedItem(item);
!!!38872119.java!!!	inflateHeaderView(in res : int) : View
        View view = mLayoutInflater.inflate(res, mHeaderLayout, false);
        addHeaderView(view);
        return view;
!!!38872247.java!!!	addHeaderView(inout view : View) : void
        mHeaderLayout.addView(view);
        // The padding on top should be cleared.
        mMenuView.setPadding(0, 0, 0, mMenuView.getPaddingBottom());
!!!38872375.java!!!	removeHeaderView(inout view : View) : void
        mHeaderLayout.removeView(view);
        if (mHeaderLayout.getChildCount() == 0) {
            mMenuView.setPadding(0, mPaddingTopDefault, 0, mMenuView.getPaddingBottom());
        }
!!!38872503.java!!!	getHeaderCount() : int
        return mHeaderLayout.getChildCount();
!!!38872631.java!!!	getHeaderView(in index : int) : View
        return mHeaderLayout.getChildAt(index);
!!!38872759.java!!!	getItemTintList() : ColorStateList
        return mIconTintList;
!!!38872887.java!!!	setItemIconTintList(inout tint : ColorStateList) : void
        mIconTintList = tint;
        updateMenuView(false);
!!!38873015.java!!!	getItemTextColor() : ColorStateList
        return mTextColor;
!!!38873143.java!!!	setItemTextColor(inout textColor : ColorStateList) : void
        mTextColor = textColor;
        updateMenuView(false);
!!!38873271.java!!!	setItemTextAppearance(in resId : int) : void
        mTextAppearance = resId;
        mTextAppearanceSet = true;
        updateMenuView(false);
!!!38873399.java!!!	getItemBackground() : Drawable
        return mItemBackground;
!!!38873527.java!!!	setItemBackground(inout itemBackground : Drawable) : void
        mItemBackground = itemBackground;
        updateMenuView(false);
!!!38873655.java!!!	setUpdateSuspended(inout updateSuspended : boolean) : void
        if (mAdapter != null) {
            mAdapter.setUpdateSuspended(updateSuspended);
        }
!!!38873783.java!!!	setPaddingTopDefault(in paddingTopDefault : int) : void
        if (mPaddingTopDefault != paddingTopDefault) {
            mPaddingTopDefault = paddingTopDefault;
            if (mHeaderLayout.getChildCount() == 0) {
                mMenuView.setPadding(0, mPaddingTopDefault, 0, mMenuView.getPaddingBottom());
            }
        }
