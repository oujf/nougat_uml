class DebugInfoItem
!!!881207.java!!!	DebugInfoItem(inout code : DalvCode, inout isStatic : boolean, inout ref : CstMethodRef)
        // We don't know the write size yet.
        super (ALIGNMENT, -1);

        if (code == null) {
            throw new NullPointerException("code == null");
        }

        this.code = code;
        this.isStatic = isStatic;
        this.ref = ref;
!!!881335.java!!!	itemType() : ItemType
        return ItemType.TYPE_DEBUG_INFO_ITEM;
!!!881463.java!!!	addContents(inout file : DexFile) : void
        // No contents to add.
!!!881591.java!!!	place0(inout addedTo : Section, in offset : int) : void
        // Encode the data and note the size.

        try {
            encoded = encode(addedTo.getFile(), null, null, null, false);
            setWriteSize(encoded.length);
        } catch (RuntimeException ex) {
            throw ExceptionWithContext.withContext(ex,
                    "...while placing debug info for " + ref.toHuman());
        }
!!!881719.java!!!	toHuman() : String
        throw new RuntimeException("unsupported");
!!!881847.java!!!	annotateTo(inout file : DexFile, inout out : AnnotatedOutput, inout prefix : String) : void
        encode(file, prefix, null, out, false);
!!!881975.java!!!	debugPrint(inout out : PrintWriter, inout prefix : String) : void
        encode(null, prefix, out, null, false);
!!!882103.java!!!	writeTo0(inout file : DexFile, inout out : AnnotatedOutput) : void
        if (out.annotates()) {
            /*
             * Re-run the encoder to generate the annotations,
             * but write the bits from the original encode
             */

            out.annotate(offsetString() + " debug info");
            encode(file, null, null, out, true);
        }

        out.write(encoded);
!!!882231.java!!!	encode(inout file : DexFile, inout prefix : String, inout debugPrint : PrintWriter, inout out : AnnotatedOutput, inout consume : boolean) : byte
        byte[] result = encode0(file, prefix, debugPrint, out, consume);

        if (ENABLE_ENCODER_SELF_CHECK && (file != null)) {
            try {
                DebugInfoDecoder.validateEncode(result, file, ref, code,
                        isStatic);
            } catch (RuntimeException ex) {
                // Reconvert, annotating to System.err.
                encode0(file, "", new PrintWriter(System.err, true), null,
                        false);
                throw ex;
            }
        }

        return result;
!!!882359.java!!!	encode0(inout file : DexFile, inout prefix : String, inout debugPrint : PrintWriter, inout out : AnnotatedOutput, inout consume : boolean) : byte
        PositionList positions = code.getPositions();
        LocalList locals = code.getLocals();
        DalvInsnList insns = code.getInsns();
        int codeSize = insns.codeSize();
        int regSize = insns.getRegistersSize();

        DebugInfoEncoder encoder =
            new DebugInfoEncoder(positions, locals,
                    file, codeSize, regSize, isStatic, ref);

        byte[] result;

        if ((debugPrint == null) && (out == null)) {
            result = encoder.convert();
        } else {
            result = encoder.convertAndAnnotate(prefix, debugPrint, out,
                    consume);
        }

        return result;
