class TypeIdsSection
!!!910263.java!!!	TypeIdsSection(inout file : DexFile)
        super("type_ids", file, 4);

        typeIds = new TreeMap<Type, TypeIdItem>();
!!!910391.java!!!	items() : Collection<? extends Item>
        return typeIds.values();
!!!910519.java!!!	get(inout cst : Constant) : IndexedItem
        if (cst == null) {
            throw new NullPointerException("cst == null");
        }

        throwIfNotPrepared();

        Type type = ((CstType) cst).getClassType();
        IndexedItem result = typeIds.get(type);

        if (result == null) {
            throw new IllegalArgumentException("not found: " + cst);
        }

        return result;
!!!910647.java!!!	writeHeaderPart(inout out : AnnotatedOutput) : void
        throwIfNotPrepared();

        int sz = typeIds.size();
        int offset = (sz == 0) ? 0 : getFileOffset();

        if (sz > DexFormat.MAX_TYPE_IDX + 1) {
            throw new DexIndexOverflowException("Too many type references: " + sz +
                    "; max is " + (DexFormat.MAX_TYPE_IDX + 1) + ".\n" +
                    Main.getTooManyIdsErrorMessage());
        }

        if (out.annotates()) {
            out.annotate(4, "type_ids_size:   " + Hex.u4(sz));
            out.annotate(4, "type_ids_off:    " + Hex.u4(offset));
        }

        out.writeInt(sz);
        out.writeInt(offset);
!!!910775.java!!!	intern(inout type : Type) : TypeIdItem
        if (type == null) {
            throw new NullPointerException("type == null");
        }

        throwIfPrepared();

        TypeIdItem result = typeIds.get(type);

        if (result == null) {
            result = new TypeIdItem(new CstType(type));
            typeIds.put(type, result);
        }

        return result;
!!!910903.java!!!	intern(inout type : CstType) : TypeIdItem
        if (type == null) {
            throw new NullPointerException("type == null");
        }

        throwIfPrepared();

        Type typePerSe = type.getClassType();
        TypeIdItem result = typeIds.get(typePerSe);

        if (result == null) {
            result = new TypeIdItem(type);
            typeIds.put(typePerSe, result);
        }

        return result;
!!!911031.java!!!	indexOf(inout type : Type) : int
        if (type == null) {
            throw new NullPointerException("type == null");
        }

        throwIfNotPrepared();

        TypeIdItem item = typeIds.get(type);

        if (item == null) {
            throw new IllegalArgumentException("not found: " + type);
        }

        return item.getIndex();
!!!911159.java!!!	indexOf(inout type : CstType) : int
        if (type == null) {
            throw new NullPointerException("type == null");
        }

        return indexOf(type.getClassType());
!!!911287.java!!!	orderItems() : void
        int idx = 0;

        for (Object i : items()) {
            ((TypeIdItem) i).setIndex(idx);
            idx++;
        }
