class UniformListItem
!!!912439.java!!!	UniformListItem(inout itemType : ItemType, inout items : List<T>)
        super(getAlignment(items), writeSize(items));

        if (itemType == null) {
            throw new NullPointerException("itemType == null");
        }

        this.items = items;
        this.itemType = itemType;
!!!912567.java!!!	getAlignment(inout items : List<? extends OffsettedItem>) : int
        try {
            // Since they all must have the same alignment, any one will do.
            return Math.max(HEADER_SIZE, items.get(0).getAlignment());
        } catch (IndexOutOfBoundsException ex) {
            // Translate the exception.
            throw new IllegalArgumentException("items.size() == 0");
        } catch (NullPointerException ex) {
            // Translate the exception.
            throw new NullPointerException("items == null");
        }
!!!912695.java!!!	writeSize(inout items : List<? extends OffsettedItem>) : int
        /*
         * This class assumes all included items are the same size,
         * an assumption which is verified in place0().
         */
        OffsettedItem first = items.get(0);
        return (items.size() * first.writeSize()) + getAlignment(items);
!!!912823.java!!!	itemType() : ItemType
        return itemType;
!!!912951.java!!!	toString() : String
        StringBuffer sb = new StringBuffer(100);

        sb.append(getClass().getName());
        sb.append(items);

        return sb.toString();
!!!913079.java!!!	addContents(inout file : DexFile) : void
        for (OffsettedItem i : items) {
            i.addContents(file);
        }
!!!913207.java!!!	toHuman() : String
        StringBuffer sb = new StringBuffer(100);
        boolean first = true;

        sb.append("{");

        for (OffsettedItem i : items) {
            if (first) {
                first = false;
            } else {
                sb.append(", ");
            }
            sb.append(i.toHuman());
        }

        sb.append("}");
        return sb.toString();
!!!913335.java!!!	getItems() : List<T>
        return items;
!!!913463.java!!!	place0(inout addedTo : Section, in offset : int) : void
        offset += headerSize();

        boolean first = true;
        int theSize = -1;
        int theAlignment = -1;

        for (OffsettedItem i : items) {
            int size = i.writeSize();
            if (first) {
                theSize = size;
                theAlignment = i.getAlignment();
                first = false;
            } else {
                if (size != theSize) {
                    throw new UnsupportedOperationException(
                            "item size mismatch");
                }
                if (i.getAlignment() != theAlignment) {
                    throw new UnsupportedOperationException(
                            "item alignment mismatch");
                }
            }

            offset = i.place(addedTo, offset) + size;
        }
!!!913591.java!!!	writeTo0(inout file : DexFile, inout out : AnnotatedOutput) : void
        int size = items.size();

        if (out.annotates()) {
            out.annotate(0, offsetString() + " " + typeName());
            out.annotate(4, "  size: " + Hex.u4(size));
        }

        out.writeInt(size);

        for (OffsettedItem i : items) {
            i.writeTo(file, out);
        }
!!!913719.java!!!	headerSize() : int
        /*
         * Because of how this instance was set up, this is the same
         * as the alignment.
         */
        return getAlignment();
