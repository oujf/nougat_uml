class InstructionCodec
!!!931127.java!!!	decodeRegisterList(inout format : InstructionCodec, in opcodeUnit : int, inout in : CodeInput) : DecodedInstruction
        int opcode = byte0(opcodeUnit);
        int e = nibble2(opcodeUnit);
        int registerCount = nibble3(opcodeUnit);
        int index = in.read();
        int abcd = in.read();
        int a = nibble0(abcd);
        int b = nibble1(abcd);
        int c = nibble2(abcd);
        int d = nibble3(abcd);
        IndexType indexType = OpcodeInfo.getIndexType(opcode);

        // TODO: Having to switch like this is less than ideal.
        switch (registerCount) {
            case 0:
                return new ZeroRegisterDecodedInstruction(
                        format, opcode, index, indexType,
                        0, 0L);
            case 1:
                return new OneRegisterDecodedInstruction(
                        format, opcode, index, indexType,
                        0, 0L,
                        a);
            case 2:
                return new TwoRegisterDecodedInstruction(
                        format, opcode, index, indexType,
                        0, 0L,
                        a, b);
            case 3:
                return new ThreeRegisterDecodedInstruction(
                        format, opcode, index, indexType,
                        0, 0L,
                        a, b, c);
            case 4:
                return new FourRegisterDecodedInstruction(
                        format, opcode, index, indexType,
                        0, 0L,
                        a, b, c, d);
            case 5:
                return new FiveRegisterDecodedInstruction(
                        format, opcode, index, indexType,
                        0, 0L,
                        a, b, c, d, e);
        }

        throw new DexException("bogus registerCount: "
                + Hex.uNibble(registerCount));
!!!931255.java!!!	encodeRegisterList(inout insn : DecodedInstruction, inout out : CodeOutput) : void
        out.write(codeUnit(insn.getOpcode(),
                        makeByte(insn.getE(), insn.getRegisterCount())),
                insn.getIndexUnit(),
                codeUnit(insn.getA(), insn.getB(), insn.getC(), insn.getD()));
!!!931383.java!!!	decodeRegisterRange(inout format : InstructionCodec, in opcodeUnit : int, inout in : CodeInput) : DecodedInstruction
        int opcode = byte0(opcodeUnit);
        int registerCount = byte1(opcodeUnit);
        int index = in.read();
        int a = in.read();
        IndexType indexType = OpcodeInfo.getIndexType(opcode);
        return new RegisterRangeDecodedInstruction(
                format, opcode, index, indexType,
                0, 0L,
                a, registerCount);
!!!931511.java!!!	encodeRegisterRange(inout insn : DecodedInstruction, inout out : CodeOutput) : void
        out.write(codeUnit(insn.getOpcode(), insn.getRegisterCount()),
                insn.getIndexUnit(),
                insn.getAUnit());
!!!931639.java!!!	codeUnit(in lowByte : int, in highByte : int) : short
        if ((lowByte & ~0xff) != 0) {
            throw new IllegalArgumentException("bogus lowByte");
        }

        if ((highByte & ~0xff) != 0) {
            throw new IllegalArgumentException("bogus highByte");
        }

        return (short) (lowByte | (highByte << 8));
!!!931767.java!!!	codeUnit(in nibble0 : int, in nibble1 : int, in nibble2 : int, in nibble3 : int) : short
        if ((nibble0 & ~0xf) != 0) {
            throw new IllegalArgumentException("bogus nibble0");
        }

        if ((nibble1 & ~0xf) != 0) {
            throw new IllegalArgumentException("bogus nibble1");
        }

        if ((nibble2 & ~0xf) != 0) {
            throw new IllegalArgumentException("bogus nibble2");
        }

        if ((nibble3 & ~0xf) != 0) {
            throw new IllegalArgumentException("bogus nibble3");
        }

        return (short) (nibble0 | (nibble1 << 4)
                | (nibble2 << 8) | (nibble3 << 12));
!!!931895.java!!!	makeByte(in lowNibble : int, in highNibble : int) : int
        if ((lowNibble & ~0xf) != 0) {
            throw new IllegalArgumentException("bogus lowNibble");
        }

        if ((highNibble & ~0xf) != 0) {
            throw new IllegalArgumentException("bogus highNibble");
        }

        return lowNibble | (highNibble << 4);
!!!932023.java!!!	asUnsignedUnit(in value : int) : short
        if ((value & ~0xffff) != 0) {
            throw new IllegalArgumentException("bogus unsigned code unit");
        }

        return (short) value;
!!!932151.java!!!	unit0(in value : int) : short
        return (short) value;
!!!932279.java!!!	unit1(in value : int) : short
        return (short) (value >> 16);
!!!932407.java!!!	unit0(in value : long) : short
        return (short) value;
!!!932535.java!!!	unit1(in value : long) : short
        return (short) (value >> 16);
!!!932663.java!!!	unit2(in value : long) : short
        return (short) (value >> 32);
!!!932791.java!!!	unit3(in value : long) : short
        return (short) (value >> 48);
!!!932919.java!!!	byte0(in value : int) : int
        return value & 0xff;
!!!933047.java!!!	byte1(in value : int) : int
        return (value >> 8) & 0xff;
!!!933175.java!!!	byte2(in value : int) : int
        return (value >> 16) & 0xff;
!!!933303.java!!!	byte3(in value : int) : int
        return value >>> 24;
!!!933431.java!!!	nibble0(in value : int) : int
        return value & 0xf;
!!!933559.java!!!	nibble1(in value : int) : int
        return (value >> 4) & 0xf;
!!!933687.java!!!	nibble2(in value : int) : int
        return (value >> 8) & 0xf;
!!!933815.java!!!	nibble3(in value : int) : int
        return (value >> 12) & 0xf;
