class AccessFlags
!!!957623.java!!!	AccessFlags()
        // This space intentionally left blank.
!!!957751.java!!!	classString(in flags : int) : String
        return humanHelper(flags, CLASS_FLAGS, CONV_CLASS);
!!!957879.java!!!	innerClassString(in flags : int) : String
        return humanHelper(flags, INNER_CLASS_FLAGS, CONV_CLASS);
!!!958007.java!!!	fieldString(in flags : int) : String
        return humanHelper(flags, FIELD_FLAGS, CONV_FIELD);
!!!958135.java!!!	methodString(in flags : int) : String
        return humanHelper(flags, METHOD_FLAGS, CONV_METHOD);
!!!958263.java!!!	isPublic(in flags : int) : boolean
        return (flags & ACC_PUBLIC) != 0;
!!!958391.java!!!	isProtected(in flags : int) : boolean
        return (flags & ACC_PROTECTED) != 0;
!!!958519.java!!!	isPrivate(in flags : int) : boolean
        return (flags & ACC_PRIVATE) != 0;
!!!958647.java!!!	isStatic(in flags : int) : boolean
        return (flags & ACC_STATIC) != 0;
!!!958775.java!!!	isConstructor(in flags : int) : boolean
        return (flags & ACC_CONSTRUCTOR) != 0;
!!!958903.java!!!	isInterface(in flags : int) : boolean
        return (flags & ACC_INTERFACE) != 0;
!!!959031.java!!!	isSynchronized(in flags : int) : boolean
        return (flags & ACC_SYNCHRONIZED) != 0;
!!!959159.java!!!	isAbstract(in flags : int) : boolean
        return (flags & ACC_ABSTRACT) != 0;
!!!959287.java!!!	isNative(in flags : int) : boolean
        return (flags & ACC_NATIVE) != 0;
!!!959415.java!!!	isAnnotation(in flags : int) : boolean
        return (flags & ACC_ANNOTATION) != 0;
!!!959543.java!!!	isDeclaredSynchronized(in flags : int) : boolean
        return (flags & ACC_DECLARED_SYNCHRONIZED) != 0;
!!!959671.java!!!	isEnum(in flags : int) : boolean
        return (flags & ACC_ENUM) != 0;
!!!959799.java!!!	humanHelper(in flags : int, in mask : int, in what : int) : String
        StringBuffer sb = new StringBuffer(80);
        int extra = flags & ~mask;

        flags &= mask;

        if ((flags & ACC_PUBLIC) != 0) {
            sb.append("|public");
        }
        if ((flags & ACC_PRIVATE) != 0) {
            sb.append("|private");
        }
        if ((flags & ACC_PROTECTED) != 0) {
            sb.append("|protected");
        }
        if ((flags & ACC_STATIC) != 0) {
            sb.append("|static");
        }
        if ((flags & ACC_FINAL) != 0) {
            sb.append("|final");
        }
        if ((flags & ACC_SYNCHRONIZED) != 0) {
            if (what == CONV_CLASS) {
                sb.append("|super");
            } else {
                sb.append("|synchronized");
            }
        }
        if ((flags & ACC_VOLATILE) != 0) {
            if (what == CONV_METHOD) {
                sb.append("|bridge");
            } else {
                sb.append("|volatile");
            }
        }
        if ((flags & ACC_TRANSIENT) != 0) {
            if (what == CONV_METHOD) {
                sb.append("|varargs");
            } else {
                sb.append("|transient");
            }
        }
        if ((flags & ACC_NATIVE) != 0) {
            sb.append("|native");
        }
        if ((flags & ACC_INTERFACE) != 0) {
            sb.append("|interface");
        }
        if ((flags & ACC_ABSTRACT) != 0) {
            sb.append("|abstract");
        }
        if ((flags & ACC_STRICT) != 0) {
            sb.append("|strictfp");
        }
        if ((flags & ACC_SYNTHETIC) != 0) {
            sb.append("|synthetic");
        }
        if ((flags & ACC_ANNOTATION) != 0) {
            sb.append("|annotation");
        }
        if ((flags & ACC_ENUM) != 0) {
            sb.append("|enum");
        }
        if ((flags & ACC_CONSTRUCTOR) != 0) {
            sb.append("|constructor");
        }
        if ((flags & ACC_DECLARED_SYNCHRONIZED) != 0) {
            sb.append("|declared_synchronized");
        }

        if ((extra != 0) || (sb.length() == 0)) {
            sb.append('|');
            sb.append(Hex.u2(extra));
        }

        return sb.substring(1);
