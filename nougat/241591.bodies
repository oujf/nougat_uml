class SsaMethod
!!!1065783.java!!!	newFromRopMethod(inout ropMethod : RopMethod, in paramWidth : int, inout isStatic : boolean) : SsaMethod
        SsaMethod result = new SsaMethod(ropMethod, paramWidth, isStatic);

        result.convertRopToSsaBlocks(ropMethod);

        return result;
!!!1065911.java!!!	SsaMethod(inout ropMethod : RopMethod, in paramWidth : int, inout isStatic : boolean)
        this.paramWidth = paramWidth;
        this.isStatic = isStatic;
        this.backMode = false;
        this.maxLabel = ropMethod.getBlocks().getMaxLabel();
        this.registerCount = ropMethod.getBlocks().getRegCount();
        this.spareRegisterBase = registerCount;
!!!1066039.java!!!	bitSetFromLabelList(inout blocks : BasicBlockList, inout labelList : IntList) : BitSet
        BitSet result = new BitSet(blocks.size());

        for (int i = 0, sz = labelList.size(); i < sz; i++) {
            result.set(blocks.indexOfLabel(labelList.get(i)));
        }

        return result;
!!!1066167.java!!!	indexListFromLabelList(inout ropBlocks : BasicBlockList, inout labelList : IntList) : IntList

        IntList result = new IntList(labelList.size());

        for (int i = 0, sz = labelList.size(); i < sz; i++) {
            result.add(ropBlocks.indexOfLabel(labelList.get(i)));
        }

        return result;
!!!1066295.java!!!	convertRopToSsaBlocks(inout rmeth : RopMethod) : void
        BasicBlockList ropBlocks = rmeth.getBlocks();
        int sz = ropBlocks.size();

        blocks = new ArrayList<SsaBasicBlock>(sz + 2);

        for (int i = 0; i < sz; i++) {
            SsaBasicBlock sbb = SsaBasicBlock.newFromRop(rmeth, i, this);
            blocks.add(sbb);
        }

        // Add an no-op entry block.
        int origEntryBlockIndex = rmeth.getBlocks()
                .indexOfLabel(rmeth.getFirstLabel());

        SsaBasicBlock entryBlock
                = blocks.get(origEntryBlockIndex).insertNewPredecessor();

        entryBlockIndex = entryBlock.getIndex();
        exitBlockIndex = -1; // This gets made later.
!!!1066423.java!!!	makeExitBlock() : void
        if (exitBlockIndex >= 0) {
            throw new RuntimeException("must be called at most once");
        }

        exitBlockIndex = blocks.size();
        SsaBasicBlock exitBlock
                = new SsaBasicBlock(exitBlockIndex, maxLabel++, this);

        blocks.add(exitBlock);

        for (SsaBasicBlock block : blocks) {
            block.exitBlockFixup(exitBlock);
        }

        if (exitBlock.getPredecessors().cardinality() == 0) {
            // In cases where there is no exit...
            blocks.remove(exitBlockIndex);
            exitBlockIndex = -1;
            maxLabel--;
        }
!!!1066551.java!!!	getGoto(inout block : SsaBasicBlock) : SsaInsn
        return new NormalSsaInsn (
                new PlainInsn(Rops.GOTO, SourcePosition.NO_INFO,
                    null, RegisterSpecList.EMPTY), block);
!!!1066679.java!!!	makeNewGotoBlock() : SsaBasicBlock
        int newIndex = blocks.size();
        SsaBasicBlock newBlock = new SsaBasicBlock(newIndex, maxLabel++, this);

        newBlock.getInsns().add(getGoto(newBlock));
        blocks.add(newBlock);

        return newBlock;
!!!1066807.java!!!	getEntryBlockIndex() : int
        return entryBlockIndex;
!!!1066935.java!!!	getEntryBlock() : SsaBasicBlock
        return blocks.get(entryBlockIndex);
!!!1067063.java!!!	getExitBlockIndex() : int
        return exitBlockIndex;
!!!1067191.java!!!	getExitBlock() : SsaBasicBlock
        return exitBlockIndex < 0 ? null : blocks.get(exitBlockIndex);
!!!1067319.java!!!	blockIndexToRopLabel(in bi : int) : int
        if (bi < 0) {
            return -1;
        }
        return blocks.get(bi).getRopLabel();
!!!1067447.java!!!	getRegCount() : int
        return registerCount;
!!!1067575.java!!!	getParamWidth() : int
        return paramWidth;
!!!1067703.java!!!	isStatic() : boolean
        return isStatic;
!!!1067831.java!!!	borrowSpareRegister(in category : int) : int
        int result = spareRegisterBase + borrowedSpareRegisters;

        borrowedSpareRegisters += category;
        registerCount = Math.max(registerCount, result + category);

        return result;
!!!1067959.java!!!	returnSpareRegisters() : void
        borrowedSpareRegisters = 0;
!!!1068087.java!!!	getBlocks() : SsaBasicBlock
        return blocks;
!!!1068215.java!!!	getCountReachableBlocks() : int
        int ret = 0;

        for (SsaBasicBlock b : blocks) {
            // Blocks that have been disconnected don't count.
            if (b.isReachable()) {
                ret++;
            }
        }

        return ret;
!!!1068343.java!!!	computeReachability() : void
        for (SsaBasicBlock block : blocks) {
            block.setReachable(0);
        }

        ArrayList<SsaBasicBlock> blockList = new ArrayList<SsaBasicBlock>();
        blockList.add(this.getEntryBlock());

        while (!blockList.isEmpty()) {
            SsaBasicBlock block = blockList.remove(0);
            if (block.isReachable()) continue;

            block.setReachable(1);
            BitSet succs = block.getSuccessors();
            for (int i = succs.nextSetBit(0); i >= 0;
                     i = succs.nextSetBit(i + 1)) {
                blockList.add(blocks.get(i));
            }
        }
!!!1068471.java!!!	mapRegisters(inout mapper : RegisterMapper) : void
        for (SsaBasicBlock block : getBlocks()) {
            for (SsaInsn insn : block.getInsns()) {
                insn.mapRegisters(mapper);
            }
        }

        registerCount = mapper.getNewRegisterCount();
        spareRegisterBase = registerCount;
!!!1068599.java!!!	getDefinitionForRegister(in reg : int) : SsaInsn
        if (backMode) {
            throw new RuntimeException("No def list in back mode");
        }

        if (definitionList != null) {
            return definitionList[reg];
        }

        definitionList = new SsaInsn[getRegCount()];

        forEachInsn(new SsaInsn.Visitor() {
            public void visitMoveInsn (NormalSsaInsn insn) {
                definitionList[insn.getResult().getReg()] = insn;
            }
            public void visitPhiInsn (PhiInsn phi) {
                definitionList[phi.getResult().getReg()] = phi;
            }
            public void visitNonMoveInsn (NormalSsaInsn insn) {
                RegisterSpec result = insn.getResult();
                if (result != null) {
                    definitionList[insn.getResult().getReg()] = insn;
                }
            }
        });

        return definitionList[reg];
!!!1068727.java!!!	buildUseList() : void
        if (backMode) {
            throw new RuntimeException("No use list in back mode");
        }

        useList = new ArrayList[registerCount];

        for (int i = 0; i < registerCount; i++) {
            useList[i] = new ArrayList();
        }

        forEachInsn(new SsaInsn.Visitor() {
            /** {@inheritDoc} */
            public void visitMoveInsn (NormalSsaInsn insn) {
                addToUses(insn);
            }
            /** {@inheritDoc} */
            public void visitPhiInsn (PhiInsn phi) {
                addToUses(phi);
            }
            /** {@inheritDoc} */
            public void visitNonMoveInsn (NormalSsaInsn insn) {
                addToUses(insn);
            }
            /**
             * Adds specified insn to the uses list for all of its sources.
             * @param insn {@code non-null;} insn to process
             */
            private void addToUses(SsaInsn insn) {
                RegisterSpecList rl = insn.getSources();
                int sz = rl.size();

                for (int i = 0; i < sz; i++) {
                    useList[rl.get(i).getReg()].add(insn);
                }
            }
        });

        unmodifiableUseList = new List[registerCount];

        for (int i = 0; i < registerCount; i++) {
            unmodifiableUseList[i] = Collections.unmodifiableList(useList[i]);
        }
!!!1068855.java!!!	onSourceChanged(inout insn : SsaInsn, inout oldSource : RegisterSpec, inout newSource : RegisterSpec) : void
        if (useList == null) return;

        if (oldSource != null) {
            int reg = oldSource.getReg();
            useList[reg].remove(insn);
        }

        int reg = newSource.getReg();
        if (useList.length <= reg) {
            useList = null;
            return;
        }
        useList[reg].add(insn);
!!!1068983.java!!!	onSourcesChanged(inout insn : SsaInsn, inout oldSources : RegisterSpecList) : void
        if (useList == null) return;

        if (oldSources != null) {
            removeFromUseList(insn, oldSources);
        }

        RegisterSpecList sources = insn.getSources();
        int szNew = sources.size();

        for (int i = 0; i < szNew; i++) {
            int reg = sources.get(i).getReg();
            useList[reg].add(insn);
        }
!!!1069111.java!!!	removeFromUseList(inout insn : SsaInsn, inout oldSources : RegisterSpecList) : void
        if (oldSources == null) {
            return;
        }

        int szNew = oldSources.size();
        for (int i = 0; i < szNew; i++) {
            if (!useList[oldSources.get(i).getReg()].remove(insn)) {
                throw new RuntimeException("use not found");
            }
        }
!!!1069239.java!!!	onInsnAdded(inout insn : SsaInsn) : void
        onSourcesChanged(insn, null);
        updateOneDefinition(insn, null);
!!!1069367.java!!!	onInsnRemoved(inout insn : SsaInsn) : void
        if (useList != null) {
            removeFromUseList(insn, insn.getSources());
        }

        RegisterSpec resultReg = insn.getResult();
        if (definitionList != null && resultReg != null) {
            definitionList[resultReg.getReg()] = null;
        }
!!!1069495.java!!!	onInsnsChanged() : void
        // Definition list will need to be recomputed
        definitionList = null;

        // Use list will need to be recomputed
        useList = null;
        unmodifiableUseList = null;
!!!1069623.java!!!	updateOneDefinition(inout insn : SsaInsn, inout oldResult : RegisterSpec) : void
        if (definitionList == null) return;

        if (oldResult != null) {
            int reg = oldResult.getReg();
            definitionList[reg] = null;
        }

        RegisterSpec resultReg = insn.getResult();

        if (resultReg != null) {
            int reg = resultReg.getReg();

            if (definitionList[reg] != null) {
                throw new RuntimeException("Duplicate add of insn");
            } else {
                definitionList[resultReg.getReg()] = insn;
            }
        }
!!!1069751.java!!!	getUseListForRegister(in reg : int) : SsaInsn

        if (unmodifiableUseList == null) {
            buildUseList();
        }

        return unmodifiableUseList[reg];
!!!1069879.java!!!	getUseListCopy() : SsaInsn
        if (useList == null) {
            buildUseList();
        }

        ArrayList<SsaInsn>[] useListCopy
                = (ArrayList<SsaInsn>[])(new ArrayList[registerCount]);

        for (int i = 0; i < registerCount; i++) {
            useListCopy[i] = (ArrayList<SsaInsn>)(new ArrayList(useList[i]));
        }

        return useListCopy;
!!!1070007.java!!!	isRegALocal(inout spec : RegisterSpec) : boolean
        SsaInsn defn = getDefinitionForRegister(spec.getReg());

        if (defn == null) {
            // version 0 registers are never used as locals
            return false;
        }

        // Does the definition have a local associated with it?
        if (defn.getLocalAssignment() != null) return true;

        // If not, is there a mark-local insn?
        for (SsaInsn use : getUseListForRegister(spec.getReg())) {
            Insn insn = use.getOriginalRopInsn();

            if (insn != null
                    && insn.getOpcode().getOpcode() == RegOps.MARK_LOCAL) {
                return true;
            }
        }

        return false;
!!!1070135.java!!!	setNewRegCount(in newRegCount : int) : void
        registerCount = newRegCount;
        spareRegisterBase = registerCount;
        onInsnsChanged();
!!!1070263.java!!!	makeNewSsaReg() : int
        int reg = registerCount++;
        spareRegisterBase = registerCount;
        onInsnsChanged();
        return reg;
!!!1070391.java!!!	forEachInsn(inout visitor : SsaInsn::Visitor) : void
        for (SsaBasicBlock block : blocks) {
            block.forEachInsn(visitor);
        }
!!!1070519.java!!!	forEachPhiInsn(inout v : PhiInsn::Visitor) : void
        for (SsaBasicBlock block : blocks) {
            block.forEachPhiInsn(v);
        }
!!!1070647.java!!!	forEachBlockDepthFirst(inout reverse : boolean, inout v : SsaBasicBlock::Visitor) : void
        BitSet visited = new BitSet(blocks.size());

        // We push the parent first, then the child on the stack.
        Stack<SsaBasicBlock> stack = new Stack<SsaBasicBlock>();

        SsaBasicBlock rootBlock = reverse ? getExitBlock() : getEntryBlock();

        if (rootBlock == null) {
            // in the case there's no exit block
            return;
        }

        stack.add(null);    // Start with null parent.
        stack.add(rootBlock);

        while (stack.size() > 0) {
            SsaBasicBlock cur = stack.pop();
            SsaBasicBlock parent = stack.pop();

            if (!visited.get(cur.getIndex())) {
                BitSet children
                    = reverse ? cur.getPredecessors() : cur.getSuccessors();
                for (int i = children.nextSetBit(0); i >= 0
                        ; i = children.nextSetBit(i + 1)) {
                    stack.add(cur);
                    stack.add(blocks.get(i));
                }
                visited.set(cur.getIndex());
                v.visitBlock(cur, parent);
            }
        }
!!!1070775.java!!!	forEachBlockDepthFirstDom(inout v : SsaBasicBlock::Visitor) : void
        BitSet visited = new BitSet(getBlocks().size());
        Stack<SsaBasicBlock> stack = new Stack<SsaBasicBlock>();

        stack.add(getEntryBlock());

        while (stack.size() > 0) {
            SsaBasicBlock cur = stack.pop();
            ArrayList<SsaBasicBlock> curDomChildren = cur.getDomChildren();

            if (!visited.get(cur.getIndex())) {
                // We walk the tree this way for historical reasons...
                for (int i = curDomChildren.size() - 1; i >= 0; i--) {
                    SsaBasicBlock child = curDomChildren.get(i);
                    stack.add(child);
                }
                visited.set(cur.getIndex());
                v.visitBlock(cur, null);
            }
        }
!!!1070903.java!!!	deleteInsns(inout deletedInsns : Set<SsaInsn>) : void
        for (SsaBasicBlock block : getBlocks()) {
            ArrayList<SsaInsn> insns = block.getInsns();

            for (int i = insns.size() - 1; i >= 0; i--) {
                SsaInsn insn = insns.get(i);

                if (deletedInsns.contains(insn)) {
                    onInsnRemoved(insn);
                    insns.remove(i);
                }
            }

            // Check to see if we need to add a GOTO

            int insnsSz = insns.size();
            SsaInsn lastInsn = (insnsSz == 0) ? null : insns.get(insnsSz - 1);

            if (block != getExitBlock() && (insnsSz == 0
                    || lastInsn.getOriginalRopInsn() == null
                    || lastInsn.getOriginalRopInsn().getOpcode()
                        .getBranchingness() == Rop.BRANCH_NONE)) {
                // We managed to eat a throwable insn

                Insn gotoInsn = new PlainInsn(Rops.GOTO,
                        SourcePosition.NO_INFO, null, RegisterSpecList.EMPTY);
                insns.add(SsaInsn.makeFromRop(gotoInsn, block));

                // Remove secondary successors from this block
                BitSet succs = block.getSuccessors();
                for (int i = succs.nextSetBit(0); i >= 0;
                         i = succs.nextSetBit(i + 1)) {
                    if (i != block.getPrimarySuccessorIndex()) {
                        block.removeSuccessor(i);
                    }
                }
            }
        }
!!!1071031.java!!!	setBackMode() : void
        backMode = true;
        useList = null;
        definitionList = null;
