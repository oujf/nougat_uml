class NormalSsaInsn
!!!1054647.java!!!	NormalSsaInsn(in insn : Insn, in block : SsaBasicBlock)
        super(insn.getResult(), block);
        this.insn = insn;
!!!1054775.java!!!	mapSourceRegisters(inout mapper : RegisterMapper) : void
        RegisterSpecList oldSources = insn.getSources();
        RegisterSpecList newSources = mapper.map(oldSources);

        if (newSources != oldSources) {
            insn = insn.withNewRegisters(getResult(), newSources);
            getBlock().getParent().onSourcesChanged(this, oldSources);
        }
!!!1054903.java!!!	changeOneSource(in index : int, inout newSpec : RegisterSpec) : void
        RegisterSpecList origSources = insn.getSources();
        int sz = origSources.size();
        RegisterSpecList newSources = new RegisterSpecList(sz);

        for (int i = 0; i < sz; i++) {
            newSources.set(i, i == index ? newSpec : origSources.get(i));
        }

        newSources.setImmutable();

        RegisterSpec origSpec = origSources.get(index);
        if (origSpec.getReg() != newSpec.getReg()) {
            /*
             * If the register remains unchanged, we're only changing
             * the type or local var name so don't update use list
             */
            getBlock().getParent().onSourceChanged(this, origSpec, newSpec);
        }

        insn = insn.withNewRegisters(getResult(), newSources);
!!!1055031.java!!!	setNewSources(inout newSources : RegisterSpecList) : void
        RegisterSpecList origSources = insn.getSources();

        if (origSources.size() != newSources.size()) {
            throw new RuntimeException("Sources counts don't match");
        }

        insn = insn.withNewRegisters(getResult(), newSources);
!!!1055159.java!!!	clone() : NormalSsaInsn
        return (NormalSsaInsn) super.clone();
!!!1055287.java!!!	getSources() : RegisterSpecList
        return insn.getSources();
!!!1055415.java!!!	toHuman() : String
        return toRopInsn().toHuman();
!!!1055543.java!!!	toRopInsn() : Insn
        return insn.withNewRegisters(getResult(), insn.getSources());
!!!1055671.java!!!	getOpcode() : Rop
        return insn.getOpcode();
!!!1055799.java!!!	getOriginalRopInsn() : Insn
        return insn;
!!!1055927.java!!!	getLocalAssignment() : RegisterSpec
        RegisterSpec assignment;

        if (insn.getOpcode().getOpcode() == RegOps.MARK_LOCAL) {
            assignment = insn.getSources().get(0);
        } else {
            assignment = getResult();
        }

        if (assignment == null) {
            return null;
        }

        LocalItem local = assignment.getLocalItem();

        if (local == null) {
            return null;
        }

        return assignment;
!!!1056055.java!!!	upgradeToLiteral() : void
        RegisterSpecList oldSources = insn.getSources();

        insn = insn.withSourceLiteral();
        getBlock().getParent().onSourcesChanged(this, oldSources);
!!!1056183.java!!!	isNormalMoveInsn() : boolean
        return insn.getOpcode().getOpcode() == RegOps.MOVE;
!!!1056311.java!!!	isMoveException() : boolean
        return insn.getOpcode().getOpcode() == RegOps.MOVE_EXCEPTION;
!!!1056439.java!!!	canThrow() : boolean
        return insn.canThrow();
!!!1056567.java!!!	accept(inout v : SsaInsn::Visitor) : void
        if (isNormalMoveInsn()) {
            v.visitMoveInsn(this);
        } else {
            v.visitNonMoveInsn(this);
        }
!!!1056695.java!!!	isPhiOrMove() : boolean
        return isNormalMoveInsn();
!!!1056823.java!!!	hasSideEffect() : boolean
        Rop opcode = getOpcode();

        if (opcode.getBranchingness() != Rop.BRANCH_NONE) {
            return true;
        }

        boolean hasLocalSideEffect
            = Optimizer.getPreserveLocals() && getLocalAssignment() != null;

        switch (opcode.getOpcode()) {
            case RegOps.MOVE_RESULT:
            case RegOps.MOVE:
            case RegOps.CONST:
                return hasLocalSideEffect;
            default:
                return true;
        }
