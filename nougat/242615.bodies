class PhiInsn
!!!1058359.java!!!	PhiInsn(inout resultReg : RegisterSpec, inout block : SsaBasicBlock)
        super(resultReg, block);
        ropResultReg = resultReg.getReg();
!!!1058487.java!!!	PhiInsn(in resultReg : int, in block : SsaBasicBlock)
        /*
         * The result type here is bogus: The type depends on the
         * operand and will be derived later.
         */
        super(RegisterSpec.make(resultReg, Type.VOID), block);
        ropResultReg = resultReg;
!!!1058615.java!!!	clone() : PhiInsn
        throw new UnsupportedOperationException("can't clone phi");
!!!1058743.java!!!	updateSourcesToDefinitions(inout ssaMeth : SsaMethod) : void
        for (Operand o : operands) {
            RegisterSpec def
                = ssaMeth.getDefinitionForRegister(
                    o.regSpec.getReg()).getResult();

            o.regSpec = o.regSpec.withType(def.getType());
        }

        sources = null;
!!!1058871.java!!!	changeResultType(inout type : TypeBearer, inout local : LocalItem) : void
        setResult(RegisterSpec.makeLocalOptional(
                          getResult().getReg(), type, local));
!!!1058999.java!!!	getRopResultReg() : int
        return ropResultReg;
!!!1059127.java!!!	addPhiOperand(inout registerSpec : RegisterSpec, inout predBlock : SsaBasicBlock) : void
        operands.add(new Operand(registerSpec, predBlock.getIndex(),
                predBlock.getRopLabel()));

        // Un-cache sources, in case someone has already called getSources().
        sources = null;
!!!1059255.java!!!	removePhiRegister(inout registerSpec : RegisterSpec) : void
        ArrayList<Operand> operandsToRemove = new ArrayList<Operand>();
        for (Operand o : operands) {
            if (o.regSpec.getReg() == registerSpec.getReg()) {
                operandsToRemove.add(o);
            }
        }

        operands.removeAll(operandsToRemove);

        // Un-cache sources, in case someone has already called getSources().
        sources = null;
!!!1059383.java!!!	predBlockIndexForSourcesIndex(in sourcesIndex : int) : int
        return operands.get(sourcesIndex).blockIndex;
!!!1059511.java!!!	getOpcode() : Rop
        return null;
!!!1059639.java!!!	getOriginalRopInsn() : Insn
        return null;
!!!1059767.java!!!	canThrow() : boolean
        return false;
!!!1059895.java!!!	getSources() : RegisterSpecList
        if (sources != null) {
            return sources;
        }

        if (operands.size() == 0) {
            // How'd this happen? A phi insn with no operand?
            return RegisterSpecList.EMPTY;
        }

        int szSources = operands.size();
        sources = new RegisterSpecList(szSources);

        for (int i = 0; i < szSources; i++) {
            Operand o = operands.get(i);

            sources.set(i, o.regSpec);
        }

        sources.setImmutable();
        return sources;
!!!1060023.java!!!	isRegASource(in reg : int) : boolean
        /*
         * Avoid creating a sources list in case it has not already been
         * created.
         */

        for (Operand o : operands) {
            if (o.regSpec.getReg() == reg) {
                return true;
            }
        }

        return false;
!!!1060151.java!!!	areAllOperandsEqual() : boolean
        if (operands.size() == 0 ) {
            // This should never happen.
            return true;
        }

        int firstReg = operands.get(0).regSpec.getReg();
        for (Operand o : operands) {
            if (firstReg != o.regSpec.getReg()) {
                return false;
            }
        }

        return true;
!!!1060279.java!!!	mapSourceRegisters(inout mapper : RegisterMapper) : void
        for (Operand o : operands) {
            RegisterSpec old = o.regSpec;
            o.regSpec = mapper.map(old);
            if (old != o.regSpec) {
                getBlock().getParent().onSourceChanged(this, old, o.regSpec);
            }
        }
        sources = null;
!!!1060407.java!!!	toRopInsn() : Insn
        throw new IllegalArgumentException(
                "Cannot convert phi insns to rop form");
!!!1060535.java!!!	predBlocksForReg(in reg : int, inout ssaMeth : SsaMethod) : SsaBasicBlock
        ArrayList<SsaBasicBlock> ret = new ArrayList<SsaBasicBlock>();

        for (Operand o : operands) {
            if (o.regSpec.getReg() == reg) {
                ret.add(ssaMeth.getBlocks().get(o.blockIndex));
            }
        }

        return ret;
!!!1060663.java!!!	isPhiOrMove() : boolean
        return true;
!!!1060791.java!!!	hasSideEffect() : boolean
        return Optimizer.getPreserveLocals() && getLocalAssignment() != null;
!!!1060919.java!!!	accept(inout v : SsaInsn::Visitor) : void
        v.visitPhiInsn(this);
!!!1061047.java!!!	toHuman() : String
        return toHumanWithInline(null);
!!!1061175.java!!!	toHumanWithInline(inout extra : String) : String
        StringBuffer sb = new StringBuffer(80);

        sb.append(SourcePosition.NO_INFO);
        sb.append(": phi");

        if (extra != null) {
            sb.append("(");
            sb.append(extra);
            sb.append(")");
        }

        RegisterSpec result = getResult();

        if (result == null) {
            sb.append(" .");
        } else {
            sb.append(" ");
            sb.append(result.toHuman());
        }

        sb.append(" <-");

        int sz = getSources().size();
        if (sz == 0) {
            sb.append(" .");
        } else {
            for (int i = 0; i < sz; i++) {
                sb.append(" ");
                sb.append(sources.get(i).toHuman()
                        + "[b="
                        + Hex.u2(operands.get(i).ropLabel)  + "]");
            }
        }

        return sb.toString();
