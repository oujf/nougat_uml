class InterferenceRegisterMapper
!!!1050679.java!!!	InterferenceRegisterMapper(inout oldRegInterference : InterferenceGraph, in countOldRegisters : int)
        super(countOldRegisters);

        newRegInterference = new ArrayList<BitIntSet>();
        this.oldRegInterference = oldRegInterference;
!!!1050807.java!!!	addMapping(in oldReg : int, in newReg : int, in category : int) : void
        super.addMapping(oldReg, newReg, category);

        addInterfence(newReg, oldReg);

        if (category == 2) {
            addInterfence(newReg + 1, oldReg);
        }
!!!1050935.java!!!	interferes(in oldReg : int, in newReg : int, in category : int) : boolean
        if (newReg >= newRegInterference.size()) {
            return false;
        } else {
            IntSet existing = newRegInterference.get(newReg);

            if (existing == null) {
                return false;
            } else if (category == 1) {
                return existing.has(oldReg);
            } else {
                return existing.has(oldReg)
                        || (interferes(oldReg, newReg+1, category-1));
            }
        }
!!!1051063.java!!!	interferes(inout oldSpec : RegisterSpec, in newReg : int) : boolean
        return interferes(oldSpec.getReg(), newReg, oldSpec.getCategory());
!!!1051191.java!!!	addInterfence(in newReg : int, in oldReg : int) : void
        newRegInterference.ensureCapacity(newReg + 1);

        while (newReg >= newRegInterference.size()) {
            newRegInterference.add(new BitIntSet(newReg +1));
        }

        oldRegInterference.mergeInterferenceSet(
                oldReg, newRegInterference.get(newReg));
!!!1051319.java!!!	areAnyPinned(inout oldSpecs : RegisterSpecList, in newReg : int, in targetCategory : int) : boolean
        int sz = oldSpecs.size();

        for (int i = 0; i < sz; i++) {
            RegisterSpec oldSpec = oldSpecs.get(i);
            int r = oldToNew(oldSpec.getReg());

            /*
             * If oldSpec is a category-2 register, then check both newReg
             * and newReg - 1.
             */
            if (r == newReg
                || (oldSpec.getCategory() == 2 && (r + 1) == newReg)
                || (targetCategory == 2 && (r == newReg + 1))) {
                return true;
            }
        }

        return false;
