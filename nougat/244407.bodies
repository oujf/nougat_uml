class BitIntSet
!!!1087671.java!!!	BitIntSet(in max : int)
        bits = Bits.makeBitSet(max);
!!!1087799.java!!!	add(in value : int) : void
        ensureCapacity(value);
        Bits.set(bits, value, true);
!!!1087927.java!!!	ensureCapacity(in value : int) : void
        if (value >= Bits.getMax(bits)) {
            int[] newBits = Bits.makeBitSet(
                    Math.max(value + 1, 2 * Bits.getMax(bits)));
            System.arraycopy(bits, 0, newBits, 0, bits.length);
            bits = newBits;
        }
!!!1088055.java!!!	remove(in value : int) : void
        if (value < Bits.getMax(bits)) {
            Bits.set(bits, value, false);
        }
!!!1088183.java!!!	has(in value : int) : boolean
        return (value < Bits.getMax(bits)) && Bits.get(bits, value);
!!!1088311.java!!!	merge(inout other : IntSet) : void
        if (other instanceof BitIntSet) {
            BitIntSet o = (BitIntSet) other;
            ensureCapacity(Bits.getMax(o.bits) + 1);
            Bits.or(bits, o.bits);
        } else if (other instanceof ListIntSet) {
            ListIntSet o = (ListIntSet) other;
            int sz = o.ints.size();

            if (sz > 0) {
                ensureCapacity(o.ints.get(sz - 1));
            }
            for (int i = 0; i < o.ints.size(); i++) {
                Bits.set(bits, o.ints.get(i), true);
            }
        } else {
            IntIterator iter = other.iterator();
            while (iter.hasNext()) {
                add(iter.next());
            }
        }
!!!1088439.java!!!	elements() : int
        return Bits.bitCount(bits);
!!!1088567.java!!!	iterator() : IntIterator
        return new IntIterator() {
            private int idx = Bits.findFirst(bits, 0);

            /** @inheritDoc */
            public boolean hasNext() {
                return idx >= 0;
            }

            /** @inheritDoc */
            public int next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }

                int ret = idx;

                idx = Bits.findFirst(bits, idx+1);

                return ret;
            }
        };
!!!1088695.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();

        sb.append('{');

        boolean first = true;
        for (int i = Bits.findFirst(bits, 0)
                ; i >= 0
                ; i = Bits.findFirst(bits, i + 1)) {
            if (!first) {
                sb.append(", ");
            }
            first = false;
            sb.append(i);
        }

        sb.append('}');

        return sb.toString();
