class Optimizer
!!!1056951.java!!!	getPreserveLocals() : boolean
        return preserveLocals;
!!!1057079.java!!!	getAdvice() : TranslationAdvice
        return advice;
!!!1057207.java!!!	optimize(inout rmeth : RopMethod, in paramWidth : int, inout isStatic : boolean, inout inPreserveLocals : boolean, inout inAdvice : TranslationAdvice) : RopMethod

        return optimize(rmeth, paramWidth, isStatic, inPreserveLocals, inAdvice,
                EnumSet.allOf(OptionalStep.class));
!!!1057335.java!!!	optimize(inout rmeth : RopMethod, in paramWidth : int, inout isStatic : boolean, inout inPreserveLocals : boolean, inout inAdvice : TranslationAdvice, inout steps : EnumSet<OptionalStep>) : RopMethod
        SsaMethod ssaMeth = null;

        preserveLocals = inPreserveLocals;
        advice = inAdvice;

        ssaMeth = SsaConverter.convertToSsaMethod(rmeth, paramWidth, isStatic);
        runSsaFormSteps(ssaMeth, steps);

        RopMethod resultMeth = SsaToRop.convertToRopMethod(ssaMeth, false);

        if (resultMeth.getBlocks().getRegCount()
                > advice.getMaxOptimalRegisterCount()) {
            // Try to see if we can squeeze it under the register count bar
            resultMeth = optimizeMinimizeRegisters(rmeth, paramWidth, isStatic,
                    steps);
        }
        return resultMeth;
!!!1057463.java!!!	optimizeMinimizeRegisters(inout rmeth : RopMethod, in paramWidth : int, inout isStatic : boolean, inout steps : EnumSet<OptionalStep>) : RopMethod
        SsaMethod ssaMeth;
        RopMethod resultMeth;

        ssaMeth = SsaConverter.convertToSsaMethod(
                rmeth, paramWidth, isStatic);

        EnumSet<OptionalStep> newSteps = steps.clone();

        /*
         * CONST_COLLECTOR trades insns for registers, which is not an
         * appropriate strategy here.
         */
        newSteps.remove(OptionalStep.CONST_COLLECTOR);

        runSsaFormSteps(ssaMeth, newSteps);

        resultMeth = SsaToRop.convertToRopMethod(ssaMeth, true);
        return resultMeth;
!!!1057591.java!!!	runSsaFormSteps(inout ssaMeth : SsaMethod, inout steps : EnumSet<OptionalStep>) : void
        boolean needsDeadCodeRemover = true;

        if (steps.contains(OptionalStep.MOVE_PARAM_COMBINER)) {
            MoveParamCombiner.process(ssaMeth);
        }

        if (steps.contains(OptionalStep.SCCP)) {
            SCCP.process(ssaMeth);
            DeadCodeRemover.process(ssaMeth);
            needsDeadCodeRemover = false;
        }

        if (steps.contains(OptionalStep.LITERAL_UPGRADE)) {
            LiteralOpUpgrader.process(ssaMeth);
            DeadCodeRemover.process(ssaMeth);
            needsDeadCodeRemover = false;
        }

        /*
         * ESCAPE_ANALYSIS impacts debuggability, so left off by default
         */
        steps.remove(OptionalStep.ESCAPE_ANALYSIS);
        if (steps.contains(OptionalStep.ESCAPE_ANALYSIS)) {
            EscapeAnalysis.process(ssaMeth);
            DeadCodeRemover.process(ssaMeth);
            needsDeadCodeRemover = false;
        }

        if (steps.contains(OptionalStep.CONST_COLLECTOR)) {
            ConstCollector.process(ssaMeth);
            DeadCodeRemover.process(ssaMeth);
            needsDeadCodeRemover = false;
        }

        // dead code remover must be run before phi type resolver
        if (needsDeadCodeRemover) {
            DeadCodeRemover.process(ssaMeth);
        }

        PhiTypeResolver.process(ssaMeth);
!!!1057719.java!!!	debugEdgeSplit(inout rmeth : RopMethod, in paramWidth : int, inout isStatic : boolean, inout inPreserveLocals : boolean, inout inAdvice : TranslationAdvice) : SsaMethod

        preserveLocals = inPreserveLocals;
        advice = inAdvice;

        return SsaConverter.testEdgeSplit(rmeth, paramWidth, isStatic);
!!!1057847.java!!!	debugPhiPlacement(inout rmeth : RopMethod, in paramWidth : int, inout isStatic : boolean, inout inPreserveLocals : boolean, inout inAdvice : TranslationAdvice) : SsaMethod

        preserveLocals = inPreserveLocals;
        advice = inAdvice;

        return SsaConverter.testPhiPlacement(rmeth, paramWidth, isStatic);
!!!1057975.java!!!	debugRenaming(inout rmeth : RopMethod, in paramWidth : int, inout isStatic : boolean, inout inPreserveLocals : boolean, inout inAdvice : TranslationAdvice) : SsaMethod

        preserveLocals = inPreserveLocals;
        advice = inAdvice;

        return SsaConverter.convertToSsaMethod(rmeth, paramWidth, isStatic);
!!!1058103.java!!!	debugDeadCodeRemover(inout rmeth : RopMethod, in paramWidth : int, inout isStatic : boolean, inout inPreserveLocals : boolean, inout inAdvice : TranslationAdvice) : SsaMethod

        SsaMethod ssaMeth;

        preserveLocals = inPreserveLocals;
        advice = inAdvice;

        ssaMeth = SsaConverter.convertToSsaMethod(rmeth, paramWidth, isStatic);
        DeadCodeRemover.process(ssaMeth);

        return ssaMeth;
!!!1058231.java!!!	debugNoRegisterAllocation(inout rmeth : RopMethod, in paramWidth : int, inout isStatic : boolean, inout inPreserveLocals : boolean, inout inAdvice : TranslationAdvice, inout steps : EnumSet<OptionalStep>) : SsaMethod

        SsaMethod ssaMeth;

        preserveLocals = inPreserveLocals;
        advice = inAdvice;

        ssaMeth = SsaConverter.convertToSsaMethod(rmeth, paramWidth, isStatic);

        runSsaFormSteps(ssaMeth, steps);

        LivenessAnalyzer.constructInterferenceGraph(ssaMeth);

        return ssaMeth;
