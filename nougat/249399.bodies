class TwoColumnOutput
!!!1105975.java!!!	toString(inout s1 : String, in width1 : int, inout spacer : String, inout s2 : String, in width2 : int) : String
        int len1 = s1.length();
        int len2 = s2.length();

        StringWriter sw = new StringWriter((len1 + len2) * 3);
        TwoColumnOutput twoOut =
            new TwoColumnOutput(sw, width1, width2, spacer);

        try {
            twoOut.getLeft().write(s1);
            twoOut.getRight().write(s2);
        } catch (IOException ex) {
            throw new RuntimeException("shouldn't happen", ex);
        }

        twoOut.flush();
        return sw.toString();
!!!1106103.java!!!	TwoColumnOutput(inout out : Writer, in leftWidth : int, in rightWidth : int, inout spacer : String)
        if (out == null) {
            throw new NullPointerException("out == null");
        }

        if (leftWidth < 1) {
            throw new IllegalArgumentException("leftWidth < 1");
        }

        if (rightWidth < 1) {
            throw new IllegalArgumentException("rightWidth < 1");
        }

        if (spacer == null) {
            throw new NullPointerException("spacer == null");
        }

        StringWriter leftWriter = new StringWriter(1000);
        StringWriter rightWriter = new StringWriter(1000);

        this.out = out;
        this.leftWidth = leftWidth;
        this.leftBuf = leftWriter.getBuffer();
        this.rightBuf = rightWriter.getBuffer();
        this.leftColumn = new IndentingWriter(leftWriter, leftWidth);
        this.rightColumn =
            new IndentingWriter(rightWriter, rightWidth, spacer);
!!!1106231.java!!!	TwoColumnOutput(inout out : OutputStream, in leftWidth : int, in rightWidth : int, inout spacer : String)
        this(new OutputStreamWriter(out), leftWidth, rightWidth, spacer);
!!!1106359.java!!!	getLeft() : Writer
        return leftColumn;
!!!1106487.java!!!	getRight() : Writer
        return rightColumn;
!!!1106615.java!!!	flush() : void
        try {
            appendNewlineIfNecessary(leftBuf, leftColumn);
            appendNewlineIfNecessary(rightBuf, rightColumn);
            outputFullLines();
            flushLeft();
            flushRight();
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
!!!1106743.java!!!	outputFullLines() : void
        for (;;) {
            int leftLen = leftBuf.indexOf("\n");
            if (leftLen < 0) {
                return;
            }

            int rightLen = rightBuf.indexOf("\n");
            if (rightLen < 0) {
                return;
            }

            if (leftLen != 0) {
                out.write(leftBuf.substring(0, leftLen));
            }

            if (rightLen != 0) {
                writeSpaces(out, leftWidth - leftLen);
                out.write(rightBuf.substring(0, rightLen));
            }

            out.write('\n');

            leftBuf.delete(0, leftLen + 1);
            rightBuf.delete(0, rightLen + 1);
        }
!!!1106871.java!!!	flushLeft() : void
        appendNewlineIfNecessary(leftBuf, leftColumn);

        while (leftBuf.length() != 0) {
            rightColumn.write('\n');
            outputFullLines();
        }
!!!1106999.java!!!	flushRight() : void
        appendNewlineIfNecessary(rightBuf, rightColumn);

        while (rightBuf.length() != 0) {
            leftColumn.write('\n');
            outputFullLines();
        }
!!!1107127.java!!!	appendNewlineIfNecessary(inout buf : StringBuffer, inout out : Writer) : void
        int len = buf.length();

        if ((len != 0) && (buf.charAt(len - 1) != '\n')) {
            out.write('\n');
        }
!!!1107255.java!!!	writeSpaces(inout out : Writer, in amt : int) : void
        while (amt > 0) {
            out.write(' ');
            amt--;
        }
