class Output
!!!1161015.java!!!	generateHeader0(inout fileName : String, inout format : String) : void
        if (format.equals("brief")) {
            if (fileName != null) {
                out.println("File: " + fileName);
            }
        } else if (format.equals("xml")) {
            if (fileName != null) {
                out.println(IN0 + "<external file=\"" + fileName + "\">");
            } else {
                out.println(IN0 + "<external>");
            }
        } else {
            /* should've been trapped in arg handler */
            throw new RuntimeException("unknown output format");
        }
!!!1161143.java!!!	generateFirstHeader(inout fileName : String, inout format : String) : void
        generateHeader0(fileName, format);
!!!1161271.java!!!	generateHeader(inout fileName : String, inout format : String) : void
        out.println();
        generateHeader0(fileName, format);
!!!1161399.java!!!	generateFooter(inout format : String) : void
        if (format.equals("brief")) {
            // Nothing to do.
        } else if (format.equals("xml")) {
            out.println("</external>");
        } else {
            /* should've been trapped in arg handler */
            throw new RuntimeException("unknown output format");
        }
!!!1161527.java!!!	generate(inout dexData : DexData, inout format : String, inout justClasses : boolean) : void
        if (format.equals("brief")) {
            printBrief(dexData, justClasses);
        } else if (format.equals("xml")) {
            printXml(dexData, justClasses);
        } else {
            /* should've been trapped in arg handler */
            throw new RuntimeException("unknown output format");
        }
!!!1161655.java!!!	printBrief(inout dexData : DexData, inout justClasses : boolean) : void
        ClassRef[] externClassRefs = dexData.getExternalReferences();

        printClassRefs(externClassRefs, justClasses);

        if (!justClasses) {
            printFieldRefs(externClassRefs);
            printMethodRefs(externClassRefs);
        }
!!!1161783.java!!!	printClassRefs(inout classes : ClassRef, inout justClasses : boolean) : void
        if (!justClasses) {
            out.println("Classes:");
        }

        for (int i = 0; i < classes.length; i++) {
            ClassRef ref = classes[i];

            out.println(descriptorToDot(ref.getName()));
        }
!!!1161911.java!!!	printFieldRefs(inout classes : ClassRef) : void
        out.println("\nFields:");
        for (int i = 0; i < classes.length; i++) {
            FieldRef[] fields = classes[i].getFieldArray();

            for (int j = 0; j < fields.length; j++) {
                FieldRef ref = fields[j];

                out.println(descriptorToDot(ref.getDeclClassName()) +
                    "." + ref.getName() + " : " + ref.getTypeName());
            }
        }
!!!1162039.java!!!	printMethodRefs(inout classes : ClassRef) : void
        out.println("\nMethods:");
        for (int i = 0; i < classes.length; i++) {
            MethodRef[] methods = classes[i].getMethodArray();

            for (int j = 0; j < methods.length; j++) {
                MethodRef ref = methods[j];

                out.println(descriptorToDot(ref.getDeclClassName()) +
                    "." + ref.getName() + " : " + ref.getDescriptor());
            }
        }
!!!1162167.java!!!	printXml(inout dexData : DexData, inout justClasses : boolean) : void
        ClassRef[] externClassRefs = dexData.getExternalReferences();

        /*
         * Iterate through externClassRefs.  For each class, dump all of
         * the matching fields and methods.
         */
        String prevPackage = null;
        for (int i = 0; i < externClassRefs.length; i++) {
            ClassRef cref = externClassRefs[i];
            String declClassName = cref.getName();
            String className = classNameOnly(declClassName);
            String packageName = packageNameOnly(declClassName);

            /*
             * If we're in a different package, emit the appropriate tags.
             */
            if (!packageName.equals(prevPackage)) {
                if (prevPackage != null) {
                    out.println(IN1 + "</package>");
                }

                out.println(IN1 +
                    "<package name=\"" + packageName + "\">");

                prevPackage = packageName;
            }

            out.println(IN2 + "<class name=\"" + className + "\">");
            if (!justClasses) {
                printXmlFields(cref);
                printXmlMethods(cref);
            }
            out.println(IN2 + "</class>");
        }

        if (prevPackage != null)
            out.println(IN1 + "</package>");
!!!1162295.java!!!	printXmlFields(inout cref : ClassRef) : void
        FieldRef[] fields = cref.getFieldArray();
        for (int i = 0; i < fields.length; i++) {
            FieldRef fref = fields[i];

            out.println(IN3 + "<field name=\"" + fref.getName() +
                "\" type=\"" + descriptorToDot(fref.getTypeName()) + "\"/>");
        }
!!!1162423.java!!!	printXmlMethods(inout cref : ClassRef) : void
        MethodRef[] methods = cref.getMethodArray();
        for (int i = 0; i < methods.length; i++) {
            MethodRef mref = methods[i];
            String declClassName = mref.getDeclClassName();
            boolean constructor;

            constructor = mref.getName().equals("<init>");
            if (constructor) {
                // use class name instead of method name
                out.println(IN3 + "<constructor name=\"" +
                    classNameOnly(declClassName) + "\">");
            } else {
                out.println(IN3 + "<method name=\"" + mref.getName() +
                    "\" return=\"" + descriptorToDot(mref.getReturnTypeName()) +
                    "\">");
            }
            String[] args = mref.getArgumentTypeNames();
            for (int j = 0; j < args.length; j++) {
                out.println(IN4 + "<parameter type=\"" +
                    descriptorToDot(args[j]) + "\"/>");
            }
            if (constructor) {
                out.println(IN3 + "</constructor>");
            } else {
                out.println(IN3 + "</method>");
            }
        }
!!!1162551.java!!!	primitiveTypeLabel(in typeChar : char) : String
        /* primitive type; substitute human-readable name in */
        switch (typeChar) {
            case 'B':   return "byte";
            case 'C':   return "char";
            case 'D':   return "double";
            case 'F':   return "float";
            case 'I':   return "int";
            case 'J':   return "long";
            case 'S':   return "short";
            case 'V':   return "void";
            case 'Z':   return "boolean";
            default:
                /* huh? */
                System.err.println("Unexpected class char " + typeChar);
                assert false;
                return "UNKNOWN";
        }
!!!1162679.java!!!	descriptorToDot(inout descr : String) : String
        int targetLen = descr.length();
        int offset = 0;
        int arrayDepth = 0;

        /* strip leading [s; will be added to end */
        while (targetLen > 1 && descr.charAt(offset) == '[') {
            offset++;
            targetLen--;
        }
        arrayDepth = offset;

        if (targetLen == 1) {
            descr = primitiveTypeLabel(descr.charAt(offset));
            offset = 0;
            targetLen = descr.length();
        } else {
            /* account for leading 'L' and trailing ';' */
            if (targetLen >= 2 && descr.charAt(offset) == 'L' &&
                descr.charAt(offset+targetLen-1) == ';')
            {
                targetLen -= 2;     /* two fewer chars to copy */
                offset++;           /* skip the 'L' */
            }
        }

        char[] buf = new char[targetLen + arrayDepth * 2];

        /* copy class name over */
        int i;
        for (i = 0; i < targetLen; i++) {
            char ch = descr.charAt(offset + i);
            buf[i] = (ch == '/') ? '.' : ch;
        }

        /* add the appopriate number of brackets for arrays */
        while (arrayDepth-- > 0) {
            buf[i++] = '[';
            buf[i++] = ']';
        }
        assert i == buf.length;

        return new String(buf);
!!!1162807.java!!!	classNameOnly(inout typeName : String) : String
        String dotted = descriptorToDot(typeName);

        int start = dotted.lastIndexOf(".");
        if (start < 0) {
            return dotted;
        } else {
            return dotted.substring(start+1);
        }
!!!1162935.java!!!	packageNameOnly(inout typeName : String) : String
        String dotted = descriptorToDot(typeName);

        int end = dotted.lastIndexOf(".");
        if (end < 0) {
            /* lives in default package */
            return "";
        } else {
            return dotted.substring(0, end);
        }
