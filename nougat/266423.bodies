class ColorWheel
!!!1170615.java!!!	setOnColorChangedListener(inout l : ColorWheel::OnColorChangedListener) : void
          mListener = l;
!!!1170743.java!!!	ColorWheel(inout c : Context, inout attributes : AttributeSet)

          super(c, attributes);

          mColors = new int[] {
              0xFFFF0000, 0xFFFF00FF, 0xFF0000FF, 0xFF00FFFF, 0xFF00FF00,
              0xFFFFFF00, 0xFFFF0000
          };
          Shader s = new SweepGradient(0, 0, mColors, null);

          mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
          mPaint.setShader(s);
          mPaint.setStyle(Paint.Style.STROKE);
          mPaint.setStrokeWidth(32);

          mCenterPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
          mCenterPaint.setColor(0);
          mCenterPaint.setStrokeWidth(5);
!!!1170871.java!!!	onDraw(inout canvas : Canvas) : void
          super.onDraw(canvas);
          float r = CENTER_X - mPaint.getStrokeWidth()*0.5f;

          canvas.translate(CENTER_X, CENTER_X);

          canvas.drawOval(new RectF(-r, -r, r, r), mPaint);
          canvas.drawCircle(0, 0, CENTER_RADIUS, mCenterPaint);

          if (mTrackingCenter) {
              int c = mCenterPaint.getColor();
              mCenterPaint.setStyle(Paint.Style.STROKE);

              if (mHighlightCenter) {
                  mCenterPaint.setAlpha(0xFF);
              } else {
                  mCenterPaint.setAlpha(0x80);
              }
              canvas.drawCircle(0, 0,
                                CENTER_RADIUS + mCenterPaint.getStrokeWidth(),
                                mCenterPaint);

              mCenterPaint.setStyle(Paint.Style.FILL);
              mCenterPaint.setColor(c);
          }
!!!1170999.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void

          setMeasuredDimension(CENTER_X*2, CENTER_Y*2);
!!!1171127.java!!!	floatToByte(in x : float) : int
          int n = java.lang.Math.round(x);
          return n;
!!!1171255.java!!!	pinToByte(in n : int) : int
          if (n < 0) {
              n = 0;
          } else if (n > 255) {
              n = 255;
          }
          return n;
!!!1171383.java!!!	ave(in s : int, in d : int, in p : float) : int
          return s + java.lang.Math.round(p * (d - s));
!!!1171511.java!!!	interpColor(inout colors : int, in unit : float) : int
          if (unit <= 0) {
              return colors[0];
          }
          if (unit >= 1) {
              return colors[colors.length - 1];
          }

          float p = unit * (colors.length - 1);
          int i = (int)p;
          p -= i;

          // now p is just the fractional part [0...1) and i is the index
          int c0 = colors[i];
          int c1 = colors[i+1];
          int a = ave(Color.alpha(c0), Color.alpha(c1), p);
          int r = ave(Color.red(c0), Color.red(c1), p);
          int g = ave(Color.green(c0), Color.green(c1), p);
          int b = ave(Color.blue(c0), Color.blue(c1), p);

          return Color.argb(a, r, g, b);
!!!1171639.java!!!	rotateColor(in color : int, in rad : float) : int
          float deg = rad * 180 / 3.1415927f;
          int r = Color.red(color);
          int g = Color.green(color);
          int b = Color.blue(color);

          ColorMatrix cm = new ColorMatrix();
          ColorMatrix tmp = new ColorMatrix();

          cm.setRGB2YUV();
          tmp.setRotate(0, deg);
          cm.postConcat(tmp);
          tmp.setYUV2RGB();
          cm.postConcat(tmp);

          final float[] a = cm.getArray();

          int ir = floatToByte(a[0] * r +  a[1] * g +  a[2] * b);
          int ig = floatToByte(a[5] * r +  a[6] * g +  a[7] * b);
          int ib = floatToByte(a[10] * r + a[11] * g + a[12] * b);

          return Color.argb(Color.alpha(color), pinToByte(ir),
                            pinToByte(ig), pinToByte(ib));
!!!1171767.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
          float x = event.getX() - CENTER_X;
          float y = event.getY() - CENTER_Y;
          boolean inCenter = java.lang.Math.sqrt(x*x + y*y) <= CENTER_RADIUS;

          switch (event.getAction()) {
              case MotionEvent.ACTION_DOWN:
                  mTrackingCenter = inCenter;
                  if (inCenter) {
                      mHighlightCenter = true;
                      invalidate();
                      break;
                  }
              case MotionEvent.ACTION_MOVE:
                  if (mTrackingCenter) {
                      if (mHighlightCenter != inCenter) {
                          mHighlightCenter = inCenter;
                          invalidate();
                      }
                  } else {
                      float angle = (float)java.lang.Math.atan2(y, x);
                      // need to turn angle [-PI ... PI] into unit [0....1]
                      float unit = angle/(2*PI);
                      if (unit < 0) {
                          unit += 1;
                      }
                      mCenterPaint.setColor(interpColor(mColors, unit));
                      invalidate();
                      mListener.colorChanged(mCenterPaint.getColor());
                  }
                  break;
              case MotionEvent.ACTION_UP:
                  if (mTrackingCenter) {
                      if (inCenter) {
                          mListener.colorChanged(mCenterPaint.getColor());
                      }
                      mListener.colorChanged(0);
                      // mListener.colorChanged(mCenterPaint.getColor());
                      mTrackingCenter = false;    // so we draw w/o halo
                      invalidate();
                  }
                  break;
          }
          return true;
