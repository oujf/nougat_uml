class Path
!!!27791287.java!!!	Path()
        mNativePath = init1();
!!!27791415.java!!!	Path(inout src : Path)
        long valNative = 0;
        if (src != null) {
            valNative = src.mNativePath;
            isSimplePath = src.isSimplePath;
            if (src.rects != null) {
                rects = new Region(src.rects);
            }
        }
        mNativePath = init2(valNative);
!!!27791543.java!!!	reset() : void
        isSimplePath = true;
        mLastDirection = null;
        if (rects != null) rects.setEmpty();
        // We promised not to change this, so preserve it around the native
        // call, which does now reset fill type.
        final FillType fillType = getFillType();
        native_reset(mNativePath);
        setFillType(fillType);
!!!27791671.java!!!	rewind() : void
        isSimplePath = true;
        mLastDirection = null;
        if (rects != null) rects.setEmpty();
        native_rewind(mNativePath);
!!!27791799.java!!!	set(inout src : Path) : void
        if (this == src) {
            return;
        }
        isSimplePath = src.isSimplePath;
        native_set(mNativePath, src.mNativePath);
        if (!isSimplePath) {
            return;
        }

        if (rects != null && src.rects != null) {
            rects.set(src.rects);
        } else if (rects != null && src.rects == null) {
            rects.setEmpty();
        } else if (src.rects != null) {
            rects = new Region(src.rects);
        }
!!!27791927.java!!!	op(inout path : Path, inout op : Path::Op) : boolean
        return op(this, path, op);
!!!27792055.java!!!	op(inout path1 : Path, inout path2 : Path, inout op : Path::Op) : boolean
        if (native_op(path1.mNativePath, path2.mNativePath, op.ordinal(), this.mNativePath)) {
            isSimplePath = false;
            rects = null;
            return true;
        }
        return false;
!!!27792183.java!!!	isConvex() : boolean
        return native_isConvex(mNativePath);
!!!27792439.java!!!	getFillType() : Path::FillType
        return sFillTypeArray[native_getFillType(mNativePath)];
!!!27792567.java!!!	setFillType(inout ft : Path::FillType) : void
        native_setFillType(mNativePath, ft.nativeInt);
!!!27792695.java!!!	isInverseFillType() : boolean
        final int ft = native_getFillType(mNativePath);
        return (ft & FillType.INVERSE_WINDING.nativeInt) != 0;
!!!27792823.java!!!	toggleInverseFillType() : void
        int ft = native_getFillType(mNativePath);
        ft ^= FillType.INVERSE_WINDING.nativeInt;
        native_setFillType(mNativePath, ft);
!!!27792951.java!!!	isEmpty() : boolean
        return native_isEmpty(mNativePath);
!!!27793079.java!!!	isRect(inout rect : RectF) : boolean
        return native_isRect(mNativePath, rect);
!!!27793207.java!!!	computeBounds(inout bounds : RectF, inout exact : boolean) : void
        native_computeBounds(mNativePath, bounds);
!!!27793335.java!!!	incReserve(in extraPtCount : int) : void
        native_incReserve(mNativePath, extraPtCount);
!!!27793463.java!!!	moveTo(in x : float, in y : float) : void
        native_moveTo(mNativePath, x, y);
!!!27793591.java!!!	rMoveTo(in dx : float, in dy : float) : void
        native_rMoveTo(mNativePath, dx, dy);
!!!27793719.java!!!	lineTo(in x : float, in y : float) : void
        isSimplePath = false;
        native_lineTo(mNativePath, x, y);
!!!27793847.java!!!	rLineTo(in dx : float, in dy : float) : void
        isSimplePath = false;
        native_rLineTo(mNativePath, dx, dy);
!!!27793975.java!!!	quadTo(in x1 : float, in y1 : float, in x2 : float, in y2 : float) : void
        isSimplePath = false;
        native_quadTo(mNativePath, x1, y1, x2, y2);
!!!27794103.java!!!	rQuadTo(in dx1 : float, in dy1 : float, in dx2 : float, in dy2 : float) : void
        isSimplePath = false;
        native_rQuadTo(mNativePath, dx1, dy1, dx2, dy2);
!!!27794231.java!!!	cubicTo(in x1 : float, in y1 : float, in x2 : float, in y2 : float, in x3 : float, in y3 : float) : void
        isSimplePath = false;
        native_cubicTo(mNativePath, x1, y1, x2, y2, x3, y3);
!!!27794359.java!!!	rCubicTo(in x1 : float, in y1 : float, in x2 : float, in y2 : float, in x3 : float, in y3 : float) : void
        isSimplePath = false;
        native_rCubicTo(mNativePath, x1, y1, x2, y2, x3, y3);
!!!27794487.java!!!	arcTo(inout oval : RectF, in startAngle : float, in sweepAngle : float, inout forceMoveTo : boolean) : void
        arcTo(oval.left, oval.top, oval.right, oval.bottom, startAngle, sweepAngle, forceMoveTo);
!!!27794615.java!!!	arcTo(inout oval : RectF, in startAngle : float, in sweepAngle : float) : void
        arcTo(oval.left, oval.top, oval.right, oval.bottom, startAngle, sweepAngle, false);
!!!27794743.java!!!	arcTo(in left : float, in top : float, in right : float, in bottom : float, in startAngle : float, in sweepAngle : float, inout forceMoveTo : boolean) : void
        isSimplePath = false;
        native_arcTo(mNativePath, left, top, right, bottom, startAngle, sweepAngle, forceMoveTo);
!!!27794871.java!!!	close() : void
        isSimplePath = false;
        native_close(mNativePath);
!!!27795127.java!!!	detectSimplePath(in left : float, in top : float, in right : float, in bottom : float, inout dir : Path::Direction) : void
        if (mLastDirection == null) {
            mLastDirection = dir;
        }
        if (mLastDirection != dir) {
            isSimplePath = false;
        } else {
            if (rects == null) rects = new Region();
            rects.op((int) left, (int) top, (int) right, (int) bottom, Region.Op.UNION);
        }
!!!27795255.java!!!	addRect(inout rect : RectF, inout dir : Path::Direction) : void
        addRect(rect.left, rect.top, rect.right, rect.bottom, dir);
!!!27795383.java!!!	addRect(in left : float, in top : float, in right : float, in bottom : float, inout dir : Path::Direction) : void
        detectSimplePath(left, top, right, bottom, dir);
        native_addRect(mNativePath, left, top, right, bottom, dir.nativeInt);
!!!27795511.java!!!	addOval(inout oval : RectF, inout dir : Path::Direction) : void
        addOval(oval.left, oval.top, oval.right, oval.bottom, dir);
!!!27795639.java!!!	addOval(in left : float, in top : float, in right : float, in bottom : float, inout dir : Path::Direction) : void
        isSimplePath = false;
        native_addOval(mNativePath, left, top, right, bottom, dir.nativeInt);
!!!27795767.java!!!	addCircle(in x : float, in y : float, in radius : float, inout dir : Path::Direction) : void
        isSimplePath = false;
        native_addCircle(mNativePath, x, y, radius, dir.nativeInt);
!!!27795895.java!!!	addArc(inout oval : RectF, in startAngle : float, in sweepAngle : float) : void
        addArc(oval.left, oval.top, oval.right, oval.bottom, startAngle, sweepAngle);
!!!27796023.java!!!	addArc(in left : float, in top : float, in right : float, in bottom : float, in startAngle : float, in sweepAngle : float) : void
        isSimplePath = false;
        native_addArc(mNativePath, left, top, right, bottom, startAngle, sweepAngle);
!!!27796151.java!!!	addRoundRect(inout rect : RectF, in rx : float, in ry : float, inout dir : Path::Direction) : void
        addRoundRect(rect.left, rect.top, rect.right, rect.bottom, rx, ry, dir);
!!!27796279.java!!!	addRoundRect(in left : float, in top : float, in right : float, in bottom : float, in rx : float, in ry : float, inout dir : Path::Direction) : void
        isSimplePath = false;
        native_addRoundRect(mNativePath, left, top, right, bottom, rx, ry, dir.nativeInt);
!!!27796407.java!!!	addRoundRect(inout rect : RectF, inout radii : float, inout dir : Path::Direction) : void
        if (rect == null) {
            throw new NullPointerException("need rect parameter");
        }
        addRoundRect(rect.left, rect.top, rect.right, rect.bottom, radii, dir);
!!!27796535.java!!!	addRoundRect(in left : float, in top : float, in right : float, in bottom : float, inout radii : float, inout dir : Path::Direction) : void
        if (radii.length < 8) {
            throw new ArrayIndexOutOfBoundsException("radii[] needs 8 values");
        }
        isSimplePath = false;
        native_addRoundRect(mNativePath, left, top, right, bottom, radii, dir.nativeInt);
!!!27796663.java!!!	addPath(inout src : Path, in dx : float, in dy : float) : void
        isSimplePath = false;
        native_addPath(mNativePath, src.mNativePath, dx, dy);
!!!27796791.java!!!	addPath(inout src : Path) : void
        isSimplePath = false;
        native_addPath(mNativePath, src.mNativePath);
!!!27796919.java!!!	addPath(inout src : Path, inout matrix : Matrix) : void
        if (!src.isSimplePath) isSimplePath = false;
        native_addPath(mNativePath, src.mNativePath, matrix.native_instance);
!!!27797047.java!!!	offset(in dx : float, in dy : float, inout dst : Path) : void
        if (dst != null) {
            dst.set(this);
        } else {
            dst = this;
        }
        dst.offset(dx, dy);
!!!27797175.java!!!	offset(in dx : float, in dy : float) : void
        if (isSimplePath && rects == null) {
            // nothing to offset
            return;
        }
        if (isSimplePath && dx == Math.rint(dx) && dy == Math.rint(dy)) {
            rects.translate((int) dx, (int) dy);
        } else {
            isSimplePath = false;
        }
        native_offset(mNativePath, dx, dy);
!!!27797303.java!!!	setLastPoint(in dx : float, in dy : float) : void
        isSimplePath = false;
        native_setLastPoint(mNativePath, dx, dy);
!!!27797431.java!!!	transform(inout matrix : Matrix, inout dst : Path) : void
        long dstNative = 0;
        if (dst != null) {
            dst.isSimplePath = false;
            dstNative = dst.mNativePath;
        }
        native_transform(mNativePath, matrix.native_instance, dstNative);
!!!27797559.java!!!	transform(inout matrix : Matrix) : void
        isSimplePath = false;
        native_transform(mNativePath, matrix.native_instance);
!!!27797687.java!!!	finalize() : void
        try {
            finalizer(mNativePath);
            mNativePath = 0;  //  Other finalizers can still call us.
        } finally {
            super.finalize();
        }
!!!27797815.java!!!	ni() : long
        return mNativePath;
!!!27797943.java!!!	approximate(in acceptableError : float) : float
        return native_approximate(mNativePath, acceptableError);
