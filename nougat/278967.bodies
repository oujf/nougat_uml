class AppOpsManager
!!!1860407.java!!!	opToSwitch(in op : int) : int
        return sOpToSwitch[op];
!!!1860535.java!!!	opToName(in op : int) : String
        if (op == OP_NONE) return "NONE";
        return op < sOpNames.length ? sOpNames[op] : ("Unknown(" + op + ")");
!!!1860663.java!!!	strDebugOpToOp(inout op : String) : int
        for (int i=0; i<sOpNames.length; i++) {
            if (sOpNames[i].equals(op)) {
                return i;
            }
        }
        throw new IllegalArgumentException("Unknown operation string: " + op);
!!!1860791.java!!!	opToPermission(in op : int) : String
        return sOpPerms[op];
!!!1860919.java!!!	opToRestriction(in op : int) : String
        return sOpRestrictions[op];
!!!1861047.java!!!	permissionToOpCode(inout permission : String) : int
        Integer boxedOpCode = sRuntimePermToOp.get(permission);
        return boxedOpCode != null ? boxedOpCode : OP_NONE;
!!!1861175.java!!!	opAllowSystemBypassRestriction(in op : int) : boolean
        return sOpAllowSystemRestrictionBypass[op];
!!!1861303.java!!!	opToDefaultMode(in op : int) : int
        return sOpDefaultMode[op];
!!!1861431.java!!!	opAllowsReset(in op : int) : boolean
        return !sOpDisableReset[op];
!!!1864375.java!!!	AppOpsManager(inout context : Context, inout service : IAppOpsService)
        mContext = context;
        mService = service;
!!!1864503.java!!!	getPackagesForOps(inout ops : int) : AppOpsManager::PackageOps
        try {
            return mService.getPackagesForOps(ops);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1864631.java!!!	getOpsForPackage(in uid : int, inout packageName : String, inout ops : int) : AppOpsManager::PackageOps
        try {
            return mService.getOpsForPackage(uid, packageName, ops);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1864759.java!!!	setUidMode(in code : int, in uid : int, in mode : int) : void
        try {
            mService.setUidMode(code, uid, mode);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1864887.java!!!	setUidMode(inout appOp : String, in uid : int, in mode : int) : void
        try {
            mService.setUidMode(AppOpsManager.strOpToOp(appOp), uid, mode);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1865015.java!!!	setUserRestriction(in code : int, inout restricted : boolean, inout token : IBinder) : void
        setUserRestriction(code, restricted, token, /*exceptionPackages*/null);
!!!1865143.java!!!	setUserRestriction(in code : int, inout restricted : boolean, inout token : IBinder, inout exceptionPackages : String) : void
        setUserRestrictionForUser(code, restricted, token, exceptionPackages, mContext.getUserId());
!!!1865271.java!!!	setUserRestrictionForUser(in code : int, inout restricted : boolean, inout token : IBinder, inout exceptionPackages : String, in userId : int) : void
        try {
            mService.setUserRestriction(code, restricted, token, userId, exceptionPackages);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1865399.java!!!	setMode(in code : int, in uid : int, inout packageName : String, in mode : int) : void
        try {
            mService.setMode(code, uid, packageName, mode);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1865527.java!!!	setRestriction(in code : int, in usage : int, in mode : int, inout exceptionPackages : String) : void
        try {
            final int uid = Binder.getCallingUid();
            mService.setAudioRestriction(code, usage, uid, mode, exceptionPackages);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1865655.java!!!	resetAllModes() : void
        try {
            mService.resetAllModes(UserHandle.myUserId(), null);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1865783.java!!!	permissionToOp(inout permission : String) : String
        final Integer opCode = sRuntimePermToOp.get(permission);
        if (opCode == null) {
            return null;
        }
        return sOpToString[opCode];
!!!1865911.java!!!	startWatchingMode(inout op : String, inout packageName : String, in callback : AppOpsManager::OnOpChangedListener) : void
        startWatchingMode(strOpToOp(op), packageName, callback);
!!!1866039.java!!!	startWatchingMode(in op : int, inout packageName : String, in callback : AppOpsManager::OnOpChangedListener) : void
        synchronized (mModeWatchers) {
            IAppOpsCallback cb = mModeWatchers.get(callback);
            if (cb == null) {
                cb = new IAppOpsCallback.Stub() {
                    public void opChanged(int op, int uid, String packageName) {
                        if (callback instanceof OnOpChangedInternalListener) {
                            ((OnOpChangedInternalListener)callback).onOpChanged(op, packageName);
                        }
                        if (sOpToString[op] != null) {
                            callback.onOpChanged(sOpToString[op], packageName);
                        }
                    }
                };
                mModeWatchers.put(callback, cb);
            }
            try {
                mService.startWatchingMode(op, packageName, cb);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!1866167.java!!!	stopWatchingMode(inout callback : AppOpsManager::OnOpChangedListener) : void
        synchronized (mModeWatchers) {
            IAppOpsCallback cb = mModeWatchers.get(callback);
            if (cb != null) {
                try {
                    mService.stopWatchingMode(cb);
                } catch (RemoteException e) {
                    throw e.rethrowFromSystemServer();
                }
            }
        }
!!!1866295.java!!!	buildSecurityExceptionMsg(in op : int, in uid : int, inout packageName : String) : String
        return packageName + " from uid " + uid + " not allowed to perform " + sOpNames[op];
!!!1866423.java!!!	strOpToOp(inout op : String) : int
        Integer val = sOpStrToOp.get(op);
        if (val == null) {
            throw new IllegalArgumentException("Unknown operation string: " + op);
        }
        return val;
!!!1866551.java!!!	checkOp(inout op : String, in uid : int, inout packageName : String) : int
        return checkOp(strOpToOp(op), uid, packageName);
!!!1866679.java!!!	checkOpNoThrow(inout op : String, in uid : int, inout packageName : String) : int
        return checkOpNoThrow(strOpToOp(op), uid, packageName);
!!!1866807.java!!!	noteOp(inout op : String, in uid : int, inout packageName : String) : int
        return noteOp(strOpToOp(op), uid, packageName);
!!!1866935.java!!!	noteOpNoThrow(inout op : String, in uid : int, inout packageName : String) : int
        return noteOpNoThrow(strOpToOp(op), uid, packageName);
!!!1867063.java!!!	noteProxyOp(inout op : String, inout proxiedPackageName : String) : int
        return noteProxyOp(strOpToOp(op), proxiedPackageName);
!!!1867191.java!!!	noteProxyOpNoThrow(inout op : String, inout proxiedPackageName : String) : int
        return noteProxyOpNoThrow(strOpToOp(op), proxiedPackageName);
!!!1867319.java!!!	startOp(inout op : String, in uid : int, inout packageName : String) : int
        return startOp(strOpToOp(op), uid, packageName);
!!!1867447.java!!!	startOpNoThrow(inout op : String, in uid : int, inout packageName : String) : int
        return startOpNoThrow(strOpToOp(op), uid, packageName);
!!!1867575.java!!!	finishOp(inout op : String, in uid : int, inout packageName : String) : void
        finishOp(strOpToOp(op), uid, packageName);
!!!1867703.java!!!	checkOp(in op : int, in uid : int, inout packageName : String) : int
        try {
            int mode = mService.checkOperation(op, uid, packageName);
            if (mode == MODE_ERRORED) {
                throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
            }
            return mode;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1867831.java!!!	checkOpNoThrow(in op : int, in uid : int, inout packageName : String) : int
        try {
            return mService.checkOperation(op, uid, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1867959.java!!!	checkPackage(in uid : int, inout packageName : String) : void
        try {
            if (mService.checkPackage(uid, packageName) != MODE_ALLOWED) {
                throw new SecurityException(
                        "Package " + packageName + " does not belong to " + uid);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1868087.java!!!	checkAudioOp(in op : int, in stream : int, in uid : int, inout packageName : String) : int
        try {
            final int mode = mService.checkAudioOperation(op, stream, uid, packageName);
            if (mode == MODE_ERRORED) {
                throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
            }
            return mode;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1868215.java!!!	checkAudioOpNoThrow(in op : int, in stream : int, in uid : int, inout packageName : String) : int
        try {
            return mService.checkAudioOperation(op, stream, uid, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1868343.java!!!	noteOp(in op : int, in uid : int, inout packageName : String) : int
        try {
            int mode = mService.noteOperation(op, uid, packageName);
            if (mode == MODE_ERRORED) {
                throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
            }
            return mode;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1868471.java!!!	noteProxyOp(in op : int, inout proxiedPackageName : String) : int
        int mode = noteProxyOpNoThrow(op, proxiedPackageName);
        if (mode == MODE_ERRORED) {
            throw new SecurityException("Proxy package " + mContext.getOpPackageName()
                    + " from uid " + Process.myUid() + " or calling package "
                    + proxiedPackageName + " from uid " + Binder.getCallingUid()
                    + " not allowed to perform " + sOpNames[op]);
        }
        return mode;
!!!1868599.java!!!	noteProxyOpNoThrow(in op : int, inout proxiedPackageName : String) : int
        try {
            return mService.noteProxyOperation(op, mContext.getOpPackageName(),
                    Binder.getCallingUid(), proxiedPackageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1868727.java!!!	noteOpNoThrow(in op : int, in uid : int, inout packageName : String) : int
        try {
            return mService.noteOperation(op, uid, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1868855.java!!!	noteOp(in op : int) : int
        return noteOp(op, Process.myUid(), mContext.getOpPackageName());
!!!1868983.java!!!	getToken(inout service : IAppOpsService) : IBinder
        synchronized (AppOpsManager.class) {
            if (sToken != null) {
                return sToken;
            }
            try {
                sToken = service.getToken(new Binder());
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
            return sToken;
        }
!!!1869111.java!!!	startOp(in op : int, in uid : int, inout packageName : String) : int
        try {
            int mode = mService.startOperation(getToken(mService), op, uid, packageName);
            if (mode == MODE_ERRORED) {
                throw new SecurityException(buildSecurityExceptionMsg(op, uid, packageName));
            }
            return mode;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1869239.java!!!	startOpNoThrow(in op : int, in uid : int, inout packageName : String) : int
        try {
            return mService.startOperation(getToken(mService), op, uid, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1869367.java!!!	startOp(in op : int) : int
        return startOp(op, Process.myUid(), mContext.getOpPackageName());
!!!1869495.java!!!	finishOp(in op : int, in uid : int, inout packageName : String) : void
        try {
            mService.finishOperation(getToken(mService), op, uid, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1869623.java!!!	finishOp(in op : int) : void
        finishOp(op, Process.myUid(), mContext.getOpPackageName());
