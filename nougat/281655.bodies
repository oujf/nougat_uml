class EmailPolicy
!!!1284919.java!!!	getPolicy(inout policy : String, inout arguments : Bundle) : Bundle
        /*
         * Policy: Use alternate exchange strings
         */
        if (USE_ALTERNATE_EXCHANGE_STRINGS.equals(policy)) {
            // Un-comment the following code to select alternate exchange strings
            // Bundle alternates = new Bundle();
            // alternates.putBoolean(USE_ALTERNATE_EXCHANGE_STRINGS, true);
            // return alternates;
        }

        /*
         * Policy: For a known domain, configure to the servers for that domain
         */
        if (FIND_PROVIDER.equals(policy)) {
            String domain = arguments.getString(FIND_PROVIDER);
            if (domain != null) {
                domain = domain.toLowerCase();
                boolean isKnownDomain = false;
                for (String knownDomain : KNOWN_DOMAINS) {
                    if (knownDomain.equals(domain)) {
                        isKnownDomain = true;
                        break;
                    }
                }
                if (isKnownDomain) {
                    Bundle b = new Bundle();
                    b.putString(FIND_PROVIDER_IN_URI, "imap+ssl://imap.school.edu");
                    b.putString(FIND_PROVIDER_IN_USER, "$email");
                    b.putString(FIND_PROVIDER_OUT_URI, "smtp+ssl://smtp.school.edu");
                    b.putString(FIND_PROVIDER_OUT_USER, "$email");
                    return b;
                }
            }
        }

        /**
         * Policy:  If the IMAP server presents a particular capability, send back a particular
         * identifier in the IMAP ID.
         */
        if (GET_IMAP_ID.equals(policy)) {
            String capabilities = arguments.getString(GET_IMAP_ID_CAPA);
            if (capabilities != null) {
                if (capabilities.toUpperCase().contains(MY_SERVER_CAPABILITY)) {
                    Bundle b = new Bundle();
                    b.putString(GET_IMAP_ID, MY_DEVICE_ID);
                    return b;
                }
            }
        }

        /**
         * For any other policy request, or any policy request that cannot be processed,
         * return an empty bundle.
         */
        return Bundle.EMPTY;
