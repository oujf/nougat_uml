class TestSuiteBuilder
!!!34640823.java!!!	TestSuiteBuilder(inout clazz : Class)
        this(clazz.getName(), clazz.getClassLoader());
!!!34640951.java!!!	TestSuiteBuilder(inout name : String, inout classLoader : ClassLoader)
        this.suiteName = name;
        this.testGrouping.setClassLoader(classLoader);
        this.testCases = Lists.newArrayList();
        addRequirements(REJECT_SUPPRESSED);
!!!34641079.java!!!	addTestClassByName(inout testClassName : String, inout testMethodName : String, inout context : Context) : TestSuiteBuilder

        AndroidTestRunner atr = new AndroidTestRunner();
        atr.setContext(context);
        atr.setTestClassName(testClassName, testMethodName);

        this.testCases.addAll(atr.getTestCases());
        return this;
!!!34641207.java!!!	addTestSuite(inout testSuite : TestSuite) : TestSuiteBuilder
        for (TestCase testCase : (List<TestCase>) TestCaseUtil.getTests(testSuite, true)) {
            this.testCases.add(testCase);
        }
        return this;
!!!34641335.java!!!	includePackages(inout  : String...packageNames) : TestSuiteBuilder
        testGrouping.addPackagesRecursive(packageNames);
        return this;
!!!34641463.java!!!	excludePackages(inout  : String...packageNames) : TestSuiteBuilder
        testGrouping.removePackagesRecursive(packageNames);
        return this;
!!!34641591.java!!!	addRequirements(inout predicates : List<Predicate<TestMethod>>) : TestSuiteBuilder
        this.predicates.addAll(predicates);
        return this;
!!!34641719.java!!!	includeAllPackagesUnderHere() : TestSuiteBuilder
        StackTraceElement[] stackTraceElements = Thread.currentThread().getStackTrace();

        String callingClassName = null;
        String thisClassName = TestSuiteBuilder.class.getName();

        // We want to get the package of this method's calling class. This method's calling class
        // should be one level below this class in the stack trace.
        for (int i = 0; i < stackTraceElements.length; i++) {
            StackTraceElement element = stackTraceElements[i];
            if (thisClassName.equals(element.getClassName())
                    && "includeAllPackagesUnderHere".equals(element.getMethodName())) {
                // We've found this class in the call stack. The calling class must be the
                // next class in the stack.
                callingClassName = stackTraceElements[i + 1].getClassName();
                break;
            }
        }

        String packageName = parsePackageNameFromClassName(callingClassName);
        return includePackages(packageName);
!!!34641847.java!!!	named(inout newSuiteName : String) : TestSuiteBuilder
        suiteName = newSuiteName;
        return this;
!!!34641975.java!!!	build() : TestSuite
        rootSuite = new TestSuite(getSuiteName());

        // Keep track of current class so we know when to create a new sub-suite.
        currentClassname = null;
        try {
            for (TestMethod test : testGrouping.getTests()) {
                if (satisfiesAllPredicates(test)) {
                    addTest(test);
                }
            }
            if (testCases.size() > 0) {
                for (TestCase testCase : testCases) {
                    if (satisfiesAllPredicates(new TestMethod(testCase))) {
                        addTest(testCase);
                    }
                }
            }
        } catch (Exception exception) {
            Log.i("TestSuiteBuilder", "Failed to create test.", exception);
            TestSuite suite = new TestSuite(getSuiteName());
            suite.addTest(new FailedToCreateTests(exception));
            return suite;
        }
        return rootSuite;
!!!34642103.java!!!	getSuiteName() : String
        return suiteName;
!!!34642231.java!!!	addRequirements(inout predicates : Predicate<TestMethod>...) : TestSuiteBuilder
        ArrayList<Predicate<TestMethod>> list = new ArrayList<Predicate<TestMethod>>();
        Collections.addAll(list, predicates);
        return addRequirements(list);
!!!34642615.java!!!	getTestGrouping() : TestGrouping
        return testGrouping;
!!!34642743.java!!!	satisfiesAllPredicates(inout test : TestMethod) : boolean
        for (Predicate<TestMethod> predicate : predicates) {
            if (!predicate.apply(test)) {
                return false;
            }
        }
        return true;
!!!34642871.java!!!	addTest(inout testMethod : TestMethod) : void
        addSuiteIfNecessary(testMethod.getEnclosingClassname());
        suiteForCurrentClass.addTest(testMethod.createTest());
!!!34642999.java!!!	addTest(inout test : Test) : void
        addSuiteIfNecessary(test.getClass().getName());
        suiteForCurrentClass.addTest(test);
!!!34643127.java!!!	addSuiteIfNecessary(inout parentClassname : String) : void
        if (!parentClassname.equals(currentClassname)) {
            currentClassname = parentClassname;
            suiteForCurrentClass = new TestSuite(parentClassname);
            rootSuite.addTest(suiteForCurrentClass);
        }
!!!34643255.java!!!	parsePackageNameFromClassName(inout className : String) : String
        return className.substring(0, className.lastIndexOf('.'));
