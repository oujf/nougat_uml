class AccessibilityWindowInfo
!!!5192759.java!!!	AccessibilityWindowInfo()
        /* do nothing - hide constructor */
!!!5192887.java!!!	getTitle() : CharSequence
        return mTitle;
!!!5193015.java!!!	setTitle(inout title : CharSequence) : void
        mTitle = title;
!!!5193143.java!!!	getType() : int
        return mType;
!!!5193271.java!!!	setType(in type : int) : void
        mType = type;
!!!5193399.java!!!	getLayer() : int
        return mLayer;
!!!5193527.java!!!	setLayer(in layer : int) : void
        mLayer = layer;
!!!5193655.java!!!	getRoot() : AccessibilityNodeInfo
        if (mConnectionId == UNDEFINED) {
            return null;
        }
        AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
        return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId,
                mId, AccessibilityNodeInfo.ROOT_NODE_ID,
                true, AccessibilityNodeInfo.FLAG_PREFETCH_DESCENDANTS);
!!!5193783.java!!!	setAnchorId(in anchorId : int) : void
        mAnchorId = anchorId;
!!!5193911.java!!!	getAnchor() : AccessibilityNodeInfo
        if ((mConnectionId == UNDEFINED) || (mAnchorId == UNDEFINED) || (mParentId == UNDEFINED)) {
            return null;
        }

        AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
        return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId,
                mParentId, mAnchorId, true, 0);
!!!5194039.java!!!	getParent() : AccessibilityWindowInfo
        if (mConnectionId == UNDEFINED || mParentId == UNDEFINED) {
            return null;
        }
        AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
        return client.getWindow(mConnectionId, mParentId);
!!!5194167.java!!!	setParentId(in parentId : int) : void
        mParentId = parentId;
!!!5194295.java!!!	getId() : int
        return mId;
!!!5194423.java!!!	setId(in id : int) : void
        mId = id;
!!!5194551.java!!!	setConnectionId(in connectionId : int) : void
        mConnectionId = connectionId;
!!!5194679.java!!!	getBoundsInScreen(inout outBounds : Rect) : void
        outBounds.set(mBoundsInScreen);
!!!5194807.java!!!	setBoundsInScreen(inout bounds : Rect) : void
        mBoundsInScreen.set(bounds);
!!!5194935.java!!!	isActive() : boolean
        return getBooleanProperty(BOOLEAN_PROPERTY_ACTIVE);
!!!5195063.java!!!	setActive(inout active : boolean) : void
        setBooleanProperty(BOOLEAN_PROPERTY_ACTIVE, active);
!!!5195191.java!!!	isFocused() : boolean
        return getBooleanProperty(BOOLEAN_PROPERTY_FOCUSED);
!!!5195319.java!!!	setFocused(inout focused : boolean) : void
        setBooleanProperty(BOOLEAN_PROPERTY_FOCUSED, focused);
!!!5195447.java!!!	isAccessibilityFocused() : boolean
        return getBooleanProperty(BOOLEAN_PROPERTY_ACCESSIBILITY_FOCUSED);
!!!5195575.java!!!	setAccessibilityFocused(inout focused : boolean) : void
        setBooleanProperty(BOOLEAN_PROPERTY_ACCESSIBILITY_FOCUSED, focused);
!!!5195703.java!!!	getChildCount() : int
        return (mChildIds != null) ? mChildIds.size() : 0;
!!!5195831.java!!!	getChild(in index : int) : AccessibilityWindowInfo
        if (mChildIds == null) {
            throw new IndexOutOfBoundsException();
        }
        if (mConnectionId == UNDEFINED) {
            return null;
        }
        final int childId = (int) mChildIds.get(index);
        AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
        return client.getWindow(mConnectionId, childId);
!!!5195959.java!!!	addChild(in childId : int) : void
        if (mChildIds == null) {
            mChildIds = new LongArray();
        }
        mChildIds.add(childId);
!!!5196087.java!!!	obtain() : AccessibilityWindowInfo
        AccessibilityWindowInfo info = sPool.acquire();
        if (info == null) {
            info = new AccessibilityWindowInfo();
        }
        return info;
!!!5196215.java!!!	obtain(inout info : AccessibilityWindowInfo) : AccessibilityWindowInfo
        AccessibilityWindowInfo infoClone = obtain();

        infoClone.mType = info.mType;
        infoClone.mLayer = info.mLayer;
        infoClone.mBooleanProperties = info.mBooleanProperties;
        infoClone.mId = info.mId;
        infoClone.mParentId = info.mParentId;
        infoClone.mBoundsInScreen.set(info.mBoundsInScreen);
        infoClone.mTitle = info.mTitle;
        infoClone.mAnchorId = info.mAnchorId;

        if (info.mChildIds != null && info.mChildIds.size() > 0) {
            if (infoClone.mChildIds == null) {
                infoClone.mChildIds = info.mChildIds.clone();
            } else {
                infoClone.mChildIds.addAll(info.mChildIds);
            }
        }

        infoClone.mConnectionId = info.mConnectionId;

        return infoClone;
!!!5196343.java!!!	recycle() : void
        clear();
        sPool.release(this);
!!!5196471.java!!!	describeContents() : int
        return 0;
!!!5196599.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        parcel.writeInt(mType);
        parcel.writeInt(mLayer);
        parcel.writeInt(mBooleanProperties);
        parcel.writeInt(mId);
        parcel.writeInt(mParentId);
        mBoundsInScreen.writeToParcel(parcel, flags);
        parcel.writeCharSequence(mTitle);
        parcel.writeInt(mAnchorId);

        final LongArray childIds = mChildIds;
        if (childIds == null) {
            parcel.writeInt(0);
        } else {
            final int childCount = childIds.size();
            parcel.writeInt(childCount);
            for (int i = 0; i < childCount; i++) {
                parcel.writeInt((int) childIds.get(i));
            }
        }

        parcel.writeInt(mConnectionId);
!!!5196727.java!!!	initFromParcel(inout parcel : Parcel) : void
        mType = parcel.readInt();
        mLayer = parcel.readInt();
        mBooleanProperties = parcel.readInt();
        mId = parcel.readInt();
        mParentId = parcel.readInt();
        mBoundsInScreen.readFromParcel(parcel);
        mTitle = parcel.readCharSequence();
        mAnchorId = parcel.readInt();

        final int childCount = parcel.readInt();
        if (childCount > 0) {
            if (mChildIds == null) {
                mChildIds = new LongArray(childCount);
            }
            for (int i = 0; i < childCount; i++) {
                final int childId = parcel.readInt();
                mChildIds.add(childId);
            }
        }

        mConnectionId = parcel.readInt();
!!!5196855.java!!!	hashCode() : int
        return mId;
!!!5196983.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        AccessibilityWindowInfo other = (AccessibilityWindowInfo) obj;
        return (mId == other.mId);
!!!5197111.java!!!	toString() : String
        StringBuilder builder = new StringBuilder();
        builder.append("AccessibilityWindowInfo[");
        builder.append("title=").append(mTitle);
        builder.append("id=").append(mId);
        builder.append(", type=").append(typeToString(mType));
        builder.append(", layer=").append(mLayer);
        builder.append(", bounds=").append(mBoundsInScreen);
        builder.append(", focused=").append(isFocused());
        builder.append(", active=").append(isActive());
        if (DEBUG) {
            builder.append(", parent=").append(mParentId);
            builder.append(", children=[");
            if (mChildIds != null) {
                final int childCount = mChildIds.size();
                for (int i = 0; i < childCount; i++) {
                    builder.append(mChildIds.get(i));
                    if (i < childCount - 1) {
                        builder.append(',');
                    }
                }
            } else {
                builder.append("null");
            }
            builder.append(']');
        } else {
            builder.append(", hasParent=").append(mParentId != UNDEFINED);
            builder.append(", isAnchored=").append(mAnchorId != UNDEFINED);
            builder.append(", hasChildren=").append(mChildIds != null
                    && mChildIds.size() > 0);
        }
        builder.append(']');
        return builder.toString();
!!!5197239.java!!!	clear() : void
        mType = UNDEFINED;
        mLayer = UNDEFINED;
        mBooleanProperties = 0;
        mId = UNDEFINED;
        mParentId = UNDEFINED;
        mBoundsInScreen.setEmpty();
        if (mChildIds != null) {
            mChildIds.clear();
        }
        mConnectionId = UNDEFINED;
        mAnchorId = UNDEFINED;
        mTitle = null;
!!!5197367.java!!!	getBooleanProperty(in property : int) : boolean
        return (mBooleanProperties & property) != 0;
!!!5197495.java!!!	setBooleanProperty(in property : int, inout value : boolean) : void
        if (value) {
            mBooleanProperties |= property;
        } else {
            mBooleanProperties &= ~property;
        }
!!!5197623.java!!!	typeToString(in type : int) : String
        switch (type) {
            case TYPE_APPLICATION: {
                return "TYPE_APPLICATION";
            }
            case TYPE_INPUT_METHOD: {
                return "TYPE_INPUT_METHOD";
            }
            case TYPE_SYSTEM: {
                return "TYPE_SYSTEM";
            }
            case TYPE_ACCESSIBILITY_OVERLAY: {
                return "TYPE_ACCESSIBILITY_OVERLAY";
            }
            case TYPE_SPLIT_SCREEN_DIVIDER: {
                return "TYPE_SPLIT_SCREEN_DIVIDER";
            }
            default:
                return "<UNKNOWN>";
        }
!!!5197751.java!!!	changed(inout other : AccessibilityWindowInfo) : boolean
        if (other.mId != mId) {
            throw new IllegalArgumentException("Not same window.");
        }
        if (other.mType != mType) {
            throw new IllegalArgumentException("Not same type.");
        }
        if (!mBoundsInScreen.equals(other.mBoundsInScreen)) {
            return true;
        }
        if (mLayer != other.mLayer) {
            return true;
        }
        if (mBooleanProperties != other.mBooleanProperties) {
            return true;
        }
        if (mParentId != other.mParentId) {
            return true;
        }
        if (mChildIds == null) {
            if (other.mChildIds != null) {
                return true;
            }
        } else if (!mChildIds.equals(other.mChildIds)) {
            return true;
        }
        return false;
