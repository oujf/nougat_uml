class Tracer
!!!1409847.java!!!	getInstance() : Tracer
        if (mInstance == null) {
            mInstance = new Tracer();
        }
        return mInstance;
!!!1409975.java!!!	setOutputMode(inout mode : Tracer::Mode) : void
        closeSinks();
        mCurrentMode = mode;
        try {
            switch (mode) {
                case FILE:
                    if (mOutputFile == null) {
                        throw new IllegalArgumentException("Please provide a filename before " +
                                "attempting write trace to a file");
                    }
                    mSinks.add(new FileSink(mOutputFile));
                    break;
                case LOGCAT:
                    mSinks.add(new LogcatSink());
                    break;
                case ALL:
                    mSinks.add(new LogcatSink());
                    if (mOutputFile == null) {
                        throw new IllegalArgumentException("Please provide a filename before " +
                                "attempting write trace to a file");
                    }
                    mSinks.add(new FileSink(mOutputFile));
                    break;
                default:
                    break;
            }
        } catch (FileNotFoundException e) {
            Log.w("Tracer", "Could not open log file: " + e.getMessage());
        }
!!!1410103.java!!!	closeSinks() : void
        for (TracerSink sink : mSinks) {
            sink.close();
        }
        mSinks.clear();
!!!1410231.java!!!	setOutputFilename(inout filename : String) : void
        mOutputFile = new File(filename);
!!!1410359.java!!!	doTrace(inout arguments : Object) : void
        if (mCurrentMode == Mode.NONE) {
            return;
        }

        String caller = getCaller();
        if (caller == null) {
            return;
        }

        log(String.format("%s (%s)", caller, join(", ", arguments)));
!!!1410487.java!!!	log(inout message : String) : void
        for (TracerSink sink : mSinks) {
            sink.log(message);
        }
!!!1410615.java!!!	isTracingEnabled() : boolean
        return mCurrentMode != Mode.NONE;
!!!1410743.java!!!	trace(inout  : Object...arguments) : void
        Tracer.getInstance().doTrace(arguments);
!!!1410871.java!!!	join(inout separator : String, inout strings : Object) : String
        if (strings.length == 0)
            return "";

        StringBuilder builder = new StringBuilder(objectToString(strings[0]));
        for (int i = 1; i < strings.length; i++) {
            builder.append(separator);
            builder.append(objectToString(strings[i]));
        }
        return builder.toString();
!!!1410999.java!!!	objectToString(inout obj : Object) : String
        if (obj.getClass().isArray()) {
            if (obj instanceof Object[]) {
                return Arrays.deepToString((Object[])obj);
            } else {
                return "[...]";
            }
        } else {
            return obj.toString();
        }
!!!1411127.java!!!	getCaller() : String
        StackTraceElement stackTrace[] = Thread.currentThread().getStackTrace();
        if (stackTrace.length < MIN_STACK_TRACE_LENGTH) {
            return UNKNOWN_METHOD_STRING;
        }

        StackTraceElement caller = stackTrace[METHOD_TO_TRACE_LOCATION];
        StackTraceElement previousCaller = stackTrace[CALLER_LOCATION];

        if (previousCaller.getClassName().startsWith(UIAUTOMATOR_PACKAGE)) {
            return null;
        }

        int indexOfDot = caller.getClassName().lastIndexOf('.');
        if (indexOfDot < 0) {
            indexOfDot = 0;
        }

        if (indexOfDot + 1 >= caller.getClassName().length()) {
            return UNKNOWN_METHOD_STRING;
        }

        String shortClassName = caller.getClassName().substring(indexOfDot + 1);
        return String.format("%s.%s from %s() at %s:%d", shortClassName, caller.getMethodName(),
                previousCaller.getMethodName(), previousCaller.getFileName(),
                previousCaller.getLineNumber());
