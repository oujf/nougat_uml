class ObjectAnimator
!!!1536183.java!!!	setPropertyName(inout propertyName : String) : void
        // mValues could be null if this is being constructed piecemeal. Just record the
        // propertyName to be used later when setValues() is called if so.
        if (mValues != null) {
            PropertyValuesHolder valuesHolder = mValues[0];
            String oldName = valuesHolder.getPropertyName();
            valuesHolder.setPropertyName(propertyName);
            mValuesMap.remove(oldName);
            mValuesMap.put(propertyName, valuesHolder);
        }
        mPropertyName = propertyName;
        // New property/values/target should cause re-initialization prior to starting
        mInitialized = false;
!!!1536311.java!!!	setProperty(inout property : Property) : void
        // mValues could be null if this is being constructed piecemeal. Just record the
        // propertyName to be used later when setValues() is called if so.
        if (mValues != null) {
            PropertyValuesHolder valuesHolder = mValues[0];
            String oldName = valuesHolder.getPropertyName();
            valuesHolder.setProperty(property);
            mValuesMap.remove(oldName);
            mValuesMap.put(mPropertyName, valuesHolder);
        }
        if (mProperty != null) {
            mPropertyName = property.getName();
        }
        mProperty = property;
        // New property/values/target should cause re-initialization prior to starting
        mInitialized = false;
!!!1536439.java!!!	getPropertyName() : String
        String propertyName = null;
        if (mPropertyName != null) {
            propertyName = mPropertyName;
        } else if (mProperty != null) {
            propertyName = mProperty.getName();
        } else if (mValues != null && mValues.length > 0) {
            for (int i = 0; i < mValues.length; ++i) {
                if (i == 0) {
                    propertyName = "";
                } else {
                    propertyName += ",";
                }
                propertyName += mValues[i].getPropertyName();
            }
        }
        return propertyName;
!!!1536567.java!!!	getNameForTrace() : String
        return "animator:" + getPropertyName();
!!!1536823.java!!!	ObjectAnimator(inout target : Object, inout propertyName : String)
        setTarget(target);
        setPropertyName(propertyName);
!!!1536951.java!!!	ObjectAnimator(inout target : T, inout property : Property)
        setTarget(target);
        setProperty(property);
!!!1537079.java!!!	ofInt(inout target : Object, inout propertyName : String, inout  : int...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, propertyName);
        anim.setIntValues(values);
        return anim;
!!!1537207.java!!!	ofInt(inout target : Object, inout xPropertyName : String, inout yPropertyName : String, inout path : Path) : ObjectAnimator
        PathKeyframes keyframes = KeyframeSet.ofPath(path);
        PropertyValuesHolder x = PropertyValuesHolder.ofKeyframes(xPropertyName,
                keyframes.createXIntKeyframes());
        PropertyValuesHolder y = PropertyValuesHolder.ofKeyframes(yPropertyName,
                keyframes.createYIntKeyframes());
        return ofPropertyValuesHolder(target, x, y);
!!!1537335.java!!!	ofInt(inout target : T, inout property : Property, inout  : int...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, property);
        anim.setIntValues(values);
        return anim;
!!!1537463.java!!!	ofInt(inout target : T, inout xProperty : Property, inout yProperty : Property, inout path : Path) : ObjectAnimator
        PathKeyframes keyframes = KeyframeSet.ofPath(path);
        PropertyValuesHolder x = PropertyValuesHolder.ofKeyframes(xProperty,
                keyframes.createXIntKeyframes());
        PropertyValuesHolder y = PropertyValuesHolder.ofKeyframes(yProperty,
                keyframes.createYIntKeyframes());
        return ofPropertyValuesHolder(target, x, y);
!!!1537591.java!!!	ofMultiInt(inout target : Object, inout propertyName : String, inout values : int) : ObjectAnimator
        PropertyValuesHolder pvh = PropertyValuesHolder.ofMultiInt(propertyName, values);
        return ofPropertyValuesHolder(target, pvh);
!!!1537719.java!!!	ofMultiInt(inout target : Object, inout propertyName : String, inout path : Path) : ObjectAnimator
        PropertyValuesHolder pvh = PropertyValuesHolder.ofMultiInt(propertyName, path);
        return ofPropertyValuesHolder(target, pvh);
!!!1537847.java!!!	ofMultiInt(inout target : Object, inout propertyName : String, inout converter : TypeConverter, inout evaluator : TypeEvaluator, inout  : T...values) : ObjectAnimator
        PropertyValuesHolder pvh = PropertyValuesHolder.ofMultiInt(propertyName, converter,
                evaluator, values);
        return ObjectAnimator.ofPropertyValuesHolder(target, pvh);
!!!1537975.java!!!	ofArgb(inout target : Object, inout propertyName : String, inout  : int...values) : ObjectAnimator
        ObjectAnimator animator = ofInt(target, propertyName, values);
        animator.setEvaluator(ArgbEvaluator.getInstance());
        return animator;
!!!1538103.java!!!	ofArgb(inout target : T, inout property : Property, inout  : int...values) : ObjectAnimator
        ObjectAnimator animator = ofInt(target, property, values);
        animator.setEvaluator(ArgbEvaluator.getInstance());
        return animator;
!!!1538231.java!!!	ofFloat(inout target : Object, inout propertyName : String, inout  : float...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, propertyName);
        anim.setFloatValues(values);
        return anim;
!!!1538359.java!!!	ofFloat(inout target : Object, inout xPropertyName : String, inout yPropertyName : String, inout path : Path) : ObjectAnimator
        PathKeyframes keyframes = KeyframeSet.ofPath(path);
        PropertyValuesHolder x = PropertyValuesHolder.ofKeyframes(xPropertyName,
                keyframes.createXFloatKeyframes());
        PropertyValuesHolder y = PropertyValuesHolder.ofKeyframes(yPropertyName,
                keyframes.createYFloatKeyframes());
        return ofPropertyValuesHolder(target, x, y);
!!!1538487.java!!!	ofFloat(inout target : T, inout property : Property, inout  : float...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, property);
        anim.setFloatValues(values);
        return anim;
!!!1538615.java!!!	ofFloat(inout target : T, inout xProperty : Property, inout yProperty : Property, inout path : Path) : ObjectAnimator
        PathKeyframes keyframes = KeyframeSet.ofPath(path);
        PropertyValuesHolder x = PropertyValuesHolder.ofKeyframes(xProperty,
                keyframes.createXFloatKeyframes());
        PropertyValuesHolder y = PropertyValuesHolder.ofKeyframes(yProperty,
                keyframes.createYFloatKeyframes());
        return ofPropertyValuesHolder(target, x, y);
!!!1538743.java!!!	ofMultiFloat(inout target : Object, inout propertyName : String, inout values : float) : ObjectAnimator
        PropertyValuesHolder pvh = PropertyValuesHolder.ofMultiFloat(propertyName, values);
        return ofPropertyValuesHolder(target, pvh);
!!!1538871.java!!!	ofMultiFloat(inout target : Object, inout propertyName : String, inout path : Path) : ObjectAnimator
        PropertyValuesHolder pvh = PropertyValuesHolder.ofMultiFloat(propertyName, path);
        return ofPropertyValuesHolder(target, pvh);
!!!1538999.java!!!	ofMultiFloat(inout target : Object, inout propertyName : String, inout converter : TypeConverter, inout evaluator : TypeEvaluator, inout  : T...values) : ObjectAnimator
        PropertyValuesHolder pvh = PropertyValuesHolder.ofMultiFloat(propertyName, converter,
                evaluator, values);
        return ObjectAnimator.ofPropertyValuesHolder(target, pvh);
!!!1539127.java!!!	ofObject(inout target : Object, inout propertyName : String, inout evaluator : TypeEvaluator, inout  : Object...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, propertyName);
        anim.setObjectValues(values);
        anim.setEvaluator(evaluator);
        return anim;
!!!1539255.java!!!	ofObject(inout target : Object, inout propertyName : String, inout converter : TypeConverter, inout path : Path) : ObjectAnimator
        PropertyValuesHolder pvh = PropertyValuesHolder.ofObject(propertyName, converter, path);
        return ofPropertyValuesHolder(target, pvh);
!!!1539383.java!!!	ofObject(inout target : T, inout property : Property, inout evaluator : TypeEvaluator, inout  : V...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, property);
        anim.setObjectValues(values);
        anim.setEvaluator(evaluator);
        return anim;
!!!1539511.java!!!	ofObject(inout target : T, inout property : Property, inout converter : TypeConverter, inout evaluator : TypeEvaluator, inout  : V...values) : ObjectAnimator
        PropertyValuesHolder pvh = PropertyValuesHolder.ofObject(property, converter, evaluator,
                values);
        return ofPropertyValuesHolder(target, pvh);
!!!1539639.java!!!	ofObject(inout target : T, inout property : Property, inout converter : TypeConverter, inout path : Path) : ObjectAnimator
        PropertyValuesHolder pvh = PropertyValuesHolder.ofObject(property, converter, path);
        return ofPropertyValuesHolder(target, pvh);
!!!1539767.java!!!	ofPropertyValuesHolder(inout target : Object, inout  : PropertyValuesHolder...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator();
        anim.setTarget(target);
        anim.setValues(values);
        return anim;
!!!1539895.java!!!	setIntValues(inout  : int...values) : void
        if (mValues == null || mValues.length == 0) {
            // No values yet - this animator is being constructed piecemeal. Init the values with
            // whatever the current propertyName is
            if (mProperty != null) {
                setValues(PropertyValuesHolder.ofInt(mProperty, values));
            } else {
                setValues(PropertyValuesHolder.ofInt(mPropertyName, values));
            }
        } else {
            super.setIntValues(values);
        }
!!!1540023.java!!!	setFloatValues(inout  : float...values) : void
        if (mValues == null || mValues.length == 0) {
            // No values yet - this animator is being constructed piecemeal. Init the values with
            // whatever the current propertyName is
            if (mProperty != null) {
                setValues(PropertyValuesHolder.ofFloat(mProperty, values));
            } else {
                setValues(PropertyValuesHolder.ofFloat(mPropertyName, values));
            }
        } else {
            super.setFloatValues(values);
        }
!!!1540151.java!!!	setObjectValues(inout  : Object...values) : void
        if (mValues == null || mValues.length == 0) {
            // No values yet - this animator is being constructed piecemeal. Init the values with
            // whatever the current propertyName is
            if (mProperty != null) {
                setValues(PropertyValuesHolder.ofObject(mProperty, (TypeEvaluator) null, values));
            } else {
                setValues(PropertyValuesHolder.ofObject(mPropertyName,
                        (TypeEvaluator) null, values));
            }
        } else {
            super.setObjectValues(values);
        }
!!!1540279.java!!!	setAutoCancel(inout cancel : boolean) : void
        mAutoCancel = cancel;
!!!1540407.java!!!	hasSameTargetAndProperties(inout anim : Animator) : boolean
        if (anim instanceof ObjectAnimator) {
            PropertyValuesHolder[] theirValues = ((ObjectAnimator) anim).getValues();
            if (((ObjectAnimator) anim).getTarget() == getTarget() &&
                    mValues.length == theirValues.length) {
                for (int i = 0; i < mValues.length; ++i) {
                    PropertyValuesHolder pvhMine = mValues[i];
                    PropertyValuesHolder pvhTheirs = theirValues[i];
                    if (pvhMine.getPropertyName() == null ||
                            !pvhMine.getPropertyName().equals(pvhTheirs.getPropertyName())) {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
!!!1540535.java!!!	start() : void
        AnimationHandler.getInstance().autoCancelBasedOn(this);
        if (DBG) {
            Log.d(LOG_TAG, "Anim target, duration: " + getTarget() + ", " + getDuration());
            for (int i = 0; i < mValues.length; ++i) {
                PropertyValuesHolder pvh = mValues[i];
                Log.d(LOG_TAG, "   Values[" + i + "]: " +
                    pvh.getPropertyName() + ", " + pvh.mKeyframes.getValue(0) + ", " +
                    pvh.mKeyframes.getValue(1));
            }
        }
        super.start();
!!!1540663.java!!!	shouldAutoCancel(inout anim : AnimationHandler::AnimationFrameCallback) : boolean
        if (anim == null) {
            return false;
        }

        if (anim instanceof ObjectAnimator) {
            ObjectAnimator objAnim = (ObjectAnimator) anim;
            if (objAnim.mAutoCancel && hasSameTargetAndProperties(objAnim)) {
                return true;
            }
        }
        return false;
!!!1540791.java!!!	initAnimation() : void
        if (!mInitialized) {
            // mValueType may change due to setter/getter setup; do this before calling super.init(),
            // which uses mValueType to set up the default type evaluator.
            final Object target = getTarget();
            if (target != null) {
                final int numValues = mValues.length;
                for (int i = 0; i < numValues; ++i) {
                    mValues[i].setupSetterAndGetter(target);
                }
            }
            super.initAnimation();
        }
!!!1540919.java!!!	setDuration(in duration : long) : ObjectAnimator
        super.setDuration(duration);
        return this;
!!!1541047.java!!!	getTarget() : Object
        return mTarget == null ? null : mTarget.get();
!!!1541175.java!!!	setTarget(inout target : Object) : void
        final Object oldTarget = getTarget();
        if (oldTarget != target) {
            if (isStarted()) {
                cancel();
            }
            mTarget = target == null ? null : new WeakReference<Object>(target);
            // New target should cause re-initialization prior to starting
            mInitialized = false;
        }
!!!1541303.java!!!	setupStartValues() : void
        initAnimation();

        final Object target = getTarget();
        if (target != null) {
            final int numValues = mValues.length;
            for (int i = 0; i < numValues; ++i) {
                mValues[i].setupStartValue(target);
            }
        }
!!!1541431.java!!!	setupEndValues() : void
        initAnimation();

        final Object target = getTarget();
        if (target != null) {
            final int numValues = mValues.length;
            for (int i = 0; i < numValues; ++i) {
                mValues[i].setupEndValue(target);
            }
        }
!!!1541559.java!!!	animateValue(in fraction : float) : void
        final Object target = getTarget();
        if (mTarget != null && target == null) {
            // We lost the target reference, cancel and clean up.
            cancel();
            return;
        }

        super.animateValue(fraction);
        int numValues = mValues.length;
        for (int i = 0; i < numValues; ++i) {
            mValues[i].setAnimatedValue(target);
        }
!!!1541687.java!!!	clone() : ObjectAnimator
        final ObjectAnimator anim = (ObjectAnimator) super.clone();
        return anim;
!!!1541815.java!!!	toString() : String
        String returnVal = "ObjectAnimator@" + Integer.toHexString(hashCode()) + ", target " +
            getTarget();
        if (mValues != null) {
            for (int i = 0; i < mValues.length; ++i) {
                returnVal += "\n    " + mValues[i].toString();
            }
        }
        return returnVal;
