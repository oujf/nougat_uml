class Animator
!!!1494199.java!!!	pause() : void
        if (isStarted() && !mPaused) {
            mPaused = true;
            if (mPauseListeners != null) {
                ArrayList<AnimatorPauseListener> tmpListeners =
                        (ArrayList<AnimatorPauseListener>) mPauseListeners.clone();
                int numListeners = tmpListeners.size();
                for (int i = 0; i < numListeners; ++i) {
                    tmpListeners.get(i).onAnimationPause(this);
                }
            }
        }
!!!1494327.java!!!	resume() : void
        if (mPaused) {
            mPaused = false;
            if (mPauseListeners != null) {
                ArrayList<AnimatorPauseListener> tmpListeners =
                        (ArrayList<AnimatorPauseListener>) mPauseListeners.clone();
                int numListeners = tmpListeners.size();
                for (int i = 0; i < numListeners; ++i) {
                    tmpListeners.get(i).onAnimationResume(this);
                }
            }
        }
!!!1494455.java!!!	isPaused() : boolean
        return mPaused;
!!!1495095.java!!!	getTotalDuration() : long
        long duration = getDuration();
        if (duration == DURATION_INFINITE) {
            return DURATION_INFINITE;
        } else {
            return getStartDelay() + duration;
        }
!!!1495351.java!!!	getInterpolator() : TimeInterpolator
        return null;
!!!1495607.java!!!	isStarted() : boolean
        // Default method returns value for isRunning(). Subclasses should override to return a
        // real value.
        return isRunning();
!!!1495735.java!!!	addListener(inout listener : Animator::AnimatorListener) : void
        if (mListeners == null) {
            mListeners = new ArrayList<AnimatorListener>();
        }
        mListeners.add(listener);
!!!1495863.java!!!	removeListener(inout listener : Animator::AnimatorListener) : void
        if (mListeners == null) {
            return;
        }
        mListeners.remove(listener);
        if (mListeners.size() == 0) {
            mListeners = null;
        }
!!!1495991.java!!!	getListeners() : Animator::AnimatorListener
        return mListeners;
!!!1496119.java!!!	addPauseListener(inout listener : Animator::AnimatorPauseListener) : void
        if (mPauseListeners == null) {
            mPauseListeners = new ArrayList<AnimatorPauseListener>();
        }
        mPauseListeners.add(listener);
!!!1496247.java!!!	removePauseListener(inout listener : Animator::AnimatorPauseListener) : void
        if (mPauseListeners == null) {
            return;
        }
        mPauseListeners.remove(listener);
        if (mPauseListeners.size() == 0) {
            mPauseListeners = null;
        }
!!!1496375.java!!!	removeAllListeners() : void
        if (mListeners != null) {
            mListeners.clear();
            mListeners = null;
        }
        if (mPauseListeners != null) {
            mPauseListeners.clear();
            mPauseListeners = null;
        }
!!!1496503.java!!!	getChangingConfigurations() : int
        return mChangingConfigurations;
!!!1496631.java!!!	setChangingConfigurations(in configs : int) : void
        mChangingConfigurations = configs;
!!!1496759.java!!!	appendChangingConfigurations(in configs : int) : void
        mChangingConfigurations |= configs;
!!!1496887.java!!!	createConstantState() : ConstantState
        return new AnimatorConstantState(this);
!!!1497015.java!!!	clone() : Animator
        try {
            final Animator anim = (Animator) super.clone();
            if (mListeners != null) {
                anim.mListeners = new ArrayList<AnimatorListener>(mListeners);
            }
            if (mPauseListeners != null) {
                anim.mPauseListeners = new ArrayList<AnimatorPauseListener>(mPauseListeners);
            }
            return anim;
        } catch (CloneNotSupportedException e) {
           throw new AssertionError();
        }
!!!1497527.java!!!	canReverse() : boolean
        return false;
!!!1497655.java!!!	reverse() : void
        throw new IllegalStateException("Reverse is not supported");
!!!1498551.java!!!	setAllowRunningAsynchronously(inout mayRunAsync : boolean) : void
        // It is up to subclasses to support this, if they can.
