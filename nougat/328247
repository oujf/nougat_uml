format 76
"inc" // nougat_src::device::google::contexthub::inc
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/Android Source Code/nougat_src/device/google/contexthub/inc/"
  cpp_src_dir "d:/Workspace/Android Source Code/nougat_src/device/google/contexthub/inc/"
  classview 296375 "inc"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 3103543 "chreMessageFromHostData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "CHRE_EVENT_MESSAGE_FROM_HOST"
      classrelation 9102007 // reservedMessageType (<directional composition>)
	relation 9102007 *-->
	  a role_name "reservedMessageType" public
	    comment "Message type (NOTE: not implemented correctly in the Android N release).

In future releases, this will be a message type provided by the host.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9102007 // reservedMessageType (<directional composition>)
	  b parent class_ref 2292663 // uint32_t
      end

      classrelation 9102135 // messageSize (<directional composition>)
	relation 9102135 *-->
	  a role_name "messageSize" public
	    comment "The size, in bytes of the following 'message'.

This can be 0.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9102135 // messageSize (<directional composition>)
	  b parent class_ref 2292663 // uint32_t
      end

      attribute 9797175 "message"
	const_attribute public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The message from the host.

These contents are of a format that the host and nanoapp must have
established beforehand.

This data is 'messageSize' bytes in length.  Note that if 'messageSize'
is 0, this might be NULL.
"
      end
    end

    class 3103671 "chreEventCompleteFunction"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}( ${name})(uint16_t eventType, void *eventData);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Callback which frees data associated with an event.

This callback is (optionally) provided to the chreSendEvent() method as
a means for freeing the event data and performing any other cleanup
necessary when the event is completed.  When this callback is invoked,
'eventData' is no longer needed and can be released.

@param eventType  The 'eventType' argument from chreSendEvent().
@param eventData  The 'eventData' argument from chreSendEvent().

@see chreSendEvent"
    end

    class 3103799 "chreMessageFreeFunction"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}( ${name})(void *message, size_t messageSize);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Callback which frees a message.

This callback is (optionally) provided to the chreSendMessageToHost() method
as a means for freeing the message.  When this callback is invoked,
'message' is no longer needed and can be released.  Note that this in
no way assures that said message did or did not make it to the host, simply
that this memory is no longer needed.

@param message  The 'message' argument from chreSendMessageToHost().
@param messageSize  The 'messageSize' argument from chreSendMessageToHost().

@see chreSendMessageToHost"
    end

    class 3103927 "chreLogLevel"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Logging levels used to indicate severity level of logging messages.

CHRE_LOG_ERROR: Something fatal has happened, i.e. something that will have
    user-visible consequences and won't be recoverable without explicitly
    deleting some data, uninstalling applications, wiping the data
    partitions or reflashing the entire phone (or worse).
CHRE_LOG_WARN: Something that will have user-visible consequences but is
    likely to be recoverable without data loss by performing some explicit
    action, ranging from waiting or restarting an app all the way to
    re-downloading a new version of an application or rebooting the device.
CHRE_LOG_INFO: Something interesting to most people happened, i.e. when a
    situation is detected that is likely to have widespread impact, though
    isn't necessarily an error.
CHRE_LOG_DEBUG: Used to further note what is happening on the device that
    could be relevant to investigate and debug unexpected behaviors. You
    should log only what is needed to gather enough information about what
    is going on about your component.

There is currently no API to turn on/off logging by level, but we anticipate
adding such in future releases.

@see chreLog"
      attribute 9797303 "CHRE_LOG_ERROR"
	public type class_ref 3103927 // chreLogLevel
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9797431 "CHRE_LOG_WARN"
	public type class_ref 3103927 // chreLogLevel
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9797559 "CHRE_LOG_INFO"
	public type class_ref 3103927 // chreLogLevel
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9797687 "CHRE_LOG_DEBUG"
	public type class_ref 3103927 // chreLogLevel
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3104055 "chreSensorConfigureMode"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Modes we can configure a sensor to use.

Our mode will affect not only how/if we receive events, but
also whether or not the sensor will be powered on our behalf.

@see chreSensorConfigure"
      attribute 9797815 "CHRE_SENSOR_CONFIGURE_MODE_CONTINUOUS"
	public type class_ref 3104055 // chreSensorConfigureMode
	init_value "
        (CHRE_SENSOR_CONFIGURE_RAW_POWER_ON |
         CHRE_SENSOR_CONFIGURE_RAW_REPORT_CONTINUOUS)"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9797943 "CHRE_SENSOR_CONFIGURE_MODE_ONE_SHOT"
	public type class_ref 3104055 // chreSensorConfigureMode
	init_value "
        (CHRE_SENSOR_CONFIGURE_RAW_POWER_ON |
         CHRE_SENSOR_CONFIGURE_RAW_REPORT_ONE_SHOT)"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9798071 "CHRE_SENSOR_CONFIGURE_MODE_PASSIVE_CONTINUOUS"
	public type class_ref 3104055 // chreSensorConfigureMode
	init_value "
        CHRE_SENSOR_CONFIGURE_RAW_REPORT_CONTINUOUS"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9798199 "CHRE_SENSOR_CONFIGURE_MODE_PASSIVE_ONE_SHOT"
	public type class_ref 3104055 // chreSensorConfigureMode
	init_value "
        CHRE_SENSOR_CONFIGURE_RAW_REPORT_ONE_SHOT"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9798327 "CHRE_SENSOR_CONFIGURE_MODE_DONE"
	public type class_ref 3104055 // chreSensorConfigureMode
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3104183 "chreSensorInfo"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Get events from the sensor.

Power: Turn on if not already on.
Reporting: Continuous.  Send each new event as it comes (subject to
    batching and latency).


Get a single event from the sensor and then become DONE.

Once the event is sent, the sensor automatically
changes to CHRE_SENSOR_CONFIGURE_MODE_DONE mode.

Power: Turn on if not already on.
Reporting: One shot.  Send the next event and then be DONE.


Get events from a sensor that are generated for other apps.

This is considered passive because the sensor will not be powered
on for the sake of our nanoapp.  If and only if another app in
the system has requested this sensor power on will we get events.

This can be useful for something which is interested in seeing data,
but not interested enough to be responsible for powering on the sensor.

Power: Do not power the sensor on our behalf.
Reporting: Continuous.  Send each event as it comes.


Get a single event from a sensor that is generated for other apps.

See CHRE_SENSOR_CONFIGURE_MODE_PASSIVE_CONTINUOUS for more details
on what be \"passive\" means.

Power: Do not power the sensor on our behalf.
Reporting: One shot.  Send only the next event and then be DONE.


Indicate we are done using this sensor and no longer interested in it.

See chreSensorConfigure for more details on expressing interest or
lack of interest in a sensor.

Power: Do not power the sensor on our behalf.
Reporting: None.


A structure containing information about a Sensor.

See documentation of individual fields below."
      attribute 9798455 "sensorName"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The name of the sensor.

A text name, useful for logging/debugging, describing the Sensor.  This
is not assured to be unique (i.e. there could be multiple sensors with
the name \"Temperature\").

CHRE implementations may not set this as NULL.  An empty
string, while discouraged, is legal.
"
      end

      classrelation 9102263 // sensorType (<directional composition>)
	relation 9102263 *-->
	  a role_name "sensorType" public
	    comment "One of the CHRE_SENSOR_TYPE_* defines above.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9102263 // sensorType (<directional composition>)
	  b parent class_ref 2284087 // uint8_t
      end

      attribute 9798583 "isOnChange"
	public type class_ref 2284087 // uint8_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value} : 1;
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag indicating if this sensor is on-change.

An on-change sensor only generates events when underlying state
changes.  This has the same meaning as on-change does in the Android
Sensors HAL.  See sensors.h for much more details.

A value of 1 indicates this is on-change.  0 indicates this is not
on-change.
"
      end

      attribute 9798711 "isOneShot"
	public type class_ref 2284087 // uint8_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value} : 1;
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag indicating if this sensor is one-shot.

A one-shot sensor only triggers a single event, and then automatically
disables itself.

A value of 1 indicates this is on-change.  0 indicates this is not
on-change.
"
      end

      attribute 9798839 "unusedFlags"
	public type class_ref 2284087 // uint8_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value} : 6;
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3104311 "chreSensorDataHeader"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Header used in every structure containing batchable data from a sensor.

The typical structure for sensor data looks like:

  struct chreSensorTypeData {
      struct chreSensorDataHeader header;
      struct {
          uint32_t timestampDelta;
          union {
              <type> value;
              <type> interpretation0;
              <type> interpretation1;
          };
      } readings[1];
  };

Despite 'readings' being declared as an array of 1 element,
an instance of the struct will actually have 'readings' as
an array of header.readingCount elements (which may be 1).
The 'timestampDelta' is in relation to the previous 'readings' (or
the baseTimestamp for readings[0].  So,
Timestamp for readings[0] == header.baseTimestamp +
    readings[0].timestampDelta.
Timestamp for readings[1] == timestamp for readings[0] +
    readings[1].timestampDelta.
And thus, in order to determine the timestamp for readings[N], it's
necessary to process through all of the N-1 readings.  The advantage,
though, is that our entire readings can span an arbitrary length of time,
just as long as any two consecutive readings differ by no more than
4.295 seconds (timestampDelta, like all time in the CHRE, is in
nanoseconds).

If a sensor has batched readings where two consecutive readings differ by
more than 4.295 seconds, the CHRE will split them across multiple
instances of the struct, and send multiple events.

The value from the sensor is typically expressed in a union,
allowing a generic access to the data ('value'), along with
differently named access giving a more natural interpretation
of the data for the specific sensor types which use this
structure.  This allows, for example, barometer code to
reference readings[N].pressure, and an ambient light sensor
to reference readings[N].light, while both use the same
structure."
      classrelation 9102391 // baseTimestamp (<directional composition>)
	relation 9102391 *-->
	  a role_name "baseTimestamp" public
	    comment "The base timestamp, in nanoseconds.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9102391 // baseTimestamp (<directional composition>)
	  b parent class_ref 2304311 // uint64_t
      end

      classrelation 9102519 // sensorHandle (<directional composition>)
	relation 9102519 *-->
	  a role_name "sensorHandle" public
	    comment "The handle of the sensor producing this event.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9102519 // sensorHandle (<directional composition>)
	  b parent class_ref 2292663 // uint32_t
      end

      classrelation 9102647 // readingCount (<directional composition>)
	relation 9102647 *-->
	  a role_name "readingCount" public
	    comment "The number elements in the 'readings' array.

This must be at least 1.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9102647 // readingCount (<directional composition>)
	  b parent class_ref 2283959 // uint16_t
      end

      classrelation 9102775 // reserved (<directional composition>)
	relation 9102775 *-->
	  a role_name "reserved" multiplicity "[2]" public
	    comment "Reserved bytes.

These must be 0.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9102775 // reserved (<directional composition>)
	  b parent class_ref 2284087 // uint8_t
      end
    end

    class 3104439 "chreSensorThreeAxisData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Data for a sensor which reports on three axes.

This is used by CHRE_EVENT_SENSOR_DATA, CHRE_EVENT_SENSOR_GYROSCOPE_DATA,
CHRE_EVENT_SENSOR_GYROSCOPE_BIAS_INFO,
CHRE_EVENT_SENSOR_GEOMAGNETIC_FIELD_DATA, and
CHRE_EVENT_SENSOR_GEOMAGNETIC_FIELD_BIAS_INFO."
      classrelation 9102903 // header (<directional composition>)
	relation 9102903 *-->
	  a role_name "header" public
	    comment "@see chreSensorDataHeader
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9102903 // header (<directional composition>)
	  b parent class_ref 3104311 // chreSensorDataHeader
      end

      attribute 9798967 "readings"
	public explicit_type "<complex type>"
	multiplicity "[1]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct  {
        /**
         * @see chreSensorDataHeader
         */
        uint32_t timestampDelta;
        union {
            float values[3];
            float v[3];
            struct {
                float x;
                float y;
                float z;
            };
            float bias[3];
            struct {
                float x_bias;
                float y_bias;
                float z_bias;
            };
        };
    } ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3104567 "chreSensorOccurrenceData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Data from a sensor where we only care about a event occurring.

This is a bit unusual in that our readings have no data in addition
to the timestamp.  But since we only care about the occurrence, we
don't need to know anything else.

Used by: CHRE_EVENT_SENSOR_INSTANT_MOTION_DETECT_DATA and
    CHRE_EVENT_SENSOR_STATIONARY_DETECT_DATA."
      classrelation 9103031 // header (<directional composition>)
	relation 9103031 *-->
	  a role_name "header" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9103031 // header (<directional composition>)
	  b parent class_ref 3104311 // chreSensorDataHeader
      end

      attribute 9799095 "readings"
	public explicit_type "<complex type>"
	multiplicity "[1]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct  {
        uint32_t timestampDelta;
        // This space intentionally left blank.
        // Only the timestamp is meaningful here, there
        // is no additional data.
    } ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3104695 "chreSensorFloatData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "CHRE_EVENT_SENSOR_LIGHT_DATA and CHRE_EVENT_SENSOR_PRESSURE_DATA."
      classrelation 9103159 // header (<directional composition>)
	relation 9103159 *-->
	  a role_name "header" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9103159 // header (<directional composition>)
	  b parent class_ref 3104311 // chreSensorDataHeader
      end

      attribute 9799223 "readings"
	public explicit_type "<complex type>"
	multiplicity "[1]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct  {
        uint32_t timestampDelta;
        union {
            float value;
            float light;  // lux
            float pressure;  // hectopascals (hPa)
        };
    } ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3104823 "chreSensorByteData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "CHRE_EVENT_SENSOR_PROXIMITY_DATA."
      classrelation 9103287 // header (<directional composition>)
	relation 9103287 *-->
	  a role_name "header" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9103287 // header (<directional composition>)
	  b parent class_ref 3104311 // chreSensorDataHeader
      end

      attribute 9799351 "readings"
	public explicit_type "<complex type>"
	multiplicity "[1]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct  {
        uint32_t timestampDelta;
        union {
            uint8_t value;
            struct {
                uint8_t isNear : 1;
                uint8_t invalid : 1;
                uint8_t padding0 : 6;
            };
        };
    } ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3104951 "chreSensorSamplingStatus"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The status of a sensor's sampling configuration."
      classrelation 9103415 // interval (<directional composition>)
	relation 9103415 *-->
	  a role_name "interval" public
	    comment "The interval, in nanoseconds, at which the sensor is now sampling.

If this is CHRE_SENSOR_INTERVAL_DEFAULT, then a sampling interval
isn't meaningful for this sensor.

Note that if 'enabled' is false, this value is not meaningful.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9103415 // interval (<directional composition>)
	  b parent class_ref 2304311 // uint64_t
      end

      classrelation 9103543 // latency (<directional composition>)
	relation 9103543 *-->
	  a role_name "latency" public
	    comment "The latency, in nanoseconds, at which the senor is now reporting.

If this is CHRE_SENSOR_LATENCY_DEFAULT, then a latency
isn't meaningful for this sensor.

Note that if 'enabled' is false, this value is not meaningful.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9103543 // latency (<directional composition>)
	  b parent class_ref 2304311 // uint64_t
      end

      attribute 9799479 "enabled"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if the sensor is actively powered and sampling; false otherwise.
"
      end
    end

    class 3105079 "chreSensorSamplingStatusEvent"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The nanoappHandleEvent argument for CHRE_EVENT_SENSOR_SAMPLING_CHANGE.

Note that only at least one of 'interval' or 'latency' must be
different than it was prior to this event.  Thus, one of these
fields may be (but doesn't need to be) the same as before."
      classrelation 9103671 // sensorHandle (<directional composition>)
	relation 9103671 *-->
	  a role_name "sensorHandle" public
	    comment "The handle of the sensor which has experienced a change in sampling.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9103671 // sensorHandle (<directional composition>)
	  b parent class_ref 2292663 // uint32_t
      end

      classrelation 9103799 // status (<directional composition>)
	relation 9103799 *-->
	  a role_name "status" public
	    comment "The new sampling status.

At least one of the field in this struct will be different from
the previous sampling status event.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9103799 // status (<directional composition>)
	  b parent class_ref 3104951 // chreSensorSamplingStatus
      end
    end
  end

  deploymentview 256567 "inc"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1392311 "chre_event"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3103543 // chreMessageFromHostData
	class_ref 3103671 // chreEventCompleteFunction
	class_ref 3103799 // chreMessageFreeFunction
      end
    end

    artifact 1392439 "chre_re"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3103927 // chreLogLevel
      end
    end

    artifact 1392567 "chre_sensor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3104055 // chreSensorConfigureMode
	class_ref 3104183 // chreSensorInfo
	class_ref 3104311 // chreSensorDataHeader
	class_ref 3104439 // chreSensorThreeAxisData
	class_ref 3104567 // chreSensorOccurrenceData
	class_ref 3104695 // chreSensorFloatData
	class_ref 3104823 // chreSensorByteData
	class_ref 3104951 // chreSensorSamplingStatus
	class_ref 3105079 // chreSensorSamplingStatusEvent
      end
    end
  end
end
