class VelocityTrackerState
!!!39560119.cpp!!!	clear() : void
    mVelocityTracker.clear();
    mActivePointerId = -1;
    mCalculatedIdBits.clear();
!!!39560247.cpp!!!	addMovement(in event : MotionEvent) : void
    mVelocityTracker.addMovement(event);
!!!39560375.cpp!!!	computeCurrentVelocity(in units : int32_t, in maxVelocity : float) : void
    BitSet32 idBits(mVelocityTracker.getCurrentPointerIdBits());
    mCalculatedIdBits = idBits;

    for (uint32_t index = 0; !idBits.isEmpty(); index++) {
        uint32_t id = idBits.clearFirstMarkedBit();

        float vx, vy;
        mVelocityTracker.getVelocity(id, &vx, &vy);

        vx = vx * units / 1000;
        vy = vy * units / 1000;

        if (vx > maxVelocity) {
            vx = maxVelocity;
        } else if (vx < -maxVelocity) {
            vx = -maxVelocity;
        }
        if (vy > maxVelocity) {
            vy = maxVelocity;
        } else if (vy < -maxVelocity) {
            vy = -maxVelocity;
        }

        Velocity& velocity = mCalculatedVelocity[index];
        velocity.vx = vx;
        velocity.vy = vy;
    }
!!!39560503.cpp!!!	getVelocity(in id : int32_t, inout outVx : float, inout outVy : float) : void
    if (id == ACTIVE_POINTER_ID) {
        id = mVelocityTracker.getActivePointerId();
    }

    float vx, vy;
    if (id >= 0 && id <= MAX_POINTER_ID && mCalculatedIdBits.hasBit(id)) {
        uint32_t index = mCalculatedIdBits.getIndexOfBit(id);
        const Velocity& velocity = mCalculatedVelocity[index];
        vx = velocity.vx;
        vy = velocity.vy;
    } else {
        vx = 0;
        vy = 0;
    }

    if (outVx) {
        *outVx = vx;
    }
    if (outVy) {
        *outVy = vy;
    }
!!!39560631.cpp!!!	getEstimator(in id : int32_t, inout outEstimator : VelocityTracker::Estimator) : bool
    return mVelocityTracker.getEstimator(id, outEstimator);
