class TiffEntryImpl
!!!39737399.cpp!!!	TiffEntryImpl(in tag : uint16_t, in type : TagType, in count : uint32_t, in end : Endianness, in data : T)
    count = (type == RATIONAL || type == SRATIONAL) ? count * 2 : count;
    ssize_t index = mData.appendArray(data, count);
    LOG_ALWAYS_FATAL_IF(index < 0, "%s: Could not allocate vector for data.", __FUNCTION__);
!!!39737655.cpp!!!	writeData(in offset : uint32_t, inout out : EndianOutput) : status_t
    status_t ret = OK;

    // Some tags have fixed-endian value output
    Endianness tmp = UNDEFINED_ENDIAN;
    if (mEnd != UNDEFINED_ENDIAN) {
        tmp = out->getEndianness();
        out->setEndianness(mEnd);
    }

    uint32_t count = mCount;
    if (getType() == RATIONAL || getType() == SRATIONAL) {
        /**
         * Rationals are stored as an array of ints.  Each
         * rational is represented by 2 ints.  To recover the
         * size of the array here, multiply the count by 2.
         */
        count <<= 1;
    }

    BAIL_ON_FAIL(out->write(mData.array(), 0, count), ret);

    if (mEnd != UNDEFINED_ENDIAN) {
        out->setEndianness(tmp);
    }

    // Write to next word alignment
    ZERO_TILL_WORD(out, sizeof(T) * count, ret);
    return ret;
!!!39737783.cpp!!!	writeTagInfo(in offset : uint32_t, inout out : EndianOutput) : status_t
    assert((offset % TIFF_WORD_SIZE) == 0);
    status_t ret = OK;
    BAIL_ON_FAIL(out->write(&mTag, 0, 1), ret);
    BAIL_ON_FAIL(out->write(&mType, 0, 1), ret);
    BAIL_ON_FAIL(out->write(&mCount, 0, 1), ret);

    uint32_t dataSize = getActualSize();
    if (dataSize > OFFSET_SIZE) {
        BAIL_ON_FAIL(out->write(&offset, 0, 1), ret);
    } else {
        uint32_t count = mCount;
        if (getType() == RATIONAL || getType() == SRATIONAL) {
            /**
             * Rationals are stored as an array of ints.  Each
             * rational is represented by 2 ints.  To recover the
             * size of the array here, multiply the count by 2.
             */
            count <<= 1;
        }
        BAIL_ON_FAIL(out->write(mData.array(), 0, count), ret);
        ZERO_TILL_WORD(out, dataSize, ret);
    }
    return ret;
!!!39737911.cpp!!!	getCount() : uint32_t
    return mCount;
!!!39738039.cpp!!!	getTag() : uint16_t
    return mTag;
!!!39738167.cpp!!!	getType() : TagType
    return static_cast<TagType>(mType);
!!!39738295.cpp!!!	getEndianness() : Endianness
    return mEnd;
!!!39738423.cpp!!!	getSize() : size_t
    uint32_t total = getActualSize();
    WORD_ALIGN(total)
    return (total <= OFFSET_SIZE) ? 0 : total;
!!!39738551.cpp!!!	getComparableValue() : uint32_t
    return mTag;
!!!39738679.cpp!!!	getDataHelper() : void
    return reinterpret_cast<const void*>(mData.array());
!!!39738807.cpp!!!	getActualSize() : uint32_t
    uint32_t total = sizeof(T) * mCount;
    if (getType() == RATIONAL || getType() == SRATIONAL) {
        // 2 ints stored for each rational, multiply by 2
        total <<= 1;
    }
    return total;
!!!39738935.cpp!!!	writeTagInfo(in offset : uint32_t, inout out : EndianOutput) : status_t
    assert((offset % TIFF_WORD_SIZE) == 0);
    status_t ret = OK;
    BAIL_ON_FAIL(out->write(&mTag, 0, 1), ret);
    BAIL_ON_FAIL(out->write(&mType, 0, 1), ret);
    BAIL_ON_FAIL(out->write(&mCount, 0, 1), ret);

    BAIL_ON_FAIL(out->write(&offset, 0, 1), ret);
    return ret;
!!!39739063.cpp!!!	getActualSize() : uint32_t
    uint32_t total = 0;
    for (size_t i = 0; i < mData.size(); ++i) {
        total += mData[i]->getSize();
    }
    return total;
!!!39739191.cpp!!!	writeData(in offset : uint32_t, inout out : EndianOutput) : status_t
    status_t ret = OK;
    for (uint32_t i = 0; i < mCount; ++i) {
        BAIL_ON_FAIL(mData[i]->writeData(offset, out), ret);
        offset += mData[i]->getSize();
    }
    return ret;
