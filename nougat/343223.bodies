class ActivityView
!!!1763511.java!!!	ActivityView(inout context : Context)
        this(context, null);
!!!1763639.java!!!	ActivityView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!1763767.java!!!	ActivityView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        while (context instanceof ContextWrapper) {
            if (context instanceof Activity) {
                mActivity = (Activity)context;
                break;
            }
            context = ((ContextWrapper)context).getBaseContext();
        }
        if (mActivity == null) {
            throw new IllegalStateException("The ActivityView's Context is not an Activity.");
        }

        try {
            mActivityContainer = new ActivityContainerWrapper(
                    ActivityManagerNative.getDefault().createVirtualActivityContainer(
                            mActivity.getActivityToken(), new ActivityContainerCallback(this)));
        } catch (RemoteException e) {
            throw new RuntimeException("ActivityView: Unable to create ActivityContainer. "
                    + e);
        }

        mTextureView = new TextureView(context);
        mTextureView.setSurfaceTextureListener(new ActivityViewSurfaceTextureListener());
        addView(mTextureView);

        WindowManager wm = (WindowManager)mActivity.getSystemService(Context.WINDOW_SERVICE);
        DisplayMetrics metrics = new DisplayMetrics();
        wm.getDefaultDisplay().getMetrics(metrics);
        mDensityDpi = metrics.densityDpi;

        mLastVisibility = getVisibility();

        if (DEBUG) Log.v(TAG, "ctor()");
!!!1763895.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
        mTextureView.layout(0, 0, r - l, b - t);
!!!1764023.java!!!	onVisibilityChanged(inout changedView : View, in visibility : int) : void
        super.onVisibilityChanged(changedView, visibility);

        if (mSurface != null && (visibility == View.GONE || mLastVisibility == View.GONE)) {
            if (DEBUG) Log.v(TAG, "visibility changed; enqueing runnable");
            final Surface surface = (visibility == View.GONE) ? null : mSurface;
            setSurfaceAsync(surface, mWidth, mHeight, mDensityDpi, false);
        }
        mLastVisibility = visibility;
!!!1764151.java!!!	injectInputEvent(inout event : InputEvent) : boolean
        return mActivityContainer != null && mActivityContainer.injectEvent(event);
!!!1764279.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        return injectInputEvent(event) || super.onTouchEvent(event);
!!!1764407.java!!!	onGenericMotionEvent(inout event : MotionEvent) : boolean
        if (event.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) {
            if (injectInputEvent(event)) {
                return true;
            }
        }
        return super.onGenericMotionEvent(event);
!!!1764535.java!!!	onAttachedToWindow() : void
        if (DEBUG) Log.v(TAG, "onAttachedToWindow(): mActivityContainer=" + mActivityContainer +
                " mSurface=" + mSurface);
!!!1764663.java!!!	onDetachedFromWindow() : void
        if (DEBUG) Log.v(TAG, "onDetachedFromWindow(): mActivityContainer=" + mActivityContainer +
                " mSurface=" + mSurface);
!!!1764791.java!!!	isAttachedToDisplay() : boolean
        return mSurface != null;
!!!1764919.java!!!	startActivity(inout intent : Intent) : void
        if (mActivityContainer == null) {
            throw new IllegalStateException("Attempt to call startActivity after release");
        }
        if (mSurface == null) {
            throw new IllegalStateException("Surface not yet created.");
        }
        if (DEBUG) Log.v(TAG, "startActivity(): intent=" + intent + " " +
                (isAttachedToDisplay() ? "" : "not") + " attached");
        if (mActivityContainer.startActivity(intent) == START_CANCELED) {
            throw new OperationCanceledException();
        }
!!!1765047.java!!!	startActivity(inout intentSender : IntentSender) : void
        if (mActivityContainer == null) {
            throw new IllegalStateException("Attempt to call startActivity after release");
        }
        if (mSurface == null) {
            throw new IllegalStateException("Surface not yet created.");
        }
        if (DEBUG) Log.v(TAG, "startActivityIntentSender(): intentSender=" + intentSender + " " +
                (isAttachedToDisplay() ? "" : "not") + " attached");
        final IIntentSender iIntentSender = intentSender.getTarget();
        if (mActivityContainer.startActivityIntentSender(iIntentSender) == START_CANCELED) {
            throw new OperationCanceledException();
        }
!!!1765175.java!!!	startActivity(inout pendingIntent : PendingIntent) : void
        if (mActivityContainer == null) {
            throw new IllegalStateException("Attempt to call startActivity after release");
        }
        if (mSurface == null) {
            throw new IllegalStateException("Surface not yet created.");
        }
        if (DEBUG) Log.v(TAG, "startActivityPendingIntent(): PendingIntent=" + pendingIntent + " "
                + (isAttachedToDisplay() ? "" : "not") + " attached");
        final IIntentSender iIntentSender = pendingIntent.getTarget();
        if (mActivityContainer.startActivityIntentSender(iIntentSender) == START_CANCELED) {
            throw new OperationCanceledException();
        }
!!!1765303.java!!!	release() : void
        if (DEBUG) Log.v(TAG, "release() mActivityContainer=" + mActivityContainer +
                " mSurface=" + mSurface);
        if (mActivityContainer == null) {
            Log.e(TAG, "Duplicate call to release");
            return;
        }
        synchronized (mActivityContainerLock) {
            mActivityContainer.release();
            mActivityContainer = null;
        }

        if (mSurface != null) {
            mSurface.release();
            mSurface = null;
        }

        mTextureView.setSurfaceTextureListener(null);
!!!1765431.java!!!	setSurfaceAsync(in surface : Surface, in width : int, in height : int, in densityDpi : int, in callback : boolean) : void
        mExecutor.execute(new Runnable() {
            public void run() {
                try {
                    synchronized (mActivityContainerLock) {
                        if (mActivityContainer != null) {
                            mActivityContainer.setSurface(surface, width, height, densityDpi);
                        }
                    }
                } catch (RemoteException e) {
                    throw new RuntimeException(
                        "ActivityView: Unable to set surface of ActivityContainer. ",
                        e);
                }
                if (callback) {
                    post(new Runnable() {
                        @Override
                        public void run() {
                            if (mActivityViewCallback != null) {
                                if (surface != null) {
                                    mActivityViewCallback.onSurfaceAvailable(ActivityView.this);
                                } else {
                                    mActivityViewCallback.onSurfaceDestroyed(ActivityView.this);
                                }
                            }
                        }
                    });
                }
            }
        });
!!!1765559.java!!!	setCallback(inout callback : ActivityView::ActivityViewCallback) : void
        mActivityViewCallback = callback;

        if (mSurface != null) {
            mActivityViewCallback.onSurfaceAvailable(this);
        }
