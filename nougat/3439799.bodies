class AudioCoefInterpolator
!!!39739575.cpp!!!	AudioCoefInterpolator(in nInDims : size_t, in inDims : size_t, in nOutDims : size_t, in table : audio_coef_t)
    mNumInDims = nInDims;
    memcpy(mInDims, inDims, nInDims * sizeof(size_t));
    mNumOutDims = nOutDims;
    mTable = table;
    // Initialize offsets array
    size_t dim = nInDims - 1;
    mInDimOffsets[nInDims - 1] = nOutDims;
    while (dim-- > 0) {
        mInDimOffsets[dim] = mInDimOffsets[dim + 1] * mInDims[dim + 1];
    }
!!!39739703.cpp!!!	getCoef(in intCoord : int, in fracCoord : uint32_t, in out : audio_coef_t) : void
    size_t index = 0;
    size_t dim = mNumInDims;
    while (dim-- > 0) {
        if (CC_UNLIKELY(intCoord[dim] < 0)) {
            fracCoord[dim] = 0;
        } else if (CC_UNLIKELY(intCoord[dim] >= (int)mInDims[dim] - 1)) {
            fracCoord[dim] = 0;
            index += mInDimOffsets[dim] * (mInDims[dim] - 1);
        } else {
            index += mInDimOffsets[dim] * intCoord[dim];
        }
    }
    getCoefRecurse(index, fracCoord, out, 0);
!!!39739831.cpp!!!	getCoefRecurse(in index : size_t, in fracCoord : uint32_t, in out : audio_coef_t, in dim : size_t) : void
    if (dim == mNumInDims) {
        memcpy(out, mTable + index, mNumOutDims * sizeof(audio_coef_t));
    } else {
        getCoefRecurse(index, fracCoord, out, dim + 1);
        if (CC_LIKELY(fracCoord != 0)) {
           audio_coef_t tempCoef[MAX_OUT_DIMS];
           getCoefRecurse(index + mInDimOffsets[dim], fracCoord, tempCoef,
                           dim + 1);
            size_t d = mNumOutDims;
            while (d-- > 0) {
                out[d] = interp(out[d], tempCoef[d], fracCoord[dim]);
            }
        }
    }
!!!39739959.cpp!!!	interp(in lo : audio_coef_t, in hi : audio_coef_t, in frac : uint32_t) : audio_coef_t
    int64_t delta = static_cast<int64_t>(hi-lo) * frac;
    return lo + static_cast<audio_coef_t> (delta >> 32);
