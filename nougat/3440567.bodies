class AudioPeakingFilter
!!!39743671.cpp!!!	AudioPeakingFilter(in nChannels : int, in sampleRate : int)
    configure(nChannels, sampleRate);
    reset();
!!!39743799.cpp!!!	configure(in nChannels : int, in sampleRate : int) : void
    mNiquistFreq = sampleRate * 500;
    mFrequencyFactor = ((1ull) << 42) / mNiquistFreq;
    mBiquad.configure(nChannels, sampleRate);
    setFrequency(mNominalFrequency);
    commit(true);
!!!39743927.cpp!!!	reset() : void
    setGain(0);
    setFrequency(0);
    setBandwidth(2400);
    commit(true);
!!!39744183.cpp!!!	setGain(in millibel : int32_t) : void
    mGain = millibel + 9600;
!!!39744439.cpp!!!	setBandwidth(in cents : uint32_t) : void
    mBandwidth = cents - 1;
!!!39744695.cpp!!!	setFrequency(in millihertz : uint32_t) : void
    mNominalFrequency = millihertz;
    if (CC_UNLIKELY(millihertz > mNiquistFreq / 2)) {
        millihertz = mNiquistFreq / 2;
    }
    uint32_t normFreq = static_cast<uint32_t>(
            (static_cast<uint64_t>(millihertz) * mFrequencyFactor) >> 10);
    if (CC_LIKELY(normFreq > (1 << 23))) {
        mFrequency = (Effects_log2(normFreq) - ((32-9) << 15)) << (FREQ_PRECISION_BITS - 15);
    } else {
        mFrequency = 0;
    }
!!!39744951.cpp!!!	getBandRange(inout low : uint32_t, inout high : uint32_t) : void
    // Half bandwidth, in octaves, 15-bit precision
    int32_t halfBW = (((mBandwidth + 1) / 2) << 15) / 1200;

    low = static_cast<uint32_t>((static_cast<uint64_t>(mNominalFrequency) * Effects_exp2(-halfBW + (16 << 15))) >> 16);
    if (CC_UNLIKELY(halfBW >= (16 << 15))) {
        high = mNiquistFreq;
    } else {
        high = static_cast<uint32_t>((static_cast<uint64_t>(mNominalFrequency) * Effects_exp2(halfBW + (16 << 15))) >> 16);
        if (CC_UNLIKELY(high > mNiquistFreq)) {
            high = mNiquistFreq;
        }
    }
!!!39745079.cpp!!!	commit(in immediate : bool = false) : void
    audio_coef_t coefs[5];
    int intCoord[3] = {
        mFrequency >> FREQ_PRECISION_BITS,
        mGain >> GAIN_PRECISION_BITS,
        mBandwidth >> BANDWIDTH_PRECISION_BITS
    };
    uint32_t fracCoord[3] = {
        mFrequency << (32 - FREQ_PRECISION_BITS),
        static_cast<uint32_t>(mGain) << (32 - GAIN_PRECISION_BITS),
        mBandwidth << (32 - BANDWIDTH_PRECISION_BITS)
    };
    mCoefInterp.getCoef(intCoord, fracCoord, coefs);
    mBiquad.setCoefs(coefs, immediate);
