class HDCP
!!!39747127.cpp!!!	HDCP(in createEncryptionModule : bool)
    mLibHandle = dlopen("libstagefright_hdcp.so", RTLD_NOW);

    if (mLibHandle == NULL) {
        ALOGE("Unable to locate libstagefright_hdcp.so");
        return;
    }

    typedef HDCPModule *(*CreateHDCPModuleFunc)(
            void *, HDCPModule::ObserverFunc);

    CreateHDCPModuleFunc createHDCPModule =
        mIsEncryptionModule
            ? (CreateHDCPModuleFunc)dlsym(mLibHandle, "createHDCPModule")
            : (CreateHDCPModuleFunc)dlsym(
                    mLibHandle, "createHDCPModuleForDecryption");

    if (createHDCPModule == NULL) {
        ALOGE("Unable to find symbol 'createHDCPModule'.");
    } else if ((mHDCPModule = createHDCPModule(
                    this, &HDCP::ObserveWrapper)) == NULL) {
        ALOGE("createHDCPModule failed.");
    }
!!!39747255.cpp!!!	~HDCP()
    Mutex::Autolock autoLock(mLock);

    if (mHDCPModule != NULL) {
        delete mHDCPModule;
        mHDCPModule = NULL;
    }

    if (mLibHandle != NULL) {
        dlclose(mLibHandle);
        mLibHandle = NULL;
    }
!!!39747383.cpp!!!	setObserver(in observer : sp<IHDCPObserver>) : status_t
    Mutex::Autolock autoLock(mLock);

    if (mHDCPModule == NULL) {
        return NO_INIT;
    }

    mObserver = observer;

    return OK;
!!!39747511.cpp!!!	initAsync(in host : char, in port : uint) : status_t
    Mutex::Autolock autoLock(mLock);

    if (mHDCPModule == NULL) {
        return NO_INIT;
    }

    return mHDCPModule->initAsync(host, port);
!!!39747639.cpp!!!	shutdownAsync() : status_t
    Mutex::Autolock autoLock(mLock);

    if (mHDCPModule == NULL) {
        return NO_INIT;
    }

    return mHDCPModule->shutdownAsync();
!!!39747767.cpp!!!	getCaps() : uint32_t
    Mutex::Autolock autoLock(mLock);

    if (mHDCPModule == NULL) {
        return NO_INIT;
    }

    return mHDCPModule->getCaps();
!!!39747895.cpp!!!	encrypt(in inData : void, in size : size_t, in streamCTR : uint32_t, inout outInputCTR : uint64_t, inout outData : void) : status_t
    Mutex::Autolock autoLock(mLock);

    CHECK(mIsEncryptionModule);

    if (mHDCPModule == NULL) {
        *outInputCTR = 0;

        return NO_INIT;
    }

    return mHDCPModule->encrypt(inData, size, streamCTR, outInputCTR, outData);
!!!39748023.cpp!!!	encryptNative(in graphicBuffer : sp<GraphicBuffer>, in offset : size_t, in size : size_t, in streamCTR : uint32_t, inout outInputCTR : uint64_t, inout outData : void) : status_t
    Mutex::Autolock autoLock(mLock);

    CHECK(mIsEncryptionModule);

    if (mHDCPModule == NULL) {
        *outInputCTR = 0;

        return NO_INIT;
    }

    return mHDCPModule->encryptNative(graphicBuffer->handle,
                    offset, size, streamCTR, outInputCTR, outData);
!!!39748151.cpp!!!	decrypt(in inData : void, in size : size_t, in streamCTR : uint32_t, in outInputCTR : uint64_t, inout outData : void) : status_t
    Mutex::Autolock autoLock(mLock);

    CHECK(!mIsEncryptionModule);

    if (mHDCPModule == NULL) {
        return NO_INIT;
    }

    return mHDCPModule->decrypt(inData, size, streamCTR, outInputCTR, outData);
!!!39748279.cpp!!!	ObserveWrapper(inout me : void, in msg : int, in ext1 : int, in ext2 : int) : void
    static_cast<HDCP *>(me)->observe(msg, ext1, ext2);
!!!39748407.cpp!!!	observe(in msg : int, in ext1 : int, in ext2 : int) : void
    Mutex::Autolock autoLock(mLock);

    if (mObserver != NULL) {
        mObserver->notify(msg, ext1, ext2, NULL /* obj */);
    }
