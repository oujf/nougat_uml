class MediaPlayerFactory
!!!39755703.cpp!!!	registerFactory(inout factory : MediaPlayerFactory::IFactory, in type : player_type) : status_t
    Mutex::Autolock lock_(&sLock);
    return registerFactory_l(factory, type);
!!!39755831.cpp!!!	unregisterFactory(in type : player_type) : void
    Mutex::Autolock lock_(&sLock);
    sFactoryMap.removeItem(type);
!!!39755959.cpp!!!	getPlayerType(in client : sp<IMediaPlayer>, in url : char) : player_type
    GET_PLAYER_TYPE_IMPL(client, url);
!!!39756087.cpp!!!	getPlayerType(in client : sp<IMediaPlayer>, in fd : int, in offset : int64_t, in length : int64_t) : player_type
    GET_PLAYER_TYPE_IMPL(client, fd, offset, length);
!!!39756215.cpp!!!	getPlayerType(in client : sp<IMediaPlayer>, in source : sp<IStreamSource>) : player_type
    GET_PLAYER_TYPE_IMPL(client, source);
!!!39756343.cpp!!!	getPlayerType(in client : sp<IMediaPlayer>, in source : sp<DataSource>) : player_type
    GET_PLAYER_TYPE_IMPL(client, source);
!!!39756471.cpp!!!	createPlayer(in playerType : player_type, inout cookie : void, in notifyFunc : notify_callback_f, in pid : pid_t) : sp<MediaPlayerBase>
    sp<MediaPlayerBase> p;
    IFactory* factory;
    status_t init_result;
    Mutex::Autolock lock_(&sLock);

    if (sFactoryMap.indexOfKey(playerType) < 0) {
        ALOGE("Failed to create player object of type %d, no registered"
              " factory", playerType);
        return p;
    }

    factory = sFactoryMap.valueFor(playerType);
    CHECK(NULL != factory);
    p = factory->createPlayer(pid);

    if (p == NULL) {
        ALOGE("Failed to create player object of type %d, create failed",
               playerType);
        return p;
    }

    init_result = p->initCheck();
    if (init_result == NO_ERROR) {
        p->setNotifyCallback(cookie, notifyFunc);
    } else {
        ALOGE("Failed to create player object of type %d, initCheck failed"
              " (res = %d)", playerType, init_result);
        p.clear();
    }

    return p;
!!!39756599.cpp!!!	registerBuiltinFactories() : void
    Mutex::Autolock lock_(&sLock);

    if (sInitComplete)
        return;

    registerFactory_l(new NuPlayerFactory(), NU_PLAYER);
    registerFactory_l(new TestPlayerFactory(), TEST_PLAYER);

    sInitComplete = true;
!!!39756855.cpp!!!	registerFactory_l(inout factory : MediaPlayerFactory::IFactory, in type : player_type) : status_t
    if (NULL == factory) {
        ALOGE("Failed to register MediaPlayerFactory of type %d, factory is"
              " NULL.", type);
        return BAD_VALUE;
    }

    if (sFactoryMap.indexOfKey(type) >= 0) {
        ALOGE("Failed to register MediaPlayerFactory of type %d, type is"
              " already registered.", type);
        return ALREADY_EXISTS;
    }

    if (sFactoryMap.add(type, factory) < 0) {
        ALOGE("Failed to register MediaPlayerFactory of type %d, failed to add"
              " to map.", type);
        return UNKNOWN_ERROR;
    }

    return OK;
