class ApplicationPackageManager
!!!1835575.java!!!	getUserManager() : UserManager
        synchronized (mLock) {
            if (mUserManager == null) {
                mUserManager = UserManager.get(mContext);
            }
            return mUserManager;
        }
!!!1835703.java!!!	getPackageInfo(inout packageName : String, in flags : int) : PackageInfo
        return getPackageInfoAsUser(packageName, flags, mContext.getUserId());
!!!1835831.java!!!	getPackageInfoAsUser(inout packageName : String, in flags : int, in userId : int) : PackageInfo
        try {
            PackageInfo pi = mPM.getPackageInfo(packageName, flags, userId);
            if (pi != null) {
                return pi;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(packageName);
!!!1835959.java!!!	currentToCanonicalPackageNames(inout names : String) : String
        try {
            return mPM.currentToCanonicalPackageNames(names);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1836087.java!!!	canonicalToCurrentPackageNames(inout names : String) : String
        try {
            return mPM.canonicalToCurrentPackageNames(names);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1836215.java!!!	getLaunchIntentForPackage(inout packageName : String) : Intent
        // First see if the package has an INFO activity; the existence of
        // such an activity is implied to be the desired front-door for the
        // overall package (such as if it has multiple launcher entries).
        Intent intentToResolve = new Intent(Intent.ACTION_MAIN);
        intentToResolve.addCategory(Intent.CATEGORY_INFO);
        intentToResolve.setPackage(packageName);
        List<ResolveInfo> ris = queryIntentActivities(intentToResolve, 0);

        // Otherwise, try to find a main launcher activity.
        if (ris == null || ris.size() <= 0) {
            // reuse the intent instance
            intentToResolve.removeCategory(Intent.CATEGORY_INFO);
            intentToResolve.addCategory(Intent.CATEGORY_LAUNCHER);
            intentToResolve.setPackage(packageName);
            ris = queryIntentActivities(intentToResolve, 0);
        }
        if (ris == null || ris.size() <= 0) {
            return null;
        }
        Intent intent = new Intent(intentToResolve);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setClassName(ris.get(0).activityInfo.packageName,
                ris.get(0).activityInfo.name);
        return intent;
!!!1836343.java!!!	getLeanbackLaunchIntentForPackage(inout packageName : String) : Intent
        // Try to find a main leanback_launcher activity.
        Intent intentToResolve = new Intent(Intent.ACTION_MAIN);
        intentToResolve.addCategory(Intent.CATEGORY_LEANBACK_LAUNCHER);
        intentToResolve.setPackage(packageName);
        List<ResolveInfo> ris = queryIntentActivities(intentToResolve, 0);

        if (ris == null || ris.size() <= 0) {
            return null;
        }
        Intent intent = new Intent(intentToResolve);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setClassName(ris.get(0).activityInfo.packageName,
                ris.get(0).activityInfo.name);
        return intent;
!!!1836471.java!!!	getPackageGids(inout packageName : String) : int
        return getPackageGids(packageName, 0);
!!!1836599.java!!!	getPackageGids(inout packageName : String, in flags : int) : int
        try {
            int[] gids = mPM.getPackageGids(packageName, flags, mContext.getUserId());
            if (gids != null) {
                return gids;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(packageName);
!!!1836727.java!!!	getPackageUid(inout packageName : String, in flags : int) : int
        return getPackageUidAsUser(packageName, flags, mContext.getUserId());
!!!1836855.java!!!	getPackageUidAsUser(inout packageName : String, in userId : int) : int
        return getPackageUidAsUser(packageName, 0, userId);
!!!1836983.java!!!	getPackageUidAsUser(inout packageName : String, in flags : int, in userId : int) : int
        try {
            int uid = mPM.getPackageUid(packageName, flags, userId);
            if (uid >= 0) {
                return uid;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(packageName);
!!!1837111.java!!!	getPermissionInfo(inout name : String, in flags : int) : PermissionInfo
        try {
            PermissionInfo pi = mPM.getPermissionInfo(name, flags);
            if (pi != null) {
                return pi;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(name);
!!!1837239.java!!!	queryPermissionsByGroup(inout group : String, in flags : int) : PermissionInfo
        try {
            ParceledListSlice<PermissionInfo> parceledList =
                    mPM.queryPermissionsByGroup(group, flags);
            if (parceledList != null) {
                List<PermissionInfo> pi = parceledList.getList();
                if (pi != null) {
                    return pi;
                }
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(group);
!!!1837367.java!!!	getPermissionGroupInfo(inout name : String, in flags : int) : PermissionGroupInfo
        try {
            PermissionGroupInfo pgi = mPM.getPermissionGroupInfo(name, flags);
            if (pgi != null) {
                return pgi;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(name);
!!!1837495.java!!!	getAllPermissionGroups(in flags : int) : PermissionGroupInfo
        try {
            ParceledListSlice<PermissionGroupInfo> parceledList =
                    mPM.getAllPermissionGroups(flags);
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1837623.java!!!	getApplicationInfo(inout packageName : String, in flags : int) : ApplicationInfo
        return getApplicationInfoAsUser(packageName, flags, mContext.getUserId());
!!!1837751.java!!!	getApplicationInfoAsUser(inout packageName : String, in flags : int, in userId : int) : ApplicationInfo
        try {
            ApplicationInfo ai = mPM.getApplicationInfo(packageName, flags, userId);
            if (ai != null) {
                // This is a temporary hack. Callers must use
                // createPackageContext(packageName).getApplicationInfo() to
                // get the right paths.
                return maybeAdjustApplicationInfo(ai);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(packageName);
!!!1837879.java!!!	maybeAdjustApplicationInfo(inout info : ApplicationInfo) : ApplicationInfo
        // If we're dealing with a multi-arch application that has both
        // 32 and 64 bit shared libraries, we might need to choose the secondary
        // depending on what the current runtime's instruction set is.
        if (info.primaryCpuAbi != null && info.secondaryCpuAbi != null) {
            final String runtimeIsa = VMRuntime.getRuntime().vmInstructionSet();

            // Get the instruction set that the libraries of secondary Abi is supported.
            // In presence of a native bridge this might be different than the one secondary Abi used.
            String secondaryIsa = VMRuntime.getInstructionSet(info.secondaryCpuAbi);
            final String secondaryDexCodeIsa = SystemProperties.get("ro.dalvik.vm.isa." + secondaryIsa);
            secondaryIsa = secondaryDexCodeIsa.isEmpty() ? secondaryIsa : secondaryDexCodeIsa;

            // If the runtimeIsa is the same as the primary isa, then we do nothing.
            // Everything will be set up correctly because info.nativeLibraryDir will
            // correspond to the right ISA.
            if (runtimeIsa.equals(secondaryIsa)) {
                ApplicationInfo modified = new ApplicationInfo(info);
                modified.nativeLibraryDir = info.secondaryNativeLibraryDir;
                return modified;
            }
        }
        return info;
!!!1838007.java!!!	getActivityInfo(inout className : ComponentName, in flags : int) : ActivityInfo
        try {
            ActivityInfo ai = mPM.getActivityInfo(className, flags, mContext.getUserId());
            if (ai != null) {
                return ai;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(className.toString());
!!!1838135.java!!!	getReceiverInfo(inout className : ComponentName, in flags : int) : ActivityInfo
        try {
            ActivityInfo ai = mPM.getReceiverInfo(className, flags, mContext.getUserId());
            if (ai != null) {
                return ai;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(className.toString());
!!!1838263.java!!!	getServiceInfo(inout className : ComponentName, in flags : int) : ServiceInfo
        try {
            ServiceInfo si = mPM.getServiceInfo(className, flags, mContext.getUserId());
            if (si != null) {
                return si;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(className.toString());
!!!1838391.java!!!	getProviderInfo(inout className : ComponentName, in flags : int) : ProviderInfo
        try {
            ProviderInfo pi = mPM.getProviderInfo(className, flags, mContext.getUserId());
            if (pi != null) {
                return pi;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(className.toString());
!!!1838519.java!!!	getSystemSharedLibraryNames() : String
        try {
            return mPM.getSystemSharedLibraryNames();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1838647.java!!!	getServicesSystemSharedLibraryPackageName() : String
        try {
            return mPM.getServicesSystemSharedLibraryPackageName();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1838775.java!!!	getSharedSystemSharedLibraryPackageName() : String
        try {
            return mPM.getSharedSystemSharedLibraryPackageName();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1838903.java!!!	getSystemAvailableFeatures() : FeatureInfo
        try {
            ParceledListSlice<FeatureInfo> parceledList =
                    mPM.getSystemAvailableFeatures();
            if (parceledList == null) {
                return new FeatureInfo[0];
            }
            final List<FeatureInfo> list = parceledList.getList();
            final FeatureInfo[] res = new FeatureInfo[list.size()];
            for (int i = 0; i < res.length; i++) {
                res[i] = list.get(i);
            }
            return res;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1839031.java!!!	hasSystemFeature(inout name : String) : boolean
        return hasSystemFeature(name, 0);
!!!1839159.java!!!	hasSystemFeature(inout name : String, in version : int) : boolean
        try {
            return mPM.hasSystemFeature(name, version);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1839287.java!!!	checkPermission(inout permName : String, inout pkgName : String) : int
        try {
            return mPM.checkPermission(permName, pkgName, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1839415.java!!!	isPermissionRevokedByPolicy(inout permName : String, inout pkgName : String) : boolean
        try {
            return mPM.isPermissionRevokedByPolicy(permName, pkgName, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1839543.java!!!	getPermissionControllerPackageName() : String
        synchronized (mLock) {
            if (mPermissionsControllerPackageName == null) {
                try {
                    mPermissionsControllerPackageName = mPM.getPermissionControllerPackageName();
                } catch (RemoteException e) {
                    throw e.rethrowFromSystemServer();
                }
            }
            return mPermissionsControllerPackageName;
        }
!!!1839671.java!!!	addPermission(inout info : PermissionInfo) : boolean
        try {
            return mPM.addPermission(info);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1839799.java!!!	addPermissionAsync(inout info : PermissionInfo) : boolean
        try {
            return mPM.addPermissionAsync(info);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1839927.java!!!	removePermission(inout name : String) : void
        try {
            mPM.removePermission(name);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1840055.java!!!	grantRuntimePermission(inout packageName : String, inout permissionName : String, inout user : UserHandle) : void
        try {
            mPM.grantRuntimePermission(packageName, permissionName, user.getIdentifier());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1840183.java!!!	revokeRuntimePermission(inout packageName : String, inout permissionName : String, inout user : UserHandle) : void
        try {
            mPM.revokeRuntimePermission(packageName, permissionName, user.getIdentifier());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1840311.java!!!	getPermissionFlags(inout permissionName : String, inout packageName : String, inout user : UserHandle) : int
        try {
            return mPM.getPermissionFlags(permissionName, packageName, user.getIdentifier());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1840439.java!!!	updatePermissionFlags(inout permissionName : String, inout packageName : String, in flagMask : int, in flagValues : int, inout user : UserHandle) : void
        try {
            mPM.updatePermissionFlags(permissionName, packageName, flagMask,
                    flagValues, user.getIdentifier());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1840567.java!!!	shouldShowRequestPermissionRationale(inout permission : String) : boolean
        try {
            return mPM.shouldShowRequestPermissionRationale(permission,
                    mContext.getPackageName(), mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1840695.java!!!	checkSignatures(inout pkg1 : String, inout pkg2 : String) : int
        try {
            return mPM.checkSignatures(pkg1, pkg2);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1840823.java!!!	checkSignatures(in uid1 : int, in uid2 : int) : int
        try {
            return mPM.checkUidSignatures(uid1, uid2);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1840951.java!!!	getPackagesForUid(in uid : int) : String
        try {
            return mPM.getPackagesForUid(uid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1841079.java!!!	getNameForUid(in uid : int) : String
        try {
            return mPM.getNameForUid(uid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1841207.java!!!	getUidForSharedUser(inout sharedUserName : String) : int
        try {
            int uid = mPM.getUidForSharedUser(sharedUserName);
            if(uid != -1) {
                return uid;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
        throw new NameNotFoundException("No shared userid for user:"+sharedUserName);
!!!1841335.java!!!	getInstalledPackages(in flags : int) : PackageInfo
        return getInstalledPackagesAsUser(flags, mContext.getUserId());
!!!1841463.java!!!	getInstalledPackagesAsUser(in flags : int, in userId : int) : PackageInfo
        try {
            ParceledListSlice<PackageInfo> parceledList =
                    mPM.getInstalledPackages(flags, userId);
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1841591.java!!!	getPackagesHoldingPermissions(inout permissions : String, in flags : int) : PackageInfo
        final int userId = mContext.getUserId();
        try {
            ParceledListSlice<PackageInfo> parceledList =
                    mPM.getPackagesHoldingPermissions(permissions, flags, userId);
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1841719.java!!!	getInstalledApplications(in flags : int) : ApplicationInfo
        final int userId = mContext.getUserId();
        try {
            ParceledListSlice<ApplicationInfo> parceledList =
                    mPM.getInstalledApplications(flags, userId);
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1841847.java!!!	getEphemeralApplications() : EphemeralApplicationInfo
        try {
            ParceledListSlice<EphemeralApplicationInfo> slice =
                    mPM.getEphemeralApplications(mContext.getUserId());
            if (slice != null) {
                return slice.getList();
            }
            return Collections.emptyList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1841975.java!!!	getEphemeralApplicationIcon(inout packageName : String) : Drawable
        try {
            Bitmap bitmap = mPM.getEphemeralApplicationIcon(
                    packageName, mContext.getUserId());
            if (bitmap != null) {
                return new BitmapDrawable(null, bitmap);
            }
            return null;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1842103.java!!!	isEphemeralApplication() : boolean
        try {
            return mPM.isEphemeralApplication(
                    mContext.getPackageName(), mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1842231.java!!!	getEphemeralCookieMaxSizeBytes() : int
        return Settings.Global.getInt(mContext.getContentResolver(),
                Settings.Global.EPHEMERAL_COOKIE_MAX_SIZE_BYTES,
                DEFAULT_EPHEMERAL_COOKIE_MAX_SIZE_BYTES);
!!!1842359.java!!!	getEphemeralCookie() : byte
        try {
            final byte[] cookie = mPM.getEphemeralApplicationCookie(
                    mContext.getPackageName(), mContext.getUserId());
            if (cookie != null) {
                return cookie;
            } else {
                return EmptyArray.BYTE;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1842487.java!!!	setEphemeralCookie(inout cookie : byte) : boolean
        try {
            return mPM.setEphemeralApplicationCookie(
                    mContext.getPackageName(), cookie, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1842615.java!!!	resolveActivity(inout intent : Intent, in flags : int) : ResolveInfo
        return resolveActivityAsUser(intent, flags, mContext.getUserId());
!!!1842743.java!!!	resolveActivityAsUser(inout intent : Intent, in flags : int, in userId : int) : ResolveInfo
        try {
            return mPM.resolveIntent(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1842871.java!!!	queryIntentActivities(inout intent : Intent, in flags : int) : ResolveInfo
        return queryIntentActivitiesAsUser(intent, flags, mContext.getUserId());
!!!1842999.java!!!	queryIntentActivitiesAsUser(inout intent : Intent, in flags : int, in userId : int) : ResolveInfo
        try {
            ParceledListSlice<ResolveInfo> parceledList =
                    mPM.queryIntentActivities(intent,
                            intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                            flags, userId);
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1843127.java!!!	queryIntentActivityOptions(inout caller : ComponentName, inout specifics : Intent, inout intent : Intent, in flags : int) : ResolveInfo
        final ContentResolver resolver = mContext.getContentResolver();

        String[] specificTypes = null;
        if (specifics != null) {
            final int N = specifics.length;
            for (int i=0; i<N; i++) {
                Intent sp = specifics[i];
                if (sp != null) {
                    String t = sp.resolveTypeIfNeeded(resolver);
                    if (t != null) {
                        if (specificTypes == null) {
                            specificTypes = new String[N];
                        }
                        specificTypes[i] = t;
                    }
                }
            }
        }

        try {
            ParceledListSlice<ResolveInfo> parceledList =
                    mPM.queryIntentActivityOptions(caller, specifics, specificTypes, intent,
                    intent.resolveTypeIfNeeded(resolver), flags, mContext.getUserId());
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1843255.java!!!	queryBroadcastReceiversAsUser(inout intent : Intent, in flags : int, in userId : int) : ResolveInfo
        try {
            ParceledListSlice<ResolveInfo> parceledList =
                    mPM.queryIntentReceivers(intent,
                            intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                            flags,  userId);
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1843383.java!!!	queryBroadcastReceivers(inout intent : Intent, in flags : int) : ResolveInfo
        return queryBroadcastReceiversAsUser(intent, flags, mContext.getUserId());
!!!1843511.java!!!	resolveService(inout intent : Intent, in flags : int) : ResolveInfo
        try {
            return mPM.resolveService(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1843639.java!!!	queryIntentServicesAsUser(inout intent : Intent, in flags : int, in userId : int) : ResolveInfo
        try {
            ParceledListSlice<ResolveInfo> parceledList =
                    mPM.queryIntentServices(intent,
                    intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                    flags, userId);
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1843767.java!!!	queryIntentServices(inout intent : Intent, in flags : int) : ResolveInfo
        return queryIntentServicesAsUser(intent, flags, mContext.getUserId());
!!!1843895.java!!!	queryIntentContentProvidersAsUser(inout intent : Intent, in flags : int, in userId : int) : ResolveInfo
        try {
            ParceledListSlice<ResolveInfo> parceledList =
                    mPM.queryIntentContentProviders(intent,
                            intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                            flags, userId);
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1844023.java!!!	queryIntentContentProviders(inout intent : Intent, in flags : int) : ResolveInfo
        return queryIntentContentProvidersAsUser(intent, flags, mContext.getUserId());
!!!1844151.java!!!	resolveContentProvider(inout name : String, in flags : int) : ProviderInfo
        return resolveContentProviderAsUser(name, flags, mContext.getUserId());
!!!1844279.java!!!	resolveContentProviderAsUser(inout name : String, in flags : int, in userId : int) : ProviderInfo
        try {
            return mPM.resolveContentProvider(name, flags, userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1844407.java!!!	queryContentProviders(inout processName : String, in uid : int, in flags : int) : ProviderInfo
        try {
            ParceledListSlice<ProviderInfo> slice =
                    mPM.queryContentProviders(processName, uid, flags);
            return slice != null ? slice.getList() : Collections.<ProviderInfo>emptyList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1844535.java!!!	getInstrumentationInfo(inout className : ComponentName, in flags : int) : InstrumentationInfo
        try {
            InstrumentationInfo ii = mPM.getInstrumentationInfo(
                className, flags);
            if (ii != null) {
                return ii;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        throw new NameNotFoundException(className.toString());
!!!1844663.java!!!	queryInstrumentation(inout targetPackage : String, in flags : int) : InstrumentationInfo
        try {
            ParceledListSlice<InstrumentationInfo> parceledList =
                    mPM.queryInstrumentation(targetPackage, flags);
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1844791.java!!!	getDrawable(inout packageName : String, in resId : int, inout appInfo : ApplicationInfo) : Drawable
        final ResourceName name = new ResourceName(packageName, resId);
        final Drawable cachedIcon = getCachedIcon(name);
        if (cachedIcon != null) {
            return cachedIcon;
        }

        if (appInfo == null) {
            try {
                appInfo = getApplicationInfo(packageName, sDefaultFlags);
            } catch (NameNotFoundException e) {
                return null;
            }
        }

        if (resId != 0) {
            try {
                final Resources r = getResourcesForApplication(appInfo);
                final Drawable dr = r.getDrawable(resId, null);
                if (dr != null) {
                    putCachedIcon(name, dr);
                }

                if (false) {
                    RuntimeException e = new RuntimeException("here");
                    e.fillInStackTrace();
                    Log.w(TAG, "Getting drawable 0x" + Integer.toHexString(resId)
                                    + " from package " + packageName
                                    + ": app scale=" + r.getCompatibilityInfo().applicationScale
                                    + ", caller scale=" + mContext.getResources()
                                    .getCompatibilityInfo().applicationScale,
                            e);
                }
                if (DEBUG_ICONS) {
                    Log.v(TAG, "Getting drawable 0x"
                            + Integer.toHexString(resId) + " from " + r
                            + ": " + dr);
                }
                return dr;
            } catch (NameNotFoundException e) {
                Log.w("PackageManager", "Failure retrieving resources for "
                        + appInfo.packageName);
            } catch (Resources.NotFoundException e) {
                Log.w("PackageManager", "Failure retrieving resources for "
                        + appInfo.packageName + ": " + e.getMessage());
            } catch (Exception e) {
                // If an exception was thrown, fall through to return
                // default icon.
                Log.w("PackageManager", "Failure retrieving icon 0x"
                        + Integer.toHexString(resId) + " in package "
                        + packageName, e);
            }
        }

        return null;
!!!1844919.java!!!	getActivityIcon(inout activityName : ComponentName) : Drawable
        return getActivityInfo(activityName, sDefaultFlags).loadIcon(this);
!!!1845047.java!!!	getActivityIcon(inout intent : Intent) : Drawable
        if (intent.getComponent() != null) {
            return getActivityIcon(intent.getComponent());
        }

        ResolveInfo info = resolveActivity(
            intent, PackageManager.MATCH_DEFAULT_ONLY);
        if (info != null) {
            return info.activityInfo.loadIcon(this);
        }

        throw new NameNotFoundException(intent.toUri(0));
!!!1845175.java!!!	getDefaultActivityIcon() : Drawable
        return Resources.getSystem().getDrawable(
            com.android.internal.R.drawable.sym_def_app_icon);
!!!1845303.java!!!	getApplicationIcon(inout info : ApplicationInfo) : Drawable
        return info.loadIcon(this);
!!!1845431.java!!!	getApplicationIcon(inout packageName : String) : Drawable
        return getApplicationIcon(getApplicationInfo(packageName, sDefaultFlags));
!!!1845559.java!!!	getActivityBanner(inout activityName : ComponentName) : Drawable
        return getActivityInfo(activityName, sDefaultFlags).loadBanner(this);
!!!1845687.java!!!	getActivityBanner(inout intent : Intent) : Drawable
        if (intent.getComponent() != null) {
            return getActivityBanner(intent.getComponent());
        }

        ResolveInfo info = resolveActivity(
                intent, PackageManager.MATCH_DEFAULT_ONLY);
        if (info != null) {
            return info.activityInfo.loadBanner(this);
        }

        throw new NameNotFoundException(intent.toUri(0));
!!!1845815.java!!!	getApplicationBanner(inout info : ApplicationInfo) : Drawable
        return info.loadBanner(this);
!!!1845943.java!!!	getApplicationBanner(inout packageName : String) : Drawable
        return getApplicationBanner(getApplicationInfo(packageName, sDefaultFlags));
!!!1846071.java!!!	getActivityLogo(inout activityName : ComponentName) : Drawable
        return getActivityInfo(activityName, sDefaultFlags).loadLogo(this);
!!!1846199.java!!!	getActivityLogo(inout intent : Intent) : Drawable
        if (intent.getComponent() != null) {
            return getActivityLogo(intent.getComponent());
        }

        ResolveInfo info = resolveActivity(
            intent, PackageManager.MATCH_DEFAULT_ONLY);
        if (info != null) {
            return info.activityInfo.loadLogo(this);
        }

        throw new NameNotFoundException(intent.toUri(0));
!!!1846327.java!!!	getApplicationLogo(inout info : ApplicationInfo) : Drawable
        return info.loadLogo(this);
!!!1846455.java!!!	getApplicationLogo(inout packageName : String) : Drawable
        return getApplicationLogo(getApplicationInfo(packageName, sDefaultFlags));
!!!1846583.java!!!	getManagedUserBadgedDrawable(inout drawable : Drawable, inout badgeLocation : Rect, in badgeDensity : int) : Drawable
        Drawable badgeDrawable = getDrawableForDensity(
            com.android.internal.R.drawable.ic_corp_badge, badgeDensity);
        return getBadgedDrawable(drawable, badgeDrawable, badgeLocation, true);
!!!1846711.java!!!	getUserBadgedIcon(inout icon : Drawable, inout user : UserHandle) : Drawable
        final int badgeResId = getBadgeResIdForUser(user.getIdentifier());
        if (badgeResId == 0) {
            return icon;
        }
        Drawable badgeIcon = getDrawable("system", badgeResId, null);
        return getBadgedDrawable(icon, badgeIcon, null, true);
!!!1846839.java!!!	getUserBadgedDrawableForDensity(inout drawable : Drawable, inout user : UserHandle, inout badgeLocation : Rect, in badgeDensity : int) : Drawable
        Drawable badgeDrawable = getUserBadgeForDensity(user, badgeDensity);
        if (badgeDrawable == null) {
            return drawable;
        }
        return getBadgedDrawable(drawable, badgeDrawable, badgeLocation, true);
!!!1846967.java!!!	getUserBadgeForDensity(inout user : UserHandle, in density : int) : Drawable
        return getManagedProfileIconForDensity(user, com.android.internal.R.drawable.ic_corp_badge,
                density);
!!!1847095.java!!!	getUserBadgeForDensityNoBackground(inout user : UserHandle, in density : int) : Drawable
        return getManagedProfileIconForDensity(user,
                com.android.internal.R.drawable.ic_corp_badge_no_background, density);
!!!1847223.java!!!	getDrawableForDensity(in drawableId : int, in density : int) : Drawable
        if (density <= 0) {
            density = mContext.getResources().getDisplayMetrics().densityDpi;
        }
        return Resources.getSystem().getDrawableForDensity(drawableId, density);
!!!1847351.java!!!	getManagedProfileIconForDensity(inout user : UserHandle, in drawableId : int, in density : int) : Drawable
        if (isManagedProfile(user.getIdentifier())) {
            return getDrawableForDensity(drawableId, density);
        }
        return null;
!!!1847479.java!!!	getUserBadgedLabel(inout label : CharSequence, inout user : UserHandle) : CharSequence
        if (isManagedProfile(user.getIdentifier())) {
            return Resources.getSystem().getString(
                    com.android.internal.R.string.managed_profile_label_badge, label);
        }
        return label;
!!!1847607.java!!!	getResourcesForActivity(inout activityName : ComponentName) : Resources
        return getResourcesForApplication(
            getActivityInfo(activityName, sDefaultFlags).applicationInfo);
!!!1847735.java!!!	getResourcesForApplication(inout app : ApplicationInfo) : Resources
        if (app.packageName.equals("system")) {
            return mContext.mMainThread.getSystemContext().getResources();
        }
        final boolean sameUid = (app.uid == Process.myUid());
        try {
            return mContext.mMainThread.getTopLevelResources(
                    sameUid ? app.sourceDir : app.publicSourceDir,
                    sameUid ? app.splitSourceDirs : app.splitPublicSourceDirs,
                    app.resourceDirs, app.sharedLibraryFiles, Display.DEFAULT_DISPLAY,
                    mContext.mPackageInfo);
        } catch (Resources.NotFoundException cause) {
            final NameNotFoundException ex =
                    new NameNotFoundException("Unable to open " + app.publicSourceDir);
            ex.initCause(cause);
            throw ex;
        }
!!!1847863.java!!!	getResourcesForApplication(inout appPackageName : String) : Resources
        return getResourcesForApplication(
            getApplicationInfo(appPackageName, sDefaultFlags));
!!!1847991.java!!!	getResourcesForApplicationAsUser(inout appPackageName : String, in userId : int) : Resources
        if (userId < 0) {
            throw new IllegalArgumentException(
                    "Call does not support special user #" + userId);
        }
        if ("system".equals(appPackageName)) {
            return mContext.mMainThread.getSystemContext().getResources();
        }
        try {
            ApplicationInfo ai = mPM.getApplicationInfo(appPackageName, sDefaultFlags, userId);
            if (ai != null) {
                return getResourcesForApplication(ai);
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
        throw new NameNotFoundException("Package " + appPackageName + " doesn't exist");
!!!1848119.java!!!	isSafeMode() : boolean
        try {
            if (mCachedSafeMode < 0) {
                mCachedSafeMode = mPM.isSafeMode() ? 1 : 0;
            }
            return mCachedSafeMode != 0;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1848247.java!!!	addOnPermissionsChangeListener(inout listener : PackageManager::OnPermissionsChangedListener) : void
        synchronized (mPermissionListeners) {
            if (mPermissionListeners.get(listener) != null) {
                return;
            }
            OnPermissionsChangeListenerDelegate delegate =
                    new OnPermissionsChangeListenerDelegate(listener, Looper.getMainLooper());
            try {
                mPM.addOnPermissionsChangeListener(delegate);
                mPermissionListeners.put(listener, delegate);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
        }
!!!1848375.java!!!	removeOnPermissionsChangeListener(inout listener : PackageManager::OnPermissionsChangedListener) : void
        synchronized (mPermissionListeners) {
            IOnPermissionsChangeListener delegate = mPermissionListeners.get(listener);
            if (delegate != null) {
                try {
                    mPM.removeOnPermissionsChangeListener(delegate);
                    mPermissionListeners.remove(listener);
                } catch (RemoteException e) {
                    throw e.rethrowFromSystemServer();
                }
            }
        }
!!!1848503.java!!!	configurationChanged() : void
        synchronized (sSync) {
            sIconCache.clear();
            sStringCache.clear();
        }
!!!1848631.java!!!	ApplicationPackageManager(inout context : ContextImpl, inout pm : IPackageManager)
        mContext = context;
        mPM = pm;
!!!1848759.java!!!	getCachedIcon(inout name : ApplicationPackageManager::ResourceName) : Drawable
        synchronized (sSync) {
            final WeakReference<Drawable.ConstantState> wr = sIconCache.get(name);
            if (DEBUG_ICONS) Log.v(TAG, "Get cached weak drawable ref for "
                                   + name + ": " + wr);
            if (wr != null) {   // we have the activity
                final Drawable.ConstantState state = wr.get();
                if (state != null) {
                    if (DEBUG_ICONS) {
                        Log.v(TAG, "Get cached drawable state for " + name + ": " + state);
                    }
                    // Note: It's okay here to not use the newDrawable(Resources) variant
                    //       of the API. The ConstantState comes from a drawable that was
                    //       originally created by passing the proper app Resources instance
                    //       which means the state should already contain the proper
                    //       resources specific information (like density.) See
                    //       BitmapDrawable.BitmapState for instance.
                    return state.newDrawable();
                }
                // our entry has been purged
                sIconCache.remove(name);
            }
        }
        return null;
!!!1848887.java!!!	putCachedIcon(inout name : ApplicationPackageManager::ResourceName, inout dr : Drawable) : void
        synchronized (sSync) {
            sIconCache.put(name, new WeakReference<>(dr.getConstantState()));
            if (DEBUG_ICONS) Log.v(TAG, "Added cached drawable state for " + name + ": " + dr);
        }
!!!1849015.java!!!	handlePackageBroadcast(in cmd : int, inout pkgList : String, inout hasPkgInfo : boolean) : void
        boolean immediateGc = false;
        if (cmd == IApplicationThread.EXTERNAL_STORAGE_UNAVAILABLE) {
            immediateGc = true;
        }
        if (pkgList != null && (pkgList.length > 0)) {
            boolean needCleanup = false;
            for (String ssp : pkgList) {
                synchronized (sSync) {
                    for (int i=sIconCache.size()-1; i>=0; i--) {
                        ResourceName nm = sIconCache.keyAt(i);
                        if (nm.packageName.equals(ssp)) {
                            //Log.i(TAG, "Removing cached drawable for " + nm);
                            sIconCache.removeAt(i);
                            needCleanup = true;
                        }
                    }
                    for (int i=sStringCache.size()-1; i>=0; i--) {
                        ResourceName nm = sStringCache.keyAt(i);
                        if (nm.packageName.equals(ssp)) {
                            //Log.i(TAG, "Removing cached string for " + nm);
                            sStringCache.removeAt(i);
                            needCleanup = true;
                        }
                    }
                }
            }
            if (needCleanup || hasPkgInfo) {
                if (immediateGc) {
                    // Schedule an immediate gc.
                    Runtime.getRuntime().gc();
                } else {
                    ActivityThread.currentActivityThread().scheduleGcIdler();
                }
            }
        }
!!!1850039.java!!!	getCachedString(inout name : ApplicationPackageManager::ResourceName) : CharSequence
        synchronized (sSync) {
            WeakReference<CharSequence> wr = sStringCache.get(name);
            if (wr != null) {   // we have the activity
                CharSequence cs = wr.get();
                if (cs != null) {
                    return cs;
                }
                // our entry has been purged
                sStringCache.remove(name);
            }
        }
        return null;
!!!1850167.java!!!	putCachedString(inout name : ApplicationPackageManager::ResourceName, inout cs : CharSequence) : void
        synchronized (sSync) {
            sStringCache.put(name, new WeakReference<CharSequence>(cs));
        }
!!!1850295.java!!!	getText(inout packageName : String, in resid : int, inout appInfo : ApplicationInfo) : CharSequence
        ResourceName name = new ResourceName(packageName, resid);
        CharSequence text = getCachedString(name);
        if (text != null) {
            return text;
        }
        if (appInfo == null) {
            try {
                appInfo = getApplicationInfo(packageName, sDefaultFlags);
            } catch (NameNotFoundException e) {
                return null;
            }
        }
        try {
            Resources r = getResourcesForApplication(appInfo);
            text = r.getText(resid);
            putCachedString(name, text);
            return text;
        } catch (NameNotFoundException e) {
            Log.w("PackageManager", "Failure retrieving resources for "
                  + appInfo.packageName);
        } catch (RuntimeException e) {
            // If an exception was thrown, fall through to return
            // default icon.
            Log.w("PackageManager", "Failure retrieving text 0x"
                  + Integer.toHexString(resid) + " in package "
                  + packageName, e);
        }
        return null;
!!!1850423.java!!!	getXml(inout packageName : String, in resid : int, inout appInfo : ApplicationInfo) : XmlResourceParser
        if (appInfo == null) {
            try {
                appInfo = getApplicationInfo(packageName, sDefaultFlags);
            } catch (NameNotFoundException e) {
                return null;
            }
        }
        try {
            Resources r = getResourcesForApplication(appInfo);
            return r.getXml(resid);
        } catch (RuntimeException e) {
            // If an exception was thrown, fall through to return
            // default icon.
            Log.w("PackageManager", "Failure retrieving xml 0x"
                  + Integer.toHexString(resid) + " in package "
                  + packageName, e);
        } catch (NameNotFoundException e) {
            Log.w("PackageManager", "Failure retrieving resources for "
                  + appInfo.packageName);
        }
        return null;
!!!1850551.java!!!	getApplicationLabel(inout info : ApplicationInfo) : CharSequence
        return info.loadLabel(this);
!!!1850679.java!!!	installPackage(inout packageURI : Uri, inout observer : IPackageInstallObserver, in flags : int, inout installerPackageName : String) : void
        installCommon(packageURI, new LegacyPackageInstallObserver(observer), flags,
                installerPackageName, mContext.getUserId());
!!!1850807.java!!!	installPackage(inout packageURI : Uri, inout observer : PackageInstallObserver, in flags : int, inout installerPackageName : String) : void
        installCommon(packageURI, observer, flags, installerPackageName, mContext.getUserId());
!!!1850935.java!!!	installCommon(inout packageURI : Uri, inout observer : PackageInstallObserver, in flags : int, inout installerPackageName : String, in userId : int) : void
        if (!"file".equals(packageURI.getScheme())) {
            throw new UnsupportedOperationException("Only file:// URIs are supported");
        }

        final String originPath = packageURI.getPath();
        try {
            mPM.installPackageAsUser(originPath, observer.getBinder(), flags, installerPackageName,
                    userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1851063.java!!!	installExistingPackage(inout packageName : String) : int
        return installExistingPackageAsUser(packageName, mContext.getUserId());
!!!1851191.java!!!	installExistingPackageAsUser(inout packageName : String, in userId : int) : int
        try {
            int res = mPM.installExistingPackageAsUser(packageName, userId);
            if (res == INSTALL_FAILED_INVALID_URI) {
                throw new NameNotFoundException("Package " + packageName + " doesn't exist");
            }
            return res;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1851319.java!!!	verifyPendingInstall(in id : int, in response : int) : void
        try {
            mPM.verifyPendingInstall(id, response);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1851447.java!!!	extendVerificationTimeout(in id : int, in verificationCodeAtTimeout : int, in millisecondsToDelay : long) : void
        try {
            mPM.extendVerificationTimeout(id, verificationCodeAtTimeout, millisecondsToDelay);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1851575.java!!!	verifyIntentFilter(in id : int, in verificationCode : int, inout failedDomains : List<String>) : void
        try {
            mPM.verifyIntentFilter(id, verificationCode, failedDomains);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1851703.java!!!	getIntentVerificationStatusAsUser(inout packageName : String, in userId : int) : int
        try {
            return mPM.getIntentVerificationStatus(packageName, userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1851831.java!!!	updateIntentVerificationStatusAsUser(inout packageName : String, in status : int, in userId : int) : boolean
        try {
            return mPM.updateIntentVerificationStatus(packageName, status, userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1851959.java!!!	getIntentFilterVerifications(inout packageName : String) : IntentFilterVerificationInfo
        try {
            ParceledListSlice<IntentFilterVerificationInfo> parceledList =
                    mPM.getIntentFilterVerifications(packageName);
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1852087.java!!!	getAllIntentFilters(inout packageName : String) : IntentFilter
        try {
            ParceledListSlice<IntentFilter> parceledList =
                    mPM.getAllIntentFilters(packageName);
            if (parceledList == null) {
                return Collections.emptyList();
            }
            return parceledList.getList();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1852215.java!!!	getDefaultBrowserPackageNameAsUser(in userId : int) : String
        try {
            return mPM.getDefaultBrowserPackageName(userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1852343.java!!!	setDefaultBrowserPackageNameAsUser(inout packageName : String, in userId : int) : boolean
        try {
            return mPM.setDefaultBrowserPackageName(packageName, userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1852471.java!!!	setInstallerPackageName(inout targetPackage : String, inout installerPackageName : String) : void
        try {
            mPM.setInstallerPackageName(targetPackage, installerPackageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1852599.java!!!	getInstallerPackageName(inout packageName : String) : String
        try {
            return mPM.getInstallerPackageName(packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1852727.java!!!	getMoveStatus(in moveId : int) : int
        try {
            return mPM.getMoveStatus(moveId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1852855.java!!!	registerMoveCallback(inout callback : PackageManager::MoveCallback, inout handler : Handler) : void
        synchronized (mDelegates) {
            final MoveCallbackDelegate delegate = new MoveCallbackDelegate(callback,
                    handler.getLooper());
            try {
                mPM.registerMoveCallback(delegate);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
            mDelegates.add(delegate);
        }
!!!1852983.java!!!	unregisterMoveCallback(inout callback : PackageManager::MoveCallback) : void
        synchronized (mDelegates) {
            for (Iterator<MoveCallbackDelegate> i = mDelegates.iterator(); i.hasNext();) {
                final MoveCallbackDelegate delegate = i.next();
                if (delegate.mCallback == callback) {
                    try {
                        mPM.unregisterMoveCallback(delegate);
                    } catch (RemoteException e) {
                        throw e.rethrowFromSystemServer();
                    }
                    i.remove();
                }
            }
        }
!!!1853111.java!!!	movePackage(inout packageName : String, inout vol : VolumeInfo) : int
        try {
            final String volumeUuid;
            if (VolumeInfo.ID_PRIVATE_INTERNAL.equals(vol.id)) {
                volumeUuid = StorageManager.UUID_PRIVATE_INTERNAL;
            } else if (vol.isPrimaryPhysical()) {
                volumeUuid = StorageManager.UUID_PRIMARY_PHYSICAL;
            } else {
                volumeUuid = Preconditions.checkNotNull(vol.fsUuid);
            }

            return mPM.movePackage(packageName, volumeUuid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1853239.java!!!	getPackageCurrentVolume(inout app : ApplicationInfo) : VolumeInfo
        final StorageManager storage = mContext.getSystemService(StorageManager.class);
        if (app.isInternal()) {
            return storage.findVolumeById(VolumeInfo.ID_PRIVATE_INTERNAL);
        } else if (app.isExternalAsec()) {
            return storage.getPrimaryPhysicalVolume();
        } else {
            return storage.findVolumeByUuid(app.volumeUuid);
        }
!!!1853367.java!!!	getPackageCandidateVolumes(inout app : ApplicationInfo) : VolumeInfo
        final StorageManager storage = mContext.getSystemService(StorageManager.class);
        final VolumeInfo currentVol = getPackageCurrentVolume(app);
        final List<VolumeInfo> vols = storage.getVolumes();
        final List<VolumeInfo> candidates = new ArrayList<>();
        for (VolumeInfo vol : vols) {
            if (Objects.equals(vol, currentVol) || isPackageCandidateVolume(mContext, app, vol)) {
                candidates.add(vol);
            }
        }
        return candidates;
!!!1853495.java!!!	isPackageCandidateVolume(inout context : ContextImpl, inout app : ApplicationInfo, inout vol : VolumeInfo) : boolean
        final boolean forceAllowOnExternal = Settings.Global.getInt(
                context.getContentResolver(), Settings.Global.FORCE_ALLOW_ON_EXTERNAL, 0) != 0;
        // Private internal is always an option
        if (VolumeInfo.ID_PRIVATE_INTERNAL.equals(vol.getId())) {
            return true;
        }

        // System apps and apps demanding internal storage can't be moved
        // anywhere else
        if (app.isSystemApp()) {
            return false;
        }
        if (!forceAllowOnExternal
                && (app.installLocation == PackageInfo.INSTALL_LOCATION_INTERNAL_ONLY
                        || app.installLocation == PackageInfo.INSTALL_LOCATION_UNSPECIFIED)) {
            return false;
        }

        // Gotta be able to write there
        if (!vol.isMountedWritable()) {
            return false;
        }

        // Moving into an ASEC on public primary is only option internal
        if (vol.isPrimaryPhysical()) {
            return app.isInternal();
        }

        // Some apps can't be moved. (e.g. device admins)
        try {
            if (mPM.isPackageDeviceAdminOnAnyUser(app.packageName)) {
                return false;
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        // Otherwise we can move to any private volume
        return (vol.getType() == VolumeInfo.TYPE_PRIVATE);
!!!1853623.java!!!	movePrimaryStorage(inout vol : VolumeInfo) : int
        try {
            final String volumeUuid;
            if (VolumeInfo.ID_PRIVATE_INTERNAL.equals(vol.id)) {
                volumeUuid = StorageManager.UUID_PRIVATE_INTERNAL;
            } else if (vol.isPrimaryPhysical()) {
                volumeUuid = StorageManager.UUID_PRIMARY_PHYSICAL;
            } else {
                volumeUuid = Preconditions.checkNotNull(vol.fsUuid);
            }

            return mPM.movePrimaryStorage(volumeUuid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1853751.java!!!	getPrimaryStorageCurrentVolume() : VolumeInfo
        final StorageManager storage = mContext.getSystemService(StorageManager.class);
        final String volumeUuid = storage.getPrimaryStorageUuid();
        return storage.findVolumeByQualifiedUuid(volumeUuid);
!!!1853879.java!!!	getPrimaryStorageCandidateVolumes() : VolumeInfo
        final StorageManager storage = mContext.getSystemService(StorageManager.class);
        final VolumeInfo currentVol = getPrimaryStorageCurrentVolume();
        final List<VolumeInfo> vols = storage.getVolumes();
        final List<VolumeInfo> candidates = new ArrayList<>();
        if (Objects.equals(StorageManager.UUID_PRIMARY_PHYSICAL,
                storage.getPrimaryStorageUuid()) && currentVol != null) {
            // TODO: support moving primary physical to emulated volume
            candidates.add(currentVol);
        } else {
            for (VolumeInfo vol : vols) {
                if (Objects.equals(vol, currentVol) || isPrimaryStorageCandidateVolume(vol)) {
                    candidates.add(vol);
                }
            }
        }
        return candidates;
!!!1854007.java!!!	isPrimaryStorageCandidateVolume(inout vol : VolumeInfo) : boolean
        // Private internal is always an option
        if (VolumeInfo.ID_PRIVATE_INTERNAL.equals(vol.getId())) {
            return true;
        }

        // Gotta be able to write there
        if (!vol.isMountedWritable()) {
            return false;
        }

        // We can move to any private volume
        return (vol.getType() == VolumeInfo.TYPE_PRIVATE);
!!!1854135.java!!!	deletePackage(inout packageName : String, inout observer : IPackageDeleteObserver, in flags : int) : void
        deletePackageAsUser(packageName, observer, flags, mContext.getUserId());
!!!1854263.java!!!	deletePackageAsUser(inout packageName : String, inout observer : IPackageDeleteObserver, in flags : int, in userId : int) : void
        try {
            mPM.deletePackageAsUser(packageName, observer, userId, flags);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1854391.java!!!	clearApplicationUserData(inout packageName : String, inout observer : IPackageDataObserver) : void
        try {
            mPM.clearApplicationUserData(packageName, observer, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1854519.java!!!	deleteApplicationCacheFiles(inout packageName : String, inout observer : IPackageDataObserver) : void
        try {
            mPM.deleteApplicationCacheFiles(packageName, observer);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1854647.java!!!	deleteApplicationCacheFilesAsUser(inout packageName : String, in userId : int, inout observer : IPackageDataObserver) : void
        try {
            mPM.deleteApplicationCacheFilesAsUser(packageName, userId, observer);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1854775.java!!!	freeStorageAndNotify(inout volumeUuid : String, in idealStorageSize : long, inout observer : IPackageDataObserver) : void
        try {
            mPM.freeStorageAndNotify(volumeUuid, idealStorageSize, observer);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1854903.java!!!	freeStorage(inout volumeUuid : String, in freeStorageSize : long, inout pi : IntentSender) : void
        try {
            mPM.freeStorage(volumeUuid, freeStorageSize, pi);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1855031.java!!!	setPackagesSuspendedAsUser(inout packageNames : String, inout suspended : boolean, in userId : int) : String
        try {
            return mPM.setPackagesSuspendedAsUser(packageNames, suspended, userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1855159.java!!!	isPackageSuspendedForUser(inout packageName : String, in userId : int) : boolean
        try {
            return mPM.isPackageSuspendedForUser(packageName, userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1855287.java!!!	getPackageSizeInfoAsUser(inout packageName : String, in userHandle : int, inout observer : IPackageStatsObserver) : void
        try {
            mPM.getPackageSizeInfo(packageName, userHandle, observer);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1855415.java!!!	addPackageToPreferred(inout packageName : String) : void
        Log.w(TAG, "addPackageToPreferred() is a no-op");
!!!1855543.java!!!	removePackageFromPreferred(inout packageName : String) : void
        Log.w(TAG, "removePackageFromPreferred() is a no-op");
!!!1855671.java!!!	getPreferredPackages(in flags : int) : PackageInfo
        Log.w(TAG, "getPreferredPackages() is a no-op");
        return Collections.emptyList();
!!!1855799.java!!!	addPreferredActivity(inout filter : IntentFilter, in match : int, inout set : ComponentName, inout activity : ComponentName) : void
        try {
            mPM.addPreferredActivity(filter, match, set, activity, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1855927.java!!!	addPreferredActivityAsUser(inout filter : IntentFilter, in match : int, inout set : ComponentName, inout activity : ComponentName, in userId : int) : void
        try {
            mPM.addPreferredActivity(filter, match, set, activity, userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1856055.java!!!	replacePreferredActivity(inout filter : IntentFilter, in match : int, inout set : ComponentName, inout activity : ComponentName) : void
        try {
            mPM.replacePreferredActivity(filter, match, set, activity, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1856183.java!!!	replacePreferredActivityAsUser(inout filter : IntentFilter, in match : int, inout set : ComponentName, inout activity : ComponentName, in userId : int) : void
        try {
            mPM.replacePreferredActivity(filter, match, set, activity, userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1856311.java!!!	clearPackagePreferredActivities(inout packageName : String) : void
        try {
            mPM.clearPackagePreferredActivities(packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1856439.java!!!	getPreferredActivities(inout outFilters : List<IntentFilter>, inout outActivities : List<ComponentName>, inout packageName : String) : int
        try {
            return mPM.getPreferredActivities(outFilters, outActivities, packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1856567.java!!!	getHomeActivities(inout outActivities : List<ResolveInfo>) : ComponentName
        try {
            return mPM.getHomeActivities(outActivities);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1856695.java!!!	setComponentEnabledSetting(inout componentName : ComponentName, in newState : int, in flags : int) : void
        try {
            mPM.setComponentEnabledSetting(componentName, newState, flags, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1856823.java!!!	getComponentEnabledSetting(inout componentName : ComponentName) : int
        try {
            return mPM.getComponentEnabledSetting(componentName, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1856951.java!!!	setApplicationEnabledSetting(inout packageName : String, in newState : int, in flags : int) : void
        try {
            mPM.setApplicationEnabledSetting(packageName, newState, flags,
                    mContext.getUserId(), mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1857079.java!!!	getApplicationEnabledSetting(inout packageName : String) : int
        try {
            return mPM.getApplicationEnabledSetting(packageName, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1857207.java!!!	flushPackageRestrictionsAsUser(in userId : int) : void
        try {
            mPM.flushPackageRestrictionsAsUser(userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1857335.java!!!	setApplicationHiddenSettingAsUser(inout packageName : String, inout hidden : boolean, inout user : UserHandle) : boolean
        try {
            return mPM.setApplicationHiddenSettingAsUser(packageName, hidden,
                    user.getIdentifier());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1857463.java!!!	getApplicationHiddenSettingAsUser(inout packageName : String, inout user : UserHandle) : boolean
        try {
            return mPM.getApplicationHiddenSettingAsUser(packageName, user.getIdentifier());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1857591.java!!!	getKeySetByAlias(inout packageName : String, inout alias : String) : KeySet
        Preconditions.checkNotNull(packageName);
        Preconditions.checkNotNull(alias);
        try {
            return mPM.getKeySetByAlias(packageName, alias);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1857719.java!!!	getSigningKeySet(inout packageName : String) : KeySet
        Preconditions.checkNotNull(packageName);
        try {
            return mPM.getSigningKeySet(packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1857847.java!!!	isSignedBy(inout packageName : String, inout ks : KeySet) : boolean
        Preconditions.checkNotNull(packageName);
        Preconditions.checkNotNull(ks);
        try {
            return mPM.isPackageSignedByKeySet(packageName, ks);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1857975.java!!!	isSignedByExactly(inout packageName : String, inout ks : KeySet) : boolean
        Preconditions.checkNotNull(packageName);
        Preconditions.checkNotNull(ks);
        try {
            return mPM.isPackageSignedByKeySetExactly(packageName, ks);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1858103.java!!!	getVerifierDeviceIdentity() : VerifierDeviceIdentity
        try {
            return mPM.getVerifierDeviceIdentity();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1858231.java!!!	isUpgrade() : boolean
        try {
            return mPM.isUpgrade();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1858359.java!!!	getPackageInstaller() : PackageInstaller
        synchronized (mLock) {
            if (mInstaller == null) {
                try {
                    mInstaller = new PackageInstaller(mContext, this, mPM.getPackageInstaller(),
                            mContext.getPackageName(), mContext.getUserId());
                } catch (RemoteException e) {
                    throw e.rethrowFromSystemServer();
                }
            }
            return mInstaller;
        }
!!!1858487.java!!!	isPackageAvailable(inout packageName : String) : boolean
        try {
            return mPM.isPackageAvailable(packageName, mContext.getUserId());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1858615.java!!!	addCrossProfileIntentFilter(inout filter : IntentFilter, in sourceUserId : int, in targetUserId : int, in flags : int) : void
        try {
            mPM.addCrossProfileIntentFilter(filter, mContext.getOpPackageName(),
                    sourceUserId, targetUserId, flags);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1858743.java!!!	clearCrossProfileIntentFilters(in sourceUserId : int) : void
        try {
            mPM.clearCrossProfileIntentFilters(sourceUserId, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!1858871.java!!!	loadItemIcon(inout itemInfo : PackageItemInfo, inout appInfo : ApplicationInfo) : Drawable
        Drawable dr = loadUnbadgedItemIcon(itemInfo, appInfo);
        if (itemInfo.showUserIcon != UserHandle.USER_NULL) {
            return dr;
        }
        return getUserBadgedIcon(dr, new UserHandle(mContext.getUserId()));
!!!1858999.java!!!	loadUnbadgedItemIcon(inout itemInfo : PackageItemInfo, inout appInfo : ApplicationInfo) : Drawable
        if (itemInfo.showUserIcon != UserHandle.USER_NULL) {
            Bitmap bitmap = getUserManager().getUserIcon(itemInfo.showUserIcon);
            if (bitmap == null) {
                return UserIcons.getDefaultUserIcon(itemInfo.showUserIcon, /* light= */ false);
            }
            return new BitmapDrawable(bitmap);
        }
        Drawable dr = null;
        if (itemInfo.packageName != null) {
            dr = getDrawable(itemInfo.packageName, itemInfo.icon, appInfo);
        }
        if (dr == null) {
            dr = itemInfo.loadDefaultIcon(this);
        }
        return dr;
!!!1859127.java!!!	getBadgedDrawable(inout drawable : Drawable, inout badgeDrawable : Drawable, inout badgeLocation : Rect, inout tryBadgeInPlace : boolean) : Drawable
        final int badgedWidth = drawable.getIntrinsicWidth();
        final int badgedHeight = drawable.getIntrinsicHeight();
        final boolean canBadgeInPlace = tryBadgeInPlace
                && (drawable instanceof BitmapDrawable)
                && ((BitmapDrawable) drawable).getBitmap().isMutable();

        final Bitmap bitmap;
        if (canBadgeInPlace) {
            bitmap = ((BitmapDrawable) drawable).getBitmap();
        } else {
            bitmap = Bitmap.createBitmap(badgedWidth, badgedHeight, Bitmap.Config.ARGB_8888);
        }
        Canvas canvas = new Canvas(bitmap);

        if (!canBadgeInPlace) {
            drawable.setBounds(0, 0, badgedWidth, badgedHeight);
            drawable.draw(canvas);
        }

        if (badgeLocation != null) {
            if (badgeLocation.left < 0 || badgeLocation.top < 0
                    || badgeLocation.width() > badgedWidth || badgeLocation.height() > badgedHeight) {
                throw new IllegalArgumentException("Badge location " + badgeLocation
                        + " not in badged drawable bounds "
                        + new Rect(0, 0, badgedWidth, badgedHeight));
            }
            badgeDrawable.setBounds(0, 0, badgeLocation.width(), badgeLocation.height());

            canvas.save();
            canvas.translate(badgeLocation.left, badgeLocation.top);
            badgeDrawable.draw(canvas);
            canvas.restore();
        } else {
            badgeDrawable.setBounds(0, 0, badgedWidth, badgedHeight);
            badgeDrawable.draw(canvas);
        }

        if (!canBadgeInPlace) {
            BitmapDrawable mergedDrawable = new BitmapDrawable(mContext.getResources(), bitmap);

            if (drawable instanceof BitmapDrawable) {
                BitmapDrawable bitmapDrawable = (BitmapDrawable) drawable;
                mergedDrawable.setTargetDensity(bitmapDrawable.getBitmap().getDensity());
            }

            return mergedDrawable;
        }

        return drawable;
!!!1859255.java!!!	getBadgeResIdForUser(in userId : int) : int
        // Return the framework-provided badge.
        if (isManagedProfile(userId)) {
            return com.android.internal.R.drawable.ic_corp_icon_badge;
        }
        return 0;
!!!1859383.java!!!	isManagedProfile(in userId : int) : boolean
        return getUserManager().isManagedProfile(userId);
