class CallbackDataSource
!!!39910071.cpp!!!	CallbackDataSource(in binderDataSource : sp<IDataSource>)
    // Set up the buffer to read into.
    mMemory = mIDataSource->getIMemory();
    mName = String8::format("CallbackDataSource(%s)", mIDataSource->toString().string());

!!!39910199.cpp!!!	~CallbackDataSource()
    ALOGV("~CallbackDataSource");
    close();
!!!39910327.cpp!!!	initCheck() : status_t
    if (mMemory == NULL) {
        return UNKNOWN_ERROR;
    }
    return OK;
!!!39910455.cpp!!!	readAt(in offset : off64_t, inout data : void, in size : size_t) : ssize_t
    if (mMemory == NULL) {
        return -1;
    }

    // IDataSource can only read up to mMemory->size() bytes at a time, but this
    // method should be able to read any number of bytes, so read in a loop.
    size_t totalNumRead = 0;
    size_t numLeft = size;
    const size_t bufferSize = mMemory->size();

    while (numLeft > 0) {
        size_t numToRead = std::min(numLeft, bufferSize);
        ssize_t numRead =
            mIDataSource->readAt(offset + totalNumRead, numToRead);
        // A negative return value represents an error. Pass it on.
        if (numRead < 0) {
            return numRead == ERROR_END_OF_STREAM && totalNumRead > 0 ? totalNumRead : numRead;
        }
        // A zero return value signals EOS. Return the bytes read so far.
        if (numRead == 0) {
            return totalNumRead;
        }
        if ((size_t)numRead > numToRead) {
            return ERROR_OUT_OF_RANGE;
        }
        CHECK(numRead >= 0 && (size_t)numRead <= bufferSize);
        memcpy(((uint8_t*)data) + totalNumRead, mMemory->pointer(), numRead);
        numLeft -= numRead;
        totalNumRead += numRead;
    }

    return totalNumRead;
!!!39910583.cpp!!!	getSize(inout size : off64_t) : status_t
    status_t err = mIDataSource->getSize(size);
    if (err != OK) {
        return err;
    }
    if (*size < 0) {
        // IDataSource will set size to -1 to indicate unknown size, but
        // DataSource returns ERROR_UNSUPPORTED for that.
        return ERROR_UNSUPPORTED;
    }
    return OK;
!!!39910711.cpp!!!	flags() : uint32_t
    return mIDataSource->getFlags();
!!!39910839.cpp!!!	close() : void
    if (!mIsClosed) {
        mIDataSource->close();
        mIsClosed = true;
    }
!!!39911095.cpp!!!	DrmInitialization(in mime : char = NULL) : sp<DecryptHandle>
    return mIDataSource->DrmInitialization(mime);
