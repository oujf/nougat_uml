class TinyCacheSource
!!!39911223.cpp!!!	TinyCacheSource(in source : sp<DataSource>)
    mName = String8::format("TinyCacheSource(%s)", mSource->toString().string());
!!!39911351.cpp!!!	initCheck() : status_t
    return mSource->initCheck();
!!!39911479.cpp!!!	readAt(in offset : off64_t, inout data : void, in size : size_t) : ssize_t
    if (size >= kCacheSize) {
        return mSource->readAt(offset, data, size);
    }

    // Check if the cache satisfies the read.
    if (mCachedOffset <= offset
            && offset < (off64_t) (mCachedOffset + mCachedSize)) {
        if (offset + size <= mCachedOffset + mCachedSize) {
            memcpy(data, &mCache[offset - mCachedOffset], size);
            return size;
        } else {
            // If the cache hits only partially, flush the cache and read the
            // remainder.

            // This value is guaranteed to be greater than 0 because of the
            // enclosing if statement.
            const ssize_t remaining = mCachedOffset + mCachedSize - offset;
            memcpy(data, &mCache[offset - mCachedOffset], remaining);
            const ssize_t readMore = readAt(offset + remaining,
                    (uint8_t*)data + remaining, size - remaining);
            if (readMore < 0) {
                return readMore;
            }
            return remaining + readMore;
        }
    }


    // Fill the cache and copy to the caller.
    const ssize_t numRead = mSource->readAt(offset, mCache, kCacheSize);
    if (numRead <= 0) {
        // Flush cache on error
        mCachedSize = 0;
        mCachedOffset = 0;
        return numRead;
    }
    if ((size_t)numRead > kCacheSize) {
        // Flush cache on error
        mCachedSize = 0;
        mCachedOffset = 0;
        return ERROR_OUT_OF_RANGE;
    }

    mCachedSize = numRead;
    mCachedOffset = offset;
    CHECK(mCachedSize <= kCacheSize && mCachedOffset >= 0);
    const size_t numToReturn = std::min(size, (size_t)numRead);
    memcpy(data, mCache, numToReturn);

    return numToReturn;
!!!39911607.cpp!!!	getSize(inout size : off64_t) : status_t
    return mSource->getSize(size);
!!!39911735.cpp!!!	flags() : uint32_t
    return mSource->flags();
!!!39912119.cpp!!!	DrmInitialization(in mime : char = NULL) : sp<DecryptHandle>
    // flush cache when DrmInitialization occurs since decrypted
    // data may differ from what is in cache.
    mCachedOffset = 0;
    mCachedSize = 0;
    return mSource->DrmInitialization(mime);
