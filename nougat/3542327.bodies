class OMX
!!!39939383.cpp!!!	livesLocally(in node : node_id, in pid : pid_t) : bool
    return pid == getpid();
!!!39939511.cpp!!!	listNodes(inout list : List<ComponentInfo>) : status_t
    list->clear();

    OMX_U32 index = 0;
    char componentName[256];
    while (mMaster->enumerateComponents(
                componentName, sizeof(componentName), index) == OMX_ErrorNone) {
        list->push_back(ComponentInfo());
        ComponentInfo &info = *--list->end();

        info.mName = componentName;

        Vector<String8> roles;
        OMX_ERRORTYPE err =
            mMaster->getRolesOfComponent(componentName, &roles);

        if (err == OMX_ErrorNone) {
            for (OMX_U32 i = 0; i < roles.size(); ++i) {
                info.mRoles.push_back(roles[i]);
            }
        }

        ++index;
    }

    return OK;
!!!39939639.cpp!!!	allocateNode(in name : char, in observer : sp<IOMXObserver>, inout nodeBinder : sp<IBinder>, inout node : node_id) : status_t
    Mutex::Autolock autoLock(mLock);

    *node = 0;
    if (nodeBinder != NULL) {
        *nodeBinder = NULL;
    }

    if (mNodeIDToInstance.size() == kMaxNodeInstances) {
        // all possible node IDs are in use
        return NO_MEMORY;
    }

    OMXNodeInstance *instance = new OMXNodeInstance(this, observer, name);

    OMX_COMPONENTTYPE *handle;
    OMX_ERRORTYPE err = mMaster->makeComponentInstance(
            name, &OMXNodeInstance::kCallbacks,
            instance, &handle);

    if (err != OMX_ErrorNone) {
        ALOGE("FAILED to allocate omx component '%s' err=%s(%#x)", name, asString(err), err);

        instance->onGetHandleFailed();

        return StatusFromOMXError(err);
    }

    *node = makeNodeID_l(instance);
    mDispatchers.add(*node, new CallbackDispatcher(instance));

    instance->setHandle(*node, handle);

    mLiveNodes.add(IInterface::asBinder(observer), instance);
    IInterface::asBinder(observer)->linkToDeath(this);

    return OK;
!!!39939767.cpp!!!	freeNode(in node : node_id) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return OK;
    }

    {
        Mutex::Autolock autoLock(mLock);
        ssize_t index = mLiveNodes.indexOfKey(IInterface::asBinder(instance->observer()));
        if (index < 0) {
            // This could conceivably happen if the observer dies at roughly the
            // same time that a client attempts to free the node explicitly.
            return OK;
        }
        mLiveNodes.removeItemsAt(index);
    }

    IInterface::asBinder(instance->observer())->unlinkToDeath(this);

    status_t err = instance->freeNode(mMaster);

    {
        Mutex::Autolock autoLock(mLock);
        ssize_t index = mDispatchers.indexOfKey(node);
        CHECK(index >= 0);
        mDispatchers.removeItemsAt(index);
    }

    return err;
!!!39939895.cpp!!!	sendCommand(in node : node_id, in cmd : OMX_COMMANDTYPE, in param : OMX_S32) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->sendCommand(cmd, param);
!!!39940023.cpp!!!	getParameter(in node : node_id, in index : OMX_INDEXTYPE, inout params : void, in size : size_t) : status_t
    ALOGV("getParameter(%u %#x %p %zd)", node, index, params, size);
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->getParameter(
            index, params, size);
!!!39940151.cpp!!!	setParameter(in node : node_id, in index : OMX_INDEXTYPE, in params : void, in size : size_t) : status_t
    ALOGV("setParameter(%u %#x %p %zd)", node, index, params, size);
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->setParameter(
            index, params, size);
!!!39940279.cpp!!!	getConfig(in node : node_id, in index : OMX_INDEXTYPE, inout params : void, in size : size_t) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->getConfig(
            index, params, size);
!!!39940407.cpp!!!	setConfig(in node : node_id, in index : OMX_INDEXTYPE, in params : void, in size : size_t) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->setConfig(
            index, params, size);
!!!39940535.cpp!!!	getState(in node : node_id, inout state : OMX_STATETYPE) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->getState(
            state);
!!!39940663.cpp!!!	enableNativeBuffers(in node : node_id, in port_index : OMX_U32, in graphic : OMX_BOOL, in enable : OMX_BOOL) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->enableNativeBuffers(port_index, graphic, enable);
!!!39940791.cpp!!!	getGraphicBufferUsage(in node : node_id, in port_index : OMX_U32, inout usage : OMX_U32) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->getGraphicBufferUsage(port_index, usage);
!!!39940919.cpp!!!	storeMetaDataInBuffers(in node : node_id, in port_index : OMX_U32, in enable : OMX_BOOL, inout type : MetadataBufferType) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->storeMetaDataInBuffers(port_index, enable, type);
!!!39941047.cpp!!!	prepareForAdaptivePlayback(in node : node_id, in portIndex : OMX_U32, in enable : OMX_BOOL, in maxFrameWidth : OMX_U32, in maxFrameHeight : OMX_U32) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->prepareForAdaptivePlayback(
            portIndex, enable, maxFrameWidth, maxFrameHeight);
!!!39941175.cpp!!!	configureVideoTunnelMode(in node : node_id, in portIndex : OMX_U32, in tunneled : OMX_BOOL, in audioHwSync : OMX_U32, inout sidebandHandle : native_handle_t) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->configureVideoTunnelMode(
            portIndex, tunneled, audioHwSync, sidebandHandle);
!!!39941303.cpp!!!	useBuffer(in node : node_id, in port_index : OMX_U32, in params : sp<IMemory>, inout buffer : buffer_id, in allottedSize : OMX_U32) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->useBuffer(
            port_index, params, buffer, allottedSize);
!!!39941431.cpp!!!	useGraphicBuffer(in node : node_id, in port_index : OMX_U32, in graphicBuffer : sp<GraphicBuffer>, inout buffer : buffer_id) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->useGraphicBuffer(
            port_index, graphicBuffer, buffer);
!!!39941559.cpp!!!	updateGraphicBufferInMeta(in node : node_id, in port_index : OMX_U32, in graphicBuffer : sp<GraphicBuffer>, in buffer : buffer_id) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->updateGraphicBufferInMeta(
            port_index, graphicBuffer, buffer);
!!!39941687.cpp!!!	updateNativeHandleInMeta(in node : node_id, in port_index : OMX_U32, in nativeHandle : sp<NativeHandle>, in buffer : buffer_id) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->updateNativeHandleInMeta(
            port_index, nativeHandle, buffer);
!!!39941815.cpp!!!	createInputSurface(in node : node_id, in port_index : OMX_U32, in dataSpace : android_dataspace, inout bufferProducer : sp<IGraphicBufferProducer>, inout type : MetadataBufferType) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->createInputSurface(
            port_index, dataSpace, bufferProducer, type);
!!!39941943.cpp!!!	createPersistentInputSurface(inout bufferProducer : sp<IGraphicBufferProducer>, inout bufferConsumer : sp<IGraphicBufferConsumer>) : status_t
    return OMXNodeInstance::createPersistentInputSurface(
            bufferProducer, bufferConsumer);
!!!39942071.cpp!!!	setInputSurface(in node : node_id, in port_index : OMX_U32, in bufferConsumer : sp<IGraphicBufferConsumer>, inout type : MetadataBufferType) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->setInputSurface(port_index, bufferConsumer, type);
!!!39942199.cpp!!!	signalEndOfInputStream(in node : node_id) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->signalEndOfInputStream();
!!!39942327.cpp!!!	allocateSecureBuffer(in node : node_id, in port_index : OMX_U32, in size : size_t, inout buffer : buffer_id, inout buffer_data : void, inout native_handle : sp<NativeHandle>) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->allocateSecureBuffer(
            port_index, size, buffer, buffer_data, native_handle);
!!!39942455.cpp!!!	allocateBufferWithBackup(in node : node_id, in port_index : OMX_U32, in params : sp<IMemory>, inout buffer : buffer_id, in allottedSize : OMX_U32) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->allocateBufferWithBackup(
            port_index, params, buffer, allottedSize);
!!!39942583.cpp!!!	freeBuffer(in node : node_id, in port_index : OMX_U32, in buffer : buffer_id) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->freeBuffer(
            port_index, buffer);
!!!39942711.cpp!!!	fillBuffer(in node : node_id, in buffer : buffer_id, in fenceFd : int) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->fillBuffer(buffer, fenceFd);
!!!39942839.cpp!!!	emptyBuffer(in node : node_id, in buffer : buffer_id, in range_offset : OMX_U32, in range_length : OMX_U32, in flags : OMX_U32, in timestamp : OMX_TICKS, in fenceFd : int) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->emptyBuffer(
            buffer, range_offset, range_length, flags, timestamp, fenceFd);
!!!39942967.cpp!!!	getExtensionIndex(in node : node_id, in parameter_name : char, inout index : OMX_INDEXTYPE) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->getExtensionIndex(
            parameter_name, index);
!!!39943095.cpp!!!	setInternalOption(in node : node_id, in port_index : OMX_U32, in type : InternalOptionType, in data : void, in size : size_t) : status_t
    OMXNodeInstance *instance = findInstance(node);

    if (instance == NULL) {
        return NAME_NOT_FOUND;
    }

    return instance->setInternalOption(port_index, type, data, size);
!!!39943223.cpp!!!	binderDied(in the_late_who : wp<IBinder>) : void
    OMXNodeInstance *instance;

    {
        Mutex::Autolock autoLock(mLock);

        ssize_t index = mLiveNodes.indexOfKey(the_late_who);

        if (index < 0) {
            ALOGE("b/27597103, nonexistent observer on binderDied");
            android_errorWriteLog(0x534e4554, "27597103");
            return;
        }

        instance = mLiveNodes.editValueAt(index);
        mLiveNodes.removeItemsAt(index);

        index = mDispatchers.indexOfKey(instance->nodeID());
        CHECK(index >= 0);
        mDispatchers.removeItemsAt(index);

        invalidateNodeID_l(instance->nodeID());
    }

    instance->onObserverDied(mMaster);
!!!39943863.cpp!!!	invalidateNodeID(in node : node_id) : void
    Mutex::Autolock autoLock(mLock);
    invalidateNodeID_l(node);
!!!39943991.cpp!!!	~OMX()
    delete mMaster;
    mMaster = NULL;
!!!39944119.cpp!!!	makeNodeID_l(inout instance : OMXNodeInstance) : node_id
    // mLock is already held.

    node_id prefix = node_id(getpid() << 16);
    node_id node = 0;
    do  {
        if (++mNodeCounter >= kMaxNodeInstances) {
            mNodeCounter = 0; // OK to use because we're combining with the pid
        }
        node = node_id(prefix | mNodeCounter);
    } while (mNodeIDToInstance.indexOfKey(node) >= 0);
    mNodeIDToInstance.add(node, instance);

    return node;
!!!39944247.cpp!!!	findInstance(in node : node_id) : OMXNodeInstance
    Mutex::Autolock autoLock(mLock);

    ssize_t index = mNodeIDToInstance.indexOfKey(node);

    return index < 0 ? NULL : mNodeIDToInstance.valueAt(index);
!!!39944375.cpp!!!	findDispatcher(in node : node_id) : sp<CallbackDispatcher>
    Mutex::Autolock autoLock(mLock);

    ssize_t index = mDispatchers.indexOfKey(node);

    return index < 0 ? NULL : mDispatchers.valueAt(index);
!!!39944503.cpp!!!	invalidateNodeID_l(in node : node_id) : void
    // mLock is held.
    mNodeIDToInstance.removeItem(node);
