class MtpDataPacket
!!!40064695.cpp!!!	reset() : void
    MtpPacket::reset();
    mOffset = MTP_CONTAINER_HEADER_SIZE;
!!!40064823.cpp!!!	setOperationCode(in code : MtpOperationCode) : void
    MtpPacket::putUInt16(MTP_CONTAINER_CODE_OFFSET, code);
!!!40064951.cpp!!!	setTransactionID(in id : MtpTransactionID) : void
    MtpPacket::putUInt32(MTP_CONTAINER_TRANSACTION_ID_OFFSET, id);
!!!40065207.cpp!!!	getUInt8(inout value : uint8_t) : bool
    if (mPacketSize - mOffset < sizeof(value))
        return false;
    value = mBuffer[mOffset++];
    return true;
!!!40065463.cpp!!!	getUInt16(inout value : uint16_t) : bool
    if (mPacketSize - mOffset < sizeof(value))
        return false;
    int offset = mOffset;
    value = (uint16_t)mBuffer[offset] | ((uint16_t)mBuffer[offset + 1] << 8);
    mOffset += sizeof(value);
    return true;
!!!40065719.cpp!!!	getUInt32(inout value : uint32_t) : bool
    if (mPacketSize - mOffset < sizeof(value))
        return false;
    int offset = mOffset;
    value = (uint32_t)mBuffer[offset] | ((uint32_t)mBuffer[offset + 1] << 8) |
           ((uint32_t)mBuffer[offset + 2] << 16)  | ((uint32_t)mBuffer[offset + 3] << 24);
    mOffset += sizeof(value);
    return true;
!!!40065975.cpp!!!	getUInt64(inout value : uint64_t) : bool
    if (mPacketSize - mOffset < sizeof(value))
        return false;
    int offset = mOffset;
    value = (uint64_t)mBuffer[offset] | ((uint64_t)mBuffer[offset + 1] << 8) |
           ((uint64_t)mBuffer[offset + 2] << 16) | ((uint64_t)mBuffer[offset + 3] << 24) |
           ((uint64_t)mBuffer[offset + 4] << 32) | ((uint64_t)mBuffer[offset + 5] << 40) |
           ((uint64_t)mBuffer[offset + 6] << 48)  | ((uint64_t)mBuffer[offset + 7] << 56);
    mOffset += sizeof(value);
    return true;
!!!40066231.cpp!!!	getUInt128(inout value : uint128_t) : bool
    return getUInt32(value[0]) && getUInt32(value[1]) && getUInt32(value[2]) && getUInt32(value[3]);
!!!40066487.cpp!!!	getString(inout string : MtpStringBuffer) : bool
    return string.readFromPacket(this);
!!!40066615.cpp!!!	getAInt8() : Int8List
    uint32_t count;
    if (!getUInt32(count))
        return NULL;
    Int8List* result = new Int8List;
    for (uint32_t i = 0; i < count; i++) {
        int8_t value;
        if (!getInt8(value)) {
            delete result;
            return NULL;
        }
        result->push(value);
    }
    return result;
!!!40066743.cpp!!!	getAUInt8() : UInt8List
    uint32_t count;
    if (!getUInt32(count))
        return NULL;
    UInt8List* result = new UInt8List;
    for (uint32_t i = 0; i < count; i++) {
        uint8_t value;
        if (!getUInt8(value)) {
            delete result;
            return NULL;
        }
        result->push(value);
    }
    return result;
!!!40066871.cpp!!!	getAInt16() : Int16List
    uint32_t count;
    if (!getUInt32(count))
        return NULL;
    Int16List* result = new Int16List;
    for (uint32_t i = 0; i < count; i++) {
        int16_t value;
        if (!getInt16(value)) {
            delete result;
            return NULL;
        }
        result->push(value);
    }
    return result;
!!!40066999.cpp!!!	getAUInt16() : UInt16List
    uint32_t count;
    if (!getUInt32(count))
        return NULL;
    UInt16List* result = new UInt16List;
    for (uint32_t i = 0; i < count; i++) {
        uint16_t value;
        if (!getUInt16(value)) {
            delete result;
            return NULL;
        }
        result->push(value);
    }
    return result;
!!!40067127.cpp!!!	getAInt32() : Int32List
    uint32_t count;
    if (!getUInt32(count))
        return NULL;
    Int32List* result = new Int32List;
    for (uint32_t i = 0; i < count; i++) {
        int32_t value;
        if (!getInt32(value)) {
            delete result;
            return NULL;
        }
        result->push(value);
    }
    return result;
!!!40067255.cpp!!!	getAUInt32() : UInt32List
    uint32_t count;
    if (!getUInt32(count))
        return NULL;
    UInt32List* result = new UInt32List;
    for (uint32_t i = 0; i < count; i++) {
        uint32_t value;
        if (!getUInt32(value)) {
            delete result;
            return NULL;
        }
        result->push(value);
    }
    return result;
!!!40067383.cpp!!!	getAInt64() : Int64List
    uint32_t count;
    if (!getUInt32(count))
        return NULL;
    Int64List* result = new Int64List;
    for (uint32_t i = 0; i < count; i++) {
        int64_t value;
        if (!getInt64(value)) {
            delete result;
            return NULL;
        }
        result->push(value);
    }
    return result;
!!!40067511.cpp!!!	getAUInt64() : UInt64List
    uint32_t count;
    if (!getUInt32(count))
        return NULL;
    UInt64List* result = new UInt64List;
    for (uint32_t i = 0; i < count; i++) {
        uint64_t value;
        if (!getUInt64(value)) {
            delete result;
            return NULL;
        }
        result->push(value);
    }
    return result;
!!!40067639.cpp!!!	putInt8(in value : int8_t) : void
    allocate(mOffset + 1);
    mBuffer[mOffset++] = (uint8_t)value;
    if (mPacketSize < mOffset)
        mPacketSize = mOffset;
!!!40067767.cpp!!!	putUInt8(in value : uint8_t) : void
    allocate(mOffset + 1);
    mBuffer[mOffset++] = (uint8_t)value;
    if (mPacketSize < mOffset)
        mPacketSize = mOffset;
!!!40067895.cpp!!!	putInt16(in value : int16_t) : void
    allocate(mOffset + 2);
    mBuffer[mOffset++] = (uint8_t)(value & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 8) & 0xFF);
    if (mPacketSize < mOffset)
        mPacketSize = mOffset;
!!!40068023.cpp!!!	putUInt16(in value : uint16_t) : void
    allocate(mOffset + 2);
    mBuffer[mOffset++] = (uint8_t)(value & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 8) & 0xFF);
    if (mPacketSize < mOffset)
        mPacketSize = mOffset;
!!!40068151.cpp!!!	putInt32(in value : int32_t) : void
    allocate(mOffset + 4);
    mBuffer[mOffset++] = (uint8_t)(value & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 8) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 16) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 24) & 0xFF);
    if (mPacketSize < mOffset)
        mPacketSize = mOffset;
!!!40068279.cpp!!!	putUInt32(in value : uint32_t) : void
    allocate(mOffset + 4);
    mBuffer[mOffset++] = (uint8_t)(value & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 8) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 16) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 24) & 0xFF);
    if (mPacketSize < mOffset)
        mPacketSize = mOffset;
!!!40068407.cpp!!!	putInt64(in value : int64_t) : void
    allocate(mOffset + 8);
    mBuffer[mOffset++] = (uint8_t)(value & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 8) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 16) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 24) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 32) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 40) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 48) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 56) & 0xFF);
    if (mPacketSize < mOffset)
        mPacketSize = mOffset;
!!!40068535.cpp!!!	putUInt64(in value : uint64_t) : void
    allocate(mOffset + 8);
    mBuffer[mOffset++] = (uint8_t)(value & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 8) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 16) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 24) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 32) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 40) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 48) & 0xFF);
    mBuffer[mOffset++] = (uint8_t)((value >> 56) & 0xFF);
    if (mPacketSize < mOffset)
        mPacketSize = mOffset;
!!!40068663.cpp!!!	putInt128(in value : int128_t) : void
    putInt32(value[0]);
    putInt32(value[1]);
    putInt32(value[2]);
    putInt32(value[3]);
!!!40068791.cpp!!!	putUInt128(in value : uint128_t) : void
    putUInt32(value[0]);
    putUInt32(value[1]);
    putUInt32(value[2]);
    putUInt32(value[3]);
!!!40068919.cpp!!!	putInt128(in value : int64_t) : void
    putInt64(value);
    putInt64(value < 0 ? -1 : 0);
!!!40069047.cpp!!!	putUInt128(in value : uint64_t) : void
    putUInt64(value);
    putUInt64(0);
!!!40069175.cpp!!!	putAInt8(in values : int8_t, in count : int) : void
    putUInt32(count);
    for (int i = 0; i < count; i++)
        putInt8(*values++);
!!!40069303.cpp!!!	putAUInt8(in values : uint8_t, in count : int) : void
    putUInt32(count);
    for (int i = 0; i < count; i++)
        putUInt8(*values++);
!!!40069431.cpp!!!	putAInt16(in values : int16_t, in count : int) : void
    putUInt32(count);
    for (int i = 0; i < count; i++)
        putInt16(*values++);
!!!40069559.cpp!!!	putAUInt16(in values : uint16_t, in count : int) : void
    putUInt32(count);
    for (int i = 0; i < count; i++)
        putUInt16(*values++);
!!!40069687.cpp!!!	putAUInt16(in values : UInt16List) : void
    size_t count = (values ? values->size() : 0);
    putUInt32(count);
    for (size_t i = 0; i < count; i++)
        putUInt16((*values)[i]);
!!!40069815.cpp!!!	putAInt32(in values : int32_t, in count : int) : void
    putUInt32(count);
    for (int i = 0; i < count; i++)
        putInt32(*values++);
!!!40069943.cpp!!!	putAUInt32(in values : uint32_t, in count : int) : void
    putUInt32(count);
    for (int i = 0; i < count; i++)
        putUInt32(*values++);
!!!40070071.cpp!!!	putAUInt32(in list : UInt32List) : void
    if (!list) {
        putEmptyArray();
    } else {
        size_t size = list->size();
        putUInt32(size);
        for (size_t i = 0; i < size; i++)
            putUInt32((*list)[i]);
    }
!!!40070199.cpp!!!	putAInt64(in values : int64_t, in count : int) : void
    putUInt32(count);
    for (int i = 0; i < count; i++)
        putInt64(*values++);
!!!40070327.cpp!!!	putAUInt64(in values : uint64_t, in count : int) : void
    putUInt32(count);
    for (int i = 0; i < count; i++)
        putUInt64(*values++);
!!!40070455.cpp!!!	putString(in string : MtpStringBuffer) : void
    string.writeToPacket(this);
!!!40070583.cpp!!!	putString(in s : char) : void
    MtpStringBuffer string(s);
    string.writeToPacket(this);
!!!40070711.cpp!!!	putString(in string : uint16_t) : void
    int count = 0;
    for (int i = 0; i <= MTP_STRING_MAX_CHARACTER_NUMBER; i++) {
        if (string[i])
            count++;
        else
            break;
    }
    putUInt8(count > 0 ? count + 1 : 0);
    for (int i = 0; i < count; i++)
        putUInt16(string[i]);
    // only terminate with zero if string is not empty
    if (count > 0)
        putUInt16(0);
!!!40071095.cpp!!!	read(in fd : int) : int
    int ret = ::read(fd, mBuffer, MTP_BUFFER_SIZE);
    if (ret < MTP_CONTAINER_HEADER_SIZE)
        return -1;
    mPacketSize = ret;
    mOffset = MTP_CONTAINER_HEADER_SIZE;
    return ret;
!!!40071223.cpp!!!	write(in fd : int) : int
    MtpPacket::putUInt32(MTP_CONTAINER_LENGTH_OFFSET, mPacketSize);
    MtpPacket::putUInt16(MTP_CONTAINER_TYPE_OFFSET, MTP_CONTAINER_TYPE_DATA);
    int ret = ::write(fd, mBuffer, mPacketSize);
    return (ret < 0 ? ret : 0);
!!!40071351.cpp!!!	writeData(in fd : int, inout data : void, in length : uint32_t) : int
    allocate(length + MTP_CONTAINER_HEADER_SIZE);
    memcpy(mBuffer + MTP_CONTAINER_HEADER_SIZE, data, length);
    length += MTP_CONTAINER_HEADER_SIZE;
    MtpPacket::putUInt32(MTP_CONTAINER_LENGTH_OFFSET, length);
    MtpPacket::putUInt16(MTP_CONTAINER_TYPE_OFFSET, MTP_CONTAINER_TYPE_DATA);
    int ret = ::write(fd, mBuffer, length);
    return (ret < 0 ? ret : 0);
!!!40071479.cpp!!!	read(inout request : usb_request) : int
    // first read the header
    request->buffer = mBuffer;
    request->buffer_length = mBufferSize;
    int length = transfer(request);
    if (length >= MTP_CONTAINER_HEADER_SIZE) {
        // look at the length field to see if the data spans multiple packets
        uint32_t totalLength = MtpPacket::getUInt32(MTP_CONTAINER_LENGTH_OFFSET);
        allocate(totalLength);
        while (totalLength > static_cast<uint32_t>(length)) {
            request->buffer = mBuffer + length;
            request->buffer_length = totalLength - length;
            int ret = transfer(request);
            if (ret >= 0)
                length += ret;
            else {
                length = ret;
                break;
            }
        }
    }
    if (length >= 0)
        mPacketSize = length;
    return length;
!!!40071607.cpp!!!	readData(inout request : usb_request, inout buffer : void, in length : int) : int
    int read = 0;
    while (read < length) {
        request->buffer = (char *)buffer + read;
        request->buffer_length = length - read;
        int ret = transfer(request);
        if (ret < 0) {
            return ret;
        }
        read += ret;
    }
    return read;
!!!40071735.cpp!!!	readDataAsync(inout req : usb_request) : int
    if (usb_request_queue(req)) {
        ALOGE("usb_endpoint_queue failed, errno: %d", errno);
        return -1;
    }
    return 0;
!!!40071863.cpp!!!	readDataWait(inout device : usb_device) : int
    struct usb_request *req = usb_request_wait(device);
    return (req ? req->actual_length : -1);
!!!40071991.cpp!!!	readDataHeader(inout request : usb_request) : int
    request->buffer = mBuffer;
    request->buffer_length = request->max_packet_size;
    int length = transfer(request);
    if (length >= 0)
        mPacketSize = length;
    return length;
!!!40072119.cpp!!!	writeDataHeader(inout request : usb_request, in length : uint32_t) : int
    MtpPacket::putUInt32(MTP_CONTAINER_LENGTH_OFFSET, length);
    MtpPacket::putUInt16(MTP_CONTAINER_TYPE_OFFSET, MTP_CONTAINER_TYPE_DATA);
    request->buffer = mBuffer;
    request->buffer_length = MTP_CONTAINER_HEADER_SIZE;
    int ret = transfer(request);
    return (ret < 0 ? ret : 0);
!!!40072247.cpp!!!	write(inout request : usb_request) : int
    MtpPacket::putUInt32(MTP_CONTAINER_LENGTH_OFFSET, mPacketSize);
    MtpPacket::putUInt16(MTP_CONTAINER_TYPE_OFFSET, MTP_CONTAINER_TYPE_DATA);
    request->buffer = mBuffer;
    request->buffer_length = mPacketSize;
    int ret = transfer(request);
    return (ret < 0 ? ret : 0);
!!!40072375.cpp!!!	write(inout request : usb_request, inout buffer : void, in length : uint32_t) : int
    request->buffer = buffer;
    request->buffer_length = length;
    int ret = transfer(request);
    return (ret < 0 ? ret : 0);
!!!40072759.cpp!!!	getData(inout outLength : int) : void
    int length = mPacketSize - MTP_CONTAINER_HEADER_SIZE;
    if (length > 0) {
        void* result = malloc(length);
        if (result) {
            memcpy(result, mBuffer + MTP_CONTAINER_HEADER_SIZE, length);
            *outLength = length;
            return result;
        }
    }
    *outLength = 0;
    return NULL;
