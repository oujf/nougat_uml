class MtpPacket
!!!40080311.cpp!!!	MtpPacket(in bufferSize : int)
    mBuffer = (uint8_t *)malloc(bufferSize);
    if (!mBuffer) {
        ALOGE("out of memory!");
        abort();
    }
!!!40080439.cpp!!!	~MtpPacket()
    if (mBuffer)
        free(mBuffer);
!!!40080567.cpp!!!	reset() : void
    allocate(MTP_CONTAINER_HEADER_SIZE);
    mPacketSize = MTP_CONTAINER_HEADER_SIZE;
    memset(mBuffer, 0, mBufferSize);
!!!40080695.cpp!!!	allocate(in length : size_t) : void
    if (length > mBufferSize) {
        int newLength = length + mAllocationIncrement;
        mBuffer = (uint8_t *)realloc(mBuffer, newLength);
        if (!mBuffer) {
            ALOGE("out of memory!");
            abort();
        }
        mBufferSize = newLength;
    }
!!!40080823.cpp!!!	dump() : void
#define DUMP_BYTES_PER_ROW  16
    char buffer[500];
    char* bufptr = buffer;

    for (size_t i = 0; i < mPacketSize; i++) {
        sprintf(bufptr, "%02X ", mBuffer[i]);
        bufptr += strlen(bufptr);
        if (i % DUMP_BYTES_PER_ROW == (DUMP_BYTES_PER_ROW - 1)) {
            ALOGV("%s", buffer);
            bufptr = buffer;
        }
    }
    if (bufptr != buffer) {
        // print last line
        ALOGV("%s", buffer);
    }
    ALOGV("\n");
!!!40080951.cpp!!!	copyFrom(in src : MtpPacket) : void
    int length = src.mPacketSize;
    allocate(length);
    mPacketSize = length;
    memcpy(mBuffer, src.mBuffer, length);
!!!40081079.cpp!!!	getContainerCode() : uint16_t
    return getUInt16(MTP_CONTAINER_CODE_OFFSET);
!!!40081207.cpp!!!	setContainerCode(in code : uint16_t) : void
    putUInt16(MTP_CONTAINER_CODE_OFFSET, code);
!!!40081335.cpp!!!	getContainerType() : uint16_t
    return getUInt16(MTP_CONTAINER_TYPE_OFFSET);
!!!40081463.cpp!!!	getTransactionID() : MtpTransactionID
    return getUInt32(MTP_CONTAINER_TRANSACTION_ID_OFFSET);
!!!40081591.cpp!!!	setTransactionID(in id : MtpTransactionID) : void
    putUInt32(MTP_CONTAINER_TRANSACTION_ID_OFFSET, id);
!!!40081719.cpp!!!	getParameter(in index : int) : uint32_t
    if (index < 1 || index > 5) {
        ALOGE("index %d out of range in MtpPacket::getParameter", index);
        return 0;
    }
    return getUInt32(MTP_CONTAINER_PARAMETER_OFFSET + (index - 1) * sizeof(uint32_t));
!!!40081847.cpp!!!	setParameter(in index : int, in value : uint32_t) : void
    if (index < 1 || index > 5) {
        ALOGE("index %d out of range in MtpPacket::setParameter", index);
        return;
    }
    int offset = MTP_CONTAINER_PARAMETER_OFFSET + (index - 1) * sizeof(uint32_t);
    if (mPacketSize < offset + sizeof(uint32_t))
        mPacketSize = offset + sizeof(uint32_t);
    putUInt32(offset, value);
!!!40081975.cpp!!!	transfer(inout request : usb_request) : int
    int result = usb_device_bulk_transfer(request->dev,
                            request->endpoint,
                            request->buffer,
                            request->buffer_length,
                            0);
    request->actual_length = result;
    return result;
!!!40082103.cpp!!!	getUInt16(in offset : int) : uint16_t
    return ((uint16_t)mBuffer[offset + 1] << 8) | (uint16_t)mBuffer[offset];
!!!40082231.cpp!!!	getUInt32(in offset : int) : uint32_t
    return ((uint32_t)mBuffer[offset + 3] << 24) | ((uint32_t)mBuffer[offset + 2] << 16) |
           ((uint32_t)mBuffer[offset + 1] << 8)  | (uint32_t)mBuffer[offset];
!!!40082359.cpp!!!	putUInt16(in offset : int, in value : uint16_t) : void
    mBuffer[offset++] = (uint8_t)(value & 0xFF);
    mBuffer[offset++] = (uint8_t)((value >> 8) & 0xFF);
!!!40082487.cpp!!!	putUInt32(in offset : int, in value : uint32_t) : void
    mBuffer[offset++] = (uint8_t)(value & 0xFF);
    mBuffer[offset++] = (uint8_t)((value >> 8) & 0xFF);
    mBuffer[offset++] = (uint8_t)((value >> 16) & 0xFF);
    mBuffer[offset++] = (uint8_t)((value >> 24) & 0xFF);
