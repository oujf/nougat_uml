class MuxOMX
!!!40200631.cpp!!!	MuxOMX(in mediaServerOMX : sp<IOMX>, in mediaCodecOMX : sp<IOMX>)
    ALOGI("MuxOMX ctor");
!!!40201015.cpp!!!	livesLocally(in node : node_id, in pid : pid_t) : bool
    return getOMX(node)->livesLocally(node, pid);
!!!40201143.cpp!!!	listNodes(inout list : List<ComponentInfo>) : status_t
    Mutex::Autolock autoLock(mLock);

    if (mLocalOMX == NULL) {
        mLocalOMX = new OMX;
    }

    return mLocalOMX->listNodes(list);
!!!40201271.cpp!!!	allocateNode(in name : char, in observer : sp<IOMXObserver>, inout nodeBinder : sp<IBinder>, inout node : node_id) : status_t
    Mutex::Autolock autoLock(mLock);

    sp<IOMX> omx;

    node_location loc = getPreferredCodecLocation(name);
    if (loc == CODECPROCESS) {
        omx = mMediaCodecOMX;
    } else if (loc == MEDIAPROCESS) {
        omx = mMediaServerOMX;
    } else {
        if (mLocalOMX == NULL) {
            mLocalOMX = new OMX;
        }
        omx = mLocalOMX;
    }

    status_t err = omx->allocateNode(name, observer, nodeBinder, node);
    ALOGV("allocated node_id %x on %s OMX", *node, omx == mMediaCodecOMX ? "codecprocess" :
            omx == mMediaServerOMX ? "mediaserver" : "local");


    if (err != OK) {
        return err;
    }

    mNodeLocation.add(*node, loc);

    return OK;
!!!40201399.cpp!!!	freeNode(in node : node_id) : status_t
    Mutex::Autolock autoLock(mLock);

    status_t err = getOMX_l(node)->freeNode(node);

    if (err != OK) {
        return err;
    }

    mNodeLocation.removeItem(node);

    return OK;
!!!40201527.cpp!!!	sendCommand(in node : node_id, in cmd : OMX_COMMANDTYPE, in param : OMX_S32) : status_t
    return getOMX(node)->sendCommand(node, cmd, param);
!!!40201655.cpp!!!	getParameter(in node : node_id, in index : OMX_INDEXTYPE, inout params : void, in size : size_t) : status_t
    return getOMX(node)->getParameter(node, index, params, size);
!!!40201783.cpp!!!	setParameter(in node : node_id, in index : OMX_INDEXTYPE, in params : void, in size : size_t) : status_t
    return getOMX(node)->setParameter(node, index, params, size);
!!!40201911.cpp!!!	getConfig(in node : node_id, in index : OMX_INDEXTYPE, inout params : void, in size : size_t) : status_t
    return getOMX(node)->getConfig(node, index, params, size);
!!!40202039.cpp!!!	setConfig(in node : node_id, in index : OMX_INDEXTYPE, in params : void, in size : size_t) : status_t
    return getOMX(node)->setConfig(node, index, params, size);
!!!40202167.cpp!!!	getState(in node : node_id, inout state : OMX_STATETYPE) : status_t
    return getOMX(node)->getState(node, state);
!!!40202295.cpp!!!	storeMetaDataInBuffers(in node : node_id, in port_index : OMX_U32, in enable : OMX_BOOL, inout type : MetadataBufferType) : status_t
    return getOMX(node)->storeMetaDataInBuffers(node, port_index, enable, type);
!!!40202423.cpp!!!	prepareForAdaptivePlayback(in node : node_id, in port_index : OMX_U32, in enable : OMX_BOOL, in maxFrameWidth : OMX_U32, in maxFrameHeight : OMX_U32) : status_t
    return getOMX(node)->prepareForAdaptivePlayback(
            node, port_index, enable, maxFrameWidth, maxFrameHeight);
!!!40202551.cpp!!!	configureVideoTunnelMode(in node : node_id, in portIndex : OMX_U32, in enable : OMX_BOOL, in audioHwSync : OMX_U32, inout sidebandHandle : native_handle_t) : status_t
    return getOMX(node)->configureVideoTunnelMode(
            node, portIndex, enable, audioHwSync, sidebandHandle);
!!!40202679.cpp!!!	enableNativeBuffers(in node : node_id, in port_index : OMX_U32, in graphic : OMX_BOOL, in enable : OMX_BOOL) : status_t
    return getOMX(node)->enableNativeBuffers(node, port_index, graphic, enable);
!!!40202807.cpp!!!	getGraphicBufferUsage(in node : node_id, in port_index : OMX_U32, inout usage : OMX_U32) : status_t
    return getOMX(node)->getGraphicBufferUsage(node, port_index, usage);
!!!40202935.cpp!!!	useBuffer(in node : node_id, in port_index : OMX_U32, in params : sp<IMemory>, inout buffer : buffer_id, in allottedSize : OMX_U32) : status_t
    return getOMX(node)->useBuffer(node, port_index, params, buffer, allottedSize);
!!!40203063.cpp!!!	useGraphicBuffer(in node : node_id, in port_index : OMX_U32, in graphicBuffer : sp<GraphicBuffer>, inout buffer : buffer_id) : status_t
    return getOMX(node)->useGraphicBuffer(
            node, port_index, graphicBuffer, buffer);
!!!40203191.cpp!!!	updateGraphicBufferInMeta(in node : node_id, in port_index : OMX_U32, in graphicBuffer : sp<GraphicBuffer>, in buffer : buffer_id) : status_t
    return getOMX(node)->updateGraphicBufferInMeta(
            node, port_index, graphicBuffer, buffer);
!!!40203319.cpp!!!	updateNativeHandleInMeta(in node : node_id, in port_index : OMX_U32, in nativeHandle : sp<NativeHandle>, in buffer : buffer_id) : status_t
    return getOMX(node)->updateNativeHandleInMeta(
            node, port_index, nativeHandle, buffer);
!!!40203447.cpp!!!	createInputSurface(in node : node_id, in port_index : OMX_U32, in dataSpace : android_dataspace, inout bufferProducer : sp<IGraphicBufferProducer>, inout type : MetadataBufferType) : status_t
    status_t err = getOMX(node)->createInputSurface(
            node, port_index, dataSpace, bufferProducer, type);
    return err;
!!!40203575.cpp!!!	createPersistentInputSurface(inout bufferProducer : sp<IGraphicBufferProducer>, inout bufferConsumer : sp<IGraphicBufferConsumer>) : status_t
    sp<IOMX> omx;
    {
        Mutex::Autolock autoLock(mLock);
        if (property_get_bool("media.stagefright.legacyencoder", false)) {
            omx = mMediaServerOMX;
        } else {
            omx = mMediaCodecOMX;
        }
    }
    return omx->createPersistentInputSurface(
            bufferProducer, bufferConsumer);
!!!40203703.cpp!!!	setInputSurface(in node : node_id, in port_index : OMX_U32, in bufferConsumer : sp<IGraphicBufferConsumer>, inout type : MetadataBufferType) : status_t
    return getOMX(node)->setInputSurface(node, port_index, bufferConsumer, type);
!!!40203831.cpp!!!	signalEndOfInputStream(in node : node_id) : status_t
    return getOMX(node)->signalEndOfInputStream(node);
!!!40203959.cpp!!!	allocateSecureBuffer(in node : node_id, in port_index : OMX_U32, in size : size_t, inout buffer : buffer_id, inout buffer_data : void, inout native_handle : sp<NativeHandle>) : status_t
    return getOMX(node)->allocateSecureBuffer(
            node, port_index, size, buffer, buffer_data, native_handle);
!!!40204087.cpp!!!	allocateBufferWithBackup(in node : node_id, in port_index : OMX_U32, in params : sp<IMemory>, inout buffer : buffer_id, in allottedSize : OMX_U32) : status_t
    return getOMX(node)->allocateBufferWithBackup(
            node, port_index, params, buffer, allottedSize);
!!!40204215.cpp!!!	freeBuffer(in node : node_id, in port_index : OMX_U32, in buffer : buffer_id) : status_t
    return getOMX(node)->freeBuffer(node, port_index, buffer);
!!!40204343.cpp!!!	fillBuffer(in node : node_id, in buffer : buffer_id, in fenceFd : int) : status_t
    return getOMX(node)->fillBuffer(node, buffer, fenceFd);
!!!40204471.cpp!!!	emptyBuffer(in node : node_id, in buffer : buffer_id, in range_offset : OMX_U32, in range_length : OMX_U32, in flags : OMX_U32, in timestamp : OMX_TICKS, in fenceFd : int) : status_t
    return getOMX(node)->emptyBuffer(
            node, buffer, range_offset, range_length, flags, timestamp, fenceFd);
!!!40204599.cpp!!!	getExtensionIndex(in node : node_id, in parameter_name : char, inout index : OMX_INDEXTYPE) : status_t
    return getOMX(node)->getExtensionIndex(node, parameter_name, index);
!!!40204727.cpp!!!	setInternalOption(in node : node_id, in port_index : OMX_U32, in type : InternalOptionType, in data : void, in size : size_t) : status_t
    return getOMX(node)->setInternalOption(node, port_index, type, data, size);
!!!40204855.cpp!!!	isLocalNode(in node : node_id) : bool
    Mutex::Autolock autoLock(mLock);

    return isLocalNode_l(node);
!!!40204983.cpp!!!	isLocalNode_l(in node : node_id) : bool
    return mNodeLocation.valueFor(node) == LOCAL;
!!!40205111.cpp!!!	getOMX(in node : node_id) : sp<IOMX>
    Mutex::Autolock autoLock(mLock);
    return getOMX_l(node);
!!!40205239.cpp!!!	getOMX_l(in node : node_id) : sp<IOMX>
    node_location loc = mNodeLocation.valueFor(node);
    if (loc == LOCAL) {
        return mLocalOMX;
    } else if (loc == MEDIAPROCESS) {
        return mMediaServerOMX;
    } else if (loc == CODECPROCESS) {
        return mMediaCodecOMX;
    }
    ALOGE("Couldn't determine node location for node %d: %d, using local", node, loc);
    return mLocalOMX;
!!!40205367.cpp!!!	getPreferredCodecLocation(in name : char) : MuxOMX::node_location
    if (sCodecProcessEnabled) {
        // all codecs go to codec process unless excluded using system property, in which case
        // all non-secure decoders, OMX.google.* codecs and encoders can go in the codec process
        // (non-OMX.google.* encoders can be excluded using system property.)
        if ((strcasestr(name, "decoder")
                        && strcasestr(name, ".secure") != name + strlen(name) - 7)
                || (strcasestr(name, "encoder")
                        && !property_get_bool("media.stagefright.legacyencoder", false))
                || !property_get_bool("media.stagefright.less-secure", false)
                || !strncasecmp(name, "OMX.google.", 11)) {
            return CODECPROCESS;
        }
        // everything else runs in the media server
        return MEDIAPROCESS;
    } else {
#ifdef __LP64__
        // 64 bit processes always run OMX remote on MediaServer
        return MEDIAPROCESS;
#else
        // 32 bit processes run only OMX.google.* components locally
        if (!strncasecmp(name, "OMX.google.", 11)) {
            return LOCAL;
        }
        return MEDIAPROCESS;
#endif
    }
