class FLACSource
!!!40174391.cpp!!!	FLACSource(in dataSource : sp<DataSource>, in trackMetadata : sp<MetaData>)
    ALOGV("FLACSource::FLACSource");
    mInitCheck = init();
!!!40174519.cpp!!!	start(inout params : MetaData) : status_t
    ALOGV("FLACSource::start");

    CHECK(!mStarted);
    mParser->allocateBuffers();
    mStarted = true;

    return OK;
!!!40174647.cpp!!!	stop() : status_t
    ALOGV("FLACSource::stop");

    CHECK(mStarted);
    mParser->releaseBuffers();
    mStarted = false;

    return OK;
!!!40174775.cpp!!!	getFormat() : sp<MetaData>
    return mTrackMetadata;
!!!40174903.cpp!!!	read(inout outBuffer : MediaBuffer, in options : ReadOptions = NULL) : status_t
    MediaBuffer *buffer;
    // process an optional seek request
    int64_t seekTimeUs;
    ReadOptions::SeekMode mode;
    if ((NULL != options) && options->getSeekTo(&seekTimeUs, &mode)) {
        FLAC__uint64 sample;
        if (seekTimeUs <= 0LL) {
            sample = 0LL;
        } else {
            // sample and total samples are both zero-based, and seek to EOF ok
            sample = (seekTimeUs * mParser->getSampleRate()) / 1000000LL;
            if (sample >= mParser->getTotalSamples()) {
                sample = mParser->getTotalSamples();
            }
        }
        buffer = mParser->readBuffer(sample);
    // otherwise read sequentially
    } else {
        buffer = mParser->readBuffer();
    }
    *outBuffer = buffer;
    return buffer != NULL ? (status_t) OK : (status_t) ERROR_END_OF_STREAM;
!!!40175031.cpp!!!	~FLACSource()
    ALOGV("~FLACSource::FLACSource");
    if (mStarted) {
        stop();
    }
!!!40175159.cpp!!!	init() : status_t
    ALOGV("FLACSource::init");
    // re-use the same track metadata passed into constructor from FLACExtractor
    mParser = new FLACParser(mDataSource);
    return mParser->initCheck();
