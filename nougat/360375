format 76
"include" // nougat_src::frameworks::av::drm::libdrmframework::plugins::common::include
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/drm/libdrmframework/plugins/common/include/"
  cpp_src_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/drm/libdrmframework/plugins/common/include/"
  cpp_namespace "android"
  classview 316983 "include"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 3399735 "IDrmEngine"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is an interface for plug-in user

Responsibility of this class is provide generic interface to DRM Engine Manager.
Each interface need to be as abstract as possible."
      class 3399863 "OnInfoListener"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 39699895 "onInfo"
	  abstract cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "event" type class_ref 3401399 // DrmInfoEvent
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 39700023 "~OnInfoListener"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	  
	  
	  
	  
	end
      end

      operation 39699767 "~IDrmEngine"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
    };
"
	
	
	
	
      end

      operation 39700151 "initialize"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "////////////////////////////////
 Implementation of IDrmEngine //
////////////////////////////////

Initialize plug-in

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39700279 "setOnInfoListener"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "infoListener" type class_ref 3399863 // OnInfoListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register a callback to be invoked when the caller required to
receive necessary information

@param[in] uniqueId Unique identifier for a session
@param[in] infoListener Listener
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39700407 "terminate"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Terminate the plug-in
and release resource bound to plug-in
e.g.) release native resource

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39700535 "getConstraints"
	abstract cpp_virtual public return_type class_ref 3399991 // DrmConstraints
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get constraint information associated with input content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Actions defined such as,
    Action::DEFAULT, Action::PLAY, etc
@return DrmConstraints
    key-value pairs of constraint are embedded in it
@note
    In case of error, return NULL"
      end

      operation 39700663 "getMetadata"
	abstract cpp_virtual public return_type class_ref 3400119 // DrmMetadata
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get metadata information associated with input content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@return DrmMetadata
        key-value pairs of metadata
@note
     In case of error, return NULL"
      end

      operation 39700791 "canHandle"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get whether the given content can be handled by this plugin or not

@param[in] uniqueId Unique identifier for a session
@param[in] path Path the protected object
@return bool
    true if this plugin can handle , false in case of not able to handle"
      end

      operation 39700919 "processDrmInfo"
	abstract cpp_virtual public return_type class_ref 3400247 // DrmInfoStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInfo" type class_ref 3400375 // DrmInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes given drm information based on its type

@param[in] uniqueId Unique identifier for a session
@param[in] drmInfo Information needs to be processed
@return DrmInfoStatus
    instance as a result of processing given input"
      end

      operation 39701047 "acquireDrmInfo"
	abstract cpp_virtual public return_type class_ref 3400375 // DrmInfo
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInfoRequest" type class_ref 3400503 // DrmInfoRequest
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves necessary information for registration, unregistration or rights
acquisition information.

@param[in] uniqueId Unique identifier for a session
@param[in] drmInfoRequest Request information to retrieve drmInfo
@return DrmInfo
    instance as a result of processing given input"
      end

      operation 39701175 "saveRights"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmRights" type class_ref 3400631 // DrmRights
	  param in name "rightsPath" explicit_type "String8"
	  param in name "contentPath" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save DRM rights to specified rights path
and make association with content path

@param[in] uniqueId Unique identifier for a session
@param[in] drmRights DrmRights to be saved
@param[in] rightsPath File path where rights to be saved
@param[in] contentPath File path where content was saved
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39701303 "getOriginalMimeType"
	abstract cpp_virtual public explicit_return_type "String8"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "fd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the mime type embedded inside the original content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the content or null.
@param[in] fd File descriptor of the protected content
@return String8
    Returns mime-type of the original content, such as \"video/mpeg\""
      end

      operation 39701431 "getDrmObjectType"
	abstract cpp_virtual public explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "mimeType" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the type of the protected object (content, rights, etc..)
using specified path or mimetype. At least one parameter should be non null
to retrieve DRM object type

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the content or null.
@param[in] mimeType Mime type of the content or null.
@return type of the DRM content,
    such as DrmObjectType::CONTENT, DrmObjectType::RIGHTS_OBJECT"
      end

      operation 39701559 "checkRightsStatus"
	abstract cpp_virtual public explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check whether the given content has valid rights or not

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Action to perform (Action::DEFAULT, Action::PLAY, etc)
@return the status of the rights for the protected content,
    such as RightsStatus::RIGHTS_VALID, RightsStatus::RIGHTS_EXPIRED, etc."
      end

      operation 39701687 "consumeRights"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "action" explicit_type "int"
	  param in name "reserve" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Consumes the rights for a content.
If the reserve parameter is true the rights is reserved until the same
application calls this api again with the reserve parameter set to false.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] action Action to perform. (Action::DEFAULT, Action::PLAY, etc)
@param[in] reserve True if the rights should be reserved.
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39701815 "setPlaybackStatus"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "playbackStatus" explicit_type "int"
	  param in name "position" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the DRM Engine about the playback actions performed on the DRM files.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] playbackStatus Playback action (Playback::START, Playback::STOP, Playback::PAUSE)
@param[in] position Position in the file (in milliseconds) where the start occurs.
    Only valid together with Playback::START.
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39701943 "validateAction"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "action" explicit_type "int"
	  param in name "description" type class_ref 3400887 // ActionDescription
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates whether an action on the DRM content is allowed or not.

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Action to validate (Action::PLAY, Action::TRANSFER, etc)
@param[in] description Detailed description of the action
@return true if the action is allowed."
      end

      operation 39702071 "removeRights"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the rights associated with the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39702199 "removeAllRights"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all the rights information of each plug-in associated with
DRM framework. Will be used in master reset

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39702327 "openConvertSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This API is for Forward Lock based DRM scheme.
Each time the application tries to download a new DRM file
which needs to be converted, then the application has to
begin with calling this API.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39702455 "convertData"
	abstract cpp_virtual public return_type class_ref 3401015 // DrmConvertedStatus
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	  param in name "inputData" type class_ref 3401143 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts and converts the input data which is part of DRM file.
The resultant converted data and the status is returned in the DrmConvertedInfo
object. This method will be called each time there are new block
of data received by the application.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@param[in] inputData Input Data which need to be converted
@return Return object contains the status of the data conversion,
    the output converted data and offset. In this case the
    application will ignore the offset information."
      end

      operation 39702583 "closeConvertSession"
	abstract cpp_virtual public return_type class_ref 3401015 // DrmConvertedStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the Drm Agent when there is no more data which need to be converted
or when an error occurs. Upon successful conversion of the complete data,
the agent will inform that where the header and body signature
should be added. This signature appending is needed to integrity
protect the converted file.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@return Return object contains the status of the data conversion,
    the header and body signature data. It also informs
    the application on which offset these signature data
    should be appended."
      end

      operation 39702711 "getSupportInfo"
	abstract cpp_virtual public return_type class_ref 3401271 // DrmSupportInfo
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the information about the Drm Engine capabilities which includes
supported MimeTypes and file suffixes.

@param[in] uniqueId Unique identifier for a session
@return DrmSupportInfo
    instance which holds the capabilities of a plug-in"
      end

      operation 39702839 "openDecryptSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 6
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "fd" explicit_type "int"
	  param in name "offset" explicit_type "off64_t"
	  param in name "length" explicit_type "off64_t"
	  param in name "mime" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, const ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] fd File descriptor of the protected content to be decrypted
@param[in] offset Start position of the content
@param[in] length The length of the protected content
@param[in] mime Mime type of the protected content if it is
    not NULL or empty
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success"
      end

      operation 39702967 "openDecryptSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "uri" explicit_type "char"
	  param in name "mime" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] uri Path of the protected content to be decrypted
@param[in] mime Mime type of the protected content if it is
    not NULL or empty
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success"
      end

      operation 39703095 "openDecryptSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "buf" type class_ref 3401143 // DrmBuffer
	  param in name "mimeType" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] buf Data to initiate decrypt session
@param[in] mimeType Mime type of the protected content
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success"
      end

      operation 39703223 "closeDecryptSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the decrypt session for the given handle

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39703351 "initializeDecryptUnit"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "headerInfo" type class_ref 3401143 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize decryption for the given unit of the protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] decryptUnitId ID which specifies decryption unit, such as track ID
@param[in] headerInfo Information for initializing decryption of this decrypUnit
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39703479 "decrypt"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 6
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "encBuffer" type class_ref 3401143 // DrmBuffer
	  param inout name "decBuffer" type class_ref 3401143 // DrmBuffer
	  param inout name "IV" type class_ref 3401143 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} * * ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrypt the protected content buffers for the given unit
This method will be called any number of times, based on number of
encrypted streams received from application.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] decryptUnitId ID which specifies decryption unit, such as track ID
@param[in] encBuffer Encrypted data block
@param[out] decBuffer Decrypted data block
@param[in] IV Optional buffer
@return status_t
    Returns the error code for this API
    DRM_NO_ERROR for success, and one of DRM_ERROR_UNKNOWN, DRM_ERROR_LICENSE_EXPIRED
    DRM_ERROR_SESSION_NOT_OPENED, DRM_ERROR_DECRYPT_UNIT_NOT_INITIALIZED,
    DRM_ERROR_DECRYPT for failure."
      end

      operation 39703607 "finalizeDecryptUnit"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finalize decryption for the given unit of the protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] decryptUnitId ID which specifies decryption unit, such as track ID
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39703735 "pread"
	abstract cpp_virtual public explicit_return_type "ssize_t"
	nparams 5
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param inout name "buffer" explicit_type "void"
	  param in name "numBytes" explicit_type "ssize_t"
	  param in name "offset" explicit_type "off64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the specified number of bytes from an open DRM file.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[out] buffer Reference to the buffer that should receive the read data.
@param[in] numBytes Number of bytes to read.
@param[in] offset Offset with which to update the file position.

@return Number of bytes read. Returns -1 for Failure."
      end
    end

    class 3405751 "DrmEngineBase"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is an interface for plug-in developers

Responsibility of this class is control the sequence of actual plug-in.
All each plug-in developer has to do is implement onXXX() type virtual interfaces."
      classrelation 9713847 // <generalisation>
	relation 9713847 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 9713847 // <generalisation>
	  b parent class_ref 3399735 // IDrmEngine
      end

      operation 39691831 "DrmEngineBase"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 39691959 "~DrmEngineBase"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 39692087 "getConstraints"
	public return_type class_ref 3399991 // DrmConstraints
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39692215 "getMetadata"
	public return_type class_ref 3400119 // DrmMetadata
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39692343 "initialize"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39692471 "setOnInfoListener"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "infoListener" type class_ref 3399863 // OnInfoListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39692599 "terminate"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39692727 "canHandle"
	public explicit_return_type "bool"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39692855 "processDrmInfo"
	public return_type class_ref 3400247 // DrmInfoStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInfo" type class_ref 3400375 // DrmInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39692983 "saveRights"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmRights" type class_ref 3400631 // DrmRights
	  param in name "rightsPath" explicit_type "String8"
	  param in name "contentPath" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39693111 "acquireDrmInfo"
	public return_type class_ref 3400375 // DrmInfo
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInfoRequest" type class_ref 3400503 // DrmInfoRequest
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39693239 "getOriginalMimeType"
	public explicit_return_type "String8"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "fd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39693367 "getDrmObjectType"
	public explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "mimeType" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39693495 "checkRightsStatus"
	public explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39693623 "consumeRights"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "action" explicit_type "int"
	  param in name "reserve" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39693751 "setPlaybackStatus"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "playbackStatus" explicit_type "int"
	  param in name "position" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39693879 "validateAction"
	public explicit_return_type "bool"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "action" explicit_type "int"
	  param in name "description" type class_ref 3400887 // ActionDescription
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39694007 "removeRights"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39694135 "removeAllRights"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39694263 "openConvertSession"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39694391 "convertData"
	public return_type class_ref 3401015 // DrmConvertedStatus
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	  param in name "inputData" type class_ref 3401143 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39694519 "closeConvertSession"
	public return_type class_ref 3401015 // DrmConvertedStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39694647 "getSupportInfo"
	public return_type class_ref 3401271 // DrmSupportInfo
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39694775 "openDecryptSession"
	public explicit_return_type "status_t"
	nparams 6
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "fd" explicit_type "int"
	  param in name "offset" explicit_type "off64_t"
	  param in name "length" explicit_type "off64_t"
	  param in name "mime" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, const ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, const ${t5} * ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39694903 "openDecryptSession"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "uri" explicit_type "char"
	  param in name "mime" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, const ${t2} * ${p2}, const ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39695031 "openDecryptSession"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "buf" type class_ref 3401143 // DrmBuffer
	  param in name "mimeType" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39695159 "closeDecryptSession"
	public explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39695287 "initializeDecryptUnit"
	public explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "headerInfo" type class_ref 3401143 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, const ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39695415 "decrypt"
	public explicit_return_type "status_t"
	nparams 6
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "encBuffer" type class_ref 3401143 // DrmBuffer
	  param inout name "decBuffer" type class_ref 3401143 // DrmBuffer
	  param inout name "IV" type class_ref 3401143 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} * * ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, const ${t3} * ${p3}, ${t4} * * ${p4}, ${t5} * ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39695543 "finalizeDecryptUnit"
	public explicit_return_type "status_t"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39695671 "pread"
	public explicit_return_type "ssize_t"
	nparams 5
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param inout name "buffer" explicit_type "void"
	  param in name "numBytes" explicit_type "ssize_t"
	  param in name "offset" explicit_type "off64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 39695799 "onGetConstraints"
	abstract cpp_virtual protected return_type class_ref 3399991 // DrmConstraints
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "///////////////////////////////////////////////////
 Interface for plug-in developers                //
 each plug-in has to implement following method  //
///////////////////////////////////////////////////

Get constraint information associated with input content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Actions defined such as,
    Action::DEFAULT, Action::PLAY, etc
@return DrmConstraints
    key-value pairs of constraint are embedded in it
@note
    In case of error, return NULL"
      end

      operation 39695927 "onGetMetadata"
	abstract cpp_virtual protected return_type class_ref 3400119 // DrmMetadata
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get metadata information associated with input content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@return DrmMetadata
        key-value pairs of metadata
@note
    In case of error, return NULL"
      end

      operation 39696055 "onInitialize"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize plug-in

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39696183 "onSetOnInfoListener"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "infoListener" type class_ref 3399863 // OnInfoListener
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register a callback to be invoked when the caller required to
receive necessary information

@param[in] uniqueId Unique identifier for a session. uniqueId is a random
                    number generated in the DRM service. If the DrmManagerClient
                    is created in native code, uniqueId will be a number ranged
                    from 0x1000 to 0x1fff. If it comes from Java code, the uniqueId
                    will be a number ranged from 0x00 to 0xfff. So bit 0x1000 in
                    uniqueId could be used in DRM plugins to differentiate native
                    OnInfoListener and Java OnInfoListener.
@param[in] infoListener Listener
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39696311 "onTerminate"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Terminate the plug-in
and release resource bound to plug-in

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39696439 "onCanHandle"
	abstract cpp_virtual protected explicit_return_type "bool"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get whether the given content can be handled by this plugin or not

@param[in] uniqueId Unique identifier for a session
@param[in] path Path the protected object
@return bool
    Returns true if this plugin can handle , false in case of not able to handle"
      end

      operation 39696567 "onProcessDrmInfo"
	abstract cpp_virtual protected return_type class_ref 3400247 // DrmInfoStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInfo" type class_ref 3400375 // DrmInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes given drm information based on its type

@param[in] uniqueId Unique identifier for a session
@param[in] drmInfo Information needs to be processed
@return DrmInfoStatus
    instance as a result of processing given input"
      end

      operation 39696695 "onSaveRights"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmRights" type class_ref 3400631 // DrmRights
	  param in name "rightspath" explicit_type "String8"
	  param in name "contentPath" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save DRM rights to specified rights path
and make association with content path

@param[in] uniqueId Unique identifier for a session
@param[in] drmRights DrmRights to be saved
@param[in] rightsPath File path where rights to be saved
@param[in] contentPath File path where content was saved
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39696823 "onAcquireDrmInfo"
	abstract cpp_virtual protected return_type class_ref 3400375 // DrmInfo
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "drmInforequest" type class_ref 3400503 // DrmInfoRequest
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves necessary information for registration, unregistration or rights
acquisition information.

@param[in] uniqueId Unique identifier for a session
@param[in] drmInfoRequest Request information to retrieve drmInfo
@return DrmInfo
    instance as a result of processing given input"
      end

      operation 39696951 "onGetOriginalMimeType"
	abstract cpp_virtual protected explicit_return_type "String8"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "fd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the mime type embedded inside the original content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] fd descriptor of the protected content as a file source
@return String8
    Returns mime-type of the original content, such as \"video/mpeg\""
      end

      operation 39697079 "onGetDrmObjectType"
	abstract cpp_virtual protected explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "mimeType" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the type of the protected object (content, rights, etc..)
using specified path or mimetype. At least one parameter should be non null
to retrieve DRM object type

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the content or null.
@param[in] mimeType Mime type of the content or null.
@return type of the DRM content,
    such as DrmObjectType::CONTENT, DrmObjectType::RIGHTS_OBJECT"
      end

      operation 39697207 "onCheckRightsStatus"
	abstract cpp_virtual protected explicit_return_type "int"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "action" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check whether the given content has valid rights or not

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Action to perform (Action::DEFAULT, Action::PLAY, etc)
@return the status of the rights for the protected content,
    such as RightsStatus::RIGHTS_VALID, RightsStatus::RIGHTS_EXPIRED, etc."
      end

      operation 39697335 "onConsumeRights"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "action" explicit_type "int"
	  param in name "reserve" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Consumes the rights for a content.
If the reserve parameter is true the rights is reserved until the same
application calls this api again with the reserve parameter set to false.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] action Action to perform. (Action::DEFAULT, Action::PLAY, etc)
@param[in] reserve True if the rights should be reserved.
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39697463 "onSetPlaybackStatus"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "playbackStatus" explicit_type "int"
	  param in name "position" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the DRM Engine about the playback actions performed on the DRM files.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] playbackStatus Playback action (Playback::START, Playback::STOP, Playback::PAUSE)
@param[in] position Position in the file (in milliseconds) where the start occurs.
    Only valid together with Playback::START.
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39697591 "onValidateAction"
	abstract cpp_virtual protected explicit_return_type "bool"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	  param in name "action" explicit_type "int"
	  param in name "description" type class_ref 3400887 // ActionDescription
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates whether an action on the DRM content is allowed or not.

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@param[in] action Action to validate (Action::PLAY, Action::TRANSFER, etc)
@param[in] description Detailed description of the action
@return true if the action is allowed."
      end

      operation 39697719 "onRemoveRights"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "path" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the rights associated with the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] path Path of the protected content
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39697847 "onRemoveAllRights"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all the rights information of each plug-in associated with
DRM framework. Will be used in master reset

@param[in] uniqueId Unique identifier for a session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39697975 "onOpenConvertSession"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This API is for Forward Lock based DRM scheme.
Each time the application tries to download a new DRM file
which needs to be converted, then the application has to
begin with calling this API.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39698103 "onConvertData"
	abstract cpp_virtual protected return_type class_ref 3401015 // DrmConvertedStatus
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	  param in name "inputData" type class_ref 3401143 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts and converts the input data which is part of DRM file.
The resultant converted data and the status is returned in the DrmConvertedInfo
object. This method will be called each time there are new block
of data received by the application.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@param[in] inputData Input Data which need to be converted
@return Return object contains the status of the data conversion,
    the output converted data and offset. In this case the
    application will ignore the offset information."
      end

      operation 39698231 "onCloseConvertSession"
	abstract cpp_virtual protected return_type class_ref 3401015 // DrmConvertedStatus
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param in name "convertId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the Drm Agent when there is no more data which need to be converted
or when an error occurs. Upon successful conversion of the complete data,
the agent will inform that where the header and body signature
should be added. This signature appending is needed to integrity
protect the converted file.

@param[in] uniqueId Unique identifier for a session
@param[in] convertId Handle for the convert session
@return Return object contains the status of the data conversion,
    the header and body signature data. It also informs
    the application on which offset these signature data
    should be appended."
      end

      operation 39698359 "onGetSupportInfo"
	abstract cpp_virtual protected return_type class_ref 3401271 // DrmSupportInfo
	nparams 1
	  param in name "uniqueId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the information about the Drm Engine capabilities which includes
supported MimeTypes and file suffixes.

@param[in] uniqueId Unique identifier for a session
@return DrmSupportInfo
    instance which holds the capabilities of a plug-in"
      end

      operation 39698487 "onOpenDecryptSession"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 5
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "fd" explicit_type "int"
	  param in name "offset" explicit_type "off64_t"
	  param in name "length" explicit_type "off64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] fd File descriptor of the protected content to be decrypted
@param[in] offset Start position of the content
@param[in] length The length of the protected content
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success"
      end

      operation 39698615 "onOpenDecryptSession"
	cpp_virtual cpp_inline protected explicit_return_type "status_t"
	nparams 6
	  param in name "" explicit_type "int"
	  param inout name "" type class_ref 3400759 // DecryptHandle
	  param in name "" explicit_type "int"
	  param in name "" explicit_type "off64_t"
	  param in name "" explicit_type "off64_t"
	  param in name "" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, const ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {

        return DRM_ERROR_CANNOT_HANDLE;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] fd File descriptor of the protected content to be decrypted
@param[in] offset Start position of the content
@param[in] length The length of the protected content
@param[in] mime Mime type of the protected content
    drm plugin may do some optimization since the mime type is known.
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success"
      end

      operation 39698743 "onOpenDecryptSession"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "uri" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] uri Path of the protected content to be decrypted
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success"
      end

      operation 39698871 "onOpenDecryptSession"
	cpp_virtual cpp_inline protected explicit_return_type "status_t"
	nparams 4
	  param in name "" explicit_type "int"
	  param inout name "" type class_ref 3400759 // DecryptHandle
	  param in name "" explicit_type "char"
	  param in name "" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {

        return DRM_ERROR_CANNOT_HANDLE;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] uri Path of the protected content to be decrypted
@param[in] mime Mime type of the protected content. The corresponding
    drm plugin may do some optimization since the mime type is known.
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success"
      end

      operation 39698999 "onOpenDecryptSession"
	cpp_virtual cpp_inline protected explicit_return_type "status_t"
	nparams 4
	  param in name "" explicit_type "int"
	  param inout name "" type class_ref 3400759 // DecryptHandle
	  param in name "" type class_ref 3401143 // DrmBuffer
	  param in name "" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return DRM_ERROR_CANNOT_HANDLE;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Open the decrypt session to decrypt the given protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the current decryption session
@param[in] buf Data to initiate decrypt session
@param[in] mimeType Mime type of the protected content
@return
    DRM_ERROR_CANNOT_HANDLE for failure and DRM_NO_ERROR for success"
      end

      operation 39699127 "onCloseDecryptSession"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 2
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close the decrypt session for the given handle

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39699255 "onInitializeDecryptUnit"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "headerInfo" type class_ref 3401143 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize decryption for the given unit of the protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptId Handle for the decryption session
@param[in] decryptUnitId ID Specifies decryption unit, such as track ID
@param[in] headerInfo Information for initializing decryption of this decrypUnit
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39699383 "onDecrypt"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 6
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	  param in name "encBuffer" type class_ref 3401143 // DrmBuffer
	  param inout name "decBuffer" type class_ref 3401143 // DrmBuffer
	  param inout name "IV" type class_ref 3401143 // DrmBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} * * ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrypt the protected content buffers for the given unit
This method will be called any number of times, based on number of
encrypted streams received from application.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptId Handle for the decryption session
@param[in] decryptUnitId ID Specifies decryption unit, such as track ID
@param[in] encBuffer Encrypted data block
@param[out] decBuffer Decrypted data block
@param[in] IV Optional buffer
@return status_t
    Returns the error code for this API
    DRM_NO_ERROR for success, and one of DRM_ERROR_UNKNOWN, DRM_ERROR_LICENSE_EXPIRED
    DRM_ERROR_SESSION_NOT_OPENED, DRM_ERROR_DECRYPT_UNIT_NOT_INITIALIZED,
    DRM_ERROR_DECRYPT for failure."
      end

      operation 39699511 "onFinalizeDecryptUnit"
	abstract cpp_virtual protected explicit_return_type "status_t"
	nparams 3
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param in name "decryptUnitId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finalize decryption for the given unit of the protected content

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[in] decryptUnitId ID Specifies decryption unit, such as track ID
@return status_t
    Returns DRM_NO_ERROR for success, DRM_ERROR_UNKNOWN for failure"
      end

      operation 39699639 "onPread"
	abstract cpp_virtual protected explicit_return_type "ssize_t"
	nparams 5
	  param in name "uniqueId" explicit_type "int"
	  param inout name "decryptHandle" type class_ref 3400759 // DecryptHandle
	  param inout name "buffer" explicit_type "void"
	  param in name "numBytes" explicit_type "ssize_t"
	  param in name "offset" explicit_type "off64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the specified number of bytes from an open DRM file.

@param[in] uniqueId Unique identifier for a session
@param[in] decryptHandle Handle for the decryption session
@param[out] buffer Reference to the buffer that should receive the read data.
@param[in] numBytes Number of bytes to read.
@param[in] offset Offset with which to update the file position.

@return Number of bytes read. Returns -1 for Failure."
      end
    end
  end

  deploymentview 273207 "include"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1468599 "DrmEngineBase"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3405751 // DrmEngineBase
      end
    end

    artifact 1468727 "IDrmEngine"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3399735 // IDrmEngine
      end
    end
  end
end
