class TSPacketizer::Track
!!!40230583.cpp!!!	PID() : uint
    return mPID;
!!!40230711.cpp!!!	streamType() : uint
    return mStreamType;
!!!40230839.cpp!!!	streamID() : uint
    return mStreamID;
!!!40230967.cpp!!!	incrementContinuityCounter() : uint
    unsigned prevCounter = mContinuityCounter;

    if (++mContinuityCounter == 16) {
        mContinuityCounter = 0;
    }

    return prevCounter;
!!!40231095.cpp!!!	isAudio() : bool
    return !strncasecmp("audio/", mMIME.c_str(), 6);
!!!40231223.cpp!!!	isVideo() : bool
    return !strncasecmp("video/", mMIME.c_str(), 6);
!!!40231351.cpp!!!	isH264() : bool
    return !strcasecmp(mMIME.c_str(), MEDIA_MIMETYPE_VIDEO_AVC);
!!!40231479.cpp!!!	isAAC() : bool
    return !strcasecmp(mMIME.c_str(), MEDIA_MIMETYPE_AUDIO_AAC);
!!!40231607.cpp!!!	lacksADTSHeader() : bool
    return mAudioLacksATDSHeaders;
!!!40231735.cpp!!!	isPCMAudio() : bool
    return !strcasecmp(mMIME.c_str(), MEDIA_MIMETYPE_AUDIO_RAW);
!!!40231863.cpp!!!	prependCSD(in accessUnit : sp<ABuffer>) : sp<ABuffer>
    size_t size = 0;
    for (size_t i = 0; i < mCSD.size(); ++i) {
        size += mCSD.itemAt(i)->size();
    }

    sp<ABuffer> dup = new ABuffer(accessUnit->size() + size);
    size_t offset = 0;
    for (size_t i = 0; i < mCSD.size(); ++i) {
        const sp<ABuffer> &csd = mCSD.itemAt(i);

        memcpy(dup->data() + offset, csd->data(), csd->size());
        offset += csd->size();
    }

    memcpy(dup->data() + offset, accessUnit->data(), accessUnit->size());

    return dup;
!!!40231991.cpp!!!	prependADTSHeader(in accessUnit : sp<ABuffer>) : sp<ABuffer>
    CHECK_EQ(mCSD.size(), 1u);

    const uint8_t *codec_specific_data = mCSD.itemAt(0)->data();

    const uint32_t aac_frame_length = accessUnit->size() + 7;

    sp<ABuffer> dup = new ABuffer(aac_frame_length);

    unsigned profile = (codec_specific_data[0] >> 3) - 1;

    unsigned sampling_freq_index =
        ((codec_specific_data[0] & 7) << 1)
        | (codec_specific_data[1] >> 7);

    unsigned channel_configuration =
        (codec_specific_data[1] >> 3) & 0x0f;

    uint8_t *ptr = dup->data();

    *ptr++ = 0xff;
    *ptr++ = 0xf9;  // b11111001, ID=1(MPEG-2), layer=0, protection_absent=1

    *ptr++ =
        profile << 6
        | sampling_freq_index << 2
        | ((channel_configuration >> 2) & 1);  // private_bit=0

    // original_copy=0, home=0, copyright_id_bit=0, copyright_id_start=0
    *ptr++ =
        (channel_configuration & 3) << 6
        | aac_frame_length >> 11;
    *ptr++ = (aac_frame_length >> 3) & 0xff;
    *ptr++ = (aac_frame_length & 7) << 5;

    // adts_buffer_fullness=0, number_of_raw_data_blocks_in_frame=0
    *ptr++ = 0;

    memcpy(ptr, accessUnit->data(), accessUnit->size());

    return dup;
!!!40232119.cpp!!!	countDescriptors() : size_t
    return mDescriptors.size();
!!!40232247.cpp!!!	descriptorAt(in index : size_t) : sp<ABuffer>
    CHECK_LT(index, mDescriptors.size());
    return mDescriptors.itemAt(index);
!!!40232375.cpp!!!	finalize() : void
    if (mFinalized) {
        return;
    }

    if (isH264()) {
        {
            // AVC video descriptor (40)

            sp<ABuffer> descriptor = new ABuffer(6);
            uint8_t *data = descriptor->data();
            data[0] = 40;  // descriptor_tag
            data[1] = 4;  // descriptor_length

            if (mCSD.size() > 0) {
                CHECK_GE(mCSD.size(), 1u);
                const sp<ABuffer> &sps = mCSD.itemAt(0);
                CHECK(!memcmp("\x00\x00\x00\x01", sps->data(), 4));
                CHECK_GE(sps->size(), 7u);
                // profile_idc, constraint_set*, level_idc
                memcpy(&data[2], sps->data() + 4, 3);
            } else {
                int32_t profileIdc, levelIdc, constraintSet;
                CHECK(mFormat->findInt32("profile-idc", &profileIdc));
                CHECK(mFormat->findInt32("level-idc", &levelIdc));
                CHECK(mFormat->findInt32("constraint-set", &constraintSet));
                CHECK_GE(profileIdc, 0u);
                CHECK_GE(levelIdc, 0u);
                data[2] = profileIdc;    // profile_idc
                data[3] = constraintSet; // constraint_set*
                data[4] = levelIdc;      // level_idc
            }

            // AVC_still_present=0, AVC_24_hour_picture_flag=0, reserved
            data[5] = 0x3f;

            mDescriptors.push_back(descriptor);
        }

        {
            // AVC timing and HRD descriptor (42)

            sp<ABuffer> descriptor = new ABuffer(4);
            uint8_t *data = descriptor->data();
            data[0] = 42;  // descriptor_tag
            data[1] = 2;  // descriptor_length

            // hrd_management_valid_flag = 0
            // reserved = 111111b
            // picture_and_timing_info_present = 0

            data[2] = 0x7e;

            // fixed_frame_rate_flag = 0
            // temporal_poc_flag = 0
            // picture_to_display_conversion_flag = 0
            // reserved = 11111b
            data[3] = 0x1f;

            mDescriptors.push_back(descriptor);
        }
    } else if (isPCMAudio()) {
        // LPCM audio stream descriptor (0x83)

        int32_t channelCount;
        CHECK(mFormat->findInt32("channel-count", &channelCount));
        CHECK_EQ(channelCount, 2);

        int32_t sampleRate;
        CHECK(mFormat->findInt32("sample-rate", &sampleRate));
        CHECK(sampleRate == 44100 || sampleRate == 48000);

        sp<ABuffer> descriptor = new ABuffer(4);
        uint8_t *data = descriptor->data();
        data[0] = 0x83;  // descriptor_tag
        data[1] = 2;  // descriptor_length

        unsigned sampling_frequency = (sampleRate == 44100) ? 1 : 2;

        data[2] = (sampling_frequency << 5)
                    | (3 /* reserved */ << 1)
                    | 0 /* emphasis_flag */;

        data[3] =
            (1 /* number_of_channels = stereo */ << 5)
            | 0xf /* reserved */;

        mDescriptors.push_back(descriptor);
    }

    mFinalized = true;
!!!40232503.cpp!!!	extractCSDIfNecessary() : void
    if (mExtractedCSD) {
        return;
    }

    if (!strcasecmp(mMIME.c_str(), MEDIA_MIMETYPE_VIDEO_AVC)
            || !strcasecmp(mMIME.c_str(), MEDIA_MIMETYPE_AUDIO_AAC)) {
        for (size_t i = 0;; ++i) {
            sp<ABuffer> csd;
            if (!mFormat->findBuffer(AStringPrintf("csd-%d", i).c_str(), &csd)) {
                break;
            }

            mCSD.push(csd);
        }

        if (!strcasecmp(mMIME.c_str(), MEDIA_MIMETYPE_AUDIO_AAC)) {
            int32_t isADTS;
            if (!mFormat->findInt32("is-adts", &isADTS) || isADTS == 0) {
                mAudioLacksATDSHeaders = true;
            }
        }
    }

    mExtractedCSD = true;
