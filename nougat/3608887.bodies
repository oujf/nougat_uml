class MPEG2PSExtractor::Track
!!!40225463.cpp!!!	stop() : status_t
    if (mSource == NULL) {
        return NO_INIT;
    }

    return mSource->stop();
!!!40225591.cpp!!!	getFormat() : sp<MetaData>
    if (mSource == NULL) {
        return NULL;
    }

    return mSource->getFormat();
!!!40225719.cpp!!!	read(inout buffer : MediaBuffer, in options : ReadOptions) : status_t
    if (mSource == NULL) {
        return NO_INIT;
    }

    status_t finalResult;
    while (!mSource->hasBufferAvailable(&finalResult)) {
        if (finalResult != OK) {
            return ERROR_END_OF_STREAM;
        }

        status_t err = mExtractor->feedMore();

        if (err != OK) {
            mSource->signalEOS(err);
        }
    }

    return mSource->read(buffer, options);
!!!40225847.cpp!!!	appendPESData(in PTS_DTS_flags : uint, in PTS : uint64_t, in DTS : uint64_t, in data : uint8_t, in size : size_t) : status_t
    if (mQueue == NULL) {
        return OK;
    }

    int64_t timeUs;
    if (PTS_DTS_flags == 2 || PTS_DTS_flags == 3) {
        timeUs = (PTS * 100) / 9;
    } else {
        timeUs = 0;
    }

    status_t err = mQueue->appendData(data, size, timeUs);

    if (err != OK) {
        return err;
    }

    sp<ABuffer> accessUnit;
    while ((accessUnit = mQueue->dequeueAccessUnit()) != NULL) {
        if (mSource == NULL) {
            sp<MetaData> meta = mQueue->getFormat();

            if (meta != NULL) {
                ALOGV("Stream ID 0x%02x now has data.", mStreamID);

                mSource = new AnotherPacketSource(meta);
                mSource->queueAccessUnit(accessUnit);
            }
        } else if (mQueue->getFormat() != NULL) {
            mSource->queueAccessUnit(accessUnit);
        }
    }

    return OK;
