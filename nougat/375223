format 76
"testlibs" // nougat_src::frameworks::av::media::libeffects::testlibs
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/media/libeffects/testlibs/"
  cpp_src_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/media/libeffects/testlibs/"
  cpp_namespace "android"
  classview 327991 "testlibs"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 3445559 "AudioBiquadFilter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " A biquad filter.
 Implements the recursion y[n]=a0*y[n-1]+a1*y[n-2]+b0*x[n]+b1*x[n-1]+b2*x[n-2]
 (the a0 and a1 coefficients have an opposite sign to the common convention)
 The filter works on fixed sized blocks of data (frameCount multi-channel
 samples, as defined during construction). An arbitrary number of interlaced
 channels is supported.
 Filter can operate in an enabled (active) or disabled (bypassed) states.
 A mechanism for suppression of artifacts caused by abrupt coefficient changes
 is implemented: normally, when the enable(), disable() and setCoefs() methods
 are called without the immediate flag set, the filter smoothly transitions
 from its current state to the desired state."
      attribute 10679095 "MAX_CHANNELS"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Max number of channels (can be changed here, and everything should work)."
      end

      attribute 10679223 "NUM_COEFS"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of coefficients."
      end

      operation 39743799 "AudioBiquadFilter"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "nChannels" explicit_type "int"
	  param in name "sampleRate" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Constructor.
 nChannels    Number of input/output channels.
 sampleRate   Sample rate, in Hz."
      end

      operation 39743927 "configure"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "nChannels" explicit_type "int"
	  param in name "sampleRate" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reconfiguration of the filter. Implies clear().
 nChannels    Number of input/output channels.
 sampleRate   Sample rate, in Hz."
      end

      operation 39744055 "reset"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Resets the internal state of the filter.
 Coefficients are reset to identity, state becomes disabled. This change
 happens immediately and might cause discontinuities in the output.
 Delay lines are not cleared."
      end

      operation 39744183 "clear"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears the delay lines.
 This change happens immediately and might cause discontinuities in the
 output."
      end

      operation 39744311 "setCoefs"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "coefs" type class_ref 3445687 // audio_coef_t
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[NUM_COEFS]${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}[NUM_COEFS], ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the coefficients.
 If called when filter is disabled, will have no immediate effect, but the
 new coefficients will be set and used next time the filter is enabled.
 coefs        The new coefficients.
 immediate    If true, transitions to new coefficients smoothly, without
              introducing discontinuities in the output. Otherwise,
              transitions immediately."
      end

      operation 39744439 "process"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "in" type class_ref 3445815 // audio_sample_t
	  param in name "out" type class_ref 3445815 // audio_sample_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[]${v0}, ${t1} ${p1}[]${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}[], ${t1} ${p1}[], ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Process a buffer of data. Always processes frameCount multi-channel
 samples. Processing can be done in-place, by passing the same buffer as
 both arguments.
 in           The input buffer. Should be of size frameCount * nChannels.
 out          The output buffer. Should be of size frameCount * nChannels.
 frameCount   Number of multi-channel samples to process."
      end

      operation 39744567 "enable"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Enables (activates) the filter.
 immediate    If true, transitions to new state smoothly, without
              introducing discontinuities in the output. Otherwise,
              transitions immediately."
      end

      operation 39744695 "disable"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Disables (bypasses) the filter.
 immediate    If true, transitions to new state smoothly, without
              introducing discontinuities in the output. Otherwise,
              transitions immediately."
      end

      class 3445943 "process_func"
	visibility package stereotype "typedef" explicit_base_type "void"
	cpp_decl "${comment}typedef ${type}(AudioBiquadFilter::* ${name})(const audio_sample_t[],
                                                    audio_sample_t[],
                                                    int frameCount);
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 9779255 // MAX_DELTA_PER_SEC (<directional composition>)
	relation 9779255 *-->
	  a role_name "MAX_DELTA_PER_SEC" init_value "=  2000" class_relation const_relation private
	    comment " The maximum rate of coefficient change, measured in coefficient units per
 second."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9779255 // MAX_DELTA_PER_SEC (<directional composition>)
	  b parent class_ref 3445687 // audio_coef_t
      end

      classrelation 9779383 // IDENTITY_COEFS (<directional composition>)
	relation 9779383 *-->
	  a role_name "IDENTITY_COEFS" multiplicity "[NUM_COEFS]" init_value "= { AUDIO_COEF_ONE, 0, 0, 0, 0 }" class_relation const_relation private
	    comment " Coefficients of identity transformation."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9779383 // IDENTITY_COEFS (<directional composition>)
	  b parent class_ref 3445687 // audio_coef_t
      end

      class 3446071 "state_t"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 10679351 "STATE_BYPASS"
	  public type class_ref 3446071 // state_t
	  init_value " 0x01"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10679479 "STATE_TRANSITION_TO_BYPASS"
	  public type class_ref 3446071 // state_t
	  init_value " 0x02"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10679607 "STATE_TRANSITION_TO_NORMAL"
	  public type class_ref 3446071 // state_t
	  init_value " 0x04"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10679735 "STATE_NORMAL"
	  public type class_ref 3446071 // state_t
	  init_value " 0x05"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10679863 "STATE_ENABLED_MASK"
	  public type class_ref 3446071 // state_t
	  init_value " 0x04
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      attribute 10679991 "mNumChannels"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of channels."
      end

      classrelation 9779511 // mState (<directional composition>)
	relation 9779511 *-->
	  a role_name "mState" private
	    comment " Current state."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9779511 // mState (<directional composition>)
	  b parent class_ref 3446071 // state_t
      end

      classrelation 9779639 // mMaxDelta (<directional composition>)
	relation 9779639 *-->
	  a role_name "mMaxDelta" private
	    comment " Maximum coefficient delta per sample."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9779639 // mMaxDelta (<directional composition>)
	  b parent class_ref 3445687 // audio_coef_t
      end

      attribute 10680119 "mCoefDirtyBits"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " A bit-mask designating for which coefficients the current value is not
 necessarily identical to the target value (since we're in transition
 state)."
      end

      classrelation 9779767 // mCoefs (<directional composition>)
	relation 9779767 *-->
	  a role_name "mCoefs" multiplicity "[NUM_COEFS]" private
	    comment " The current coefficients."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9779767 // mCoefs (<directional composition>)
	  b parent class_ref 3445687 // audio_coef_t
      end

      classrelation 9779895 // mTargetCoefs (<directional composition>)
	relation 9779895 *-->
	  a role_name "mTargetCoefs" multiplicity "[NUM_COEFS]" private
	    comment " The target coefficients. Will not be identical to mCoefs if we are in a
 transition state."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9779895 // mTargetCoefs (<directional composition>)
	  b parent class_ref 3445687 // audio_coef_t
      end

      classrelation 9780023 // mDelays (<directional composition>)
	relation 9780023 *-->
	  a role_name "mDelays" multiplicity "[MAX_CHANNELS][4]" private
	    comment " The delay lines."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9780023 // mDelays (<directional composition>)
	  b parent class_ref 3445815 // audio_sample_t
      end

      classrelation 9780151 // mCurProcessFunc (<directional composition>)
	relation 9780151 *-->
	  a role_name "mCurProcessFunc" private
	    comment " Current processing function (determines according to current state and
 number of channels)."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9780151 // mCurProcessFunc (<directional composition>)
	  b parent class_ref 3445943 // process_func
      end

      operation 39744823 "setState"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "state" type class_ref 3446071 // state_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets a new state. Updates the processing function accordingly, and sets
 the dirty bits if changing to a transition state."
      end

      operation 39744951 "updateCoefs"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 2
	  param in name "coefs" type class_ref 3445687 // audio_coef_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[NUM_COEFS]${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}[NUM_COEFS], ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " In a transition state, modifies the current coefs towards the passed
 coefs, while keeping a smooth change rate. Whenever a coef reaches its
 target value, the dirty bit is cleared. If all are clear, the function
 returns true, and we can then change to our target state."
      end

      operation 39745079 "process_bypass"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param in name "in" type class_ref 3445815 // audio_sample_t
	  param inout name "out" type class_ref 3445815 // audio_sample_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Processing function when in disabled state."
      end

      operation 39745207 "process_normal_mono"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param in name "in" type class_ref 3445815 // audio_sample_t
	  param inout name "out" type class_ref 3445815 // audio_sample_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Processing function when in normal state, mono."
      end

      operation 39745335 "process_transition_normal_mono"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param in name "in" type class_ref 3445815 // audio_sample_t
	  param inout name "out" type class_ref 3445815 // audio_sample_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Processing function when transitioning to normal state, mono."
      end

      operation 39745463 "process_transition_bypass_mono"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param in name "in" type class_ref 3445815 // audio_sample_t
	  param inout name "out" type class_ref 3445815 // audio_sample_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Processing function when transitioning to bypass state, mono."
      end

      operation 39745591 "process_normal_multi"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param in name "in" type class_ref 3445815 // audio_sample_t
	  param inout name "out" type class_ref 3445815 // audio_sample_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Processing function when in normal state, multi-channel."
      end

      operation 39745719 "process_transition_normal_multi"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param in name "in" type class_ref 3445815 // audio_sample_t
	  param inout name "out" type class_ref 3445815 // audio_sample_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Processing function when transitioning to normal state, multi-channel."
      end

      operation 39745847 "process_transition_bypass_multi"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 3
	  param in name "in" type class_ref 3445815 // audio_sample_t
	  param inout name "out" type class_ref 3445815 // audio_sample_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Processing function when transitioning to bypass state, multi-channel."
      end
    end

    class 3445687 "audio_coef_t"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Audio coefficient type."
    end

    class 3445815 "audio_sample_t"
      visibility package stereotype "typedef" explicit_base_type "int32_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Audio sample type."
    end

    class 3446199 "AudioCoefInterpolator"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " A helper class for linear interpolation of N-D -> M-D coefficient tables.
 This class provides support for out-of-range indexes.
 Details:
 The purpose is efficient approximation of a N-dimensional vector to
 M-dimensional function. The approximation is based on a table of output
 values on a uniform grid of the input values. Values not on the grid are
 linearly interpolated.
 Access to values are done by specifying input values in table index units,
 having an integer and a fractional part, e.g. retrieving a value from index
 1.4 will result in linear interpolation between index 1 and index 2."
      operation 39745975 "AudioCoefInterpolator"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 4
	  param in name "nInDims" explicit_type "size_t"
	  param in name "inDims" explicit_type "size_t"
	  param in name "nOutDims" explicit_type "size_t"
	  param in name "table" type class_ref 3445687 // audio_coef_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}[]${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}[], ${t2} ${p2}, const ${t3} * ${p3}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Constructor.
 nInDims      Number of input dimensions (limited to MAX_IN_DIMS).
 inDims       An array of size nInDims with the size of the table on each
              respective dimension.
 nOutDims     Number of output dimensions (limited to MAX_OUT_DIMS).
 table        The coefficient table. Should be of size:
              inDims[0]*inDims[1]*...*inDims[nInDims-1]*nOutDims, where
              func([i,j,k]) = table(i,j,k,:)"
      end

      operation 39746103 "getCoef"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "intCoord" explicit_type "int"
	  param in name "fracCoord" explicit_type "uint32_t"
	  param in name "out" type class_ref 3445687 // audio_coef_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[]${v0}, ${t1} ${p1}[]${v1}, ${t2} ${p2}[]${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}[], ${t1} ${p1}[], ${t2} ${p2}[]${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the value of the approximated function at a given point.
 intCoord     The integer part of the input value. Should be an array of
              size nInDims.
 fracCoord    The fractional part of the input value. Should be an array
              of size nInDims. This value is in 32-bit precision.
 out          An array for the output value. Should be of size nOutDims."
      end

      attribute 10680247 "MAX_IN_DIMS"
	class_attribute const_attribute private explicit_type "size_t"
	init_value "=  8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Maximum allowed number of input dimensions."
      end

      attribute 10680375 "MAX_OUT_DIMS"
	class_attribute const_attribute private explicit_type "size_t"
	init_value "=  8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Maximum allowed number of output dimensions."
      end

      attribute 10680503 "mNumInDims"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of input dimensions."
      end

      attribute 10680631 "mInDims"
	private explicit_type "size_t"
	multiplicity "[MAX_IN_DIMS]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of input dimensions."
      end

      attribute 10680759 "mInDimOffsets"
	private explicit_type "size_t"
	multiplicity "[MAX_IN_DIMS]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The offset between two consecutive indexes of each dimension. This is in
 fact a cumulative product of mInDims (done in reverse)."
      end

      attribute 10680887 "mNumOutDims"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of output dimensions."
      end

      classrelation 9780279 // mTable (<unidirectional association>)
	relation 9780279 --->
	  a role_name "mTable" const_relation private
	    comment " The coefficient table."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9780279 // mTable (<unidirectional association>)
	  b parent class_ref 3445687 // audio_coef_t
      end

      operation 39746231 "getCoefRecurse"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 4
	  param in name "index" explicit_type "size_t"
	  param in name "fracCoord" explicit_type "uint32_t"
	  param in name "out" type class_ref 3445687 // audio_coef_t
	  param in name "dim" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}[]${v1}, ${t2} ${p2}[]${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}[], ${t2} ${p2}[], ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A recursive function for getting an interpolated coefficient value.
 The recursion depth is the number of input dimensions.
 At each step, we fetch two interpolated values of the current dimension,
 by two recursive calls to this method for the next dimensions. We then
 linearly interpolate these values over the current dimension.
 index      The linear integer index of the value we need to interpolate.
 fracCoord  A vector of fractional coordinates for each of the input
            dimensions.
 out        Where the output should be written. Needs to be of size
            mNumOutDims.
 dim        The input dimensions we are currently interpolating. This
            value will be increased on recursive calls."
      end

      operation 39746359 "interp"
	class_operation preserve_cpp_body_indent private return_type class_ref 3445687 // audio_coef_t
	nparams 3
	  param in name "lo" type class_ref 3445687 // audio_coef_t
	  param in name "hi" type class_ref 3445687 // audio_coef_t
	  param in name "frac" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Scalar interpolation of two data points.
 lo       The first data point.
 hi       The second data point.
 frac     A 32-bit fraction designating the weight of the second point."
      end
    end

    class 3446327 "audio_coef_sample_acc_t"
      visibility package stereotype "typedef" explicit_base_type "int64_t"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Accumulator type for coef x sample."
    end

    class 3446455 "AudioEqualizer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " A parametric audio equalizer. Supports an arbitrary number of bands and
 presets.
 The EQ is composed of a low-shelf, zero or more peaking filters and a high
 shelf, where each band has frequency and gain controls, and the peaking
 filters have an additional bandwidth control."
      class 3446583 "BandConfig"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 10681015 "gain"
	  public explicit_type "int32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Gain in millibel."
	end

	attribute 10681143 "freq"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Frequency in millihertz."
	end

	attribute 10681271 "bandwidth"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Bandwidth in cents (ignored on shelving filters)."
	end
      end

      class 3446711 "PresetConfig"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 10681399 "name"
	  const_attribute public explicit_type "char"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Human-readable name."
	end

	classrelation 9780407 // bandConfigs (<unidirectional association>)
	  relation 9780407 --->
	    a role_name "bandConfigs" const_relation public
	      comment " An array of size nBands where each element is a configuration for the
 corresponding band."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 9780407 // bandConfigs (<unidirectional association>)
	    b parent class_ref 3446583 // BandConfig
	end
      end

      attribute 10681527 "PRESET_CUSTOM"
	class_attribute const_attribute public explicit_type "int"
	init_value "=  -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This value is used when requesting current preset, and EQ is not using a
 preset."
      end

      operation 39746487 "GetInstanceSize"
	class_operation preserve_cpp_body_indent public explicit_return_type "size_t"
	nparams 1
	  param in name "nBands" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the required memory size for an instance of this class.
 nBands   Number of bands required in the instance."
      end

      operation 39746615 "CreateInstance"
	class_operation preserve_cpp_body_indent public return_type class_ref 3446455 // AudioEqualizer
	nparams 6
	  param inout name "pMem" explicit_type "void"
	  param in name "nBands" explicit_type "int"
	  param in name "nChannels" explicit_type "int"
	  param in name "sampleRate" explicit_type "int"
	  param in name "presets" type class_ref 3446711 // PresetConfig
	  param in name "nPresets" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} * ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, const ${t4} * ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create an instance of this class.
 If succeeds, a respective call is expected to freeInstance(), regardless
 of who owns the context memory.
 pMem         A memory buffer of at least the size returned by
              GetInstanceSize(), where the instance context is to be
              stored. If NULL, it will be automatically allocated (using
              malloc).
 nBands       Number of bands. Must be >= 2.
 nChannels    Number of input/output channels (interlaced).
 sampleRate   The input/output sample rate, in Hz.
 presets      The presets configuration. May be NULL, but in that case the
              client is required not to call preset-related functions.
              This array is owned by the client and is not copied. It
              must be kept valid by the client as long as the instance is
              alive.
 nPresets     Number of elements in the presets array.
 returns      The instance if success. NULL if pMem is NULL and allocation
              failed."
      end

      operation 39746743 "configure"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "nChannels" explicit_type "int"
	  param in name "sampleRate" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reconfiguration of the filter. Changes input/output format, but does not
 alter current parameter values. Causes reset of the delay lines.
 nChannels  Number of input/output channels (interlaced).
 sampleRate The input/output sample rate, in Hz."
      end

      operation 39746871 "reset"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Resets the filter parameters to the following values:
 frequency: 0
 gain: 0
 bandwidth: 1200 cents.
 It also disables the filter. Does not clear the delay lines."
      end

      operation 39746999 "clear"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears delay lines. Does not alter parameter values."
      end

      operation 39747127 "free"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Frees the object. Will free the memory if the object owned it, i.e. if
 a NULL pointer was passed to CreateInstance as pMem."
      end

      operation 39747255 "setGain"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "band" explicit_type "int"
	  param in name "millibel" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets gain value. Actual change will only take place upon commit().
 This value will be remembered even if the filter is in disabled() state.
 band     The band to set the gain for.
 millibel Gain value in millibel (1/100 of decibel)."
      end

      operation 39747383 "getGain"
	preserve_cpp_body_indent const public explicit_return_type "int32_t"
	nparams 1
	  param in name "band" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets gain of a certain band. This is always the last value set (or
 default value after reset).
 band     The band to get the gain for.
 returns  Gain value in millibel (1/100 of decibel)."
      end

      operation 39747511 "setFrequency"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "band" explicit_type "int"
	  param in name "millihertz" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets cutoff frequency value. Actual change will only take place upon
 commit().
 This value will be remembered even if the filter is in disabled() state.
 band       The band to set the frequency for.
 millihertz Frequency value in mHz."
      end

      operation 39747639 "getFrequency"
	preserve_cpp_body_indent const public explicit_return_type "uint32_t"
	nparams 1
	  param in name "band" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets frequency of a certain band. This is always the last value set (or
 default value after reset).
 band     The band to get the frequency for.
 returns  Frequency value in mHz."
      end

      operation 39747767 "setBandwidth"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "band" explicit_type "int"
	  param in name "cents" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets bandwidth value. Actual change will only take place upon commit().
 This value will be remembered even if the filter is in disabled() state.
 If called on the first or last band, this call is ignored.
 band  The band to set the frequency for.
 cents Bandwidth value in cents (1/1200 octave)."
      end

      operation 39747895 "getBandwidth"
	preserve_cpp_body_indent const public explicit_return_type "uint32_t"
	nparams 1
	  param in name "band" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets bandwidth of a certain band. This is always the last value set (or
 default value after reset). For the first and last bands, 0 is always
 returned.
 band     The band to get the bandwidth for.
 returns  Bandwidth value in cents (1/1200 octave)."
      end

      operation 39748023 "getBandRange"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 3
	  param in name "band" explicit_type "int"
	  param inout name "low" explicit_type "uint32_t"
	  param inout name "high" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} & ${p1}, ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets lower and upper boundaries of a band.
 For the low shelf, the low bound is 0 and the high bound is the band
 frequency.
 For the high shelf, the low bound is the band frequency and the high
 bound is Nyquist.
 For the peaking filters, they are the gain[dB]/2 points."
      end

      operation 39748151 "getPresetName"
	preserve_cpp_body_indent const public explicit_return_type "char"
	nparams 1
	  param in name "preset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets a human-readable name for a preset ID. Will return \"Custom\" if
 PRESET_CUSTOM is passed.
 preset       The preset ID. Must be less than number of presets."
      end

      operation 39748279 "getNumPresets"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the number of presets."
      end

      operation 39748407 "getPreset"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the currently set preset ID.
 Will return PRESET_CUSTOM in case the EQ parameters have been modified
 manually since a preset was set."
      end

      operation 39748535 "setPreset"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "preset" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the current preset by ID.
 All the band parameters will be overridden.
 Change will not be applied until commit() is called.
 preset       The preset ID. Must be less than number of presets.
              PRESET_CUSTOM is NOT a valid value here."
      end

      operation 39748663 "commit"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Applies all parameter changes done to this point in time.
 If the filter is disabled, the new parameters will take place when it is
 enabled again. Does not introduce artifacts, unless immediate is set.
 immediate    Whether to apply change abruptly (ignored if filter is
 disabled)."
      end

      operation 39748791 "process"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "pIn" type class_ref 3445815 // audio_sample_t
	  param inout name "pOut" type class_ref 3445815 // audio_sample_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Process a buffer of input data. The input and output should contain
 frameCount * nChannels interlaced samples. Processing can be done
 in-place, by passing the same buffer as both arguments.
 pIn          Input buffer.
 pOut         Output buffer.
 frameCount   Number of frames to produce on each call to process()."
      end

      operation 39748919 "enable"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Enables the filter, so it would start processing input. Does not
 introduce artifacts, unless immediate is set.
 immediate    Whether to apply change abruptly."
      end

      operation 39749047 "disable"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Disabled (bypasses) the filter. Does not introduce artifacts, unless
 immediate is set.
 immediate    Whether to apply change abruptly."
      end

      operation 39749175 "getMostRelevantBand"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 1
	  param in name "targetFreq" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the band with the maximum influence on a given frequency.
 Result is unaffected by whether EQ is enabled or not, or by whether
 changes have been committed or not.
 targetFreq   The target frequency, in millihertz."
      end

      attribute 10681655 "kMinFreq"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  20000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bottom frequency, in mHz."
      end

      attribute 10681783 "mSampleRate"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Sample rate, in Hz."
      end

      attribute 10681911 "mNumPeaking"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of peaking filters. Total number of bands is +2."
      end

      classrelation 9780535 // mpPresets (<unidirectional association>)
	relation 9780535 --->
	  a role_name "mpPresets" const_relation private
	    comment " Preset configurations."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9780535 // mpPresets (<unidirectional association>)
	  b parent class_ref 3446711 // PresetConfig
      end

      attribute 10682039 "mNumPresets"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of elements in mpPresets;"
      end

      attribute 10682167 "mCurPreset"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Current preset."
      end

      attribute 10682295 "mpMem"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Memory space to free when instance is deleted, or NULL if no memory is
 owned."
      end

      classrelation 9780663 // mpLowShelf (<unidirectional association>)
	relation 9780663 --->
	  a role_name "mpLowShelf" private
	    comment " The low-shelving filter."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9780663 // mpLowShelf (<unidirectional association>)
	  b parent class_ref 3446839 // AudioShelvingFilter
      end

      classrelation 9780791 // mpHighShelf (<unidirectional association>)
	relation 9780791 --->
	  a role_name "mpHighShelf" private
	    comment " The high-shelving filter."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9780791 // mpHighShelf (<unidirectional association>)
	  b parent class_ref 3446839 // AudioShelvingFilter
      end

      classrelation 9780919 // mpPeakingFilters (<unidirectional association>)
	relation 9780919 --->
	  a role_name "mpPeakingFilters" private
	    comment " An array of size mNumPeaking of peaking filters."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9780919 // mpPeakingFilters (<unidirectional association>)
	  b parent class_ref 3446967 // AudioPeakingFilter
      end

      operation 39749303 "AudioEqualizer"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 7
	  param inout name "pMem" explicit_type "void"
	  param in name "nBands" explicit_type "int"
	  param in name "nChannels" explicit_type "int"
	  param in name "sampleRate" explicit_type "int"
	  param in name "ownMem" explicit_type "bool"
	  param in name "presets" type class_ref 3446711 // PresetConfig
	  param in name "nPresets" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, const ${t5} * ${p5}${v5}, ${t6} ${p6}${v6}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, const ${t5} * ${p5}, ${t6} ${p6}${)}
                               : mSampleRate(sampleRate)
                               , mpPresets(presets)
                               , mNumPresets(nPresets) ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Constructor. Resets the filter (see reset()). Must call init() doing
 anything else.
 pMem       Memory buffer for bands.
 nChannels  Number of input/output channels (interlaced).
 sampleRate The input/output sample rate, in Hz.
 ownMem     Whether pMem is owned by me.
 presets      The presets configuration. May be NULL, but in that case the
              client is required not to call preset-related functions.
              This array is owned by the client and is not copied. It
              must be kept valid by the client as long as the instance is
              alive.
 nPresets     Number of elements in the presets array."
      end
    end

    class 3446839 "AudioShelvingFilter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " A shelving audio filter, with unity skirt gain, and controllable cutoff
 frequency and gain.
 This filter is able to suppress introduce discontinuities and other artifacts
 in the output, even when changing parameters abruptly.
 Parameters can be set to any value - this class will make sure to clip them
 when they are out of supported range.

 Implementation notes:
 This class uses an underlying biquad filter whose parameters are determined
 using a linear interpolation from a coefficient table, using a
 AudioCoefInterpolator.
 All is left for this class to do is mapping between high-level parameters to
 fractional indices into the coefficient table."
      class 3447223 "ShelfType"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 10684215 "kLowShelf"
	  public type class_ref 3447223 // ShelfType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10684343 "kHighShelf"
	  public type class_ref 3447223 // ShelfType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 39751991 "AudioShelvingFilter"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param in name "type" type class_ref 3447223 // ShelfType
	  param in name "nChannels" explicit_type "int"
	  param in name "sampleRate" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}
        : mType(type),
          mBiquad(nChannels, sampleRate)  ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Constructor. Resets the filter (see reset()).
 type       Type of the filter (high shelf or low shelf).
 nChannels  Number of input/output channels (interlaced).
 sampleRate The input/output sample rate, in Hz."
      end

      operation 39752119 "configure"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "nChannels" explicit_type "int"
	  param in name "sampleRate" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reconfiguration of the filter. Changes input/output format, but does not
 alter current parameter values. Clears delay lines.
 nChannels  Number of input/output channels (interlaced).
 sampleRate The input/output sample rate, in Hz."
      end

      operation 39752247 "reset"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Resets the filter parameters to the following values:
 frequency: 0
 gain: 0
 It also disables the filter. Does not clear the delay lines."
      end

      operation 39752375 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { mBiquad.clear(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears delay lines. Does not alter parameter values."
      end

      operation 39752503 "setGain"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "millibel" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets gain value. Actual change will only take place upon commit().
 This value will be remembered even if the filter is in disabled() state.
 millibel Gain value in millibel (1/100 of decibel)."
      end

      operation 39752631 "getGain"
	const cpp_inline public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mGain - 9600; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the gain, in millibel, as set."
      end

      operation 39752759 "setFrequency"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "millihertz" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets cutoff frequency value. Actual change will only take place upon
 commit().
 This value will be remembered even if the filter is in disabled() state.
 millihertz Frequency value in mHz."
      end

      operation 39752887 "getFrequency"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mNominalFrequency; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the frequency, in mHz, as set."
      end

      operation 39753015 "commit"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Applies all parameter changes done to this point in time.
 If the filter is disabled, the new parameters will take place when it is
 enabled again. Does not introduce artifacts, unless immediate is set.
 immediate    Whether to apply change abruptly (ignored if filter is
 disabled)."
      end

      operation 39753143 "process"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "in" type class_ref 3445815 // audio_sample_t
	  param in name "out" type class_ref 3445815 // audio_sample_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[]${v0}, ${t1} ${p1}[]${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} { mBiquad.process(in, out, frameCount); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Process a buffer of input data. The input and output should contain
 frameCount * nChannels interlaced samples. Processing can be done
 in-place, by passing the same buffer as both arguments.
 in   Input buffer.
 out  Output buffer.
 frameCount   Number of frames to produce."
      end

      operation 39753271 "enable"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mBiquad.enable(immediate); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Enables the filter, so it would start processing input. Does not
 introduce artifacts, unless immediate is set.
 immediate    Whether to apply change abruptly."
      end

      operation 39753399 "disable"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mBiquad.disable(immediate); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Disabled (bypasses) the filter. Does not introduce artifacts, unless
 immediate is set.
 immediate    Whether to apply change abruptly."
      end

      attribute 10684471 "FREQ_PRECISION_BITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  26"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Precision for the mFrequency member."
      end

      attribute 10684599 "GAIN_PRECISION_BITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Precision for the mGain member."
      end

      classrelation 9781431 // mType (<directional composition>)
	relation 9781431 *-->
	  a role_name "mType" private
	    comment " Shelf type."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9781431 // mType (<directional composition>)
	  b parent class_ref 3447223 // ShelfType
      end

      attribute 10684727 "mNiquistFreq"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Nyquist, in mHz."
      end

      attribute 10684855 "mGain"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Fractional index into the gain dimension of the coef table in
 GAIN_PRECISION_BITS precision."
      end

      attribute 10684983 "mFrequency"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Fractional index into the frequency dimension of the coef table in
 FREQ_PRECISION_BITS precision."
      end

      attribute 10685111 "mNominalFrequency"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Nominal value of frequency, as set."
      end

      attribute 10685239 "mFrequencyFactor"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " 1/Nyquist[mHz], in 42-bit precision (very small).
 Used for scaling the frequency."
      end

      classrelation 9781559 // mBiquad (<directional composition>)
	relation 9781559 *-->
	  a role_name "mBiquad" private
	    comment " A biquad filter, used for the actual processing."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9781559 // mBiquad (<directional composition>)
	  b parent class_ref 3445559 // AudioBiquadFilter
      end

      classrelation 9781687 // mHiCoefInterp (<directional composition>)
	relation 9781687 *-->
	  a role_name "mHiCoefInterp" init_value "(2, kHiInDims, 5, (const audio_coef_t*) kHiCoefTable)" class_relation private
	    comment " A coefficient interpolator, used for mapping the high level parameters to
 the low-level biquad coefficients. This one is used for the high shelf."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9781687 // mHiCoefInterp (<directional composition>)
	  b parent class_ref 3446199 // AudioCoefInterpolator
      end

      classrelation 9781815 // mLoCoefInterp (<directional composition>)
	relation 9781815 *-->
	  a role_name "mLoCoefInterp" init_value "(2, kLoInDims, 5, (const audio_coef_t*) kLoCoefTable)" class_relation private
	    comment " A coefficient interpolator, used for mapping the high level parameters to
 the low-level biquad coefficients. This one is used for the low shelf."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9781815 // mLoCoefInterp (<directional composition>)
	  b parent class_ref 3446199 // AudioCoefInterpolator
      end
    end

    class 3446967 "AudioPeakingFilter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " A peaking audio filter, with unity skirt gain, and controllable peak
 frequency, gain and bandwidth.
 This filter is able to suppress introduce discontinuities and other artifacts
 in the output, even when changing parameters abruptly.
 Parameters can be set to any value - this class will make sure to clip them
 when they are out of supported range.

 Implementation notes:
 This class uses an underlying biquad filter whose parameters are determined
 using a linear interpolation from a coefficient table, using a
 AudioCoefInterpolator.
 All is left for this class to do is mapping between high-level parameters to
 fractional indices into the coefficient table."
      operation 39750071 "AudioPeakingFilter"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "nChannels" explicit_type "int"
	  param in name "sampleRate" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}
        : mBiquad(nChannels, sampleRate) ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Constructor. Resets the filter (see reset()).
 nChannels  Number of input/output channels (interlaced).
 sampleRate The input/output sample rate, in Hz."
      end

      operation 39750199 "configure"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "nChannels" explicit_type "int"
	  param in name "sampleRate" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reconfiguration of the filter. Changes input/output format, but does not
 alter current parameter values. Clears delay lines.
 nChannels  Number of input/output channels (interlaced).
 sampleRate The input/output sample rate, in Hz."
      end

      operation 39750327 "reset"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Resets the filter parameters to the following values:
 frequency: 0
 gain: 0
 bandwidth: 1200 cents.
 It also disables the filter. Does not clear the delay lines."
      end

      operation 39750455 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { mBiquad.clear(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears delay lines. Does not alter parameter values."
      end

      operation 39750583 "setGain"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "millibel" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets gain value. Actual change will only take place upon commit().
 This value will be remembered even if the filter is in disabled() state.
 millibel Gain value in millibel (1/100 of decibel)."
      end

      operation 39750711 "getGain"
	const cpp_inline public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mGain - 9600; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the gain, in millibel, as set."
      end

      operation 39750839 "setBandwidth"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "cents" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets bandwidth value. Actual change will only take place upon commit().
 This value will be remembered even if the filter is in disabled() state.
 cents Bandwidth value in cents (1/1200 octave)."
      end

      operation 39750967 "getBandwidth"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mBandwidth + 1; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the gain, in cents, as set."
      end

      operation 39751095 "setFrequency"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "millihertz" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets frequency value. Actual change will only take place upon commit().
 This value will be remembered even if the filter is in disabled() state.
 millihertz Frequency value in mHz."
      end

      operation 39751223 "getFrequency"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mNominalFrequency; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the frequency, in mHz, as set."
      end

      operation 39751351 "getBandRange"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 2
	  param inout name "low" explicit_type "uint32_t"
	  param inout name "high" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets gain[dB]/2 points.
 Results in mHz, and are computed based on the nominal values set, not on
 possibly rounded or truncated actual values."
      end

      operation 39751479 "commit"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Applies all parameter changes done to this point in time.
 If the filter is disabled, the new parameters will take place when it is
 enabled again. Does not introduce artifacts, unless immediate is set.
 immediate    Whether to apply change abruptly (ignored if filter is
 disabled)."
      end

      operation 39751607 "process"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "in" type class_ref 3445815 // audio_sample_t
	  param in name "out" type class_ref 3445815 // audio_sample_t
	  param in name "frameCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[]${v0}, ${t1} ${p1}[]${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} { mBiquad.process(in, out, frameCount); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Process a buffer of input data. The input and output should contain
 frameCount * nChannels interlaced samples. Processing can be done
 in-place, by passing the same buffer as both arguments.
 in           Input buffer.
 out          Output buffer.
 frameCount   Number of frames to produce."
      end

      operation 39751735 "enable"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mBiquad.enable(immediate); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Enables the filter, so it would start processing input. Does not
 introduce artifacts, unless immediate is set.
 immediate    Whether to apply change abruptly."
      end

      operation 39751863 "disable"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "immediate" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { mBiquad.disable(immediate); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Disabled (bypasses) the filter. Does not introduce artifacts, unless
 immediate is set.
 immediate    Whether to apply change abruptly."
      end

      attribute 10683063 "FREQ_PRECISION_BITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  26"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Precision for the mFrequency member."
      end

      attribute 10683191 "GAIN_PRECISION_BITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Precision for the mGain member."
      end

      attribute 10683319 "BANDWIDTH_PRECISION_BITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Precision for the mBandwidth member."
      end

      attribute 10683447 "mNiquistFreq"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Nyquist, in mHz."
      end

      attribute 10683575 "mGain"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Fractional index into the gain dimension of the coef table in
 GAIN_PRECISION_BITS precision."
      end

      attribute 10683703 "mBandwidth"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Fractional index into the bandwidth dimension of the coef table in
 BANDWIDTH_PRECISION_BITS precision."
      end

      attribute 10683831 "mFrequency"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Fractional index into the frequency dimension of the coef table in
 FREQ_PRECISION_BITS precision."
      end

      attribute 10683959 "mNominalFrequency"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Nominal value of frequency, as set."
      end

      attribute 10684087 "mFrequencyFactor"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " 1/Nyquist[mHz], in 42-bit precision (very small).
 Used for scaling the frequency."
      end

      classrelation 9781175 // mBiquad (<directional composition>)
	relation 9781175 *-->
	  a role_name "mBiquad" private
	    comment " A biquad filter, used for the actual processing."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9781175 // mBiquad (<directional composition>)
	  b parent class_ref 3445559 // AudioBiquadFilter
      end

      classrelation 9781303 // mCoefInterp (<directional composition>)
	relation 9781303 *-->
	  a role_name "mCoefInterp" init_value "(3, kInDims, 5, (const audio_coef_t*) kCoefTable)" class_relation private
	    comment " A coefficient interpolator, used for mapping the high level parameters to
 the low-level biquad coefficients."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9781303 // mCoefInterp (<directional composition>)
	  b parent class_ref 3446199 // AudioCoefInterpolator
      end
    end

    class 3447095 "AudioFormatAdapter"
      visibility package 
      nformals 2
      formal name "T" type "class" explicit_default_value ""
        explicit_extends ""
      formal name " size_t bufSize" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " An adapter for an audio processor working on audio_sample_t samples with a
 buffer override behavior to arbitrary sample formats and buffer behaviors.
 The adapter may work on any processing class which has a processing function
 with the following signature:
 void process(const audio_sample_t * pIn,
              audio_sample_t * pOut,
              int frameCount);
 It is assumed that the underlying processor works in S7.24 format and an
 overwrite behavior.

 Usage is simple: just work with the processor normally, but instead of
 calling its process() function directly, work with the process() function of
 the adapter.
 The adapter supports re-configuration to a different format on the fly.

 T        The processor class.
 bufSize  The maximum number of samples (single channel) to process on a
          single call to the underlying processor. Setting this to a small
          number will save a little memory, but will cost function call
          overhead, resulting from multiple calls to the underlying process()
          per a single call to this class's process()."
      operation 39749431 "configure"
	cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "processor" explicit_type "T"
	  param in name "nChannels" explicit_type "int"
	  param in name "pcmFormat" explicit_type "uint8_t"
	  param in name "behavior" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        mpProcessor = &processor;
        mNumChannels = nChannels;
        mPcmFormat = pcmFormat;
        mBehavior = behavior;
        mMaxSamplesPerCall = bufSize / nChannels;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Configure the adapter.
 processor    The underlying audio processor.
 nChannels    Number of input and output channels. The adapter does not do
              channel conversion - this parameter must be in sync with the
              actual processor.
 pcmFormat    The desired input/output sample format.
 behavior     The desired behavior (overwrite or accumulate)."
      end

      operation 39749559 "process"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "pIn" explicit_type "void"
	  param inout name "pOut" explicit_type "void"
	  param in name "numSamples" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        while (numSamples > 0) {
            uint32_t numSamplesIter = min(numSamples, mMaxSamplesPerCall);
            uint32_t nSamplesChannels = numSamplesIter * mNumChannels;
            // This branch of \"if\" is untested
            if (mPcmFormat == AUDIO_FORMAT_PCM_8_24_BIT) {
                if (mBehavior == EFFECT_BUFFER_ACCESS_WRITE) {
                    mpProcessor->process(
                        reinterpret_cast<const audio_sample_t *> (pIn),
                        reinterpret_cast<audio_sample_t *> (pOut),
                        numSamplesIter);
                } else if (mBehavior == EFFECT_BUFFER_ACCESS_ACCUMULATE) {
                    mpProcessor->process(
                        reinterpret_cast<const audio_sample_t *> (pIn),
                        mBuffer, numSamplesIter);
                    MixOutput(pOut, numSamplesIter);
                } else {
                    assert(false);
                }
                pIn = reinterpret_cast<const audio_sample_t *> (pIn)
                        + nSamplesChannels;
                pOut = reinterpret_cast<audio_sample_t *> (pOut)
                        + nSamplesChannels;
            } else {
                ConvertInput(pIn, nSamplesChannels);
                mpProcessor->process(mBuffer, mBuffer, numSamplesIter);
                ConvertOutput(pOut, nSamplesChannels);
            }
            numSamples -= numSamplesIter;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Process a block of samples.
 pIn          A buffer of samples with the format specified on
              configure().
 pOut         A buffer of samples with the format specified on
              configure(). May be the same as pIn.
 numSamples   The number of multi-channel samples to process."
      end

      attribute 10682423 "mpProcessor"
	private explicit_type "T"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The underlying processor."
      end

      attribute 10682551 "mNumChannels"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The number of input/output channels."
      end

      attribute 10682679 "mPcmFormat"
	private explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The desired PCM format."
      end

      attribute 10682807 "mBehavior"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The desired buffer behavior."
      end

      classrelation 9781047 // mBuffer (<directional composition>)
	relation 9781047 *-->
	  a role_name "mBuffer" multiplicity "[bufSize]" private
	    comment " An intermediate buffer for processing."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 9781047 // mBuffer (<directional composition>)
	  b parent class_ref 3445815 // audio_sample_t
      end

      attribute 10682935 "mMaxSamplesPerCall"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The buffer size, divided by the number of channels - represents the
 maximum number of multi-channel samples that can be stored in the
 intermediate buffer."
      end

      operation 39749687 "ConvertInput"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "pIn" explicit_type "void"
	  param in name "numSamples" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if (mPcmFormat == AUDIO_FORMAT_PCM_16_BIT) {
            const int16_t * pIn16 = reinterpret_cast<const int16_t *>(pIn);
            audio_sample_t * pOut = mBuffer;
            while (numSamples-- > 0) {
                *(pOut++) = s15_to_audio_sample_t(*(pIn16++));
            }
            pIn = pIn16;
        } else {
            assert(false);
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Converts a buffer of input samples to audio_sample_t format.
 Output is written to the intermediate buffer.
 pIn          The input buffer with the format designated in configure().
              When function exist will point to the next unread input
              sample.
 numSamples   The number of single-channel samples to process."
      end

      operation 39749815 "ConvertOutput"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "pOut" explicit_type "void"
	  param in name "numSamples" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if (mPcmFormat == AUDIO_FORMAT_PCM_16_BIT) {
            const audio_sample_t * pIn = mBuffer;
            int16_t * pOut16 = reinterpret_cast<int16_t *>(pOut);
            if (mBehavior == EFFECT_BUFFER_ACCESS_WRITE) {
                while (numSamples-- > 0) {
                    *(pOut16++) = audio_sample_t_to_s15_clip(*(pIn++));
                }
            } else if (mBehavior == EFFECT_BUFFER_ACCESS_ACCUMULATE) {
                while (numSamples-- > 0) {
                    *(pOut16++) += audio_sample_t_to_s15_clip(*(pIn++));
                }
            } else {
                assert(false);
            }
            pOut = pOut16;
        } else {
            assert(false);
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Converts audio_sample_t samples from the intermediate buffer to the
 output buffer, converting to the desired format and buffer behavior.
 pOut         The buffer to write the output to.
              When function exist will point to the next output sample.
 numSamples   The number of single-channel samples to process."
      end

      operation 39749943 "MixOutput"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "pOut" explicit_type "void"
	  param in name "numSamples" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        const audio_sample_t * pIn = mBuffer;
        audio_sample_t * pOut24 = reinterpret_cast<audio_sample_t *>(pOut);
        numSamples *= mNumChannels;
        while (numSamples-- > 0) {
            *(pOut24++) += *(pIn++);
        }
        pOut = pOut24;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accumulate data from the intermediate buffer to the output. Output is
 assumed to be of audio_sample_t type.
 pOut         The buffer to mix the output to.
              When function exist will point to the next output sample.
 numSamples   The number of single-channel samples to process."
      end
    end

    class 3577399 "FormatAdapter"
      visibility package stereotype "typedef" base_type class_ref 3446455 // AudioEqualizer
      cpp_decl "${comment}typedef AudioFormatAdapter<${type},kBufferSize> ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 10069303 // <dependency>
	relation 10069303 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 10069303 // <dependency>
	  b parent class_ref 3446455 // AudioEqualizer
      end
    end

    class 3577527 "EqualizerContext"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 11156407 "itfe"
	const_attribute public explicit_type "effect_interface_s"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct ${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11156535 "config"
	public explicit_type "effect_config_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 10069431 // adapter (<directional composition>)
	relation 10069431 *-->
	  a role_name "adapter" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10069431 // adapter (<directional composition>)
	  b parent class_ref 3577399 // FormatAdapter
      end

      classrelation 10069559 // pEqualizer (<unidirectional association>)
	relation 10069559 --->
	  a role_name "pEqualizer" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10069559 // pEqualizer (<unidirectional association>)
	  b parent class_ref 3446455 // AudioEqualizer
      end

      attribute 11156663 "state"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end
  end

  deploymentview 283959 "testlibs"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1483319 "AudioBiquadFilter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3445559 // AudioBiquadFilter
      end
    end

    artifact 1483447 "AudioCoefInterpolator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3446199 // AudioCoefInterpolator
      end
    end

    artifact 1483575 "AudioCommon"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3445687 // audio_coef_t
	class_ref 3445815 // audio_sample_t
	class_ref 3446327 // audio_coef_sample_acc_t
      end
    end

    artifact 1483703 "AudioEqualizer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3446455 // AudioEqualizer
      end
    end

    artifact 1483831 "AudioFormatAdapter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3447095 // AudioFormatAdapter
      end
    end

    artifact 1483959 "AudioPeakingFilter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3446967 // AudioPeakingFilter
      end
    end

    artifact 1484087 "AudioShelvingFilter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3446839 // AudioShelvingFilter
      end
    end

    artifact 1523255 "FormatAdapter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3577399 // FormatAdapter
      end
    end

    artifact 1523383 "EqualizerContext"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3577527 // EqualizerContext
      end
    end
  end

  package_ref 375351 // testlibs
end
