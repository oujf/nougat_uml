class DeviceVector
!!!41013943.cpp!!!	add(in item : sp<DeviceDescriptor>) : ssize_t
    ssize_t ret = indexOf(item);

    if (ret < 0) {
        ret = SortedVector::add(item);
        if (ret >= 0) {
            refreshTypes();
        }
    } else {
        ALOGW("DeviceVector::add device %08x already in", item->type());
        ret = -1;
    }
    return ret;
!!!41014071.cpp!!!	add(in devices : DeviceVector) : void
    for (size_t i = 0; i < devices.size(); i++) {
        sp<DeviceDescriptor> device = devices.itemAt(i);
        if (indexOf(device) < 0 && SortedVector::add(device) >= 0) {
            refreshTypes();
        }
    }
!!!41014199.cpp!!!	remove(in item : sp<DeviceDescriptor>) : ssize_t
    size_t i;
    ssize_t ret = indexOf(item);

    if (ret < 0) {
        ALOGW("DeviceVector::remove device %08x not in", item->type());
    } else {
        ret = SortedVector::removeAt(ret);
        if (ret >= 0) {
            refreshTypes();
        }
    }
    return ret;
!!!41014327.cpp!!!	indexOf(in item : sp<DeviceDescriptor>) : ssize_t
    for(size_t i = 0; i < size(); i++) {
        if (item->equals(itemAt(i))) {
            return i;
        }
    }
    return -1;
!!!41014583.cpp!!!	getDevice(in type : audio_devices_t, in address : String8) : sp<DeviceDescriptor>
    sp<DeviceDescriptor> device;
    for (size_t i = 0; i < size(); i++) {
        if (itemAt(i)->type() == type) {
            if (address == "" || itemAt(i)->mAddress == address) {
                device = itemAt(i);
                if (itemAt(i)->mAddress == address) {
                    break;
                }
            }
        }
    }
    ALOGV("DeviceVector::getDevice() for type %08x address %s found %p",
          type, address.string(), device.get());
    return device;
!!!41014711.cpp!!!	getDevicesFromType(in type : audio_devices_t) : DeviceVector
    DeviceVector devices;
    bool isOutput = audio_is_output_devices(type);
    type &= ~AUDIO_DEVICE_BIT_IN;
    for (size_t i = 0; (i < size()) && (type != AUDIO_DEVICE_NONE); i++) {
        bool curIsOutput = audio_is_output_devices(itemAt(i)->mDeviceType);
        audio_devices_t curType = itemAt(i)->mDeviceType & ~AUDIO_DEVICE_BIT_IN;
        if ((isOutput == curIsOutput) && ((type & curType) != 0)) {
            devices.add(itemAt(i));
            type &= ~curType;
            ALOGV("DeviceVector::getDevicesFromType() for type %x found %p",
                  itemAt(i)->type(), itemAt(i).get());
        }
    }
    return devices;
!!!41014839.cpp!!!	getDeviceFromId(in id : audio_port_handle_t) : sp<DeviceDescriptor>
    sp<DeviceDescriptor> device;
    for (size_t i = 0; i < size(); i++) {
        if (itemAt(i)->getId() == id) {
            device = itemAt(i);
            break;
        }
    }
    return device;
!!!41014967.cpp!!!	getDeviceFromTagName(in tagName : String8) : sp<DeviceDescriptor>
    sp<DeviceDescriptor> device;
    for (size_t i = 0; i < size(); i++) {
        if (itemAt(i)->getTagName() == tagName) {
            device = itemAt(i);
            break;
        }
    }
    return device;
!!!41015095.cpp!!!	getDevicesFromTypeAddr(in type : audio_devices_t, in address : String8) : DeviceVector
    DeviceVector devices;
    for (size_t i = 0; i < size(); i++) {
        if (itemAt(i)->type() == type) {
            if (itemAt(i)->mAddress == address) {
                devices.add(itemAt(i));
            }
        }
    }
    return devices;
!!!41015223.cpp!!!	getDevicesFromHwModule(in moduleHandle : audio_module_handle_t) : audio_devices_t
    audio_devices_t devices = AUDIO_DEVICE_NONE;
    for (size_t i = 0; i < size(); i++) {
        if (itemAt(i)->getModuleHandle() == moduleHandle) {
            devices |= itemAt(i)->type();
        }
    }
    return devices;
!!!41015351.cpp!!!	dump(in fd : int, in tag : String8, in spaces : int = 0, in verbose : bool = true) : status_t
    if (isEmpty()) {
        return NO_ERROR;
    }
    const size_t SIZE = 256;
    char buffer[SIZE];

    snprintf(buffer, SIZE, "%*s- %s devices:\n", spaces, "", tag.string());
    write(fd, buffer, strlen(buffer));
    for (size_t i = 0; i < size(); i++) {
        itemAt(i)->dump(fd, spaces + 2, i, verbose);
    }
    return NO_ERROR;
!!!41015479.cpp!!!	refreshTypes() : void
    mDeviceTypes = AUDIO_DEVICE_NONE;
    for(size_t i = 0; i < size(); i++) {
        mDeviceTypes |= itemAt(i)->type();
    }
    ALOGV("DeviceVector::refreshTypes() mDeviceTypes %08x", mDeviceTypes);
