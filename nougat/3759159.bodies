class DeviceDescriptor
!!!41012151.cpp!!!	DeviceDescriptor(in type : audio_devices_t, in tagName : String8 = String8(""))
    if (type == AUDIO_DEVICE_IN_REMOTE_SUBMIX || type == AUDIO_DEVICE_OUT_REMOTE_SUBMIX ) {
        mAddress = String8("0");
    }
!!!41012663.cpp!!!	equals(in other : sp<DeviceDescriptor>) : bool
    // Devices are considered equal if they:
    // - are of the same type (a device type cannot be AUDIO_DEVICE_NONE)
    // - have the same address
    if (other == 0) {
        return false;
    }
    return (mDeviceType == other->mDeviceType) && (mAddress == other->mAddress);
!!!41012919.cpp!!!	toAudioPortConfig(inout dstConfig : audio_port_config, in srcConfig : audio_port_config = NULL) : void
    dstConfig->config_mask = AUDIO_PORT_CONFIG_GAIN;
    if (mSamplingRate != 0) {
        dstConfig->config_mask |= AUDIO_PORT_CONFIG_SAMPLE_RATE;
    }
    if (mChannelMask != AUDIO_CHANNEL_NONE) {
        dstConfig->config_mask |= AUDIO_PORT_CONFIG_CHANNEL_MASK;
    }
    if (mFormat != AUDIO_FORMAT_INVALID) {
        dstConfig->config_mask |= AUDIO_PORT_CONFIG_FORMAT;
    }

    if (srcConfig != NULL) {
        dstConfig->config_mask |= srcConfig->config_mask;
    }

    AudioPortConfig::toAudioPortConfig(dstConfig, srcConfig);

    dstConfig->id = mId;
    dstConfig->role = audio_is_output_device(mDeviceType) ?
                        AUDIO_PORT_ROLE_SINK : AUDIO_PORT_ROLE_SOURCE;
    dstConfig->type = AUDIO_PORT_TYPE_DEVICE;
    dstConfig->ext.device.type = mDeviceType;

    //TODO Understand why this test is necessary. i.e. why at boot time does it crash
    // without the test?
    // This has been demonstrated to NOT be true (at start up)
    // ALOG_ASSERT(mModule != NULL);
    dstConfig->ext.device.hw_module = mModule != 0 ? mModule->mHandle : AUDIO_MODULE_HANDLE_NONE;
    strncpy(dstConfig->ext.device.address, mAddress.string(), AUDIO_DEVICE_MAX_ADDRESS_LEN);
!!!41013047.cpp!!!	attach(in module : sp<HwModule>) : void
    AudioPort::attach(module);
    mId = getNextUniqueId();
!!!41013175.cpp!!!	toAudioPort(inout port : audio_port) : void
    ALOGV("DeviceDescriptor::toAudioPort() handle %d type %x", mId, mDeviceType);
    AudioPort::toAudioPort(port);
    port->id = mId;
    toAudioPortConfig(&port->active_config);
    port->ext.device.type = mDeviceType;
    port->ext.device.hw_module = mModule->mHandle;
    strncpy(port->ext.device.address, mAddress.string(), AUDIO_DEVICE_MAX_ADDRESS_LEN);
!!!41013303.cpp!!!	importAudioPort(in port : sp<AudioPort>) : void
    AudioPort::importAudioPort(port);
    port->pickAudioProfile(mSamplingRate, mChannelMask, mFormat);
!!!41013431.cpp!!!	getId() : audio_port_handle_t
    return mId;
!!!41013559.cpp!!!	dump(in fd : int, in spaces : int, in index : int, in verbose : bool = true) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;

    snprintf(buffer, SIZE, "%*sDevice %d:\n", spaces, "", index+1);
    result.append(buffer);
    if (mId != 0) {
        snprintf(buffer, SIZE, "%*s- id: %2d\n", spaces, "", mId);
        result.append(buffer);
    }
    if (!mTagName.isEmpty()) {
        snprintf(buffer, SIZE, "%*s- tag name: %s\n", spaces, "", mTagName.string());
        result.append(buffer);
    }
    std::string deviceLiteral;
    if (DeviceConverter::toString(mDeviceType, deviceLiteral)) {
        snprintf(buffer, SIZE, "%*s- type: %-48s\n", spaces, "", deviceLiteral.c_str());
        result.append(buffer);
    }
    if (mAddress.size() != 0) {
        snprintf(buffer, SIZE, "%*s- address: %-32s\n", spaces, "", mAddress.string());
        result.append(buffer);
    }
    write(fd, result.string(), result.size());
    AudioPort::dump(fd, spaces, verbose);

    return NO_ERROR;
!!!41013687.cpp!!!	log() : void
    std::string device;
    DeviceConverter::toString(mDeviceType, device);
    ALOGI("Device id:%d type:0x%X:%s, addr:%s", mId,  mDeviceType, device.c_str(),
          mAddress.string());

    AudioPort::log("  ");
