class StreamDescriptor
!!!41027511.cpp!!!	StreamDescriptor()
    // Initialize the current stream's index to mIndexMax so volume isn't 0 in
    // cases where the Java layer doesn't call into the audio policy service to
    // set the default volume.
    mIndexCur.add(AUDIO_DEVICE_OUT_DEFAULT_FOR_VOLUME, mIndexMax);
!!!41027639.cpp!!!	getVolumeIndex(in device : audio_devices_t) : int
    device = Volume::getDeviceForVolume(device);
    // there is always a valid entry for AUDIO_DEVICE_OUT_DEFAULT_FOR_VOLUME
    if (mIndexCur.indexOfKey(device) < 0) {
        device = AUDIO_DEVICE_OUT_DEFAULT_FOR_VOLUME;
    }
    return mIndexCur.valueFor(device);
!!!41027895.cpp!!!	clearCurrentVolumeIndex() : void
    mIndexCur.clear();
!!!41028023.cpp!!!	addCurrentVolumeIndex(in device : audio_devices_t, in index : int) : void
    mIndexCur.add(device, index);
!!!41028407.cpp!!!	setVolumeIndexMin(in volIndexMin : int) : void
    mIndexMin = volIndexMin;
!!!41028535.cpp!!!	setVolumeIndexMax(in volIndexMax : int) : void
    mIndexMax = volIndexMax;
!!!41028791.cpp!!!	dump(in fd : int) : void
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;

    snprintf(buffer, SIZE, "%s         %02d         %02d         ",
             mCanBeMuted ? "true " : "false", mIndexMin, mIndexMax);
    result.append(buffer);
    for (size_t i = 0; i < mIndexCur.size(); i++) {
        snprintf(buffer, SIZE, "%04x : %02d, ",
                 mIndexCur.keyAt(i),
                 mIndexCur.valueAt(i));
        result.append(buffer);
    }
    result.append("\n");

    write(fd, result.string(), result.size());
!!!41028919.cpp!!!	setVolumeCurvePoint(in deviceCategory : device_category, in point : VolumeCurvePoint) : void
    mVolumeCurve[deviceCategory] = point;
