class Camera2ClientBase
!!!41134903.cpp!!!	connect(in client : sp<TCamCallbacks>) : status_t
    ATRACE_CALL();
    ALOGV("%s: E", __FUNCTION__);
    Mutex::Autolock icl(mBinderSerializationLock);

    if (TClientBase::mClientPid != 0 &&
        getCallingPid() != TClientBase::mClientPid) {

        ALOGE("%s: Camera %d: Connection attempt from pid %d; "
                "current locked to pid %d",
                __FUNCTION__,
                TClientBase::mCameraId,
                getCallingPid(),
                TClientBase::mClientPid);
        return BAD_VALUE;
    }

    TClientBase::mClientPid = getCallingPid();

    TClientBase::mRemoteCallback = client;
    mSharedCameraCallbacks = client;

    return OK;
!!!41135031.cpp!!!	disconnect() : binder::Status
    ATRACE_CALL();
    Mutex::Autolock icl(mBinderSerializationLock);

    binder::Status res = binder::Status::ok();
    // Allow both client and the media server to disconnect at all times
    int callingPid = getCallingPid();
    if (callingPid != TClientBase::mClientPid &&
        callingPid != TClientBase::mServicePid) return res;

    ALOGV("Camera %d: Shutting down", TClientBase::mCameraId);

    detachDevice();

    CameraService::BasicClient::disconnect();

    ALOGV("Camera %d: Shut down complete complete", TClientBase::mCameraId);

    return res;
!!!41135159.cpp!!!	Camera2ClientBase(in cameraService : sp<CameraService>, in remoteCallback : sp<TCamCallbacks>, in clientPackageName : String16, in cameraId : int, in cameraFacing : int, in clientPid : int, in clientUid : uid_t, in servicePid : int)
    ALOGI("Camera %d: Opened. Client: %s (PID %d, UID %d)", cameraId,
            String8(clientPackageName).string(), clientPid, clientUid);

    mInitialClientPid = clientPid;
    mDevice = new Camera3Device(cameraId);
    LOG_ALWAYS_FATAL_IF(mDevice == 0, "Device should never be NULL here.");
!!!41135287.cpp!!!	~Camera2ClientBase()
    ATRACE_CALL();

    TClientBase::mDestructionStarted = true;

    disconnect();

    ALOGI("Closed Camera %d. Client was: %s (PID %d, UID %u)",
            TClientBase::mCameraId,
            String8(TClientBase::mClientPackageName).string(),
            mInitialClientPid, TClientBase::mClientUid);
!!!41135415.cpp!!!	initialize(inout module : CameraModule) : status_t
    ATRACE_CALL();
    ALOGV("%s: Initializing client for camera %d", __FUNCTION__,
          TClientBase::mCameraId);
    status_t res;

    // Verify ops permissions
    res = TClientBase::startCameraOps();
    if (res != OK) {
        return res;
    }

    if (mDevice == NULL) {
        ALOGE("%s: Camera %d: No device connected",
                __FUNCTION__, TClientBase::mCameraId);
        return NO_INIT;
    }

    res = mDevice->initialize(module);
    if (res != OK) {
        ALOGE("%s: Camera %d: unable to initialize device: %s (%d)",
                __FUNCTION__, TClientBase::mCameraId, strerror(-res), res);
        return res;
    }

    res = mDevice->setNotifyCallback(this);

    return OK;
!!!41135543.cpp!!!	dumpClient(in fd : int, in args : Vector<String16>) : status_t
    String8 result;
    result.appendFormat("Camera2ClientBase[%d] (%p) PID: %d, dump:\n",
            TClientBase::mCameraId,
            (TClientBase::getRemoteCallback() != NULL ?
                    IInterface::asBinder(TClientBase::getRemoteCallback()).get() : NULL),
            TClientBase::mClientPid);
    result.append("  State: ");

    write(fd, result.string(), result.size());
    // TODO: print dynamic/request section from most recent requests

    return dumpDevice(fd, args);
!!!41135671.cpp!!!	notifyError(in errorCode : int32_t, in resultExtras : CaptureResultExtras) : void
    ALOGE("Error condition %d reported by HAL, requestId %" PRId32, errorCode,
          resultExtras.requestId);
!!!41135799.cpp!!!	notifyIdle() : void
    if (mDeviceActive) {
        getCameraService()->updateProxyDeviceState(
            ICameraServiceProxy::CAMERA_STATE_IDLE,
            String8::format("%d", TClientBase::mCameraId));
    }
    mDeviceActive = false;

    ALOGV("Camera device is now idle");
!!!41135927.cpp!!!	notifyShutter(in resultExtras : CaptureResultExtras, in timestamp : nsecs_t) : void
    (void)resultExtras;
    (void)timestamp;

    if (!mDeviceActive) {
        getCameraService()->updateProxyDeviceState(
            ICameraServiceProxy::CAMERA_STATE_ACTIVE,
            String8::format("%d", TClientBase::mCameraId));
    }
    mDeviceActive = true;

    ALOGV("%s: Shutter notification for request id %" PRId32 " at time %" PRId64,
            __FUNCTION__, resultExtras.requestId, timestamp);
!!!41136055.cpp!!!	notifyAutoFocus(in newState : uint8_t, in triggerId : int) : void
    (void)newState;
    (void)triggerId;

    ALOGV("%s: Autofocus state now %d, last trigger %d",
          __FUNCTION__, newState, triggerId);

!!!41136183.cpp!!!	notifyAutoExposure(in newState : uint8_t, in triggerId : int) : void
    (void)newState;
    (void)triggerId;

    ALOGV("%s: Autoexposure state now %d, last trigger %d",
            __FUNCTION__, newState, triggerId);
!!!41136311.cpp!!!	notifyAutoWhitebalance(in newState : uint8_t, in triggerId : int) : void
    (void)newState;
    (void)triggerId;

    ALOGV("%s: Auto-whitebalance state now %d, last trigger %d",
            __FUNCTION__, newState, triggerId);
!!!41136439.cpp!!!	notifyPrepared(in streamId : int) : void
    (void)streamId;

    ALOGV("%s: Stream %d now prepared",
            __FUNCTION__, streamId);
!!!41136567.cpp!!!	notifyRepeatingRequestError(in lastFrameNumber : long) : void
    (void)lastFrameNumber;

    ALOGV("%s: Repeating request was stopped. Last frame number is %ld",
            __FUNCTION__, lastFrameNumber);
!!!41136695.cpp!!!	getCameraId() : int
    return TClientBase::mCameraId;
!!!41136823.cpp!!!	getCameraDevice() : sp<CameraDeviceBase>
    return mDevice;
!!!41136951.cpp!!!	getCameraDeviceVersion() : int
    return mDeviceVersion;
!!!41137079.cpp!!!	getCameraService() : sp<CameraService>
    return TClientBase::mCameraService;
!!!41137975.cpp!!!	dumpDevice(in fd : int, in args : Vector<String16>) : status_t
    String8 result;

    result = "  Device dump:\n";
    write(fd, result.string(), result.size());

    if (!mDevice.get()) {
        result = "  *** Device is detached\n";
        write(fd, result.string(), result.size());
        return NO_ERROR;
    }

    status_t res = mDevice->dump(fd, args);
    if (res != OK) {
        result = String8::format("   Error dumping device: %s (%d)",
                strerror(-res), res);
        write(fd, result.string(), result.size());
    }

    return NO_ERROR;
!!!41138103.cpp!!!	checkPid(in checkLocation : char) : status_t

    int callingPid = getCallingPid();
    if (callingPid == TClientBase::mClientPid) return NO_ERROR;

    ALOGE("%s: attempt to use a locked camera from a different process"
            " (old pid %d, new pid %d)", checkLocation, TClientBase::mClientPid, callingPid);
    return PERMISSION_DENIED;
!!!41138231.cpp!!!	detachDevice() : void
    if (mDevice == 0) return;
    mDevice->disconnect();

    mDevice.clear();

    ALOGV("Camera %d: Detach complete", TClientBase::mCameraId);
