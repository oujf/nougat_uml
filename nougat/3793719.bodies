class JpegCompressor
!!!41114295.cpp!!!	~JpegCompressor()
    ALOGV("%s", __FUNCTION__);
    Mutex::Autolock lock(mMutex);
!!!41114423.cpp!!!	start(in buffers : Vector<CpuConsumer::LockedBuffer*>, in captureTime : nsecs_t) : status_t
    ALOGV("%s", __FUNCTION__);
    Mutex::Autolock busyLock(mBusyMutex);

    if (mIsBusy) {
        ALOGE("%s: Already processing a buffer!", __FUNCTION__);
        return INVALID_OPERATION;
    }

    mIsBusy = true;

    mBuffers = buffers;
    mCaptureTime = captureTime;

    status_t res;
    res = run("JpegCompressor");
    if (res != OK) {
        ALOGE("%s: Unable to start up compression thread: %s (%d)",
                __FUNCTION__, strerror(-res), res);
        //delete mBuffers;  // necessary?
    }
    return res;
!!!41114551.cpp!!!	cancel() : status_t
    ALOGV("%s", __FUNCTION__);
    requestExitAndWait();
    return OK;
!!!41114679.cpp!!!	isBusy() : bool
    ALOGV("%s", __FUNCTION__);
    Mutex::Autolock busyLock(mBusyMutex);
    return mIsBusy;
!!!41114807.cpp!!!	isStreamInUse(in id : uint32_t) : bool
    ALOGV("%s", __FUNCTION__);
    Mutex::Autolock lock(mBusyMutex);

    if (mBuffers.size() && mIsBusy) {
        for (size_t i = 0; i < mBuffers.size(); i++) {
//            if ( mBuffers[i].streamId == (int)id ) return true;
        }
    }
    return false;
!!!41114935.cpp!!!	waitForDone(in timeout : nsecs_t) : bool
    ALOGV("%s", __FUNCTION__);
    Mutex::Autolock lock(mBusyMutex);
    status_t res = OK;
    if (mIsBusy) {
        res = mDone.waitRelative(mBusyMutex, timeout);
    }
    return (res == OK);
!!!41115063.cpp!!!	jpegErrorHandler(in cinfo : j_common_ptr) : void
    ALOGV("%s", __FUNCTION__);
    JpegError *error = static_cast<JpegError*>(cinfo->err);
    error->parent->mJpegErrorInfo = cinfo;
!!!41115191.cpp!!!	jpegInitDestination(in cinfo : j_compress_ptr) : void
    ALOGV("%s", __FUNCTION__);
    JpegDestination *dest= static_cast<JpegDestination*>(cinfo->dest);
    ALOGV("%s: Setting destination to %p, size %zu",
            __FUNCTION__, dest->parent->mJpegBuffer->data, kMaxJpegSize);
    dest->next_output_byte = (JOCTET*)(dest->parent->mJpegBuffer->data);
    dest->free_in_buffer = kMaxJpegSize;
!!!41115319.cpp!!!	jpegEmptyOutputBuffer(in cinfo : j_compress_ptr) : boolean
    ALOGV("%s", __FUNCTION__);
    ALOGE("%s: JPEG destination buffer overflow!",
            __FUNCTION__);
    return true;
!!!41115447.cpp!!!	jpegTermDestination(in cinfo : j_compress_ptr) : void
    (void) cinfo; // TODO: clean up
    ALOGV("%s", __FUNCTION__);
    ALOGV("%s: Done writing JPEG data. %zu bytes left in buffer",
            __FUNCTION__, cinfo->dest->free_in_buffer);
!!!41115575.cpp!!!	checkError(in msg : char) : bool
    ALOGV("%s", __FUNCTION__);
    if (mJpegErrorInfo) {
        char errBuffer[JMSG_LENGTH_MAX];
        mJpegErrorInfo->err->format_message(mJpegErrorInfo, errBuffer);
        ALOGE("%s: %s: %s",
                __FUNCTION__, msg, errBuffer);
        cleanUp();
        mJpegErrorInfo = NULL;
        return true;
    }
    return false;
!!!41115703.cpp!!!	cleanUp() : void
    ALOGV("%s", __FUNCTION__);
    jpeg_destroy_compress(&mCInfo);
    Mutex::Autolock lock(mBusyMutex);
    mIsBusy = false;
    mDone.signal();
!!!41115831.cpp!!!	readyToRun() : status_t
    ALOGV("%s", __FUNCTION__);
    return OK;
!!!41115959.cpp!!!	threadLoop() : bool
    ALOGV("%s", __FUNCTION__);

    mAuxBuffer = mBuffers[0];    // input
    mJpegBuffer = mBuffers[1];    // output

    // Set up error management
    mJpegErrorInfo = NULL;
    JpegError error;
    error.parent = this;

    mCInfo.err = jpeg_std_error(&error);
    mCInfo.err->error_exit = jpegErrorHandler;

    jpeg_create_compress(&mCInfo);
    if (checkError("Error initializing compression")) return false;

    // Route compressed data straight to output stream buffer
    JpegDestination jpegDestMgr;
    jpegDestMgr.parent = this;
    jpegDestMgr.init_destination = jpegInitDestination;
    jpegDestMgr.empty_output_buffer = jpegEmptyOutputBuffer;
    jpegDestMgr.term_destination = jpegTermDestination;

    mCInfo.dest = &jpegDestMgr;

    // Set up compression parameters
    mCInfo.image_width = mAuxBuffer->width;
    mCInfo.image_height = mAuxBuffer->height;
    mCInfo.input_components = 1; // 3;
    mCInfo.in_color_space = JCS_GRAYSCALE; // JCS_RGB

    ALOGV("%s: image_width = %d, image_height = %d", __FUNCTION__, mCInfo.image_width, mCInfo.image_height);

    jpeg_set_defaults(&mCInfo);
    if (checkError("Error configuring defaults")) return false;

    // Do compression
    jpeg_start_compress(&mCInfo, TRUE);
    if (checkError("Error starting compression")) return false;

    size_t rowStride = mAuxBuffer->stride;// * 3;
    const size_t kChunkSize = 32;
    while (mCInfo.next_scanline < mCInfo.image_height) {
        JSAMPROW chunk[kChunkSize];
        for (size_t i = 0 ; i < kChunkSize; i++) {
            chunk[i] = (JSAMPROW)
                    (mAuxBuffer->data + (i + mCInfo.next_scanline) * rowStride);
        }
        jpeg_write_scanlines(&mCInfo, chunk, kChunkSize);
        if (checkError("Error while compressing")) return false;
        if (exitPending()) {
            ALOGV("%s: Cancel called, exiting early", __FUNCTION__);
            cleanUp();
            return false;
        }
    }

    jpeg_finish_compress(&mCInfo);
    if (checkError("Error while finishing compression")) return false;

    cleanUp();
    return false;
