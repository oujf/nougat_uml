class RouteInfo
!!!2173367.java!!!	RouteInfo(inout category : MediaRouter::RouteCategory)
            mCategory = category;
            mDeviceType = DEVICE_TYPE_UNKNOWN;
!!!2173495.java!!!	getName() : CharSequence
            return getName(sStatic.mResources);
!!!2173623.java!!!	getName(inout context : Context) : CharSequence
            return getName(context.getResources());
!!!2173751.java!!!	getName(inout res : Resources) : CharSequence
            if (mNameResId != 0) {
                return mName = res.getText(mNameResId);
            }
            return mName;
!!!2173879.java!!!	getDescription() : CharSequence
            return mDescription;
!!!2174007.java!!!	getStatus() : CharSequence
            return mStatus;
!!!2174135.java!!!	setRealStatusCode(in statusCode : int) : boolean
            if (mRealStatusCode != statusCode) {
                mRealStatusCode = statusCode;
                return resolveStatusCode();
            }
            return false;
!!!2174263.java!!!	resolveStatusCode() : boolean
            int statusCode = mRealStatusCode;
            if (isSelected()) {
                switch (statusCode) {
                    // If the route is selected and its status appears to be between states
                    // then report it as connecting even though it has not yet had a chance
                    // to officially move into the CONNECTING state.  Note that routes in
                    // the NONE state are assumed to not require an explicit connection
                    // lifecycle whereas those that are AVAILABLE are assumed to have
                    // to eventually proceed to CONNECTED.
                    case STATUS_AVAILABLE:
                    case STATUS_SCANNING:
                        statusCode = STATUS_CONNECTING;
                        break;
                }
            }
            if (mResolvedStatusCode == statusCode) {
                return false;
            }

            mResolvedStatusCode = statusCode;
            int resId;
            switch (statusCode) {
                case STATUS_SCANNING:
                    resId = com.android.internal.R.string.media_route_status_scanning;
                    break;
                case STATUS_CONNECTING:
                    resId = com.android.internal.R.string.media_route_status_connecting;
                    break;
                case STATUS_AVAILABLE:
                    resId = com.android.internal.R.string.media_route_status_available;
                    break;
                case STATUS_NOT_AVAILABLE:
                    resId = com.android.internal.R.string.media_route_status_not_available;
                    break;
                case STATUS_IN_USE:
                    resId = com.android.internal.R.string.media_route_status_in_use;
                    break;
                case STATUS_CONNECTED:
                case STATUS_NONE:
                default:
                    resId = 0;
                    break;
            }
            mStatus = resId != 0 ? sStatic.mResources.getText(resId) : null;
            return true;
!!!2174391.java!!!	getStatusCode() : int
            return mResolvedStatusCode;
!!!2174519.java!!!	getSupportedTypes() : int
            return mSupportedTypes;
!!!2174647.java!!!	getDeviceType() : int
            return mDeviceType;
!!!2174775.java!!!	matchesTypes(in types : int) : boolean
            return (mSupportedTypes & types) != 0;
!!!2174903.java!!!	getGroup() : MediaRouter::RouteGroup
            return mGroup;
!!!2175031.java!!!	getCategory() : MediaRouter::RouteCategory
            return mCategory;
!!!2175159.java!!!	getIconDrawable() : Drawable
            return mIcon;
!!!2175287.java!!!	setTag(inout tag : Object) : void
            mTag = tag;
            routeUpdated();
!!!2175415.java!!!	getTag() : Object
            return mTag;
!!!2175543.java!!!	getPlaybackType() : int
            return mPlaybackType;
!!!2175671.java!!!	getPlaybackStream() : int
            return mPlaybackStream;
!!!2175799.java!!!	getVolume() : int
            if (mPlaybackType == PLAYBACK_TYPE_LOCAL) {
                int vol = 0;
                try {
                    vol = sStatic.mAudioService.getStreamVolume(mPlaybackStream);
                } catch (RemoteException e) {
                    Log.e(TAG, "Error getting local stream volume", e);
                }
                return vol;
            } else {
                return mVolume;
            }
!!!2175927.java!!!	requestSetVolume(in volume : int) : void
            if (mPlaybackType == PLAYBACK_TYPE_LOCAL) {
                try {
                    sStatic.mAudioService.setStreamVolume(mPlaybackStream, volume, 0,
                            ActivityThread.currentPackageName());
                } catch (RemoteException e) {
                    Log.e(TAG, "Error setting local stream volume", e);
                }
            } else {
                sStatic.requestSetVolume(this, volume);
            }
!!!2176055.java!!!	requestUpdateVolume(in direction : int) : void
            if (mPlaybackType == PLAYBACK_TYPE_LOCAL) {
                try {
                    final int volume =
                            Math.max(0, Math.min(getVolume() + direction, getVolumeMax()));
                    sStatic.mAudioService.setStreamVolume(mPlaybackStream, volume, 0,
                            ActivityThread.currentPackageName());
                } catch (RemoteException e) {
                    Log.e(TAG, "Error setting local stream volume", e);
                }
            } else {
                sStatic.requestUpdateVolume(this, direction);
            }
!!!2176183.java!!!	getVolumeMax() : int
            if (mPlaybackType == PLAYBACK_TYPE_LOCAL) {
                int volMax = 0;
                try {
                    volMax = sStatic.mAudioService.getStreamMaxVolume(mPlaybackStream);
                } catch (RemoteException e) {
                    Log.e(TAG, "Error getting local stream volume", e);
                }
                return volMax;
            } else {
                return mVolumeMax;
            }
!!!2176311.java!!!	getVolumeHandling() : int
            return mVolumeHandling;
!!!2176439.java!!!	getPresentationDisplay() : Display
            return mPresentationDisplay;
!!!2176567.java!!!	updatePresentationDisplay() : boolean
            Display display = choosePresentationDisplay();
            if (mPresentationDisplay != display) {
                mPresentationDisplay = display;
                return true;
            }
            return false;
!!!2176695.java!!!	choosePresentationDisplay() : Display
            if ((mSupportedTypes & ROUTE_TYPE_LIVE_VIDEO) != 0) {
                Display[] displays = sStatic.getAllPresentationDisplays();

                // Ensure that the specified display is valid for presentations.
                // This check will normally disallow the default display unless it was
                // configured as a presentation display for some reason.
                if (mPresentationDisplayId >= 0) {
                    for (Display display : displays) {
                        if (display.getDisplayId() == mPresentationDisplayId) {
                            return display;
                        }
                    }
                    return null;
                }

                // Find the indicated Wifi display by its address.
                if (mDeviceAddress != null) {
                    for (Display display : displays) {
                        if (display.getType() == Display.TYPE_WIFI
                                && mDeviceAddress.equals(display.getAddress())) {
                            return display;
                        }
                    }
                    return null;
                }

                // For the default route, choose the first presentation display from the list.
                if (this == sStatic.mDefaultAudioVideo && displays.length > 0) {
                    return displays[0];
                }
            }
            return null;
!!!2176823.java!!!	getDeviceAddress() : String
            return mDeviceAddress;
!!!2176951.java!!!	isEnabled() : boolean
            return mEnabled;
!!!2177079.java!!!	isConnecting() : boolean
            return mResolvedStatusCode == STATUS_CONNECTING;
!!!2177207.java!!!	isSelected() : boolean
            return this == sStatic.mSelectedRoute;
!!!2177335.java!!!	isDefault() : boolean
            return this == sStatic.mDefaultAudioVideo;
!!!2177463.java!!!	select() : void
            selectRouteStatic(mSupportedTypes, this, true);
!!!2177591.java!!!	setStatusInt(inout status : CharSequence) : void
            if (!status.equals(mStatus)) {
                mStatus = status;
                if (mGroup != null) {
                    mGroup.memberStatusChanged(this, status);
                }
                routeUpdated();
            }
!!!2177719.java!!!	routeUpdated() : void
            updateRoute(this);
!!!2177847.java!!!	toString() : String
            String supportedTypes = typesToString(getSupportedTypes());
            return getClass().getSimpleName() + "{ name=" + getName() +
                    ", description=" + getDescription() +
                    ", status=" + getStatus() +
                    ", category=" + getCategory() +
                    ", supportedTypes=" + supportedTypes +
                    ", presentationDisplay=" + mPresentationDisplay + " }";
