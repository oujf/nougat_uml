class MagnificationController
!!!41257911.java!!!	MagnificationController(inout context : Context, inout ams : AccessibilityManagerService, inout lock : Object)
        mAms = ams;
        mContentResolver = context.getContentResolver();
        mScreenStateObserver = new ScreenStateObserver(context, this);
        mWindowStateObserver = new WindowStateObserver(context, this);
        mLock = lock;
        mSpecAnimationBridge = new SpecAnimationBridge(context, mLock);
!!!41258039.java!!!	register() : void
        synchronized (mLock) {
            if (!mRegistered) {
                mScreenStateObserver.register();
                mWindowStateObserver.register();
                mSpecAnimationBridge.setEnabled(true);
                // Obtain initial state.
                mWindowStateObserver.getMagnificationRegion(mMagnificationRegion);
                mMagnificationRegion.getBounds(mMagnificationBounds);
                mRegistered = true;
            }
        }
!!!41258167.java!!!	unregister() : void
        synchronized (mLock) {
            if (!isMagnifying()) {
                unregisterInternalLocked();
            } else {
                mUnregisterPending = true;
                resetLocked(true);
            }
        }
!!!41258295.java!!!	isRegisteredLocked() : boolean
        return mRegistered;
!!!41258423.java!!!	unregisterInternalLocked() : void
        if (mRegistered) {
            mSpecAnimationBridge.setEnabled(false);
            mScreenStateObserver.unregister();
            mWindowStateObserver.unregister();
            mMagnificationRegion.setEmpty();
            mRegistered = false;
        }
        mUnregisterPending = false;
!!!41258551.java!!!	isMagnifying() : boolean
        return mCurrentMagnificationSpec.scale > 1.0f;
!!!41258679.java!!!	onMagnificationRegionChanged(inout magnified : Region, inout updateSpec : boolean) : void
        synchronized (mLock) {
            if (!mRegistered) {
                // Don't update if we've unregistered
                return;
            }
            boolean magnificationChanged = false;
            boolean boundsChanged = false;

            if (!mMagnificationRegion.equals(magnified)) {
                mMagnificationRegion.set(magnified);
                mMagnificationRegion.getBounds(mMagnificationBounds);
                boundsChanged = true;
            }
            if (updateSpec) {
                final MagnificationSpec sentSpec = mSpecAnimationBridge.mSentMagnificationSpec;
                final float scale = sentSpec.scale;
                final float offsetX = sentSpec.offsetX;
                final float offsetY = sentSpec.offsetY;

                // Compute the new center and update spec as needed.
                final float centerX = (mMagnificationBounds.width() / 2.0f
                        + mMagnificationBounds.left - offsetX) / scale;
                final float centerY = (mMagnificationBounds.height() / 2.0f
                        + mMagnificationBounds.top - offsetY) / scale;
                magnificationChanged = setScaleAndCenterLocked(
                        scale, centerX, centerY, false, INVALID_ID);
            }

            // If magnification changed we already notified for the change.
            if (boundsChanged && updateSpec && !magnificationChanged) {
                onMagnificationChangedLocked();
            }
        }
!!!41258807.java!!!	magnificationRegionContains(in x : float, in y : float) : boolean
        synchronized (mLock) {
            return mMagnificationRegion.contains((int) x, (int) y);
        }
!!!41258935.java!!!	getMagnificationBounds(inout outBounds : Rect) : void
        synchronized (mLock) {
            outBounds.set(mMagnificationBounds);
        }
!!!41259063.java!!!	getMagnificationRegion(inout outRegion : Region) : void
        synchronized (mLock) {
            outRegion.set(mMagnificationRegion);
        }
!!!41259191.java!!!	getScale() : float
        return mCurrentMagnificationSpec.scale;
!!!41259319.java!!!	getOffsetX() : float
        return mCurrentMagnificationSpec.offsetX;
!!!41259447.java!!!	getCenterX() : float
        synchronized (mLock) {
            return (mMagnificationBounds.width() / 2.0f
                    + mMagnificationBounds.left - getOffsetX()) / getScale();
        }
!!!41259575.java!!!	getOffsetY() : float
        return mCurrentMagnificationSpec.offsetY;
!!!41259703.java!!!	getCenterY() : float
        synchronized (mLock) {
            return (mMagnificationBounds.height() / 2.0f
                    + mMagnificationBounds.top - getOffsetY()) / getScale();
        }
!!!41259831.java!!!	getSentScale() : float
        return mSpecAnimationBridge.mSentMagnificationSpec.scale;
!!!41259959.java!!!	getSentOffsetX() : float
        return mSpecAnimationBridge.mSentMagnificationSpec.offsetX;
!!!41260087.java!!!	getSentOffsetY() : float
        return mSpecAnimationBridge.mSentMagnificationSpec.offsetY;
!!!41260215.java!!!	reset(inout animate : boolean) : boolean
        synchronized (mLock) {
            return resetLocked(animate);
        }
!!!41260343.java!!!	resetLocked(inout animate : boolean) : boolean
        if (!mRegistered) {
            return false;
        }
        final MagnificationSpec spec = mCurrentMagnificationSpec;
        final boolean changed = !spec.isNop();
        if (changed) {
            spec.clear();
            onMagnificationChangedLocked();
        }
        mIdOfLastServiceToMagnify = INVALID_ID;
        mSpecAnimationBridge.updateSentSpec(spec, animate);
        return changed;
!!!41260471.java!!!	setScale(in scale : float, in pivotX : float, in pivotY : float, inout animate : boolean, in id : int) : boolean
        synchronized (mLock) {
            if (!mRegistered) {
                return false;
            }
            // Constrain scale immediately for use in the pivot calculations.
            scale = MathUtils.constrain(scale, MIN_SCALE, MAX_SCALE);

            final Rect viewport = mTempRect;
            mMagnificationRegion.getBounds(viewport);
            final MagnificationSpec spec = mCurrentMagnificationSpec;
            final float oldScale = spec.scale;
            final float oldCenterX = (viewport.width() / 2.0f - spec.offsetX) / oldScale;
            final float oldCenterY = (viewport.height() / 2.0f - spec.offsetY) / oldScale;
            final float normPivotX = (pivotX - spec.offsetX) / oldScale;
            final float normPivotY = (pivotY - spec.offsetY) / oldScale;
            final float offsetX = (oldCenterX - normPivotX) * (oldScale / scale);
            final float offsetY = (oldCenterY - normPivotY) * (oldScale / scale);
            final float centerX = normPivotX + offsetX;
            final float centerY = normPivotY + offsetY;
            mIdOfLastServiceToMagnify = id;
            return setScaleAndCenterLocked(scale, centerX, centerY, animate, id);
        }
!!!41260599.java!!!	setCenter(in centerX : float, in centerY : float, inout animate : boolean, in id : int) : boolean
        synchronized (mLock) {
            if (!mRegistered) {
                return false;
            }
            return setScaleAndCenterLocked(Float.NaN, centerX, centerY, animate, id);
        }
!!!41260727.java!!!	setScaleAndCenter(in scale : float, in centerX : float, in centerY : float, inout animate : boolean, in id : int) : boolean
        synchronized (mLock) {
            if (!mRegistered) {
                return false;
            }
            return setScaleAndCenterLocked(scale, centerX, centerY, animate, id);
        }
!!!41260855.java!!!	setScaleAndCenterLocked(in scale : float, in centerX : float, in centerY : float, inout animate : boolean, in id : int) : boolean
        final boolean changed = updateMagnificationSpecLocked(scale, centerX, centerY);
        mSpecAnimationBridge.updateSentSpec(mCurrentMagnificationSpec, animate);
        if (isMagnifying() && (id != INVALID_ID)) {
            mIdOfLastServiceToMagnify = id;
        }
        return changed;
!!!41260983.java!!!	offsetMagnifiedRegionCenter(in offsetX : float, in offsetY : float, in id : int) : void
        synchronized (mLock) {
            if (!mRegistered) {
                return;
            }

            final MagnificationSpec currSpec = mCurrentMagnificationSpec;
            final float nonNormOffsetX = currSpec.offsetX - offsetX;
            currSpec.offsetX = MathUtils.constrain(nonNormOffsetX, getMinOffsetXLocked(), 0);
            final float nonNormOffsetY = currSpec.offsetY - offsetY;
            currSpec.offsetY = MathUtils.constrain(nonNormOffsetY, getMinOffsetYLocked(), 0);
            if (id != INVALID_ID) {
                mIdOfLastServiceToMagnify = id;
            }
            mSpecAnimationBridge.updateSentSpec(currSpec, false);
        }
!!!41261111.java!!!	getIdOfLastServiceToMagnify() : int
        return mIdOfLastServiceToMagnify;
!!!41261239.java!!!	onMagnificationChangedLocked() : void
        mAms.onMagnificationStateChanged();
        mAms.notifyMagnificationChanged(mMagnificationRegion,
                getScale(), getCenterX(), getCenterY());
        if (mUnregisterPending && !isMagnifying()) {
            unregisterInternalLocked();
        }
!!!41261367.java!!!	persistScale() : void
        final float scale = mCurrentMagnificationSpec.scale;
        final int userId = mUserId;

        new AsyncTask<Void, Void, Void>() {
            @Override
            protected Void doInBackground(Void... params) {
                Settings.Secure.putFloatForUser(mContentResolver,
                        Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE, scale, userId);
                return null;
            }
        }.execute();
!!!41261495.java!!!	getPersistedScale() : float
        return Settings.Secure.getFloatForUser(mContentResolver,
                Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_SCALE,
                DEFAULT_MAGNIFICATION_SCALE, mUserId);
!!!41261623.java!!!	updateMagnificationSpecLocked(in scale : float, in centerX : float, in centerY : float) : boolean
        // Handle defaults.
        if (Float.isNaN(centerX)) {
            centerX = getCenterX();
        }
        if (Float.isNaN(centerY)) {
            centerY = getCenterY();
        }
        if (Float.isNaN(scale)) {
            scale = getScale();
        }

        // Ensure requested center is within the magnification region.
        if (!magnificationRegionContains(centerX, centerY)) {
            return false;
        }

        // Compute changes.
        final MagnificationSpec currSpec = mCurrentMagnificationSpec;
        boolean changed = false;

        final float normScale = MathUtils.constrain(scale, MIN_SCALE, MAX_SCALE);
        if (Float.compare(currSpec.scale, normScale) != 0) {
            currSpec.scale = normScale;
            changed = true;
        }

        final float nonNormOffsetX = mMagnificationBounds.width() / 2.0f
                + mMagnificationBounds.left - centerX * scale;
        final float offsetX = MathUtils.constrain(nonNormOffsetX, getMinOffsetXLocked(), 0);
        if (Float.compare(currSpec.offsetX, offsetX) != 0) {
            currSpec.offsetX = offsetX;
            changed = true;
        }

        final float nonNormOffsetY = mMagnificationBounds.height() / 2.0f
                + mMagnificationBounds.top - centerY * scale;
        final float offsetY = MathUtils.constrain(nonNormOffsetY, getMinOffsetYLocked(), 0);
        if (Float.compare(currSpec.offsetY, offsetY) != 0) {
            currSpec.offsetY = offsetY;
            changed = true;
        }

        if (changed) {
            onMagnificationChangedLocked();
        }

        return changed;
!!!41261751.java!!!	getMinOffsetXLocked() : float
        final float viewportWidth = mMagnificationBounds.width();
        return viewportWidth - viewportWidth * mCurrentMagnificationSpec.scale;
!!!41261879.java!!!	getMinOffsetYLocked() : float
        final float viewportHeight = mMagnificationBounds.height();
        return viewportHeight - viewportHeight * mCurrentMagnificationSpec.scale;
!!!41262007.java!!!	setUserId(in userId : int) : void
        if (mUserId != userId) {
            mUserId = userId;

            synchronized (mLock) {
                if (isMagnifying()) {
                    reset(false);
                }
            }
        }
!!!41262135.java!!!	isScreenMagnificationAutoUpdateEnabled() : boolean
        return (Settings.Secure.getInt(mContentResolver,
                Settings.Secure.ACCESSIBILITY_DISPLAY_MAGNIFICATION_AUTO_UPDATE,
                DEFAULT_SCREEN_MAGNIFICATION_AUTO_UPDATE) == 1);
!!!41262263.java!!!	resetIfNeeded(inout animate : boolean) : boolean
        synchronized (mLock) {
            if (isMagnifying() && isScreenMagnificationAutoUpdateEnabled()) {
                reset(animate);
                return true;
            }
            return false;
        }
!!!41262391.java!!!	getMagnifiedFrameInContentCoordsLocked(inout outFrame : Rect) : void
        final float scale = getSentScale();
        final float offsetX = getSentOffsetX();
        final float offsetY = getSentOffsetY();
        getMagnificationBounds(outFrame);
        outFrame.offset((int) -offsetX, (int) -offsetY);
        outFrame.scale(1.0f / scale);
!!!41262519.java!!!	requestRectangleOnScreen(in left : int, in top : int, in right : int, in bottom : int) : void
        synchronized (mLock) {
            final Rect magnifiedFrame = mTempRect;
            getMagnificationBounds(magnifiedFrame);
            if (!magnifiedFrame.intersects(left, top, right, bottom)) {
                return;
            }

            final Rect magnifFrameInScreenCoords = mTempRect1;
            getMagnifiedFrameInContentCoordsLocked(magnifFrameInScreenCoords);

            final float scrollX;
            final float scrollY;
            if (right - left > magnifFrameInScreenCoords.width()) {
                final int direction = TextUtils
                        .getLayoutDirectionFromLocale(Locale.getDefault());
                if (direction == View.LAYOUT_DIRECTION_LTR) {
                    scrollX = left - magnifFrameInScreenCoords.left;
                } else {
                    scrollX = right - magnifFrameInScreenCoords.right;
                }
            } else if (left < magnifFrameInScreenCoords.left) {
                scrollX = left - magnifFrameInScreenCoords.left;
            } else if (right > magnifFrameInScreenCoords.right) {
                scrollX = right - magnifFrameInScreenCoords.right;
            } else {
                scrollX = 0;
            }

            if (bottom - top > magnifFrameInScreenCoords.height()) {
                scrollY = top - magnifFrameInScreenCoords.top;
            } else if (top < magnifFrameInScreenCoords.top) {
                scrollY = top - magnifFrameInScreenCoords.top;
            } else if (bottom > magnifFrameInScreenCoords.bottom) {
                scrollY = bottom - magnifFrameInScreenCoords.bottom;
            } else {
                scrollY = 0;
            }

            final float scale = getScale();
            offsetMagnifiedRegionCenter(scrollX * scale, scrollY * scale, INVALID_ID);
        }
