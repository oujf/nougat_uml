class GestureUtils
!!!41254967.java!!!	GestureUtils()
        /* cannot be instantiated */
!!!41255095.java!!!	isTap(inout down : MotionEvent, inout up : MotionEvent, in tapTimeSlop : int, in tapDistanceSlop : int, in actionIndex : int) : boolean
        return eventsWithinTimeAndDistanceSlop(down, up, tapTimeSlop, tapDistanceSlop, actionIndex);
!!!41255223.java!!!	isMultiTap(inout firstUp : MotionEvent, inout secondUp : MotionEvent, in multiTapTimeSlop : int, in multiTapDistanceSlop : int, in actionIndex : int) : boolean
        return eventsWithinTimeAndDistanceSlop(firstUp, secondUp, multiTapTimeSlop,
                multiTapDistanceSlop, actionIndex);
!!!41255351.java!!!	eventsWithinTimeAndDistanceSlop(inout first : MotionEvent, inout second : MotionEvent, in timeout : int, in distance : int, in actionIndex : int) : boolean
        if (isTimedOut(first, second, timeout)) {
            return false;
        }
        final double deltaMove = computeDistance(first, second, actionIndex);
        if (deltaMove >= distance) {
            return false;
        }
        return true;
!!!41255479.java!!!	computeDistance(inout first : MotionEvent, inout second : MotionEvent, in pointerIndex : int) : double
         return MathUtils.dist(first.getX(pointerIndex), first.getY(pointerIndex),
                 second.getX(pointerIndex), second.getY(pointerIndex));
!!!41255607.java!!!	isTimedOut(inout firstUp : MotionEvent, inout secondUp : MotionEvent, in timeout : int) : boolean
        final long deltaTime = secondUp.getEventTime() - firstUp.getEventTime();
        return (deltaTime >= timeout);
!!!41255735.java!!!	isSamePointerContext(inout first : MotionEvent, inout second : MotionEvent) : boolean
        return (first.getPointerIdBits() == second.getPointerIdBits()
                && first.getPointerId(first.getActionIndex())
                        == second.getPointerId(second.getActionIndex()));
!!!41255863.java!!!	isDraggingGesture(in firstPtrDownX : float, in firstPtrDownY : float, in secondPtrDownX : float, in secondPtrDownY : float, in firstPtrX : float, in firstPtrY : float, in secondPtrX : float, in secondPtrY : float, in maxDraggingAngleCos : float) : boolean

        // Check if the pointers are moving in the same direction.
        final float firstDeltaX = firstPtrX - firstPtrDownX;
        final float firstDeltaY = firstPtrY - firstPtrDownY;

        if (firstDeltaX == 0 && firstDeltaY == 0) {
            return true;
        }

        final float firstMagnitude = (float) Math.hypot(firstDeltaX, firstDeltaY);
        final float firstXNormalized =
            (firstMagnitude > 0) ? firstDeltaX / firstMagnitude : firstDeltaX;
        final float firstYNormalized =
            (firstMagnitude > 0) ? firstDeltaY / firstMagnitude : firstDeltaY;

        final float secondDeltaX = secondPtrX - secondPtrDownX;
        final float secondDeltaY = secondPtrY - secondPtrDownY;

        if (secondDeltaX == 0 && secondDeltaY == 0) {
            return true;
        }

        final float secondMagnitude = (float) Math.hypot(secondDeltaX, secondDeltaY);
        final float secondXNormalized =
            (secondMagnitude > 0) ? secondDeltaX / secondMagnitude : secondDeltaX;
        final float secondYNormalized =
            (secondMagnitude > 0) ? secondDeltaY / secondMagnitude : secondDeltaY;

        final float angleCos =
            firstXNormalized * secondXNormalized + firstYNormalized * secondYNormalized;

        if (angleCos < maxDraggingAngleCos) {
            return false;
        }

        return true;
