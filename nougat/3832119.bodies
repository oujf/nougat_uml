class DetectingStateHandler
!!!41269943.java!!!	DetectingStateHandler(inout context : Context)
            mMultiTapTimeSlop = ViewConfiguration.getDoubleTapTimeout()
                    + context.getResources().getInteger(
                    com.android.internal.R.integer.config_screen_magnification_multi_tap_adjustment);
            mTapDistanceSlop = ViewConfiguration.get(context).getScaledTouchSlop();
            mMultiTapDistanceSlop = ViewConfiguration.get(context).getScaledDoubleTapSlop();
!!!41270071.java!!!	onMotionEvent(inout event : MotionEvent, inout rawEvent : MotionEvent, in policyFlags : int) : void
            cacheDelayedMotionEvent(event, rawEvent, policyFlags);
            final int action = event.getActionMasked();
            switch (action) {
                case MotionEvent.ACTION_DOWN: {
                    mHandler.removeMessages(MESSAGE_TRANSITION_TO_DELEGATING_STATE);
                    if (!mMagnificationController.magnificationRegionContains(
                            event.getX(), event.getY())) {
                        transitionToDelegatingStateAndClear();
                        return;
                    }
                    if (mTapCount == ACTION_TAP_COUNT - 1 && mLastDownEvent != null
                            && GestureUtils.isMultiTap(mLastDownEvent, event,
                            mMultiTapTimeSlop, mMultiTapDistanceSlop, 0)) {
                        Message message = mHandler.obtainMessage(MESSAGE_ON_ACTION_TAP_AND_HOLD,
                                policyFlags, 0, event);
                        mHandler.sendMessageDelayed(message,
                                ViewConfiguration.getLongPressTimeout());
                    } else if (mTapCount < ACTION_TAP_COUNT) {
                        Message message = mHandler.obtainMessage(
                                MESSAGE_TRANSITION_TO_DELEGATING_STATE);
                        mHandler.sendMessageDelayed(message, mMultiTapTimeSlop);
                    }
                    clearLastDownEvent();
                    mLastDownEvent = MotionEvent.obtain(event);
                }
                break;
                case MotionEvent.ACTION_POINTER_DOWN: {
                    if (mMagnificationController.isMagnifying()) {
                        transitionToState(STATE_MAGNIFIED_INTERACTION);
                        clear();
                    } else {
                        transitionToDelegatingStateAndClear();
                    }
                }
                break;
                case MotionEvent.ACTION_MOVE: {
                    if (mLastDownEvent != null && mTapCount < ACTION_TAP_COUNT - 1) {
                        final double distance = GestureUtils.computeDistance(mLastDownEvent,
                                event, 0);
                        if (Math.abs(distance) > mTapDistanceSlop) {
                            transitionToDelegatingStateAndClear();
                        }
                    }
                }
                break;
                case MotionEvent.ACTION_UP: {
                    if (mLastDownEvent == null) {
                        return;
                    }
                    mHandler.removeMessages(MESSAGE_ON_ACTION_TAP_AND_HOLD);
                    if (!mMagnificationController.magnificationRegionContains(
                            event.getX(), event.getY())) {
                        transitionToDelegatingStateAndClear();
                        return;
                    }
                    if (!GestureUtils.isTap(mLastDownEvent, event, mTapTimeSlop,
                            mTapDistanceSlop, 0)) {
                        transitionToDelegatingStateAndClear();
                        return;
                    }
                    if (mLastTapUpEvent != null && !GestureUtils.isMultiTap(mLastTapUpEvent,
                            event, mMultiTapTimeSlop, mMultiTapDistanceSlop, 0)) {
                        transitionToDelegatingStateAndClear();
                        return;
                    }
                    mTapCount++;
                    if (DEBUG_DETECTING) {
                        Slog.i(LOG_TAG, "Tap count:" + mTapCount);
                    }
                    if (mTapCount == ACTION_TAP_COUNT) {
                        clear();
                        onActionTap(event, policyFlags);
                        return;
                    }
                    clearLastTapUpEvent();
                    mLastTapUpEvent = MotionEvent.obtain(event);
                }
                break;
                case MotionEvent.ACTION_POINTER_UP: {
                    /* do nothing */
                }
                break;
            }
!!!41270199.java!!!	clear() : void
            mHandler.removeMessages(MESSAGE_ON_ACTION_TAP_AND_HOLD);
            mHandler.removeMessages(MESSAGE_TRANSITION_TO_DELEGATING_STATE);
            clearTapDetectionState();
            clearDelayedMotionEvents();
!!!41270327.java!!!	clearTapDetectionState() : void
            mTapCount = 0;
            clearLastTapUpEvent();
            clearLastDownEvent();
!!!41270455.java!!!	clearLastTapUpEvent() : void
            if (mLastTapUpEvent != null) {
                mLastTapUpEvent.recycle();
                mLastTapUpEvent = null;
            }
!!!41270583.java!!!	clearLastDownEvent() : void
            if (mLastDownEvent != null) {
                mLastDownEvent.recycle();
                mLastDownEvent = null;
            }
!!!41270711.java!!!	cacheDelayedMotionEvent(inout event : MotionEvent, inout rawEvent : MotionEvent, in policyFlags : int) : void
            MotionEventInfo info = MotionEventInfo.obtain(event, rawEvent,
                    policyFlags);
            if (mDelayedEventQueue == null) {
                mDelayedEventQueue = info;
            } else {
                MotionEventInfo tail = mDelayedEventQueue;
                while (tail.mNext != null) {
                    tail = tail.mNext;
                }
                tail.mNext = info;
            }
!!!41270839.java!!!	sendDelayedMotionEvents() : void
            while (mDelayedEventQueue != null) {
                MotionEventInfo info = mDelayedEventQueue;
                mDelayedEventQueue = info.mNext;
                MagnificationGestureHandler.this.onMotionEvent(info.mEvent, info.mRawEvent,
                        info.mPolicyFlags);
                info.recycle();
            }
!!!41270967.java!!!	clearDelayedMotionEvents() : void
            while (mDelayedEventQueue != null) {
                MotionEventInfo info = mDelayedEventQueue;
                mDelayedEventQueue = info.mNext;
                info.recycle();
            }
!!!41271095.java!!!	transitionToDelegatingStateAndClear() : void
            transitionToState(STATE_DELEGATING);
            sendDelayedMotionEvents();
            clear();
!!!41271223.java!!!	onActionTap(inout up : MotionEvent, in policyFlags : int) : void
            if (DEBUG_DETECTING) {
                Slog.i(LOG_TAG, "onActionTap()");
            }

            if (!mMagnificationController.isMagnifying()) {
                final float targetScale = mMagnificationController.getPersistedScale();
                final float scale = MathUtils.constrain(targetScale, MIN_SCALE, MAX_SCALE);
                mMagnificationController.setScaleAndCenter(scale, up.getX(), up.getY(), true,
                        AccessibilityManagerService.MAGNIFICATION_GESTURE_HANDLER_ID);
            } else {
                mMagnificationController.reset(true);
            }
!!!41271351.java!!!	onActionTapAndHold(inout down : MotionEvent, in policyFlags : int) : void
            if (DEBUG_DETECTING) {
                Slog.i(LOG_TAG, "onActionTapAndHold()");
            }

            clear();
            mTranslationEnabledBeforePan = mMagnificationController.isMagnifying();

            final float targetScale = mMagnificationController.getPersistedScale();
            final float scale = MathUtils.constrain(targetScale, MIN_SCALE, MAX_SCALE);
            mMagnificationController.setScaleAndCenter(scale, down.getX(), down.getY(), true,
                    AccessibilityManagerService.MAGNIFICATION_GESTURE_HANDLER_ID);

            transitionToState(STATE_VIEWPORT_DRAGGING);
