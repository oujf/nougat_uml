class Builder
!!!2211383.java!!!	Builder(inout context : Context)
            this(context, null);
!!!2211511.java!!!	Builder(inout context : Context, inout toAdopt : Notification)
            mContext = context;

            if (toAdopt == null) {
                mN = new Notification();
                if (context.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.N) {
                    mN.extras.putBoolean(EXTRA_SHOW_WHEN, true);
                }
                mN.priority = PRIORITY_DEFAULT;
                mN.visibility = VISIBILITY_PRIVATE;
            } else {
                mN = toAdopt;
                if (mN.actions != null) {
                    Collections.addAll(mActions, mN.actions);
                }

                if (mN.extras.containsKey(EXTRA_PEOPLE)) {
                    Collections.addAll(mPersonList, mN.extras.getStringArray(EXTRA_PEOPLE));
                }

                if (mN.getSmallIcon() == null && mN.icon != 0) {
                    setSmallIcon(mN.icon);
                }

                if (mN.getLargeIcon() == null && mN.largeIcon != null) {
                    setLargeIcon(mN.largeIcon);
                }

                String templateClass = mN.extras.getString(EXTRA_TEMPLATE);
                if (!TextUtils.isEmpty(templateClass)) {
                    final Class<? extends Style> styleClass
                            = getNotificationStyleClass(templateClass);
                    if (styleClass == null) {
                        Log.d(TAG, "Unknown style class: " + templateClass);
                    } else {
                        try {
                            final Constructor<? extends Style> ctor =
                                    styleClass.getDeclaredConstructor();
                            ctor.setAccessible(true);
                            final Style style = ctor.newInstance();
                            style.restoreFromExtras(mN.extras);

                            if (style != null) {
                                setStyle(style);
                            }
                        } catch (Throwable t) {
                            Log.e(TAG, "Could not create Style", t);
                        }
                    }
                }

            }
!!!2211639.java!!!	getColorUtil() : NotificationColorUtil
            if (!mColorUtilInited) {
                mColorUtilInited = true;
                if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.LOLLIPOP) {
                    mColorUtil = NotificationColorUtil.getInstance(mContext);
                }
            }
            return mColorUtil;
!!!2211767.java!!!	setWhen(in when : long) : Notification::Builder
            mN.when = when;
            return this;
!!!2211895.java!!!	setShowWhen(inout show : boolean) : Notification::Builder
            mN.extras.putBoolean(EXTRA_SHOW_WHEN, show);
            return this;
!!!2212023.java!!!	setUsesChronometer(inout b : boolean) : Notification::Builder
            mN.extras.putBoolean(EXTRA_SHOW_CHRONOMETER, b);
            return this;
!!!2212151.java!!!	setChronometerCountDown(inout countDown : boolean) : Notification::Builder
            mN.extras.putBoolean(EXTRA_CHRONOMETER_COUNT_DOWN, countDown);
            return this;
!!!2212279.java!!!	setSmallIcon(in icon : int) : Notification::Builder
            return setSmallIcon(icon != 0
                    ? Icon.createWithResource(mContext, icon)
                    : null);
!!!2212407.java!!!	setSmallIcon(in icon : int, in level : int) : Notification::Builder
            mN.iconLevel = level;
            return setSmallIcon(icon);
!!!2212535.java!!!	setSmallIcon(inout icon : Icon) : Notification::Builder
            mN.setSmallIcon(icon);
            if (icon != null && icon.getType() == Icon.TYPE_RESOURCE) {
                mN.icon = icon.getResId();
            }
            return this;
!!!2212663.java!!!	setContentTitle(inout title : CharSequence) : Notification::Builder
            mN.extras.putCharSequence(EXTRA_TITLE, safeCharSequence(title));
            return this;
!!!2212791.java!!!	setContentText(inout text : CharSequence) : Notification::Builder
            mN.extras.putCharSequence(EXTRA_TEXT, safeCharSequence(text));
            return this;
!!!2212919.java!!!	setSubText(inout text : CharSequence) : Notification::Builder
            mN.extras.putCharSequence(EXTRA_SUB_TEXT, safeCharSequence(text));
            return this;
!!!2213047.java!!!	setRemoteInputHistory(inout text : CharSequence) : Notification::Builder
            if (text == null) {
                mN.extras.putCharSequenceArray(EXTRA_REMOTE_INPUT_HISTORY, null);
            } else {
                final int N = Math.min(MAX_REPLY_HISTORY, text.length);
                CharSequence[] safe = new CharSequence[N];
                for (int i = 0; i < N; i++) {
                    safe[i] = safeCharSequence(text[i]);
                }
                mN.extras.putCharSequenceArray(EXTRA_REMOTE_INPUT_HISTORY, safe);
            }
            return this;
!!!2213175.java!!!	setNumber(in number : int) : Notification::Builder
            mN.number = number;
            return this;
!!!2213303.java!!!	setContentInfo(inout info : CharSequence) : Notification::Builder
            mN.extras.putCharSequence(EXTRA_INFO_TEXT, safeCharSequence(info));
            return this;
!!!2213431.java!!!	setProgress(in max : int, in progress : int, inout indeterminate : boolean) : Notification::Builder
            mN.extras.putInt(EXTRA_PROGRESS, progress);
            mN.extras.putInt(EXTRA_PROGRESS_MAX, max);
            mN.extras.putBoolean(EXTRA_PROGRESS_INDETERMINATE, indeterminate);
            return this;
!!!2213559.java!!!	setContent(inout views : RemoteViews) : Notification::Builder
            return setCustomContentView(views);
!!!2213687.java!!!	setCustomContentView(inout contentView : RemoteViews) : Notification::Builder
            mN.contentView = contentView;
            return this;
!!!2213815.java!!!	setCustomBigContentView(inout contentView : RemoteViews) : Notification::Builder
            mN.bigContentView = contentView;
            return this;
!!!2213943.java!!!	setCustomHeadsUpContentView(inout contentView : RemoteViews) : Notification::Builder
            mN.headsUpContentView = contentView;
            return this;
!!!2214071.java!!!	setContentIntent(inout intent : PendingIntent) : Notification::Builder
            mN.contentIntent = intent;
            return this;
!!!2214199.java!!!	setDeleteIntent(inout intent : PendingIntent) : Notification::Builder
            mN.deleteIntent = intent;
            return this;
!!!2214327.java!!!	setFullScreenIntent(inout intent : PendingIntent, inout highPriority : boolean) : Notification::Builder
            mN.fullScreenIntent = intent;
            setFlag(FLAG_HIGH_PRIORITY, highPriority);
            return this;
!!!2214455.java!!!	setTicker(inout tickerText : CharSequence) : Notification::Builder
            mN.tickerText = safeCharSequence(tickerText);
            return this;
!!!2214583.java!!!	setTicker(inout tickerText : CharSequence, inout views : RemoteViews) : Notification::Builder
            setTicker(tickerText);
            // views is ignored
            return this;
!!!2214711.java!!!	setLargeIcon(inout b : Bitmap) : Notification::Builder
            return setLargeIcon(b != null ? Icon.createWithBitmap(b) : null);
!!!2214839.java!!!	setLargeIcon(inout icon : Icon) : Notification::Builder
            mN.mLargeIcon = icon;
            mN.extras.putParcelable(EXTRA_LARGE_ICON, icon);
            return this;
!!!2214967.java!!!	setSound(inout sound : Uri) : Notification::Builder
            mN.sound = sound;
            mN.audioAttributes = AUDIO_ATTRIBUTES_DEFAULT;
            return this;
!!!2215095.java!!!	setSound(inout sound : Uri, in streamType : int) : Notification::Builder
            mN.sound = sound;
            mN.audioStreamType = streamType;
            return this;
!!!2215223.java!!!	setSound(inout sound : Uri, inout audioAttributes : AudioAttributes) : Notification::Builder
            mN.sound = sound;
            mN.audioAttributes = audioAttributes;
            return this;
!!!2215351.java!!!	setVibrate(inout pattern : long) : Notification::Builder
            mN.vibrate = pattern;
            return this;
!!!2215479.java!!!	setLights(in argb : int, in onMs : int, in offMs : int) : Notification::Builder
            mN.ledARGB = argb;
            mN.ledOnMS = onMs;
            mN.ledOffMS = offMs;
            if (onMs != 0 || offMs != 0) {
                mN.flags |= FLAG_SHOW_LIGHTS;
            }
            return this;
!!!2215607.java!!!	setOngoing(inout ongoing : boolean) : Notification::Builder
            setFlag(FLAG_ONGOING_EVENT, ongoing);
            return this;
!!!2215735.java!!!	setOnlyAlertOnce(inout onlyAlertOnce : boolean) : Notification::Builder
            setFlag(FLAG_ONLY_ALERT_ONCE, onlyAlertOnce);
            return this;
!!!2215863.java!!!	setAutoCancel(inout autoCancel : boolean) : Notification::Builder
            setFlag(FLAG_AUTO_CANCEL, autoCancel);
            return this;
!!!2215991.java!!!	setLocalOnly(inout localOnly : boolean) : Notification::Builder
            setFlag(FLAG_LOCAL_ONLY, localOnly);
            return this;
!!!2216119.java!!!	setDefaults(in defaults : int) : Notification::Builder
            mN.defaults = defaults;
            return this;
!!!2216247.java!!!	setPriority(in pri : int) : Notification::Builder
            mN.priority = pri;
            return this;
!!!2216375.java!!!	setCategory(inout category : String) : Notification::Builder
            mN.category = category;
            return this;
!!!2216503.java!!!	addPerson(inout uri : String) : Notification::Builder
            mPersonList.add(uri);
            return this;
!!!2216631.java!!!	setGroup(inout groupKey : String) : Notification::Builder
            mN.mGroupKey = groupKey;
            return this;
!!!2216759.java!!!	setGroupSummary(inout isGroupSummary : boolean) : Notification::Builder
            setFlag(FLAG_GROUP_SUMMARY, isGroupSummary);
            return this;
!!!2216887.java!!!	setSortKey(inout sortKey : String) : Notification::Builder
            mN.mSortKey = sortKey;
            return this;
!!!2217015.java!!!	addExtras(inout extras : Bundle) : Notification::Builder
            if (extras != null) {
                mUserExtras.putAll(extras);
            }
            return this;
!!!2217143.java!!!	setExtras(inout extras : Bundle) : Notification::Builder
            if (extras != null) {
                mUserExtras = extras;
            }
            return this;
!!!2217271.java!!!	getExtras() : Bundle
            return mUserExtras;
!!!2217399.java!!!	getAllExtras() : Bundle
            final Bundle saveExtras = (Bundle) mUserExtras.clone();
            saveExtras.putAll(mN.extras);
            return saveExtras;
!!!2217527.java!!!	addAction(in icon : int, inout title : CharSequence, inout intent : PendingIntent) : Notification::Builder
            mActions.add(new Action(icon, safeCharSequence(title), intent));
            return this;
!!!2217655.java!!!	addAction(inout action : Notification::Action) : Notification::Builder
            mActions.add(action);
            return this;
!!!2217783.java!!!	setActions(inout  : Action...actions) : Notification::Builder
            mActions.clear();
            for (int i = 0; i < actions.length; i++) {
                mActions.add(actions[i]);
            }
            return this;
!!!2217911.java!!!	setStyle(inout style : Notification::Style) : Notification::Builder
            if (mStyle != style) {
                mStyle = style;
                if (mStyle != null) {
                    mStyle.setBuilder(this);
                    mN.extras.putString(EXTRA_TEMPLATE, style.getClass().getName());
                }  else {
                    mN.extras.remove(EXTRA_TEMPLATE);
                }
            }
            return this;
!!!2218039.java!!!	setVisibility(in visibility : int) : Notification::Builder
            mN.visibility = visibility;
            return this;
!!!2218167.java!!!	setPublicVersion(inout n : Notification) : Notification::Builder
            if (n != null) {
                mN.publicVersion = new Notification();
                n.cloneInto(mN.publicVersion, /*heavy=*/ true);
            } else {
                mN.publicVersion = null;
            }
            return this;
!!!2218295.java!!!	extend(inout extender : Notification::Extender) : Notification::Builder
            extender.extend(this);
            return this;
!!!2218423.java!!!	setFlag(in mask : int, inout value : boolean) : Notification::Builder
            if (value) {
                mN.flags |= mask;
            } else {
                mN.flags &= ~mask;
            }
            return this;
!!!2218551.java!!!	setColor(in argb : int) : Notification::Builder
            mN.color = argb;
            sanitizeColor();
            return this;
!!!2218679.java!!!	getProfileBadgeDrawable() : Drawable
            if (mContext.getUserId() == UserHandle.USER_SYSTEM) {
                // This user can never be a badged profile,
                // and also includes USER_ALL system notifications.
                return null;
            }
            // Note: This assumes that the current user can read the profile badge of the
            // originating user.
            return mContext.getPackageManager().getUserBadgeForDensityNoBackground(
                    new UserHandle(mContext.getUserId()), 0);
!!!2218807.java!!!	getProfileBadge() : Bitmap
            Drawable badge = getProfileBadgeDrawable();
            if (badge == null) {
                return null;
            }
            final int size = mContext.getResources().getDimensionPixelSize(
                    R.dimen.notification_badge_size);
            Bitmap bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
            Canvas canvas = new Canvas(bitmap);
            badge.setBounds(0, 0, size, size);
            badge.draw(canvas);
            return bitmap;
!!!2218935.java!!!	bindProfileBadge(inout contentView : RemoteViews) : void
            Bitmap profileBadge = getProfileBadge();

            if (profileBadge != null) {
                contentView.setImageViewBitmap(R.id.profile_badge, profileBadge);
                contentView.setViewVisibility(R.id.profile_badge, View.VISIBLE);
            }
!!!2219063.java!!!	resetStandardTemplate(inout contentView : RemoteViews) : void
            resetNotificationHeader(contentView);
            resetContentMargins(contentView);
            contentView.setViewVisibility(R.id.right_icon, View.GONE);
            contentView.setViewVisibility(R.id.title, View.GONE);
            contentView.setTextViewText(R.id.title, null);
            contentView.setViewVisibility(R.id.text, View.GONE);
            contentView.setTextViewText(R.id.text, null);
            contentView.setViewVisibility(R.id.text_line_1, View.GONE);
            contentView.setTextViewText(R.id.text_line_1, null);
            contentView.setViewVisibility(R.id.progress, View.GONE);
!!!2219191.java!!!	resetNotificationHeader(inout contentView : RemoteViews) : void
            contentView.setImageViewResource(R.id.icon, 0);
            contentView.setBoolean(R.id.notification_header, "setExpanded", false);
            contentView.setTextViewText(R.id.app_name_text, null);
            contentView.setViewVisibility(R.id.chronometer, View.GONE);
            contentView.setViewVisibility(R.id.header_text, View.GONE);
            contentView.setTextViewText(R.id.header_text, null);
            contentView.setViewVisibility(R.id.header_text_divider, View.GONE);
            contentView.setViewVisibility(R.id.time_divider, View.GONE);
            contentView.setViewVisibility(R.id.time, View.GONE);
            contentView.setImageViewIcon(R.id.profile_badge, null);
            contentView.setViewVisibility(R.id.profile_badge, View.GONE);
!!!2219319.java!!!	resetContentMargins(inout contentView : RemoteViews) : void
            contentView.setViewLayoutMarginEndDimen(R.id.line1, 0);
            contentView.setViewLayoutMarginEndDimen(R.id.text, 0);
!!!2219447.java!!!	applyStandardTemplate(in resId : int) : RemoteViews
            return applyStandardTemplate(resId, true /* hasProgress */);
!!!2219575.java!!!	applyStandardTemplate(in resId : int, inout hasProgress : boolean) : RemoteViews
            final Bundle ex = mN.extras;

            CharSequence title = processLegacyText(ex.getCharSequence(EXTRA_TITLE));
            CharSequence text = processLegacyText(ex.getCharSequence(EXTRA_TEXT));
            return applyStandardTemplate(resId, hasProgress, title, text);
!!!2219703.java!!!	applyStandardTemplate(in resId : int, inout hasProgress : boolean, inout title : CharSequence, inout text : CharSequence) : RemoteViews
            RemoteViews contentView = new BuilderRemoteViews(mContext.getApplicationInfo(), resId);

            resetStandardTemplate(contentView);

            final Bundle ex = mN.extras;

            bindNotificationHeader(contentView);
            bindLargeIcon(contentView);
            boolean showProgress = handleProgressBar(hasProgress, contentView, ex);
            if (title != null) {
                contentView.setViewVisibility(R.id.title, View.VISIBLE);
                contentView.setTextViewText(R.id.title, title);
                contentView.setViewLayoutWidth(R.id.title, showProgress
                        ? ViewGroup.LayoutParams.WRAP_CONTENT
                        : ViewGroup.LayoutParams.MATCH_PARENT);
            }
            if (text != null) {
                int textId = showProgress ? com.android.internal.R.id.text_line_1
                        : com.android.internal.R.id.text;
                contentView.setTextViewText(textId, text);
                contentView.setViewVisibility(textId, View.VISIBLE);
            }

            setContentMinHeight(contentView, showProgress || mN.hasLargeIcon());

            return contentView;
!!!2219831.java!!!	setContentMinHeight(inout remoteView : RemoteViews, inout hasMinHeight : boolean) : void
            int minHeight = 0;
            if (hasMinHeight) {
                // we need to set the minHeight of the notification
                minHeight = mContext.getResources().getDimensionPixelSize(
                        com.android.internal.R.dimen.notification_min_content_height);
            }
            remoteView.setInt(R.id.notification_main_column, "setMinimumHeight", minHeight);
!!!2219959.java!!!	handleProgressBar(inout hasProgress : boolean, inout contentView : RemoteViews, inout ex : Bundle) : boolean
            final int max = ex.getInt(EXTRA_PROGRESS_MAX, 0);
            final int progress = ex.getInt(EXTRA_PROGRESS, 0);
            final boolean ind = ex.getBoolean(EXTRA_PROGRESS_INDETERMINATE);
            if (hasProgress && (max != 0 || ind)) {
                contentView.setViewVisibility(com.android.internal.R.id.progress, View.VISIBLE);
                contentView.setProgressBar(
                        R.id.progress, max, progress, ind);
                contentView.setProgressBackgroundTintList(
                        R.id.progress, ColorStateList.valueOf(mContext.getColor(
                                R.color.notification_progress_background_color)));
                if (mN.color != COLOR_DEFAULT) {
                    ColorStateList colorStateList = ColorStateList.valueOf(resolveContrastColor());
                    contentView.setProgressTintList(R.id.progress, colorStateList);
                    contentView.setProgressIndeterminateTintList(R.id.progress, colorStateList);
                }
                return true;
            } else {
                contentView.setViewVisibility(R.id.progress, View.GONE);
                return false;
            }
!!!2220087.java!!!	bindLargeIcon(inout contentView : RemoteViews) : void
            if (mN.mLargeIcon == null && mN.largeIcon != null) {
                mN.mLargeIcon = Icon.createWithBitmap(mN.largeIcon);
            }
            if (mN.mLargeIcon != null) {
                contentView.setViewVisibility(R.id.right_icon, View.VISIBLE);
                contentView.setImageViewIcon(R.id.right_icon, mN.mLargeIcon);
                processLargeLegacyIcon(mN.mLargeIcon, contentView);
                int endMargin = R.dimen.notification_content_picture_margin;
                contentView.setViewLayoutMarginEndDimen(R.id.line1, endMargin);
                contentView.setViewLayoutMarginEndDimen(R.id.text, endMargin);
                contentView.setViewLayoutMarginEndDimen(R.id.progress, endMargin);
            }
!!!2220215.java!!!	bindNotificationHeader(inout contentView : RemoteViews) : void
            bindSmallIcon(contentView);
            bindHeaderAppName(contentView);
            bindHeaderText(contentView);
            bindHeaderChronometerAndTime(contentView);
            bindExpandButton(contentView);
            bindProfileBadge(contentView);
!!!2220343.java!!!	bindExpandButton(inout contentView : RemoteViews) : void
            contentView.setDrawableParameters(R.id.expand_button, false, -1, resolveContrastColor(),
                    PorterDuff.Mode.SRC_ATOP, -1);
            contentView.setInt(R.id.notification_header, "setOriginalNotificationColor",
                    resolveContrastColor());
!!!2220471.java!!!	bindHeaderChronometerAndTime(inout contentView : RemoteViews) : void
            if (showsTimeOrChronometer()) {
                contentView.setViewVisibility(R.id.time_divider, View.VISIBLE);
                if (mN.extras.getBoolean(EXTRA_SHOW_CHRONOMETER)) {
                    contentView.setViewVisibility(R.id.chronometer, View.VISIBLE);
                    contentView.setLong(R.id.chronometer, "setBase",
                            mN.when + (SystemClock.elapsedRealtime() - System.currentTimeMillis()));
                    contentView.setBoolean(R.id.chronometer, "setStarted", true);
                    boolean countsDown = mN.extras.getBoolean(EXTRA_CHRONOMETER_COUNT_DOWN);
                    contentView.setChronometerCountDown(R.id.chronometer, countsDown);
                } else {
                    contentView.setViewVisibility(R.id.time, View.VISIBLE);
                    contentView.setLong(R.id.time, "setTime", mN.when);
                }
            } else {
                // We still want a time to be set but gone, such that we can show and hide it
                // on demand in case it's a child notification without anything in the header
                contentView.setLong(R.id.time, "setTime", mN.when != 0 ? mN.when : mN.creationTime);
            }
!!!2220599.java!!!	bindHeaderText(inout contentView : RemoteViews) : void
            CharSequence headerText = mN.extras.getCharSequence(EXTRA_SUB_TEXT);
            if (headerText == null && mStyle != null && mStyle.mSummaryTextSet
                    && mStyle.hasSummaryInHeader()) {
                headerText = mStyle.mSummaryText;
            }
            if (headerText == null
                    && mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.N
                    && mN.extras.getCharSequence(EXTRA_INFO_TEXT) != null) {
                headerText = mN.extras.getCharSequence(EXTRA_INFO_TEXT);
            }
            if (headerText != null) {
                // TODO: Remove the span entirely to only have the string with propper formating.
                contentView.setTextViewText(R.id.header_text, processLegacyText(headerText));
                contentView.setViewVisibility(R.id.header_text, View.VISIBLE);
                contentView.setViewVisibility(R.id.header_text_divider, View.VISIBLE);
            }
!!!2220727.java!!!	loadHeaderAppName() : String
            CharSequence name = null;
            final PackageManager pm = mContext.getPackageManager();
            if (mN.extras.containsKey(EXTRA_SUBSTITUTE_APP_NAME)) {
                // only system packages which lump together a bunch of unrelated stuff
                // may substitute a different name to make the purpose of the
                // notification more clear. the correct package label should always
                // be accessible via SystemUI.
                final String pkg = mContext.getPackageName();
                final String subName = mN.extras.getString(EXTRA_SUBSTITUTE_APP_NAME);
                if (PackageManager.PERMISSION_GRANTED == pm.checkPermission(
                        android.Manifest.permission.SUBSTITUTE_NOTIFICATION_APP_NAME, pkg)) {
                    name = subName;
                } else {
                    Log.w(TAG, "warning: pkg "
                            + pkg + " attempting to substitute app name '" + subName
                            + "' without holding perm "
                            + android.Manifest.permission.SUBSTITUTE_NOTIFICATION_APP_NAME);
                }
            }
            if (TextUtils.isEmpty(name)) {
                name = pm.getApplicationLabel(mContext.getApplicationInfo());
            }
            if (TextUtils.isEmpty(name)) {
                // still nothing?
                return null;
            }

            return String.valueOf(name);
!!!2220855.java!!!	bindHeaderAppName(inout contentView : RemoteViews) : void
            contentView.setTextViewText(R.id.app_name_text, loadHeaderAppName());
            contentView.setTextColor(R.id.app_name_text, resolveContrastColor());
!!!2220983.java!!!	bindSmallIcon(inout contentView : RemoteViews) : void
            if (mN.mSmallIcon == null && mN.icon != 0) {
                mN.mSmallIcon = Icon.createWithResource(mContext, mN.icon);
            }
            contentView.setImageViewIcon(R.id.icon, mN.mSmallIcon);
            processSmallIconColor(mN.mSmallIcon, contentView);
!!!2221111.java!!!	showsTimeOrChronometer() : boolean
            return mN.showsTime() || mN.showsChronometer();
!!!2221239.java!!!	resetStandardTemplateWithActions(inout big : RemoteViews) : void
            // actions_container is only reset when there are no actions to avoid focus issues with
            // remote inputs.
            big.setViewVisibility(R.id.actions, View.GONE);
            big.removeAllViews(R.id.actions);

            big.setViewVisibility(R.id.notification_material_reply_container, View.GONE);
            big.setTextViewText(R.id.notification_material_reply_text_1, null);

            big.setViewVisibility(R.id.notification_material_reply_text_2, View.GONE);
            big.setTextViewText(R.id.notification_material_reply_text_2, null);
            big.setViewVisibility(R.id.notification_material_reply_text_3, View.GONE);
            big.setTextViewText(R.id.notification_material_reply_text_3, null);

            big.setViewLayoutMarginBottomDimen(R.id.notification_action_list_margin_target, 0);
!!!2221367.java!!!	applyStandardTemplateWithActions(in layoutId : int) : RemoteViews
            final Bundle ex = mN.extras;

            CharSequence title = processLegacyText(ex.getCharSequence(EXTRA_TITLE));
            CharSequence text = processLegacyText(ex.getCharSequence(EXTRA_TEXT));
            return applyStandardTemplateWithActions(layoutId, true /* hasProgress */, title, text);
!!!2221495.java!!!	applyStandardTemplateWithActions(in layoutId : int, inout hasProgress : boolean, inout title : CharSequence, inout text : CharSequence) : RemoteViews
            RemoteViews big = applyStandardTemplate(layoutId, hasProgress, title, text);

            resetStandardTemplateWithActions(big);

            boolean validRemoteInput = false;

            int N = mActions.size();
            if (N > 0) {
                big.setViewVisibility(R.id.actions_container, View.VISIBLE);
                big.setViewVisibility(R.id.actions, View.VISIBLE);
                big.setViewLayoutMarginBottomDimen(R.id.notification_action_list_margin_target,
                        R.dimen.notification_action_list_height);
                if (N>MAX_ACTION_BUTTONS) N=MAX_ACTION_BUTTONS;
                for (int i=0; i<N; i++) {
                    Action action = mActions.get(i);
                    validRemoteInput |= hasValidRemoteInput(action);

                    final RemoteViews button = generateActionButton(action);
                    big.addView(R.id.actions, button);
                }
            } else {
                big.setViewVisibility(R.id.actions_container, View.GONE);
            }

            CharSequence[] replyText = mN.extras.getCharSequenceArray(EXTRA_REMOTE_INPUT_HISTORY);
            if (validRemoteInput && replyText != null
                    && replyText.length > 0 && !TextUtils.isEmpty(replyText[0])) {
                big.setViewVisibility(R.id.notification_material_reply_container, View.VISIBLE);
                big.setTextViewText(R.id.notification_material_reply_text_1, replyText[0]);

                if (replyText.length > 1 && !TextUtils.isEmpty(replyText[1])) {
                    big.setViewVisibility(R.id.notification_material_reply_text_2, View.VISIBLE);
                    big.setTextViewText(R.id.notification_material_reply_text_2, replyText[1]);

                    if (replyText.length > 2 && !TextUtils.isEmpty(replyText[2])) {
                        big.setViewVisibility(
                                R.id.notification_material_reply_text_3, View.VISIBLE);
                        big.setTextViewText(R.id.notification_material_reply_text_3, replyText[2]);
                    }
                }
            }

            return big;
!!!2221623.java!!!	hasValidRemoteInput(inout action : Notification::Action) : boolean
            if (TextUtils.isEmpty(action.title) || action.actionIntent == null) {
                // Weird actions
                return false;
            }

            RemoteInput[] remoteInputs = action.getRemoteInputs();
            if (remoteInputs == null) {
                return false;
            }

            for (RemoteInput r : remoteInputs) {
                CharSequence[] choices = r.getChoices();
                if (r.getAllowFreeFormInput() || (choices != null && choices.length != 0)) {
                    return true;
                }
            }
            return false;
!!!2221751.java!!!	createContentView() : RemoteViews
            if (mN.contentView != null && (mStyle == null || !mStyle.displayCustomViewInline())) {
                return mN.contentView;
            } else if (mStyle != null) {
                final RemoteViews styleView = mStyle.makeContentView();
                if (styleView != null) {
                    return styleView;
                }
            }
            return applyStandardTemplate(getBaseLayoutResource());
!!!2221879.java!!!	createBigContentView() : RemoteViews
            RemoteViews result = null;
            if (mN.bigContentView != null
                    && (mStyle == null || !mStyle.displayCustomViewInline())) {
                return mN.bigContentView;
            } else if (mStyle != null) {
                result = mStyle.makeBigContentView();
                hideLine1Text(result);
            } else if (mActions.size() != 0) {
                result = applyStandardTemplateWithActions(getBigBaseLayoutResource());
            }
            adaptNotificationHeaderForBigContentView(result);
            return result;
!!!2222007.java!!!	makeNotificationHeader() : RemoteViews
            RemoteViews header = new BuilderRemoteViews(mContext.getApplicationInfo(),
                    R.layout.notification_template_header);
            resetNotificationHeader(header);
            bindNotificationHeader(header);
            return header;
!!!2222135.java!!!	hideLine1Text(inout result : RemoteViews) : void
            if (result != null) {
                result.setViewVisibility(R.id.text_line_1, View.GONE);
            }
!!!2222263.java!!!	adaptNotificationHeaderForBigContentView(inout result : RemoteViews) : void
            if (result != null) {
                result.setBoolean(R.id.notification_header, "setExpanded", true);
            }
!!!2222391.java!!!	createHeadsUpContentView() : RemoteViews
            if (mN.headsUpContentView != null
                    && (mStyle == null ||  !mStyle.displayCustomViewInline())) {
                return mN.headsUpContentView;
            } else if (mStyle != null) {
                    final RemoteViews styleView = mStyle.makeHeadsUpContentView();
                    if (styleView != null) {
                        return styleView;
                    }
            } else if (mActions.size() == 0) {
                return null;
            }

            return applyStandardTemplateWithActions(getBigBaseLayoutResource());
!!!2222519.java!!!	makePublicContentView() : RemoteViews
            if (mN.publicVersion != null) {
                final Builder builder = recoverBuilder(mContext, mN.publicVersion);
                return builder.createContentView();
            }
            Bundle savedBundle = mN.extras;
            Style style = mStyle;
            mStyle = null;
            Icon largeIcon = mN.mLargeIcon;
            mN.mLargeIcon = null;
            Bitmap largeIconLegacy = mN.largeIcon;
            mN.largeIcon = null;
            Bundle publicExtras = new Bundle();
            publicExtras.putBoolean(EXTRA_SHOW_WHEN,
                    savedBundle.getBoolean(EXTRA_SHOW_WHEN));
            publicExtras.putBoolean(EXTRA_SHOW_CHRONOMETER,
                    savedBundle.getBoolean(EXTRA_SHOW_CHRONOMETER));
            publicExtras.putBoolean(EXTRA_CHRONOMETER_COUNT_DOWN,
                    savedBundle.getBoolean(EXTRA_CHRONOMETER_COUNT_DOWN));
            publicExtras.putCharSequence(EXTRA_TITLE,
                    mContext.getString(R.string.notification_hidden_text));
            mN.extras = publicExtras;
            final RemoteViews publicView = applyStandardTemplate(getBaseLayoutResource());
            mN.extras = savedBundle;
            mN.mLargeIcon = largeIcon;
            mN.largeIcon = largeIconLegacy;
            mStyle = style;
            return publicView;
!!!2222647.java!!!	generateActionButton(inout action : Notification::Action) : RemoteViews
            final boolean tombstone = (action.actionIntent == null);
            RemoteViews button = new BuilderRemoteViews(mContext.getApplicationInfo(),
                    tombstone ? getActionTombstoneLayoutResource()
                              : getActionLayoutResource());
            final Icon ai = action.getIcon();
            button.setTextViewText(R.id.action0, processLegacyText(action.title));
            if (!tombstone) {
                button.setOnClickPendingIntent(R.id.action0, action.actionIntent);
            }
            button.setContentDescription(R.id.action0, action.title);
            if (action.mRemoteInputs != null) {
                button.setRemoteInputs(R.id.action0, action.mRemoteInputs);
            }
            if (mN.color != COLOR_DEFAULT) {
                button.setTextColor(R.id.action0, resolveContrastColor());
            }
            return button;
!!!2222775.java!!!	isLegacy() : boolean
            return getColorUtil() != null;
!!!2222903.java!!!	processLegacyText(inout charSequence : CharSequence) : CharSequence
            if (isLegacy()) {
                return getColorUtil().invertCharSequenceColors(charSequence);
            } else {
                return charSequence;
            }
!!!2223031.java!!!	processSmallIconColor(inout smallIcon : Icon, inout contentView : RemoteViews) : void
            boolean colorable = !isLegacy() || getColorUtil().isGrayscaleIcon(mContext, smallIcon);
            if (colorable) {
                contentView.setDrawableParameters(R.id.icon, false, -1, resolveContrastColor(),
                        PorterDuff.Mode.SRC_ATOP, -1);

            }
            contentView.setInt(R.id.notification_header, "setOriginalIconColor",
                    colorable ? resolveContrastColor() : NotificationHeaderView.NO_COLOR);
!!!2223159.java!!!	processLargeLegacyIcon(inout largeIcon : Icon, inout contentView : RemoteViews) : void
            if (largeIcon != null && isLegacy()
                    && getColorUtil().isGrayscaleIcon(mContext, largeIcon)) {
                // resolve color will fall back to the default when legacy
                contentView.setDrawableParameters(R.id.icon, false, -1, resolveContrastColor(),
                        PorterDuff.Mode.SRC_ATOP, -1);
            }
!!!2223287.java!!!	sanitizeColor() : void
            if (mN.color != COLOR_DEFAULT) {
                mN.color |= 0xFF000000; // no alpha for custom colors
            }
!!!2223415.java!!!	resolveContrastColor() : int
            if (mCachedContrastColorIsFor == mN.color && mCachedContrastColor != COLOR_INVALID) {
                return mCachedContrastColor;
            }
            final int contrasted = NotificationColorUtil.resolveContrastColor(mContext, mN.color);

            mCachedContrastColorIsFor = mN.color;
            return mCachedContrastColor = contrasted;
!!!2223543.java!!!	buildUnstyled() : Notification
            if (mActions.size() > 0) {
                mN.actions = new Action[mActions.size()];
                mActions.toArray(mN.actions);
            }
            if (!mPersonList.isEmpty()) {
                mN.extras.putStringArray(EXTRA_PEOPLE,
                        mPersonList.toArray(new String[mPersonList.size()]));
            }
            if (mN.bigContentView != null || mN.contentView != null
                    || mN.headsUpContentView != null) {
                mN.extras.putBoolean(EXTRA_CONTAINS_CUSTOM_VIEW, true);
            }
            return mN;
!!!2223671.java!!!	recoverBuilder(inout context : Context, inout n : Notification) : Notification::Builder
            // Re-create notification context so we can access app resources.
            ApplicationInfo applicationInfo = n.extras.getParcelable(
                    EXTRA_BUILDER_APPLICATION_INFO);
            Context builderContext;
            if (applicationInfo != null) {
                try {
                    builderContext = context.createApplicationContext(applicationInfo,
                            Context.CONTEXT_RESTRICTED);
                } catch (NameNotFoundException e) {
                    Log.e(TAG, "ApplicationInfo " + applicationInfo + " not found");
                    builderContext = context;  // try with our context
                }
            } else {
                builderContext = context; // try with given context
            }

            return new Builder(builderContext, n);
!!!2223799.java!!!	getNotificationStyleClass(inout templateClass : String) : Class
            Class<? extends Style>[] classes = new Class[] {
                    BigTextStyle.class, BigPictureStyle.class, InboxStyle.class, MediaStyle.class,
                    DecoratedCustomViewStyle.class, DecoratedMediaCustomViewStyle.class,
                    MessagingStyle.class };
            for (Class<? extends Style> innerClass : classes) {
                if (templateClass.equals(innerClass.getName())) {
                    return innerClass;
                }
            }
            return null;
!!!2223927.java!!!	getNotification() : Notification
            return build();
!!!2224055.java!!!	build() : Notification
            // first, add any extras from the calling code
            if (mUserExtras != null) {
                mN.extras = getAllExtras();
            }

            mN.creationTime = System.currentTimeMillis();

            // lazy stuff from mContext; see comment in Builder(Context, Notification)
            Notification.addFieldsFromContext(mContext, mN);

            buildUnstyled();

            if (mStyle != null) {
                mStyle.buildStyled(mN);
            }

            if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.N
                    && (mStyle == null || !mStyle.displayCustomViewInline())) {
                if (mN.contentView == null) {
                    mN.contentView = createContentView();
                    mN.extras.putInt(EXTRA_REBUILD_CONTENT_VIEW_ACTION_COUNT,
                            mN.contentView.getSequenceNumber());
                }
                if (mN.bigContentView == null) {
                    mN.bigContentView = createBigContentView();
                    if (mN.bigContentView != null) {
                        mN.extras.putInt(EXTRA_REBUILD_BIG_CONTENT_VIEW_ACTION_COUNT,
                                mN.bigContentView.getSequenceNumber());
                    }
                }
                if (mN.headsUpContentView == null) {
                    mN.headsUpContentView = createHeadsUpContentView();
                    if (mN.headsUpContentView != null) {
                        mN.extras.putInt(EXTRA_REBUILD_HEADS_UP_CONTENT_VIEW_ACTION_COUNT,
                                mN.headsUpContentView.getSequenceNumber());
                    }
                }
            }

            if ((mN.defaults & DEFAULT_LIGHTS) != 0) {
                mN.flags |= FLAG_SHOW_LIGHTS;
            }

            return mN;
!!!2224183.java!!!	buildInto(inout n : Notification) : Notification
            build().cloneInto(n, true);
            return n;
!!!2224311.java!!!	maybeCloneStrippedForDelivery(inout n : Notification) : Notification
            String templateClass = n.extras.getString(EXTRA_TEMPLATE);

            // Only strip views for known Styles because we won't know how to
            // re-create them otherwise.
            if (!TextUtils.isEmpty(templateClass)
                    && getNotificationStyleClass(templateClass) == null) {
                return n;
            }

            // Only strip unmodified BuilderRemoteViews.
            boolean stripContentView = n.contentView instanceof BuilderRemoteViews &&
                    n.extras.getInt(EXTRA_REBUILD_CONTENT_VIEW_ACTION_COUNT, -1) ==
                            n.contentView.getSequenceNumber();
            boolean stripBigContentView = n.bigContentView instanceof BuilderRemoteViews &&
                    n.extras.getInt(EXTRA_REBUILD_BIG_CONTENT_VIEW_ACTION_COUNT, -1) ==
                            n.bigContentView.getSequenceNumber();
            boolean stripHeadsUpContentView = n.headsUpContentView instanceof BuilderRemoteViews &&
                    n.extras.getInt(EXTRA_REBUILD_HEADS_UP_CONTENT_VIEW_ACTION_COUNT, -1) ==
                            n.headsUpContentView.getSequenceNumber();

            // Nothing to do here, no need to clone.
            if (!stripContentView && !stripBigContentView && !stripHeadsUpContentView) {
                return n;
            }

            Notification clone = n.clone();
            if (stripContentView) {
                clone.contentView = null;
                clone.extras.remove(EXTRA_REBUILD_CONTENT_VIEW_ACTION_COUNT);
            }
            if (stripBigContentView) {
                clone.bigContentView = null;
                clone.extras.remove(EXTRA_REBUILD_BIG_CONTENT_VIEW_ACTION_COUNT);
            }
            if (stripHeadsUpContentView) {
                clone.headsUpContentView = null;
                clone.extras.remove(EXTRA_REBUILD_HEADS_UP_CONTENT_VIEW_ACTION_COUNT);
            }
            return clone;
!!!2224439.java!!!	getBaseLayoutResource() : int
            return R.layout.notification_template_material_base;
!!!2224567.java!!!	getBigBaseLayoutResource() : int
            return R.layout.notification_template_material_big_base;
!!!2224695.java!!!	getBigPictureLayoutResource() : int
            return R.layout.notification_template_material_big_picture;
!!!2224823.java!!!	getBigTextLayoutResource() : int
            return R.layout.notification_template_material_big_text;
!!!2224951.java!!!	getInboxLayoutResource() : int
            return R.layout.notification_template_material_inbox;
!!!2225079.java!!!	getMessagingLayoutResource() : int
            return R.layout.notification_template_material_messaging;
!!!2225207.java!!!	getActionLayoutResource() : int
            return R.layout.notification_material_action;
!!!2225335.java!!!	getActionTombstoneLayoutResource() : int
            return R.layout.notification_material_action_tombstone;
