class LockSettingsStorage
!!!41514423.java!!!	LockSettingsStorage(inout context : Context, inout callback : LockSettingsStorage::Callback)
        mContext = context;
        mOpenHelper = new DatabaseHelper(context, callback);
        mStoredCredentialType = new SparseArray<Integer>();
!!!41514551.java!!!	writeKeyValue(inout key : String, inout value : String, in userId : int) : void
        writeKeyValue(mOpenHelper.getWritableDatabase(), key, value, userId);
!!!41514679.java!!!	writeKeyValue(inout db : SQLiteDatabase, inout key : String, inout value : String, in userId : int) : void
        ContentValues cv = new ContentValues();
        cv.put(COLUMN_KEY, key);
        cv.put(COLUMN_USERID, userId);
        cv.put(COLUMN_VALUE, value);

        db.beginTransaction();
        try {
            db.delete(TABLE, COLUMN_KEY + "=? AND " + COLUMN_USERID + "=?",
                    new String[] {key, Integer.toString(userId)});
            db.insert(TABLE, null, cv);
            db.setTransactionSuccessful();
            mCache.putKeyValue(key, value, userId);
        } finally {
            db.endTransaction();
        }

!!!41514807.java!!!	readKeyValue(inout key : String, inout defaultValue : String, in userId : int) : String
        int version;
        synchronized (mCache) {
            if (mCache.hasKeyValue(key, userId)) {
                return mCache.peekKeyValue(key, defaultValue, userId);
            }
            version = mCache.getVersion();
        }

        Cursor cursor;
        Object result = DEFAULT;
        SQLiteDatabase db = mOpenHelper.getReadableDatabase();
        if ((cursor = db.query(TABLE, COLUMNS_FOR_QUERY,
                COLUMN_USERID + "=? AND " + COLUMN_KEY + "=?",
                new String[] { Integer.toString(userId), key },
                null, null, null)) != null) {
            if (cursor.moveToFirst()) {
                result = cursor.getString(0);
            }
            cursor.close();
        }
        mCache.putKeyValueIfUnchanged(key, result, userId, version);
        return result == DEFAULT ? defaultValue : (String) result;
!!!41514935.java!!!	prefetchUser(in userId : int) : void
        int version;
        synchronized (mCache) {
            if (mCache.isFetched(userId)) {
                return;
            }
            mCache.setFetched(userId);
            version = mCache.getVersion();
        }

        Cursor cursor;
        SQLiteDatabase db = mOpenHelper.getReadableDatabase();
        if ((cursor = db.query(TABLE, COLUMNS_FOR_PREFETCH,
                COLUMN_USERID + "=?",
                new String[] { Integer.toString(userId) },
                null, null, null)) != null) {
            while (cursor.moveToNext()) {
                String key = cursor.getString(0);
                String value = cursor.getString(1);
                mCache.putKeyValueIfUnchanged(key, value, userId, version);
            }
            cursor.close();
        }

        // Populate cache by reading the password and pattern files.
        readPasswordHash(userId);
        readPatternHash(userId);
!!!41515063.java!!!	getStoredCredentialType(in userId : int) : int
        final Integer cachedStoredCredentialType = mStoredCredentialType.get(userId);
        if (cachedStoredCredentialType != null) {
            return cachedStoredCredentialType.intValue();
        }

        int storedCredentialType;
        CredentialHash pattern = readPatternHash(userId);
        if (pattern == null) {
            if (readPasswordHash(userId) != null) {
                storedCredentialType = CredentialHash.TYPE_PASSWORD;
            } else {
                storedCredentialType = CredentialHash.TYPE_NONE;
            }
        } else {
            CredentialHash password = readPasswordHash(userId);
            if (password != null) {
                // Both will never be GateKeeper
                if (password.version == CredentialHash.VERSION_GATEKEEPER) {
                    storedCredentialType = CredentialHash.TYPE_PASSWORD;
                } else {
                    storedCredentialType = CredentialHash.TYPE_PATTERN;
                }
            } else {
                storedCredentialType = CredentialHash.TYPE_PATTERN;
            }
        }
        mStoredCredentialType.put(userId, storedCredentialType);
        return storedCredentialType;
!!!41515191.java!!!	readPasswordHash(in userId : int) : LockSettingsStorage::CredentialHash
        byte[] stored = readFile(getLockPasswordFilename(userId));
        if (stored != null && stored.length > 0) {
            return new CredentialHash(stored, CredentialHash.VERSION_GATEKEEPER);
        }

        stored = readFile(getLegacyLockPasswordFilename(userId));
        if (stored != null && stored.length > 0) {
            return new CredentialHash(stored, CredentialHash.VERSION_LEGACY);
        }

        return null;
!!!41515319.java!!!	readPatternHash(in userId : int) : LockSettingsStorage::CredentialHash
        byte[] stored = readFile(getLockPatternFilename(userId));
        if (stored != null && stored.length > 0) {
            return new CredentialHash(stored, CredentialHash.VERSION_GATEKEEPER);
        }

        stored = readFile(getBaseZeroLockPatternFilename(userId));
        if (stored != null && stored.length > 0) {
            return new CredentialHash(stored, true);
        }

        stored = readFile(getLegacyLockPatternFilename(userId));
        if (stored != null && stored.length > 0) {
            return new CredentialHash(stored, CredentialHash.VERSION_LEGACY);
        }

        return null;
!!!41515447.java!!!	removeChildProfileLock(in userId : int) : void
        if (DEBUG)
            Slog.e(TAG, "Remove child profile lock for user: " + userId);
        try {
            deleteFile(getChildProfileLockFile(userId));
        } catch (Exception e) {
            e.printStackTrace();
        }
!!!41515575.java!!!	writeChildProfileLock(in userId : int, inout lock : byte) : void
        writeFile(getChildProfileLockFile(userId), lock);
!!!41515703.java!!!	readChildProfileLock(in userId : int) : byte
        return readFile(getChildProfileLockFile(userId));
!!!41515831.java!!!	hasChildProfileLock(in userId : int) : boolean
        return hasFile(getChildProfileLockFile(userId));
!!!41515959.java!!!	hasPassword(in userId : int) : boolean
        return hasFile(getLockPasswordFilename(userId)) ||
            hasFile(getLegacyLockPasswordFilename(userId));
!!!41516087.java!!!	hasPattern(in userId : int) : boolean
        return hasFile(getLockPatternFilename(userId)) ||
            hasFile(getBaseZeroLockPatternFilename(userId)) ||
            hasFile(getLegacyLockPatternFilename(userId));
!!!41516215.java!!!	hasFile(inout name : String) : boolean
        byte[] contents = readFile(name);
        return contents != null && contents.length > 0;
!!!41516343.java!!!	readFile(inout name : String) : byte
        int version;
        synchronized (mCache) {
            if (mCache.hasFile(name)) {
                return mCache.peekFile(name);
            }
            version = mCache.getVersion();
        }

        RandomAccessFile raf = null;
        byte[] stored = null;
        try {
            raf = new RandomAccessFile(name, "r");
            stored = new byte[(int) raf.length()];
            raf.readFully(stored, 0, stored.length);
            raf.close();
        } catch (IOException e) {
            Slog.e(TAG, "Cannot read file " + e);
        } finally {
            if (raf != null) {
                try {
                    raf.close();
                } catch (IOException e) {
                    Slog.e(TAG, "Error closing file " + e);
                }
            }
        }
        mCache.putFileIfUnchanged(name, stored, version);
        return stored;
!!!41516471.java!!!	writeFile(inout name : String, inout hash : byte) : void
        synchronized (mFileWriteLock) {
            RandomAccessFile raf = null;
            try {
                // Write the hash to file
                raf = new RandomAccessFile(name, "rw");
                // Truncate the file if pattern is null, to clear the lock
                if (hash == null || hash.length == 0) {
                    raf.setLength(0);
                } else {
                    raf.write(hash, 0, hash.length);
                }
                raf.close();
            } catch (IOException e) {
                Slog.e(TAG, "Error writing to file " + e);
            } finally {
                if (raf != null) {
                    try {
                        raf.close();
                    } catch (IOException e) {
                        Slog.e(TAG, "Error closing file " + e);
                    }
                }
            }
            mCache.putFile(name, hash);
        }
!!!41516599.java!!!	deleteFile(inout name : String) : void
        if (DEBUG) Slog.e(TAG, "Delete file " + name);
        synchronized (mFileWriteLock) {
            File file = new File(name);
            if (file.exists()) {
                file.delete();
                mCache.putFile(name, null);
            }
        }
!!!41516727.java!!!	writePatternHash(inout hash : byte, in userId : int) : void
        mStoredCredentialType.put(userId, hash == null ? CredentialHash.TYPE_NONE
                : CredentialHash.TYPE_PATTERN);
        writeFile(getLockPatternFilename(userId), hash);
        clearPasswordHash(userId);
!!!41516855.java!!!	clearPatternHash(in userId : int) : void
        writeFile(getLockPatternFilename(userId), null);
!!!41516983.java!!!	writePasswordHash(inout hash : byte, in userId : int) : void
        mStoredCredentialType.put(userId, hash == null ? CredentialHash.TYPE_NONE
                : CredentialHash.TYPE_PASSWORD);
        writeFile(getLockPasswordFilename(userId), hash);
        clearPatternHash(userId);
!!!41517111.java!!!	clearPasswordHash(in userId : int) : void
        writeFile(getLockPasswordFilename(userId), null);
!!!41517239.java!!!	getLockPatternFilename(in userId : int) : String
        return getLockCredentialFilePathForUser(userId, LOCK_PATTERN_FILE);
!!!41517367.java!!!	getLockPasswordFilename(in userId : int) : String
        return getLockCredentialFilePathForUser(userId, LOCK_PASSWORD_FILE);
!!!41517495.java!!!	getLegacyLockPatternFilename(in userId : int) : String
        return getLockCredentialFilePathForUser(userId, LEGACY_LOCK_PATTERN_FILE);
!!!41517623.java!!!	getLegacyLockPasswordFilename(in userId : int) : String
        return getLockCredentialFilePathForUser(userId, LEGACY_LOCK_PASSWORD_FILE);
!!!41517751.java!!!	getBaseZeroLockPatternFilename(in userId : int) : String
        return getLockCredentialFilePathForUser(userId, BASE_ZERO_LOCK_PATTERN_FILE);
!!!41517879.java!!!	getChildProfileLockFile(in userId : int) : String
        return getLockCredentialFilePathForUser(userId, CHILD_PROFILE_LOCK_FILE);
!!!41518007.java!!!	getLockCredentialFilePathForUser(in userId : int, inout basename : String) : String
        String dataSystemDirectory =
                android.os.Environment.getDataDirectory().getAbsolutePath() +
                        SYSTEM_DIRECTORY;
        if (userId == 0) {
            // Leave it in the same place for user 0
            return dataSystemDirectory + basename;
        } else {
            return new File(Environment.getUserSystemDirectory(userId), basename).getAbsolutePath();
        }
!!!41518135.java!!!	removeUser(in userId : int) : void
        SQLiteDatabase db = mOpenHelper.getWritableDatabase();

        final UserManager um = (UserManager) mContext.getSystemService(USER_SERVICE);
        final UserInfo parentInfo = um.getProfileParent(userId);

        if (parentInfo == null) {
            // This user owns its lock settings files - safe to delete them
            synchronized (mFileWriteLock) {
                String name = getLockPasswordFilename(userId);
                File file = new File(name);
                if (file.exists()) {
                    file.delete();
                    mCache.putFile(name, null);
                }
                name = getLockPatternFilename(userId);
                file = new File(name);
                if (file.exists()) {
                    file.delete();
                    mCache.putFile(name, null);
                }
            }
        } else {
            // Manged profile
            removeChildProfileLock(userId);
        }

        try {
            db.beginTransaction();
            db.delete(TABLE, COLUMN_USERID + "='" + userId + "'", null);
            db.setTransactionSuccessful();
            mCache.removeUser(userId);
        } finally {
            db.endTransaction();
        }
!!!41518263.java!!!	closeDatabase() : void
        mOpenHelper.close();
!!!41518391.java!!!	clearCache() : void
        mCache.clear();
