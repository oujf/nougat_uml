class PinnerService
!!!41591863.java!!!	PinnerService(inout context : Context)
        super(context);

        mContext = context;

!!!41591991.java!!!	onStart() : void
        Slog.e(TAG, "Starting PinnerService");

        mBinderService = new BinderService();
        publishBinderService("pinner", mBinderService);

        // Files to pin come from the overlay and can be specified per-device config
        // Continue trying to pin remaining files even if there is a failure
        String[] filesToPin = mContext.getResources().getStringArray(com.android.internal.R.array.config_defaultPinnerServiceFiles);
        for (int i = 0; i < filesToPin.length; i++){
            boolean success = pinFile(filesToPin[i], 0, 0);
            if (success == true) {
                mPinnedFiles.add(filesToPin[i]);
                Slog.i(TAG, "Pinned file = " + filesToPin[i]);
            } else {
                Slog.e(TAG, "Failed to pin file = " + filesToPin[i]);
            }
        }
!!!41592119.java!!!	pinFile(inout fileToPin : String, in offset : long, in length : long) : boolean
        FileDescriptor fd = new FileDescriptor();
        try {
            fd = Os.open(fileToPin, OsConstants.O_RDONLY | OsConstants.O_CLOEXEC | OsConstants.O_NOFOLLOW, OsConstants.O_RDONLY);

            StructStat sb = Os.fstat(fd);

            if (offset + length > sb.st_size) {
                Os.close(fd);
                return false;
            }

            if (length == 0) {
                length = sb.st_size - offset;
            }

            long address = Os.mmap(0, length, OsConstants.PROT_READ, OsConstants.MAP_PRIVATE, fd, offset);
            Os.close(fd);

            Os.mlock(address, length);

            return true;
        } catch (ErrnoException e) {
            Slog.e(TAG, "Failed to pin file " + fileToPin + " with error " + e.getMessage());
            if(fd.valid()) {
                try { Os.close(fd); }
                catch (ErrnoException eClose) {Slog.e(TAG, "Failed to close fd, error = " + eClose.getMessage());}
            }
            return false;
        }
