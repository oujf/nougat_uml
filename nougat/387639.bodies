class MediaSession
!!!28650551.java!!!	MediaSession(inout context : Context, inout tag : String)
        this(context, tag, UserHandle.myUserId());
!!!28650679.java!!!	MediaSession(inout context : Context, inout tag : String, in userId : int)
        if (context == null) {
            throw new IllegalArgumentException("context cannot be null.");
        }
        if (TextUtils.isEmpty(tag)) {
            throw new IllegalArgumentException("tag cannot be null or empty");
        }
        mMaxBitmapSize = context.getResources().getDimensionPixelSize(
                com.android.internal.R.dimen.config_mediaMetadataBitmapMaxSize);
        mCbStub = new CallbackStub(this);
        MediaSessionManager manager = (MediaSessionManager) context
                .getSystemService(Context.MEDIA_SESSION_SERVICE);
        try {
            mBinder = manager.createSession(mCbStub, tag, userId);
            mSessionToken = new Token(mBinder.getController());
            mController = new MediaController(context, mSessionToken);
        } catch (RemoteException e) {
            throw new RuntimeException("Remote error creating session.", e);
        }
!!!28650807.java!!!	setCallback(inout callback : MediaSession::Callback) : void
        setCallback(callback, null);
!!!28650935.java!!!	setCallback(inout callback : MediaSession::Callback, inout handler : Handler) : void
        synchronized (mLock) {
            if (callback == null) {
                if (mCallback != null) {
                    mCallback.mCallback.mSession = null;
                }
                mCallback = null;
                return;
            }
            if (mCallback != null) {
                // We're updating the callback, clear the session from the old
                // one.
                mCallback.mCallback.mSession = null;
            }
            if (handler == null) {
                handler = new Handler();
            }
            callback.mSession = this;
            CallbackMessageHandler msgHandler = new CallbackMessageHandler(handler.getLooper(),
                    callback);
            mCallback = msgHandler;
        }
!!!28651063.java!!!	setSessionActivity(inout pi : PendingIntent) : void
        try {
            mBinder.setLaunchPendingIntent(pi);
        } catch (RemoteException e) {
            Log.wtf(TAG, "Failure in setLaunchPendingIntent.", e);
        }
!!!28651191.java!!!	setMediaButtonReceiver(inout mbr : PendingIntent) : void
        try {
            mBinder.setMediaButtonReceiver(mbr);
        } catch (RemoteException e) {
            Log.wtf(TAG, "Failure in setMediaButtonReceiver.", e);
        }
!!!28651319.java!!!	setFlags(in flags : int) : void
        try {
            mBinder.setFlags(flags);
        } catch (RemoteException e) {
            Log.wtf(TAG, "Failure in setFlags.", e);
        }
!!!28651447.java!!!	setPlaybackToLocal(inout attributes : AudioAttributes) : void
        if (attributes == null) {
            throw new IllegalArgumentException("Attributes cannot be null for local playback.");
        }
        try {
            mBinder.setPlaybackToLocal(attributes);
        } catch (RemoteException e) {
            Log.wtf(TAG, "Failure in setPlaybackToLocal.", e);
        }
!!!28651575.java!!!	setPlaybackToRemote(inout volumeProvider : VolumeProvider) : void
        if (volumeProvider == null) {
            throw new IllegalArgumentException("volumeProvider may not be null!");
        }
        synchronized (mLock) {
            mVolumeProvider = volumeProvider;
        }
        volumeProvider.setCallback(new VolumeProvider.Callback() {
            @Override
            public void onVolumeChanged(VolumeProvider volumeProvider) {
                notifyRemoteVolumeChanged(volumeProvider);
            }
        });

        try {
            mBinder.setPlaybackToRemote(volumeProvider.getVolumeControl(),
                    volumeProvider.getMaxVolume());
            mBinder.setCurrentVolume(volumeProvider.getCurrentVolume());
        } catch (RemoteException e) {
            Log.wtf(TAG, "Failure in setPlaybackToRemote.", e);
        }
!!!28651703.java!!!	setActive(inout active : boolean) : void
        if (mActive == active) {
            return;
        }
        try {
            mBinder.setActive(active);
            mActive = active;
        } catch (RemoteException e) {
            Log.wtf(TAG, "Failure in setActive.", e);
        }
!!!28651831.java!!!	isActive() : boolean
        return mActive;
!!!28651959.java!!!	sendSessionEvent(inout event : String, inout extras : Bundle) : void
        if (TextUtils.isEmpty(event)) {
            throw new IllegalArgumentException("event cannot be null or empty");
        }
        try {
            mBinder.sendEvent(event, extras);
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error sending event", e);
        }
!!!28652087.java!!!	release() : void
        try {
            mBinder.destroy();
        } catch (RemoteException e) {
            Log.wtf(TAG, "Error releasing session: ", e);
        }
!!!28652215.java!!!	getSessionToken() : MediaSession::Token
        return mSessionToken;
!!!28652343.java!!!	getController() : MediaController
        return mController;
!!!28652471.java!!!	setPlaybackState(inout state : PlaybackState) : void
        mPlaybackState = state;
        try {
            mBinder.setPlaybackState(state);
        } catch (RemoteException e) {
            Log.wtf(TAG, "Dead object in setPlaybackState.", e);
        }
!!!28652599.java!!!	setMetadata(inout metadata : MediaMetadata) : void
        if (metadata != null ) {
            metadata = (new MediaMetadata.Builder(metadata, mMaxBitmapSize)).build();
        }
        try {
            mBinder.setMetadata(metadata);
        } catch (RemoteException e) {
            Log.wtf(TAG, "Dead object in setPlaybackState.", e);
        }
!!!28652727.java!!!	setQueue(inout queue : List<QueueItem>) : void
        try {
            mBinder.setQueue(queue == null ? null : new ParceledListSlice<QueueItem>(queue));
        } catch (RemoteException e) {
            Log.wtf("Dead object in setQueue.", e);
        }
!!!28652855.java!!!	setQueueTitle(inout title : CharSequence) : void
        try {
            mBinder.setQueueTitle(title);
        } catch (RemoteException e) {
            Log.wtf("Dead object in setQueueTitle.", e);
        }
!!!28652983.java!!!	setRatingType(in type : int) : void
        try {
            mBinder.setRatingType(type);
        } catch (RemoteException e) {
            Log.e(TAG, "Error in setRatingType.", e);
        }
!!!28653111.java!!!	setExtras(inout extras : Bundle) : void
        try {
            mBinder.setExtras(extras);
        } catch (RemoteException e) {
            Log.wtf("Dead object in setExtras.", e);
        }
!!!28653239.java!!!	notifyRemoteVolumeChanged(inout provider : VolumeProvider) : void
        synchronized (mLock) {
            if (provider == null || provider != mVolumeProvider) {
                Log.w(TAG, "Received update from stale volume provider");
                return;
            }
        }
        try {
            mBinder.setCurrentVolume(provider.getCurrentVolume());
        } catch (RemoteException e) {
            Log.e(TAG, "Error in notifyVolumeChanged", e);
        }
!!!28653367.java!!!	getCallingPackage() : String
        try {
            return mBinder.getCallingPackage();
        } catch (RemoteException e) {
            Log.wtf(TAG, "Dead object in getCallingPackage.", e);
        }
        return null;
!!!28653495.java!!!	dispatchPrepare() : void
        postToCallback(CallbackMessageHandler.MSG_PREPARE);
!!!28653623.java!!!	dispatchPrepareFromMediaId(inout mediaId : String, inout extras : Bundle) : void
        postToCallback(CallbackMessageHandler.MSG_PREPARE_MEDIA_ID, mediaId, extras);
!!!28653751.java!!!	dispatchPrepareFromSearch(inout query : String, inout extras : Bundle) : void
        postToCallback(CallbackMessageHandler.MSG_PREPARE_SEARCH, query, extras);
!!!28653879.java!!!	dispatchPrepareFromUri(inout uri : Uri, inout extras : Bundle) : void
        postToCallback(CallbackMessageHandler.MSG_PREPARE_URI, uri, extras);
!!!28654007.java!!!	dispatchPlay() : void
        postToCallback(CallbackMessageHandler.MSG_PLAY);
!!!28654135.java!!!	dispatchPlayFromMediaId(inout mediaId : String, inout extras : Bundle) : void
        postToCallback(CallbackMessageHandler.MSG_PLAY_MEDIA_ID, mediaId, extras);
!!!28654263.java!!!	dispatchPlayFromSearch(inout query : String, inout extras : Bundle) : void
        postToCallback(CallbackMessageHandler.MSG_PLAY_SEARCH, query, extras);
!!!28654391.java!!!	dispatchPlayFromUri(inout uri : Uri, inout extras : Bundle) : void
        postToCallback(CallbackMessageHandler.MSG_PLAY_URI, uri, extras);
!!!28654519.java!!!	dispatchSkipToItem(in id : long) : void
        postToCallback(CallbackMessageHandler.MSG_SKIP_TO_ITEM, id);
!!!28654647.java!!!	dispatchPause() : void
        postToCallback(CallbackMessageHandler.MSG_PAUSE);
!!!28654775.java!!!	dispatchStop() : void
        postToCallback(CallbackMessageHandler.MSG_STOP);
!!!28654903.java!!!	dispatchNext() : void
        postToCallback(CallbackMessageHandler.MSG_NEXT);
!!!28655031.java!!!	dispatchPrevious() : void
        postToCallback(CallbackMessageHandler.MSG_PREVIOUS);
!!!28655159.java!!!	dispatchFastForward() : void
        postToCallback(CallbackMessageHandler.MSG_FAST_FORWARD);
!!!28655287.java!!!	dispatchRewind() : void
        postToCallback(CallbackMessageHandler.MSG_REWIND);
!!!28655415.java!!!	dispatchSeekTo(in pos : long) : void
        postToCallback(CallbackMessageHandler.MSG_SEEK_TO, pos);
!!!28655543.java!!!	dispatchRate(inout rating : Rating) : void
        postToCallback(CallbackMessageHandler.MSG_RATE, rating);
!!!28655671.java!!!	dispatchCustomAction(inout action : String, inout args : Bundle) : void
        postToCallback(CallbackMessageHandler.MSG_CUSTOM_ACTION, action, args);
!!!28655799.java!!!	dispatchMediaButton(inout mediaButtonIntent : Intent) : void
        postToCallback(CallbackMessageHandler.MSG_MEDIA_BUTTON, mediaButtonIntent);
!!!28655927.java!!!	dispatchAdjustVolume(in direction : int) : void
        postToCallback(CallbackMessageHandler.MSG_ADJUST_VOLUME, direction);
!!!28656055.java!!!	dispatchSetVolumeTo(in volume : int) : void
        postToCallback(CallbackMessageHandler.MSG_SET_VOLUME, volume);
!!!28656183.java!!!	postToCallback(in what : int) : void
        postToCallback(what, null);
!!!28656311.java!!!	postCommand(inout command : String, inout args : Bundle, inout resultCb : ResultReceiver) : void
        Command cmd = new Command(command, args, resultCb);
        postToCallback(CallbackMessageHandler.MSG_COMMAND, cmd);
!!!28656439.java!!!	postToCallback(in what : int, inout obj : Object) : void
        postToCallback(what, obj, null);
!!!28656567.java!!!	postToCallback(in what : int, inout obj : Object, inout extras : Bundle) : void
        synchronized (mLock) {
            if (mCallback != null) {
                mCallback.post(what, obj, extras);
            }
        }
!!!28656695.java!!!	isActiveState(in state : int) : boolean
        switch (state) {
            case PlaybackState.STATE_FAST_FORWARDING:
            case PlaybackState.STATE_REWINDING:
            case PlaybackState.STATE_SKIPPING_TO_PREVIOUS:
            case PlaybackState.STATE_SKIPPING_TO_NEXT:
            case PlaybackState.STATE_BUFFERING:
            case PlaybackState.STATE_CONNECTING:
            case PlaybackState.STATE_PLAYING:
                return true;
        }
        return false;
