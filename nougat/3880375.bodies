class TokenLruCache
!!!41681847.java!!!	TokenLruCache()
            super(MAX_CACHE_CHARS);
!!!41681975.java!!!	sizeOf(inout k : TokenCache::Key, inout v : TokenCache::Value) : int
            return v.token.length();
!!!41682103.java!!!	entryRemoved(inout evicted : boolean, inout k : TokenCache::Key, inout oldVal : TokenCache::Value, inout newVal : TokenCache::Value) : void
            // When a token has been removed, clean up the associated Evictor.
            if (oldVal != null && newVal == null) {
                /*
                 * This is recursive, but it won't spiral out of control because LruCache is
                 * thread safe and the Evictor can only be removed once.
                 */
                Evictor evictor = mTokenEvictors.remove(oldVal.token);
                if (evictor != null) {
                    evictor.evict();
                }
            }
!!!41682231.java!!!	putToken(inout k : TokenCache::Key, inout v : TokenCache::Value) : void
            // Prepare for removal by token string.
            Evictor tokenEvictor = mTokenEvictors.get(v.token);
            if (tokenEvictor == null) {
                tokenEvictor = new Evictor();
            }
            tokenEvictor.add(k);
            mTokenEvictors.put(new Pair<>(k.account.type, v.token), tokenEvictor);

            // Prepare for removal by associated account.
            Evictor accountEvictor = mAccountEvictors.get(k.account);
            if (accountEvictor == null) {
                accountEvictor = new Evictor();
            }
            accountEvictor.add(k);
            mAccountEvictors.put(k.account, tokenEvictor);

            // Only cache the token once we can remove it directly or by account.
            put(k, v);
!!!41682359.java!!!	evict(inout accountType : String, inout token : String) : void
            Evictor evictor = mTokenEvictors.get(new Pair<>(accountType, token));
            if (evictor != null) {
                evictor.evict();
            }
            
!!!41682487.java!!!	evict(inout account : Account) : void
            Evictor evictor = mAccountEvictors.get(account);
            if (evictor != null) {
                evictor.evict();
            }
