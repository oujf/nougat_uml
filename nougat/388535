format 76
"test" // nougat_src::frameworks::av::media::libstagefright::codecs::avc::enc::test
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/media/libstagefright/codecs/avc/enc/test/"
  cpp_src_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/media/libstagefright/codecs/avc/enc/test/"
  classview 338359 "test"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 3604791 "anonymous195"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Constants."
      attribute 11248695 "kMaxWidth"
	public type class_ref 3604791 // anonymous195
	init_value " 720"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11248823 "kMaxHeight"
	public type class_ref 3604791 // anonymous195
	init_value " 480"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11248951 "kMaxFrameRate"
	public type class_ref 3604791 // anonymous195
	init_value " 30"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11249079 "kMaxBitrate"
	public type class_ref 3604791 // anonymous195
	init_value " 2048"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11249207 "kInputBufferSize"
	public type class_ref 3604791 // anonymous195
	init_value " (kMaxWidth * kMaxHeight * 3) / 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11249335 "kOutputBufferSize"
	public type class_ref 3604791 // anonymous195
	init_value " kInputBufferSize"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11249463 "kMaxDpbBuffers"
	public type class_ref 3604791 // anonymous195
	init_value " 17"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11249591 "kIDRFrameRefreshIntervalInSec"
	public type class_ref 3604791 // anonymous195
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end
  end

  deploymentview 294455 "test"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1549367 "anonymous195"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3604791 // anonymous195
      end
    end

    artifact 1549495 "main"
      stereotype "source"
      cpp_src "int main(int argc, char *argv[]) {

    if (argc < 7) {
        fprintf(stderr, \"Usage %s <input yuv> <output file> <width> <height>\"
                        \" <frame rate> <bitrate in kbps>\\n\", argv[0]);
        fprintf(stderr, \"Max width %d\\n\", kMaxWidth);
        fprintf(stderr, \"Max height %d\\n\", kMaxHeight);
        fprintf(stderr, \"Max framerate %d\\n\", kMaxFrameRate);
        fprintf(stderr, \"Max bitrate %d kbps\\n\", kMaxBitrate);
        return EXIT_FAILURE;
    }

    // Read height and width.
    int32_t width;
    int32_t height;
    width = atoi(argv[3]);
    height = atoi(argv[4]);
    if (width > kMaxWidth || height > kMaxHeight || width <= 0 || height <= 0) {
        fprintf(stderr, \"Unsupported dimensions %dx%d\\n\", width, height);
        return EXIT_FAILURE;
    }

    if (width % 16 != 0 || height % 16 != 0) {
        fprintf(stderr, \"Video frame size %dx%d must be a multiple of 16\\n\",
            width, height);
        return EXIT_FAILURE;
    }

    // Read frame rate.
    int32_t frameRate;
    frameRate = atoi(argv[5]);
    if (frameRate > kMaxFrameRate || frameRate <= 0) {
        fprintf(stderr, \"Unsupported frame rate %d\\n\", frameRate);
        return EXIT_FAILURE;
    }

    // Read bit rate.
    int32_t bitrate;
    bitrate = atoi(argv[6]);
    if (bitrate > kMaxBitrate || bitrate <= 0) {
        fprintf(stderr, \"Unsupported bitrate %d\\n\", bitrate);
        return EXIT_FAILURE;
    }
    bitrate *= 1024; // kbps to bps.

    // Open the input file.
    FILE *fpInput = fopen(argv[1], \"rb\");
    if (!fpInput) {
        fprintf(stderr, \"Could not open %s\\n\", argv[1]);
        return EXIT_FAILURE;
    }

    // Open the output file.
    FILE *fpOutput = fopen(argv[2], \"wb\");
    if (!fpOutput) {
        fprintf(stderr, \"Could not open %s\\n\", argv[2]);
        fclose(fpInput);
        return EXIT_FAILURE;
    }

    // Allocate input buffer.
    uint8_t *inputBuf = (uint8_t *)malloc(kInputBufferSize);
    assert(inputBuf != NULL);

    // Allocate output buffer.
    uint8_t *outputBuf = (uint8_t *)malloc(kOutputBufferSize);
    assert(outputBuf != NULL);

    // Allocate dpb buffers.
    uint8_t * dpbBuffers[kMaxDpbBuffers];
    for (int i = 0; i < kMaxDpbBuffers; ++i) {
        dpbBuffers[i] = (uint8_t *)malloc(kInputBufferSize);
        assert(dpbBuffers[i] != NULL);
    }

    // Initialize the encoder parameters.
    tagAVCEncParam encParams;
    memset(&encParams, 0, sizeof(tagAVCEncParam));
    encParams.rate_control = AVC_ON;
    encParams.initQP = 0;
    encParams.init_CBP_removal_delay = 1600;

    encParams.intramb_refresh = 0;
    encParams.auto_scd = AVC_ON;
    encParams.out_of_band_param_set = AVC_ON;
    encParams.poc_type = 2;
    encParams.log2_max_poc_lsb_minus_4 = 12;
    encParams.delta_poc_zero_flag = 0;
    encParams.offset_poc_non_ref = 0;
    encParams.offset_top_bottom = 0;
    encParams.num_ref_in_cycle = 0;
    encParams.offset_poc_ref = NULL;

    encParams.num_ref_frame = 1;
    encParams.num_slice_group = 1;
    encParams.fmo_type = 0;

    encParams.db_filter = AVC_ON;
    encParams.disable_db_idc = 0;

    encParams.alpha_offset = 0;
    encParams.beta_offset = 0;
    encParams.constrained_intra_pred = AVC_OFF;

    encParams.data_par = AVC_OFF;
    encParams.fullsearch = AVC_OFF;
    encParams.search_range = 16;
    encParams.sub_pel = AVC_OFF;
    encParams.submb_pred = AVC_OFF;
    encParams.rdopt_mode = AVC_OFF;
    encParams.bidir_pred = AVC_OFF;

    encParams.use_overrun_buffer = AVC_OFF;

    encParams.width = width;
    encParams.height = height;
    encParams.bitrate = bitrate;
    encParams.frame_rate = 1000 * frameRate;  // In frames/ms.
    encParams.CPB_size = (uint32_t) (bitrate >> 1);

    int32_t  IDRFrameRefreshIntervalInSec = kIDRFrameRefreshIntervalInSec;
    if (IDRFrameRefreshIntervalInSec == 0) {
        encParams.idr_period = 1;  // All I frames.
    } else {
        encParams.idr_period = (IDRFrameRefreshIntervalInSec * frameRate);
    }

    int32_t nMacroBlocks = ((((width + 15) >> 4) << 4) *
            (((height + 15) >> 4) << 4)) >> 8;
    uint32_t *sliceGroup = (uint32_t *) malloc(sizeof(uint32_t) * nMacroBlocks);
    assert(sliceGroup != NULL);
    for (int i = 0, idx = 0; i < nMacroBlocks; ++i) {
        sliceGroup[i] = idx++;
        if (idx >= encParams.num_slice_group) {
            idx = 0;
        }
    }
    encParams.slice_group = sliceGroup;
    encParams.profile = AVC_BASELINE;
    encParams.level = AVC_LEVEL2;

    // Initialize the handle.
    tagAVCHandle handle;
    memset(&handle, 0, sizeof(tagAVCHandle));
    handle.AVCObject = NULL;
    handle.userData = dpbBuffers;
    handle.CBAVC_DPBAlloc = DpbAllocCb;
    handle.CBAVC_FrameBind = BindFrameCb;
    handle.CBAVC_FrameUnbind = UnbindFrameCb;
    handle.CBAVC_Malloc = MallocCb;
    handle.CBAVC_Free = FreeCb;

    // Initialize the encoder.
    AVCEnc_Status status;
    status = PVAVCEncInitialize(&handle, &encParams, NULL, NULL);
    if (status != AVCENC_SUCCESS) {
        fprintf(stderr, \"Failed to initialize the encoder\\n\");

        // Release resources.
        fclose(fpInput);
        fclose(fpOutput);
        free(sliceGroup);
        free(inputBuf);
        free(outputBuf);
        for (int i = 0; i < kMaxDpbBuffers; ++i) {
            free(dpbBuffers[i]);
        }
        return EXIT_FAILURE;
    }

    // Encode Sequence Parameter Set.
    uint32_t dataLength = kOutputBufferSize;
    int32_t type;
    status = PVAVCEncodeNAL(&handle, outputBuf, &dataLength, &type);
    assert(type == AVC_NALTYPE_SPS);
    fwrite(\"\\x00\\x00\\x00\\x01\", 1, 4, fpOutput); // Start Code.
    fwrite(outputBuf, 1, dataLength, fpOutput); // SPS.

    // Encode Picture Paramater Set.
    dataLength = kOutputBufferSize;
    status = PVAVCEncodeNAL(&handle, outputBuf, &dataLength, &type);
    assert(type == AVC_NALTYPE_PPS);
    fwrite(\"\\x00\\x00\\x00\\x01\", 1, 4, fpOutput); // Start Code.
    fwrite(outputBuf, 1, dataLength, fpOutput); // PPS.

    // Core loop.
    int32_t retVal = EXIT_SUCCESS;
    int32_t frameSize = (width * height * 3) / 2;
    int32_t numInputFrames = 0;
    int32_t numNalEncoded = 0;
    bool readyForNextFrame = true;

    while (1) {
        if (readyForNextFrame == true) {
            // Read the input frame.
            int32_t bytesRead;
            bytesRead = fread(inputBuf, 1, frameSize, fpInput);
            if (bytesRead != frameSize) {
                break; // End of file.
            }

            // Set the input frame.
            AVCFrameIO vin;
            memset(&vin, 0, sizeof(vin));
            vin.height = ((height + 15) >> 4) << 4;
            vin.pitch  = ((width  + 15) >> 4) << 4;
            vin.coding_timestamp = (numInputFrames * 1000) / frameRate;  // in ms
            vin.YCbCr[0] = inputBuf;
            vin.YCbCr[1] = vin.YCbCr[0] + vin.height * vin.pitch;
            vin.YCbCr[2] = vin.YCbCr[1] + ((vin.height * vin.pitch) >> 2);
            vin.disp_order = numInputFrames;

            status = PVAVCEncSetInput(&handle, &vin);
            if (status == AVCENC_SUCCESS || status == AVCENC_NEW_IDR) {
                readyForNextFrame = false;
                ++numInputFrames;
            } else if (status < AVCENC_SUCCESS) {
                fprintf(stderr, \"Error %d while setting input frame\\n\", status);
                retVal = EXIT_FAILURE;
                break;
            } else {
                fprintf(stderr, \"Frame drop\\n\");
                readyForNextFrame = true;
                ++numInputFrames;
                continue;
            }
        }

        // Encode the input frame.
        dataLength = kOutputBufferSize;
        status = PVAVCEncodeNAL(&handle, outputBuf, &dataLength, &type);
        if (status == AVCENC_SUCCESS) {
            PVAVCEncGetOverrunBuffer(&handle);
        } else if (status == AVCENC_PICTURE_READY) {
            PVAVCEncGetOverrunBuffer(&handle);
            readyForNextFrame = true;
            AVCFrameIO recon;
            if (PVAVCEncGetRecon(&handle, &recon) == AVCENC_SUCCESS) {
                PVAVCEncReleaseRecon(&handle, &recon);
            }
        } else {
            dataLength = 0;
            readyForNextFrame = true;
        }

        if (status < AVCENC_SUCCESS) {
            fprintf(stderr, \"Error %d while encoding frame\\n\", status);
            retVal = EXIT_FAILURE;
            break;
        }

        numNalEncoded++;

        // Write the output.
        if (dataLength > 0) {
            fwrite(\"\\x00\\x00\\x00\\x01\", 1, 4, fpOutput); // Start Code.
            fwrite(outputBuf, 1, dataLength, fpOutput); // NAL.
            printf(\"NAL %d of size %d written\\n\", numNalEncoded, dataLength + 4);
        }
    }

    // Close input and output file.
    fclose(fpInput);
    fclose(fpOutput);

    // Free allocated memory.
    free(sliceGroup);
    free(inputBuf);
    free(outputBuf);
    for (int i = 0; i < kMaxDpbBuffers; ++i) {
        free(dpbBuffers[i]);
    }

    // Close encoder instance.
    PVAVCCleanUpEncoder(&handle);

    return retVal;
}
"
      associated_classes
      end
    end
  end
end
