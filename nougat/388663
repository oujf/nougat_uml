format 76
"test" // nougat_src::frameworks::av::media::libstagefright::codecs::m4v_h263::enc::test
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/media/libstagefright/codecs/m4v_h263/enc/test/"
  cpp_src_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/media/libstagefright/codecs/m4v_h263/enc/test/"
  classview 338487 "test"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 3605175 "anonymous196"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Constants."
      attribute 11249719 "kMaxWidth"
	public type class_ref 3605175 // anonymous196
	init_value " 720"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11249847 "kMaxHeight"
	public type class_ref 3605175 // anonymous196
	init_value " 480"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11249975 "kMaxFrameRate"
	public type class_ref 3605175 // anonymous196
	init_value " 30"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11250103 "kMaxBitrate"
	public type class_ref 3605175 // anonymous196
	init_value " 2048"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11250231 "kOutputBufferSize"
	public type class_ref 3605175 // anonymous196
	init_value " 250 * 1024"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11250359 "kIDRFrameRefreshIntervalInSec"
	public type class_ref 3605175 // anonymous196
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end
  end

  deploymentview 294583 "test"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1549879 "anonymous196"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3605175 // anonymous196
      end
    end

    artifact 1550007 "main"
      stereotype "source"
      cpp_src "// in kbps.
// in seconds.

int main(int argc, char *argv[]) {

    if (argc < 8) {
        fprintf(stderr, \"Usage %s <input yuv> <output file> <mode> <width> \"
                        \"<height> <frame rate> <bitrate in kbps>\\n\", argv[0]);
        fprintf(stderr, \"mode : h263 or mpeg4\\n\");
        fprintf(stderr, \"Max width %d\\n\", kMaxWidth);
        fprintf(stderr, \"Max height %d\\n\", kMaxHeight);
        fprintf(stderr, \"Max framerate %d\\n\", kMaxFrameRate);
        fprintf(stderr, \"Max bitrate %d kbps\\n\", kMaxBitrate);
        return EXIT_FAILURE;
    }

    // Read mode.
    bool isH263mode;
    if (strcmp(argv[3], \"mpeg4\") == 0) {
        isH263mode = false;
    } else if (strcmp(argv[3], \"h263\") == 0) {
        isH263mode = true;
    } else {
        fprintf(stderr, \"Unsupported mode %s\\n\", argv[3]);
        return EXIT_FAILURE;
    }

    // Read height and width.
    int32_t width;
    int32_t height;
    width = atoi(argv[4]);
    height = atoi(argv[5]);
    if (width > kMaxWidth || height > kMaxHeight || width <= 0 || height <= 0) {
        fprintf(stderr, \"Unsupported dimensions %dx%d\\n\", width, height);
        return EXIT_FAILURE;
    }

    if (width % 16 != 0 || height % 16 != 0) {
        fprintf(stderr, \"Video frame size %dx%d must be a multiple of 16\\n\",
            width, height);
        return EXIT_FAILURE;
    }

    // Read frame rate.
    int32_t frameRate;
    frameRate = atoi(argv[6]);
    if (frameRate > kMaxFrameRate || frameRate <= 0) {
        fprintf(stderr, \"Unsupported frame rate %d\\n\", frameRate);
        return EXIT_FAILURE;
    }

    // Read bitrate.
    int32_t bitrate;
    bitrate = atoi(argv[7]);
    if (bitrate > kMaxBitrate || bitrate <= 0) {
        fprintf(stderr, \"Unsupported bitrate %d\\n\", bitrate);
        return EXIT_FAILURE;
    }

    // Allocate input buffer.
    uint8_t *inputBuf = (uint8_t *)malloc((width * height * 3) / 2);
    assert(inputBuf != NULL);

    // Allocate output buffer.
    uint8_t *outputBuf = (uint8_t *)malloc(kOutputBufferSize);
    assert(outputBuf != NULL);

    // Open the input file.
    FILE *fpInput = fopen(argv[1], \"rb\");
    if (fpInput == NULL) {
        fprintf(stderr, \"Could not open %s\\n\", argv[1]);
        free(inputBuf);
        free(outputBuf);
        return EXIT_FAILURE;
    }

    // Open the output file.
    FILE *fpOutput = fopen(argv[2], \"wb\");
    if (fpOutput == NULL) {
        fprintf(stderr, \"Could not open %s\\n\", argv[2]);
        free(inputBuf);
        free(outputBuf);
        fclose(fpInput);
        return EXIT_FAILURE;
    }

    // Initialize the encoder parameters.
    tagvideoEncOptions encParams;
    memset(&encParams, 0, sizeof(tagvideoEncOptions));
    if (!PVGetDefaultEncOption(&encParams, 0)) {
        fprintf(stderr, \"Failed to get default encoding parameters\\n\");
        free(inputBuf);
        free(outputBuf);
        fclose(fpInput);
        fclose(fpOutput);
        return EXIT_FAILURE;
    }

    if (isH263mode == false) {
        encParams.encMode = COMBINE_MODE_WITH_ERR_RES;
    } else {
        encParams.encMode = H263_MODE;
    }
    encParams.encWidth[0] = width;
    encParams.encHeight[0] = height;
    encParams.encFrameRate[0] = frameRate;
    encParams.rcType = VBR_1;
    encParams.vbvDelay = 5.0f;
    encParams.profile_level = CORE_PROFILE_LEVEL2;
    encParams.packetSize = 32;
    encParams.rvlcEnable = PV_OFF;
    encParams.numLayers = 1;
    encParams.timeIncRes = 1000;
    encParams.tickPerSrc = encParams.timeIncRes / frameRate;

    encParams.bitRate[0] = bitrate * 1024;
    encParams.iQuant[0] = 15;
    encParams.pQuant[0] = 12;
    encParams.quantType[0] = 0;
    encParams.noFrameSkipped = PV_OFF;

    int32_t  IDRFrameRefreshIntervalInSec = kIDRFrameRefreshIntervalInSec;
    if (IDRFrameRefreshIntervalInSec == 0) {
        encParams.intraPeriod = 1;  // All I frames.
    } else {
        encParams.intraPeriod = (IDRFrameRefreshIntervalInSec * frameRate);
    }

    encParams.numIntraMB = 0;
    encParams.sceneDetect = PV_ON;
    encParams.searchRange = 16;
    encParams.mv8x8Enable = PV_OFF;
    encParams.gobHeaderInterval = 0;
    encParams.useACPred = PV_ON;
    encParams.intraDCVlcTh = 0;

    // Initialize the handle.
    tagvideoEncControls handle;
    memset(&handle, 0, sizeof(tagvideoEncControls));

    // Initialize the encoder.
    if (!PVInitVideoEncoder(&handle, &encParams)) {
        fprintf(stderr, \"Failed to initialize the encoder\\n\");
        return EXIT_FAILURE;
    }

    // Generate the header.
    int32_t headerLength = kOutputBufferSize;
    if (!PVGetVolHeader(&handle, outputBuf, &headerLength, 0)) {
        fprintf(stderr, \"Failed to get VOL header\\n\");
        return EXIT_FAILURE;
    }
    fwrite(outputBuf, 1, headerLength, fpOutput);

    // Core loop.
    int32_t retVal = EXIT_SUCCESS;
    int32_t frameSize = (width * height * 3) / 2;
    int32_t numFramesEncoded = 0;

    while (1) {
        // Read the input frame.
        int32_t bytesRead;
        bytesRead = fread(inputBuf, 1, frameSize, fpInput);
        if (bytesRead != frameSize) {
            break; // End of file.
        }

        // Encode the input frame.
        VideoEncFrameIO vin, vout;
        memset(&vin, 0, sizeof(vin));
        memset(&vout, 0, sizeof(vout));
        vin.height = height; // height is multiple of 16.
        vin.pitch = width; // width is multiple of 16.
        vin.timestamp = (numFramesEncoded * 1000) / frameRate;  // in ms.
        vin.yChan = inputBuf;
        vin.uChan = vin.yChan + vin.height * vin.pitch;
        vin.vChan = vin.uChan + ((vin.height * vin.pitch) >> 2);

        uint32_t modTimeMs = 0;
        int32_t nLayer = 0;
        MP4HintTrack hintTrack;
        int32_t dataLength = kOutputBufferSize;
        if (!PVEncodeVideoFrame(&handle, &vin, &vout,
                &modTimeMs, outputBuf, &dataLength, &nLayer) ||
            !PVGetHintTrack(&handle, &hintTrack)) {
            fprintf(stderr, \"Failed to encode frame or get hink track at \"
                    \" frame %d\\n\", numFramesEncoded);
            retVal = EXIT_FAILURE;
            break;
        }
        PVGetOverrunBuffer(&handle);
        numFramesEncoded++;

        // Write the output.
        fwrite(outputBuf, 1, dataLength, fpOutput);
    }

    // Close input and output file.
    fclose(fpInput);
    fclose(fpOutput);

    // Free allocated memory.
    free(inputBuf);
    free(outputBuf);

    // Close encoder instance.
    PVCleanUpVideoEncoder(&handle);
    return retVal;
}
"
      associated_classes
      end
    end
  end
end
