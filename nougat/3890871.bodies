class LocalService
!!!41775415.java!!!	onWakefulnessChanged(in wakefulness : int) : void
            ActivityManagerService.this.onWakefulnessChanged(wakefulness);
!!!41775543.java!!!	startIsolatedProcess(inout entryPoint : String, inout entryPointArgs : String, inout processName : String, inout abiOverride : String, in uid : int, inout crashHandler : Runnable) : int
            return ActivityManagerService.this.startIsolatedProcess(entryPoint, entryPointArgs,
                    processName, abiOverride, uid, crashHandler);
!!!41775671.java!!!	acquireSleepToken(inout tag : String) : ActivityManagerInternal::SleepToken
            Preconditions.checkNotNull(tag);

            ComponentName requestedVrService = null;
            ComponentName callingVrActivity = null;
            int userId = -1;
            synchronized (ActivityManagerService.this) {
                if (mFocusedActivity != null) {
                    requestedVrService = mFocusedActivity.requestedVrComponent;
                    callingVrActivity = mFocusedActivity.info.getComponentName();
                    userId = mFocusedActivity.userId;
                }
            }

            if (requestedVrService != null) {
                applyVrMode(false, requestedVrService, userId, callingVrActivity, true);
            }

            synchronized (ActivityManagerService.this) {
                SleepTokenImpl token = new SleepTokenImpl(tag);
                mSleepTokens.add(token);
                updateSleepIfNeededLocked();
                return token;
            }
!!!41775799.java!!!	getHomeActivityForUser(in userId : int) : ComponentName
            synchronized (ActivityManagerService.this) {
                ActivityRecord homeActivity = mStackSupervisor.getHomeActivityForUser(userId);
                return homeActivity == null ? null : homeActivity.realActivity;
            }
!!!41775927.java!!!	onUserRemoved(in userId : int) : void
            synchronized (ActivityManagerService.this) {
                ActivityManagerService.this.onUserStoppedLocked(userId);
            }
!!!41776055.java!!!	onLocalVoiceInteractionStarted(inout activity : IBinder, inout voiceSession : IVoiceInteractionSession, inout voiceInteractor : IVoiceInteractor) : void
            synchronized (ActivityManagerService.this) {
                ActivityManagerService.this.onLocalVoiceInteractionStartedLocked(activity,
                        voiceSession, voiceInteractor);
            }
!!!41776183.java!!!	notifyStartingWindowDrawn() : void
            synchronized (ActivityManagerService.this) {
                mStackSupervisor.mActivityMetricsLogger.notifyStartingWindowDrawn();
            }
!!!41776311.java!!!	notifyAppTransitionStarting(in reason : int) : void
            synchronized (ActivityManagerService.this) {
                mStackSupervisor.mActivityMetricsLogger.notifyTransitionStarting(reason);
            }
!!!41776439.java!!!	notifyAppTransitionFinished() : void
            synchronized (ActivityManagerService.this) {
                mStackSupervisor.notifyAppTransitionDone();
            }
!!!41776567.java!!!	notifyAppTransitionCancelled() : void
            synchronized (ActivityManagerService.this) {
                mStackSupervisor.notifyAppTransitionDone();
            }
!!!41776695.java!!!	getTopVisibleActivities() : IBinder
            synchronized (ActivityManagerService.this) {
                return mStackSupervisor.getTopVisibleActivities();
            }
!!!41776823.java!!!	notifyDockedStackMinimizedChanged(inout minimized : boolean) : void
            synchronized (ActivityManagerService.this) {
                mStackSupervisor.setDockedStackMinimized(minimized);
            }
!!!41776951.java!!!	killForegroundAppsForUser(in userHandle : int) : void
            synchronized (ActivityManagerService.this) {
                final ArrayList<ProcessRecord> procs = new ArrayList<>();
                final int NP = mProcessNames.getMap().size();
                for (int ip = 0; ip < NP; ip++) {
                    final SparseArray<ProcessRecord> apps = mProcessNames.getMap().valueAt(ip);
                    final int NA = apps.size();
                    for (int ia = 0; ia < NA; ia++) {
                        final ProcessRecord app = apps.valueAt(ia);
                        if (app.persistent) {
                            // We don't kill persistent processes.
                            continue;
                        }
                        if (app.removed) {
                            procs.add(app);
                        } else if (app.userId == userHandle && app.foregroundActivities) {
                            app.removed = true;
                            procs.add(app);
                        }
                    }
                }

                final int N = procs.size();
                for (int i = 0; i < N; i++) {
                    removeProcessLocked(procs.get(i), false, true, "kill all fg");
                }
            }
!!!41777079.java!!!	setPendingIntentWhitelistDuration(inout target : IIntentSender, in duration : long) : void
            if (!(target instanceof PendingIntentRecord)) {
                Slog.w(TAG, "markAsSentFromNotification(): not a PendingIntentRecord: " + target);
                return;
            }
            ((PendingIntentRecord) target).setWhitelistDuration(duration);
