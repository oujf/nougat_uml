format 76
"nbaio" // nougat_src::frameworks::av::include::media::nbaio
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/include/media/nbaio/"
  cpp_src_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/include/media/nbaio/"
  cpp_namespace "android"
  classview 339639 "nbaio"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 3650487 "AudioBufferProviderSource"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 10123959 // <generalisation>
	relation 10123959 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10123959 // <generalisation>
	  b parent class_ref 3650615 // NBAIO_Source
      end

      operation 40383671 "AudioBufferProviderSource"
	public explicit_return_type ""
	nparams 2
	  param inout name "provider" type class_ref 3614135 // AudioBufferProvider
	  param in name "format" type class_ref 3650743 // NBAIO_Format
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 40383799 "~AudioBufferProviderSource"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 40383927 "availableToRead"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NBAIO_Port interface
virtual ssize_t negotiate(const NBAIO_Format offers[], size_t numOffers,
                          NBAIO_Format counterOffers[], size_t& numCounterOffers);
virtual NBAIO_Format format();
 NBAIO_Source interface
virtual size_t framesRead() const;
virtual size_t framesOverrun();
virtual size_t overruns();"
      end

      operation 40384055 "read"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "buffer" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40384183 "readVia"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 4
	  param in name "via" type class_ref 3650871 // readVia_t
	  param in name "total" explicit_type "size_t"
	  param inout name "user" explicit_type "void"
	  param in name "block" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 11362615 "mProvider"
	private type class_ref 3614135 // AudioBufferProvider
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 10124087 // mBuffer (<directional composition>)
	relation 10124087 *-->
	  a role_name "mBuffer" private
	    comment " current buffer"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10124087 // mBuffer (<directional composition>)
	  b parent class_ref 3614263 // Buffer
      end

      attribute 11362743 "mConsumed"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " number of frames consumed so far from current buffer"
      end
    end

    class 3650615 "NBAIO_Source"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Abstract class (interface) representing a non-blocking data source, for use by a data consumer."
      classrelation 10125495 // <generalisation>
	relation 10125495 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10125495 // <generalisation>
	  b parent class_ref 3652279 // NBAIO_Port
      end

      operation 40390839 "framesRead"
	const cpp_virtual cpp_inline public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mFramesRead; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " For the next two APIs:
 32 bits rolls over after 27 hours at 44.1 kHz; if that concerns you then poll periodically.
 Number of frames read successfully since construction."
      end

      operation 40390967 "framesOverrun"
	cpp_virtual cpp_inline public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Number of frames lost due to overrun since construction.
 Not const because implementations may need to do I/O."
      end

      operation 40391095 "overruns"
	cpp_virtual cpp_inline public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Number of overruns since construction, where a set of contiguous lost frames is one event.
 Not const because implementations may need to do I/O."
      end

      operation 40391223 "availableToRead"
	cpp_virtual cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return SSIZE_MAX; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Estimate of number of frames that could be read successfully now.
 When a read() is actually attempted, the implementation is permitted to return a smaller or
 larger transfer count, however it will make a good faith effort to give an accurate estimate.
 Errors:
  NEGOTIATE   (Re-)negotiation is needed.
  OVERRUN     One or more frames were lost due to overrun, try again to read more recent data.
  WOULD_BLOCK Determining how many frames can be read without blocking would itself block."
      end

      operation 40391351 "read"
	abstract cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "buffer" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Transfer data from source into single destination buffer.  Implies a copy.
 Inputs:
  buffer  Non-NULL destination buffer owned by consumer.
  count   Maximum number of frames to transfer.
 Return value:
  > 0     Number of frames successfully transferred prior to first error.
  = 0     Count was zero.
  < 0     status_t error occurred prior to the first frame transfer.
 Errors:
  NEGOTIATE   (Re-)negotiation is needed.
  WOULD_BLOCK No frames can be transferred without blocking.
  OVERRUN     read() has not been called frequently enough, or with enough frames to keep up.
              One or more frames were lost due to overrun, try again to read more recent data."
      end

      operation 40391479 "readVia"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 4
	  param in name "via" type class_ref 3650871 // readVia_t
	  param in name "total" explicit_type "size_t"
	  param inout name "user" explicit_type "void"
	  param in name "block" explicit_type "size_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Transfer data from source using a series of callbacks.  More suitable for zero-fill,
 synthesis, and non-contiguous transfers (e.g. circular buffer or readv).
 Inputs:
  via     Callback function that the source will call as many times as needed to provide data.
  total   Estimate of the number of frames the consumer desires.  This is an estimate,
          and it can consume a different number of frames during the series of callbacks.
  user    Arbitrary void * reserved for data consumer.
  block   Number of frames per block, that is a suggested value for 'count' in each callback.
          Zero means no preference.  This parameter is a hint only, and may be ignored.
 Return value:
  > 0     Total number of frames successfully transferred prior to first error.
  = 0     Count was zero.
  < 0     status_t error occurred prior to the first frame transfer.
 Errors:
  NEGOTIATE   (Re-)negotiation is needed.
  WOULD_BLOCK No frames can be transferred without blocking.
  OVERRUN     read() has not been called frequently enough, or with enough frames to keep up.
              One or more frames were lost due to overrun, try again to read more recent data.

 The 'via' callback is called by the data source as follows:
 Inputs:
  user    Arbitrary void * reserved for data consumer.
  dest    Non-NULL buffer owned by source that callback should consume data from,
          up to a maximum of 'count' frames.
  count   Maximum number of frames to transfer during this callback.
 Return value:
  > 0     Number of frames successfully transferred during this callback prior to first error.
  = 0     Count was zero.
  < 0     status_t error occurred prior to the first frame transfer during this callback."
      end

      operation 40391607 "onTimestamp"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "timestamp" explicit_type "ExtendedTimestamp"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoked asynchronously by corresponding sink when a new timestamp is available.
 Default implementation ignores the timestamp."
      end

      operation 40391735 "NBAIO_Source"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "format" type class_ref 3650743 // NBAIO_Format
	    defaultvalue "Format_Invalid"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : NBAIO_Port(format), mFramesRead(0)
            { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 40391863 "~NBAIO_Source"
	cpp_virtual cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      attribute 11367351 "mFramesRead"
	protected explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Implementations are free to ignore these if they don't need them"
      end
    end

    class 3650743 "NBAIO_Format"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Must (re-)negotiate format.  For negotiate() only, the offeree
 doesn't accept offers, and proposes counter-offers
 availableToRead(), read(), or readVia() detected lost input due
 to overrun; an event is counted and the caller should re-try
 availableToWrite(), write(), or writeVia() detected a gap in
 output due to underrun (not being called often enough, or with
 enough data); an event is counted and the caller should re-try
 Negotiation of format is based on the data provider and data sink, or the data consumer and
 data source, exchanging prioritized arrays of offers and counter-offers until a single offer is
 mutually agreed upon.  Each offer is an NBAIO_Format.  For simplicity and performance,
 NBAIO_Format is a typedef that ties together the most important combinations of the various
 attributes, rather than a struct with separate fields for format, sample rate, channel count,
 interleave, packing, alignment, etc.  The reason is that NBAIO_Format tries to abstract out only
 the combinations that are actually needed within AudioFlinger.  If the list of combinations grows
 too large, then this decision should be re-visited.
 Sample rate and channel count are explicit, PCM interleaved 16-bit is assumed."
      attribute 11366455 "mSampleRate"
	public explicit_type "uint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " FIXME make this a class, and change Format_... global methods to class methods
private:"
      end

      attribute 11366583 "mChannelCount"
	public explicit_type "uint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11366711 "mFormat"
	public explicit_type "audio_format_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11366839 "mFrameSize"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3650871 "readVia_t"
      visibility package stereotype "typedef" explicit_base_type "ssize_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(void *user, const void *buffer, size_t count);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 3650999 "AudioStreamInSource"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " not multi-thread safe"
      classrelation 10124215 // <generalisation>
	relation 10124215 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10124215 // <generalisation>
	  b parent class_ref 3650615 // NBAIO_Source
      end

      operation 40384311 "AudioStreamInSource"
	public explicit_return_type ""
	nparams 1
	  param inout name "stream" explicit_type "audio_stream_in"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 40384439 "~AudioStreamInSource"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 40384567 "negotiate"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 4
	  param in name "offers" type class_ref 3650743 // NBAIO_Format
	  param in name "numOffers" explicit_type "size_t"
	  param in name "counterOffers" type class_ref 3650743 // NBAIO_Format
	  param inout name "numCounterOffers" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[]${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}[]${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}[], ${t1} ${p1}, ${t2} ${p2}[], ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NBAIO_Port interface"
      end

      operation 40384695 "framesOverrun"
	cpp_virtual public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "virtual NBAIO_Format format() const;
 NBAIO_Sink interface
virtual size_t framesRead() const;"
      end

      operation 40384823 "overruns"
	cpp_virtual cpp_inline public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { (void) framesOverrun(); return mOverruns; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40384951 "availableToRead"
	cpp_virtual cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mStreamBufferSizeBytes / mFrameSize; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This is an over-estimate, and could dupe the caller into making a blocking read()
 FIXME Use an audio HAL API to query the buffer filling status when it's available."
      end

      operation 40385079 "read"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "buffer" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40385207 "stream"
	const cpp_inline public explicit_return_type "audio_stream_in"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mStream; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 11362871 "mStream"
	private explicit_type "audio_stream_in"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11362999 "mStreamBufferSizeBytes"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " as reported by get_buffer_size()"
      end

      attribute 11363127 "mFramesOverrun"
	private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11363255 "mOverruns"
	private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3651127 "AudioStreamOutSink"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " not multi-thread safe"
      classrelation 10124343 // <generalisation>
	relation 10124343 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10124343 // <generalisation>
	  b parent class_ref 3651255 // NBAIO_Sink
      end

      operation 40385335 "AudioStreamOutSink"
	public explicit_return_type ""
	nparams 1
	  param inout name "stream" explicit_type "audio_stream_out"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 40385463 "~AudioStreamOutSink"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 40385591 "negotiate"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 4
	  param in name "offers" type class_ref 3650743 // NBAIO_Format
	  param in name "numOffers" explicit_type "size_t"
	  param in name "counterOffers" type class_ref 3650743 // NBAIO_Format
	  param inout name "numCounterOffers" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[]${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}[]${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}[], ${t1} ${p1}, ${t2} ${p2}[], ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NBAIO_Port interface"
      end

      operation 40385719 "availableToWrite"
	const cpp_virtual cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mStreamBufferSizeBytes / mFrameSize; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "virtual NBAIO_Format format();
 NBAIO_Sink interface
virtual size_t framesWritten() const;
virtual size_t framesUnderrun() const;
virtual size_t underruns() const;
 This is an over-estimate, and could dupe the caller into making a blocking write()
 FIXME Use an audio HAL API to query the buffer emptying status when it's available."
      end

      operation 40385847 "write"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param in name "buffer" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40385975 "getTimestamp"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "timestamp" explicit_type "ExtendedTimestamp"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40386103 "stream"
	const cpp_inline public explicit_return_type "audio_stream_out"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mStream; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 11363383 "mStream"
	private explicit_type "audio_stream_out"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11363511 "mStreamBufferSizeBytes"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " as reported by get_buffer_size()"
      end
    end

    class 3651255 "NBAIO_Sink"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Abstract class (interface) representing a non-blocking data sink, for use by a data provider."
      classrelation 10125367 // <generalisation>
	relation 10125367 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10125367 // <generalisation>
	  b parent class_ref 3652279 // NBAIO_Port
      end

      operation 40389687 "framesWritten"
	const cpp_virtual cpp_inline public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mFramesWritten; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " For the next two APIs:
 32 bits rolls over after 27 hours at 44.1 kHz; if that concerns you then poll periodically.
 Return the number of frames written successfully since construction."
      end

      operation 40389815 "framesUnderrun"
	const cpp_virtual cpp_inline public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Number of frames lost due to underrun since construction."
      end

      operation 40389943 "underruns"
	const cpp_virtual cpp_inline public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Number of underruns since construction, where a set of contiguous lost frames is one event."
      end

      operation 40390071 "availableToWrite"
	const cpp_virtual cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return SSIZE_MAX; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Estimate of number of frames that could be written successfully now without blocking.
 When a write() is actually attempted, the implementation is permitted to return a smaller or
 larger transfer count, however it will make a good faith effort to give an accurate estimate.
 Errors:
  NEGOTIATE   (Re-)negotiation is needed.
  UNDERRUN    write() has not been called frequently enough, or with enough frames to keep up.
              An underrun event is counted, and the caller should re-try this operation.
  WOULD_BLOCK Determining how many frames can be written without blocking would itself block."
      end

      operation 40390199 "write"
	abstract cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param in name "buffer" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Transfer data to sink from single input buffer.  Implies a copy.
 Inputs:
  buffer  Non-NULL buffer owned by provider.
  count   Maximum number of frames to transfer.
 Return value:
  > 0     Number of frames successfully transferred prior to first error.
  = 0     Count was zero.
  < 0     status_t error occurred prior to the first frame transfer.
 Errors:
  NEGOTIATE   (Re-)negotiation is needed.
  WOULD_BLOCK No frames can be transferred without blocking.
  UNDERRUN    write() has not been called frequently enough, or with enough frames to keep up.
              An underrun event is counted, and the caller should re-try this operation."
      end

      operation 40390327 "writeVia"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 4
	  param in name "via" type class_ref 3652151 // writeVia_t
	  param in name "total" explicit_type "size_t"
	  param inout name "user" explicit_type "void"
	  param in name "block" explicit_type "size_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Transfer data to sink using a series of callbacks.  More suitable for zero-fill, synthesis,
 and non-contiguous transfers (e.g. circular buffer or writev).
 Inputs:
  via     Callback function that the sink will call as many times as needed to consume data.
  total   Estimate of the number of frames the provider has available.  This is an estimate,
          and it can provide a different number of frames during the series of callbacks.
  user    Arbitrary void * reserved for data provider.
  block   Number of frames per block, that is a suggested value for 'count' in each callback.
          Zero means no preference.  This parameter is a hint only, and may be ignored.
 Return value:
  > 0     Total number of frames successfully transferred prior to first error.
  = 0     Count was zero.
  < 0     status_t error occurred prior to the first frame transfer.
 Errors:
  NEGOTIATE   (Re-)negotiation is needed.
  WOULD_BLOCK No frames can be transferred without blocking.
  UNDERRUN    write() has not been called frequently enough, or with enough frames to keep up.
              An underrun event is counted, and the caller should re-try this operation.

 The 'via' callback is called by the data sink as follows:
 Inputs:
  user    Arbitrary void * reserved for data provider.
  buffer  Non-NULL buffer owned by sink that callback should fill in with data,
          up to a maximum of 'count' frames.
  count   Maximum number of frames to transfer during this callback.
 Return value:
  > 0     Number of frames successfully transferred during this callback prior to first error.
  = 0     Count was zero.
  < 0     status_t error occurred prior to the first frame transfer during this callback."
      end

      operation 40390455 "getTimestamp"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param inout name "timestamp" explicit_type "ExtendedTimestamp"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return INVALID_OPERATION; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns NO_ERROR if a timestamp is available.  The timestamp includes the total number
 of frames presented to an external observer, together with the value of CLOCK_MONOTONIC
 as of this presentation count.  The timestamp parameter is undefined if error is returned."
      end

      operation 40390583 "NBAIO_Sink"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "format" type class_ref 3650743 // NBAIO_Format
	    defaultvalue "Format_Invalid"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : NBAIO_Port(format), mFramesWritten(0)
            { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 40390711 "~NBAIO_Sink"
	cpp_virtual cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      attribute 11367223 "mFramesWritten"
	protected explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Implementations are free to ignore these if they don't need them"
      end
    end

    class 3651383 "LibsndfileSink"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Implementation of NBAIO_Sink that wraps a libsndfile opened in SFM_WRITE mode"
      classrelation 10124471 // <generalisation>
	relation 10124471 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10124471 // <generalisation>
	  b parent class_ref 3651255 // NBAIO_Sink
      end

      operation 40386231 "LibsndfileSink"
	public explicit_return_type ""
	nparams 2
	  param inout name "sndfile" explicit_type "SNDFILE"
	  param in name "sfinfo" explicit_type "SF_INFO"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 40386359 "~LibsndfileSink"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 40386487 "write"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param in name "buffer" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NBAIO_Port interface
virtual ssize_t negotiate(const NBAIO_Format offers[], size_t numOffers,
                          NBAIO_Format counterOffers[], size_t& numCounterOffers);
virtual NBAIO_Format format() const;
 NBAIO_Sink interface
virtual size_t framesWritten() const;
virtual size_t framesUnderrun() const;
virtual size_t underruns() const;
virtual ssize_t availableToWrite() const;"
      end

      attribute 11363639 "mSndfile"
	private explicit_type "SNDFILE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "virtual ssize_t writeVia(writeVia_t via, size_t total, void *user, size_t block);"
      end
    end

    class 3651511 "LibsndfileSource"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Implementation of NBAIO_Source that wraps a libsndfile opened in SFM_READ mode"
      classrelation 10124599 // <generalisation>
	relation 10124599 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10124599 // <generalisation>
	  b parent class_ref 3650615 // NBAIO_Source
      end

      operation 40386615 "LibsndfileSource"
	public explicit_return_type ""
	nparams 3
	  param inout name "sndfile" explicit_type "SNDFILE"
	  param in name "sfinfo" explicit_type "SF_INFO"
	  param in name "loop" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " If 'loop' is true and it permits seeking, then we'll act as an infinite source"
      end

      operation 40386743 "~LibsndfileSource"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 40386871 "availableToRead"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NBAIO_Port interface
virtual ssize_t negotiate(const NBAIO_Format offers[], size_t numOffers,
                          NBAIO_Format counterOffers[], size_t& numCounterOffers);
virtual NBAIO_Format format() const;
 NBAIO_Source interface
virtual size_t framesRead() const;
virtual size_t framesOverrun();
virtual size_t overruns();"
      end

      operation 40386999 "read"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "buffer" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 11363767 "mSndfile"
	private explicit_type "SNDFILE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "virtual ssize_t readVia(readVia_t via, size_t total, void *user, size_t block);"
      end

      attribute 11363895 "mEstimatedFramesUntilEOF"
	private explicit_type "sf_count_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11364023 "mLooping"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11364151 "mReadAnyFramesThisLoopCycle"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3651639 "ExtendedTimestampSingleStateQueue"
      visibility package stereotype "typedef" explicit_base_type "SingleStateQueue<ExtendedTimestamp>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 3651767 "MonoPipe"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " MonoPipe is similar to Pipe except:
  - supports only a single reader, called MonoPipeReader
  - write() cannot overrun; instead it will return a short actual count if insufficient space
  - write() can optionally block if the pipe is full
 Like Pipe, it is not multi-thread safe for either writer or reader
 but writer and reader can be different threads."
      classrelation 10124727 // <generalisation>
	relation 10124727 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10124727 // <generalisation>
	  b parent class_ref 3651255 // NBAIO_Sink
      end

      classrelation 10124855 // <dependency>
	relation 10124855 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 10124855 // <dependency>
	  b parent class_ref 3651895 // MonoPipeReader
      end

      operation 40387127 "MonoPipe"
	public explicit_return_type ""
	nparams 3
	  param in name "reqFrames" explicit_type "size_t"
	  param in name "format" type class_ref 3650743 // NBAIO_Format
	  param in name "writeCanBlock" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " reqFrames will be rounded up to a power of 2, and all slots are available. Must be >= 2.
 Note: whatever shares this object with another thread needs to do so in an SMP-safe way (like
 creating it the object before creating the other thread, or storing the object with a
 release_store). Otherwise the other thread could see a partially-constructed object."
      end

      operation 40387255 "~MonoPipe"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 40387383 "availableToWrite"
	const cpp_virtual public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NBAIO_Port interface
virtual ssize_t negotiate(const NBAIO_Format offers[], size_t numOffers,
                          NBAIO_Format counterOffers[], size_t& numCounterOffers);
virtual NBAIO_Format format() const;
 NBAIO_Sink interface
virtual int64_t framesWritten() const;
virtual int64_t framesUnderrun() const;
virtual int64_t underruns() const;"
      end

      operation 40387511 "write"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param in name "buffer" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40387639 "getAvgFrames"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mSetpoint; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "virtual ssize_t writeVia(writeVia_t via, size_t total, void *user, size_t block);
 average number of frames present in the pipe under normal conditions.
 See throttling mechanism in MonoPipe::write()"
      end

      operation 40387767 "setAvgFrames"
	public explicit_return_type "void"
	nparams 1
	  param in name "setpoint" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40387895 "maxFrames"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mMaxFrames; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40388023 "shutdown"
	public explicit_return_type "void"
	nparams 1
	  param in name "newState" explicit_type "bool"
	    defaultvalue "true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the shutdown state for the write side of a pipe.
 This may be called by an unrelated thread.  When shutdown state is 'true',
 a write that would otherwise block instead returns a short transfer count.
 There is no guarantee how long it will take for the shutdown to be recognized,
 but it will not be an unbounded amount of time.
 The state can be restored to normal by calling shutdown(false)."
      end

      operation 40388151 "isShutdown"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return true if the write side of a pipe is currently shutdown."
      end

      operation 40388279 "getTimestamp"
	public explicit_return_type "status_t"
	nparams 1
	  param inout name "timestamp" explicit_type "ExtendedTimestamp"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return NO_ERROR if there is a timestamp available"
      end

      attribute 11364279 "mReqFrames"
	const_attribute private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " as requested in constructor, unrounded"
      end

      attribute 11364407 "mMaxFrames"
	const_attribute private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " always a power of 2"
      end

      attribute 11364535 "mBuffer"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11364663 "mFront"
	volatile private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFront and mRear will never be separated by more than mMaxFrames.
 32-bit overflow is possible if the pipe is active for a long time, but if that happens it's
 safe because we \"&\" with (mMaxFrames-1) at end of computations to calculate a buffer index.
 written by reader with android_atomic_release_store,"
      end

      attribute 11364791 "mRear"
	volatile private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " read by writer with android_atomic_acquire_load
 written by writer with android_atomic_release_store,"
      end

      attribute 11364919 "mWriteTsValid"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " read by reader with android_atomic_acquire_load
 whether mWriteTs is valid"
      end

      attribute 11365047 "mWriteTs"
	private explicit_type "timespec"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " time that the previous write() completed"
      end

      attribute 11365175 "mSetpoint"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " target value for pipe fill depth"
      end

      attribute 11365303 "mWriteCanBlock"
	const_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " whether write() should block if the pipe is full"
      end

      attribute 11365431 "mIsShutdown"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " whether shutdown(true) was called, no barriers are needed"
      end

      attribute 11365559 "mTimestampShared"
	private explicit_type "ExtendedTimestampSingleStateQueue::Shared"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11365687 "mTimestampMutator"
	private explicit_type "ExtendedTimestampSingleStateQueue::Mutator"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11365815 "mTimestampObserver"
	private explicit_type "ExtendedTimestampSingleStateQueue::Observer"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3651895 "MonoPipeReader"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " MonoPipeReader is safe for only a single reader thread"
      classrelation 10124983 // <generalisation>
	relation 10124983 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10124983 // <generalisation>
	  b parent class_ref 3650615 // NBAIO_Source
      end

      operation 40388407 "MonoPipeReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "pipe" type class_ref 3651767 // MonoPipe
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Construct a MonoPipeReader and associate it with a MonoPipe;
 any data already in the pipe is visible to this PipeReader.
 There can be only a single MonoPipeReader per MonoPipe.
 FIXME make this constructor a factory method of MonoPipe."
      end

      operation 40388535 "~MonoPipeReader"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 40388663 "availableToRead"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NBAIO_Port interface
virtual ssize_t negotiate(const NBAIO_Format offers[], size_t numOffers,
                          NBAIO_Format counterOffers[], size_t& numCounterOffers);
virtual NBAIO_Format format() const;
 NBAIO_Source interface
virtual size_t framesRead() const;
virtual size_t framesOverrun();
virtual size_t overruns();"
      end

      operation 40388791 "read"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "buffer" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40388919 "onTimestamp"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "timestamp" explicit_type "ExtendedTimestamp"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40389047 "pipe"
	const cpp_inline public return_type class_ref 3651767 // MonoPipe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mPipe; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 11365943 "mPipe"
	private type class_ref 3651767 // MonoPipe
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3652151 "writeVia_t"
      visibility package stereotype "typedef" explicit_base_type "ssize_t"
      cpp_decl "${comment}typedef ${type}(* ${name})(void *user, void *buffer, size_t count);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Callbacks used by NBAIO_Sink::writeVia() and NBAIO_Source::readVia() below."
    end

    class 3652279 "NBAIO_Port"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Abstract class (interface) representing a data port."
      classrelation 10125111 // <generalisation>
	relation 10125111 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10125111 // <generalisation>
	  b parent class_ref 3652407 // typedef50
      end

      operation 40389175 "negotiate"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 4
	  param in name "offers" type class_ref 3650743 // NBAIO_Format
	  param in name "numOffers" explicit_type "size_t"
	  param in name "counterOffers" type class_ref 3650743 // NBAIO_Format
	  param inout name "numCounterOffers" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[]${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}[]${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}[], ${t1} ${p1}, ${t2} ${p2}[], ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " negotiate() must called first.  The purpose of negotiate() is to check compatibility of
 formats, not to automatically adapt if they are incompatible.  It's the responsibility of
 whoever sets up the graph connections to make sure formats are compatible, and this method
 just verifies that.  The edges are \"dumb\" and don't attempt to adapt to bad connections.
 How it works: offerer proposes an array of formats, in descending order of preference from
 offers[0] to offers[numOffers - 1].  If offeree accepts one of these formats, it returns
 the index of that offer.  Otherwise, offeree sets numCounterOffers to the number of
 counter-offers (up to a maximumum of the entry value of numCounterOffers), fills in the
 provided array counterOffers[] with its counter-offers, in descending order of preference
 from counterOffers[0] to counterOffers[numCounterOffers - 1], and returns NEGOTIATE.
 Note that since the offerer allocates space for counter-offers, but only the offeree knows
 how many counter-offers it has, there may be insufficient space for all counter-offers.
 In that case, the offeree sets numCounterOffers to the requested number of counter-offers
 (which is greater than the entry value of numCounterOffers), fills in as many of the most
 important counterOffers as will fit, and returns NEGOTIATE.  As this implies a re-allocation,
 it should be used as a last resort.  It is preferable for the offerer to simply allocate a
 larger space to begin with, and/or for the offeree to tolerate a smaller space than desired.
 Alternatively, the offerer can pass NULL for offers and counterOffers, and zero for
 numOffers. This indicates that it has not allocated space for any counter-offers yet.
 In this case, the offerree should set numCounterOffers appropriately and return NEGOTIATE.
 Then the offerer will allocate the correct amount of memory and retry.
 Format_Invalid is not allowed as either an offer or counter-offer.
 Returns:
  >= 0        Offer accepted.
  NEGOTIATE   No offer accepted, and counter-offer(s) optionally made. See above for details."
      end

      operation 40389303 "format"
	const cpp_virtual cpp_inline public return_type class_ref 3650743 // NBAIO_Format
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mNegotiated ? mFormat : Format_Invalid; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the current negotiated format, or Format_Invalid if negotiation has not been done,
 or if re-negotiation is required."
      end

      operation 40389431 "NBAIO_Port"
	cpp_inline protected explicit_return_type ""
	nparams 1
	  param in name "format" type class_ref 3650743 // NBAIO_Format
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : mNegotiated(false), mFormat(format),
                                             mFrameSize(Format_frameSize(format)) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 40389559 "~NBAIO_Port"
	cpp_virtual cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      attribute 11366967 "mNegotiated"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Implementations are free to ignore these if they don't need them
 mNegotiated implies (mFormat != Format_Invalid)"
      end

      classrelation 10125239 // mFormat (<directional composition>)
	relation 10125239 *-->
	  a role_name "mFormat" protected
	    comment " (mFormat != Format_Invalid) does not imply mNegotiated"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10125239 // mFormat (<directional composition>)
	  b parent class_ref 3650743 // NBAIO_Format
      end

      attribute 11367095 "mFrameSize"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " assign in parallel with any assignment to mFormat"
      end
    end

    class 3652407 "typedef50"
      visibility package stereotype "typedef" explicit_base_type "RefBase"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 3652535 "NBLog"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      extra_member 193335 "Writer"
	
	stereotype "class"
	cpp "    class Writer;
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      extra_member 193463 "Reader"
	
	stereotype "class"
	cpp "    class Reader;
" ""
	java ""
	php ""
	python ""
	idl ""
      end

      class 3652663 "Event"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 11367479 "EVENT_RESERVED"
	  public type class_ref 3652663 // Event
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 11367607 "EVENT_STRING"
	  public type class_ref 3652663 // Event
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 11367735 "EVENT_TIMESTAMP"
	  public type class_ref 3652663 // Event
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 3652791 "Entry"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 40391991 "Entry"
	  cpp_inline public explicit_return_type ""
	  nparams 3
	    param in name "event" type class_ref 3652663 // Event
	    param in name "data" explicit_type "void"
	    param in name "length" explicit_type "size_t"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw} : mEvent(event), mLength(length), mData(data) { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 40392119 "~Entry"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	  
	  
	  
	  
	  comment "virtual"
	end

	operation 40392247 "readAt"
	  const public explicit_return_type "int"
	  nparams 1
	    param in name "offset" explicit_type "size_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 10125623 // <dependency>
	  relation 10125623 -_->
	    stereotype "friend"
	    a default
	      cpp default "Generated"
	      classrelation_ref 10125623 // <dependency>
	    b parent class_ref 3652919 // Writer
	end

	classrelation 10125751 // mEvent (<directional composition>)
	  relation 10125751 *-->
	    a role_name "mEvent" private
	      comment " event type"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 10125751 // mEvent (<directional composition>)
	    b parent class_ref 3652663 // Event
	end

	attribute 11367863 "mLength"
	  private explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " length of additional data, 0 <= mLength <= 255"
	end

	attribute 11367991 "mData"
	  const_attribute private explicit_type "void"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " event type-specific data"
	end
      end

      class 3652919 "Writer"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 10126263 // <generalisation>
	  relation 10126263 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 10126263 // <generalisation>
	    b parent class_ref 3653303 // typedef51
	end

	operation 40393015 "Writer"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 40393143 "Writer"
	  public explicit_return_type ""
	  nparams 2
	    param in name "size" explicit_type "size_t"
	    param inout name "shared" explicit_type "void"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment " dummy nop implementation without shared memory
 Input parameter 'size' is the desired size of the timeline in byte units.
 The size of the shared memory must be at least Timeline::sharedSize(size)."
	end

	operation 40393271 "Writer"
	  public explicit_return_type ""
	  nparams 2
	    param in name "size" explicit_type "size_t"
	    param in name "iMemory" explicit_type "sp<IMemory>"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 40393399 "~Writer"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	  
	  
	  
	  
	end

	operation 40393527 "log"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "string" explicit_type "char"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40393655 "logf"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "fmt" explicit_type "char"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40393783 "logvf"
	  cpp_virtual public explicit_return_type "void"
	  nparams 2
	    param in name "fmt" explicit_type "char"
	    param in name "ap" explicit_type "va_list"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40393911 "logTimestamp"
	  cpp_virtual public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40394039 "logTimestamp"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "ts" explicit_type "timespec"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40394167 "isEnabled"
	  const cpp_virtual public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40394295 "setEnabled"
	  cpp_virtual public explicit_return_type "bool"
	  nparams 1
	    param in name "enabled" explicit_type "bool"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " return value for all of these is the previous isEnabled()"
	end

	operation 40394423 "enable"
	  cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return setEnabled(true); };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " but won't enable if no shared memory"
	end

	operation 40394551 "disable"
	  cpp_inline public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return setEnabled(false); };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40394679 "getIMemory"
	  const cpp_inline public explicit_return_type "sp<IMemory>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mIMemory; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40394807 "log"
	  private explicit_return_type "void"
	  nparams 3
	    param in name "event" type class_ref 3652663 // Event
	    param in name "data" explicit_type "void"
	    param in name "length" explicit_type "size_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40394935 "log"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "entry" type class_ref 3652791 // Entry
	    param in name "trusted" explicit_type "bool"
	      defaultvalue "false"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 11368759 "mSize"
	  const_attribute private explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " circular buffer size in bytes, must be a power of 2"
	end

	attribute 11368887 "mShared"
	  private type class_ref 3653047 // Shared
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " raw pointer to shared memory"
	end

	attribute 11369015 "mIMemory"
	  const_attribute private explicit_type "IMemory"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " ref-counted version"
	end

	attribute 11369143 "mRear"
	  private explicit_type "int32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " my private copy of mShared->mRear"
	end

	attribute 11369271 "mEnabled"
	  private explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " whether to actually log"
	end
      end

      class 3653047 "Shared"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 40392375 "Shared"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mRear(0) { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 40392503 "~Shared"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	  
	  
	  
	  
	  comment "virtual"
	end

	attribute 11368119 "mRear"
	  volatile public explicit_type "int32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " index one byte past the end of most recent Entry"
	end

	attribute 11368247 "mBuffer"
	  public explicit_type "char"
	  multiplicity "[0]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " circular buffer for entries"
	end
      end

      class 3653175 "Timeline"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 10125879 // <generalisation>
	  relation 10125879 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 10125879 // <generalisation>
	    b parent class_ref 3653303 // typedef51
	end

	operation 40392631 "Timeline"
	  public explicit_return_type ""
	  nparams 2
	    param in name "size" explicit_type "size_t"
	    param inout name "shared" explicit_type "void"
	      defaultvalue "NULL"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 40392759 "~Timeline"
	  cpp_virtual public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 40392887 "sharedSize"
	  class_operation public explicit_return_type "size_t"
	  nparams 1
	    param in name "size" explicit_type "size_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Input parameter 'size' is the desired size of the timeline in byte units.
 Returns the size rounded up to a power-of-2, plus the constant size overhead for indices."
	end

	classrelation 10126007 // <dependency>
	  relation 10126007 -_->
	    stereotype "friend"
	    a default
	      cpp default "Generated"
	      classrelation_ref 10126007 // <dependency>
	    b parent class_ref 3652919 // Writer
	end

	classrelation 10126135 // <dependency>
	  relation 10126135 -_->
	    stereotype "friend"
	    a default
	      cpp default "Generated"
	      classrelation_ref 10126135 // <dependency>
	    b parent class_ref 3653431 // Reader
	end

	attribute 11368375 "mSize"
	  const_attribute private explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " circular buffer size in bytes, must be a power of 2"
	end

	attribute 11368503 "mOwn"
	  private explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " whether I own the memory at mShared"
	end

	attribute 11368631 "mShared"
	  private type class_ref 3653047 // Shared
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " pointer to shared memory"
	end
      end

      class 3653303 "typedef51"
	visibility package stereotype "typedef" explicit_base_type "RefBase"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 3653431 "Reader"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 10126519 // <generalisation>
	  relation 10126519 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 10126519 // <generalisation>
	    b parent class_ref 3653303 // typedef51
	end

	operation 40396215 "Reader"
	  public explicit_return_type ""
	  nparams 2
	    param in name "size" explicit_type "size_t"
	    param in name "shared" explicit_type "void"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment " Input parameter 'size' is the desired size of the timeline in byte units.
 The size of the shared memory must be at least Timeline::sharedSize(size)."
	end

	operation 40396343 "Reader"
	  public explicit_return_type ""
	  nparams 2
	    param in name "size" explicit_type "size_t"
	    param in name "iMemory" explicit_type "sp<IMemory>"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 40396471 "~Reader"
	  cpp_virtual cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	  
	  
	  
	  
	end

	operation 40396599 "dump"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "fd" explicit_type "int"
	    param in name "indent" explicit_type "size_t"
	      defaultvalue "0"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40396727 "isIMemory"
	  const public explicit_return_type "bool"
	  nparams 1
	    param in name "iMemory" explicit_type "sp<IMemory>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 11369527 "mSize"
	  const_attribute private explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " circular buffer size in bytes, must be a power of 2"
	end

	attribute 11369655 "mShared"
	  const_attribute private type class_ref 3653047 // Shared
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " raw pointer to shared memory"
	end

	attribute 11369783 "mIMemory"
	  const_attribute private explicit_type "IMemory"
	  stereotype "sp"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " ref-counted version"
	end

	attribute 11369911 "mFront"
	  private explicit_type "int32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " index of oldest acknowledged Entry"
	end

	attribute 11370039 "mFd"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " file descriptor"
	end

	attribute 11370167 "mIndent"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " indentation level"
	end

	operation 40396855 "dumpLine"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "timestamp" explicit_type "String8"
	    param inout name "body" explicit_type "String8"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 11370295 "kSquashTimestamp"
	  class_attribute const_attribute private explicit_type "size_t"
	  init_value "=  5"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " squash this many or more adjacent timestamps"
	end
      end

      class 3653559 "LockedWriter"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 10126391 // <generalisation>
	  relation 10126391 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 10126391 // <generalisation>
	    b parent class_ref 3652919 // Writer
	end

	operation 40395063 "LockedWriter"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 40395191 "LockedWriter"
	  public explicit_return_type ""
	  nparams 2
	    param in name "size" explicit_type "size_t"
	    param inout name "shared" explicit_type "void"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 40395319 "log"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "string" explicit_type "char"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40395447 "logf"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "fmt" explicit_type "char"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40395575 "logvf"
	  cpp_virtual public explicit_return_type "void"
	  nparams 2
	    param in name "fmt" explicit_type "char"
	    param in name "ap" explicit_type "va_list"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40395703 "logTimestamp"
	  cpp_virtual public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40395831 "logTimestamp"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "ts" explicit_type "timespec"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40395959 "isEnabled"
	  const cpp_virtual public explicit_return_type "bool"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 40396087 "setEnabled"
	  cpp_virtual public explicit_return_type "bool"
	  nparams 1
	    param in name "enabled" explicit_type "bool"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 11369399 "mLock"
	  private explicit_type "Mutex"
	  cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end
    end

    class 3653687 "Pipe"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Pipe is multi-thread safe for readers (see PipeReader), but safe for only a single writer thread.
 It cannot UNDERRUN on write, unless we allow designation of a master reader that provides the
 time-base. Readers can be added and removed dynamically, and it's OK to have no readers."
      classrelation 10126647 // <generalisation>
	relation 10126647 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10126647 // <generalisation>
	  b parent class_ref 3651255 // NBAIO_Sink
      end

      classrelation 10126775 // <dependency>
	relation 10126775 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 10126775 // <dependency>
	  b parent class_ref 3653815 // PipeReader
      end

      operation 40396983 "Pipe"
	public explicit_return_type ""
	nparams 3
	  param in name "maxFrames" explicit_type "size_t"
	  param in name "format" type class_ref 3650743 // NBAIO_Format
	  param inout name "buffer" explicit_type "void"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " maxFrames will be rounded up to a power of 2, and all slots are available. Must be >= 2.
 buffer is an optional parameter specifying the virtual address of the pipe buffer,
 which must be of size roundup(maxFrames) * Format_frameSize(format) bytes."
      end

      operation 40397111 "~Pipe"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " If a buffer was specified in the constructor, it is not automatically freed by destructor."
      end

      operation 40397239 "availableToWrite"
	const cpp_virtual cpp_inline public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mMaxFrames; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NBAIO_Port interface
virtual ssize_t negotiate(const NBAIO_Format offers[], size_t numOffers,
                          NBAIO_Format counterOffers[], size_t& numCounterOffers);
virtual NBAIO_Format format() const;
 NBAIO_Sink interface
virtual int64_t framesWritten() const;
virtual int64_t framesUnderrun() const;
virtual int64_t underruns() const;
 The write side of a pipe permits overruns; flow control is the caller's responsibility.
 It doesn't return +infinity because that would guarantee an overrun."
      end

      operation 40397367 "write"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param in name "buffer" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 11370423 "mMaxFrames"
	const_attribute private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "virtual ssize_t writeVia(writeVia_t via, size_t total, void *user, size_t block);
 always a power of 2"
      end

      attribute 11370551 "mBuffer"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11370679 "mRear"
	volatile private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " written by android_atomic_release_store"
      end

      attribute 11370807 "mReaders"
	volatile private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " number of PipeReader clients currently attached to this Pipe"
      end

      attribute 11370935 "mFreeBufferInDestructor"
	const_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3653815 "PipeReader"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " PipeReader is safe for only a single thread"
      classrelation 10126903 // <generalisation>
	relation 10126903 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10126903 // <generalisation>
	  b parent class_ref 3650615 // NBAIO_Source
      end

      operation 40397495 "PipeReader"
	public explicit_return_type ""
	nparams 1
	  param inout name "pipe" type class_ref 3653687 // Pipe
	cpp_decl "    ${comment}${inline}${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Construct a PipeReader and associate it with a Pipe
 FIXME make this constructor a factory method of Pipe."
      end

      operation 40397623 "~PipeReader"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 40397751 "framesOverrun"
	cpp_virtual cpp_inline public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mFramesOverrun; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NBAIO_Port interface
virtual ssize_t negotiate(const NBAIO_Format offers[], size_t numOffers,
                          NBAIO_Format counterOffers[], size_t& numCounterOffers);
virtual NBAIO_Format format() const;
 NBAIO_Source interface
virtual size_t framesRead() const;"
      end

      operation 40397879 "overruns"
	cpp_virtual cpp_inline public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mOverruns; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40398007 "availableToRead"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40398135 "read"
	cpp_virtual public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "buffer" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40398263 "pipe"
	const cpp_inline public return_type class_ref 3653687 // Pipe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mPipe; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 10127031 // mPipe (<unidirectional association>)
	relation 10127031 --->
	  a role_name "mPipe" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10127031 // mPipe (<unidirectional association>)
	  b parent class_ref 3653687 // Pipe
      end

      attribute 11371063 "mFront"
	private explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " follows behind mPipe.mRear"
      end

      attribute 11371191 "mFramesOverrun"
	private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11371319 "mOverruns"
	private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 3653943 "SourceAudioBufferProvider"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 10127159 // <generalisation>
	relation 10127159 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 10127159 // <generalisation>
	  b parent class_ref 3621303 // ExtendedAudioBufferProvider
      end

      operation 40398391 "SourceAudioBufferProvider"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "sp<NBAIO_Source>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 40398519 "~SourceAudioBufferProvider"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 40398647 "getNextBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "buffer" explicit_type "Buffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " AudioBufferProvider interface"
      end

      operation 40398775 "releaseBuffer"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "buffer" explicit_type "Buffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40398903 "framesReady"
	const cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ExtendedAudioBufferProvider interface"
      end

      operation 40399031 "framesReleased"
	const cpp_virtual public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 40399159 "onTimestamp"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "timestamp" explicit_type "ExtendedTimestamp"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 10127287 // mSource (<directional composition>)
	relation 10127287 *-->
	  stereotype "sp"
	  a role_name "mSource" const_relation private
	    comment " the wrapped source"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 10127287 // mSource (<directional composition>)
	  b parent class_ref 3650615 // NBAIO_Source
      end

      attribute 11371447 "mFrameSize"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "const
 frame size in bytes"
      end

      attribute 11371575 "mAllocated"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " pointer to base of allocated memory"
      end

      attribute 11371703 "mSize"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " size of mAllocated in frames"
      end

      attribute 11371831 "mOffset"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " frame offset within mAllocated of valid data"
      end

      attribute 11371959 "mRemaining"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " frame count within mAllocated of valid data"
      end

      attribute 11372087 "mGetCount"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " buffer.frameCount of the most recent getNextBuffer"
      end

      attribute 11372215 "mFramesReleased"
	private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " counter of the total number of frames released"
      end
    end
  end

  deploymentview 295991 "nbaio"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1568055 "AudioBufferProviderSource"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3650487 // AudioBufferProviderSource
      end
    end

    artifact 1568183 "AudioStreamInSource"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3650999 // AudioStreamInSource
      end
    end

    artifact 1568311 "AudioStreamOutSink"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3651127 // AudioStreamOutSink
      end
    end

    artifact 1568439 "LibsndfileSink"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3651383 // LibsndfileSink
      end
    end

    artifact 1568567 "LibsndfileSource"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3651511 // LibsndfileSource
      end
    end

    artifact 1568695 "MonoPipe"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3651639 // ExtendedTimestampSingleStateQueue
	class_ref 3651767 // MonoPipe
      end
    end

    artifact 1568823 "MonoPipeReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3651895 // MonoPipeReader
      end
    end

    artifact 1569079 "NBAIO"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3650743 // NBAIO_Format
	class_ref 3652151 // writeVia_t
	class_ref 3650871 // readVia_t
	class_ref 3652407 // typedef50
	class_ref 3652279 // NBAIO_Port
	class_ref 3651255 // NBAIO_Sink
	class_ref 3650615 // NBAIO_Source
      end
    end

    artifact 1569207 "NBLog"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3652535 // NBLog
      end
    end

    artifact 1569335 "Pipe"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3653687 // Pipe
      end
    end

    artifact 1569463 "PipeReader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3653815 // PipeReader
      end
    end

    artifact 1569591 "SourceAudioBufferProvider"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3653943 // SourceAudioBufferProvider
      end
    end
  end

  package_ref 390327 // nbaio
end
