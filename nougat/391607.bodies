class AutoCompleteTextView
!!!4639031.java!!!	AutoCompleteTextView(inout context : Context)
        this(context, null);
!!!4639159.java!!!	AutoCompleteTextView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, R.attr.autoCompleteTextViewStyle);
!!!4639287.java!!!	AutoCompleteTextView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!4639415.java!!!	AutoCompleteTextView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        this(context, attrs, defStyleAttr, defStyleRes, null);
!!!4639543.java!!!	AutoCompleteTextView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int, inout popupTheme : Resources::Theme)
        super(context, attrs, defStyleAttr, defStyleRes);

        final TypedArray a = context.obtainStyledAttributes(
                attrs, R.styleable.AutoCompleteTextView, defStyleAttr, defStyleRes);

        if (popupTheme != null) {
            mPopupContext = new ContextThemeWrapper(context, popupTheme);
        } else {
            final int popupThemeResId = a.getResourceId(
                    R.styleable.AutoCompleteTextView_popupTheme, 0);
            if (popupThemeResId != 0) {
                mPopupContext = new ContextThemeWrapper(context, popupThemeResId);
            } else {
                mPopupContext = context;
            }
        }

        // Load attributes used within the popup against the popup context.
        final TypedArray pa;
        if (mPopupContext != context) {
            pa = mPopupContext.obtainStyledAttributes(
                    attrs, R.styleable.AutoCompleteTextView, defStyleAttr, defStyleRes);
        } else {
            pa = a;
        }

        final Drawable popupListSelector = pa.getDrawable(
                R.styleable.AutoCompleteTextView_dropDownSelector);
        final int popupWidth = pa.getLayoutDimension(
                R.styleable.AutoCompleteTextView_dropDownWidth, LayoutParams.WRAP_CONTENT);
        final int popupHeight = pa.getLayoutDimension(
                R.styleable.AutoCompleteTextView_dropDownHeight, LayoutParams.WRAP_CONTENT);
        final int popupHintLayoutResId = pa.getResourceId(
                R.styleable.AutoCompleteTextView_completionHintView, R.layout.simple_dropdown_hint);
        final CharSequence popupHintText = pa.getText(
                R.styleable.AutoCompleteTextView_completionHint);

        if (pa != a) {
            pa.recycle();
        }

        mPopup = new ListPopupWindow(mPopupContext, attrs, defStyleAttr, defStyleRes);
        mPopup.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
        mPopup.setPromptPosition(ListPopupWindow.POSITION_PROMPT_BELOW);
        mPopup.setListSelector(popupListSelector);
        mPopup.setOnItemClickListener(new DropDownItemClickListener());

        // For dropdown width, the developer can specify a specific width, or
        // MATCH_PARENT (for full screen width), or WRAP_CONTENT (to match the
        // width of the anchored view).
        mPopup.setWidth(popupWidth);
        mPopup.setHeight(popupHeight);

        // Completion hint must be set after specifying hint layout.
        mHintResource = popupHintLayoutResId;
        setCompletionHint(popupHintText);

        // Get the anchor's id now, but the view won't be ready, so wait to
        // actually get the view and store it in mDropDownAnchorView lazily in
        // getDropDownAnchorView later. Defaults to NO_ID, in which case the
        // getDropDownAnchorView method will simply return this TextView, as a
        // default anchoring point.
        mDropDownAnchorId = a.getResourceId(
                R.styleable.AutoCompleteTextView_dropDownAnchor, View.NO_ID);

        mThreshold = a.getInt(R.styleable.AutoCompleteTextView_completionThreshold, 2);

        a.recycle();

        // Always turn on the auto complete input type flag, since it
        // makes no sense to use this widget without it.
        int inputType = getInputType();
        if ((inputType & EditorInfo.TYPE_MASK_CLASS) == EditorInfo.TYPE_CLASS_TEXT) {
            inputType |= EditorInfo.TYPE_TEXT_FLAG_AUTO_COMPLETE;
            setRawInputType(inputType);
        }

        setFocusable(true);

        addTextChangedListener(new MyWatcher());

        mPassThroughClickListener = new PassThroughClickListener();
        super.setOnClickListener(mPassThroughClickListener);
!!!4639671.java!!!	setOnClickListener(inout listener : View::OnClickListener) : void
        mPassThroughClickListener.mWrapped = listener;
!!!4639799.java!!!	onClickImpl() : void
        // If the dropdown is showing, bring the keyboard to the front
        // when the user touches the text field.
        if (isPopupShowing()) {
            ensureImeVisible(true);
        }
!!!4639927.java!!!	setCompletionHint(inout hint : CharSequence) : void
        mHintText = hint;
        if (hint != null) {
            if (mHintView == null) {
                final TextView hintView = (TextView) LayoutInflater.from(mPopupContext).inflate(
                        mHintResource, null).findViewById(R.id.text1);
                hintView.setText(mHintText);
                mHintView = hintView;
                mPopup.setPromptView(hintView);
            } else {
                mHintView.setText(hint);
            }
        } else {
            mPopup.setPromptView(null);
            mHintView = null;
        }
!!!4640055.java!!!	getCompletionHint() : CharSequence
        return mHintText;
!!!4640183.java!!!	getDropDownWidth() : int
        return mPopup.getWidth();
!!!4640311.java!!!	setDropDownWidth(in width : int) : void
        mPopup.setWidth(width);
!!!4640439.java!!!	getDropDownHeight() : int
        return mPopup.getHeight();
!!!4640567.java!!!	setDropDownHeight(in height : int) : void
        mPopup.setHeight(height);
!!!4640695.java!!!	getDropDownAnchor() : int
        return mDropDownAnchorId;
!!!4640823.java!!!	setDropDownAnchor(in id : int) : void
        mDropDownAnchorId = id;
        mPopup.setAnchorView(null);
!!!4640951.java!!!	getDropDownBackground() : Drawable
        return mPopup.getBackground();
!!!4641079.java!!!	setDropDownBackgroundDrawable(inout d : Drawable) : void
        mPopup.setBackgroundDrawable(d);
!!!4641207.java!!!	setDropDownBackgroundResource(in id : int) : void
        mPopup.setBackgroundDrawable(getContext().getDrawable(id));
!!!4641335.java!!!	setDropDownVerticalOffset(in offset : int) : void
        mPopup.setVerticalOffset(offset);
!!!4641463.java!!!	getDropDownVerticalOffset() : int
        return mPopup.getVerticalOffset();
!!!4641591.java!!!	setDropDownHorizontalOffset(in offset : int) : void
        mPopup.setHorizontalOffset(offset);
!!!4641719.java!!!	getDropDownHorizontalOffset() : int
        return mPopup.getHorizontalOffset();
!!!4641847.java!!!	setDropDownAnimationStyle(in animationStyle : int) : void
        mPopup.setAnimationStyle(animationStyle);
!!!4641975.java!!!	getDropDownAnimationStyle() : int
        return mPopup.getAnimationStyle();
!!!4642103.java!!!	isDropDownAlwaysVisible() : boolean
        return mPopup.isDropDownAlwaysVisible();
!!!4642231.java!!!	setDropDownAlwaysVisible(inout dropDownAlwaysVisible : boolean) : void
        mPopup.setDropDownAlwaysVisible(dropDownAlwaysVisible);
!!!4642359.java!!!	isDropDownDismissedOnCompletion() : boolean
        return mDropDownDismissedOnCompletion;
!!!4642487.java!!!	setDropDownDismissedOnCompletion(inout dropDownDismissedOnCompletion : boolean) : void
        mDropDownDismissedOnCompletion = dropDownDismissedOnCompletion;
!!!4642615.java!!!	getThreshold() : int
        return mThreshold;
!!!4642743.java!!!	setThreshold(in threshold : int) : void
        if (threshold <= 0) {
            threshold = 1;
        }

        mThreshold = threshold;
!!!4642871.java!!!	setOnItemClickListener(inout l : AdapterView::OnItemClickListener) : void
        mItemClickListener = l;
!!!4642999.java!!!	setOnItemSelectedListener(inout l : AdapterView::OnItemSelectedListener) : void
        mItemSelectedListener = l;
!!!4643127.java!!!	getItemClickListener() : AdapterView::OnItemClickListener
        return mItemClickListener;
!!!4643255.java!!!	getItemSelectedListener() : AdapterView::OnItemSelectedListener
        return mItemSelectedListener;
!!!4643383.java!!!	getOnItemClickListener() : AdapterView::OnItemClickListener
        return mItemClickListener;
!!!4643511.java!!!	getOnItemSelectedListener() : AdapterView::OnItemSelectedListener
        return mItemSelectedListener;
!!!4643639.java!!!	setOnDismissListener(in dismissListener : AutoCompleteTextView::OnDismissListener) : void
        PopupWindow.OnDismissListener wrappedListener = null;
        if (dismissListener != null) {
            wrappedListener = new PopupWindow.OnDismissListener() {
                @Override public void onDismiss() {
                    dismissListener.onDismiss();
                }
            };
        }
        mPopup.setOnDismissListener(wrappedListener);
!!!4643767.java!!!	getAdapter() : ListAdapter
        return mAdapter;
!!!4643895.java!!!	setAdapter(inout adapter : T) : void
        if (mObserver == null) {
            mObserver = new PopupDataSetObserver(this);
        } else if (mAdapter != null) {
            mAdapter.unregisterDataSetObserver(mObserver);
        }
        mAdapter = adapter;
        if (mAdapter != null) {
            //noinspection unchecked
            mFilter = ((Filterable) mAdapter).getFilter();
            adapter.registerDataSetObserver(mObserver);
        } else {
            mFilter = null;
        }

        mPopup.setAdapter(mAdapter);
!!!4644023.java!!!	onKeyPreIme(in keyCode : int, inout event : KeyEvent) : boolean
        if (keyCode == KeyEvent.KEYCODE_BACK && isPopupShowing()
                && !mPopup.isDropDownAlwaysVisible()) {
            // special case for the back key, we do not even try to send it
            // to the drop down list but instead, consume it immediately
            if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {
                KeyEvent.DispatcherState state = getKeyDispatcherState();
                if (state != null) {
                    state.startTracking(event, this);
                }
                return true;
            } else if (event.getAction() == KeyEvent.ACTION_UP) {
                KeyEvent.DispatcherState state = getKeyDispatcherState();
                if (state != null) {
                    state.handleUpEvent(event);
                }
                if (event.isTracking() && !event.isCanceled()) {
                    dismissDropDown();
                    return true;
                }
            }
        }
        return super.onKeyPreIme(keyCode, event);
!!!4644151.java!!!	onKeyUp(in keyCode : int, inout event : KeyEvent) : boolean
        boolean consumed = mPopup.onKeyUp(keyCode, event);
        if (consumed) {
            switch (keyCode) {
            // if the list accepts the key events and the key event
            // was a click, the text view gets the selected item
            // from the drop down as its content
            case KeyEvent.KEYCODE_ENTER:
            case KeyEvent.KEYCODE_DPAD_CENTER:
            case KeyEvent.KEYCODE_TAB:
                if (event.hasNoModifiers()) {
                    performCompletion();
                }
                return true;
            }
        }

        if (isPopupShowing() && keyCode == KeyEvent.KEYCODE_TAB && event.hasNoModifiers()) {
            performCompletion();
            return true;
        }

        return super.onKeyUp(keyCode, event);
!!!4644279.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        if (mPopup.onKeyDown(keyCode, event)) {
            return true;
        }
        
        if (!isPopupShowing()) {
            switch(keyCode) {
            case KeyEvent.KEYCODE_DPAD_DOWN:
                if (event.hasNoModifiers()) {
                    performValidation();
                }
            }
        }

        if (isPopupShowing() && keyCode == KeyEvent.KEYCODE_TAB && event.hasNoModifiers()) {
            return true;
        }

        mLastKeyCode = keyCode;
        boolean handled = super.onKeyDown(keyCode, event);
        mLastKeyCode = KeyEvent.KEYCODE_UNKNOWN;

        if (handled && isPopupShowing()) {
            clearListSelection();
        }

        return handled;
!!!4644407.java!!!	enoughToFilter() : boolean
        if (DEBUG) Log.v(TAG, "Enough to filter: len=" + getText().length()
                + " threshold=" + mThreshold);
        return getText().length() >= mThreshold;
!!!4644919.java!!!	doBeforeTextChanged() : void
        if (mBlockCompletion) return;

        // when text is changed, inserted or deleted, we attempt to show
        // the drop down
        mOpenBefore = isPopupShowing();
        if (DEBUG) Log.v(TAG, "before text changed: open=" + mOpenBefore);
!!!4645047.java!!!	doAfterTextChanged() : void
        if (mBlockCompletion) return;

        // if the list was open before the keystroke, but closed afterwards,
        // then something in the keystroke processing (an input filter perhaps)
        // called performCompletion() and we shouldn't do any more processing.
        if (DEBUG) Log.v(TAG, "after text changed: openBefore=" + mOpenBefore
                + " open=" + isPopupShowing());
        if (mOpenBefore && !isPopupShowing()) {
            return;
        }

        // the drop down is shown only when a minimum number of characters
        // was typed in the text view
        if (enoughToFilter()) {
            if (mFilter != null) {
                mPopupCanBeUpdated = true;
                performFiltering(getText(), mLastKeyCode);
            }
        } else {
            // drop down is automatically dismissed when enough characters
            // are deleted from the text view
            if (!mPopup.isDropDownAlwaysVisible()) {
                dismissDropDown();
            }
            if (mFilter != null) {
                mFilter.filter(null);
            }
        }
!!!4645175.java!!!	isPopupShowing() : boolean
        return mPopup.isShowing();
!!!4645303.java!!!	convertSelectionToString(inout selectedItem : Object) : CharSequence
        return mFilter.convertResultToString(selectedItem);
!!!4645431.java!!!	clearListSelection() : void
        mPopup.clearListSelection();
!!!4645559.java!!!	setListSelection(in position : int) : void
        mPopup.setSelection(position);
!!!4645687.java!!!	getListSelection() : int
        return mPopup.getSelectedItemPosition();
!!!4645815.java!!!	performFiltering(inout text : CharSequence, in keyCode : int) : void
        mFilter.filter(text, this);
!!!4645943.java!!!	performCompletion() : void
        performCompletion(null, -1, -1);
!!!4646071.java!!!	onCommitCompletion(inout completion : CompletionInfo) : void
        if (isPopupShowing()) {
            mPopup.performItemClick(completion.getPosition());
        }
!!!4646199.java!!!	performCompletion(inout selectedView : View, in position : int, in id : long) : void
        if (isPopupShowing()) {
            Object selectedItem;
            if (position < 0) {
                selectedItem = mPopup.getSelectedItem();
            } else {
                selectedItem = mAdapter.getItem(position);
            }
            if (selectedItem == null) {
                Log.w(TAG, "performCompletion: no selected item");
                return;
            }

            mBlockCompletion = true;
            replaceText(convertSelectionToString(selectedItem));
            mBlockCompletion = false;

            if (mItemClickListener != null) {
                final ListPopupWindow list = mPopup;

                if (selectedView == null || position < 0) {
                    selectedView = list.getSelectedView();
                    position = list.getSelectedItemPosition();
                    id = list.getSelectedItemId();
                }
                mItemClickListener.onItemClick(list.getListView(), selectedView, position, id);
            }
        }

        if (mDropDownDismissedOnCompletion && !mPopup.isDropDownAlwaysVisible()) {
            dismissDropDown();
        }
!!!4646327.java!!!	isPerformingCompletion() : boolean
        return mBlockCompletion;
!!!4646455.java!!!	setText(inout text : CharSequence, inout filter : boolean) : void
        if (filter) {
            setText(text);
        } else {
            mBlockCompletion = true;
            setText(text);
            mBlockCompletion = false;
        }
!!!4646583.java!!!	replaceText(inout text : CharSequence) : void
        clearComposingText();

        setText(text);
        // make sure we keep the caret at the end of the text view
        Editable spannable = getText();
        Selection.setSelection(spannable, spannable.length());
!!!4646711.java!!!	onFilterComplete(in count : int) : void
        updateDropDownForFilter(count);
!!!4646839.java!!!	updateDropDownForFilter(in count : int) : void
        // Not attached to window, don't update drop-down
        if (getWindowVisibility() == View.GONE) return;

        /*
         * This checks enoughToFilter() again because filtering requests
         * are asynchronous, so the result may come back after enough text
         * has since been deleted to make it no longer appropriate
         * to filter.
         */

        final boolean dropDownAlwaysVisible = mPopup.isDropDownAlwaysVisible();
        final boolean enoughToFilter = enoughToFilter();
        if ((count > 0 || dropDownAlwaysVisible) && enoughToFilter) {
            if (hasFocus() && hasWindowFocus() && mPopupCanBeUpdated) {
                showDropDown();
            }
        } else if (!dropDownAlwaysVisible && isPopupShowing()) {
            dismissDropDown();
            // When the filter text is changed, the first update from the adapter may show an empty
            // count (when the query is being performed on the network). Future updates when some
            // content has been retrieved should still be able to update the list.
            mPopupCanBeUpdated = true;
        }
!!!4646967.java!!!	onWindowFocusChanged(inout hasWindowFocus : boolean) : void
        super.onWindowFocusChanged(hasWindowFocus);
        if (!hasWindowFocus && !mPopup.isDropDownAlwaysVisible()) {
            dismissDropDown();
        }
!!!4647095.java!!!	onDisplayHint(in hint : int) : void
        super.onDisplayHint(hint);
        switch (hint) {
            case INVISIBLE:
                if (!mPopup.isDropDownAlwaysVisible()) {
                    dismissDropDown();
                }
                break;
        }
!!!4647223.java!!!	onFocusChanged(inout focused : boolean, in direction : int, inout previouslyFocusedRect : Rect) : void
        super.onFocusChanged(focused, direction, previouslyFocusedRect);

        if (isTemporarilyDetached()) {
            // If we are temporarily in the detach state, then do nothing.
            return;
        }

        // Perform validation if the view is losing focus.
        if (!focused) {
            performValidation();
        }
        if (!focused && !mPopup.isDropDownAlwaysVisible()) {
            dismissDropDown();
        }
!!!4647351.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();
!!!4647479.java!!!	onDetachedFromWindow() : void
        dismissDropDown();
        super.onDetachedFromWindow();
!!!4647607.java!!!	dismissDropDown() : void
        InputMethodManager imm = InputMethodManager.peekInstance();
        if (imm != null) {
            imm.displayCompletions(this, null);
        }
        mPopup.dismiss();
        mPopupCanBeUpdated = false;
!!!4647735.java!!!	setFrame(in l : int, in t : int, in r : int, in b : int) : boolean
        boolean result = super.setFrame(l, t, r, b);

        if (isPopupShowing()) {
            showDropDown();
        }

        return result;
!!!4647863.java!!!	showDropDownAfterLayout() : void
        mPopup.postShow();
!!!4647991.java!!!	ensureImeVisible(inout visible : boolean) : void
        mPopup.setInputMethodMode(visible
                ? ListPopupWindow.INPUT_METHOD_NEEDED : ListPopupWindow.INPUT_METHOD_NOT_NEEDED);
        if (mPopup.isDropDownAlwaysVisible() || (mFilter != null && enoughToFilter())) {
            showDropDown();
        }
!!!4648119.java!!!	isInputMethodNotNeeded() : boolean
        return mPopup.getInputMethodMode() == ListPopupWindow.INPUT_METHOD_NOT_NEEDED;
!!!4648247.java!!!	showDropDown() : void
        buildImeCompletions();

        if (mPopup.getAnchorView() == null) {
            if (mDropDownAnchorId != View.NO_ID) {
                mPopup.setAnchorView(getRootView().findViewById(mDropDownAnchorId));
            } else {
                mPopup.setAnchorView(this);
            }
        }
        if (!isPopupShowing()) {
            // Make sure the list does not obscure the IME when shown for the first time.
            mPopup.setInputMethodMode(ListPopupWindow.INPUT_METHOD_NEEDED);
            mPopup.setListItemExpandMax(EXPAND_MAX);
        }
        mPopup.show();
        mPopup.getListView().setOverScrollMode(View.OVER_SCROLL_ALWAYS);
!!!4648375.java!!!	setForceIgnoreOutsideTouch(inout forceIgnoreOutsideTouch : boolean) : void
        mPopup.setForceIgnoreOutsideTouch(forceIgnoreOutsideTouch);
!!!4648503.java!!!	buildImeCompletions() : void
        final ListAdapter adapter = mAdapter;
        if (adapter != null) {
            InputMethodManager imm = InputMethodManager.peekInstance();
            if (imm != null) {
                final int count = Math.min(adapter.getCount(), 20);
                CompletionInfo[] completions = new CompletionInfo[count];
                int realCount = 0;

                for (int i = 0; i < count; i++) {
                    if (adapter.isEnabled(i)) {
                        Object item = adapter.getItem(i);
                        long id = adapter.getItemId(i);
                        completions[realCount] = new CompletionInfo(id, realCount,
                                convertSelectionToString(item));
                        realCount++;
                    }
                }
                
                if (realCount != count) {
                    CompletionInfo[] tmp = new CompletionInfo[realCount];
                    System.arraycopy(completions, 0, tmp, 0, realCount);
                    completions = tmp;
                }

                imm.displayCompletions(this, completions);
            }
        }
!!!4648631.java!!!	setValidator(inout validator : AutoCompleteTextView::Validator) : void
        mValidator = validator;
!!!4648759.java!!!	getValidator() : AutoCompleteTextView::Validator
        return mValidator;
!!!4648887.java!!!	performValidation() : void
        if (mValidator == null) return;

        CharSequence text = getText();

        if (!TextUtils.isEmpty(text) && !mValidator.isValid(text)) {
            setText(mValidator.fixText(text));
        }
!!!4649015.java!!!	getFilter() : Filter
        return mFilter;
