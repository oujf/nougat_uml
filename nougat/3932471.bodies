class OneTouchRecordAction
!!!42257847.java!!!	OneTouchRecordAction(inout source : HdmiCecLocalDevice, in recorderAddress : int, inout recordSource : byte)
        super(source);
        mRecorderAddress = recorderAddress;
        mRecordSource = recordSource;
!!!42257975.java!!!	start() : boolean
        sendRecordOn();
        return true;
!!!42258103.java!!!	sendRecordOn() : void
        sendCommand(HdmiCecMessageBuilder.buildRecordOn(getSourceAddress(), mRecorderAddress,
                mRecordSource),
                new SendMessageCallback() {
                @Override
                    public void onSendCompleted(int error) {
                        // if failed to send <Record On>, display error message and finish action.
                        if (error != Constants.SEND_RESULT_SUCCESS) {
                            tv().announceOneTouchRecordResult(
                                    mRecorderAddress,
                                    ONE_TOUCH_RECORD_CHECK_RECORDER_CONNECTION);
                            finish();
                            return;
                        }
                    }
                });
        mState = STATE_WAITING_FOR_RECORD_STATUS;
        addTimer(mState, RECORD_STATUS_TIMEOUT_MS);
!!!42258231.java!!!	processCommand(inout cmd : HdmiCecMessage) : boolean
        if (mState != STATE_WAITING_FOR_RECORD_STATUS || mRecorderAddress != cmd.getSource()) {
            return false;
        }

        switch (cmd.getOpcode()) {
            case Constants.MESSAGE_RECORD_STATUS:
                return handleRecordStatus(cmd);
        }
        return false;
!!!42258359.java!!!	handleRecordStatus(inout cmd : HdmiCecMessage) : boolean
        // Only handle message coming from original recorder.
        if (cmd.getSource() != mRecorderAddress) {
            return false;
        }

        int recordStatus = cmd.getParams()[0];
        tv().announceOneTouchRecordResult(mRecorderAddress, recordStatus);
        Slog.i(TAG, "Got record status:" + recordStatus + " from " + cmd.getSource());

        // If recording started successfully, change state and keep this action until <Record Off>
        // received. Otherwise, finish action.
        switch (recordStatus) {
            case ONE_TOUCH_RECORD_RECORDING_CURRENTLY_SELECTED_SOURCE:
            case ONE_TOUCH_RECORD_RECORDING_DIGITAL_SERVICE:
            case ONE_TOUCH_RECORD_RECORDING_ANALOGUE_SERVICE:
            case ONE_TOUCH_RECORD_RECORDING_EXTERNAL_INPUT:
                mState = STATE_RECORDING_IN_PROGRESS;
                mActionTimer.clearTimerMessage();
                break;
            default:
                finish();
                break;
        }
        return true;
!!!42258487.java!!!	handleTimerEvent(in state : int) : void
        if (mState != state) {
            Slog.w(TAG, "Timeout in invalid state:[Expected:" + mState + ", Actual:" + state + "]");
            return;
        }

        tv().announceOneTouchRecordResult(mRecorderAddress,
                ONE_TOUCH_RECORD_CHECK_RECORDER_CONNECTION);
        finish();
!!!42258615.java!!!	getRecorderAddress() : int
        return mRecorderAddress;
