class JobStatus
!!!42313655.java!!!	getServiceToken() : int
        return callingUid;
!!!42313783.java!!!	JobStatus(inout job : JobInfo, in callingUid : int, inout sourcePackageName : String, in sourceUserId : int, inout tag : String, in numFailures : int, in earliestRunTimeElapsedMillis : long, in latestRunTimeElapsedMillis : long)
        this.job = job;
        this.callingUid = callingUid;

        int tempSourceUid = -1;
        if (sourceUserId != -1 && sourcePackageName != null) {
            try {
                tempSourceUid = AppGlobals.getPackageManager().getPackageUid(sourcePackageName, 0,
                        sourceUserId);
            } catch (RemoteException ex) {
                // Can't happen, PackageManager runs in the same process.
            }
        }
        if (tempSourceUid == -1) {
            this.sourceUid = callingUid;
            this.sourceUserId = UserHandle.getUserId(callingUid);
            this.sourcePackageName = job.getService().getPackageName();
            this.sourceTag = null;
        } else {
            this.sourceUid = tempSourceUid;
            this.sourceUserId = sourceUserId;
            this.sourcePackageName = sourcePackageName;
            this.sourceTag = tag;
        }

        this.batteryName = this.sourceTag != null
                ? this.sourceTag + ":" + job.getService().getPackageName()
                : job.getService().flattenToShortString();
        this.tag = "*job*/" + this.batteryName;

        this.earliestRunTimeElapsedMillis = earliestRunTimeElapsedMillis;
        this.latestRunTimeElapsedMillis = latestRunTimeElapsedMillis;
        this.numFailures = numFailures;

        int requiredConstraints = 0;
        if (job.getNetworkType() == JobInfo.NETWORK_TYPE_ANY) {
            requiredConstraints |= CONSTRAINT_CONNECTIVITY;
        }
        if (job.getNetworkType() == JobInfo.NETWORK_TYPE_UNMETERED) {
            requiredConstraints |= CONSTRAINT_UNMETERED;
        }
        if (job.getNetworkType() == JobInfo.NETWORK_TYPE_NOT_ROAMING) {
            requiredConstraints |= CONSTRAINT_NOT_ROAMING;
        }
        if (job.isRequireCharging()) {
            requiredConstraints |= CONSTRAINT_CHARGING;
        }
        if (earliestRunTimeElapsedMillis != NO_EARLIEST_RUNTIME) {
            requiredConstraints |= CONSTRAINT_TIMING_DELAY;
        }
        if (latestRunTimeElapsedMillis != NO_LATEST_RUNTIME) {
            requiredConstraints |= CONSTRAINT_DEADLINE;
        }
        if (job.isRequireDeviceIdle()) {
            requiredConstraints |= CONSTRAINT_IDLE;
        }
        if (job.getTriggerContentUris() != null) {
            requiredConstraints |= CONSTRAINT_CONTENT_TRIGGER;
        }
        this.requiredConstraints = requiredConstraints;
!!!42313911.java!!!	JobStatus(inout jobStatus : JobStatus)
        this(jobStatus.getJob(), jobStatus.getUid(),
                jobStatus.getSourcePackageName(), jobStatus.getSourceUserId(),
                jobStatus.getSourceTag(), jobStatus.getNumFailures(),
                jobStatus.getEarliestRunTime(), jobStatus.getLatestRunTimeElapsed());
!!!42314039.java!!!	JobStatus(inout job : JobInfo, in callingUid : int, inout sourcePackageName : String, in sourceUserId : int, inout sourceTag : String, in earliestRunTimeElapsedMillis : long, in latestRunTimeElapsedMillis : long)
        this(job, callingUid, sourcePackageName, sourceUserId, sourceTag, 0,
                earliestRunTimeElapsedMillis, latestRunTimeElapsedMillis);
!!!42314167.java!!!	JobStatus(inout rescheduling : JobStatus, in newEarliestRuntimeElapsedMillis : long, in newLatestRuntimeElapsedMillis : long, in backoffAttempt : int)
        this(rescheduling.job, rescheduling.getUid(),
                rescheduling.getSourcePackageName(), rescheduling.getSourceUserId(),
                rescheduling.getSourceTag(), backoffAttempt, newEarliestRuntimeElapsedMillis,
                newLatestRuntimeElapsedMillis);
!!!42314295.java!!!	createFromJobInfo(inout job : JobInfo, in callingUid : int, inout sourcePackageName : String, in sourceUserId : int, inout tag : String) : JobStatus
        final long elapsedNow = SystemClock.elapsedRealtime();
        final long earliestRunTimeElapsedMillis, latestRunTimeElapsedMillis;
        if (job.isPeriodic()) {
            latestRunTimeElapsedMillis = elapsedNow + job.getIntervalMillis();
            earliestRunTimeElapsedMillis = latestRunTimeElapsedMillis - job.getFlexMillis();
        } else {
            earliestRunTimeElapsedMillis = job.hasEarlyConstraint() ?
                    elapsedNow + job.getMinLatencyMillis() : NO_EARLIEST_RUNTIME;
            latestRunTimeElapsedMillis = job.hasLateConstraint() ?
                    elapsedNow + job.getMaxExecutionDelayMillis() : NO_LATEST_RUNTIME;
        }
        return new JobStatus(job, callingUid, sourcePackageName, sourceUserId, tag, 0,
                earliestRunTimeElapsedMillis, latestRunTimeElapsedMillis);
!!!42314423.java!!!	getJob() : JobInfo
        return job;
!!!42314551.java!!!	getJobId() : int
        return job.getId();
!!!42314679.java!!!	printUniqueId(inout pw : PrintWriter) : void
        UserHandle.formatUid(pw, callingUid);
        pw.print("/");
        pw.print(job.getId());
!!!42314807.java!!!	getNumFailures() : int
        return numFailures;
!!!42314935.java!!!	getServiceComponent() : ComponentName
        return job.getService();
!!!42315063.java!!!	getSourcePackageName() : String
        return sourcePackageName;
!!!42315191.java!!!	getSourceUid() : int
        return sourceUid;
!!!42315319.java!!!	getSourceUserId() : int
        return sourceUserId;
!!!42315447.java!!!	getUserId() : int
        return UserHandle.getUserId(callingUid);
!!!42315575.java!!!	getSourceTag() : String
        return sourceTag;
!!!42315703.java!!!	getUid() : int
        return callingUid;
!!!42315831.java!!!	getBatteryName() : String
        return batteryName;
!!!42315959.java!!!	getTag() : String
        return tag;
!!!42316087.java!!!	getExtras() : PersistableBundle
        return job.getExtras();
!!!42316215.java!!!	getPriority() : int
        return job.getPriority();
!!!42316343.java!!!	getFlags() : int
        return job.getFlags();
!!!42316471.java!!!	hasConnectivityConstraint() : boolean
        return (requiredConstraints&CONSTRAINT_CONNECTIVITY) != 0;
!!!42316599.java!!!	hasUnmeteredConstraint() : boolean
        return (requiredConstraints&CONSTRAINT_UNMETERED) != 0;
!!!42316727.java!!!	hasNotRoamingConstraint() : boolean
        return (requiredConstraints&CONSTRAINT_NOT_ROAMING) != 0;
!!!42316855.java!!!	hasChargingConstraint() : boolean
        return (requiredConstraints&CONSTRAINT_CHARGING) != 0;
!!!42316983.java!!!	hasTimingDelayConstraint() : boolean
        return (requiredConstraints&CONSTRAINT_TIMING_DELAY) != 0;
!!!42317111.java!!!	hasDeadlineConstraint() : boolean
        return (requiredConstraints&CONSTRAINT_DEADLINE) != 0;
!!!42317239.java!!!	hasIdleConstraint() : boolean
        return (requiredConstraints&CONSTRAINT_IDLE) != 0;
!!!42317367.java!!!	hasContentTriggerConstraint() : boolean
        return (requiredConstraints&CONSTRAINT_CONTENT_TRIGGER) != 0;
!!!42317495.java!!!	getTriggerContentUpdateDelay() : long
        long time = job.getTriggerContentUpdateDelay();
        if (time < 0) {
            return DEFAULT_TRIGGER_UPDATE_DELAY;
        }
        return Math.max(time, MIN_TRIGGER_UPDATE_DELAY);
!!!42317623.java!!!	getTriggerContentMaxDelay() : long
        long time = job.getTriggerContentMaxDelay();
        if (time < 0) {
            return DEFAULT_TRIGGER_MAX_DELAY;
        }
        return Math.max(time, MIN_TRIGGER_MAX_DELAY);
!!!42317751.java!!!	isPersisted() : boolean
        return job.isPersisted();
!!!42317879.java!!!	getEarliestRunTime() : long
        return earliestRunTimeElapsedMillis;
!!!42318007.java!!!	getLatestRunTimeElapsed() : long
        return latestRunTimeElapsedMillis;
!!!42318135.java!!!	setChargingConstraintSatisfied(inout state : boolean) : boolean
        return setConstraintSatisfied(CONSTRAINT_CHARGING, state);
!!!42318263.java!!!	setTimingDelayConstraintSatisfied(inout state : boolean) : boolean
        return setConstraintSatisfied(CONSTRAINT_TIMING_DELAY, state);
!!!42318391.java!!!	setDeadlineConstraintSatisfied(inout state : boolean) : boolean
        return setConstraintSatisfied(CONSTRAINT_DEADLINE, state);
!!!42318519.java!!!	setIdleConstraintSatisfied(inout state : boolean) : boolean
        return setConstraintSatisfied(CONSTRAINT_IDLE, state);
!!!42318647.java!!!	setConnectivityConstraintSatisfied(inout state : boolean) : boolean
        return setConstraintSatisfied(CONSTRAINT_CONNECTIVITY, state);
!!!42318775.java!!!	setUnmeteredConstraintSatisfied(inout state : boolean) : boolean
        return setConstraintSatisfied(CONSTRAINT_UNMETERED, state);
!!!42318903.java!!!	setNotRoamingConstraintSatisfied(inout state : boolean) : boolean
        return setConstraintSatisfied(CONSTRAINT_NOT_ROAMING, state);
!!!42319031.java!!!	setAppNotIdleConstraintSatisfied(inout state : boolean) : boolean
        return setConstraintSatisfied(CONSTRAINT_APP_NOT_IDLE, state);
!!!42319159.java!!!	setContentTriggerConstraintSatisfied(inout state : boolean) : boolean
        return setConstraintSatisfied(CONSTRAINT_CONTENT_TRIGGER, state);
!!!42319287.java!!!	setDeviceNotDozingConstraintSatisfied(inout state : boolean, inout whitelisted : boolean) : boolean
        dozeWhitelisted = whitelisted;
        return setConstraintSatisfied(CONSTRAINT_DEVICE_NOT_DOZING, state);
!!!42319415.java!!!	setConstraintSatisfied(in constraint : int, inout state : boolean) : boolean
        boolean old = (satisfiedConstraints&constraint) != 0;
        if (old == state) {
            return false;
        }
        satisfiedConstraints = (satisfiedConstraints&~constraint) | (state ? constraint : 0);
        return true;
!!!42319543.java!!!	isConstraintSatisfied(in constraint : int) : boolean
        return (satisfiedConstraints&constraint) != 0;
!!!42319671.java!!!	shouldDump(in filterUid : int) : boolean
        return filterUid == -1 || UserHandle.getAppId(getUid()) == filterUid
                || UserHandle.getAppId(getSourceUid()) == filterUid;
!!!42319799.java!!!	isReady() : boolean
        // Deadline constraint trumps other constraints (except for periodic jobs where deadline
        // is an implementation detail. A periodic job should only run if its constraints are
        // satisfied).
        // AppNotIdle implicit constraint must be satisfied
        // DeviceNotDozing implicit constraint must be satisfied
        final boolean deadlineSatisfied = (!job.isPeriodic() && hasDeadlineConstraint()
                && (satisfiedConstraints & CONSTRAINT_DEADLINE) != 0);
        final boolean notIdle = (satisfiedConstraints & CONSTRAINT_APP_NOT_IDLE) != 0;
        final boolean notDozing = (satisfiedConstraints & CONSTRAINT_DEVICE_NOT_DOZING) != 0
                || (job.getFlags() & JobInfo.FLAG_WILL_BE_FOREGROUND) != 0;
        return (isConstraintsSatisfied() || deadlineSatisfied) && notIdle && notDozing;
!!!42319927.java!!!	isConstraintsSatisfied() : boolean
        if (overrideState == OVERRIDE_FULL) {
            // force override: the job is always runnable
            return true;
        }

        final int req = requiredConstraints & CONSTRAINTS_OF_INTEREST;

        int sat = satisfiedConstraints & CONSTRAINTS_OF_INTEREST;
        if (overrideState == OVERRIDE_SOFT) {
            // override: pretend all 'soft' requirements are satisfied
            sat |= (requiredConstraints & SOFT_OVERRIDE_CONSTRAINTS);
        }

        return (sat & req) == req;
!!!42320055.java!!!	matches(in uid : int, in jobId : int) : boolean
        return this.job.getId() == jobId && this.callingUid == uid;
!!!42320183.java!!!	toString() : String
        return String.valueOf(hashCode()).substring(0, 3) + ".."
                + ":[" + job.getService()
                + ",jId=" + job.getId()
                + ",u" + getUserId()
                + ",R=(" + formatRunTime(earliestRunTimeElapsedMillis, NO_EARLIEST_RUNTIME)
                + "," + formatRunTime(latestRunTimeElapsedMillis, NO_LATEST_RUNTIME) + ")"
                + ",N=" + job.getNetworkType() + ",C=" + job.isRequireCharging()
                + ",I=" + job.isRequireDeviceIdle()
                + ",U=" + (job.getTriggerContentUris() != null)
                + ",F=" + numFailures + ",P=" + job.isPersisted()
                + ",ANI=" + ((satisfiedConstraints&CONSTRAINT_APP_NOT_IDLE) != 0)
                + ",DND=" + ((satisfiedConstraints&CONSTRAINT_DEVICE_NOT_DOZING) != 0)
                + (isReady() ? "(READY)" : "")
                + "]";
!!!42320311.java!!!	formatRunTime(in runtime : long, in defaultValue : long) : String
        if (runtime == defaultValue) {
            return "none";
        } else {
            long elapsedNow = SystemClock.elapsedRealtime();
            long nextRuntime = runtime - elapsedNow;
            if (nextRuntime > 0) {
                return DateUtils.formatElapsedTime(nextRuntime / 1000);
            } else {
                return "-" + DateUtils.formatElapsedTime(nextRuntime / -1000);
            }
        }
!!!42320439.java!!!	toShortString() : String
        StringBuilder sb = new StringBuilder();
        sb.append(Integer.toHexString(System.identityHashCode(this)));
        sb.append(" #");
        UserHandle.formatUid(sb, callingUid);
        sb.append("/");
        sb.append(job.getId());
        sb.append(' ');
        sb.append(batteryName);
        return sb.toString();
!!!42320567.java!!!	toShortStringExceptUniqueId() : String
        StringBuilder sb = new StringBuilder();
        sb.append(Integer.toHexString(System.identityHashCode(this)));
        sb.append(' ');
        sb.append(batteryName);
        return sb.toString();
!!!42320695.java!!!	dumpConstraints(inout pw : PrintWriter, in constraints : int) : void
        if ((constraints&CONSTRAINT_CHARGING) != 0) {
            pw.print(" CHARGING");
        }
        if ((constraints&CONSTRAINT_TIMING_DELAY) != 0) {
            pw.print(" TIMING_DELAY");
        }
        if ((constraints&CONSTRAINT_DEADLINE) != 0) {
            pw.print(" DEADLINE");
        }
        if ((constraints&CONSTRAINT_IDLE) != 0) {
            pw.print(" IDLE");
        }
        if ((constraints&CONSTRAINT_CONNECTIVITY) != 0) {
            pw.print(" CONNECTIVITY");
        }
        if ((constraints&CONSTRAINT_UNMETERED) != 0) {
            pw.print(" UNMETERED");
        }
        if ((constraints&CONSTRAINT_NOT_ROAMING) != 0) {
            pw.print(" NOT_ROAMING");
        }
        if ((constraints&CONSTRAINT_APP_NOT_IDLE) != 0) {
            pw.print(" APP_NOT_IDLE");
        }
        if ((constraints&CONSTRAINT_CONTENT_TRIGGER) != 0) {
            pw.print(" CONTENT_TRIGGER");
        }
        if ((constraints&CONSTRAINT_DEVICE_NOT_DOZING) != 0) {
            pw.print(" DEVICE_NOT_DOZING");
        }
!!!42320823.java!!!	dump(inout pw : PrintWriter, inout prefix : String, inout full : boolean) : void
        pw.print(prefix); UserHandle.formatUid(pw, callingUid);
        pw.print(" tag="); pw.println(tag);
        pw.print(prefix);
        pw.print("Source: uid="); UserHandle.formatUid(pw, getSourceUid());
        pw.print(" user="); pw.print(getSourceUserId());
        pw.print(" pkg="); pw.println(getSourcePackageName());
        if (full) {
            pw.print(prefix); pw.println("JobInfo:"); pw.print(prefix);
            pw.print("  Service: "); pw.println(job.getService().flattenToShortString());
            if (job.isPeriodic()) {
                pw.print(prefix); pw.print("  PERIODIC: interval=");
                TimeUtils.formatDuration(job.getIntervalMillis(), pw);
                pw.print(" flex="); TimeUtils.formatDuration(job.getFlexMillis(), pw);
                pw.println();
            }
            if (job.isPersisted()) {
                pw.print(prefix); pw.println("  PERSISTED");
            }
            if (job.getPriority() != 0) {
                pw.print(prefix); pw.print("  Priority: "); pw.println(job.getPriority());
            }
            if (job.getFlags() != 0) {
                pw.print(prefix); pw.print("  Flags: ");
                pw.println(Integer.toHexString(job.getFlags()));
            }
            pw.print(prefix); pw.print("  Requires: charging=");
            pw.print(job.isRequireCharging()); pw.print(" deviceIdle=");
            pw.println(job.isRequireDeviceIdle());
            if (job.getTriggerContentUris() != null) {
                pw.print(prefix); pw.println("  Trigger content URIs:");
                for (int i = 0; i < job.getTriggerContentUris().length; i++) {
                    JobInfo.TriggerContentUri trig = job.getTriggerContentUris()[i];
                    pw.print(prefix); pw.print("    ");
                    pw.print(Integer.toHexString(trig.getFlags()));
                    pw.print(' '); pw.println(trig.getUri());
                }
                if (job.getTriggerContentUpdateDelay() >= 0) {
                    pw.print(prefix); pw.print("  Trigger update delay: ");
                    TimeUtils.formatDuration(job.getTriggerContentUpdateDelay(), pw);
                    pw.println();
                }
                if (job.getTriggerContentMaxDelay() >= 0) {
                    pw.print(prefix); pw.print("  Trigger max delay: ");
                    TimeUtils.formatDuration(job.getTriggerContentMaxDelay(), pw);
                    pw.println();
                }
            }
            if (job.getNetworkType() != JobInfo.NETWORK_TYPE_NONE) {
                pw.print(prefix); pw.print("  Network type: "); pw.println(job.getNetworkType());
            }
            if (job.getMinLatencyMillis() != 0) {
                pw.print(prefix); pw.print("  Minimum latency: ");
                TimeUtils.formatDuration(job.getMinLatencyMillis(), pw);
                pw.println();
            }
            if (job.getMaxExecutionDelayMillis() != 0) {
                pw.print(prefix); pw.print("  Max execution delay: ");
                TimeUtils.formatDuration(job.getMaxExecutionDelayMillis(), pw);
                pw.println();
            }
            pw.print(prefix); pw.print("  Backoff: policy="); pw.print(job.getBackoffPolicy());
            pw.print(" initial="); TimeUtils.formatDuration(job.getInitialBackoffMillis(), pw);
            pw.println();
            if (job.hasEarlyConstraint()) {
                pw.print(prefix); pw.println("  Has early constraint");
            }
            if (job.hasLateConstraint()) {
                pw.print(prefix); pw.println("  Has late constraint");
            }
        }
        pw.print(prefix); pw.print("Required constraints:");
        dumpConstraints(pw, requiredConstraints);
        pw.println();
        if (full) {
            pw.print(prefix); pw.print("Satisfied constraints:");
            dumpConstraints(pw, satisfiedConstraints);
            pw.println();
            pw.print(prefix); pw.print("Unsatisfied constraints:");
            dumpConstraints(pw, (requiredConstraints & ~satisfiedConstraints));
            pw.println();
            if (dozeWhitelisted) {
                pw.print(prefix); pw.println("Doze whitelisted: true");
            }
        }
        if (changedAuthorities != null) {
            pw.print(prefix); pw.println("Changed authorities:");
            for (int i=0; i<changedAuthorities.size(); i++) {
                pw.print(prefix); pw.print("  "); pw.println(changedAuthorities.valueAt(i));
            }
            if (changedUris != null) {
                pw.print(prefix); pw.println("Changed URIs:");
                for (int i=0; i<changedUris.size(); i++) {
                    pw.print(prefix); pw.print("  "); pw.println(changedUris.valueAt(i));
                }
            }
        }
        pw.print(prefix); pw.print("Earliest run time: ");
        pw.println(formatRunTime(earliestRunTimeElapsedMillis, NO_EARLIEST_RUNTIME));
        pw.print(prefix); pw.print("Latest run time: ");
        pw.println(formatRunTime(latestRunTimeElapsedMillis, NO_LATEST_RUNTIME));
        if (numFailures != 0) {
            pw.print(prefix); pw.print("Num failures: "); pw.println(numFailures);
        }
