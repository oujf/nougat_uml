class JobSchedulerShellCommand
!!!42300087.java!!!	JobSchedulerShellCommand(inout service : JobSchedulerService)
        mInternal = service;
        mPM = AppGlobals.getPackageManager();
!!!42300215.java!!!	onCommand(inout cmd : String) : int
        final PrintWriter pw = getOutPrintWriter();
        try {
            if ("run".equals(cmd)) {
                return runJob();
            } else {
                return handleDefaultCommands(cmd);
            }
        } catch (Exception e) {
            pw.println("Exception: " + e);
        }
        return -1;
!!!42300343.java!!!	runJob() : int
        try {
            final int uid = Binder.getCallingUid();
            final int perm = mPM.checkUidPermission(
                    "android.permission.CHANGE_APP_IDLE_STATE", uid);
            if (perm != PackageManager.PERMISSION_GRANTED) {
                throw new SecurityException("Uid " + uid
                        + " not permitted to force scheduled jobs");
            }
        } catch (RemoteException e) {
            // Can't happen
        }

        final PrintWriter pw = getOutPrintWriter();
        boolean force = false;
        int userId = UserHandle.USER_SYSTEM;

        String opt;
        while ((opt = getNextOption()) != null) {
            switch (opt) {
                case "-f":
                case "--force":
                    force = true;
                    break;

                case "-u":
                case "--user":
                    userId = Integer.parseInt(getNextArgRequired());
                    break;

                default:
                    pw.println("Error: unknown option '" + opt + "'");
                    return -1;
            }
        }

        final String pkgName = getNextArgRequired();
        final int jobId = Integer.parseInt(getNextArgRequired());

        int ret = mInternal.executeRunCommand(pkgName, userId, jobId, force);
        switch (ret) {
            case CMD_ERR_NO_PACKAGE:
                pw.print("Package not found: ");
                pw.print(pkgName);
                pw.print(" / user ");
                pw.println(userId);
                break;

            case CMD_ERR_NO_JOB:
                pw.print("Could not find job ");
                pw.print(jobId);
                pw.print(" in package ");
                pw.print(pkgName);
                pw.print(" / user ");
                pw.println(userId);
                break;

            case CMD_ERR_CONSTRAINTS:
                pw.print("Job ");
                pw.print(jobId);
                pw.print(" in package ");
                pw.print(pkgName);
                pw.print(" / user ");
                pw.print(userId);
                pw.println(" has functional constraints but --force not specified");
                break;

            default:
                // success!
                pw.print("Running job");
                if (force) {
                    pw.print(" [FORCED]");
                }
                pw.println();
                break;
        }
        return ret;
!!!42300471.java!!!	onHelp() : void
        final PrintWriter pw = getOutPrintWriter();

        pw.println("Job scheduler (jobscheduler) commands:");
        pw.println("  help");
        pw.println("    Print this help text.");
        pw.println();
        pw.println("  run [-f | --force] [-u | --user USER_ID] PACKAGE JOB_ID");
        pw.println("    Trigger immediate execution of a specific scheduled job.");
        pw.println("    Options:");
        pw.println("      -f or --force: run the job even if technical constraints such as");
        pw.println("         connectivity are not currently met");
        pw.println("      -u or --user: specify which user's job is to be run; the default is");
        pw.println("         the primary or system user");
        pw.println();
