class SessionStub
!!!42402615.java!!!	destroy() : void
            mService.destroySession(MediaSessionRecord.this);
!!!42402743.java!!!	sendEvent(inout event : String, inout data : Bundle) : void
            mHandler.post(MessageHandler.MSG_SEND_EVENT, event,
                    data == null ? null : new Bundle(data));
!!!42402871.java!!!	getController() : ISessionController
            return mController;
!!!42402999.java!!!	setActive(inout active : boolean) : void
            mIsActive = active;
            mService.updateSession(MediaSessionRecord.this);
            mHandler.post(MessageHandler.MSG_UPDATE_SESSION_STATE);
!!!42403127.java!!!	setFlags(in flags : int) : void
            if ((flags & MediaSession.FLAG_EXCLUSIVE_GLOBAL_PRIORITY) != 0) {
                int pid = getCallingPid();
                int uid = getCallingUid();
                mService.enforcePhoneStatePermission(pid, uid);
            }
            mFlags = flags;
            mHandler.post(MessageHandler.MSG_UPDATE_SESSION_STATE);
!!!42403255.java!!!	setMediaButtonReceiver(inout pi : PendingIntent) : void
            mMediaButtonReceiver = pi;
!!!42403383.java!!!	setLaunchPendingIntent(inout pi : PendingIntent) : void
            mLaunchIntent = pi;
!!!42403511.java!!!	setMetadata(inout metadata : MediaMetadata) : void
            synchronized (mLock) {
                MediaMetadata temp = metadata == null ? null : new MediaMetadata.Builder(metadata)
                        .build();
                // This is to guarantee that the underlying bundle is unparceled
                // before we set it to prevent concurrent reads from throwing an
                // exception
                if (temp != null) {
                    temp.size();
                }
                mMetadata = temp;
            }
            mHandler.post(MessageHandler.MSG_UPDATE_METADATA);
!!!42403639.java!!!	setPlaybackState(inout state : PlaybackState) : void
            int oldState = mPlaybackState == null ? 0 : mPlaybackState.getState();
            int newState = state == null ? 0 : state.getState();
            if (MediaSession.isActiveState(oldState) && newState == PlaybackState.STATE_PAUSED) {
                mLastActiveTime = SystemClock.elapsedRealtime();
            }
            synchronized (mLock) {
                mPlaybackState = state;
            }
            mService.onSessionPlaystateChange(MediaSessionRecord.this, oldState, newState);
            mHandler.post(MessageHandler.MSG_UPDATE_PLAYBACK_STATE);
!!!42403767.java!!!	setQueue(inout queue : ParceledListSlice) : void
            synchronized (mLock) {
                mQueue = queue;
            }
            mHandler.post(MessageHandler.MSG_UPDATE_QUEUE);
!!!42403895.java!!!	setQueueTitle(inout title : CharSequence) : void
            mQueueTitle = title;
            mHandler.post(MessageHandler.MSG_UPDATE_QUEUE_TITLE);
!!!42404023.java!!!	setExtras(inout extras : Bundle) : void
            synchronized (mLock) {
                mExtras = extras == null ? null : new Bundle(extras);
            }
            mHandler.post(MessageHandler.MSG_UPDATE_EXTRAS);
!!!42404151.java!!!	setRatingType(in type : int) : void
            mRatingType = type;
!!!42404279.java!!!	setCurrentVolume(in volume : int) : void
            mCurrentVolume = volume;
            mHandler.post(MessageHandler.MSG_UPDATE_VOLUME);
!!!42404407.java!!!	setPlaybackToLocal(inout attributes : AudioAttributes) : void
            boolean typeChanged;
            synchronized (mLock) {
                typeChanged = mVolumeType == PlaybackInfo.PLAYBACK_TYPE_REMOTE;
                mVolumeType = PlaybackInfo.PLAYBACK_TYPE_LOCAL;
                if (attributes != null) {
                    mAudioAttrs = attributes;
                } else {
                    Log.e(TAG, "Received null audio attributes, using existing attributes");
                }
            }
            if (typeChanged) {
                mService.onSessionPlaybackTypeChanged(MediaSessionRecord.this);
                mHandler.post(MessageHandler.MSG_UPDATE_VOLUME);
            }
!!!42404535.java!!!	setPlaybackToRemote(in control : int, in max : int) : void
            boolean typeChanged;
            synchronized (mLock) {
                typeChanged = mVolumeType == PlaybackInfo.PLAYBACK_TYPE_LOCAL;
                mVolumeType = PlaybackInfo.PLAYBACK_TYPE_REMOTE;
                mVolumeControlType = control;
                mMaxVolume = max;
            }
            if (typeChanged) {
                mService.onSessionPlaybackTypeChanged(MediaSessionRecord.this);
                mHandler.post(MessageHandler.MSG_UPDATE_VOLUME);
            }
!!!42404663.java!!!	getCallingPackage() : String
            return mCallingPackage;
