class UserUsageRequestInfo
!!!42462007.java!!!	UserUsageRequestInfo(inout statsObserver : NetworkStatsObservers, inout request : DataUsageRequest, inout messenger : Messenger, inout binder : IBinder, in callingUid : int, in accessLevel : int)
            super(statsObserver, request, messenger, binder, callingUid, accessLevel);
!!!42462135.java!!!	checkStats() : boolean
            int[] uidsToMonitor = mCollection.getRelevantUids(mAccessLevel, mCallingUid);

            for (int i = 0; i < uidsToMonitor.length; i++) {
                long bytesSoFar = getTotalBytesForNetworkUid(mRequest.template, uidsToMonitor[i]);
                if (bytesSoFar > mRequest.thresholdInBytes) {
                    return true;
                }
            }
            return false;
!!!42462263.java!!!	recordSample(inout statsContext : NetworkStatsObservers::StatsContext) : void
            // Recorder does not need to be locked in this context since only the handler
            // thread will update it. We pass the VPN info so VPN traffic is reattributed to
            // responsible apps.
            mRecorder.recordSnapshotLocked(statsContext.mUidSnapshot, statsContext.mActiveUidIfaces,
                    statsContext.mVpnArray, statsContext.mCurrentTime);
!!!42462391.java!!!	getTotalBytesForNetworkUid(inout template : NetworkTemplate, in uid : int) : long
            try {
                NetworkStatsHistory history = mCollection.getHistory(template, uid,
                        NetworkStats.SET_ALL, NetworkStats.TAG_NONE,
                        NetworkStatsHistory.FIELD_ALL,
                        Long.MIN_VALUE /* start */, Long.MAX_VALUE /* end */,
                        mAccessLevel, mCallingUid);
                return history.getTotalBytes();
            } catch (SecurityException e) {
                if (LOGV) {
                    Slog.w(TAG, "CallerUid " + mCallingUid + " may have lost access to uid "
                            + uid);
                }
                return 0;
            }
