class CountdownConditionProvider
!!!42490167.java!!!	CountdownConditionProvider()
        if (DEBUG) Slog.d(TAG, "new CountdownConditionProvider()");
!!!42490295.java!!!	getComponent() : ComponentName
        return COMPONENT;
!!!42490423.java!!!	isValidConditionId(inout id : Uri) : boolean
        return ZenModeConfig.isValidCountdownConditionId(id);
!!!42490551.java!!!	attachBase(inout base : Context) : void
        attachBaseContext(base);
!!!42490679.java!!!	onBootComplete() : void
        // noop
!!!42490807.java!!!	asInterface() : IConditionProvider
        return (IConditionProvider) onBind(null);
!!!42490935.java!!!	dump(inout pw : PrintWriter, inout filter : NotificationManagerService::DumpFilter) : void
        pw.println("    CountdownConditionProvider:");
        pw.print("      mConnected="); pw.println(mConnected);
        pw.print("      mTime="); pw.println(mTime);
!!!42491063.java!!!	onConnected() : void
        if (DEBUG) Slog.d(TAG, "onConnected");
        mContext.registerReceiver(mReceiver, new IntentFilter(ACTION));
        mConnected = true;
!!!42491191.java!!!	onDestroy() : void
        super.onDestroy();
        if (DEBUG) Slog.d(TAG, "onDestroy");
        if (mConnected) {
            mContext.unregisterReceiver(mReceiver);
        }
        mConnected = false;
!!!42491319.java!!!	onSubscribe(inout conditionId : Uri) : void
        if (DEBUG) Slog.d(TAG, "onSubscribe " + conditionId);
        mTime = ZenModeConfig.tryParseCountdownConditionId(conditionId);
        final AlarmManager alarms = (AlarmManager)
                mContext.getSystemService(Context.ALARM_SERVICE);
        final Intent intent = new Intent(ACTION).putExtra(EXTRA_CONDITION_ID, conditionId)
                .setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
        final PendingIntent pendingIntent = PendingIntent.getBroadcast(mContext, REQUEST_CODE,
                intent, PendingIntent.FLAG_UPDATE_CURRENT);
        alarms.cancel(pendingIntent);
        if (mTime > 0) {
            final long now = System.currentTimeMillis();
            final CharSequence span =
                    DateUtils.getRelativeTimeSpanString(mTime, now, DateUtils.MINUTE_IN_MILLIS);
            if (mTime <= now) {
                // in the past, already false
                notifyCondition(newCondition(mTime, Condition.STATE_FALSE));
            } else {
                // in the future, set an alarm
                alarms.setExact(AlarmManager.RTC_WAKEUP, mTime, pendingIntent);
            }
            if (DEBUG) Slog.d(TAG, String.format(
                    "%s %s for %s, %s in the future (%s), now=%s",
                    (mTime <= now ? "Not scheduling" : "Scheduling"),
                    ACTION, ts(mTime), mTime - now, span, ts(now)));
        }
!!!42491447.java!!!	onUnsubscribe(inout conditionId : Uri) : void
        // noop
!!!42491703.java!!!	newCondition(in time : long, in state : int) : Condition
        return new Condition(ZenModeConfig.toCountdownConditionId(time),
                "", "", "", 0, state,Condition.FLAG_RELEVANT_NOW);
!!!42491831.java!!!	tryParseDescription(inout conditionUri : Uri) : String
        final long time = ZenModeConfig.tryParseCountdownConditionId(conditionUri);
        if (time == 0) return null;
        final long now = System.currentTimeMillis();
        final CharSequence span =
                DateUtils.getRelativeTimeSpanString(time, now, DateUtils.MINUTE_IN_MILLIS);
        return String.format("Scheduled for %s, %s in the future (%s), now=%s",
                ts(time), time - now, span, ts(now));
