class ImportanceHistogram
!!!42526519.java!!!	ImportanceHistogram(inout context : Context, inout prefix : String)
            mContext = context;
            mCount = new int[NUM_IMPORTANCES];
            mCounterNames = new String[NUM_IMPORTANCES];
            mPrefix = prefix;
            for (int i = 0; i < NUM_IMPORTANCES; i++) {
                mCounterNames[i] = mPrefix + IMPORTANCE_NAMES[i];
            }
!!!42526647.java!!!	increment(in imp : int) : void
            imp = imp < 0 ? 0 : imp > NUM_IMPORTANCES ? NUM_IMPORTANCES : imp;
            mCount[imp] ++;
!!!42526775.java!!!	maybeCount(inout prev : NotificationUsageStats::ImportanceHistogram) : void
            for (int i = 0; i < NUM_IMPORTANCES; i++) {
                final int value = mCount[i] - prev.mCount[i];
                if (value > 0) {
                    MetricsLogger.count(mContext, mCounterNames[i], value);
                }
            }
!!!42526903.java!!!	update(inout that : NotificationUsageStats::ImportanceHistogram) : void
            for (int i = 0; i < NUM_IMPORTANCES; i++) {
                mCount[i] = that.mCount[i];
            }
!!!42527031.java!!!	maybePut(inout dump : JSONObject, inout prev : NotificationUsageStats::ImportanceHistogram) : void
            dump.put(mPrefix, new JSONArray(mCount));
!!!42527159.java!!!	toString() : String
            StringBuilder output = new StringBuilder();
            output.append(mPrefix).append(": [");
            for (int i = 0; i < NUM_IMPORTANCES; i++) {
                output.append(mCount[i]);
                if (i < (NUM_IMPORTANCES-1)) {
                    output.append(", ");
                }
            }
            output.append("]");
            return output.toString();
