class LauncherAppsImpl
!!!42588471.java!!!	LauncherAppsImpl(inout context : Context)
            mContext = context;
            mPm = mContext.getPackageManager();
            mUm = (UserManager) mContext.getSystemService(Context.USER_SERVICE);
            mShortcutServiceInternal = Preconditions.checkNotNull(
                    LocalServices.getService(ShortcutServiceInternal.class));
            mShortcutServiceInternal.addListener(mPackageMonitor);
            mCallbackHandler = BackgroundThread.getHandler();
!!!42588599.java!!!	injectBinderCallingUid() : int
            return getCallingUid();
!!!42588727.java!!!	injectCallingUserId() : int
            return UserHandle.getUserId(injectBinderCallingUid());
!!!42588855.java!!!	injectClearCallingIdentity() : long
            return Binder.clearCallingIdentity();
!!!42588983.java!!!	injectRestoreCallingIdentity(in token : long) : void
            Binder.restoreCallingIdentity(token);
!!!42589111.java!!!	getCallingUserId() : int
            return UserHandle.getUserId(injectBinderCallingUid());
!!!42589239.java!!!	addOnAppsChangedListener(inout callingPackage : String, inout listener : IOnAppsChangedListener) : void
            verifyCallingPackage(callingPackage);
            synchronized (mListeners) {
                if (DEBUG) {
                    Log.d(TAG, "Adding listener from " + Binder.getCallingUserHandle());
                }
                if (mListeners.getRegisteredCallbackCount() == 0) {
                    if (DEBUG) {
                        Log.d(TAG, "Starting package monitoring");
                    }
                    startWatchingPackageBroadcasts();
                }
                mListeners.unregister(listener);
                mListeners.register(listener, new BroadcastCookie(UserHandle.of(getCallingUserId()),
                        callingPackage));
            }
!!!42589367.java!!!	removeOnAppsChangedListener(inout listener : IOnAppsChangedListener) : void
            synchronized (mListeners) {
                if (DEBUG) {
                    Log.d(TAG, "Removing listener from " + Binder.getCallingUserHandle());
                }
                mListeners.unregister(listener);
                if (mListeners.getRegisteredCallbackCount() == 0) {
                    stopWatchingPackageBroadcasts();
                }
            }
!!!42589495.java!!!	startWatchingPackageBroadcasts() : void
            mPackageMonitor.register(mContext, UserHandle.ALL, true, mCallbackHandler);
!!!42589623.java!!!	stopWatchingPackageBroadcasts() : void
            if (DEBUG) {
                Log.d(TAG, "Stopped watching for packages");
            }
            mPackageMonitor.unregister();
!!!42589751.java!!!	checkCallbackCount() : void
            synchronized (mListeners) {
                if (DEBUG) {
                    Log.d(TAG, "Callback count = " + mListeners.getRegisteredCallbackCount());
                }
                if (mListeners.getRegisteredCallbackCount() == 0) {
                    stopWatchingPackageBroadcasts();
                }
            }
!!!42589879.java!!!	ensureInUserProfiles(inout userToCheck : UserHandle, inout message : String) : void
            ensureInUserProfiles(userToCheck.getIdentifier(), message);
!!!42590007.java!!!	ensureInUserProfiles(in targetUserId : int, inout message : String) : void
            final int callingUserId = injectCallingUserId();

            if (targetUserId == callingUserId) return;

            long ident = injectClearCallingIdentity();
            try {
                UserInfo callingUserInfo = mUm.getUserInfo(callingUserId);
                UserInfo targetUserInfo = mUm.getUserInfo(targetUserId);
                if (targetUserInfo == null
                        || targetUserInfo.profileGroupId == UserInfo.NO_PROFILE_GROUP_ID
                        || targetUserInfo.profileGroupId != callingUserInfo.profileGroupId) {
                    throw new SecurityException(message);
                }
            } finally {
                injectRestoreCallingIdentity(ident);
            }
!!!42590135.java!!!	verifyCallingPackage(inout callingPackage : String) : void
            int packageUid = -1;
            try {
                packageUid = mPm.getPackageUidAsUser(callingPackage,
                        PackageManager.MATCH_DIRECT_BOOT_AWARE
                                | PackageManager.MATCH_DIRECT_BOOT_UNAWARE
                                | PackageManager.MATCH_UNINSTALLED_PACKAGES,
                        UserHandle.getUserId(getCallingUid()));
            } catch (NameNotFoundException e) {
                Log.e(TAG, "Package not found: " + callingPackage);
            }
            if (packageUid != Binder.getCallingUid()) {
                throw new SecurityException("Calling package name mismatch");
            }
!!!42590263.java!!!	isUserEnabled(inout user : UserHandle) : boolean
            return isUserEnabled(user.getIdentifier());
!!!42590391.java!!!	isUserEnabled(in userId : int) : boolean
            long ident = injectClearCallingIdentity();
            try {
                UserInfo targetUserInfo = mUm.getUserInfo(userId);
                return targetUserInfo != null && targetUserInfo.isEnabled();
            } finally {
                injectRestoreCallingIdentity(ident);
            }
!!!42590519.java!!!	getLauncherActivities(inout packageName : String, inout user : UserHandle) : ParceledListSlice
            ensureInUserProfiles(user, "Cannot retrieve activities for unrelated profile " + user);
            if (!isUserEnabled(user)) {
                return null;
            }

            final Intent mainIntent = new Intent(Intent.ACTION_MAIN, null);
            mainIntent.addCategory(Intent.CATEGORY_LAUNCHER);
            mainIntent.setPackage(packageName);
            long ident = Binder.clearCallingIdentity();
            try {
                List<ResolveInfo> apps = mPm.queryIntentActivitiesAsUser(mainIntent,
                        PackageManager.MATCH_DIRECT_BOOT_AWARE
                                | PackageManager.MATCH_DIRECT_BOOT_UNAWARE,
                        user.getIdentifier());
                return new ParceledListSlice<>(apps);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
!!!42590647.java!!!	resolveActivity(inout component : ComponentName, inout user : UserHandle) : ActivityInfo
            ensureInUserProfiles(user, "Cannot resolve activity for unrelated profile " + user);
            if (!isUserEnabled(user)) {
                return null;
            }

            long ident = Binder.clearCallingIdentity();
            try {
                IPackageManager pm = AppGlobals.getPackageManager();
                return pm.getActivityInfo(component,
                        PackageManager.MATCH_DIRECT_BOOT_AWARE
                                | PackageManager.MATCH_DIRECT_BOOT_UNAWARE,
                        user.getIdentifier());
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
!!!42590775.java!!!	isPackageEnabled(inout packageName : String, inout user : UserHandle) : boolean
            ensureInUserProfiles(user, "Cannot check package for unrelated profile " + user);
            if (!isUserEnabled(user)) {
                return false;
            }

            long ident = Binder.clearCallingIdentity();
            try {
                IPackageManager pm = AppGlobals.getPackageManager();
                PackageInfo info = pm.getPackageInfo(packageName,
                        PackageManager.MATCH_DIRECT_BOOT_AWARE
                                | PackageManager.MATCH_DIRECT_BOOT_UNAWARE,
                        user.getIdentifier());
                return info != null && info.applicationInfo.enabled;
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
!!!42590903.java!!!	getApplicationInfo(inout packageName : String, in flags : int, inout user : UserHandle) : ApplicationInfo
            ensureInUserProfiles(user, "Cannot check package for unrelated profile " + user);
            if (!isUserEnabled(user)) {
                return null;
            }

            long ident = Binder.clearCallingIdentity();
            try {
                IPackageManager pm = AppGlobals.getPackageManager();
                ApplicationInfo info = pm.getApplicationInfo(packageName, flags,
                        user.getIdentifier());
                return info;
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
!!!42591031.java!!!	ensureShortcutPermission(inout callingPackage : String, inout user : UserHandle) : void
            ensureShortcutPermission(callingPackage, user.getIdentifier());
!!!42591159.java!!!	ensureShortcutPermission(inout callingPackage : String, in userId : int) : void
            verifyCallingPackage(callingPackage);
            ensureInUserProfiles(userId, "Cannot start activity for unrelated profile " + userId);

            if (!mShortcutServiceInternal.hasShortcutHostPermission(getCallingUserId(),
                    callingPackage)) {
                throw new SecurityException("Caller can't access shortcut information");
            }
!!!42591287.java!!!	getShortcuts(inout callingPackage : String, in changedSince : long, inout packageName : String, inout shortcutIds : List, inout componentName : ComponentName, in flags : int, inout user : UserHandle) : ParceledListSlice
            ensureShortcutPermission(callingPackage, user);
            if (!isUserEnabled(user)) {
                return new ParceledListSlice<>(new ArrayList(0));
            }
            if (shortcutIds != null && packageName == null) {
                throw new IllegalArgumentException(
                        "To query by shortcut ID, package name must also be set");
            }

            return new ParceledListSlice<>(
                    mShortcutServiceInternal.getShortcuts(getCallingUserId(),
                            callingPackage, changedSince, packageName, shortcutIds,
                            componentName, flags, user.getIdentifier()));
!!!42591415.java!!!	pinShortcuts(inout callingPackage : String, inout packageName : String, inout ids : List<String>, inout user : UserHandle) : void
            ensureShortcutPermission(callingPackage, user);
            if (!isUserEnabled(user)) {
                throw new IllegalStateException("Cannot pin shortcuts for disabled profile "
                        + user);
            }

            mShortcutServiceInternal.pinShortcuts(getCallingUserId(),
                    callingPackage, packageName, ids, user.getIdentifier());
!!!42591543.java!!!	getShortcutIconResId(inout callingPackage : String, inout packageName : String, inout id : String, in userId : int) : int
            ensureShortcutPermission(callingPackage, userId);
            if (!isUserEnabled(userId)) {
                return 0;
            }

            return mShortcutServiceInternal.getShortcutIconResId(getCallingUserId(),
                    callingPackage, packageName, id, userId);
!!!42591671.java!!!	getShortcutIconFd(inout callingPackage : String, inout packageName : String, inout id : String, in userId : int) : ParcelFileDescriptor
            ensureShortcutPermission(callingPackage, userId);
            if (!isUserEnabled(userId)) {
                return null;
            }

            return mShortcutServiceInternal.getShortcutIconFd(getCallingUserId(),
                    callingPackage, packageName, id, userId);
!!!42591799.java!!!	hasShortcutHostPermission(inout callingPackage : String) : boolean
            verifyCallingPackage(callingPackage);
            return mShortcutServiceInternal.hasShortcutHostPermission(getCallingUserId(),
                    callingPackage);
!!!42591927.java!!!	startShortcut(inout callingPackage : String, inout packageName : String, inout shortcutId : String, inout sourceBounds : Rect, inout startActivityOptions : Bundle, in userId : int) : boolean
            verifyCallingPackage(callingPackage);
            ensureInUserProfiles(userId, "Cannot start activity for unrelated profile " + userId);

            if (!isUserEnabled(userId)) {
                throw new IllegalStateException("Cannot start a shortcut for disabled profile "
                        + userId);
            }

            // Even without the permission, pinned shortcuts are always launchable.
            if (!mShortcutServiceInternal.isPinnedByCaller(getCallingUserId(),
                    callingPackage, packageName, shortcutId, userId)) {
                ensureShortcutPermission(callingPackage, userId);
            }

            final Intent intent = mShortcutServiceInternal.createShortcutIntent(getCallingUserId(),
                    callingPackage, packageName, shortcutId, userId);
            if (intent == null) {
                return false;
            }
            // Note the target activity doesn't have to be exported.

            intent.setSourceBounds(sourceBounds);
            prepareIntentForLaunch(intent, sourceBounds);

            final long ident = Binder.clearCallingIdentity();
            try {
                mContext.startActivityAsUser(intent, startActivityOptions, UserHandle.of(userId));
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
            return true;
!!!42592055.java!!!	isActivityEnabled(inout component : ComponentName, inout user : UserHandle) : boolean
            ensureInUserProfiles(user, "Cannot check component for unrelated profile " + user);
            if (!isUserEnabled(user)) {
                return false;
            }

            long ident = Binder.clearCallingIdentity();
            try {
                IPackageManager pm = AppGlobals.getPackageManager();
                ActivityInfo info = pm.getActivityInfo(component,
                        PackageManager.MATCH_DIRECT_BOOT_AWARE
                                | PackageManager.MATCH_DIRECT_BOOT_UNAWARE,
                        user.getIdentifier());
                return info != null;
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
!!!42592183.java!!!	startActivityAsUser(inout component : ComponentName, inout sourceBounds : Rect, inout opts : Bundle, inout user : UserHandle) : void
            ensureInUserProfiles(user, "Cannot start activity for unrelated profile " + user);
            if (!isUserEnabled(user)) {
                throw new IllegalStateException("Cannot start activity for disabled profile "  + user);
            }

            Intent launchIntent = new Intent(Intent.ACTION_MAIN);
            launchIntent.addCategory(Intent.CATEGORY_LAUNCHER);
            prepareIntentForLaunch(launchIntent, sourceBounds);
            launchIntent.setPackage(component.getPackageName());

            long ident = Binder.clearCallingIdentity();
            try {
                IPackageManager pm = AppGlobals.getPackageManager();
                ActivityInfo info = pm.getActivityInfo(component,
                        PackageManager.MATCH_DIRECT_BOOT_AWARE
                                | PackageManager.MATCH_DIRECT_BOOT_UNAWARE,
                        user.getIdentifier());
                if (!info.exported) {
                    throw new SecurityException("Cannot launch non-exported components "
                            + component);
                }

                // Check that the component actually has Intent.CATEGORY_LAUCNCHER
                // as calling startActivityAsUser ignores the category and just
                // resolves based on the component if present.
                List<ResolveInfo> apps = mPm.queryIntentActivitiesAsUser(launchIntent,
                        PackageManager.MATCH_DIRECT_BOOT_AWARE
                                | PackageManager.MATCH_DIRECT_BOOT_UNAWARE,
                        user.getIdentifier());
                final int size = apps.size();
                for (int i = 0; i < size; ++i) {
                    ActivityInfo activityInfo = apps.get(i).activityInfo;
                    if (activityInfo.packageName.equals(component.getPackageName()) &&
                            activityInfo.name.equals(component.getClassName())) {
                        // Found an activity with category launcher that matches
                        // this component so ok to launch.
                        launchIntent.setComponent(component);
                        mContext.startActivityAsUser(launchIntent, opts, user);
                        return;
                    }
                }
                throw new SecurityException("Attempt to launch activity without "
                        + " category Intent.CATEGORY_LAUNCHER " + component);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
!!!42592311.java!!!	prepareIntentForLaunch(inout launchIntent : Intent, inout sourceBounds : Rect) : void
            launchIntent.setSourceBounds(sourceBounds);
            launchIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                    | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
!!!42592439.java!!!	showAppDetailsAsUser(inout component : ComponentName, inout sourceBounds : Rect, inout opts : Bundle, inout user : UserHandle) : void
            ensureInUserProfiles(user, "Cannot show app details for unrelated profile " + user);
            if (!isUserEnabled(user)) {
                throw new IllegalStateException("Cannot show app details for disabled profile "
                        + user);
            }

            long ident = Binder.clearCallingIdentity();
            try {
                String packageName = component.getPackageName();
                Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                        Uri.fromParts("package", packageName, null));
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
                intent.setSourceBounds(sourceBounds);
                mContext.startActivityAsUser(intent, opts, user);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
!!!42592567.java!!!	isEnabledProfileOf(inout user : UserHandle, inout listeningUser : UserHandle, inout debugMsg : String) : boolean
            if (user.getIdentifier() == listeningUser.getIdentifier()) {
                if (DEBUG) Log.d(TAG, "Delivering msg to same user " + debugMsg);
                return true;
            }
            long ident = injectClearCallingIdentity();
            try {
                UserInfo userInfo = mUm.getUserInfo(user.getIdentifier());
                UserInfo listeningUserInfo = mUm.getUserInfo(listeningUser.getIdentifier());
                if (userInfo == null || listeningUserInfo == null
                        || userInfo.profileGroupId == UserInfo.NO_PROFILE_GROUP_ID
                        || userInfo.profileGroupId != listeningUserInfo.profileGroupId
                        || !userInfo.isEnabled()) {
                    if (DEBUG) {
                        Log.d(TAG, "Not delivering msg from " + user + " to " + listeningUser + ":"
                                + debugMsg);
                    }
                    return false;
                } else {
                    if (DEBUG) {
                        Log.d(TAG, "Delivering msg from " + user + " to " + listeningUser + ":"
                                + debugMsg);
                    }
                    return true;
                }
            } finally {
                injectRestoreCallingIdentity(ident);
            }
!!!42592695.java!!!	postToPackageMonitorHandler(inout r : Runnable) : void
            mCallbackHandler.post(r);
