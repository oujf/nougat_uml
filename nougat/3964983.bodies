class InternalCallback
!!!42605495.java!!!	onSessionBadgingChanged(inout session : PackageInstallerSession) : void
            mCallbacks.notifySessionBadgingChanged(session.sessionId, session.userId);
            writeSessionsAsync();
!!!42605623.java!!!	onSessionActiveChanged(inout session : PackageInstallerSession, inout active : boolean) : void
            mCallbacks.notifySessionActiveChanged(session.sessionId, session.userId, active);
!!!42605751.java!!!	onSessionProgressChanged(inout session : PackageInstallerSession, in progress : float) : void
            mCallbacks.notifySessionProgressChanged(session.sessionId, session.userId, progress);
!!!42605879.java!!!	onSessionFinished(in session : PackageInstallerSession, inout success : boolean) : void
            mCallbacks.notifySessionFinished(session.sessionId, session.userId, success);

            mInstallHandler.post(new Runnable() {
                @Override
                public void run() {
                    synchronized (mSessions) {
                        mSessions.remove(session.sessionId);
                        mHistoricalSessions.put(session.sessionId, session);

                        final File appIconFile = buildAppIconFile(session.sessionId);
                        if (appIconFile.exists()) {
                            appIconFile.delete();
                        }

                        writeSessionsLocked();
                    }
                }
            });
!!!42606007.java!!!	onSessionPrepared(inout session : PackageInstallerSession) : void
            // We prepared the destination to write into; we want to persist
            // this, but it's not critical enough to block for.
            writeSessionsAsync();
!!!42606135.java!!!	onSessionSealedBlocking(inout session : PackageInstallerSession) : void
            // It's very important that we block until we've recorded the
            // session as being sealed, since we never want to allow mutation
            // after sealing.
            synchronized (mSessions) {
                writeSessionsLocked();
            }
