class ShortcutUser
!!!42787127.java!!!	ShortcutUser(in userId : int)
        mUserId = userId;
!!!42787255.java!!!	getUserId() : int
        return mUserId;
!!!42787383.java!!!	getAllPackagesForTest() : ArrayMap
        return mPackages;
!!!42787511.java!!!	removePackage(inout s : ShortcutService, inout packageName : String) : ShortcutPackage
        final ShortcutPackage removed = mPackages.remove(packageName);

        s.cleanupBitmapsForPackage(mUserId, packageName);

        return removed;
!!!42787639.java!!!	getAllLaunchersForTest() : ArrayMap
        return mLaunchers;
!!!42787767.java!!!	addLauncher(inout launcher : ShortcutLauncher) : void
        mLaunchers.put(PackageWithUser.of(launcher.getPackageUserId(),
                launcher.getPackageName()), launcher);
!!!42787895.java!!!	removeLauncher(in packageUserId : int, inout packageName : String) : ShortcutLauncher
        return mLaunchers.remove(PackageWithUser.of(packageUserId, packageName));
!!!42788023.java!!!	getPackageShortcuts(inout s : ShortcutService, inout packageName : String) : ShortcutPackage
        ShortcutPackage ret = mPackages.get(packageName);
        if (ret == null) {
            ret = new ShortcutPackage(s, this, mUserId, packageName);
            mPackages.put(packageName, ret);
        } else {
            ret.attemptToRestoreIfNeededAndSave(s);
        }
        return ret;
!!!42788151.java!!!	getLauncherShortcuts(inout s : ShortcutService, inout packageName : String, in launcherUserId : int) : ShortcutLauncher
        final PackageWithUser key = PackageWithUser.of(launcherUserId, packageName);
        ShortcutLauncher ret = mLaunchers.get(key);
        if (ret == null) {
            ret = new ShortcutLauncher(this, mUserId, packageName, launcherUserId);
            mLaunchers.put(key, ret);
        } else {
            ret.attemptToRestoreIfNeededAndSave(s);
        }
        return ret;
!!!42788279.java!!!	forAllPackages(inout callback : Consumer<? super ShortcutPackage>) : void
        final int size = mPackages.size();
        for (int i = 0; i < size; i++) {
            callback.accept(mPackages.valueAt(i));
        }
!!!42788407.java!!!	forAllLaunchers(inout callback : Consumer<? super ShortcutLauncher>) : void
        final int size = mLaunchers.size();
        for (int i = 0; i < size; i++) {
            callback.accept(mLaunchers.valueAt(i));
        }
!!!42788535.java!!!	forAllPackageItems(inout callback : Consumer<? super ShortcutPackageItem>) : void
        forAllLaunchers(callback);
        forAllPackages(callback);
!!!42788663.java!!!	forPackageItem(inout packageName : String, in packageUserId : int, inout callback : Consumer<ShortcutPackageItem>) : void
        forAllPackageItems(spi -> {
            if ((spi.getPackageUserId() == packageUserId)
                    && spi.getPackageName().equals(packageName)) {
                callback.accept(spi);
            }
        });
!!!42788791.java!!!	resetThrottlingIfNeeded(inout s : ShortcutService) : void
        final long currentNo = s.getLocaleChangeSequenceNumber();
        if (mKnownLocaleChangeSequenceNumber < currentNo) {
            if (ShortcutService.DEBUG) {
                Slog.d(TAG, "LocaleChange detected for user " + mUserId);
            }

            mKnownLocaleChangeSequenceNumber = currentNo;

            forAllPackages(p -> p.resetRateLimiting(s));

            s.scheduleSaveUser(mUserId);
        }
!!!42788919.java!!!	handlePackageUpdated(inout s : ShortcutService, inout packageName : String, in newVersionCode : int) : void
        if (!mPackages.containsKey(packageName)) {
            return;
        }
        getPackageShortcuts(s, packageName).handlePackageUpdated(s, newVersionCode);
!!!42789047.java!!!	attemptToRestoreIfNeededAndSave(inout s : ShortcutService, inout packageName : String, in packageUserId : int) : void
        forPackageItem(packageName, packageUserId, spi -> {
            spi.attemptToRestoreIfNeededAndSave(s);
        });
!!!42789175.java!!!	saveToXml(inout s : ShortcutService, inout out : XmlSerializer, inout forBackup : boolean) : void
        out.startTag(null, TAG_ROOT);

        ShortcutService.writeAttr(out, ATTR_KNOWN_LOCALE_CHANGE_SEQUENCE_NUMBER,
                mKnownLocaleChangeSequenceNumber);

        ShortcutService.writeTagValue(out, TAG_LAUNCHER,
                mLauncherComponent);

        // Can't use forEachPackageItem due to the checked exceptions.
        {
            final int size = mLaunchers.size();
            for (int i = 0; i < size; i++) {
                saveShortcutPackageItem(s, out, mLaunchers.valueAt(i), forBackup);
            }
        }
        {
            final int size = mPackages.size();
            for (int i = 0; i < size; i++) {
                saveShortcutPackageItem(s, out, mPackages.valueAt(i), forBackup);
            }
        }

        out.endTag(null, TAG_ROOT);
!!!42789303.java!!!	saveShortcutPackageItem(inout s : ShortcutService, inout out : XmlSerializer, inout spi : ShortcutPackageItem, inout forBackup : boolean) : void
        if (forBackup) {
            if (!s.shouldBackupApp(spi.getPackageName(), spi.getPackageUserId())) {
                return; // Don't save.
            }
            if (spi.getPackageUserId() != spi.getOwnerUserId()) {
                return; // Don't save cross-user information.
            }
        }
        spi.saveToXml(out, forBackup);
!!!42789431.java!!!	loadFromXml(inout s : ShortcutService, inout parser : XmlPullParser, in userId : int, inout fromBackup : boolean) : ShortcutUser
        final ShortcutUser ret = new ShortcutUser(userId);

        ret.mKnownLocaleChangeSequenceNumber = ShortcutService.parseLongAttribute(parser,
                ATTR_KNOWN_LOCALE_CHANGE_SEQUENCE_NUMBER);

        final int outerDepth = parser.getDepth();
        int type;
        while ((type = parser.next()) != XmlPullParser.END_DOCUMENT
                && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
            if (type != XmlPullParser.START_TAG) {
                continue;
            }
            final int depth = parser.getDepth();
            final String tag = parser.getName();

            if (depth == outerDepth + 1) {
                switch (tag) {
                    case TAG_LAUNCHER: {
                        ret.mLauncherComponent = ShortcutService.parseComponentNameAttribute(
                                parser, ATTR_VALUE);
                        continue;
                    }
                    case ShortcutPackage.TAG_ROOT: {
                        final ShortcutPackage shortcuts = ShortcutPackage.loadFromXml(
                                s, ret, parser, fromBackup);

                        // Don't use addShortcut(), we don't need to save the icon.
                        ret.mPackages.put(shortcuts.getPackageName(), shortcuts);
                        continue;
                    }

                    case ShortcutLauncher.TAG_ROOT: {
                        ret.addLauncher(
                                ShortcutLauncher.loadFromXml(parser, ret, userId, fromBackup));
                        continue;
                    }
                }
            }
            ShortcutService.warnForInvalidTag(depth, tag);
        }
        return ret;
!!!42789559.java!!!	getLauncherComponent() : ComponentName
        return mLauncherComponent;
!!!42789687.java!!!	setLauncherComponent(inout s : ShortcutService, inout launcherComponent : ComponentName) : void
        if (Objects.equal(mLauncherComponent, launcherComponent)) {
            return;
        }
        mLauncherComponent = launcherComponent;
        s.scheduleSaveUser(mUserId);
!!!42789815.java!!!	resetThrottling() : void
        for (int i = mPackages.size() - 1; i >= 0; i--) {
            mPackages.valueAt(i).resetThrottling();
        }
!!!42789943.java!!!	dump(inout s : ShortcutService, inout pw : PrintWriter, inout prefix : String) : void
        pw.print(prefix);
        pw.print("User: ");
        pw.print(mUserId);
        pw.print("  Known locale seq#: ");
        pw.print(mKnownLocaleChangeSequenceNumber);
        pw.println();

        prefix += prefix + "  ";

        pw.print(prefix);
        pw.print("Default launcher: ");
        pw.print(mLauncherComponent);
        pw.println();

        for (int i = 0; i < mLaunchers.size(); i++) {
            mLaunchers.valueAt(i).dump(s, pw, prefix);
        }

        for (int i = 0; i < mPackages.size(); i++) {
            mPackages.valueAt(i).dump(s, pw, prefix);
        }

        pw.println();
        pw.print(prefix);
        pw.println("Bitmap directories: ");
        dumpDirectorySize(s, pw, prefix + "  ", s.getUserBitmapFilePath(mUserId));
!!!42790071.java!!!	dumpDirectorySize(inout s : ShortcutService, inout pw : PrintWriter, inout prefix : String, inout path : File) : void
        int numFiles = 0;
        long size = 0;
        final File[] children = path.listFiles();
        if (children != null) {
            for (File child : path.listFiles()) {
                if (child.isFile()) {
                    numFiles++;
                    size += child.length();
                } else if (child.isDirectory()) {
                    dumpDirectorySize(s, pw, prefix + "  ", child);
                }
            }
        }
        pw.print(prefix);
        pw.print("Path: ");
        pw.print(path.getName());
        pw.print("/ has ");
        pw.print(numFiles);
        pw.print(" files, size=");
        pw.print(size);
        pw.print(" (");
        pw.print(Formatter.formatFileSize(s.mContext, size));
        pw.println(")");
