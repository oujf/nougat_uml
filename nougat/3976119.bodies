class LocalService
!!!42777399.java!!!	getShortcuts(in launcherUserId : int, inout callingPackage : String, in changedSince : long, inout packageName : String, inout shortcutIds : List<String>, inout componentName : ComponentName, in queryFlags : int, in userId : int) : ShortcutInfo
            final ArrayList<ShortcutInfo> ret = new ArrayList<>();
            final int cloneFlag =
                    ((queryFlags & ShortcutQuery.FLAG_GET_KEY_FIELDS_ONLY) == 0)
                            ? ShortcutInfo.CLONE_REMOVE_FOR_LAUNCHER
                            : ShortcutInfo.CLONE_REMOVE_NON_KEY_INFO;
            if (packageName == null) {
                shortcutIds = null; // LauncherAppsService already threw for it though.
            }

            synchronized (mLock) {
                getLauncherShortcutsLocked(callingPackage, userId, launcherUserId)
                        .attemptToRestoreIfNeededAndSave(ShortcutService.this);

                if (packageName != null) {
                    getShortcutsInnerLocked(launcherUserId,
                            callingPackage, packageName, shortcutIds, changedSince,
                            componentName, queryFlags, userId, ret, cloneFlag);
                } else {
                    final List<String> shortcutIdsF = shortcutIds;
                    getUserShortcutsLocked(userId).forAllPackages(p -> {
                        getShortcutsInnerLocked(launcherUserId,
                                callingPackage, p.getPackageName(), shortcutIdsF, changedSince,
                                componentName, queryFlags, userId, ret, cloneFlag);
                    });
                }
            }
            return ret;
!!!42777527.java!!!	getShortcutsInnerLocked(in launcherUserId : int, inout callingPackage : String, inout packageName : String, inout shortcutIds : List<String>, in changedSince : long, inout componentName : ComponentName, in queryFlags : int, in userId : int, inout ret : ArrayList<ShortcutInfo>, in cloneFlag : int) : void
            final ArraySet<String> ids = shortcutIds == null ? null
                    : new ArraySet<>(shortcutIds);

            getPackageShortcutsLocked(packageName, userId).findAll(ShortcutService.this, ret,
                    (ShortcutInfo si) -> {
                        if (si.getLastChangedTimestamp() < changedSince) {
                            return false;
                        }
                        if (ids != null && !ids.contains(si.getId())) {
                            return false;
                        }
                        if (componentName != null
                                && !componentName.equals(si.getActivityComponent())) {
                            return false;
                        }
                        final boolean matchDynamic =
                                ((queryFlags & ShortcutQuery.FLAG_GET_DYNAMIC) != 0)
                                        && si.isDynamic();
                        final boolean matchPinned =
                                ((queryFlags & ShortcutQuery.FLAG_GET_PINNED) != 0)
                                        && si.isPinned();
                        return matchDynamic || matchPinned;
                    }, cloneFlag, callingPackage, launcherUserId);
!!!42777655.java!!!	isPinnedByCaller(in launcherUserId : int, inout callingPackage : String, inout packageName : String, inout shortcutId : String, in userId : int) : boolean
            Preconditions.checkStringNotEmpty(packageName, "packageName");
            Preconditions.checkStringNotEmpty(shortcutId, "shortcutId");

            synchronized (mLock) {
                getLauncherShortcutsLocked(callingPackage, userId, launcherUserId)
                        .attemptToRestoreIfNeededAndSave(ShortcutService.this);

                final ShortcutInfo si = getShortcutInfoLocked(
                        launcherUserId, callingPackage, packageName, shortcutId, userId);
                return si != null && si.isPinned();
            }
!!!42777783.java!!!	getShortcutInfoLocked(in launcherUserId : int, inout callingPackage : String, inout packageName : String, inout shortcutId : String, in userId : int) : ShortcutInfo
            Preconditions.checkStringNotEmpty(packageName, "packageName");
            Preconditions.checkStringNotEmpty(shortcutId, "shortcutId");

            final ArrayList<ShortcutInfo> list = new ArrayList<>(1);
            getPackageShortcutsLocked(packageName, userId).findAll(
                    ShortcutService.this, list,
                    (ShortcutInfo si) -> shortcutId.equals(si.getId()),
                    /* clone flags=*/ 0, callingPackage, launcherUserId);
            return list.size() == 0 ? null : list.get(0);
!!!42777911.java!!!	pinShortcuts(in launcherUserId : int, inout callingPackage : String, inout packageName : String, inout shortcutIds : List<String>, in userId : int) : void
            // Calling permission must be checked by LauncherAppsImpl.
            Preconditions.checkStringNotEmpty(packageName, "packageName");
            Preconditions.checkNotNull(shortcutIds, "shortcutIds");

            synchronized (mLock) {
                final ShortcutLauncher launcher =
                        getLauncherShortcutsLocked(callingPackage, userId, launcherUserId);
                launcher.attemptToRestoreIfNeededAndSave(ShortcutService.this);

                launcher.pinShortcuts(
                        ShortcutService.this, userId, packageName, shortcutIds);
            }
            packageShortcutsChanged(packageName, userId);
!!!42778039.java!!!	createShortcutIntent(in launcherUserId : int, inout callingPackage : String, inout packageName : String, inout shortcutId : String, in userId : int) : Intent
            // Calling permission must be checked by LauncherAppsImpl.
            Preconditions.checkStringNotEmpty(packageName, "packageName can't be empty");
            Preconditions.checkStringNotEmpty(shortcutId, "shortcutId can't be empty");

            synchronized (mLock) {
                getLauncherShortcutsLocked(callingPackage, userId, launcherUserId)
                        .attemptToRestoreIfNeededAndSave(ShortcutService.this);

                // Make sure the shortcut is actually visible to the launcher.
                final ShortcutInfo si = getShortcutInfoLocked(
                        launcherUserId, callingPackage, packageName, shortcutId, userId);
                // "si == null" should suffice here, but check the flags too just to make sure.
                if (si == null || !(si.isDynamic() || si.isPinned())) {
                    return null;
                }
                return si.getIntent();
            }
!!!42778167.java!!!	addListener(inout listener : ShortcutServiceInternal::ShortcutChangeListener) : void
            synchronized (mLock) {
                mListeners.add(Preconditions.checkNotNull(listener));
            }
!!!42778295.java!!!	getShortcutIconResId(in launcherUserId : int, inout callingPackage : String, inout packageName : String, inout shortcutId : String, in userId : int) : int
            Preconditions.checkNotNull(callingPackage, "callingPackage");
            Preconditions.checkNotNull(packageName, "packageName");
            Preconditions.checkNotNull(shortcutId, "shortcutId");

            synchronized (mLock) {
                getLauncherShortcutsLocked(callingPackage, userId, launcherUserId)
                        .attemptToRestoreIfNeededAndSave(ShortcutService.this);

                final ShortcutInfo shortcutInfo = getPackageShortcutsLocked(
                        packageName, userId).findShortcutById(shortcutId);
                return (shortcutInfo != null && shortcutInfo.hasIconResource())
                        ? shortcutInfo.getIconResourceId() : 0;
            }
!!!42778423.java!!!	getShortcutIconFd(in launcherUserId : int, inout callingPackage : String, inout packageName : String, inout shortcutId : String, in userId : int) : ParcelFileDescriptor
            Preconditions.checkNotNull(callingPackage, "callingPackage");
            Preconditions.checkNotNull(packageName, "packageName");
            Preconditions.checkNotNull(shortcutId, "shortcutId");

            synchronized (mLock) {
                getLauncherShortcutsLocked(callingPackage, userId, launcherUserId)
                        .attemptToRestoreIfNeededAndSave(ShortcutService.this);

                final ShortcutInfo shortcutInfo = getPackageShortcutsLocked(
                        packageName, userId).findShortcutById(shortcutId);
                if (shortcutInfo == null || !shortcutInfo.hasIconFile()) {
                    return null;
                }
                try {
                    if (shortcutInfo.getBitmapPath() == null) {
                        Slog.w(TAG, "null bitmap detected in getShortcutIconFd()");
                        return null;
                    }
                    return ParcelFileDescriptor.open(
                            new File(shortcutInfo.getBitmapPath()),
                            ParcelFileDescriptor.MODE_READ_ONLY);
                } catch (FileNotFoundException e) {
                    Slog.e(TAG, "Icon file not found: " + shortcutInfo.getBitmapPath());
                    return null;
                }
            }
!!!42778551.java!!!	hasShortcutHostPermission(in launcherUserId : int, inout callingPackage : String) : boolean
            return ShortcutService.this.hasShortcutHostPermission(callingPackage, launcherUserId);
!!!42778679.java!!!	onSystemLocaleChangedNoLock() : void
            if (!FEATURE_ENABLED) {
                return;
            }
            // DO NOT HOLD ANY LOCKS HERE.

            // We want to reset throttling for all packages for all users.  But we can't just do so
            // here because:
            // - We can't load/save users that are locked.
            // - Even for loaded users, resetting the counters would require us to hold mLock.
            //
            // So we use a "pull" model instead.  In here, we just increment the "locale change
            // sequence number".  Each ShortcutUser has the "last known locale change sequence".
            //
            // This allows ShortcutUser's to detect the system locale change, so they can reset
            // counters.
            mLocaleChangeSequenceNumber.incrementAndGet();
            postToHandler(() -> scheduleSaveBaseState());
