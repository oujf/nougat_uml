class DeviceAdminInfo
!!!2342327.java!!!	DeviceAdminInfo(inout context : Context, inout resolveInfo : ResolveInfo)
        this(context, resolveInfo.activityInfo);
!!!2342455.java!!!	DeviceAdminInfo(inout context : Context, inout activityInfo : ActivityInfo)
        mActivityInfo = activityInfo;

        PackageManager pm = context.getPackageManager();

        XmlResourceParser parser = null;
        try {
            parser = mActivityInfo.loadXmlMetaData(pm, DeviceAdminReceiver.DEVICE_ADMIN_META_DATA);
            if (parser == null) {
                throw new XmlPullParserException("No "
                        + DeviceAdminReceiver.DEVICE_ADMIN_META_DATA + " meta-data");
            }

            Resources res = pm.getResourcesForApplication(mActivityInfo.applicationInfo);

            AttributeSet attrs = Xml.asAttributeSet(parser);

            int type;
            while ((type=parser.next()) != XmlPullParser.END_DOCUMENT
                    && type != XmlPullParser.START_TAG) {
            }

            String nodeName = parser.getName();
            if (!"device-admin".equals(nodeName)) {
                throw new XmlPullParserException(
                        "Meta-data does not start with device-admin tag");
            }

            TypedArray sa = res.obtainAttributes(attrs,
                    com.android.internal.R.styleable.DeviceAdmin);

            mVisible = sa.getBoolean(
                    com.android.internal.R.styleable.DeviceAdmin_visible, true);

            sa.recycle();

            int outerDepth = parser.getDepth();
            while ((type=parser.next()) != XmlPullParser.END_DOCUMENT
                   && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
                if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
                    continue;
                }
                String tagName = parser.getName();
                if (tagName.equals("uses-policies")) {
                    int innerDepth = parser.getDepth();
                    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT
                           && (type != XmlPullParser.END_TAG || parser.getDepth() > innerDepth)) {
                        if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
                            continue;
                        }
                        String policyName = parser.getName();
                        Integer val = sKnownPolicies.get(policyName);
                        if (val != null) {
                            mUsesPolicies |= 1 << val.intValue();
                        } else {
                            Log.w(TAG, "Unknown tag under uses-policies of "
                                    + getComponent() + ": " + policyName);
                        }
                    }
                }
            }
        } catch (NameNotFoundException e) {
            throw new XmlPullParserException(
                    "Unable to create context for: " + mActivityInfo.packageName);
        } finally {
            if (parser != null) parser.close();
        }
!!!2342583.java!!!	DeviceAdminInfo(inout source : Parcel)
        mActivityInfo = ActivityInfo.CREATOR.createFromParcel(source);
        mUsesPolicies = source.readInt();
!!!2342711.java!!!	getPackageName() : String
        return mActivityInfo.packageName;
!!!2342839.java!!!	getReceiverName() : String
        return mActivityInfo.name;
!!!2342967.java!!!	getActivityInfo() : ActivityInfo
        return mActivityInfo;
!!!2343095.java!!!	getComponent() : ComponentName
        return new ComponentName(mActivityInfo.packageName,
                mActivityInfo.name);
!!!2343223.java!!!	loadLabel(inout pm : PackageManager) : CharSequence
        return mActivityInfo.loadLabel(pm);
!!!2343351.java!!!	loadDescription(inout pm : PackageManager) : CharSequence
        if (mActivityInfo.descriptionRes != 0) {
            return pm.getText(mActivityInfo.packageName,
                    mActivityInfo.descriptionRes, mActivityInfo.applicationInfo);
        }
        throw new NotFoundException();
!!!2343479.java!!!	loadIcon(inout pm : PackageManager) : Drawable
        return mActivityInfo.loadIcon(pm);
!!!2343607.java!!!	isVisible() : boolean
        return mVisible;
!!!2343735.java!!!	usesPolicy(in policyIdent : int) : boolean
        return (mUsesPolicies & (1<<policyIdent)) != 0;
!!!2343863.java!!!	getTagForPolicy(in policyIdent : int) : String
        return sRevKnownPolicies.get(policyIdent).tag;
!!!2343991.java!!!	getUsedPolicies() : DeviceAdminInfo::PolicyInfo
        ArrayList<PolicyInfo> res = new ArrayList<PolicyInfo>();
        for (int i=0; i<sPoliciesDisplayOrder.size(); i++) {
            PolicyInfo pi = sPoliciesDisplayOrder.get(i);
            if (usesPolicy(pi.ident)) {
                res.add(pi);
            }
        }
        return res;
!!!2344119.java!!!	writePoliciesToXml(inout out : XmlSerializer) : void
        out.attribute(null, "flags", Integer.toString(mUsesPolicies));
!!!2344247.java!!!	readPoliciesFromXml(inout parser : XmlPullParser) : void
        mUsesPolicies = Integer.parseInt(
                parser.getAttributeValue(null, "flags"));
!!!2344375.java!!!	dump(inout pw : Printer, inout prefix : String) : void
        pw.println(prefix + "Receiver:");
        mActivityInfo.dump(pw, prefix + "  ");
!!!2344503.java!!!	toString() : String
        return "DeviceAdminInfo{" + mActivityInfo.name + "}";
!!!2344631.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        mActivityInfo.writeToParcel(dest, flags);
        dest.writeInt(mUsesPolicies);
!!!2344759.java!!!	describeContents() : int
        return 0;
