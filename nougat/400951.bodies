class ViewNode
!!!2388663.java!!!	ViewNode(inout reader : AssistStructure::ParcelTransferReader, in nestingLevel : int)
            final Parcel in = reader.readParcel(VALIDATE_VIEW_TOKEN, nestingLevel);
            reader.mNumReadViews++;
            final PooledStringReader preader = reader.mStringReader;
            mClassName = preader.readString();
            mFlags = in.readInt();
            final int flags = mFlags;
            if ((flags&FLAGS_HAS_ID) != 0) {
                mId = in.readInt();
                if (mId != 0) {
                    mIdEntry = preader.readString();
                    if (mIdEntry != null) {
                        mIdType = preader.readString();
                        mIdPackage = preader.readString();
                    }
                }
            }
            if ((flags&FLAGS_HAS_LARGE_COORDS) != 0) {
                mX = in.readInt();
                mY = in.readInt();
                mWidth = in.readInt();
                mHeight = in.readInt();
            } else {
                int val = in.readInt();
                mX = val&0x7fff;
                mY = (val>>16)&0x7fff;
                val = in.readInt();
                mWidth = val&0x7fff;
                mHeight = (val>>16)&0x7fff;
            }
            if ((flags&FLAGS_HAS_SCROLL) != 0) {
                mScrollX = in.readInt();
                mScrollY = in.readInt();
            }
            if ((flags&FLAGS_HAS_MATRIX) != 0) {
                mMatrix = new Matrix();
                in.readFloatArray(reader.mTmpMatrix);
                mMatrix.setValues(reader.mTmpMatrix);
            }
            if ((flags&FLAGS_HAS_ELEVATION) != 0) {
                mElevation = in.readFloat();
            }
            if ((flags&FLAGS_HAS_ALPHA) != 0) {
                mAlpha = in.readFloat();
            }
            if ((flags&FLAGS_HAS_CONTENT_DESCRIPTION) != 0) {
                mContentDescription = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(in);
            }
            if ((flags&FLAGS_HAS_TEXT) != 0) {
                mText = new ViewNodeText(in, (flags&FLAGS_HAS_COMPLEX_TEXT) == 0);
            }
            if ((flags&FLAGS_HAS_EXTRAS) != 0) {
                mExtras = in.readBundle();
            }
            if ((flags&FLAGS_HAS_CHILDREN) != 0) {
                final int NCHILDREN = in.readInt();
                if (DEBUG_PARCEL_TREE || DEBUG_PARCEL_CHILDREN) Log.d(TAG,
                        "Preparing to read " + NCHILDREN
                                + " children: @ #" + reader.mNumReadViews
                                + ", level " + nestingLevel);
                mChildren = new ViewNode[NCHILDREN];
                for (int i=0; i<NCHILDREN; i++) {
                    mChildren[i] = new ViewNode(reader, nestingLevel + 1);
                }
            }
!!!2388791.java!!!	writeSelfToParcel(inout out : Parcel, inout pwriter : PooledStringWriter, inout tmpMatrix : float) : int
            int flags = mFlags & ~FLAGS_ALL_CONTROL;
            if (mId != View.NO_ID) {
                flags |= FLAGS_HAS_ID;
            }
            if ((mX&~0x7fff) != 0 || (mY&~0x7fff) != 0
                    || (mWidth&~0x7fff) != 0 | (mHeight&~0x7fff) != 0) {
                flags |= FLAGS_HAS_LARGE_COORDS;
            }
            if (mScrollX != 0 || mScrollY != 0) {
                flags |= FLAGS_HAS_SCROLL;
            }
            if (mMatrix != null) {
                flags |= FLAGS_HAS_MATRIX;
            }
            if (mElevation != 0) {
                flags |= FLAGS_HAS_ELEVATION;
            }
            if (mAlpha != 1.0f) {
                flags |= FLAGS_HAS_ALPHA;
            }
            if (mContentDescription != null) {
                flags |= FLAGS_HAS_CONTENT_DESCRIPTION;
            }
            if (mText != null) {
                flags |= FLAGS_HAS_TEXT;
                if (!mText.isSimple()) {
                    flags |= FLAGS_HAS_COMPLEX_TEXT;
                }
            }
            if (mExtras != null) {
                flags |= FLAGS_HAS_EXTRAS;
            }
            if (mChildren != null) {
                flags |= FLAGS_HAS_CHILDREN;
            }

            pwriter.writeString(mClassName);
            out.writeInt(flags);
            if ((flags&FLAGS_HAS_ID) != 0) {
                out.writeInt(mId);
                if (mId != 0) {
                    pwriter.writeString(mIdEntry);
                    if (mIdEntry != null) {
                        pwriter.writeString(mIdType);
                        pwriter.writeString(mIdPackage);
                    }
                }
            }
            if ((flags&FLAGS_HAS_LARGE_COORDS) != 0) {
                out.writeInt(mX);
                out.writeInt(mY);
                out.writeInt(mWidth);
                out.writeInt(mHeight);
            } else {
                out.writeInt((mY<<16) | mX);
                out.writeInt((mHeight<<16) | mWidth);
            }
            if ((flags&FLAGS_HAS_SCROLL) != 0) {
                out.writeInt(mScrollX);
                out.writeInt(mScrollY);
            }
            if ((flags&FLAGS_HAS_MATRIX) != 0) {
                mMatrix.getValues(tmpMatrix);
                out.writeFloatArray(tmpMatrix);
            }
            if ((flags&FLAGS_HAS_ELEVATION) != 0) {
                out.writeFloat(mElevation);
            }
            if ((flags&FLAGS_HAS_ALPHA) != 0) {
                out.writeFloat(mAlpha);
            }
            if ((flags&FLAGS_HAS_CONTENT_DESCRIPTION) != 0) {
                TextUtils.writeToParcel(mContentDescription, out, 0);
            }
            if ((flags&FLAGS_HAS_TEXT) != 0) {
                mText.writeToParcel(out, (flags&FLAGS_HAS_COMPLEX_TEXT) == 0);
            }
            if ((flags&FLAGS_HAS_EXTRAS) != 0) {
                out.writeBundle(mExtras);
            }
            return flags;
!!!2388919.java!!!	getId() : int
            return mId;
!!!2389047.java!!!	getIdPackage() : String
            return mIdPackage;
!!!2389175.java!!!	getIdType() : String
            return mIdType;
!!!2389303.java!!!	getIdEntry() : String
            return mIdEntry;
!!!2389431.java!!!	getLeft() : int
            return mX;
!!!2389559.java!!!	getTop() : int
            return mY;
!!!2389687.java!!!	getScrollX() : int
            return mScrollX;
!!!2389815.java!!!	getScrollY() : int
            return mScrollY;
!!!2389943.java!!!	getWidth() : int
            return mWidth;
!!!2390071.java!!!	getHeight() : int
            return mHeight;
!!!2390199.java!!!	getTransformation() : Matrix
            return mMatrix;
!!!2390327.java!!!	getElevation() : float
            return mElevation;
!!!2390455.java!!!	getAlpha() : float
            return mAlpha;
!!!2390583.java!!!	getVisibility() : int
            return mFlags&ViewNode.FLAGS_VISIBILITY_MASK;
!!!2390711.java!!!	isAssistBlocked() : boolean
            return (mFlags&ViewNode.FLAGS_ASSIST_BLOCKED) != 0;
!!!2390839.java!!!	isEnabled() : boolean
            return (mFlags&ViewNode.FLAGS_DISABLED) == 0;
!!!2390967.java!!!	isClickable() : boolean
            return (mFlags&ViewNode.FLAGS_CLICKABLE) != 0;
!!!2391095.java!!!	isFocusable() : boolean
            return (mFlags&ViewNode.FLAGS_FOCUSABLE) != 0;
!!!2391223.java!!!	isFocused() : boolean
            return (mFlags&ViewNode.FLAGS_FOCUSED) != 0;
!!!2391351.java!!!	isAccessibilityFocused() : boolean
            return (mFlags&ViewNode.FLAGS_ACCESSIBILITY_FOCUSED) != 0;
!!!2391479.java!!!	isCheckable() : boolean
            return (mFlags&ViewNode.FLAGS_CHECKABLE) != 0;
!!!2391607.java!!!	isChecked() : boolean
            return (mFlags&ViewNode.FLAGS_CHECKED) != 0;
!!!2391735.java!!!	isSelected() : boolean
            return (mFlags&ViewNode.FLAGS_SELECTED) != 0;
!!!2391863.java!!!	isActivated() : boolean
            return (mFlags&ViewNode.FLAGS_ACTIVATED) != 0;
!!!2391991.java!!!	isLongClickable() : boolean
            return (mFlags&ViewNode.FLAGS_LONG_CLICKABLE) != 0;
!!!2392119.java!!!	isContextClickable() : boolean
            return (mFlags&ViewNode.FLAGS_CONTEXT_CLICKABLE) != 0;
!!!2392247.java!!!	getClassName() : String
            return mClassName;
!!!2392375.java!!!	getContentDescription() : CharSequence
            return mContentDescription;
!!!2392503.java!!!	getText() : CharSequence
            return mText != null ? mText.mText : null;
!!!2392631.java!!!	getTextSelectionStart() : int
            return mText != null ? mText.mTextSelectionStart : -1;
!!!2392759.java!!!	getTextSelectionEnd() : int
            return mText != null ? mText.mTextSelectionEnd : -1;
!!!2392887.java!!!	getTextColor() : int
            return mText != null ? mText.mTextColor : TEXT_COLOR_UNDEFINED;
!!!2393015.java!!!	getTextBackgroundColor() : int
            return mText != null ? mText.mTextBackgroundColor : TEXT_COLOR_UNDEFINED;
!!!2393143.java!!!	getTextSize() : float
            return mText != null ? mText.mTextSize : 0;
!!!2393271.java!!!	getTextStyle() : int
            return mText != null ? mText.mTextStyle : 0;
!!!2393399.java!!!	getTextLineCharOffsets() : int
            return mText != null ? mText.mLineCharOffsets : null;
!!!2393527.java!!!	getTextLineBaselines() : int
            return mText != null ? mText.mLineBaselines : null;
!!!2393655.java!!!	getHint() : String
            return mText != null ? mText.mHint : null;
!!!2393783.java!!!	getExtras() : Bundle
            return mExtras;
!!!2393911.java!!!	getChildCount() : int
            return mChildren != null ? mChildren.length : 0;
!!!2394039.java!!!	getChildAt(in index : int) : AssistStructure::ViewNode
            return mChildren[index];
