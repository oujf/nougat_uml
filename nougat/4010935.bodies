class Client
!!!43271479.java!!!	Client(inout token : IBinder)
            mToken = token;
            mUid = Binder.getCallingUid();
            mPid = Binder.getCallingPid();
!!!43271607.java!!!	getUid() : int
            return mUid;
!!!43271735.java!!!	addListener(inout listener : IMidiDeviceListener) : void
            // Use asBinder() so that we can match it in removeListener().
            // The listener proxy objects themselves do not match.
            mListeners.put(listener.asBinder(), listener);
!!!43271863.java!!!	removeListener(inout listener : IMidiDeviceListener) : void
            mListeners.remove(listener.asBinder());
            if (mListeners.size() == 0 && mDeviceConnections.size() == 0) {
                close();
            }
!!!43271991.java!!!	addDeviceConnection(inout device : MidiService::Device, inout callback : IMidiDeviceOpenCallback) : void
            DeviceConnection connection = new DeviceConnection(device, this, callback);
            mDeviceConnections.put(connection.getToken(), connection);
            device.addDeviceConnection(connection);
!!!43272119.java!!!	removeDeviceConnection(inout token : IBinder) : void
            DeviceConnection connection = mDeviceConnections.remove(token);
            if (connection != null) {
                connection.getDevice().removeDeviceConnection(connection);
            }
            if (mListeners.size() == 0 && mDeviceConnections.size() == 0) {
                close();
            }
!!!43272247.java!!!	removeDeviceConnection(inout connection : MidiService::DeviceConnection) : void
            mDeviceConnections.remove(connection.getToken());
            if (mListeners.size() == 0 && mDeviceConnections.size() == 0) {
                close();
            }
!!!43272375.java!!!	deviceAdded(inout device : MidiService::Device) : void
            // ignore private devices that our client cannot access
            if (!device.isUidAllowed(mUid)) return;

            MidiDeviceInfo deviceInfo = device.getDeviceInfo();
            try {
                for (IMidiDeviceListener listener : mListeners.values()) {
                    listener.onDeviceAdded(deviceInfo);
                }
            } catch (RemoteException e) {
                Log.e(TAG, "remote exception", e);
            }
!!!43272503.java!!!	deviceRemoved(inout device : MidiService::Device) : void
            // ignore private devices that our client cannot access
            if (!device.isUidAllowed(mUid)) return;

            MidiDeviceInfo deviceInfo = device.getDeviceInfo();
            try {
                for (IMidiDeviceListener listener : mListeners.values()) {
                    listener.onDeviceRemoved(deviceInfo);
                }
            } catch (RemoteException e) {
                Log.e(TAG, "remote exception", e);
            }
!!!43272631.java!!!	deviceStatusChanged(inout device : MidiService::Device, inout status : MidiDeviceStatus) : void
            // ignore private devices that our client cannot access
            if (!device.isUidAllowed(mUid)) return;

            try {
                for (IMidiDeviceListener listener : mListeners.values()) {
                    listener.onDeviceStatusChanged(status);
                }
            } catch (RemoteException e) {
                Log.e(TAG, "remote exception", e);
            }
!!!43272759.java!!!	close() : void
            synchronized (mClients) {
                mClients.remove(mToken);
                mToken.unlinkToDeath(this, 0);
            }

            for (DeviceConnection connection : mDeviceConnections.values()) {
                connection.getDevice().removeDeviceConnection(connection);
            }
!!!43272887.java!!!	binderDied() : void
            Log.d(TAG, "Client died: " + this);
            close();
!!!43273015.java!!!	toString() : String
            StringBuilder sb = new StringBuilder("Client: UID: ");
            sb.append(mUid);
            sb.append(" PID: ");
            sb.append(mPid);
            sb.append(" listener count: ");
            sb.append(mListeners.size());
            sb.append(" Device Connections:");
            for (DeviceConnection connection : mDeviceConnections.values()) {
                sb.append(" <device ");
                sb.append(connection.getDevice().getDeviceInfo().getId());
                sb.append(">");
            }
            return sb.toString();
