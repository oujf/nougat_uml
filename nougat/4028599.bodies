class BuzzBeepBlinkTest
!!!43418167.java!!!	setUp() : void
        MockitoAnnotations.initMocks(this);

        when(mAudioManager.isAudioFocusExclusive()).thenReturn(false);
        when(mAudioManager.getRingtonePlayer()).thenReturn(mRingtonePlayer);
        when(mAudioManager.getStreamVolume(anyInt())).thenReturn(10);
        when(mAudioManager.getRingerModeInternal()).thenReturn(AudioManager.RINGER_MODE_NORMAL);

        mService = new NotificationManagerService(getContext());
        mService.setAudioManager(mAudioManager);
        mService.setVibrator(mVibrator);
        mService.setSystemReady(true);
        mService.setHandler(mHandler);
!!!43418295.java!!!	getNoisyOtherNotification() : NotificationRecord
        return getNotificationRecord(mOtherId, false /* insistent */, false /* once */,
                true /* noisy */, true /* buzzy*/);
!!!43418423.java!!!	getBeepyNotification() : NotificationRecord
        return getNotificationRecord(mId, false /* insistent */, false /* once */,
                true /* noisy */, false /* buzzy*/);
!!!43418551.java!!!	getBeepyOnceNotification() : NotificationRecord
        return getNotificationRecord(mId, false /* insistent */, true /* once */,
                true /* noisy */, false /* buzzy*/);
!!!43418679.java!!!	getQuietNotification() : NotificationRecord
        return getNotificationRecord(mId, false /* insistent */, false /* once */,
                false /* noisy */, false /* buzzy*/);
!!!43418807.java!!!	getQuietOtherNotification() : NotificationRecord
        return getNotificationRecord(mOtherId, false /* insistent */, false /* once */,
                false /* noisy */, false /* buzzy*/);
!!!43418935.java!!!	getQuietOnceNotification() : NotificationRecord
        return getNotificationRecord(mId, false /* insistent */, true /* once */,
                false /* noisy */, false /* buzzy*/);
!!!43419063.java!!!	getInsistentBeepyNotification() : NotificationRecord
        return getNotificationRecord(mId, true /* insistent */, false /* once */,
                true /* noisy */, false /* buzzy*/);
!!!43419191.java!!!	getBuzzyNotification() : NotificationRecord
        return getNotificationRecord(mId, false /* insistent */, false /* once */,
                false /* noisy */, true /* buzzy*/);
!!!43419319.java!!!	getBuzzyOnceNotification() : NotificationRecord
        return getNotificationRecord(mId, false /* insistent */, true /* once */,
                false /* noisy */, true /* buzzy*/);
!!!43419447.java!!!	getInsistentBuzzyNotification() : NotificationRecord
        return getNotificationRecord(mId, true /* insistent */, false /* once */,
                false /* noisy */, true /* buzzy*/);
!!!43419575.java!!!	getNotificationRecord(in id : int, inout insistent : boolean, inout once : boolean, inout noisy : boolean, inout buzzy : boolean) : NotificationRecord
        final Builder builder = new Builder(getContext())
                .setContentTitle("foo")
                .setSmallIcon(android.R.drawable.sym_def_app_icon)
                .setPriority(Notification.PRIORITY_HIGH)
                .setOnlyAlertOnce(once);

        int defaults = 0;
        if (noisy) {
            defaults |= Notification.DEFAULT_SOUND;
        }
        if (buzzy) {
            defaults |= Notification.DEFAULT_VIBRATE;
        }
        builder.setDefaults(defaults);

        Notification n = builder.build();
        if (insistent) {
            n.flags |= Notification.FLAG_INSISTENT;
        }
        StatusBarNotification sbn = new StatusBarNotification(mPkg, mPkg, id, mTag, mUid, mPid,
                mScore, n, mUser, System.currentTimeMillis());
        return new NotificationRecord(getContext(), sbn);
!!!43419703.java!!!	verifyNeverBeep() : void
        verify(mRingtonePlayer, never()).playAsync((Uri) anyObject(), (UserHandle) anyObject(),
                anyBoolean(), (AudioAttributes) anyObject());
!!!43419831.java!!!	verifyBeep() : void
        verify(mRingtonePlayer, times(1)).playAsync((Uri) anyObject(), (UserHandle) anyObject(),
                eq(true), (AudioAttributes) anyObject());
!!!43419959.java!!!	verifyBeepLooped() : void
        verify(mRingtonePlayer, times(1)).playAsync((Uri) anyObject(), (UserHandle) anyObject(),
                eq(false), (AudioAttributes) anyObject());
!!!43420087.java!!!	verifyNeverStopAudio() : void
        verify(mRingtonePlayer, never()).stopAsync();
!!!43420215.java!!!	verifyStopAudio() : void
        verify(mRingtonePlayer, times(1)).stopAsync();
!!!43420343.java!!!	verifyNeverVibrate() : void
        verify(mVibrator, never()).vibrate(anyInt(), anyString(), (long[]) anyObject(),
                anyInt(), (AudioAttributes) anyObject());
!!!43420471.java!!!	verifyVibrate() : void
        verify(mVibrator, times(1)).vibrate(anyInt(), anyString(), (long[]) anyObject(),
                eq(-1), (AudioAttributes) anyObject());
!!!43420599.java!!!	verifyVibrateLooped() : void
        verify(mVibrator, times(1)).vibrate(anyInt(), anyString(), (long[]) anyObject(),
                eq(0), (AudioAttributes) anyObject());
!!!43420727.java!!!	verifyStopVibrate() : void
        verify(mVibrator, times(1)).cancel();
!!!43420855.java!!!	verifyNeverStopVibrate() : void
        verify(mVibrator, never()).cancel();
!!!43420983.java!!!	testBeep() : void
        NotificationRecord r = getBeepyNotification();

        mService.buzzBeepBlinkLocked(r);

        verifyBeepLooped();
        verifyNeverVibrate();
!!!43421111.java!!!	testBeepInsistently() : void
        NotificationRecord r = getInsistentBeepyNotification();

        mService.buzzBeepBlinkLocked(r);

        verifyBeep();
!!!43421239.java!!!	testNoInterruptionForMin() : void
        NotificationRecord r = getBeepyNotification();
        r.setImportance(Ranking.IMPORTANCE_MIN, "foo");

        mService.buzzBeepBlinkLocked(r);

        verifyNeverBeep();
        verifyNeverVibrate();
!!!43421367.java!!!	testNoInterruptionForIntercepted() : void
        NotificationRecord r = getBeepyNotification();
        r.setIntercepted(true);

        mService.buzzBeepBlinkLocked(r);

        verifyNeverBeep();
        verifyNeverVibrate();
!!!43421495.java!!!	testBeepTwice() : void
        NotificationRecord r = getBeepyNotification();

        // set up internal state
        mService.buzzBeepBlinkLocked(r);
        Mockito.reset(mRingtonePlayer);

        // update should beep
        r.isUpdate = true;
        mService.buzzBeepBlinkLocked(r);
        verifyBeepLooped();
!!!43421623.java!!!	testHonorAlertOnlyOnceForBeep() : void
        NotificationRecord r = getBeepyNotification();
        NotificationRecord s = getBeepyOnceNotification();
        s.isUpdate = true;

        // set up internal state
        mService.buzzBeepBlinkLocked(r);
        Mockito.reset(mRingtonePlayer);

        // update should not beep
        mService.buzzBeepBlinkLocked(s);
        verifyNeverBeep();
!!!43421751.java!!!	testNoisyUpdateDoesNotCancelAudio() : void
        NotificationRecord r = getBeepyNotification();

        mService.buzzBeepBlinkLocked(r);
        r.isUpdate = true;
        mService.buzzBeepBlinkLocked(r);

        verifyNeverStopAudio();
!!!43421879.java!!!	testNoisyOnceUpdateDoesNotCancelAudio() : void
        NotificationRecord r = getBeepyNotification();
        NotificationRecord s = getBeepyOnceNotification();
        s.isUpdate = true;

        mService.buzzBeepBlinkLocked(r);
        mService.buzzBeepBlinkLocked(s);

        verifyNeverStopAudio();
!!!43422007.java!!!	testQuietUpdateDoesNotCancelAudioFromOther() : void
        NotificationRecord r = getBeepyNotification();
        NotificationRecord s = getQuietNotification();
        s.isUpdate = true;
        NotificationRecord other = getNoisyOtherNotification();

        // set up internal state
        mService.buzzBeepBlinkLocked(r);
        mService.buzzBeepBlinkLocked(other); // this takes the audio stream
        Mockito.reset(mRingtonePlayer);

        // should not stop noise, since we no longer own it
        mService.buzzBeepBlinkLocked(s); // this no longer owns the stream
        verifyNeverStopAudio();
!!!43422135.java!!!	testQuietInterloperDoesNotCancelAudio() : void
        NotificationRecord r = getBeepyNotification();
        NotificationRecord other = getQuietOtherNotification();

        // set up internal state
        mService.buzzBeepBlinkLocked(r);
        Mockito.reset(mRingtonePlayer);

        // should not stop noise, since it does not own it
        mService.buzzBeepBlinkLocked(other);
        verifyNeverStopAudio();
!!!43422263.java!!!	testQuietUpdateCancelsAudio() : void
        NotificationRecord r = getBeepyNotification();
        NotificationRecord s = getQuietNotification();
        s.isUpdate = true;

        // set up internal state
        mService.buzzBeepBlinkLocked(r);
        Mockito.reset(mRingtonePlayer);

        // quiet update should stop making noise
        mService.buzzBeepBlinkLocked(s);
        verifyStopAudio();
!!!43422391.java!!!	testQuietOnceUpdateCancelsAudio() : void
        NotificationRecord r = getBeepyNotification();
        NotificationRecord s = getQuietOnceNotification();
        s.isUpdate = true;

        // set up internal state
        mService.buzzBeepBlinkLocked(r);
        Mockito.reset(mRingtonePlayer);

        // stop making noise - this is a weird corner case, but quiet should override once
        mService.buzzBeepBlinkLocked(s);
        verifyStopAudio();
!!!43422519.java!!!	testDemoteSoundToVibrate() : void
        NotificationRecord r = getBeepyNotification();

        // the phone is quiet
        when(mAudioManager.getStreamVolume(anyInt())).thenReturn(0);
        when(mAudioManager.getRingerModeInternal()).thenReturn(AudioManager.RINGER_MODE_VIBRATE);

        mService.buzzBeepBlinkLocked(r);

        verifyNeverBeep();
        verifyVibrate();
!!!43422647.java!!!	testDemotInsistenteSoundToVibrate() : void
        NotificationRecord r = getInsistentBeepyNotification();

        // the phone is quiet
        when(mAudioManager.getStreamVolume(anyInt())).thenReturn(0);
        when(mAudioManager.getRingerModeInternal()).thenReturn(AudioManager.RINGER_MODE_VIBRATE);

        mService.buzzBeepBlinkLocked(r);

        verifyVibrateLooped();
!!!43422775.java!!!	testVibrate() : void
        NotificationRecord r = getBuzzyNotification();

        mService.buzzBeepBlinkLocked(r);

        verifyNeverBeep();
        verifyVibrate();
!!!43422903.java!!!	testInsistenteVibrate() : void
        NotificationRecord r = getInsistentBuzzyNotification();

        mService.buzzBeepBlinkLocked(r);
        verifyVibrateLooped();
!!!43423031.java!!!	testVibratTwice() : void
        NotificationRecord r = getBuzzyNotification();

        // set up internal state
        mService.buzzBeepBlinkLocked(r);
        Mockito.reset(mVibrator);

        // update should vibrate
        r.isUpdate = true;
        mService.buzzBeepBlinkLocked(r);
        verifyVibrate();
!!!43423159.java!!!	testHonorAlertOnlyOnceForBuzz() : void
        NotificationRecord r = getBuzzyNotification();
        NotificationRecord s = getBuzzyOnceNotification();
        s.isUpdate = true;

        // set up internal state
        mService.buzzBeepBlinkLocked(r);
        Mockito.reset(mVibrator);

        // update should not beep
        mService.buzzBeepBlinkLocked(s);
        verifyNeverVibrate();
!!!43423287.java!!!	testNoisyUpdateDoesNotCancelVibrate() : void
        NotificationRecord r = getBuzzyNotification();

        mService.buzzBeepBlinkLocked(r);
        r.isUpdate = true;
        mService.buzzBeepBlinkLocked(r);

        verifyNeverStopVibrate();
!!!43423415.java!!!	testNoisyOnceUpdateDoesNotCancelVibrate() : void
        NotificationRecord r = getBuzzyNotification();
        NotificationRecord s = getBuzzyOnceNotification();
        s.isUpdate = true;

        mService.buzzBeepBlinkLocked(r);
        mService.buzzBeepBlinkLocked(s);

        verifyNeverStopVibrate();
!!!43423543.java!!!	testQuietUpdateDoesNotCancelVibrateFromOther() : void
        NotificationRecord r = getBuzzyNotification();
        NotificationRecord s = getQuietNotification();
        s.isUpdate = true;
        NotificationRecord other = getNoisyOtherNotification();

        // set up internal state
        mService.buzzBeepBlinkLocked(r);
        mService.buzzBeepBlinkLocked(other); // this takes the vibrate stream
        Mockito.reset(mVibrator);

        // should not stop vibrate, since we no longer own it
        mService.buzzBeepBlinkLocked(s); // this no longer owns the stream
        verifyNeverStopVibrate();
!!!43423671.java!!!	testQuietInterloperDoesNotCancelVibrate() : void
        NotificationRecord r = getBuzzyNotification();
        NotificationRecord other = getQuietOtherNotification();

        // set up internal state
        mService.buzzBeepBlinkLocked(r);
        Mockito.reset(mVibrator);

        // should not stop noise, since it does not own it
        mService.buzzBeepBlinkLocked(other);
        verifyNeverStopVibrate();
!!!43423799.java!!!	testQuietUpdateCancelsVibrate() : void
        NotificationRecord r = getBuzzyNotification();
        NotificationRecord s = getQuietNotification();
        s.isUpdate = true;

        // set up internal state
        mService.buzzBeepBlinkLocked(r);

        // quiet update should stop making noise
        mService.buzzBeepBlinkLocked(s);
        verifyStopVibrate();
!!!43423927.java!!!	testQuietOnceUpdateCancelsvibrate() : void
        NotificationRecord r = getBuzzyNotification();
        NotificationRecord s = getQuietOnceNotification();
        s.isUpdate = true;

        // set up internal state
        mService.buzzBeepBlinkLocked(r);
        Mockito.reset(mVibrator);

        // stop making noise - this is a weird corner case, but quiet should override once
        mService.buzzBeepBlinkLocked(s);
        verifyStopVibrate();
!!!43424055.java!!!	testQuietUpdateCancelsDemotedVibrate() : void
        NotificationRecord r = getBeepyNotification();
        NotificationRecord s = getQuietNotification();

        // the phone is quiet
        when(mAudioManager.getStreamVolume(anyInt())).thenReturn(0);
        when(mAudioManager.getRingerModeInternal()).thenReturn(AudioManager.RINGER_MODE_VIBRATE);

        mService.buzzBeepBlinkLocked(r);

        // quiet update should stop making noise
        mService.buzzBeepBlinkLocked(s);
        verifyStopVibrate();
