class DocumentsProviderHelper
!!!43734583.java!!!	DocumentsProviderHelper(inout authority : String, inout client : ContentProviderClient)
        checkArgument(!TextUtils.isEmpty(authority));
        mAuthority = authority;
        mClient = client;
!!!43734711.java!!!	getRoot(inout documentId : String) : RootInfo
        final Uri rootsUri = buildRootsUri(mAuthority);
        Cursor cursor = null;
        try {
            cursor = mClient.query(rootsUri, null, null, null, null);
            while (cursor.moveToNext()) {
                if (documentId.equals(getCursorString(cursor, Root.COLUMN_ROOT_ID))) {
                    return RootInfo.fromRootsCursor(mAuthority, cursor);
                }
            }
            throw new IllegalArgumentException("Can't find matching root for id=" + documentId);
        } catch (Exception e) {
            throw new RuntimeException("Can't load root for id=" + documentId , e);
        } finally {
            IoUtils.closeQuietly(cursor);
        }
!!!43734839.java!!!	createDocument(inout parentUri : Uri, inout mimeType : String, inout name : String) : Uri
        if (name.contains("/")) {
            throw new IllegalArgumentException("Name and mimetype probably interposed.");
        }
        try {
            Uri uri = DocumentsContract.createDocument(mClient, parentUri, mimeType, name);
            return uri;
        } catch (RemoteException e) {
            throw new RuntimeException("Couldn't create document: " + name + " with mimetype "
                    + mimeType, e);
        }
!!!43734967.java!!!	createDocument(inout parentId : String, inout mimeType : String, inout name : String) : Uri
        Uri parentUri = buildDocumentUri(mAuthority, parentId);
        return createDocument(parentUri, mimeType, name);
!!!43735095.java!!!	createDocument(inout root : RootInfo, inout mimeType : String, inout name : String) : Uri
        return createDocument(root.documentId, mimeType, name);
!!!43735223.java!!!	createDocumentWithFlags(inout documentId : String, inout mimeType : String, inout name : String, in flags : int, inout  : String...streamTypes) : Uri
        Bundle in = new Bundle();
        in.putInt(StubProvider.EXTRA_FLAGS, flags);
        in.putString(StubProvider.EXTRA_PARENT_ID, documentId);
        in.putString(Document.COLUMN_MIME_TYPE, mimeType);
        in.putString(Document.COLUMN_DISPLAY_NAME, name);
        in.putStringArrayList(StubProvider.EXTRA_STREAM_TYPES, Lists.newArrayList(streamTypes));

        Bundle out = mClient.call("createDocumentWithFlags", null, in);
        Uri uri = out.getParcelable(DocumentsContract.EXTRA_URI);
        return uri;
!!!43735351.java!!!	createFolder(inout parentUri : Uri, inout name : String) : Uri
        return createDocument(parentUri, Document.MIME_TYPE_DIR, name);
!!!43735479.java!!!	createFolder(inout parentId : String, inout name : String) : Uri
        Uri parentUri = buildDocumentUri(mAuthority, parentId);
        return createDocument(parentUri, Document.MIME_TYPE_DIR, name);
!!!43735607.java!!!	createFolder(inout root : RootInfo, inout name : String) : Uri
        return createDocument(root, Document.MIME_TYPE_DIR, name);
!!!43735735.java!!!	writeDocument(inout documentUri : Uri, inout contents : byte) : void
        ParcelFileDescriptor file = mClient.openFile(documentUri, "w", null);
        try (AutoCloseOutputStream out = new AutoCloseOutputStream(file)) {
            out.write(contents, 0, contents.length);
        }
!!!43735863.java!!!	readDocument(inout documentUri : Uri) : byte
        ParcelFileDescriptor file = mClient.openFile(documentUri, "r", null);
        byte[] buf = null;
        try (AutoCloseInputStream in = new AutoCloseInputStream(file)) {
            buf = Streams.readFully(in);
        }
        return buf;
!!!43735991.java!!!	assertChildCount(inout parentUri : Uri, in expected : int) : void
        List<DocumentInfo> children = listChildren(parentUri);
        assertEquals("Incorrect file count after copy", expected, children.size());
!!!43736119.java!!!	assertChildCount(inout parentId : String, in expected : int) : void
        List<DocumentInfo> children = listChildren(parentId);
        assertEquals("Incorrect file count after copy", expected, children.size());
!!!43736247.java!!!	assertChildCount(inout root : RootInfo, in expected : int) : void
        assertChildCount(root.documentId, expected);
!!!43736375.java!!!	assertHasFile(inout parentUri : Uri, inout name : String) : void
        List<DocumentInfo> children = listChildren(parentUri);
        for (DocumentInfo child : children) {
            if (name.equals(child.displayName) && !child.isDirectory()) {
                return;
            }
        }
        fail("Could not find file named=" + name + " in children " + children);
!!!43736503.java!!!	assertHasFile(inout parentId : String, inout name : String) : void
        Uri parentUri = buildDocumentUri(mAuthority, parentId);
        assertHasFile(parentUri, name);
!!!43736631.java!!!	assertHasFile(inout root : RootInfo, inout name : String) : void
        assertHasFile(root.documentId, name);
!!!43736759.java!!!	assertHasDirectory(inout parentUri : Uri, inout name : String) : void
        List<DocumentInfo> children = listChildren(parentUri);
        for (DocumentInfo child : children) {
            if (name.equals(child.displayName) && child.isDirectory()) {
                return;
            }
        }
        fail("Could not find name=" + name + " in children " + children);
!!!43736887.java!!!	assertHasDirectory(inout parentId : String, inout name : String) : void
        Uri parentUri = buildDocumentUri(mAuthority, parentId);
        assertHasDirectory(parentUri, name);
!!!43737015.java!!!	assertHasDirectory(inout root : RootInfo, inout name : String) : void
        assertHasDirectory(root.documentId, name);
!!!43737143.java!!!	assertDoesNotExist(inout parentUri : Uri, inout name : String) : void
        List<DocumentInfo> children = listChildren(parentUri);
        for (DocumentInfo child : children) {
            if (name.equals(child.displayName)) {
                fail("Found name=" + name + " in children " + children);
            }
        }
!!!43737271.java!!!	assertDoesNotExist(inout parentId : String, inout name : String) : void
        Uri parentUri = buildDocumentUri(mAuthority, parentId);
        assertDoesNotExist(parentUri, name);
!!!43737399.java!!!	assertDoesNotExist(inout root : RootInfo, inout name : String) : void
        assertDoesNotExist(root.getUri(), name);
!!!43737527.java!!!	findFile(inout parentId : String, inout name : String) : DocumentInfo
        List<DocumentInfo> children = listChildren(parentId);
        for (DocumentInfo child : children) {
            if (name.equals(child.displayName)) {
                return child;
            }
        }
        return null;
!!!43737655.java!!!	findDocument(inout parentId : String, inout name : String) : DocumentInfo
        List<DocumentInfo> children = listChildren(parentId);
        for (DocumentInfo child : children) {
            if (name.equals(child.displayName)) {
                return child;
            }
        }
        return null;
!!!43737783.java!!!	findDocument(inout parentUri : Uri, inout name : String) : DocumentInfo
        List<DocumentInfo> children = listChildren(parentUri);
        for (DocumentInfo child : children) {
            if (name.equals(child.displayName)) {
                return child;
            }
        }
        return null;
!!!43737911.java!!!	listChildren(inout parentUri : Uri) : DocumentInfo
        String id = DocumentsContract.getDocumentId(parentUri);
        return listChildren(id);
!!!43738039.java!!!	listChildren(inout documentId : String) : DocumentInfo
        Uri uri = buildChildDocumentsUri(mAuthority, documentId);
        List<DocumentInfo> children = new ArrayList<>();
        try (Cursor cursor = mClient.query(uri, null, null, null, null, null)) {
            Cursor wrapper = new RootCursorWrapper(mAuthority, "totally-fake", cursor, 100);
            while (wrapper.moveToNext()) {
                children.add(DocumentInfo.fromDirectoryCursor(wrapper));
            }
        }
        return children;
!!!43738167.java!!!	assertFileContents(inout documentUri : Uri, inout expected : byte) : void
        MoreAsserts.assertEquals(
                "Copied file contents differ",
                expected, readDocument(documentUri));
!!!43738295.java!!!	assertFileContents(inout parentId : String, inout fileName : String, inout expected : byte) : void
        DocumentInfo file = findFile(parentId, fileName);
        assertNotNull(file);
        assertFileContents(file.derivedUri, expected);
!!!43738423.java!!!	createVirtualFile(inout root : RootInfo, inout path : String, inout mimeType : String, inout content : byte, inout  : String...streamTypes) : Uri

        Bundle args = new Bundle();
        args.putString(StubProvider.EXTRA_ROOT, root.rootId);
        args.putString(StubProvider.EXTRA_PATH, path);
        args.putString(Document.COLUMN_MIME_TYPE, mimeType);
        args.putStringArrayList(StubProvider.EXTRA_STREAM_TYPES, Lists.newArrayList(streamTypes));
        args.putByteArray(StubProvider.EXTRA_CONTENT, content);

        Bundle result = mClient.call("createVirtualFile", null, args);
        String documentId = result.getString(Document.COLUMN_DOCUMENT_ID);

        return DocumentsContract.buildDocumentUri(mAuthority, documentId);
