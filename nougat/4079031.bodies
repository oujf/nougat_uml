class DocumentHolder
!!!43692087.java!!!	DocumentHolder(inout context : Context, inout parent : ViewGroup, in layout : int)
        this(context, inflateLayout(context, parent, layout));
!!!43692215.java!!!	DocumentHolder(inout context : Context, inout item : View)
        super(item);

        itemView.setOnKeyListener(this);

        mContext = context;

        mDefaultBgColor = context.getColor(R.color.item_doc_background);
        mSelectedBgColor = context.getColor(R.color.item_doc_background_selected);

        mSelectionHotspot = itemView.findViewById(R.id.icon_check);
!!!43692471.java!!!	setSelected(inout selected : boolean, inout animate : boolean) : void
        // Note: the animate param doesn't apply for this base implementation, because the
        // DirectoryItemAnimator takes care of it. It's required by subclasses, which perform their
        // own animation.
        itemView.setActivated(selected);
        itemView.setBackgroundColor(selected ? mSelectedBgColor : mDefaultBgColor);
!!!43692599.java!!!	setHighlighted(inout highlighted : boolean) : void
        itemView.setBackgroundColor(highlighted ? mSelectedBgColor : mDefaultBgColor);
!!!43692727.java!!!	setEnabled(inout enabled : boolean) : void
        setEnabledRecursive(itemView, enabled);
!!!43692855.java!!!	onKey(inout v : View, in keyCode : int, inout event : KeyEvent) : boolean
        // Event listener should always be set.
        assert(mEventListener != null);

        return mEventListener.onKey(this,  keyCode,  event);
!!!43692983.java!!!	addEventListener(inout listener : DocumentHolder::EventListener) : void
        // Just handle one for now; switch to a list if necessary.
        assert(mEventListener == null);
        mEventListener = listener;
!!!43693111.java!!!	addOnKeyListener(inout listener : View::OnKeyListener) : void
        // Just handle one for now; switch to a list if necessary.
        assert(mKeyListener == null);
        mKeyListener = listener;
!!!43693239.java!!!	onSingleTapUp(inout event : MotionEvent) : boolean
        if (Events.isMouseEvent(event)) {
            // Mouse clicks select.
            // TODO:  && input.isPrimaryButtonPressed(), but it is returning false.
            if (mEventListener != null) {
                return mEventListener.onSelect(this);
            }
        } else if (Events.isTouchEvent(event)) {
            // Touch events select if they occur in the selection hotspot, otherwise they activate.
            if (mEventListener == null) {
                return false;
            }

            // Do everything in global coordinates - it makes things simpler.
            int[] coords = new int[2];
            mSelectionHotspot.getLocationOnScreen(coords);
            Rect rect = new Rect(coords[0], coords[1], coords[0] + mSelectionHotspot.getWidth(),
                    coords[1] + mSelectionHotspot.getHeight());

            // If the tap occurred within the icon rect, consider it a selection.
            if (rect.contains((int) event.getRawX(), (int) event.getRawY())) {
                return mEventListener.onSelect(this);
            } else {
                return mEventListener.onActivate(this);
            }
        }
        return false;
!!!43693367.java!!!	setEnabledRecursive(inout itemView : View, inout enabled : boolean) : void
        if (itemView == null) return;
        if (itemView.isEnabled() == enabled) return;
        itemView.setEnabled(enabled);

        if (itemView instanceof ViewGroup) {
            final ViewGroup vg = (ViewGroup) itemView;
            for (int i = vg.getChildCount() - 1; i >= 0; i--) {
                setEnabledRecursive(vg.getChildAt(i), enabled);
            }
        }
!!!43693495.java!!!	inflateLayout(inout context : Context, inout parent : ViewGroup, in layout : int) : View
        final LayoutInflater inflater = LayoutInflater.from(context);
        return inflater.inflate(layout, parent, false);
