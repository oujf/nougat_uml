class GridModel
!!!43677239.java!!!	GridModel(inout helper : MultiSelectManager::SelectionEnvironment, inout adapter : DocumentsAdapter)
            mHelper = helper;
            mAdapter = adapter;
            mHelper.addOnScrollListener(this);
!!!43677367.java!!!	stopListening() : void
            mHelper.removeOnScrollListener(this);
!!!43677495.java!!!	startSelection(inout relativeOrigin : Point) : void
            recordVisibleChildren();
            if (isEmpty()) {
                // The selection band logic works only if there is at least one visible child.
                return;
            }

            mIsActive = true;
            mPointer = mHelper.createAbsolutePoint(relativeOrigin);
            mRelativeOrigin = new RelativePoint(mPointer);
            mRelativePointer = new RelativePoint(mPointer);
            computeCurrentSelection();
            notifyListeners();
!!!43677623.java!!!	resizeSelection(inout relativePointer : Point) : void
            mPointer = mHelper.createAbsolutePoint(relativePointer);
            updateModel();
!!!43677751.java!!!	endSelection() : void
            mIsActive = false;
!!!43677879.java!!!	getPositionNearestOrigin() : int
            return mPositionNearestOrigin;
!!!43678007.java!!!	onScrolled(inout recyclerView : RecyclerView, in dx : int, in dy : int) : void
            if (!mIsActive) {
                return;
            }

            mPointer.x += dx;
            mPointer.y += dy;
            recordVisibleChildren();
            updateModel();
!!!43678135.java!!!	recordVisibleChildren() : void
            for (int i = 0; i < mHelper.getVisibleChildCount(); i++) {
                int adapterPosition = mHelper.getAdapterPositionAt(i);
                // Sometimes the view is not attached, as we notify the multi selection manager
                // synchronously, while views are attached asynchronously. As a result items which
                // are in the adapter may not actually have a corresponding view (yet).
                if (mHelper.hasView(adapterPosition) &&
                        !mHelper.isLayoutItem(adapterPosition) &&
                        !mKnownPositions.get(adapterPosition)) {
                    mKnownPositions.put(adapterPosition, true);
                    recordItemData(mHelper.getAbsoluteRectForChildViewAt(i), adapterPosition);
                }
            }
!!!43678263.java!!!	isEmpty() : boolean
            return mColumnBounds.size() == 0 || mRowBounds.size() == 0;
!!!43678391.java!!!	recordItemData(inout absoluteChildRect : Rect, in adapterPosition : int) : void
            if (mColumnBounds.size() != mHelper.getColumnCount()) {
                // If not all x-limits have been recorded, record this one.
                recordLimits(
                        mColumnBounds, new Limits(absoluteChildRect.left, absoluteChildRect.right));
            }

            recordLimits(mRowBounds, new Limits(absoluteChildRect.top, absoluteChildRect.bottom));

            SparseIntArray columnList = mColumns.get(absoluteChildRect.left);
            if (columnList == null) {
                columnList = new SparseIntArray();
                mColumns.put(absoluteChildRect.left, columnList);
            }
            columnList.put(absoluteChildRect.top, adapterPosition);
!!!43678519.java!!!	recordLimits(inout limitsList : List<Limits>, inout limits : MultiSelectManager::GridModel::Limits) : void
            int index = Collections.binarySearch(limitsList, limits);
            if (index < 0) {
                limitsList.add(~index, limits);
            }
!!!43678647.java!!!	updateModel() : void
            RelativePoint old = mRelativePointer;
            mRelativePointer = new RelativePoint(mPointer);
            if (old != null && mRelativePointer.equals(old)) {
                return;
            }

            computeCurrentSelection();
            notifyListeners();
!!!43678775.java!!!	computeCurrentSelection() : void
            if (areItemsCoveredByBand(mRelativePointer, mRelativeOrigin)) {
                updateSelection(computeBounds());
            } else {
                mSelection.clear();
                mPositionNearestOrigin = NOT_SET;
            }
!!!43678903.java!!!	notifyListeners() : void
            for (OnSelectionChangedListener listener : mOnSelectionChangedListeners) {
                listener.onSelectionChanged(mSelection);
            }
!!!43679031.java!!!	updateSelection(inout rect : Rect) : void
            int columnStart =
                    Collections.binarySearch(mColumnBounds, new Limits(rect.left, rect.left));
            assert(columnStart >= 0);
            int columnEnd = columnStart;

            for (int i = columnStart; i < mColumnBounds.size()
                    && mColumnBounds.get(i).lowerLimit <= rect.right; i++) {
                columnEnd = i;
            }

            int rowStart = Collections.binarySearch(mRowBounds, new Limits(rect.top, rect.top));
            if (rowStart < 0) {
                mPositionNearestOrigin = NOT_SET;
                return;
            }

            int rowEnd = rowStart;
            for (int i = rowStart; i < mRowBounds.size()
                    && mRowBounds.get(i).lowerLimit <= rect.bottom; i++) {
                rowEnd = i;
            }

            updateSelection(columnStart, columnEnd, rowStart, rowEnd);
!!!43679159.java!!!	updateSelection(in columnStartIndex : int, in columnEndIndex : int, in rowStartIndex : int, in rowEndIndex : int) : void
            if (DEBUG) Log.d(TAG, String.format("updateSelection: %d, %d, %d, %d",
                    columnStartIndex, columnEndIndex, rowStartIndex, rowEndIndex));

            mSelection.clear();
            for (int column = columnStartIndex; column <= columnEndIndex; column++) {
                SparseIntArray items = mColumns.get(mColumnBounds.get(column).lowerLimit);
                for (int row = rowStartIndex; row <= rowEndIndex; row++) {
                    // The default return value for SparseIntArray.get is 0, which is a valid
                    // position. Use a sentry value to prevent erroneously selecting item 0.
                    final int rowKey = mRowBounds.get(row).lowerLimit;
                    int position = items.get(rowKey, NOT_SET);
                    if (position != NOT_SET) {
                        String id = mAdapter.getModelId(position);
                        if (id != null) {
                            // The adapter inserts items for UI layout purposes that aren't associated
                            // with files.  Those will have a null model ID.  Don't select them.
                            if (canSelect(id)) {
                                mSelection.add(id);
                            }
                        }
                        if (isPossiblePositionNearestOrigin(column, columnStartIndex, columnEndIndex,
                                row, rowStartIndex, rowEndIndex)) {
                            // If this is the position nearest the origin, record it now so that it
                            // can be returned by endSelection() later.
                            mPositionNearestOrigin = position;
                        }
                    }
                }
            }
!!!43679287.java!!!	canSelect(inout id : String) : boolean
            // TODO: Simplify the logic, so the check whether we can select is done in one place.
            // Consider injecting FragmentTuner, or move the checks from MultiSelectManager to
            // Selection.
            for (OnSelectionChangedListener listener : mOnSelectionChangedListeners) {
                if (!listener.onBeforeItemStateChange(id, true)) {
                    return false;
                }
            }
            return true;
!!!43679415.java!!!	isPossiblePositionNearestOrigin(in columnIndex : int, in columnStartIndex : int, in columnEndIndex : int, in rowIndex : int, in rowStartIndex : int, in rowEndIndex : int) : boolean
            int corner = computeCornerNearestOrigin();
            switch (corner) {
                case UPPER_LEFT:
                    return columnIndex == columnStartIndex && rowIndex == rowStartIndex;
                case UPPER_RIGHT:
                    return columnIndex == columnEndIndex && rowIndex == rowStartIndex;
                case LOWER_LEFT:
                    return columnIndex == columnStartIndex && rowIndex == rowEndIndex;
                case LOWER_RIGHT:
                    // Note that in some cases, the last row will not have as many items as there
                    // are columns (e.g., if there are 4 items and 3 columns, the second row will
                    // only have one item in the first column). This function is invoked for each
                    // position from left to right, so return true for any position in the bottom
                    // row and only the right-most position in the bottom row will be recorded.
                    return rowIndex == rowEndIndex;
                default:
                    throw new RuntimeException("Invalid corner type.");
            }
!!!43679799.java!!!	addOnSelectionChangedListener(inout listener : MultiSelectManager::GridModel::OnSelectionChangedListener) : void
            mOnSelectionChangedListeners.add(listener);
!!!43679927.java!!!	removeOnSelectionChangedListener(inout listener : MultiSelectManager::GridModel::OnSelectionChangedListener) : void
            mOnSelectionChangedListeners.remove(listener);
!!!43681335.java!!!	computeBounds() : Rect
            Rect rect = new Rect();
            rect.left = getCoordinateValue(
                    min(mRelativeOrigin.xLocation, mRelativePointer.xLocation),
                    mColumnBounds,
                    true);
            rect.right = getCoordinateValue(
                    max(mRelativeOrigin.xLocation, mRelativePointer.xLocation),
                    mColumnBounds,
                    false);
            rect.top = getCoordinateValue(
                    min(mRelativeOrigin.yLocation, mRelativePointer.yLocation),
                    mRowBounds,
                    true);
            rect.bottom = getCoordinateValue(
                    max(mRelativeOrigin.yLocation, mRelativePointer.yLocation),
                    mRowBounds,
                    false);
            return rect;
!!!43681463.java!!!	computeCornerNearestOrigin() : int
            int cornerValue = 0;

            if (mRelativeOrigin.yLocation ==
                    min(mRelativeOrigin.yLocation, mRelativePointer.yLocation)) {
                cornerValue |= UPPER;
            } else {
                cornerValue |= LOWER;
            }

            if (mRelativeOrigin.xLocation ==
                    min(mRelativeOrigin.xLocation, mRelativePointer.xLocation)) {
                cornerValue |= LEFT;
            } else {
                cornerValue |= RIGHT;
            }

            return cornerValue;
!!!43681591.java!!!	min(inout first : MultiSelectManager::GridModel::RelativeCoordinate, inout second : MultiSelectManager::GridModel::RelativeCoordinate) : MultiSelectManager::GridModel::RelativeCoordinate
            return first.compareTo(second) < 0 ? first : second;
!!!43681719.java!!!	max(inout first : MultiSelectManager::GridModel::RelativeCoordinate, inout second : MultiSelectManager::GridModel::RelativeCoordinate) : MultiSelectManager::GridModel::RelativeCoordinate
            return first.compareTo(second) > 0 ? first : second;
!!!43681847.java!!!	getCoordinateValue(inout coordinate : MultiSelectManager::GridModel::RelativeCoordinate, inout limitsList : List<Limits>, inout isStartOfRange : boolean) : int
            switch (coordinate.type) {
                case RelativeCoordinate.BEFORE_FIRST_ITEM:
                    return limitsList.get(0).lowerLimit;
                case RelativeCoordinate.AFTER_LAST_ITEM:
                    return limitsList.get(limitsList.size() - 1).upperLimit;
                case RelativeCoordinate.BETWEEN_TWO_ITEMS:
                    if (isStartOfRange) {
                        return coordinate.limitsAfterCoordinate.lowerLimit;
                    } else {
                        return coordinate.limitsBeforeCoordinate.upperLimit;
                    }
                case RelativeCoordinate.WITHIN_LIMITS:
                    return coordinate.limitsBeforeCoordinate.lowerLimit;
            }

            throw new RuntimeException("Invalid coordinate value.");
!!!43681975.java!!!	areItemsCoveredByBand(inout first : MultiSelectManager::GridModel::RelativePoint, inout second : MultiSelectManager::GridModel::RelativePoint) : boolean
            return doesCoordinateLocationCoverItems(first.xLocation, second.xLocation) &&
                    doesCoordinateLocationCoverItems(first.yLocation, second.yLocation);
!!!43682103.java!!!	doesCoordinateLocationCoverItems(inout pointerCoordinate : MultiSelectManager::GridModel::RelativeCoordinate, inout originCoordinate : MultiSelectManager::GridModel::RelativeCoordinate) : boolean
            if (pointerCoordinate.type == RelativeCoordinate.BEFORE_FIRST_ITEM &&
                    originCoordinate.type == RelativeCoordinate.BEFORE_FIRST_ITEM) {
                return false;
            }

            if (pointerCoordinate.type == RelativeCoordinate.AFTER_LAST_ITEM &&
                    originCoordinate.type == RelativeCoordinate.AFTER_LAST_ITEM) {
                return false;
            }

            if (pointerCoordinate.type == RelativeCoordinate.BETWEEN_TWO_ITEMS &&
                    originCoordinate.type == RelativeCoordinate.BETWEEN_TWO_ITEMS &&
                    pointerCoordinate.limitsBeforeCoordinate.equals(
                            originCoordinate.limitsBeforeCoordinate) &&
                    pointerCoordinate.limitsAfterCoordinate.equals(
                            originCoordinate.limitsAfterCoordinate)) {
                return false;
            }

            return true;
