class Job
!!!43722167.java!!!	Job(inout service : Context, inout appContext : Context, inout listener : Job::Listener, in operationType : int, inout id : String, inout stack : DocumentStack)

        assert(operationType != OPERATION_UNKNOWN);

        this.service = service;
        this.appContext = appContext;
        this.listener = listener;
        this.operationType = operationType;

        this.id = id;
        this.stack = stack;

        mProgressBuilder = createProgressBuilder();
!!!43722295.java!!!	run() : void
        listener.onStart(this);
        try {
            start();
        } catch (RuntimeException e) {
            // No exceptions should be thrown here, as all calls to the provider must be
            // handled within Job implementations. However, just in case catch them here.
            Log.e(TAG, "Operation failed due to an unhandled runtime exception.", e);
            Metrics.logFileOperationErrors(service, operationType, failedFiles);
        } finally {
            listener.onFinished(this);
        }
!!!43722935.java!!!	getDataUriForIntent(inout tag : String) : Uri
        return Uri.parse(String.format("data,%s-%s", tag, id));
!!!43723063.java!!!	getClient(inout doc : DocumentInfo) : ContentProviderClient
        ContentProviderClient client = mClients.get(doc.authority);
        if (client == null) {
            // Acquire content providers.
            client = acquireUnstableProviderOrThrow(
                    getContentResolver(),
                    doc.authority);

            mClients.put(doc.authority, client);
        }

        assert(client != null);
        return client;
!!!43723191.java!!!	cleanup() : void
        for (ContentProviderClient client : mClients.values()) {
            ContentProviderClient.releaseQuietly(client);
        }
!!!43723319.java!!!	cancel() : void
        mCanceled = true;
        Metrics.logFileOperationCancelled(service, operationType);
!!!43723447.java!!!	isCanceled() : boolean
        return mCanceled;
!!!43723575.java!!!	getContentResolver() : ContentResolver
        return service.getContentResolver();
!!!43723703.java!!!	onFileFailed(inout file : DocumentInfo) : void
        failedFiles.add(file);
!!!43723831.java!!!	hasFailures() : boolean
        return !failedFiles.isEmpty();
!!!43723959.java!!!	hasWarnings() : boolean
        return false;
!!!43724087.java!!!	deleteDocument(inout doc : DocumentInfo, inout parent : DocumentInfo) : void
        try {
            if (doc.isRemoveSupported()) {
                DocumentsContract.removeDocument(getClient(doc), doc.derivedUri, parent.derivedUri);
            } else if (doc.isDeleteSupported()) {
                DocumentsContract.deleteDocument(getClient(doc), doc.derivedUri);
            } else {
                throw new ResourceException("Unable to delete source document as the file is " +
                        "not deletable nor removable: %s.", doc.derivedUri);
            }
        } catch (RemoteException | RuntimeException e) {
            throw new ResourceException("Failed to delete file %s due to an exception.",
                    doc.derivedUri, e);
        }
!!!43724215.java!!!	getSetupNotification(inout content : String) : Notification
        mProgressBuilder.setProgress(0, 0, true)
                .setContentText(content);
        return mProgressBuilder.build();
!!!43724343.java!!!	getFailureNotification(in titleId : int, in icon : int) : Notification
        final Intent navigateIntent = buildNavigateIntent(INTENT_TAG_FAILURE);
        navigateIntent.putExtra(EXTRA_DIALOG_TYPE, OperationDialogFragment.DIALOG_TYPE_FAILURE);
        navigateIntent.putExtra(EXTRA_OPERATION, operationType);
        navigateIntent.putParcelableArrayListExtra(EXTRA_SRC_LIST, failedFiles);

        final Notification.Builder errorBuilder = new Notification.Builder(service)
                .setContentTitle(service.getResources().getQuantityString(titleId,
                        failedFiles.size(), failedFiles.size()))
                .setContentText(service.getString(R.string.notification_touch_for_details))
                .setContentIntent(PendingIntent.getActivity(appContext, 0, navigateIntent,
                        PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT))
                .setCategory(Notification.CATEGORY_ERROR)
                .setSmallIcon(icon)
                .setAutoCancel(true);

        return errorBuilder.build();
!!!43724599.java!!!	createProgressBuilder(inout title : String, in icon : int, inout actionTitle : String, in actionIcon : int) : Notification::Builder
        Notification.Builder progressBuilder = new Notification.Builder(service)
                .setContentTitle(title)
                .setContentIntent(
                        PendingIntent.getActivity(appContext, 0,
                                buildNavigateIntent(INTENT_TAG_PROGRESS), 0))
                .setCategory(Notification.CATEGORY_PROGRESS)
                .setSmallIcon(icon)
                .setOngoing(true);

        final Intent cancelIntent = createCancelIntent();

        progressBuilder.addAction(
                actionIcon,
                actionTitle,
                PendingIntent.getService(
                        service,
                        0,
                        cancelIntent,
                        PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_CANCEL_CURRENT));

        return progressBuilder;
!!!43724727.java!!!	buildNavigateIntent(inout tag : String) : Intent
        Intent intent = new Intent(service, FilesActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setAction(DocumentsContract.ACTION_BROWSE);
        intent.setData(getDataUriForIntent(tag));
        intent.putExtra(Shared.EXTRA_STACK, (Parcelable) stack);
        return intent;
!!!43724855.java!!!	createCancelIntent() : Intent
        final Intent cancelIntent = new Intent(service, FileOperationService.class);
        cancelIntent.setData(getDataUriForIntent(INTENT_TAG_CANCEL));
        cancelIntent.putExtra(EXTRA_CANCEL, true);
        cancelIntent.putExtra(EXTRA_JOB_ID, id);
        return cancelIntent;
!!!43724983.java!!!	toString() : String
        return new StringBuilder()
                .append("Job")
                .append("{")
                .append("id=" + id)
                .append("}")
                .toString();
