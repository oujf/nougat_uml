class MultiSelectManagerTest
!!!43775159.java!!!	setUp() : void
        mCallback = new TestCallback();
        mEnv = new TestSelectionEnvironment(items);
        mAdapter = new TestDocumentsAdapter(items);
        mManager = new MultiSelectManager(mEnv, mAdapter, MultiSelectManager.MODE_MULTIPLE, null);
        mManager.addCallback(mCallback);
!!!43775287.java!!!	testSelection() : void
        // Check selection.
        mManager.toggleSelection(items.get(7));
        assertSelection(items.get(7));
        // Check deselection.
        mManager.toggleSelection(items.get(7));
        assertSelectionSize(0);
!!!43775415.java!!!	testSelection_NotifiesSelectionChanged() : void
        // Selection should notify.
        mManager.toggleSelection(items.get(7));
        mCallback.assertSelectionChanged();
        // Deselection should notify.
        mManager.toggleSelection(items.get(7));
        mCallback.assertSelectionChanged();
!!!43775543.java!!!	testMouseClick_ShiftClickExtendsSelection() : void
        longPress(7);
        shiftClick(11);
        assertRangeSelection(7, 11);
!!!43775671.java!!!	testMouseClick_NoPosition_ClearsSelection() : void
        longPress(7);
        click(11);
        click(RecyclerView.NO_POSITION);
        assertSelection();
!!!43775799.java!!!	testSetSelectionFocusBegin() : void
        mManager.setItemsSelected(Lists.newArrayList(items.get(7)), true);
        mManager.setSelectionRangeBegin(7);
        shiftClick(11);
        assertRangeSelection(7, 11);
!!!43775927.java!!!	testLongPress_StartsSelectionMode() : void
        longPress(7);
        assertSelection(items.get(7));
!!!43776055.java!!!	testLongPress_SecondPressExtendsSelection() : void
        longPress(7);
        longPress(99);
        assertSelection(items.get(7), items.get(99));
!!!43776183.java!!!	testSingleTapUp_UnselectsSelectedItem() : void
        longPress(7);
        tap(7);
        assertSelection();
!!!43776311.java!!!	testSingleTapUp_NoPosition_ClearsSelection() : void
        longPress(7);
        tap(11);
        tap(RecyclerView.NO_POSITION);
        assertSelection();
!!!43776439.java!!!	testSingleTapUp_ExtendsSelection() : void
        longPress(99);
        tap(7);
        tap(13);
        assertSelection(items.get(7), items.get(99), items.get(13));
!!!43776567.java!!!	testSingleTapUp_ShiftCreatesRangeSelection() : void
        longPress(7);
        shiftTap(17);
        assertRangeSelection(7, 17);
!!!43776695.java!!!	testSingleTapUp_ShiftCreatesRangeSeletion_Backwards() : void
        longPress(17);
        shiftTap(7);
        assertRangeSelection(7, 17);
!!!43776823.java!!!	testSingleTapUp_SecondShiftClickExtendsSelection() : void
        longPress(7);
        shiftTap(11);
        shiftTap(17);
        assertRangeSelection(7, 17);
!!!43776951.java!!!	testSingleTapUp_MultipleContiguousRangesSelected() : void
        longPress(7);
        shiftTap(11);
        tap(20);
        shiftTap(25);
        assertRangeSelected(7, 11);
        assertRangeSelected(20, 25);
        assertSelectionSize(11);
!!!43777079.java!!!	testSingleTapUp_ShiftReducesSelectionRange_FromPreviousShiftClick() : void
        longPress(7);
        shiftTap(17);
        shiftTap(10);
        assertRangeSelection(7, 10);
!!!43777207.java!!!	testSingleTapUp_ShiftReducesSelectionRange_FromPreviousShiftClick_Backwards() : void
        mManager.onLongPress(TestInputEvent.tap(17));
        shiftTap(7);
        shiftTap(14);
        assertRangeSelection(14, 17);
!!!43777335.java!!!	testSingleTapUp_ShiftReversesSelectionDirection() : void
        longPress(7);
        shiftTap(17);
        shiftTap(0);
        assertRangeSelection(0, 7);
!!!43777463.java!!!	testSingleSelectMode() : void
        mManager = new MultiSelectManager(mEnv, mAdapter, MultiSelectManager.MODE_SINGLE, null);
        mManager.addCallback(mCallback);
        longPress(20);
        tap(13);
        assertSelection(items.get(13));
!!!43777591.java!!!	testSingleSelectMode_ShiftTap() : void
        mManager = new MultiSelectManager(mEnv, mAdapter, MultiSelectManager.MODE_SINGLE, null);
        mManager.addCallback(mCallback);
        longPress(13);
        shiftTap(20);
        assertSelection(items.get(20));
!!!43777719.java!!!	testRangeSelection() : void
        mManager.startRangeSelection(15);
        mManager.snapRangeSelection(19);
        assertRangeSelection(15, 19);
!!!43777847.java!!!	testRangeSelection_snapExpand() : void
        mManager.startRangeSelection(15);
        mManager.snapRangeSelection(19);
        mManager.snapRangeSelection(27);
        assertRangeSelection(15, 27);
!!!43777975.java!!!	testRangeSelection_snapContract() : void
        mManager.startRangeSelection(15);
        mManager.snapRangeSelection(27);
        mManager.snapRangeSelection(19);
        assertRangeSelection(15, 19);
!!!43778103.java!!!	testRangeSelection_snapInvert() : void
        mManager.startRangeSelection(15);
        mManager.snapRangeSelection(27);
        mManager.snapRangeSelection(3);
        assertRangeSelection(3, 15);
!!!43778231.java!!!	testRangeSelection_multiple() : void
        mManager.startRangeSelection(15);
        mManager.snapRangeSelection(27);
        mManager.endRangeSelection();
        mManager.startRangeSelection(42);
        mManager.snapRangeSelection(57);
        assertSelectionSize(29);
        assertRangeSelected(15, 27);
        assertRangeSelected(42, 57);

!!!43778359.java!!!	testRangeSelection_singleSelect() : void
        mManager = new MultiSelectManager(mEnv, mAdapter, MultiSelectManager.MODE_SINGLE, null);
        mManager.addCallback(mCallback);
        mManager.startRangeSelection(11);
        mManager.snapRangeSelection(19);
        assertSelectionSize(1);
        assertSelection(items.get(19));
!!!43778487.java!!!	testProvisionalSelection() : void
        Selection s = mManager.getSelection();
        assertSelection();

        SparseBooleanArray provisional = new SparseBooleanArray();
        provisional.append(1, true);
        provisional.append(2, true);
        s.setProvisionalSelection(getItemIds(provisional));
        assertSelection(items.get(1), items.get(2));
!!!43778615.java!!!	testProvisionalSelection_Replace() : void
        Selection s = mManager.getSelection();

        SparseBooleanArray provisional = new SparseBooleanArray();
        provisional.append(1, true);
        provisional.append(2, true);
        s.setProvisionalSelection(getItemIds(provisional));

        provisional.clear();
        provisional.append(3, true);
        provisional.append(4, true);
        s.setProvisionalSelection(getItemIds(provisional));
        assertSelection(items.get(3), items.get(4));
!!!43778743.java!!!	testProvisionalSelection_IntersectsExistingProvisionalSelection() : void
        Selection s = mManager.getSelection();

        SparseBooleanArray provisional = new SparseBooleanArray();
        provisional.append(1, true);
        provisional.append(2, true);
        s.setProvisionalSelection(getItemIds(provisional));

        provisional.clear();
        provisional.append(1, true);
        s.setProvisionalSelection(getItemIds(provisional));
        assertSelection(items.get(1));
!!!43778871.java!!!	testProvisionalSelection_Apply() : void
        Selection s = mManager.getSelection();

        SparseBooleanArray provisional = new SparseBooleanArray();
        provisional.append(1, true);
        provisional.append(2, true);
        s.setProvisionalSelection(getItemIds(provisional));
        s.applyProvisionalSelection();
        assertSelection(items.get(1), items.get(2));
!!!43778999.java!!!	testProvisionalSelection_Cancel() : void
        mManager.toggleSelection(items.get(1));
        mManager.toggleSelection(items.get(2));
        Selection s = mManager.getSelection();

        SparseBooleanArray provisional = new SparseBooleanArray();
        provisional.append(3, true);
        provisional.append(4, true);
        s.setProvisionalSelection(getItemIds(provisional));
        s.cancelProvisionalSelection();

        // Original selection should remain.
        assertSelection(items.get(1), items.get(2));
!!!43779127.java!!!	testProvisionalSelection_IntersectsAppliedSelection() : void
        mManager.toggleSelection(items.get(1));
        mManager.toggleSelection(items.get(2));
        Selection s = mManager.getSelection();

        SparseBooleanArray provisional = new SparseBooleanArray();
        provisional.append(2, true);
        provisional.append(3, true);
        s.setProvisionalSelection(getItemIds(provisional));
        assertSelection(items.get(1), items.get(2), items.get(3));
!!!43779255.java!!!	getItemIds(inout selection : SparseBooleanArray) : String
        Set<String> ids = new HashSet<>();

        int count = selection.size();
        for (int i = 0; i < count; ++i) {
            ids.add(items.get(selection.keyAt(i)));
        }

        return ids;
!!!43779383.java!!!	longPress(in position : int) : void
        mManager.onLongPress(TestInputEvent.tap(position));
!!!43779511.java!!!	tap(in position : int) : void
        mManager.onSingleTapUp(TestInputEvent.tap(position));
!!!43779639.java!!!	shiftTap(in position : int) : void
        mManager.onSingleTapUp(TestInputEvent.shiftTap(position));
!!!43779767.java!!!	click(in position : int) : void
        mManager.onSingleTapUp(TestInputEvent.click(position));
!!!43779895.java!!!	shiftClick(in position : int) : void
        mManager.onSingleTapUp(TestInputEvent.shiftClick(position));
!!!43780023.java!!!	assertSelected(inout  : String...expected) : void
        for (int i = 0; i < expected.length; i++) {
            Selection selection = mManager.getSelection();
            String err = String.format(
                    "Selection %s does not contain %s", selection, expected[i]);
            assertTrue(err, selection.contains(expected[i]));
        }
!!!43780151.java!!!	assertSelection(inout  : String...expected) : void
        assertSelectionSize(expected.length);
        assertSelected(expected);
!!!43780279.java!!!	assertRangeSelected(in begin : int, in end : int) : void
        for (int i = begin; i <= end; i++) {
            assertSelected(items.get(i));
        }
!!!43780407.java!!!	assertRangeSelection(in begin : int, in end : int) : void
        assertSelectionSize(end - begin + 1);
        assertRangeSelected(begin, end);
!!!43780535.java!!!	assertSelectionSize(in expected : int) : void
        Selection selection = mManager.getSelection();
        assertEquals(selection.toString(), expected, selection.size());
