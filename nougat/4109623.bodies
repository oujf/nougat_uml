class AppFuseCallback
!!!43917239.java!!!	getFileSize(in inode : int) : long
            return MtpDocumentsProvider.this.getFileSize(String.valueOf(inode));
!!!43917367.java!!!	readObjectBytes(in inode : int, in offset : long, in size : long, inout buffer : byte) : long
            final Identifier identifier = mDatabase.createIdentifier(Integer.toString(inode));
            final MtpDeviceRecord record = getDeviceToolkit(identifier.mDeviceId).mDeviceRecord;

            if (MtpDeviceRecord.isSupported(
                    record.operationsSupported, MtpConstants.OPERATION_GET_PARTIAL_OBJECT_64)) {
                return mMtpManager.getPartialObject64(
                        identifier.mDeviceId, identifier.mObjectHandle, offset, size, buffer);
            }

            if (0 <= offset && offset <= 0xffffffffL && MtpDeviceRecord.isSupported(
                    record.operationsSupported, MtpConstants.OPERATION_GET_PARTIAL_OBJECT)) {
                return mMtpManager.getPartialObject(
                        identifier.mDeviceId, identifier.mObjectHandle, offset, size, buffer);
            }

            throw new UnsupportedOperationException();
!!!43917495.java!!!	writeObjectBytes(in fileHandle : long, in inode : int, in offset : long, in size : int, inout bytes : byte) : int
            final MtpFileWriter writer;
            if (mWriters.containsKey(fileHandle)) {
                writer = mWriters.get(fileHandle);
            } else {
                writer = new MtpFileWriter(mContext, String.valueOf(inode));
                mWriters.put(fileHandle, writer);
            }
            return writer.write(offset, size, bytes);
!!!43917623.java!!!	flushFileHandle(in fileHandle : long) : void
            final MtpFileWriter writer = mWriters.get(fileHandle);
            if (writer == null) {
                // File handle for reading.
                return;
            }
            final MtpDeviceRecord device = getDeviceToolkit(
                    mDatabase.createIdentifier(writer.getDocumentId()).mDeviceId).mDeviceRecord;
            writer.flush(mMtpManager, mDatabase, device.operationsSupported);
!!!43917751.java!!!	closeFileHandle(in fileHandle : long) : void
            final MtpFileWriter writer = mWriters.get(fileHandle);
            if (writer == null) {
                // File handle for reading.
                return;
            }
            try {
                writer.close();
            } finally {
                mWriters.remove(fileHandle);
            }
