class AppFuseTest
!!!43925431.java!!!	testMount() : void
        final StorageManager storageManager = getContext().getSystemService(StorageManager.class);
        final AppFuse appFuse = new AppFuse("test", new TestCallback());
        appFuse.mount(storageManager);
        final File file = appFuse.getMountPoint();
        assertTrue(file.isDirectory());
        assertEquals(1, Os.stat(file.getPath()).st_ino);
        appFuse.close();
        assertTrue(1 != Os.stat(file.getPath()).st_ino);
!!!43925559.java!!!	testOpenFile() : void
        final StorageManager storageManager = getContext().getSystemService(StorageManager.class);
        final int INODE = 10;
        final AppFuse appFuse = new AppFuse(
                "test",
                new TestCallback() {
                    @Override
                    public long getFileSize(int inode) throws FileNotFoundException {
                        if (INODE == inode) {
                            return 1024;
                        }
                        throw new FileNotFoundException();
                    }
                });
        appFuse.mount(storageManager);
        final ParcelFileDescriptor fd = appFuse.openFile(
                INODE, ParcelFileDescriptor.MODE_READ_ONLY);
        fd.close();
        appFuse.close();
!!!43925687.java!!!	testOpenFile_fileNotFound() : void
        final StorageManager storageManager = getContext().getSystemService(StorageManager.class);
        final int INODE = 10;
        final AppFuse appFuse = new AppFuse("test", new TestCallback());
        appFuse.mount(storageManager);
        try {
            appFuse.openFile(INODE, ParcelFileDescriptor.MODE_READ_ONLY);
            fail();
        } catch (FileNotFoundException exp) {}
        appFuse.close();
!!!43925815.java!!!	testOpenFile_illegalMode() : void
        final StorageManager storageManager = getContext().getSystemService(StorageManager.class);
        final int INODE = 10;
        final AppFuse appFuse = new AppFuse("test", new TestCallback());
        appFuse.mount(storageManager);
        try {
            appFuse.openFile(INODE, ParcelFileDescriptor.MODE_READ_WRITE);
            fail();
        } catch (IllegalArgumentException exp) {}
        appFuse.close();
!!!43925943.java!!!	testReadFile() : void
        final StorageManager storageManager = getContext().getSystemService(StorageManager.class);
        final int fileInode = 10;
        final byte[] fileBytes = new byte[] { 'a', 'b', 'c', 'd', 'e' };
        final AppFuse appFuse = new AppFuse(
                "test",
                new TestCallback() {
                    @Override
                    public long getFileSize(int inode) throws FileNotFoundException {
                        if (inode == fileInode) {
                            return fileBytes.length;
                        }
                        return super.getFileSize(inode);
                    }

                    @Override
                    public long readObjectBytes(int inode, long offset, long size, byte[] bytes)
                            throws IOException {
                        if (inode == fileInode) {
                            int i = 0;
                            while (i < size && i + offset < fileBytes.length)  {
                                bytes[i] = fileBytes[(int) (i + offset)];
                                i++;
                            }
                            return i;
                        }
                        return super.readObjectBytes(inode, offset, size, bytes);
                    }
                });
        appFuse.mount(storageManager);
        final ParcelFileDescriptor fd = appFuse.openFile(
                fileInode, ParcelFileDescriptor.MODE_READ_ONLY);
        try (final ParcelFileDescriptor.AutoCloseInputStream stream =
                new ParcelFileDescriptor.AutoCloseInputStream(fd)) {
            final byte[] buffer = new byte[1024];
            final int size = stream.read(buffer, 0, buffer.length);
            assertEquals(5, size);
        }
        appFuse.close();
!!!43926071.java!!!	testWriteFile() : void
        final StorageManager storageManager = getContext().getSystemService(StorageManager.class);
        final int INODE = 10;
        final byte[] resultBytes = new byte[5];
        final AppFuse appFuse = new AppFuse(
                "test",
                new TestCallback() {
                    @Override
                    public long getFileSize(int inode) throws FileNotFoundException {
                        if (inode != INODE) {
                            throw new FileNotFoundException();
                        }
                        return resultBytes.length;
                    }

                    @Override
                    public int writeObjectBytes(
                            long fileHandle, int inode, long offset, int size, byte[] bytes) {
                        for (int i = 0; i < size; i++) {
                            resultBytes[(int)(offset + i)] = bytes[i];
                        }
                        return size;
                    }
                });
        appFuse.mount(storageManager);
        final ParcelFileDescriptor fd = appFuse.openFile(
                INODE, ParcelFileDescriptor.MODE_WRITE_ONLY | ParcelFileDescriptor.MODE_TRUNCATE);
        try (final ParcelFileDescriptor.AutoCloseOutputStream stream =
                new ParcelFileDescriptor.AutoCloseOutputStream(fd)) {
            stream.write('a');
            stream.write('b');
            stream.write('c');
            stream.write('d');
            stream.write('e');
        }
        final byte[] BYTES = new byte[] { 'a', 'b', 'c', 'd', 'e' };
        assertTrue(Arrays.equals(BYTES, resultBytes));
        appFuse.close();
!!!43926199.java!!!	testWriteFile_writeError() : void
        final StorageManager storageManager = getContext().getSystemService(StorageManager.class);
        final int INODE = 10;
        final AppFuse appFuse = new AppFuse(
                "test",
                new TestCallback() {
                    @Override
                    public long getFileSize(int inode) throws FileNotFoundException {
                        if (inode != INODE) {
                            throw new FileNotFoundException();
                        }
                        return 5;
                    }
                });
        appFuse.mount(storageManager);
        final ParcelFileDescriptor fd = appFuse.openFile(
                INODE, ParcelFileDescriptor.MODE_WRITE_ONLY | ParcelFileDescriptor.MODE_TRUNCATE);
        try (final ParcelFileDescriptor.AutoCloseOutputStream stream =
                new ParcelFileDescriptor.AutoCloseOutputStream(fd)) {
            stream.write('a');
            fail();
        } catch (IOException e) {
        }
        appFuse.close();
!!!43926327.java!!!	testWriteFile_flushError() : void
        final StorageManager storageManager = getContext().getSystemService(StorageManager.class);
        final int INODE = 10;
        final AppFuse appFuse = new AppFuse(
                "test",
                new TestCallback() {
                    @Override
                    public long getFileSize(int inode) throws FileNotFoundException {
                        if (inode != INODE) {
                            throw new FileNotFoundException();
                        }
                        return 5;
                    }

                    @Override
                    public int writeObjectBytes(
                            long fileHandle, int inode, long offset, int size, byte[] bytes) {
                        return size;
                    }

                    @Override
                    public void flushFileHandle(long fileHandle) throws IOException {
                        throw new IOException();
                    }
                });
        appFuse.mount(storageManager);
        final ParcelFileDescriptor fd = appFuse.openFile(
                INODE, ParcelFileDescriptor.MODE_WRITE_ONLY | ParcelFileDescriptor.MODE_TRUNCATE);
        try (final ParcelFileDescriptor.AutoCloseOutputStream stream =
                new ParcelFileDescriptor.AutoCloseOutputStream(fd)) {
            stream.write('a');
            try {
                IoUtils.close(fd.getFileDescriptor());
                fail();
            } catch (IOException e) {
            }
        }
        appFuse.close();
