class OSUManager
!!!44018103.java!!!	OSUManager(inout context : Context)
        mContext = context;
        mAppBridge = new AppBridge(context);
        mIconCache = new IconCache(this);
        mWifiNetworkAdapter = new WifiNetworkAdapter(context, this);
        mSubscriptionTimer = new SubscriptionTimer(this, mWifiNetworkAdapter, context);
        mOSUCache = new OSUCache();
        KeyStore ks = null;
        try {
            //ks = loadKeyStore(KEYSTORE_FILE, readCertsFromDisk(WFA_CA_LOC));
            ks = loadKeyStore(new File(context.getFilesDir(), KEYSTORE_FILE),
                    OSUSocketFactory.buildCertSet());
        } catch (IOException e) {
            Log.e(TAG, "Failed to initialize Passpoint keystore, OSU disabled", e);
        }
        mKeyStore = ks;
!!!44018231.java!!!	loadKeyStore(inout ksFile : File, inout diskCerts : Set<X509Certificate>) : KeyStore
        try {
            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
            if (ksFile.exists()) {
                try (FileInputStream in = new FileInputStream(ksFile)) {
                    keyStore.load(in, null);
                }

                // Note: comparing two sets of certs does not work.
                boolean mismatch = false;
                int loadCount = 0;
                for (int n = 0; n < 1000; n++) {
                    String alias = String.format("%s%d", CERT_WFA_ALIAS, n);
                    Certificate cert = keyStore.getCertificate(alias);
                    if (cert == null) {
                        break;
                    }

                    loadCount++;
                    boolean matched = false;
                    Iterator<X509Certificate> iter = diskCerts.iterator();
                    while (iter.hasNext()) {
                        X509Certificate diskCert = iter.next();
                        if (cert.equals(diskCert)) {
                            iter.remove();
                            matched = true;
                            break;
                        }
                    }
                    if (!matched) {
                        mismatch = true;
                        break;
                    }
                }
                if (mismatch || !diskCerts.isEmpty()) {
                    Log.d(TAG, "Re-seeding Passpoint key store with " +
                            diskCerts.size() + " WFA certs");
                    for (int n = 0; n < 1000; n++) {
                        String alias = String.format("%s%d", CERT_WFA_ALIAS, n);
                        Certificate cert = keyStore.getCertificate(alias);
                        if (cert == null) {
                            break;
                        } else {
                            keyStore.deleteEntry(alias);
                        }
                    }
                    int index = 0;
                    for (X509Certificate caCert : diskCerts) {
                        keyStore.setCertificateEntry(
                                String.format("%s%d", CERT_WFA_ALIAS, index), caCert);
                        index++;
                    }

                    try (FileOutputStream out = new FileOutputStream(ksFile)) {
                        keyStore.store(out, null);
                    }
                } else {
                    Log.d(TAG, "Loaded Passpoint key store with " + loadCount + " CA certs");
                    Enumeration<String> aliases = keyStore.aliases();
                    while (aliases.hasMoreElements()) {
                        Log.d("ZXC", "KS Alias '" + aliases.nextElement() + "'");
                    }
                }
            } else {
                keyStore.load(null, null);
                int index = 0;
                for (X509Certificate caCert : diskCerts) {
                    keyStore.setCertificateEntry(
                            String.format("%s%d", CERT_WFA_ALIAS, index), caCert);
                    index++;
                }

                try (FileOutputStream out = new FileOutputStream(ksFile)) {
                    keyStore.store(out, null);
                }
                Log.d(TAG, "Initialized Passpoint key store with " +
                        diskCerts.size() + " CA certs");
            }
            return keyStore;
        } catch (GeneralSecurityException gse) {
            throw new IOException(gse);
        }
!!!44018359.java!!!	readCertsFromDisk(inout dir : String) : Set<X509Certificate>
        Set<X509Certificate> certs = new HashSet<>();
        CertificateFactory certFactory = CertificateFactory.getInstance("X.509");
        File caDir = new File(dir);
        File[] certFiles = caDir.listFiles();
        if (certFiles != null) {
            for (File certFile : certFiles) {
                try {
                    try (FileInputStream in = new FileInputStream(certFile)) {
                        Certificate cert = certFactory.generateCertificate(in);
                        if (cert instanceof X509Certificate) {
                            certs.add((X509Certificate) cert);
                        }
                    }
                } catch (CertificateException | IOException e) {
                            /* Ignore */
                }
            }
        }
        return certs;
!!!44018487.java!!!	getKeyStore() : KeyStore
        return mKeyStore;
!!!44019255.java!!!	getAvailableOSUs() : OSUInfo
        synchronized (mOSUMap) {
            List<OSUInfo> completeOSUs = new ArrayList<>();
            for (OSUInfo osuInfo : mOSUMap.values()) {
                if (osuInfo.getIconStatus() == OSUInfo.IconStatus.Available) {
                    completeOSUs.add(osuInfo);
                }
            }
            return completeOSUs;
        }
!!!44019383.java!!!	recheckTimers() : void
        mSubscriptionTimer.checkUpdates();
!!!44019511.java!!!	setOSUSelection(in osuID : int) : void
        OSUInfo selection = null;
        for (OSUInfo osuInfo : mOSUMap.values()) {
            Log.d("ZXZ", "In select: " + osuInfo + ", id " + osuInfo.getOsuID());
            if (osuInfo.getOsuID() == osuID &&
                    osuInfo.getIconStatus() == OSUInfo.IconStatus.Available) {
                selection = osuInfo;
                break;
            }
        }

        Log.d(TAG, "Selected OSU ID " + osuID + ", matches " + selection);

        if (selection == null) {
            mPendingOSU = null;
            return;
        }

        mPendingOSU = selection;
        WifiConfiguration config = mWifiNetworkAdapter.getActiveWifiConfig();

        if (config != null &&
                bssidMatch(selection) &&
                Utils.unquote(config.SSID).equals(selection.getSSID())) {

            try {
                // Go straight to provisioning if the network is already selected.
                // Also note that mOSUNwkID is left unset to leave the network around after
                // flow completion since it was not added by the OSU flow.
                initiateProvisioning(mPendingOSU, mWifiNetworkAdapter.getCurrentNetwork());
            } catch (IOException ioe) {
                notifyUser(OSUOperationStatus.ProvisioningFailure, ioe.getMessage(),
                        mPendingOSU.getName(LOCALE));
            } finally {
                mPendingOSU = null;
            }
        } else {
            try {
                mOSUNwkID = mWifiNetworkAdapter.connect(selection, mPendingOSU.getName(LOCALE));
            } catch (IOException ioe) {
                notifyUser(OSUOperationStatus.ProvisioningFailure, ioe.getMessage(),
                        selection.getName(LOCALE));
            }
        }
!!!44019639.java!!!	networkConfigChange(inout configuration : WifiConfiguration) : void
        mWifiNetworkAdapter.networkConfigChange(configuration);
!!!44019767.java!!!	networkConnectEvent(inout wifiInfo : WifiInfo) : void
        if (wifiInfo != null) {
            setActiveNetwork(mWifiNetworkAdapter.getActiveWifiConfig(),
                    mWifiNetworkAdapter.getCurrentNetwork());
        }
!!!44019895.java!!!	wifiStateChange(inout on : boolean) : void
        if (!on) {
            int current = mOSUMap.size();
            mOSUMap.clear();
            mOSUCache.clearAll();
            mIconCache.clear();
            if (current > 0) {
                notifyOSUCount(0);
            }
        }
!!!44020023.java!!!	bssidMatch(inout osuInfo : OSUInfo) : boolean
        if (MATCH_BSSID) {
            WifiInfo wifiInfo = mWifiNetworkAdapter.getConnectionInfo();
            return wifiInfo != null && Utils.parseMac(wifiInfo.getBSSID()) == osuInfo.getBSSID();
        } else {
            return true;
        }
!!!44020151.java!!!	setActiveNetwork(inout wifiConfiguration : WifiConfiguration, inout network : Network) : void
        Log.d(TAG, "Network change: " + network + ", cfg " +
                (wifiConfiguration != null ? wifiConfiguration.SSID : "-") + ", osu " + mPendingOSU);
        if (mPendingOSU != null &&
                wifiConfiguration != null &&
                network != null &&
                bssidMatch(mPendingOSU) &&
                Utils.unquote(wifiConfiguration.SSID).equals(mPendingOSU.getSSID())) {

            try {
                Log.d(TAG, "New network " + network + ", current OSU " + mPendingOSU);
                initiateProvisioning(mPendingOSU, network);
            } catch (IOException ioe) {
                notifyUser(OSUOperationStatus.ProvisioningFailure, ioe.getMessage(),
                        mPendingOSU.getName(LOCALE));
            } finally {
                mPendingOSU = null;
            }
            return;
        }

        /*
        // !!! Hack to force start remediation at connection time
        else if (wifiConfiguration != null && wifiConfiguration.isPasspoint()) {
            HomeSP homeSP = mWifiConfigStore.getHomeSPForConfig(wifiConfiguration);
            if (homeSP != null && homeSP.getSubscriptionUpdate() != null) {
                if (!mServiceThreads.containsKey(homeSP.getFQDN())) {
                    try {
                        remediate(homeSP);
                    } catch (IOException ioe) {
                        Log.w(TAG, "Failed to remediate: " + ioe);
                    }
                }
            }
        }
        */
        else if (wifiConfiguration == null) {
            mServiceThreads.clear();
        }
!!!44020279.java!!!	initiateProvisioning(inout osuInfo : OSUInfo, inout network : Network) : void
        synchronized (mWifiNetworkAdapter) {
            if (mProvisioningThread != null) {
                mProvisioningThread.connect(null);
                mProvisioningThread = null;
            }
            if (mRedirectListener != null) {
                mRedirectListener.abort();
                mRedirectListener = null;
            }
            if (osuInfo != null) {
                //new ConnMonitor().start();
                mProvisioningThread = new OSUThread(osuInfo, this, getKeyManager(null, mKeyStore));
                mProvisioningThread.start();
                //mWifiNetworkAdapter.associate(osuInfo.getSSID(),
                //        osuInfo.getBSSID(), osuInfo.getOSUProvider().getOsuNai());
                mProvisioningThread.connect(network);
            }
        }
!!!44020407.java!!!	getKeyManager(inout homeSP : HomeSP, inout keyStore : KeyStore) : KeyManager
        return homeSP != null ? new ClientKeyManager(homeSP, keyStore) :
                new WiFiKeyManager(keyStore);
!!!44020535.java!!!	isOSU(inout ssid : String) : boolean
        synchronized (mOSUMap) {
            return mOSUSSIDs.contains(ssid);
        }
!!!44020663.java!!!	tickleIconCache(inout all : boolean) : void
        mIconCache.tickle(all);

        if (all) {
            synchronized (mOSUMap) {
                int current = mOSUMap.size();
                mOSUMap.clear();
                mOSUCache.clearAll();
                mIconCache.clear();
                if (current > 0) {
                    notifyOSUCount(0);
                }
            }
        }
!!!44020791.java!!!	pushScanResults(inout scanResults : Collection<ScanResult>) : void
        Map<OSUProvider, ScanResult> results = mOSUCache.pushScanResults(scanResults);
        if (results != null) {
            updateOSUInfoCache(results);
        }
!!!44020919.java!!!	updateOSUInfoCache(inout results : Map<OSUProvider, ScanResult>) : void
        Map<OSUProvider, OSUInfo> osus = new HashMap<>();
        for (Map.Entry<OSUProvider, ScanResult> entry : results.entrySet()) {
            OSUInfo existing = mOSUMap.get(entry.getKey());
            long bssid = Utils.parseMac(entry.getValue().BSSID);

            if (existing == null || existing.getBSSID() != bssid) {
                osus.put(entry.getKey(), new OSUInfo(entry.getValue(), entry.getKey().getSSID(),
                        entry.getKey(), mOSUSequence.getAndIncrement()));
            } else {
                // Maintain existing entries.
                osus.put(entry.getKey(), existing);
            }
        }

        mOSUMap.clear();
        mOSUMap.putAll(osus);

        mOSUSSIDs.clear();
        for (OSUInfo osuInfo : mOSUMap.values()) {
            mOSUSSIDs.add(osuInfo.getSSID());
        }

        if (mOSUMap.isEmpty()) {
            notifyOSUCount(0);
        }
        initiateIconQueries();
        Log.d(TAG, "Latest (app) OSU info: " + mOSUMap);
!!!44021047.java!!!	iconResults(inout osuInfos : List<OSUInfo>) : void
        int newIcons = 0;
        for (OSUInfo osuInfo : osuInfos) {
            if (osuInfo.getIconStatus() == OSUInfo.IconStatus.Available) {
                newIcons++;
            }
        }
        if (newIcons > 0) {
            int count = 0;
            for (OSUInfo existing : mOSUMap.values()) {
                if (existing.getIconStatus() == OSUInfo.IconStatus.Available) {
                    count++;
                }
            }
            Log.d(TAG, "Icon results for " + count + " OSUs");
            notifyOSUCount(count);
        }
!!!44021175.java!!!	notifyOSUCount(in count : int) : void
        mAppBridge.showOsuCount(count, getAvailableOSUs());
!!!44021303.java!!!	initiateIconQueries() : void
        for (OSUInfo osuInfo : mOSUMap.values()) {
            if (osuInfo.getIconStatus() == OSUInfo.IconStatus.NotQueried) {
                mIconCache.startIconQuery(osuInfo,
                        osuInfo.getIconInfo(LOCALE, ICON_TYPES, ICON_WIDTH, ICON_HEIGHT));
            }
        }
!!!44021431.java!!!	deauth(in bssid : long, inout ess : boolean, in delay : int, inout url : String) : void
        Log.d(TAG, String.format("De-auth imminent on %s, delay %ss to '%s'",
                ess ? "ess" : "bss",
                delay,
                url));
        mWifiNetworkAdapter.setHoldoffTime(delay * Constants.MILLIS_IN_A_SEC, ess);
        HomeSP homeSP = mWifiNetworkAdapter.getCurrentSP();
        String spName = homeSP != null ? homeSP.getFriendlyName() : "unknown";
        mAppBridge.showDeauth(spName, ess, delay, url);
!!!44021559.java!!!	wnmRemediate(in bssid : long, inout url : String, inout match : PasspointMatch) : void
        WifiConfiguration config = mWifiNetworkAdapter.getActiveWifiConfig();
        HomeSP homeSP = MOManager.buildSP(config.getMoTree());
        if (homeSP == null) {
            throw new IOException("Remediation request for unidentified Passpoint network " +
                    config.networkId);
        }
        Network network = mWifiNetworkAdapter.getCurrentNetwork();
        if (network == null) {
            throw new IOException("Failed to determine current network");
        }
        WifiInfo wifiInfo = mWifiNetworkAdapter.getConnectionInfo();
        if (wifiInfo == null || Utils.parseMac(wifiInfo.getBSSID()) != bssid) {
            throw new IOException("Mismatching BSSID");
        }
        Log.d(TAG, "WNM Remediation on " + network.netId + " FQDN " + homeSP.getFQDN());

        doRemediate(url, network, homeSP, false);
!!!44021687.java!!!	remediate(inout homeSP : HomeSP, inout policy : boolean) : void
        UpdateInfo updateInfo;
        if (policy) {
            if (homeSP.getPolicy() == null) {
                throw new IOException("No policy object");
            }
            updateInfo = homeSP.getPolicy().getPolicyUpdate();
        } else {
            updateInfo = homeSP.getSubscriptionUpdate();
        }
        switch (updateInfo.getUpdateRestriction()) {
            case HomeSP: {
                Network network = mWifiNetworkAdapter.getCurrentNetwork();
                if (network == null) {
                    throw new IOException("Failed to determine current network");
                }

                WifiConfiguration config = mWifiNetworkAdapter.getActivePasspointNetwork();
                HomeSP activeSP = MOManager.buildSP(config.getMoTree());

                if (activeSP == null || !activeSP.getFQDN().equals(homeSP.getFQDN())) {
                    throw new IOException("Remediation restricted to HomeSP");
                }
                doRemediate(updateInfo.getURI(), network, homeSP, policy);
                break;
            }
            case RoamingPartner: {
                Network network = mWifiNetworkAdapter.getCurrentNetwork();
                if (network == null) {
                    throw new IOException("Failed to determine current network");
                }

                WifiInfo wifiInfo = mWifiNetworkAdapter.getConnectionInfo();
                if (wifiInfo == null) {
                    throw new IOException("Unable to determine WiFi info");
                }

                PasspointMatch match = mWifiNetworkAdapter.
                        matchProviderWithCurrentNetwork(homeSP.getFQDN());

                if (match == PasspointMatch.HomeProvider ||
                        match == PasspointMatch.RoamingProvider) {
                    doRemediate(updateInfo.getURI(), network, homeSP, policy);
                } else {
                    throw new IOException("No roaming network match: " + match);
                }
                break;
            }
            case Unrestricted: {
                Network network = mWifiNetworkAdapter.getCurrentNetwork();
                doRemediate(updateInfo.getURI(), network, homeSP, policy);
                break;
            }
        }
!!!44021815.java!!!	doRemediate(inout url : String, inout network : Network, inout homeSP : HomeSP, inout policy : boolean) : void
        synchronized (mWifiNetworkAdapter) {
            OSUThread existing = mServiceThreads.get(homeSP.getFQDN());
            if (existing != null) {
                if (System.currentTimeMillis() - existing.getLaunchTime() > REMEDIATION_TIMEOUT) {
                    throw new IOException("Ignoring recurring remediation request");
                } else {
                    existing.connect(null);
                }
            }

            try {
                OSUThread osuThread = new OSUThread(url, this,
                        getKeyManager(homeSP, mKeyStore),
                        homeSP, policy ? FLOW_POLICY : FLOW_REMEDIATION);
                osuThread.start();
                osuThread.connect(network);
                mServiceThreads.put(homeSP.getFQDN(), osuThread);
            } catch (MalformedURLException me) {
                throw new IOException("Failed to start remediation: " + me);
            }
        }
!!!44021943.java!!!	getMOTree(inout homeSP : HomeSP) : MOTree
        return mWifiNetworkAdapter.getMOTree(homeSP);
!!!44022071.java!!!	notifyIconReceived(in bssid : long, inout fileName : String, inout data : byte) : void
        mIconCache.notifyIconReceived(bssid, fileName, data);
!!!44022199.java!!!	doIconQuery(in bssid : long, inout fileName : String) : void
        mWifiNetworkAdapter.doIconQuery(bssid, fileName);
!!!44022327.java!!!	prepareUserInput(inout spName : String) : URL
        mRedirectListener = new RedirectListener(this, spName);
        return mRedirectListener.getURL();
!!!44022455.java!!!	startUserInput(inout target : URL, inout network : Network) : boolean
        mRedirectListener.startService();
        mWifiNetworkAdapter.launchBrowser(target, network, mRedirectListener.getURL());

        return mRedirectListener.waitForUser();
!!!44022583.java!!!	notifyUser(inout status : OSUOperationStatus, inout message : String, inout spName : String) : String
        if (status == OSUOperationStatus.UserInputComplete) {
            return null;
        }
        if (mOSUNwkID != null) {
            // Delete the OSU network if it was added by the OSU flow
            mWifiNetworkAdapter.deleteNetwork(mOSUNwkID);
            mOSUNwkID = null;
        }
        mAppBridge.showStatus(status, spName, message, null);
        return null;
!!!44022711.java!!!	provisioningFailed(inout spName : String, inout message : String, inout homeSP : HomeSP, in flowType : int) : void
        synchronized (mWifiNetworkAdapter) {
            switch (flowType) {
                case FLOW_PROVISIONING:
                    mProvisioningThread = null;
                    if (mRedirectListener != null) {
                        mRedirectListener.abort();
                        mRedirectListener = null;
                    }
                    break;
                case FLOW_REMEDIATION:
                case FLOW_POLICY:
                    mServiceThreads.remove(homeSP.getFQDN());
                    if (mServiceThreads.isEmpty() && mRedirectListener != null) {
                        mRedirectListener.abort();
                        mRedirectListener = null;
                    }
                    break;
            }
        }
        notifyUser(OSUOperationStatus.ProvisioningFailure, message, spName);
!!!44022839.java!!!	provisioningComplete(inout osuInfo : OSUInfo, inout moData : MOData, inout certs : Map<OSUCertType, List<X509Certificate>>, inout privateKey : PrivateKey, inout osuNetwork : Network) : void
        synchronized (mWifiNetworkAdapter) {
            mProvisioningThread = null;
        }
        try {
            Log.d("ZXZ", "MOTree.toXML: " + moData.getMOTree().toXml());
            HomeSP homeSP = mWifiNetworkAdapter.addSP(moData.getMOTree());

            Integer spNwk = mWifiNetworkAdapter.addNetwork(homeSP, certs, privateKey, osuNetwork);
            if (spNwk == null) {
                notifyUser(OSUOperationStatus.ProvisioningFailure,
                        "Failed to save network configuration", osuInfo.getName(LOCALE));
                mWifiNetworkAdapter.removeSP(homeSP.getFQDN());
            } else {
                Set<X509Certificate> rootCerts = OSUSocketFactory.getRootCerts(mKeyStore);
                X509Certificate remCert = getCert(certs, OSUCertType.Remediation);
                X509Certificate polCert = getCert(certs, OSUCertType.Policy);
                if (privateKey != null) {
                    X509Certificate cltCert = getCert(certs, OSUCertType.Client);
                    mKeyStore.setKeyEntry(CERT_CLT_KEY_ALIAS + homeSP,
                            privateKey.getEncoded(),
                            new X509Certificate[]{cltCert});
                    mKeyStore.setCertificateEntry(CERT_CLT_CERT_ALIAS, cltCert);
                }
                boolean usingShared = false;
                int newCerts = 0;
                if (remCert != null) {
                    if (!rootCerts.contains(remCert)) {
                        if (remCert.equals(polCert)) {
                            mKeyStore.setCertificateEntry(CERT_SHARED_ALIAS + homeSP.getFQDN(),
                                    remCert);
                            usingShared = true;
                            newCerts++;
                        } else {
                            mKeyStore.setCertificateEntry(CERT_REM_ALIAS + homeSP.getFQDN(),
                                    remCert);
                            newCerts++;
                        }
                    }
                }
                if (!usingShared && polCert != null) {
                    if (!rootCerts.contains(polCert)) {
                        mKeyStore.setCertificateEntry(CERT_POLICY_ALIAS + homeSP.getFQDN(),
                                remCert);
                        newCerts++;
                    }
                }

                if (newCerts > 0) {
                    try (FileOutputStream out = new FileOutputStream(KEYSTORE_FILE)) {
                        mKeyStore.store(out, null);
                    }
                }
                notifyUser(OSUOperationStatus.ProvisioningSuccess, null, osuInfo.getName(LOCALE));
                Log.d(TAG, "Provisioning complete.");
            }
        } catch (IOException | GeneralSecurityException | SAXException e) {
            Log.e(TAG, "Failed to provision: " + e, e);
            notifyUser(OSUOperationStatus.ProvisioningFailure, e.toString(),
                    osuInfo.getName(LOCALE));
        }
!!!44022967.java!!!	getCert(inout certMap : Map<OSUCertType, List<X509Certificate>>, inout certType : OSUCertType) : X509Certificate
        List<X509Certificate> certs = certMap.get(certType);
        if (certs == null || certs.isEmpty()) {
            return null;
        }
        return certs.iterator().next();
!!!44023095.java!!!	spDeleted(inout fqdn : String) : void
        int count = deleteCerts(mKeyStore, fqdn,
                CERT_REM_ALIAS, CERT_POLICY_ALIAS, CERT_SHARED_ALIAS);

        if (count > 0) {
            try (FileOutputStream out = new FileOutputStream(KEYSTORE_FILE)) {
                mKeyStore.store(out, null);
            } catch (IOException | GeneralSecurityException e) {
                Log.w(TAG, "Failed to remove certs from key store: " + e);
            }
        }
!!!44023223.java!!!	deleteCerts(inout keyStore : KeyStore, inout fqdn : String, inout  : String...prefixes) : int
        int count = 0;
        for (String prefix : prefixes) {
            try {
                String alias = prefix + fqdn;
                Certificate cert = keyStore.getCertificate(alias);
                if (cert != null) {
                    keyStore.deleteEntry(alias);
                    count++;
                }
            } catch (KeyStoreException kse) {
                /**/
            }
        }
        return count;
!!!44023351.java!!!	remediationComplete(inout homeSP : HomeSP, inout mods : Collection<MOData>, inout certs : Map<OSUCertType, List<X509Certificate>>, inout privateKey : PrivateKey) : void

        HomeSP altSP = mWifiNetworkAdapter.modifySP(homeSP, mods);
        X509Certificate caCert = null;
        List<X509Certificate> clientCerts = null;
        if (certs != null) {
            List<X509Certificate> certList = certs.get(OSUCertType.AAA);
            caCert = certList != null && !certList.isEmpty() ? certList.iterator().next() : null;
            clientCerts = certs.get(OSUCertType.Client);
        }
        if (altSP != null || certs != null) {
            if (altSP == null) {
                altSP = homeSP;     // No MO mods, only certs and key
            }
            mWifiNetworkAdapter.updateNetwork(altSP, caCert, clientCerts, privateKey);
        }
        notifyUser(OSUOperationStatus.ProvisioningSuccess, null, homeSP.getFriendlyName());
!!!44023479.java!!!	getOMADMAdapter() : OMADMAdapter
        return OMADMAdapter.getInstance(mContext);
