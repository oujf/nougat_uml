class BluetoothLeScanner
!!!2577591.java!!!	BluetoothLeScanner(inout bluetoothManager : IBluetoothManager)
        mBluetoothManager = bluetoothManager;
        mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
        mHandler = new Handler(Looper.getMainLooper());
        mLeScanClients = new HashMap<ScanCallback, BleScanCallbackWrapper>();
!!!2577719.java!!!	startScan(in callback : ScanCallback) : void
        startScan(null, new ScanSettings.Builder().build(), callback);
!!!2577847.java!!!	startScan(inout filters : List<ScanFilter>, inout settings : ScanSettings, in callback : ScanCallback) : void
        startScan(filters, settings, null, callback, null);
!!!2577975.java!!!	startScanFromSource(in workSource : WorkSource, in callback : ScanCallback) : void
        startScanFromSource(null, new ScanSettings.Builder().build(), workSource, callback);
!!!2578103.java!!!	startScanFromSource(inout filters : List<ScanFilter>, inout settings : ScanSettings, in workSource : WorkSource, in callback : ScanCallback) : void
        startScan(filters, settings, workSource, callback, null);
!!!2578231.java!!!	startScan(inout filters : List<ScanFilter>, inout settings : ScanSettings, in workSource : WorkSource, in callback : ScanCallback, inout resultStorages : List<List<ResultStorageDescriptor>>) : void
        BluetoothLeUtils.checkAdapterStateOn(mBluetoothAdapter);
        if (callback == null) {
            throw new IllegalArgumentException("callback is null");
        }
        if (settings == null) {
            throw new IllegalArgumentException("settings is null");
        }
        synchronized (mLeScanClients) {
            if (mLeScanClients.containsKey(callback)) {
                postCallbackError(callback, ScanCallback.SCAN_FAILED_ALREADY_STARTED);
                return;
            }
            IBluetoothGatt gatt;
            try {
                gatt = mBluetoothManager.getBluetoothGatt();
            } catch (RemoteException e) {
                gatt = null;
            }
            if (gatt == null) {
                postCallbackError(callback, ScanCallback.SCAN_FAILED_INTERNAL_ERROR);
                return;
            }
            if (!isSettingsConfigAllowedForScan(settings)) {
                postCallbackError(callback,
                        ScanCallback.SCAN_FAILED_FEATURE_UNSUPPORTED);
                return;
            }
            if (!isHardwareResourcesAvailableForScan(settings)) {
                postCallbackError(callback,
                        ScanCallback.SCAN_FAILED_OUT_OF_HARDWARE_RESOURCES);
                return;
            }
            if (!isSettingsAndFilterComboAllowed(settings, filters)) {
                postCallbackError(callback,
                        ScanCallback.SCAN_FAILED_FEATURE_UNSUPPORTED);
                return;
            }
            BleScanCallbackWrapper wrapper = new BleScanCallbackWrapper(gatt, filters,
                    settings, workSource, callback, resultStorages);
            wrapper.startRegisteration();
        }
!!!2578359.java!!!	stopScan(inout callback : ScanCallback) : void
        BluetoothLeUtils.checkAdapterStateOn(mBluetoothAdapter);
        synchronized (mLeScanClients) {
            BleScanCallbackWrapper wrapper = mLeScanClients.remove(callback);
            if (wrapper == null) {
                if (DBG) Log.d(TAG, "could not find callback wrapper");
                return;
            }
            wrapper.stopLeScan();
        }
!!!2578487.java!!!	flushPendingScanResults(inout callback : ScanCallback) : void
        BluetoothLeUtils.checkAdapterStateOn(mBluetoothAdapter);
        if (callback == null) {
            throw new IllegalArgumentException("callback cannot be null!");
        }
        synchronized (mLeScanClients) {
            BleScanCallbackWrapper wrapper = mLeScanClients.get(callback);
            if (wrapper == null) {
                return;
            }
            wrapper.flushPendingBatchResults();
        }
!!!2578615.java!!!	startTruncatedScan(inout truncatedFilters : List<TruncatedFilter>, inout settings : ScanSettings, in callback : ScanCallback) : void
        int filterSize = truncatedFilters.size();
        List<ScanFilter> scanFilters = new ArrayList<ScanFilter>(filterSize);
        List<List<ResultStorageDescriptor>> scanStorages =
                new ArrayList<List<ResultStorageDescriptor>>(filterSize);
        for (TruncatedFilter filter : truncatedFilters) {
            scanFilters.add(filter.getFilter());
            scanStorages.add(filter.getStorageDescriptors());
        }
        startScan(scanFilters, settings, null, callback, scanStorages);
!!!2578743.java!!!	cleanup() : void
        mLeScanClients.clear();
!!!2580023.java!!!	postCallbackError(in callback : ScanCallback, in errorCode : int) : void
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                callback.onScanFailed(errorCode);
            }
        });
!!!2580151.java!!!	isSettingsConfigAllowedForScan(inout settings : ScanSettings) : boolean
        if (mBluetoothAdapter.isOffloadedFilteringSupported()) {
            return true;
        }
        final int callbackType = settings.getCallbackType();
        // Only support regular scan if no offloaded filter support.
        if (callbackType == ScanSettings.CALLBACK_TYPE_ALL_MATCHES
                && settings.getReportDelayMillis() == 0) {
            return true;
        }
        return false;
!!!2580279.java!!!	isSettingsAndFilterComboAllowed(inout settings : ScanSettings, inout filterList : List<ScanFilter>) : boolean
        final int callbackType = settings.getCallbackType();
        // If onlost/onfound is requested, a non-empty filter is expected
        if ((callbackType & (ScanSettings.CALLBACK_TYPE_FIRST_MATCH
                        | ScanSettings.CALLBACK_TYPE_MATCH_LOST)) != 0) {
            if (filterList == null) {
                return false;
            }
            for (ScanFilter filter : filterList) {
                if (filter.isAllFieldsEmpty()) {
                    return false;
                }
            }
        }
        return true;
!!!2580407.java!!!	isHardwareResourcesAvailableForScan(inout settings : ScanSettings) : boolean
        final int callbackType = settings.getCallbackType();
        if ((callbackType & ScanSettings.CALLBACK_TYPE_FIRST_MATCH) != 0
                || (callbackType & ScanSettings.CALLBACK_TYPE_MATCH_LOST) != 0) {
            // For onlost/onfound, we required hw support be available
            return (mBluetoothAdapter.isOffloadedFilteringSupported() &&
                    mBluetoothAdapter.isHardwareTrackingFiltersAvailable());
        }
        return true;
