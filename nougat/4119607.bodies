class Asn1Decoder
!!!43976375.java!!!	mapTag(in tag : int) : Asn1Tag
        return sTagMap.get(tag);
!!!43976503.java!!!	decode(inout data : ByteBuffer) : Asn1Object
        Asn1Constructed root =
                new Asn1Constructed(0, null, data.remaining(), data, data.position());
        decode(0, root);
        return root.getChildren();
!!!43976631.java!!!	decode(in level : int, inout parent : Asn1Constructed) : void
        ByteBuffer data = parent.getPayload();
        while (data.hasRemaining()) {
            int tagPosition = data.position();
            int propMask = data.get(tagPosition) & ByteMask;
            if (propMask == 0 && parent.isIndefiniteLength() && data.get(tagPosition + 1) == 0) {
                parent.setEndOfData(tagPosition);
                return;
            }
            Asn1Class asn1Class = Asn1Class.values()[(propMask >> ClassShift) & ClassMask];
            boolean constructed = (propMask & ConstructedBit) != 0;

            int tag = decodeTag(data);
            int length = decodeLength(data);

            if (constructed) {
                ByteBuffer payload = peelOff(data, length);
                Asn1Constructed root =
                        new Asn1Constructed(tag, asn1Class, length, payload, tagPosition);
                decode(level + 1, root);
                if (length == IndefiniteLength) {
                    data.position(root.getEndOfData() + 2);     // advance past '00'
                }
                parent.addChild(root);
            } else {
                if (asn1Class != Asn1Class.Universal) {
                    parent.addChild(new Asn1Octets(tag, asn1Class, length, data));
                } else {
                    parent.addChild(buildScalar(tag, asn1Class, length, data));
                }
            }
        }
!!!43976759.java!!!	peelOff(inout base : ByteBuffer, in length : int) : ByteBuffer
        ByteBuffer copy = base.duplicate();
        if (length == IndefiniteLength) {
            return copy;
        }
        copy.limit(copy.position() + length);
        base.position(base.position() + length);
        return copy;
!!!43976887.java!!!	buildScalar(in tag : int, inout asn1Class : Asn1Class, in length : int, inout data : ByteBuffer) : Asn1Object
        switch (tag) {
            case TAG_BOOLEAN:
                return new Asn1Boolean(tag, asn1Class, length, data);
            case TAG_INTEGER:
            case TAG_ENUMERATED:
                return new Asn1Integer(tag, asn1Class, length, data);
            case TAG_BITSTRING:
                int bitResidual = data.get() & ByteMask;
                return new Asn1Octets(tag, asn1Class, length, data, bitResidual);
            case TAG_OCTET_STRING:
                return new Asn1Octets(tag, asn1Class, length, data);
            case TAG_OID:
                return new Asn1Oid(tag, asn1Class, length, data);
            case TAG_UTF8String:
            case TAG_NumericString:
            case TAG_PrintableString:
            case TAG_T61String:
            case TAG_VideotexString:
            case TAG_IA5String:
            case TAG_GraphicString:
            case TAG_VisibleString:
            case TAG_GeneralString:
            case TAG_UniversalString:
            case TAG_BMPString:
                return new Asn1String(tag, asn1Class, length, data);
            case TAG_GeneralizedTime:
            case TAG_UTCTime:
                // Should really be a dedicated time object
                return new Asn1String(tag, asn1Class, length, data);
            default:
                return new Asn1Octets(tag, asn1Class, length, data);
        }
!!!43977015.java!!!	decodeTag(inout data : ByteBuffer) : int
        int tag;
        byte tag0 = data.get();

        if ((tag = (tag0 & ContinuationTag)) == ContinuationTag) {
            int tagByte;
            tag = 0;
            while (((tagByte = data.get() & ByteMask) & MoreBit) != 0) {
                tag = (tag << MoreWidth) | (tagByte & MoreData);
                if ((tag & IntOverflow) != 0)
                    throw new DecodeException("Tag overflow", data.position());
            }
            tag = (tag << MoreWidth) | tagByte;
        }
        return tag;
!!!43977143.java!!!	decodeLength(inout data : ByteBuffer) : int
        int length;
        int lenlen = data.get() & ByteMask;

        if ((lenlen & MoreBit) == 0)    // One byte encoding
            length = lenlen;
        else {
            lenlen &= MoreData;
            if (lenlen == 0) {
                return IndefiniteLength;
            }
            length = 0;
            while (lenlen-- > 0) {
                length = (length << ByteWidth) | (data.get() & ByteMask);
                if ((length & IntOverflow) != 0 && lenlen > 0)
                    throw new DecodeException("Length overflow", data.position());
            }
        }
        return length;
