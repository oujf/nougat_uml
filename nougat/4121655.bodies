class XMLNode
!!!44001079.java!!!	XMLNode(inout parent : XMLNode, inout tag : String, inout attributes : Attributes)
        mTag = tag;

        mAttributes = new HashMap<>();

        if (attributes.getLength() > 0) {
            for (int n = 0; n < attributes.getLength(); n++)
                mAttributes.put(attributes.getQName(n), new NodeAttribute(attributes.getQName(n),
                        attributes.getType(n), attributes.getValue(n)));
        }

        mParent = parent;
        mChildren = new ArrayList<>();

        mTextBuilder = new StringBuilder();
!!!44001207.java!!!	XMLNode(inout parent : XMLNode, inout tag : String, inout attributes : Map<String, String>)
        mTag = tag;

        mAttributes = new HashMap<>(attributes == null ? 0 : attributes.size());

        if (attributes != null) {
            for (Map.Entry<String, String> entry : attributes.entrySet()) {
                mAttributes.put(entry.getKey(),
                        new NodeAttribute(entry.getKey(), "", entry.getValue()));
            }
        }

        mParent = parent;
        mChildren = new ArrayList<>();

        mTextBuilder = new StringBuilder();
!!!44001335.java!!!	setText(inout text : String) : void
        mText = text;
        mTextBuilder = null;
!!!44001463.java!!!	addText(inout chs : char, in start : int, in length : int) : void
        String s = new String(chs, start, length);
        String trimmed = s.trim();
        if (trimmed.isEmpty())
            return;

        if (s.charAt(0) != trimmed.charAt(0))
            mTextBuilder.append(' ');
        mTextBuilder.append(trimmed);
        if (s.charAt(s.length() - 1) != trimmed.charAt(trimmed.length() - 1))
            mTextBuilder.append(' ');
!!!44001591.java!!!	addChild(inout child : XMLNode) : void
        mChildren.add(child);
!!!44001719.java!!!	close() : void
        String text = mTextBuilder.toString().trim();
        StringBuilder filtered = new StringBuilder(text.length());
        for (int n = 0; n < text.length(); n++) {
            char ch = text.charAt(n);
            if (ch >= ' ')
                filtered.append(ch);
        }

        mText = filtered.toString();
        mTextBuilder = null;

        if (MOTree.hasMgmtTreeTag(mText)) {
            try {
                NodeAttribute urn = mAttributes.get(OMAConstants.SppMOAttribute);
                OMAParser omaParser = new OMAParser();
                mMO = omaParser.parse(mText, urn != null ? urn.getValue() : null);
            } catch (SAXException | IOException e) {
                mMO = null;
            }
        }
!!!44001847.java!!!	getTag() : String
        return mTag;
!!!44001975.java!!!	getNameSpace() : String
        String[] nsn = mTag.split(":");
        if (nsn.length != 2) {
            throw new OMAException("Non-namespaced tag: '" + mTag + "'");
        }
        return nsn[0];
!!!44002103.java!!!	getStrippedTag() : String
        String[] nsn = mTag.split(":");
        if (nsn.length != 2) {
            throw new OMAException("Non-namespaced tag: '" + mTag + "'");
        }
        return nsn[1].toLowerCase();
!!!44002231.java!!!	getSoleChild() : XMLNode
        if (mChildren.size() != 1) {
            throw new OMAException("Expected exactly one child to " + mTag);
        }
        return mChildren.get(0);
!!!44002359.java!!!	getParent() : XMLNode
        return mParent;
!!!44002487.java!!!	getText() : String
        return mText;
!!!44002615.java!!!	getAttributes() : String
        return Collections.unmodifiableMap(mAttributes);
!!!44002743.java!!!	getTextualAttributes() : String
        Map<String, String> map = new HashMap<>(mAttributes.size());
        for (Map.Entry<String, NodeAttribute> entry : mAttributes.entrySet()) {
            map.put(entry.getKey(), entry.getValue().getValue());
        }
        return map;
!!!44002871.java!!!	getAttributeValue(inout name : String) : String
        NodeAttribute nodeAttribute = mAttributes.get(name);
        return nodeAttribute != null ? nodeAttribute.getValue() : null;
!!!44002999.java!!!	getChildren() : XMLNode
        return mChildren;
!!!44003127.java!!!	getMOTree() : MOTree
        return mMO;
!!!44003255.java!!!	toString(inout indent : char, inout sb : StringBuilder) : void
        Arrays.fill(indent, ' ');

        sb.append(indent).append('<').append(mTag);
        for (Map.Entry<String, NodeAttribute> entry : mAttributes.entrySet()) {
            sb.append(' ').append(entry.getKey()).append("='")
                    .append(entry.getValue().getValue()).append('\'');
        }

        if (mText != null && !mText.isEmpty()) {
            sb.append('>').append(escapeCdata(mText)).append("</").append(mTag).append(">\n");
        } else if (mChildren.isEmpty()) {
            sb.append("/>\n");
        } else {
            sb.append(">\n");
            char[] subIndent = Arrays.copyOf(indent, indent.length + 2);
            for (XMLNode child : mChildren) {
                child.toString(subIndent, sb);
            }
            sb.append(indent).append("</").append(mTag).append(">\n");
        }
!!!44003383.java!!!	escapeCdata(inout text : String) : String
        if (!escapable(text)) {
            return text;
        }

        // Any appearance of ]]> in the text must be split into "]]" | "]]>" | <![CDATA[ | ">"
        // i.e. "split the sequence by putting a close CDATA and a new open CDATA before the '>'
        StringBuilder sb = new StringBuilder();
        sb.append(CDATA_OPEN);
        int start = 0;
        for (; ; ) {
            int etoken = text.indexOf(CDATA_CLOSE);
            if (etoken >= 0) {
                sb.append(text.substring(start, etoken + 2)).append(CDATA_CLOSE).append(CDATA_OPEN);
                start = etoken + 2;
            } else {
                if (start < text.length() - 1) {
                    sb.append(text.substring(start));
                }
                break;
            }
        }
        sb.append(CDATA_CLOSE);
        return sb.toString();
!!!44003511.java!!!	escapable(inout s : String) : boolean
        for (int n = 0; n < s.length(); n++) {
            if (XML_SPECIAL.contains(s.charAt(n))) {
                return true;
            }
        }
        return false;
!!!44003639.java!!!	toString() : String
        StringBuilder sb = new StringBuilder();
        toString(new char[0], sb);
        return sb.toString();
