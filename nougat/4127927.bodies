class LogoTypeImage
!!!44028599.java!!!	LogoTypeImage(inout sequence : Asn1Constructed)
            Iterator<Asn1Object> children = sequence.getChildren().iterator();

            Iterator<Asn1Object> logoTypeDetails =
                    castObject(children.next(), Asn1Constructed.class).getChildren().iterator();
            mMimeType = castObject(logoTypeDetails.next(), Asn1String.class).getString();

            Asn1Constructed hashes = castObject(logoTypeDetails.next(), Asn1Constructed.class);
            for (Asn1Object hash : hashes.getChildren()) {
                mHashes.add(new HashAlgAndValue(castObject(hash, Asn1Constructed.class)));
            }
            Asn1Constructed urls = castObject(logoTypeDetails.next(), Asn1Constructed.class);
            for (Asn1Object url : urls.getChildren()) {
                mURIs.add(castObject(url, Asn1String.class).getString());
            }

            boolean imageInfoSet = false;
            int fileSize = -1;
            int xSize = -1;
            int ySize = -1;
            String language = null;

            if (children.hasNext()) {
                Iterator<Asn1Object> imageInfo =
                        castObject(children.next(), Asn1Constructed.class).getChildren().iterator();

                Asn1Object first = imageInfo.next();
                if (first.getTag() == 0) {
                    first = imageInfo.next();   // Ignore optional LogotypeImageType
                }

                fileSize = (int) castObject(first, Asn1Integer.class).getValue();
                xSize = (int) castObject(imageInfo.next(), Asn1Integer.class).getValue();
                ySize = (int) castObject(imageInfo.next(), Asn1Integer.class).getValue();
                imageInfoSet = true;

                if (imageInfo.hasNext()) {
                    Asn1Object next = imageInfo.next();
                    if (next.getTag() != 4) {
                        next = imageInfo.hasNext() ? imageInfo.next() : null;   // Skip resolution
                    }
                    if (next != null && next.getTag() == 4) {
                        language = new String(castObject(next, Asn1Octets.class).getOctets(),
                                StandardCharsets.US_ASCII);
                    }
                }
            }

            if (imageInfoSet) {
                mFileSize = complement(fileSize);
                mXsize = complement(xSize);
                mYsize = complement(ySize);
            } else {
                mFileSize = mXsize = mYsize = -1;
            }
            mLanguage = language;
!!!44028727.java!!!	verify(inout osuInfo : OSUInfo) : boolean
            IconInfo iconInfo = osuInfo.getIconInfo();
            HSIconFileElement iconData = osuInfo.getIconFileElement();
            if (!iconInfo.getIconType().equals(mMimeType) ||
                    !iconInfo.getLanguage().equals(mLanguage) ||
                    iconData.getIconData().length != mFileSize) {
                return false;
            }
            for (HashAlgAndValue hash : mHashes) {
                if (hash.getJCEName() != null) {
                    MessageDigest digest = MessageDigest.getInstance(hash.getJCEName());
                    byte[] computed = digest.digest(iconData.getIconData());
                    if (!Arrays.equals(computed, hash.getHash())) {
                        throw new IOException("Icon hash mismatch");
                    } else {
                        Log.d(OSUManager.TAG, "Icon verified with " + hash.getJCEName());
                        return true;
                    }
                }
            }
            return false;
!!!44028855.java!!!	toString() : String
            return "LogoTypeImage{" +
                    "MimeType='" + mMimeType + '\'' +
                    ", hashes=" + mHashes +
                    ", URIs=" + mURIs +
                    ", fileSize=" + mFileSize +
                    ", xSize=" + mXsize +
                    ", ySize=" + mYsize +
                    ", language='" + mLanguage + '\'' +
                    '}';
