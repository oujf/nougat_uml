class WiFiKeyManager
!!!44030775.java!!!	WiFiKeyManager(inout keyStore : KeyStore)
        mKeyStore = keyStore;
!!!44030903.java!!!	enableClientAuth(inout issuerNames : List<String>) : void

        Set<X500Principal> acceptedIssuers = new HashSet<>();
        for (String issuerName : issuerNames) {
            acceptedIssuers.add(new X500Principal(issuerName));
        }

        Enumeration<String> aliases = mKeyStore.aliases();
        while (aliases.hasMoreElements()) {
            String alias = aliases.nextElement();
            Certificate cert = mKeyStore.getCertificate(alias);
            if ((cert instanceof X509Certificate) && mKeyStore.getKey(alias, null) != null) {
                X509Certificate x509Certificate = (X509Certificate) cert;
                X500Principal issuer = x509Certificate.getIssuerX500Principal();
                if (acceptedIssuers.contains(issuer)) {
                    mAliases.put(issuer, new String[]{alias, cert.getPublicKey().getAlgorithm()});
                }
            }
        }

        if (mAliases.isEmpty()) {
            throw new IOException("No aliases match requested issuers: " + issuerNames);
        }
!!!44031543.java!!!	chooseClientAlias(inout keyTypes : String, inout issuers : Principal, inout socket : Socket) : String

        Map<String, Integer> keyPrefs = new HashMap<>(keyTypes.length);
        int pref = 0;
        for (String keyType : keyTypes) {
            keyPrefs.put(keyType, pref++);
        }

        List<AliasEntry> aliases = new ArrayList<>();
        if (issuers != null) {
            for (Principal issuer : issuers) {
                if (issuer instanceof X500Principal) {
                    String[] aliasAndKey = mAliases.get((X500Principal) issuer);
                    if (aliasAndKey != null) {
                        Integer preference = keyPrefs.get(aliasAndKey[1]);
                        if (preference != null) {
                            aliases.add(new AliasEntry(preference, aliasAndKey[0]));
                        }
                    }
                }
            }
        } else {
            for (String[] aliasAndKey : mAliases.values()) {
                Integer preference = keyPrefs.get(aliasAndKey[1]);
                if (preference != null) {
                    aliases.add(new AliasEntry(preference, aliasAndKey[0]));
                }
            }
        }
        Collections.sort(aliases);
        return aliases.isEmpty() ? null : aliases.get(0).getAlias();
!!!44031671.java!!!	getClientAliases(inout keyType : String, inout issuers : Principal) : String
        List<String> aliases = new ArrayList<>();
        if (issuers != null) {
            for (Principal issuer : issuers) {
                if (issuer instanceof X500Principal) {
                    String[] aliasAndKey = mAliases.get((X500Principal) issuer);
                    if (aliasAndKey != null) {
                        aliases.add(aliasAndKey[0]);
                    }
                }
            }
        } else {
            for (String[] aliasAndKey : mAliases.values()) {
                aliases.add(aliasAndKey[0]);
            }
        }
        return aliases.isEmpty() ? null : aliases.toArray(new String[aliases.size()]);
!!!44031799.java!!!	chooseServerAlias(inout keyType : String, inout issuers : Principal, inout socket : Socket) : String
        throw new UnsupportedOperationException();
!!!44031927.java!!!	getServerAliases(inout keyType : String, inout issuers : Principal) : String
        throw new UnsupportedOperationException();
!!!44032055.java!!!	getCertificateChain(inout alias : String) : X509Certificate
        try {
            List<X509Certificate> certs = new ArrayList<>();
            for (Certificate certificate : mKeyStore.getCertificateChain(alias)) {
                if (certificate instanceof X509Certificate) {
                    certs.add((X509Certificate) certificate);
                }
            }
            return certs.toArray(new X509Certificate[certs.size()]);
        } catch (KeyStoreException kse) {
            Log.w(OSUManager.TAG, "Failed to retrieve certificates: " + kse);
            return null;
        }
!!!44032183.java!!!	getPrivateKey(inout alias : String) : PrivateKey
        try {
            return (PrivateKey) mKeyStore.getKey(alias, null);
        } catch (GeneralSecurityException gse) {
            Log.w(OSUManager.TAG, "Failed to retrieve private key: " + gse);
            return null;
        }
