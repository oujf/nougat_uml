class Policy
!!!44044087.java!!!	Policy(inout node : OMANode)

        OMANode rpNode = node.getChild(TAG_PreferredRoamingPartnerList);
        if (rpNode == null) {
            mPreferredRoamingPartners = null;
        } else {
            mPreferredRoamingPartners = new ArrayList<>(rpNode.getChildren().size());
            for (OMANode instance : rpNode.getChildren()) {
                if (instance.isLeaf()) {
                    throw new OMAException("Not expecting leaf node in " +
                            TAG_PreferredRoamingPartnerList);
                }
                mPreferredRoamingPartners.add(new PreferredRoamingPartner(instance));
            }
        }

        OMANode bhtNode = node.getChild(TAG_MinBackhaulThreshold);
        if (bhtNode == null) {
            mMinBackhaulThresholds = null;
        } else {
            mMinBackhaulThresholds = new ArrayList<>(bhtNode.getChildren().size());
            for (OMANode instance : bhtNode.getChildren()) {
                if (instance.isLeaf()) {
                    throw new OMAException("Not expecting leaf node in " +
                            TAG_MinBackhaulThreshold);
                }
                mMinBackhaulThresholds.add(new MinBackhaul(instance));
            }
        }

        mPolicyUpdate = new UpdateInfo(node.getChild(TAG_PolicyUpdate));

        OMANode sxNode = node.getChild(TAG_SPExclusionList);
        if (sxNode == null) {
            mSPExclusionList = null;
        } else {
            mSPExclusionList = new ArrayList<>(sxNode.getChildren().size());
            for (OMANode instance : sxNode.getChildren()) {
                if (instance.isLeaf()) {
                    throw new OMAException("Not expecting leaf node in " + TAG_SPExclusionList);
                }
                mSPExclusionList.add(MOManager.getString(instance, TAG_SSID));
            }
        }

        OMANode rptNode = node.getChild(TAG_RequiredProtoPortTuple);
        if (rptNode == null) {
            mRequiredProtos = null;
        } else {
            mRequiredProtos = new HashMap<>(rptNode.getChildren().size());
            for (OMANode instance : rptNode.getChildren()) {
                if (instance.isLeaf()) {
                    throw new OMAException("Not expecting leaf node in " +
                            TAG_RequiredProtoPortTuple);
                }
                int protocol = (int) MOManager.getLong(instance, TAG_IPProtocol, null);
                String[] portSegments = MOManager.getString(instance, TAG_PortNumber).split(",");
                List<Integer> ports = new ArrayList<>(portSegments.length);
                for (String portSegment : portSegments) {
                    try {
                        ports.add(Integer.parseInt(portSegment));
                    } catch (NumberFormatException nfe) {
                        throw new OMAException("Port is not a number: " + portSegment);
                    }
                }
                mRequiredProtos.put(protocol, ports);
            }
        }

        mMaxBSSLoad = (int) MOManager.getLong(node, TAG_MaximumBSSLoadValue, Long.MAX_VALUE);
!!!44044215.java!!!	getPreferredRoamingPartners() : Policy::PreferredRoamingPartner
        return mPreferredRoamingPartners;
!!!44044343.java!!!	getMinBackhaulThresholds() : Policy::MinBackhaul
        return mMinBackhaulThresholds;
!!!44044471.java!!!	getPolicyUpdate() : UpdateInfo
        return mPolicyUpdate;
!!!44044599.java!!!	getSPExclusionList() : String
        return mSPExclusionList;
!!!44044727.java!!!	getRequiredProtos() : Map<Integer, List<Integer>>
        return mRequiredProtos;
!!!44044855.java!!!	getMaxBSSLoad() : int
        return mMaxBSSLoad;
!!!44045495.java!!!	toString() : String
        return "Policy{" +
                "preferredRoamingPartners=" + mPreferredRoamingPartners +
                ", minBackhaulThresholds=" + mMinBackhaulThresholds +
                ", policyUpdate=" + mPolicyUpdate +
                ", SPExclusionList=" + mSPExclusionList +
                ", requiredProtos=" + mRequiredProtos +
                ", maxBSSLoad=" + mMaxBSSLoad +
                '}';
