class VendorConfig
!!!44060471.java!!!	VendorConfig(inout name : String, inout packageName : String, inout mDNSNames : List<String>)
        this.name = Preconditions.checkStringNotEmpty(name);
        this.packageName = Preconditions.checkStringNotEmpty(packageName);
        this.mDNSNames = Preconditions.checkCollectionElementsNotNull(mDNSNames, "mDNSName");
!!!44060599.java!!!	getConfig(inout context : Context, inout name : String) : VendorConfig
        synchronized (sLock) {
            if (sConfigs == null) {
                sConfigs = readVendorConfigs(context);
            }

            return sConfigs.get(name);
        }
!!!44060727.java!!!	getAllConfigs(inout context : Context) : VendorConfig
        synchronized (sLock) {
            if (sConfigs == null) {
                sConfigs = readVendorConfigs(context);
            }

            return sConfigs.values();
        }
!!!44060855.java!!!	readText(inout parser : XmlPullParser) : String
        String result = "";

        if (parser.next() == XmlPullParser.TEXT) {
            result = parser.getText();
            parser.nextTag();
        }

        return result;
!!!44060983.java!!!	readSimpleTag(inout context : Context, inout parser : XmlPullParser, inout tagName : String, inout resolveReferences : boolean) : String
        parser.require(XmlPullParser.START_TAG, null, tagName);
        String text = readText(parser);
        parser.require(XmlPullParser.END_TAG, null, tagName);

        if (resolveReferences && text.startsWith("@")) {
            return context.getResources().getString(
                    context.getResources().getIdentifier(text, null, context.getPackageName()));
        } else {
            return text;
        }
!!!44061111.java!!!	readTagList(inout parser : XmlPullParser, inout tagName : String, inout subTagName : String, inout tagReader : VendorConfig::TagReader) : ArrayList<T>
        ArrayList<T> entries = new ArrayList<>();

        parser.require(XmlPullParser.START_TAG, null, tagName);
        while (parser.next() != XmlPullParser.END_TAG) {
            if (parser.getEventType() != XmlPullParser.START_TAG) {
                continue;
            }

            if (parser.getName().equals(subTagName)) {
                entries.add(tagReader.readTag(parser, subTagName));
            } else {
                throw new XmlPullParserException(
                        "Unexpected subtag of " + tagName + ": " + parser.getName());
            }
        }

        return entries;
!!!44061239.java!!!	readVendorConfigs(in context : Context) : ArrayMap
        try (XmlResourceParser parser = context.getResources().getXml(R.xml.vendorconfigs)) {
            // Skip header
            int parsingEvent;
            do {
                parsingEvent = parser.next();
            } while (parsingEvent != XmlResourceParser.START_TAG);

            ArrayList<VendorConfig> configs = readTagList(parser, VENDORS_TAG, VENDOR_TAG,
                    new TagReader<VendorConfig>() {
                        public VendorConfig readTag(XmlPullParser parser, String tagName)
                                throws XmlPullParserException, IOException {
                            return readVendorConfig(context, parser, tagName);
                        }
                    });

            ArrayMap<String, VendorConfig> configMap = new ArrayMap<>(configs.size());
            final int numConfigs = configs.size();
            for (int i = 0; i < numConfigs; i++) {
                VendorConfig config = configs.get(i);

                configMap.put(config.name, config);
            }

            return configMap;
        }
!!!44061367.java!!!	readVendorConfig(in context : Context, inout parser : XmlPullParser, inout tagName : String) : VendorConfig
        parser.require(XmlPullParser.START_TAG, null, tagName);

        String name = null;
        String packageName = null;
        List<String> mDNSNames = null;

        while (parser.next() != XmlPullParser.END_TAG) {
            if (parser.getEventType() != XmlPullParser.START_TAG) {
                continue;
            }

            String subTagName = parser.getName();

            switch (subTagName) {
                case NAME_TAG:
                    name = readSimpleTag(context, parser, NAME_TAG, false);
                    break;
                case PACKAGE_TAG:
                    packageName = readSimpleTag(context, parser, PACKAGE_TAG, true);
                    break;
                case MDNSNAMES_TAG:
                    mDNSNames = readTagList(parser, MDNSNAMES_TAG, MDNSNAME_TAG,
                            new TagReader<String>() {
                                public String readTag(XmlPullParser parser, String tagName)
                                        throws XmlPullParserException, IOException {
                                    return readSimpleTag(context, parser, tagName, true);
                                }
                            }
                    );
                    break;
                default:
                    throw new XmlPullParserException("Unexpected subtag of " + tagName + ": "
                            + subTagName);

            }
        }

        if (name == null) {
            throw new XmlPullParserException("name is required");
        }

        if (packageName == null) {
            throw new XmlPullParserException("package is required");
        }

        if (mDNSNames == null) {
            mDNSNames = Collections.emptyList();
        }

        // A vendor config should be immutable
        mDNSNames = Collections.unmodifiableList(mDNSNames);

        return new VendorConfig(name, packageName, mDNSNames);
!!!44061495.java!!!	toString() : String
        return name + " -> " + packageName + ", " + mDNSNames;
