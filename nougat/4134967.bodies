class ServiceResolver
!!!44068279.java!!!	ServiceResolver(inout context : Context, inout observer : ServiceResolver::Observer, inout vendorInfo : VendorInfo, inout serviceTypes : String, inout pdls : String)
        mNsdResolveQueue = NsdResolveQueue.getInstance();
        mObserver = observer;
        mServiceType = serviceTypes;
        mNSDManager = (NsdManager) context.getSystemService(Context.NSD_SERVICE);
        mVendorInfo = vendorInfo;
        mPDLs = pdls;
!!!44068407.java!!!	start() : void
        stop();
        for (final String service : mServiceType) {
            NsdManager.DiscoveryListener listener = new NsdManager.DiscoveryListener() {
                @Override
                public void onStartDiscoveryFailed(String s, int i) {

                }

                @Override
                public void onStopDiscoveryFailed(String s, int i) {

                }

                @Override
                public void onDiscoveryStarted(String s) {

                }

                @Override
                public void onDiscoveryStopped(String s) {

                }

                @Override
                public void onServiceFound(NsdServiceInfo nsdServiceInfo) {
                    queueRequest(nsdServiceInfo);
                }

                @Override
                public void onServiceLost(NsdServiceInfo nsdServiceInfo) {
                    removeRequest(nsdServiceInfo);
                    printerRemoved(nsdServiceInfo);
                }
            };
            DiscoveryListenerMultiplexer.addListener(mNSDManager, service, listener);
            mListeners.add(listener);
        }
!!!44068535.java!!!	stop() : void
        for (NsdManager.DiscoveryListener listener : mListeners) {
            DiscoveryListenerMultiplexer.removeListener(mNSDManager, listener);
        }
        mListeners.clear();
        clearRequests();
!!!44068663.java!!!	queueRequest(inout serviceInfo : NsdServiceInfo) : void
        synchronized (mLock) {
            if (mQueue.contains(serviceInfo)) return;
            mQueue.add(serviceInfo);
            makeNextRequest();
        }
!!!44068791.java!!!	removeRequest(inout serviceInfo : NsdServiceInfo) : void
        synchronized (mLock) {
            mQueue.remove(serviceInfo);
            if ((mCurrentRequest != null) && serviceInfo.equals(mCurrentRequest))
                mCurrentRequest = null;
        }
!!!44068919.java!!!	clearRequests() : void
        synchronized (mLock) {
            mQueue.clear();
        }
!!!44069047.java!!!	makeNextRequest() : void
        synchronized (mLock) {
            if (mCurrentRequest != null) return;
            if (mQueue.isEmpty()) return;
            mCurrentRequest = mQueue.removeFirst();
            mNsdResolveQueue.resolve(mNSDManager, mCurrentRequest, new NsdManager.ResolveListener() {
                @Override
                public void onResolveFailed(NsdServiceInfo nsdServiceInfo, int i) {
                    synchronized (mLock) {
                        if (mCurrentRequest != null) mQueue.add(mCurrentRequest);
                        makeNextRequest();
                    }
                }

                @Override
                public void onServiceResolved(NsdServiceInfo nsdServiceInfo) {
                    synchronized (mLock) {
                        if (mCurrentRequest != null) {
                            printerFound(nsdServiceInfo);
                            mCurrentRequest = null;
                        }
                        makeNextRequest();
                    }
                }
            });

        }
!!!44069175.java!!!	printerFound(inout nsdServiceInfo : NsdServiceInfo) : void
        if (nsdServiceInfo == null) return;
        if (TextUtils.isEmpty(PrinterHashMap.getKey(nsdServiceInfo))) return;
        String vendor = MDnsUtils.getVendor(nsdServiceInfo);
        if (vendor == null) vendor = "";

        for (String vendorValues : mVendorInfo.mDNSValues) {
            if (vendor.equalsIgnoreCase(vendorValues)) {
                vendor = mVendorInfo.mVendorID;
                break;
            }
        }

        if ((vendor != mVendorInfo.mVendorID) &&
                MDnsUtils.isVendorPrinter(nsdServiceInfo, mVendorInfo.mDNSValues)) {
            vendor = mVendorInfo.mVendorID;
        }

        if (!(vendor == mVendorInfo.mVendorID)) {
            return;
        }

        if (!MDnsUtils.checkPDLSupport(nsdServiceInfo, mPDLs)) {
            return;
        }

        if ((mPrinterHashMap.addPrinter(nsdServiceInfo) == null)) {
            mObserver.dataSetChanged();
        }

!!!44069303.java!!!	printerRemoved(inout nsdServiceInfo : NsdServiceInfo) : void
        if ((mPrinterHashMap.removePrinter(nsdServiceInfo) != null)) {
            mObserver.dataSetChanged();
        }
!!!44069431.java!!!	getCount() : int
        return mPrinterHashMap.size();
