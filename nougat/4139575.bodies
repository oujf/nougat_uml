class AsyncCommand
!!!44097463.java!!!	AsyncCommand(inout looper : Looper, inout adapter : IPrintDocumentAdapter, inout document : RemotePrintDocument::RemotePrintDocumentInfo, inout doneCallback : RemotePrintDocument::CommandDoneCallback)
            mHandler = new AsyncCommandHandler(looper);
            mAdapter = adapter;
            mDocument = document;
            mDoneCallback = doneCallback;
!!!44097591.java!!!	isCanceling() : boolean
            return mState == STATE_CANCELING;
!!!44097719.java!!!	isCanceled() : boolean
            return mState == STATE_CANCELED;
!!!44097847.java!!!	removeForceCancel() : void
            if (DEBUG) {
                if (mHandler.hasMessages(AsyncCommandHandler.MSG_FORCE_CANCEL)) {
                    Log.i(LOG_TAG, "[FORCE CANCEL] Removed");
                }
            }

            mHandler.removeMessages(AsyncCommandHandler.MSG_FORCE_CANCEL);
!!!44097975.java!!!	cancel(inout force : boolean) : void
            if (isRunning()) {
                canceling();
                if (mCancellation != null) {
                    try {
                        mCancellation.cancel();
                    } catch (RemoteException re) {
                        Log.w(LOG_TAG, "Error while canceling", re);
                    }
                }
            }

            if (isCanceling()) {
                if (force) {
                    if (DEBUG) {
                        Log.i(LOG_TAG, "[FORCE CANCEL] queued");
                    }
                    mHandler.sendMessageDelayed(
                            mHandler.obtainMessage(AsyncCommandHandler.MSG_FORCE_CANCEL),
                            FORCE_CANCEL_TIMEOUT);
                }

                return;
            }

            canceled();

            // Done.
            mDoneCallback.onDone();
!!!44098103.java!!!	canceling() : void
            if (mState != STATE_PENDING && mState != STATE_RUNNING) {
                throw new IllegalStateException("Command not pending or running.");
            }
            mState = STATE_CANCELING;
!!!44098231.java!!!	canceled() : void
            if (mState != STATE_CANCELING) {
                throw new IllegalStateException("Not canceling.");
            }
            mState = STATE_CANCELED;
!!!44098359.java!!!	isPending() : boolean
            return mState == STATE_PENDING;
!!!44098487.java!!!	running() : void
            if (mState != STATE_PENDING) {
                throw new IllegalStateException("Not pending.");
            }
            mState = STATE_RUNNING;
!!!44098615.java!!!	isRunning() : boolean
            return mState == STATE_RUNNING;
!!!44098743.java!!!	completed() : void
            if (mState != STATE_RUNNING && mState != STATE_CANCELING) {
                throw new IllegalStateException("Not running.");
            }
            mState = STATE_COMPLETED;
!!!44098871.java!!!	isCompleted() : boolean
            return mState == STATE_COMPLETED;
!!!44098999.java!!!	failed(inout error : CharSequence) : void
            if (mState != STATE_RUNNING && mState != STATE_CANCELING) {
                throw new IllegalStateException("Not running.");
            }
            mState = STATE_FAILED;

            mError = error;
!!!44099127.java!!!	isFailed() : boolean
            return mState == STATE_FAILED;
!!!44099255.java!!!	getError() : CharSequence
            return mError;
