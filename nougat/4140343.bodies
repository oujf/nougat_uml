class WriteHandler
!!!44102199.java!!!	WriteHandler(inout looper : Looper)
                super(looper, null, false);
!!!44102327.java!!!	handleMessage(inout message : Message) : void
                // The command might have been force canceled, see
                // AsyncCommand.AsyncCommandHandler#handleMessage
                if (isFailed()) {
                    if (DEBUG) {
                        Log.i(LOG_TAG, "[CALLBACK] on failed write command");
                    }

                    return;
                }

                int what = message.what;
                switch (what) {
                    case MSG_ON_WRITE_FINISHED:
                    case MSG_ON_WRITE_FAILED:
                    case MSG_ON_WRITE_CANCELED:
                        removeForceCancel();
                    case MSG_ON_WRITE_STARTED:
                        // Don't remote force-cancel as command is still running and might need to
                        // be canceled later
                        break;
                }

                // If we are canceling any result is treated as a cancel
                if (isCanceling() && what != MSG_ON_WRITE_STARTED) {
                    what = MSG_ON_WRITE_CANCELED;
                }

                switch (what) {
                    case MSG_ON_WRITE_STARTED: {
                        ICancellationSignal cancellation = (ICancellationSignal) message.obj;
                        final int sequence = message.arg1;
                        handleOnWriteStarted(cancellation, sequence);
                    } break;

                    case MSG_ON_WRITE_FINISHED: {
                        PageRange[] pages = (PageRange[]) message.obj;
                        final int sequence = message.arg1;
                        handleOnWriteFinished(pages, sequence);
                    } break;

                    case MSG_ON_WRITE_FAILED: {
                        CharSequence error = (CharSequence) message.obj;
                        final int sequence = message.arg1;
                        handleOnWriteFailed(error, sequence);
                    } break;

                    case MSG_ON_WRITE_CANCELED: {
                        final int sequence = message.arg1;
                        handleOnWriteCanceled(sequence);
                    } break;
                }
