class PersistenceManager
!!!44114231.java!!!	PersistenceManager(in activity : Activity, in internalLoaderId : int)
            mStatePersistFile = new AtomicFile(new File(activity.getFilesDir(),
                    PERSIST_FILE_NAME));

            // Initialize enabled services to make sure they are set are the read task might be done
            // before the loader updated the services the first time.
            mEnabledServices = ((PrintManager) activity
                    .getSystemService(Context.PRINT_SERVICE))
                    .getPrintServices(PrintManager.ENABLED_SERVICES);

            mAreEnabledServicesUpdated = true;

            // Cannot start a loader while starting another, hence delay this loader
            (new Handler(activity.getMainLooper())).post(new Runnable() {
                @Override
                public void run() {
                    activity.getLoaderManager().initLoader(internalLoaderId, null,
                            PersistenceManager.this);
                }
            });
!!!44114359.java!!!	onCreateLoader(in id : int, inout args : Bundle) : Loader
            return new PrintServicesLoader(
                    (PrintManager) getContext().getSystemService(Context.PRINT_SERVICE),
                    getContext(), PrintManager.ENABLED_SERVICES);
!!!44114487.java!!!	onLoadFinished(inout loader : Loader, inout services : List<PrintServiceInfo>) : void
            mAreEnabledServicesUpdated = true;
            mEnabledServices = services;

            // Ask the fused printer provider to reload which will cause the persistence manager to
            // reload the history and reconsider the enabled services.
            if (isStarted()) {
                forceLoad();
            }
!!!44114615.java!!!	onLoaderReset(inout loader : Loader) : void
            // no data is cached
!!!44114743.java!!!	isReadHistoryInProgress() : boolean
            return mReadTask != null;
!!!44114871.java!!!	isReadHistoryCompleted() : boolean
            return mReadHistoryCompleted;
!!!44114999.java!!!	stopReadPrinterHistory() : boolean
            return mReadTask.cancel(true);
!!!44115127.java!!!	readPrinterHistory() : void
            if (DEBUG) {
                Log.i(LOG_TAG, "read history started "
                        + FusedPrintersProvider.this.hashCode());
            }
            mReadTask = new ReadTask();
            mReadTask.executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, (Void[]) null);
!!!44115255.java!!!	updateHistoricalPrintersIfNeeded(inout printers : List<PrinterInfo>) : void
            boolean writeHistory = false;

            final int printerCount = printers.size();
            for (int i = 0; i < printerCount; i++) {
                PrinterInfo printer = printers.get(i);
                writeHistory |= updateHistoricalPrinterIfNeeded(printer);
            }

            if (writeHistory) {
                writePrinterHistory();
            }
!!!44115383.java!!!	updateHistoricalPrinterIfNeeded(inout printer : PrinterInfo) : boolean
            boolean writeHistory = false;
            final int printerCount = mHistoricalPrinters.size();
            for (int i = 0; i < printerCount; i++) {
                PrinterInfo historicalPrinter = mHistoricalPrinters.get(i).first;

                if (!historicalPrinter.getId().equals(printer.getId())) {
                    continue;
                }

                // Overwrite the historical printer with the updated printer as some properties
                // changed. We ignore the status as this is a volatile state.
                if (historicalPrinter.equalsIgnoringStatus(printer)) {
                    continue;
                }

                mHistoricalPrinters.set(i, new Pair<PrinterInfo, Location>(printer,
                                mHistoricalPrinters.get(i).second));

                // We only persist limited information in the printer history, hence check if
                // we need to persist the update.
                // @see PersistenceManager.WriteTask#doWritePrinterHistory
                if (!historicalPrinter.getName().equals(printer.getName())) {
                    if (Objects.equals(historicalPrinter.getDescription(),
                            printer.getDescription())) {
                        writeHistory = true;
                    }
                }
            }
            return writeHistory;
!!!44115511.java!!!	addPrinterAndWritePrinterHistory(inout printer : PrinterInfo) : void
            if (mHistoricalPrinters.size() >= MAX_HISTORY_LENGTH) {
                mHistoricalPrinters.remove(0);
            }

            Location location = getCurrentLocation();
            if (!isLocationAcceptable(location)) {
                location = null;
            }

            mHistoricalPrinters.add(new Pair<PrinterInfo, Location>(printer, location));

            writePrinterHistory();
!!!44115639.java!!!	removeHistoricalPrinterAndWritePrinterHistory(inout printerId : PrinterId) : void
            boolean writeHistory = false;
            final int printerCount = mHistoricalPrinters.size();
            for (int i = printerCount - 1; i >= 0; i--) {
                PrinterInfo historicalPrinter = mHistoricalPrinters.get(i).first;
                if (historicalPrinter.getId().equals(printerId)) {
                    mHistoricalPrinters.remove(i);
                    writeHistory = true;
                }
            }
            if (writeHistory) {
                writePrinterHistory();
            }
!!!44115767.java!!!	writePrinterHistory() : void
            new WriteTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR,
                    new ArrayList<>(mHistoricalPrinters));
!!!44115895.java!!!	isHistoryChanged() : boolean
            return mAreEnabledServicesUpdated ||
                    mLastReadHistoryTimestamp != mStatePersistFile.getBaseFile().lastModified();
!!!44116023.java!!!	sortFavoritePrinters(inout printers : List<Pair<PrinterInfo, Location>>) : Pair
            Map<PrinterId, PrinterRecord> recordMap = new ArrayMap<>();

            // Compute the weights.
            float currentWeight = 1.0f;
            final int printerCount = printers.size();
            for (int i = printerCount - 1; i >= 0; i--) {
                PrinterId printerId = printers.get(i).first.getId();
                PrinterRecord record = recordMap.get(printerId);
                if (record == null) {
                    record = new PrinterRecord();
                    recordMap.put(printerId, record);
                }

                record.printers.add(printers.get(i));

                // Aggregate weight for the same printer
                record.weight += currentWeight;
                currentWeight *= WEIGHT_DECAY_COEFFICIENT;
            }

            // Sort the favorite printers.
            List<PrinterRecord> favoriteRecords = new ArrayList<>(
                    recordMap.values());
            Collections.sort(favoriteRecords);

            // Write the favorites to the output.
            final int recordCount = favoriteRecords.size();
            List<Pair<PrinterInfo, Location>> favoritePrinters = new ArrayList<>(printerCount);
            for (int i = 0; i < recordCount; i++) {
                favoritePrinters.addAll(favoriteRecords.get(i).printers);
            }

            return favoritePrinters;
