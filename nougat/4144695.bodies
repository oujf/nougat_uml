class PrintPreviewController
!!!44144951.java!!!	PrintPreviewController(inout activity : PrintActivity, inout fileProvider : MutexFileProvider)
        mActivity = activity;
        mHandler = new MyHandler(activity.getMainLooper());
        mFileProvider = fileProvider;

        mPrintOptionsLayout = (PrintOptionsLayout) activity.findViewById(R.id.options_container);
        mPageAdapter = new PageAdapter(activity, activity, this);

        final int columnCount = mActivity.getResources().getInteger(
                R.integer.preview_page_per_row_count);

        mLayoutManger = new GridLayoutManager(mActivity, columnCount);

        mRecyclerView = (RecyclerView) activity.findViewById(R.id.preview_content);
        mRecyclerView.setLayoutManager(mLayoutManger);
        mRecyclerView.setAdapter(mPageAdapter);
        mRecyclerView.setItemViewCacheSize(0);
        mPreloadController = new PreloadController();
        mRecyclerView.addOnScrollListener(mPreloadController);

        mContentView = (PrintContentView) activity.findViewById(R.id.options_content);
        mEmbeddedContentContainer = (EmbeddedContentContainer) activity.findViewById(
                R.id.embedded_content_container);
        mEmbeddedContentContainer.setOnSizeChangeListener(this);
!!!44145079.java!!!	onSizeChanged(in width : int, in height : int) : void
        mPageAdapter.onPreviewAreaSizeChanged();
!!!44145207.java!!!	isOptionsOpened() : boolean
        return mContentView.isOptionsOpened();
!!!44145335.java!!!	closeOptions() : void
        mContentView.closeOptions();
!!!44145463.java!!!	setUiShown(inout shown : boolean) : void
        if (shown) {
            mRecyclerView.setVisibility(View.VISIBLE);
        } else {
            mRecyclerView.setVisibility(View.GONE);
        }
!!!44145591.java!!!	onOrientationChanged() : void
        // Adjust the print option column count.
        final int optionColumnCount = mActivity.getResources().getInteger(
                R.integer.print_option_column_count);
        mPrintOptionsLayout.setColumnCount(optionColumnCount);
        mPageAdapter.onOrientationChanged();
!!!44145719.java!!!	getFilePageCount() : int
        return mPageAdapter.getFilePageCount();
!!!44145847.java!!!	getSelectedPages() : PageRange
        return mPageAdapter.getSelectedPages();
!!!44145975.java!!!	getRequestedPages() : PageRange
        return mPageAdapter.getRequestedPages();
!!!44146103.java!!!	onContentUpdated(inout documentChanged : boolean, in documentPageCount : int, inout writtenPages : PageRange, inout selectedPages : PageRange, inout mediaSize : PrintAttributes::MediaSize, inout minMargins : PrintAttributes::Margins) : void
        boolean contentChanged = false;

        if (documentChanged) {
            contentChanged = true;
        }

        if (documentPageCount != mDocumentPageCount) {
            mDocumentPageCount = documentPageCount;
            contentChanged = true;
        }

        if (contentChanged) {
            // If not closed, close as we start over.
            if (mPageAdapter.isOpened()) {
                Message operation = mHandler.obtainMessage(MyHandler.MSG_CLOSE);
                mHandler.enqueueOperation(operation);
            }
        }

        // The content changed. In this case we have to invalidate
        // all rendered pages and reopen the file...
        if ((contentChanged || !mPageAdapter.isOpened()) && writtenPages != null) {
            Message operation = mHandler.obtainMessage(MyHandler.MSG_OPEN);
            mHandler.enqueueOperation(operation);
        }

        // Update the attributes before after closed to avoid flicker.
        SomeArgs args = SomeArgs.obtain();
        args.arg1 = writtenPages;
        args.arg2 = selectedPages;
        args.arg3 = mediaSize;
        args.arg4 = minMargins;
        args.argi1 = documentPageCount;

        Message operation = mHandler.obtainMessage(MyHandler.MSG_UPDATE, args);
        mHandler.enqueueOperation(operation);

        // If document changed and has pages we want to start preloading.
        if (contentChanged && writtenPages != null) {
            operation = mHandler.obtainMessage(MyHandler.MSG_START_PRELOAD);
            mHandler.enqueueOperation(operation);
        }
!!!44146231.java!!!	onReleaseRequested(in file : File) : void
        // This is called from the async task's single threaded executor
        // thread, i.e. not on the main thread - so post a message.
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                // At this point the other end will write to the file, hence
                // we have to close it and reopen after the write completes.
                if (mPageAdapter.isOpened()) {
                    Message operation = mHandler.obtainMessage(MyHandler.MSG_CLOSE);
                    mHandler.enqueueOperation(operation);
                }
            }
        });
!!!44146359.java!!!	destroy(inout callback : Runnable) : void
        mHandler.cancelQueuedOperations();
        mRecyclerView.setAdapter(null);
        mPageAdapter.destroy(callback);
!!!44146487.java!!!	getWidth() : int
        return mEmbeddedContentContainer.getWidth();
!!!44146615.java!!!	getHeight() : int
        return mEmbeddedContentContainer.getHeight();
!!!44146743.java!!!	setColumnCount(in columnCount : int) : void
        mLayoutManger.setSpanCount(columnCount);
!!!44146871.java!!!	setPadding(in left : int, in top : int, in right : int, in bottom : int) : void
        mRecyclerView.setPadding(left, top, right, bottom);
