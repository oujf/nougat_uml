class HeadsetProfile
!!!44221239.java!!!	isProfileReady() : boolean
        return mIsProfileReady;
!!!44221367.java!!!	HeadsetProfile(inout context : Context, inout adapter : LocalBluetoothAdapter, inout deviceManager : CachedBluetoothDeviceManager, inout profileManager : LocalBluetoothProfileManager)
        mLocalAdapter = adapter;
        mDeviceManager = deviceManager;
        mProfileManager = profileManager;
        mLocalAdapter.getProfileProxy(context, new HeadsetServiceListener(),
                BluetoothProfile.HEADSET);
!!!44221495.java!!!	isConnectable() : boolean
        return true;
!!!44221623.java!!!	isAutoConnectable() : boolean
        return true;
!!!44221751.java!!!	connect(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        List<BluetoothDevice> sinks = mService.getConnectedDevices();
        if (sinks != null) {
            for (BluetoothDevice sink : sinks) {
                Log.d(TAG,"Not disconnecting device = " + sink);
            }
        }
        return mService.connect(device);
!!!44221879.java!!!	disconnect(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        List<BluetoothDevice> deviceList = mService.getConnectedDevices();
        if (!deviceList.isEmpty()) {
            for (BluetoothDevice dev : deviceList) {
                if (dev.equals(device)) {
                    if (V) Log.d(TAG,"Downgrade priority as user" +
                                        "is disconnecting the headset");
                    // Downgrade priority as user is disconnecting the headset.
                    if (mService.getPriority(device) > BluetoothProfile.PRIORITY_ON) {
                        mService.setPriority(device, BluetoothProfile.PRIORITY_ON);
                    }
                    return mService.disconnect(device);
                }
            }
        }
        return false;
!!!44222007.java!!!	getConnectionStatus(inout device : BluetoothDevice) : int
        if (mService == null) return BluetoothProfile.STATE_DISCONNECTED;
        List<BluetoothDevice> deviceList = mService.getConnectedDevices();
        if (!deviceList.isEmpty()){
            for (BluetoothDevice dev : deviceList) {
                if (dev.equals(device)) {
                    return mService.getConnectionState(device);
                }
            }
        }
        return BluetoothProfile.STATE_DISCONNECTED;
!!!44222135.java!!!	isPreferred(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        return mService.getPriority(device) > BluetoothProfile.PRIORITY_OFF;
!!!44222263.java!!!	getPreferred(inout device : BluetoothDevice) : int
        if (mService == null) return BluetoothProfile.PRIORITY_OFF;
        return mService.getPriority(device);
!!!44222391.java!!!	setPreferred(inout device : BluetoothDevice, inout preferred : boolean) : void
        if (mService == null) return;
        if (preferred) {
            if (mService.getPriority(device) < BluetoothProfile.PRIORITY_ON) {
                mService.setPriority(device, BluetoothProfile.PRIORITY_ON);
            }
        } else {
            mService.setPriority(device, BluetoothProfile.PRIORITY_OFF);
        }
!!!44222519.java!!!	getConnectedDevices() : BluetoothDevice
        if (mService == null) return new ArrayList<BluetoothDevice>(0);
        return mService.getDevicesMatchingConnectionStates(
              new int[] {BluetoothProfile.STATE_CONNECTED,
                         BluetoothProfile.STATE_CONNECTING,
                         BluetoothProfile.STATE_DISCONNECTING});
!!!44222647.java!!!	toString() : String
        return NAME;
!!!44222775.java!!!	getOrdinal() : int
        return ORDINAL;
!!!44222903.java!!!	getNameResource(inout device : BluetoothDevice) : int
        return R.string.bluetooth_profile_headset;
!!!44223031.java!!!	getSummaryResourceForDevice(inout device : BluetoothDevice) : int
        int state = getConnectionStatus(device);
        switch (state) {
            case BluetoothProfile.STATE_DISCONNECTED:
                return R.string.bluetooth_headset_profile_summary_use_for;

            case BluetoothProfile.STATE_CONNECTED:
                return R.string.bluetooth_headset_profile_summary_connected;

            default:
                return Utils.getConnectionStateSummary(state);
        }
!!!44223159.java!!!	getDrawableResource(inout btClass : BluetoothClass) : int
        return R.drawable.ic_bt_headset_hfp;
!!!44223287.java!!!	finalize() : void
        if (V) Log.d(TAG, "finalize()");
        if (mService != null) {
            try {
                BluetoothAdapter.getDefaultAdapter().closeProfileProxy(BluetoothProfile.HEADSET,
                                                                       mService);
                mService = null;
            }catch (Throwable t) {
                Log.w(TAG, "Error cleaning up HID proxy", t);
            }
        }
