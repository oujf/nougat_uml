class BluetoothHeadsetClientCall
!!!2531255.java!!!	BluetoothHeadsetClientCall(inout device : BluetoothDevice, in id : int, in state : int, inout number : String, inout multiParty : boolean, inout outgoing : boolean)
        this(device, id, UUID.randomUUID(), state, number, multiParty, outgoing);
!!!2531383.java!!!	BluetoothHeadsetClientCall(inout device : BluetoothDevice, in id : int, inout uuid : UUID, in state : int, inout number : String, inout multiParty : boolean, inout outgoing : boolean)
        mDevice = device;
        mId = id;
        mUUID = uuid;
        mState = state;
        mNumber = number != null ? number : "";
        mMultiParty = multiParty;
        mOutgoing = outgoing;
!!!2531511.java!!!	setState(in state : int) : void
        mState = state;
!!!2531639.java!!!	setNumber(inout number : String) : void
        mNumber = number;
!!!2531767.java!!!	setMultiParty(inout multiParty : boolean) : void
        mMultiParty = multiParty;
!!!2531895.java!!!	getDevice() : BluetoothDevice
        return mDevice;
!!!2532023.java!!!	getId() : int
        return mId;
!!!2532151.java!!!	getUUID() : UUID
        return mUUID;
!!!2532279.java!!!	getState() : int
        return mState;
!!!2532407.java!!!	getNumber() : String
        return mNumber;
!!!2532535.java!!!	isMultiParty() : boolean
        return mMultiParty;
!!!2532663.java!!!	isOutgoing() : boolean
        return mOutgoing;
!!!2532791.java!!!	toString() : String
        return toString(false);
!!!2532919.java!!!	toString(inout loggable : boolean) : String
        StringBuilder builder = new StringBuilder("BluetoothHeadsetClientCall{mDevice: ");
        builder.append(loggable ? mDevice : mDevice.hashCode());
        builder.append(", mId: ");
        builder.append(mId);
        builder.append(", mUUID: ");
        builder.append(mUUID);
        builder.append(", mState: ");
        switch (mState) {
            case CALL_STATE_ACTIVE: builder.append("ACTIVE"); break;
            case CALL_STATE_HELD: builder.append("HELD"); break;
            case CALL_STATE_DIALING: builder.append("DIALING"); break;
            case CALL_STATE_ALERTING: builder.append("ALERTING"); break;
            case CALL_STATE_INCOMING: builder.append("INCOMING"); break;
            case CALL_STATE_WAITING: builder.append("WAITING"); break;
            case CALL_STATE_HELD_BY_RESPONSE_AND_HOLD: builder.append("HELD_BY_RESPONSE_AND_HOLD"); break;
            case CALL_STATE_TERMINATED: builder.append("TERMINATED"); break;
            default: builder.append(mState); break;
        }
        builder.append(", mNumber: ");
        builder.append(loggable ? mNumber : mNumber.hashCode());
        builder.append(", mMultiParty: ");
        builder.append(mMultiParty);
        builder.append(", mOutgoing: ");
        builder.append(mOutgoing);
        builder.append("}");
        return builder.toString();
!!!2533047.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeParcelable(mDevice, 0);
        out.writeInt(mId);
        out.writeString(mUUID.toString());
        out.writeInt(mState);
        out.writeString(mNumber);
        out.writeInt(mMultiParty ? 1 : 0);
        out.writeInt(mOutgoing ? 1 : 0);
!!!2533175.java!!!	describeContents() : int
        return 0;
