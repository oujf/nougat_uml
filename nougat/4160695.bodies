class PanProfile
!!!44240823.java!!!	isProfileReady() : boolean
        return mIsProfileReady;
!!!44240951.java!!!	PanProfile(inout context : Context)
        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
        adapter.getProfileProxy(context, new PanServiceListener(),
                BluetoothProfile.PAN);
!!!44241079.java!!!	isConnectable() : boolean
        return true;
!!!44241207.java!!!	isAutoConnectable() : boolean
        return false;
!!!44241335.java!!!	connect(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        List<BluetoothDevice> sinks = mService.getConnectedDevices();
        if (sinks != null) {
            for (BluetoothDevice sink : sinks) {
                mService.disconnect(sink);
            }
        }
        return mService.connect(device);
!!!44241463.java!!!	disconnect(inout device : BluetoothDevice) : boolean
        if (mService == null) return false;
        return mService.disconnect(device);
!!!44241591.java!!!	getConnectionStatus(inout device : BluetoothDevice) : int
        if (mService == null) {
            return BluetoothProfile.STATE_DISCONNECTED;
        }
        return mService.getConnectionState(device);
!!!44241719.java!!!	isPreferred(inout device : BluetoothDevice) : boolean
        return true;
!!!44241847.java!!!	getPreferred(inout device : BluetoothDevice) : int
        return -1;
!!!44241975.java!!!	setPreferred(inout device : BluetoothDevice, inout preferred : boolean) : void
        // ignore: isPreferred is always true for PAN
!!!44242103.java!!!	toString() : String
        return NAME;
!!!44242231.java!!!	getOrdinal() : int
        return ORDINAL;
!!!44242359.java!!!	getNameResource(inout device : BluetoothDevice) : int
        if (isLocalRoleNap(device)) {
            return R.string.bluetooth_profile_pan_nap;
        } else {
            return R.string.bluetooth_profile_pan;
        }
!!!44242487.java!!!	getSummaryResourceForDevice(inout device : BluetoothDevice) : int
        int state = getConnectionStatus(device);
        switch (state) {
            case BluetoothProfile.STATE_DISCONNECTED:
                return R.string.bluetooth_pan_profile_summary_use_for;

            case BluetoothProfile.STATE_CONNECTED:
                if (isLocalRoleNap(device)) {
                    return R.string.bluetooth_pan_nap_profile_summary_connected;
                } else {
                    return R.string.bluetooth_pan_user_profile_summary_connected;
                }

            default:
                return Utils.getConnectionStateSummary(state);
        }
!!!44242615.java!!!	getDrawableResource(inout btClass : BluetoothClass) : int
        return R.drawable.ic_bt_network_pan;
!!!44242743.java!!!	setLocalRole(inout device : BluetoothDevice, in role : int) : void
        mDeviceRoleMap.put(device, role);
!!!44242871.java!!!	isLocalRoleNap(inout device : BluetoothDevice) : boolean
        if (mDeviceRoleMap.containsKey(device)) {
            return mDeviceRoleMap.get(device) == BluetoothPan.LOCAL_NAP_ROLE;
        } else {
            return false;
        }
!!!44242999.java!!!	finalize() : void
        if (V) Log.d(TAG, "finalize()");
        if (mService != null) {
            try {
                BluetoothAdapter.getDefaultAdapter().closeProfileProxy(BluetoothProfile.PAN, mService);
                mService = null;
            }catch (Throwable t) {
                Log.w(TAG, "Error cleaning up PAN proxy", t);
            }
        }
