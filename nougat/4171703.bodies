class SettingsProviderPerformanceTest
!!!44337463.java!!!	testSetAndGetPerformanceForGlobalViaFrontEndApi() : void
        // Start with a clean slate.
        insertStringViaProviderApi(SETTING_TYPE_GLOBAL,
                FAKE_SETTING_NAME, FAKE_SETTING_VALUE, false);

        final long startTimeMicro = SystemClock.currentTimeMicro();

        try {
            for (int i = 0; i < ITERATION_COUNT; i++) {
                // Set the setting to its first value.
                updateStringViaProviderApiSetting(SETTING_TYPE_GLOBAL, FAKE_SETTING_NAME,
                        FAKE_SETTING_VALUE);

                // Make sure the setting changed.
                String firstValue = getStringViaFrontEndApiSetting(SETTING_TYPE_GLOBAL,
                        FAKE_SETTING_NAME, UserHandle.USER_SYSTEM);
                assertEquals("Setting value didn't change", FAKE_SETTING_VALUE, firstValue);

                // Set the setting to its second value.
                updateStringViaProviderApiSetting(SETTING_TYPE_GLOBAL, FAKE_SETTING_NAME,
                        FAKE_SETTING_VALUE_1);

                // Make sure the setting changed.
                String secondValue = getStringViaFrontEndApiSetting(SETTING_TYPE_GLOBAL,
                        FAKE_SETTING_NAME, UserHandle.USER_SYSTEM);
                assertEquals("Setting value didn't change", FAKE_SETTING_VALUE_1, secondValue);
            }
        } finally {
            // Clean up.
            deleteStringViaProviderApi(SETTING_TYPE_GLOBAL, FAKE_SETTING_NAME);
        }

        final long elapsedTimeMicro = SystemClock.currentTimeMicro() - startTimeMicro;

        final long averageTimePerIterationMillis = (long) ((((float) elapsedTimeMicro)
                / ITERATION_COUNT) / MICRO_SECONDS_IN_MILLISECOND);

        Log.i(LOG_TAG, "Average time to set and get setting via provider APIs: "
                + averageTimePerIterationMillis + " ms");

        assertTrue("Setting and getting a settings takes too long.", averageTimePerIterationMillis
                < MAX_AVERAGE_SET_AND_GET_SETTING_DURATION_MILLIS);
!!!44337591.java!!!	testSetAndGetPerformanceForGlobalViaProviderApi() : void
        // Start with a clean slate.
        deleteStringViaProviderApi(SETTING_TYPE_GLOBAL, FAKE_SETTING_NAME);

        final long startTimeMicro = SystemClock.currentTimeMicro();

        try {
            for (int i = 0; i < ITERATION_COUNT; i++) {
                // Set the setting to its first value.
                setStringViaFrontEndApiSetting(SETTING_TYPE_GLOBAL, FAKE_SETTING_NAME,
                        FAKE_SETTING_VALUE, UserHandle.USER_SYSTEM);

                // Make sure the setting changed.
                String firstValue = getStringViaFrontEndApiSetting(SETTING_TYPE_GLOBAL,
                        FAKE_SETTING_NAME, UserHandle.USER_SYSTEM);
                assertEquals("Setting value didn't change", FAKE_SETTING_VALUE, firstValue);

                // Set the setting to its second value.
                setStringViaFrontEndApiSetting(SETTING_TYPE_GLOBAL, FAKE_SETTING_NAME,
                        FAKE_SETTING_VALUE_1, UserHandle.USER_SYSTEM);

                // Make sure the setting changed.
                String secondValue = getStringViaFrontEndApiSetting(SETTING_TYPE_GLOBAL,
                        FAKE_SETTING_NAME, UserHandle.USER_SYSTEM);
                assertEquals("Setting value didn't change", FAKE_SETTING_VALUE_1, secondValue);
            }
        } finally {
            // Clean up.
            deleteStringViaProviderApi(SETTING_TYPE_GLOBAL, FAKE_SETTING_NAME);
        }

        final long elapsedTimeMicro = SystemClock.currentTimeMicro() - startTimeMicro;

        final long averageTimePerIterationMillis = (long) ((((float) elapsedTimeMicro)
                / ITERATION_COUNT) / MICRO_SECONDS_IN_MILLISECOND);

        Log.i(LOG_TAG, "Average time to set and get setting via front-eng APIs: "
                + averageTimePerIterationMillis + " ms");

        assertTrue("Setting and getting a settings takes too long.", averageTimePerIterationMillis
                < MAX_AVERAGE_SET_AND_GET_SETTING_DURATION_MILLIS);
