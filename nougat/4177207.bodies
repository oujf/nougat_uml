class URLFetcher
!!!44375223.java!!!	getWebContentFromUrlWithRetry(inout url : URL, in fileSizeLimit : long, in connectionTimeoutMillis : int, in backoffMillis : int, in retry : int) : WebContent
        if (retry <= 0) {
            throw new IllegalArgumentException("retry should be a postive inetger.");
        }
        while (retry > 0) {
            try {
                return getWebContentFromUrl(url, fileSizeLimit, connectionTimeoutMillis);
            } catch (IOException e) {
                retry--;
                if (retry == 0) {
                    throw e;
                }
            }

            Thread.sleep(backoffMillis);
        }

        // Should never reach here.
        return null;
!!!44375351.java!!!	getWebContentFromUrl(inout url : URL, in fileSizeLimit : long, in connectionTimeoutMillis : int) : WebContent
        final String scheme = url.getProtocol().toLowerCase(Locale.US);
        if (!scheme.equals("http") && !scheme.equals("https")) {
            throw new IllegalArgumentException("The url protocol should be on http or https.");
        }

        HttpURLConnection connection = null;
        try {
            connection = (HttpURLConnection) url.openConnection();
            connection.setInstanceFollowRedirects(true);
            connection.setConnectTimeout(connectionTimeoutMillis);
            connection.setReadTimeout(connectionTimeoutMillis);
            connection.setUseCaches(true);
            connection.setInstanceFollowRedirects(false);
            connection.addRequestProperty("Cache-Control", "max-stale=60");

            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
                Log.e(TAG, "The responses code is not 200 but "  + connection.getResponseCode());
                return new WebContent("", DO_NOT_CACHE_RESULT);
            }

            if (connection.getContentLength() > fileSizeLimit) {
                Log.e(TAG, "The content size of the url is larger than "  + fileSizeLimit);
                return new WebContent("", DO_NOT_CACHE_RESULT);
            }

            Long expireTimeMillis = getExpirationTimeMillisFromHTTPHeader(
                    connection.getHeaderFields());

            return new WebContent(inputStreamToString(
                    connection.getInputStream(), connection.getContentLength(), fileSizeLimit),
                expireTimeMillis);
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
!!!44375479.java!!!	inputStreamToString(inout inputStream : InputStream, in length : int, in sizeLimit : long) : String
        if (length < 0) {
            length = 0;
        }
        ByteArrayOutputStream baos = new ByteArrayOutputStream(length);
        BufferedInputStream bis = new BufferedInputStream(inputStream);
        byte[] buffer = new byte[INPUT_BUFFER_SIZE_IN_BYTES];
        int len = 0;
        while ((len = bis.read(buffer)) != -1) {
            baos.write(buffer, 0, len);
            if (baos.size() > sizeLimit) {
                throw new AssociationServiceException("The content size of the url is larger than "
                        + sizeLimit);
            }
        }
        return baos.toString("UTF-8");
!!!44375607.java!!!	getExpirationTimeMillisFromHTTPHeader(inout headers : Map<String, List<String>>) : Long
        if (headers == null) {
            return null;
        }
        Map<String, String> joinedHeaders = joinHttpHeaders(headers);

        NetworkResponse response = new NetworkResponse(null, joinedHeaders);
        Cache.Entry cachePolicy = HttpHeaderParser.parseCacheHeaders(response);

        if (cachePolicy == null) {
            // Cache is disabled, set the expire time to 0.
            return DO_NOT_CACHE_RESULT;
        } else if (cachePolicy.ttl == 0) {
            // Cache policy is not specified, set the expire time to 0.
            return DO_NOT_CACHE_RESULT;
        } else {
            // cachePolicy.ttl is actually the expire timestamp in millisecond.
            return cachePolicy.ttl;
        }
!!!44375735.java!!!	joinHttpHeaders(inout headers : Map<String, List<String>>) : String
        Map<String, String> joinedHeaders = new HashMap<String, String>();
        for (Map.Entry<String, List<String>> entry : headers.entrySet()) {
            List<String> values = entry.getValue();
            if (values.size() == 1) {
                joinedHeaders.put(entry.getKey(), values.get(0));
            } else {
                joinedHeaders.put(entry.getKey(), Utils.joinStrings(", ", values));
            }
        }
        return joinedHeaders;
