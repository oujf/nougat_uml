format 76
"media" // nougat_src::frameworks::av::include::media::private::media
  revision 2
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/include/private/media/"
  cpp_src_dir "d:/Workspace/Android Source Code/nougat_src/frameworks/av/include/private/media/"
  cpp_namespace "android"
  classview 366391 "media"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 4052663 "effect_param_cblk_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Shared memory area used to exchange parameters between application and mediaserver
 process."
      attribute 12892983 "lock"
	public explicit_type "Mutex"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12893111 "clientIndex"
	volatile public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Current read/write index for application"
      end

      attribute 12893239 "serverIndex"
	volatile public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Current read/write index for mediaserver"
      end

      attribute 12893367 "buffer"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " start of parameter buffer"
      end

      operation 43556023 "effect_param_cblk_t"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : lock(Mutex::SHARED), clientIndex(0), serverIndex(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 4052791 "AudioTrackSharedStreaming"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 12893495 "mFront"
	volatile public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " similar to NBAIO MonoPipe
 in continuously incrementing frame units, take modulo buffer size, which must be a power of 2
 read by consumer (output: server, input: client)"
      end

      attribute 12893623 "mRear"
	volatile public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " written by producer (output: client, input: server)"
      end

      attribute 12893751 "mFlush"
	volatile public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " incremented by client to indicate a request to flush;"
      end

      attribute 12893879 "mUnderrunFrames"
	volatile public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " server notices and discards all data between mFront and mRear
 server increments for each unavailable but desired frame"
      end

      attribute 12894007 "mUnderrunCount"
	volatile public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " server increments for each underrun occurrence"
      end
    end

    class 4052919 "StaticAudioTrackState"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Represents a single state of an AudioTrack that was created in static mode (shared memory buffer
 supplied by the client).  This state needs to be communicated from the client to server.  As this
 state is too large to be updated atomically without a mutex, and mutexes aren't allowed here, the
 state is wrapped by a SingleStateQueue."
      attribute 12894135 "mLoopStart"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Do not define constructors, destructors, or virtual methods as this is part of a
 union in shared memory and they will not get called properly.
 These fields should both be size_t, but since they are located in shared memory we
 force to 32-bit.  The client and server may have different typedefs for size_t.
 The state has a sequence counter to indicate whether changes are made to loop or position.
 The sequence counter also currently indicates whether loop or position is first depending
 on which is greater; it jumps by max(mLoopSequence, mPositionSequence) + 1."
      end

      attribute 12894263 "mLoopEnd"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12894391 "mLoopCount"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12894519 "mLoopSequence"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " a sequence counter to indicate changes to loop"
      end

      attribute 12894647 "mPosition"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12894775 "mPositionSequence"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " a sequence counter to indicate changes to position"
      end
    end

    class 4053047 "StaticAudioTrackSingleStateQueue"
      visibility package stereotype "typedef" base_type class_ref 4052919 // StaticAudioTrackState
      cpp_decl "${comment}typedef SingleStateQueue<${type}> ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 11300407 // <dependency>
	relation 11299639 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 11300407 // <dependency>
	  b parent class_ref 4052919 // StaticAudioTrackState
      end
    end

    class 4053175 "StaticAudioTrackPosLoop"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 12894903 "mBufferPosition"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Do not define constructors, destructors, or virtual methods as this is part of a
 union in shared memory and will not get called properly.
 These fields should both be size_t, but since they are located in shared memory we
 force to 32-bit.  The client and server may have different typedefs for size_t.
 This struct information is stored in a single state queue to communicate the
 static AudioTrack server state to the client while data is consumed.
 It is smaller than StaticAudioTrackState to prevent unnecessary information from
 being sent."
      end

      attribute 12895031 "mLoopCount"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4053303 "StaticAudioTrackPosLoopQueue"
      visibility package stereotype "typedef" base_type class_ref 4053175 // StaticAudioTrackPosLoop
      cpp_decl "${comment}typedef SingleStateQueue<${type}> ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 11300535 // <dependency>
	relation 11299767 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 11300535 // <dependency>
	  b parent class_ref 4053175 // StaticAudioTrackPosLoop
      end
    end

    class 4053431 "AudioTrackSharedStatic"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 12895159 "mSingleStateQueue"
	public explicit_type "StaticAudioTrackSingleStateQueue::Shared"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " client requests to the server for loop or position changes."
      end

      attribute 12895287 "mPosLoopQueue"
	public explicit_type "StaticAudioTrackPosLoopQueue::Shared"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " position info updated asynchronously by server and read by client,
 \"for entertainment purposes only\""
      end
    end

    class 4053559 "PlaybackRateQueue"
      visibility package stereotype "typedef" explicit_base_type "SingleStateQueue<AudioPlaybackRate>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 4053687 "ExtendedTimestampQueue"
      visibility package stereotype "typedef" explicit_base_type "SingleStateQueue<ExtendedTimestamp>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 4053815 "audio_track_cblk_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------
 Important: do not add any virtual methods, including ~"
      operation 43556151 "audio_track_cblk_t"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Since the control block is always located in shared memory, this constructor
 is only used for placement new().  It is never used for regular new() or stack."
      end

      operation 43556279 "~audio_track_cblk_t"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
	comment "virtual"
      end

      classrelation 11300663 // <dependency>
	relation 11299895 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 11300663 // <dependency>
	  b parent class_ref 4053943 // Proxy
      end

      classrelation 11300791 // <dependency>
	relation 11300023 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 11300791 // <dependency>
	  b parent class_ref 4054071 // ClientProxy
      end

      classrelation 11300919 // <dependency>
	relation 11300151 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 11300919 // <dependency>
	  b parent class_ref 4054199 // AudioTrackClientProxy
      end

      classrelation 11301047 // <dependency>
	relation 11300279 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 11301047 // <dependency>
	  b parent class_ref 4054327 // AudioRecordClientProxy
      end

      classrelation 11301175 // <dependency>
	relation 11300407 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 11301175 // <dependency>
	  b parent class_ref 4054455 // ServerProxy
      end

      classrelation 11301303 // <dependency>
	relation 11300535 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 11301303 // <dependency>
	  b parent class_ref 4054583 // AudioTrackServerProxy
      end

      classrelation 11301431 // <dependency>
	relation 11300663 -_->
	  stereotype "friend"
	  a default
	    cpp default "${type}"
	    classrelation_ref 11301431 // <dependency>
	  b parent class_ref 4054711 // AudioRecordServerProxy
      end

      attribute 12895415 "mServer"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The data members are grouped so that members accessed frequently and in the same context
 are in the same line of data cache.
 Number of filled frames consumed by server (mIsOut),"
      end

      attribute 12895543 "mPad1"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " or filled frames provided by server (!mIsOut).
 It is updated asynchronously by server without a barrier.
 The value should be used
 \"for entertainment purposes only\",
 which means don't make important decisions based on it.
 unused"
      end

      attribute 12895671 "mFutex"
	volatile public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " event flag: down (P) by client,"
      end

      attribute 12895799 "mMinimum"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This field should be a size_t, but since it is located in shared memory we
 force to 32-bit.  The client and server may have different typedefs for size_t.
 server wakes up client if available >= mMinimum"
      end

      attribute 12895927 "mVolumeLR"
	private explicit_type "gain_minifloat_packed_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Stereo gains for AudioTrack only, not used by AudioRecord."
      end

      attribute 12896055 "mSampleRate"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " AudioTrack only: client's requested sample rate in Hz"
      end

      attribute 12896183 "mPlaybackRateQueue"
	private explicit_type "PlaybackRateQueue::Shared"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " or 0 == default. Write-only client, read-only server."
      end

      attribute 12896311 "mSendLevel"
	private explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " client write-only, server read-only
 Fixed point U4.12 so 0x1000 means 1.0"
      end

      attribute 12896439 "mPad2"
	private explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " unused"
      end

      attribute 12896567 "mExtendedTimestampQueue"
	private explicit_type "ExtendedTimestampQueue::Shared"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " server write-only, client read"
      end

      attribute 12896695 "mBufferSizeInFrames"
	volatile private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This is set by AudioTrack.setBufferSizeInFrames().
 A write will not fill the buffer above this limit.
 effective size of the buffer"
      end

      attribute 12896823 "mFlags"
	volatile public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " combinations of CBLK_*"
      end

      attribute 12896951 "u"
	public explicit_type "<complex type>"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}union  {
                    AudioTrackSharedStreaming   mStreaming;
                    AudioTrackSharedStatic      mStatic;
                    int                         mAlign[8];
                } ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4053943 "Proxy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Cache line boundary (32 bytes)
 ----------------------------------------------------------------------------
 Proxy for shared memory control block, to isolate callers from needing to know the details.
 There is exactly one ClientProxy and one ServerProxy per shared memory control block.
 The proxies are located in normal memory, and are not multi-thread safe within a given side."
      classrelation 11301559 // <generalisation>
	relation 11300791 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11301559 // <generalisation>
	  b parent class_ref 4054839 // typedef1
      end

      operation 43556407 "Proxy"
	protected explicit_return_type ""
	nparams 6
	  param inout name "cblk" type class_ref 4053815 // audio_track_cblk_t
	  param inout name "buffers" explicit_type "void"
	  param in name "frameCount" explicit_type "size_t"
	  param in name "frameSize" explicit_type "size_t"
	  param in name "isOut" explicit_type "bool"
	  param in name "clientInServer" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43556535 "~Proxy"
	cpp_virtual cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      class 4054967 "Buffer"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 12897079 "mFrameCount"
	  public explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " number of frames available in this buffer"
	end

	attribute 12897207 "mRaw"
	  public explicit_type "void"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " pointer to first frame"
	end

	attribute 12897335 "mNonContig"
	  public explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " number of additional non-contiguous frames available"
	end
      end

      operation 43556663 "frameCount"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mFrameCount; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12897463 "mCblk"
	protected type class_ref 4053815 // audio_track_cblk_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " These refer to shared memory, and are virtual addresses with respect to the current process.
 They may have different virtual addresses within the other process.
 the control block"
      end

      attribute 12897591 "mBuffers"
	protected explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * const ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " starting address of buffers"
      end

      attribute 12897719 "mFrameCount"
	const_attribute protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " not necessarily a power of 2"
      end

      attribute 12897847 "mFrameSize"
	const_attribute protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " in bytes"
      end

      attribute 12897975 "mFrameCountP2"
	const_attribute protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFrameCount rounded to power of 2, streaming mode"
      end

      attribute 12898103 "mIsOut"
	const_attribute protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " true for AudioTrack, false for AudioRecord"
      end

      attribute 12898231 "mClientInServer"
	const_attribute protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " true for OutputTrack, false for AudioTrack & AudioRecord"
      end

      attribute 12898359 "mIsShutdown"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " latch set to true when shared memory corruption detected"
      end

      attribute 12898487 "mUnreleased"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " unreleased frames remaining from most recent obtainBuffer"
      end
    end

    class 4054071 "ClientProxy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------
 Proxy seen by AudioTrack client and AudioRecord client"
      classrelation 11301687 // <generalisation>
	relation 11300919 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11301687 // <generalisation>
	  b parent class_ref 4053943 // Proxy
      end

      operation 43556791 "ClientProxy"
	public explicit_return_type ""
	nparams 6
	  param inout name "cblk" type class_ref 4053815 // audio_track_cblk_t
	  param inout name "buffers" explicit_type "void"
	  param in name "frameCount" explicit_type "size_t"
	  param in name "frameSize" explicit_type "size_t"
	  param in name "isOut" explicit_type "bool"
	  param in name "clientInServer" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43556919 "~ClientProxy"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      attribute 12898615 "kForever"
	class_attribute const_attribute public explicit_type "timespec"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12898743 "kNonBlocking"
	class_attribute const_attribute public explicit_type "timespec"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 43557047 "obtainBuffer"
	public explicit_return_type "status_t"
	nparams 3
	  param inout name "buffer" explicit_type "Buffer"
	  param in name "requested" explicit_type "timespec"
	    defaultvalue "NULL"
	  param inout name "elapsed" explicit_type "timespec"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Obtain a buffer with filled frames (reading) or empty frames (writing).
 It is permitted to call obtainBuffer() multiple times in succession, without any intervening
 calls to releaseBuffer().  In that case, the final obtainBuffer() is the one that effectively
 sets or extends the unreleased frame count.
 On entry:
  buffer->mFrameCount should be initialized to maximum number of desired frames,
      which must be > 0.
  buffer->mNonContig is unused.
  buffer->mRaw is unused.
  requested is the requested timeout in local monotonic delta time units:
      NULL or &kNonBlocking means non-blocking (zero timeout).
      &kForever means block forever (infinite timeout).
      Other values mean a specific timeout in local monotonic delta time units.
  elapsed is a pointer to a location that will hold the total local monotonic time that
      elapsed while blocked, or NULL if not needed.
 On exit:
  buffer->mFrameCount has the actual number of contiguous available frames,
      which is always 0 when the return status != NO_ERROR.
  buffer->mNonContig is the number of additional non-contiguous available frames.
  buffer->mRaw is a pointer to the first available frame,
      or NULL when buffer->mFrameCount == 0.
 The return status is one of:
  NO_ERROR    Success, buffer->mFrameCount > 0.
  WOULD_BLOCK Non-blocking mode and no frames are available.
  TIMED_OUT   Timeout occurred before any frames became available.
              This can happen even for infinite timeout, due to a spurious wakeup.
              In this case, the caller should investigate and then re-try as appropriate.
  DEAD_OBJECT Server has died or invalidated, caller should destroy this proxy and re-create.
  -EINTR      Call has been interrupted.  Look around to see why, and then perhaps try again.
  NO_INIT     Shared memory is corrupt.
  NOT_ENOUGH_DATA Server has disabled the track because of underrun: restart the track
              if still in active state.
 Assertion failure on entry, if buffer == NULL or buffer->mFrameCount == 0."
      end

      operation 43557175 "releaseBuffer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "buffer" explicit_type "Buffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Release (some of) the frames last obtained.
 On entry, buffer->mFrameCount should have the number of frames to release,
 which must (cumulatively) be <= the number of frames last obtained but not yet released.
 buffer->mRaw is ignored, but is normally same pointer returned by last obtainBuffer().
 It is permitted to call releaseBuffer() multiple times to release the frames in chunks.
 On exit:
  buffer->mFrameCount is zero.
  buffer->mRaw is NULL."
      end

      operation 43557303 "binderDied"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Call after detecting server's death"
      end

      operation 43557431 "interrupt"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Call to force an obtainBuffer() to return quickly with -EINTR"
      end

      operation 43557559 "getPosition"
	cpp_inline public explicit_return_type "Modulo<uint32_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mEpoch + mCblk->mServer;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43557687 "setEpoch"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "epoch" explicit_type "Modulo<uint32_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mEpoch = epoch;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43557815 "setMinimum"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "minimum" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        // This can only happen on a 64-bit client
        if (minimum > UINT32_MAX) {
            minimum = UINT32_MAX;
        }
        mCblk->mMinimum = (uint32_t) minimum;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43557943 "getMisalignment"
	cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the number of frames that would need to be obtained and released
 in order for the client to be aligned at start of buffer"
      end

      operation 43558071 "getEpoch"
	const cpp_inline public explicit_return_type "Modulo<uint32_t>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mEpoch;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43558199 "getBufferSizeInFrames"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mBufferSizeInFrames; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43558327 "setBufferSizeInFrames"
	public explicit_return_type "uint32_t"
	nparams 1
	  param in name "requestedSize" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See documentation for AudioTrack::setBufferSizeInFrames()"
      end

      operation 43558455 "getTimestamp"
	cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param inout name "timestamp" explicit_type "ExtendedTimestamp"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        if (timestamp == nullptr) {
            return BAD_VALUE;
        }
        (void) mTimestampObserver.poll(mTimestamp);
        *timestamp = mTimestamp;
        return OK;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43558583 "clearTimestamp"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mTimestamp.clear();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12898871 "mBufferSizeInFrames"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This is a copy of mCblk->mBufferSizeInFrames
 effective size of the buffer"
      end

      attribute 12898999 "mEpoch"
	private explicit_type "uint32_t"
	stereotype "Modulo"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12899127 "mTimestampObserver"
	private explicit_type "ExtendedTimestampQueue::Observer"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The shared buffer contents referred to by the timestamp observer
 is initialized when the server proxy created.  A local zero timestamp
 is initialized by the client constructor."
      end

      attribute 12899255 "mTimestamp"
	private explicit_type "ExtendedTimestamp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " initialized by constructor"
      end
    end

    class 4054199 "AudioTrackClientProxy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------
 Proxy used by AudioTrack client, which also includes AudioFlinger::PlaybackThread::OutputTrack"
      classrelation 11301815 // <generalisation>
	relation 11301047 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11301815 // <generalisation>
	  b parent class_ref 4054071 // ClientProxy
      end

      operation 43558711 "AudioTrackClientProxy"
	cpp_inline public explicit_return_type ""
	nparams 5
	  param inout name "cblk" type class_ref 4053815 // audio_track_cblk_t
	  param inout name "buffers" explicit_type "void"
	  param in name "frameCount" explicit_type "size_t"
	  param in name "frameSize" explicit_type "size_t"
	  param in name "clientInServer" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw} : ClientProxy(cblk, buffers, frameCount, frameSize, true /*isOut*/,
          clientInServer),
          mPlaybackRateMutator(&cblk->mPlaybackRateQueue) {
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43558839 "~AudioTrackClientProxy"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 43558967 "setSendLevel"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "sendLevel" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mCblk->mSendLevel = uint16_t(sendLevel * 0x1000);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " No barriers on the following operations, so the ordering of loads/stores
 with respect to other parameters is UNPREDICTABLE. That's considered safe.
 caller must limit to 0.0 <= sendLevel <= 1.0"
      end

      operation 43559095 "setVolumeLR"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "volumeLR" explicit_type "gain_minifloat_packed_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mCblk->mVolumeLR = volumeLR;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " set stereo gains"
      end

      operation 43559223 "setSampleRate"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "sampleRate" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mCblk->mSampleRate = sampleRate;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43559351 "setPlaybackRate"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "playbackRate" explicit_type "AudioPlaybackRate"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mPlaybackRateMutator.push(playbackRate);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43559479 "flush"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43559607 "getUnderrunFrames"
	const cpp_virtual cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mCblk->u.mStreaming.mUnderrunFrames;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43559735 "getUnderrunCount"
	const cpp_virtual cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mCblk->u.mStreaming.mUnderrunCount;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43559863 "clearStreamEndDone"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43559991 "getStreamEndDone"
	const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " and return previous value"
      end

      operation 43560119 "waitStreamEndDone"
	public explicit_return_type "status_t"
	nparams 1
	  param in name "requested" explicit_type "timespec"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12899383 "mPlaybackRateMutator"
	private explicit_type "PlaybackRateQueue::Mutator"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 12245431 // <generalisation>
	relation 12244663 ---|>
	  a private
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12245431 // <generalisation>
	  b parent class_ref 4054071 // ClientProxy
      end
    end

    class 4054327 "AudioRecordClientProxy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------
 Proxy used by AudioRecord client"
      classrelation 11302327 // <generalisation>
	relation 11301559 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11302327 // <generalisation>
	  b parent class_ref 4054071 // ClientProxy
      end

      operation 43561527 "AudioRecordClientProxy"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param inout name "cblk" type class_ref 4053815 // audio_track_cblk_t
	  param inout name "buffers" explicit_type "void"
	  param in name "frameCount" explicit_type "size_t"
	  param in name "frameSize" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw} : ClientProxy(cblk, buffers, frameCount, frameSize,
            false /*isOut*/, false /*clientInServer*/) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43561655 "~AudioRecordClientProxy"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 43561783 "flush"
	cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        int32_t rear = android_atomic_acquire_load(&mCblk->u.mStreaming.mRear);
        int32_t front = mCblk->u.mStreaming.mFront;
        android_atomic_release_store(rear, &mCblk->u.mStreaming.mFront);
        return (Modulo<int32_t>(rear) - front).unsignedValue();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Advances the client read pointer to the server write head pointer
 effectively flushing the client read buffer. The effect is
 instantaneous. Returns the number of frames flushed."
      end
    end

    class 4054455 "ServerProxy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------
 Proxy used by AudioFlinger server"
      classrelation 11302455 // <generalisation>
	relation 11301687 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11302455 // <generalisation>
	  b parent class_ref 4053943 // Proxy
      end

      operation 43561911 "ServerProxy"
	protected explicit_return_type ""
	nparams 6
	  param inout name "cblk" type class_ref 4053815 // audio_track_cblk_t
	  param inout name "buffers" explicit_type "void"
	  param in name "frameCount" explicit_type "size_t"
	  param in name "frameSize" explicit_type "size_t"
	  param in name "isOut" explicit_type "bool"
	  param in name "clientInServer" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43562039 "~ServerProxy"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 43562167 "obtainBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "buffer" explicit_type "Buffer"
	  param in name "ackFlush" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Obtain a buffer with filled frames (writing) or empty frames (reading).
 It is permitted to call obtainBuffer() multiple times in succession, without any intervening
 calls to releaseBuffer().  In that case, the final obtainBuffer() is the one that effectively
 sets or extends the unreleased frame count.
 Always non-blocking.
 On entry:
  buffer->mFrameCount should be initialized to maximum number of desired frames,
      which must be > 0.
  buffer->mNonContig is unused.
  buffer->mRaw is unused.
  ackFlush is true iff being called from Track::start to acknowledge a pending flush.
 On exit:
  buffer->mFrameCount has the actual number of contiguous available frames,
      which is always 0 when the return status != NO_ERROR.
  buffer->mNonContig is the number of additional non-contiguous available frames.
  buffer->mRaw is a pointer to the first available frame,
      or NULL when buffer->mFrameCount == 0.
 The return status is one of:
  NO_ERROR    Success, buffer->mFrameCount > 0.
  WOULD_BLOCK No frames are available.
  NO_INIT     Shared memory is corrupt."
      end

      operation 43562295 "releaseBuffer"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "buffer" explicit_type "Buffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Release (some of) the frames last obtained.
 On entry, buffer->mFrameCount should have the number of frames to release,
 which must (cumulatively) be <= the number of frames last obtained but not yet released.
 It is permitted to call releaseBuffer() multiple times to release the frames in chunks.
 buffer->mRaw is ignored, but is normally same pointer returned by last obtainBuffer().
 On exit:
  buffer->mFrameCount is zero.
  buffer->mRaw is NULL."
      end

      operation 43562423 "framesReleased"
	const cpp_virtual cpp_inline public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mReleased; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the total number of frames that AudioFlinger has obtained and released"
      end

      operation 43562551 "setTimestamp"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "timestamp" explicit_type "ExtendedTimestamp"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mTimestampMutator.push(timestamp);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Expose timestamp to client proxy. Should only be called by a single thread."
      end

      operation 43562679 "framesFlushed"
	const cpp_virtual cpp_inline public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mFlushed; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Total count of the number of flushed frames since creation (never reset)."
      end

      operation 43562807 "getBufferSizeInFrames"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return android_atomic_acquire_load((int32_t *)&mCblk->mBufferSizeInFrames);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get dynamic buffer size from the shared control block."
      end

      attribute 12899767 "mAvailToClient"
	protected explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " estimated frames available to client prior to releaseBuffer()"
      end

      attribute 12899895 "mFlush"
	protected explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " our copy of cblk->u.mStreaming.mFlush, for streaming output only"
      end

      attribute 12900023 "mReleased"
	protected explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " our copy of cblk->mServer, at 64 bit resolution"
      end

      attribute 12900151 "mFlushed"
	protected explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " flushed frames to account for client-server discrepancy"
      end

      attribute 12900279 "mTimestampMutator"
	protected explicit_type "ExtendedTimestampQueue::Mutator"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4054583 "AudioTrackServerProxy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Proxy used by AudioFlinger for servicing AudioTrack"
      classrelation 11302583 // <generalisation>
	relation 11301815 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11302583 // <generalisation>
	  b parent class_ref 4054455 // ServerProxy
      end

      operation 43562935 "AudioTrackServerProxy"
	cpp_inline public explicit_return_type ""
	nparams 6
	  param inout name "cblk" type class_ref 4053815 // audio_track_cblk_t
	  param inout name "buffers" explicit_type "void"
	  param in name "frameCount" explicit_type "size_t"
	  param in name "frameSize" explicit_type "size_t"
	  param in name "clientInServer" explicit_type "bool"
	    defaultvalue "false"
	  param in name "sampleRate" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw} : ServerProxy(cblk, buffers, frameCount, frameSize, true /*isOut*/, clientInServer),
          mPlaybackRateObserver(&cblk->mPlaybackRateQueue),
          mUnderrunCount(0), mUnderrunning(false), mDrained(true) {
        mCblk->mSampleRate = sampleRate;
        mPlaybackRate = AUDIO_PLAYBACK_RATE_DEFAULT;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43563063 "~AudioTrackServerProxy"
	cpp_virtual cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 43563191 "getSampleRate"
	const cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mCblk->mSampleRate; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " return value of these methods must be validated by the caller"
      end

      operation 43563319 "getSendLevel_U4_12"
	const cpp_inline public explicit_return_type "uint16_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mCblk->mSendLevel; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43563447 "getVolumeLR"
	const cpp_inline public explicit_return_type "gain_minifloat_packed_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mCblk->mVolumeLR; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43563575 "framesReady"
	cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " estimated total number of filled frames available to server to read,
 which may include non-contiguous frames"
      end

      operation 43563703 "framesReadyIsCalledByMultipleThreads"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Currently AudioFlinger will call framesReady() for a fast track from two threads:
 FastMixer thread, and normal mixer thread.  This is dangerous, as the proxy is intended
 to be called from at most one thread of server, and one thread of client.
 As a temporary workaround, this method informs the proxy implementation that it
 should avoid doing a state queue poll from within framesReady().
 FIXME Change AudioFlinger to not call framesReady() from normal mixer thread."
      end

      operation 43563831 "setStreamEndDone"
	public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43563959 "tallyUnderrunFrames"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "frameCount" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " and return previous value
 Add to the tally of underrun frames, and inform client of underrun"
      end

      operation 43564087 "getUnderrunFrames"
	const cpp_virtual cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mCblk->u.mStreaming.mUnderrunFrames; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the total number of frames which AudioFlinger desired but were unavailable,
 and thus which resulted in an underrun."
      end

      operation 43564215 "getPlaybackRate"
	public explicit_return_type "AudioPlaybackRate"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the playback speed and pitch read atomically. Not multi-thread safe on server side."
      end

      operation 43564343 "setDrained"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "drained" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        mDrained.store(drained);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the internal drain state of the track buffer from the timestamp received."
      end

      operation 43564471 "isDrained"
	const cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mDrained.load();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check if the internal drain state of the track buffer.
 This is not a guarantee, but advisory for determining whether the track is
 fully played out."
      end

      attribute 12900407 "mPlaybackRate"
	private explicit_type "AudioPlaybackRate"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " last observed playback rate"
      end

      attribute 12900535 "mPlaybackRateObserver"
	private explicit_type "PlaybackRateQueue::Observer"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12900663 "mUnderrunCount"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The server keeps a copy here where it is safe from the client.
 echoed to mCblk"
      end

      attribute 12900791 "mUnderrunning"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " used to detect edge of underrun"
      end

      attribute 12900919 "mDrained"
	private explicit_type "bool"
	stereotype "std::atomic"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " is the track buffer drained"
      end
    end

    class 4054711 "AudioRecordServerProxy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " passed by the mObserver SingleStateQueue.
 Proxy used by AudioFlinger for servicing AudioRecord"
      classrelation 11302967 // <generalisation>
	relation 11302199 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11302967 // <generalisation>
	  b parent class_ref 4054455 // ServerProxy
      end

      operation 43566007 "AudioRecordServerProxy"
	cpp_inline public explicit_return_type ""
	nparams 5
	  param inout name "cblk" type class_ref 4053815 // audio_track_cblk_t
	  param inout name "buffers" explicit_type "void"
	  param in name "frameCount" explicit_type "size_t"
	  param in name "frameSize" explicit_type "size_t"
	  param in name "clientInServer" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw} : ServerProxy(cblk, buffers, frameCount, frameSize, false /*isOut*/, clientInServer) { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43566135 "~AudioRecordServerProxy"
	cpp_virtual cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end
    end

    class 4054839 "typedef1"
      visibility package stereotype "typedef" explicit_base_type "RefBase"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 4055095 "StaticAudioTrackClientProxy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 11301943 // <generalisation>
	relation 11301175 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11301943 // <generalisation>
	  b parent class_ref 4054199 // AudioTrackClientProxy
      end

      operation 43560247 "StaticAudioTrackClientProxy"
	public explicit_return_type ""
	nparams 4
	  param inout name "cblk" type class_ref 4053815 // audio_track_cblk_t
	  param inout name "buffers" explicit_type "void"
	  param in name "frameCount" explicit_type "size_t"
	  param in name "frameSize" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43560375 "~StaticAudioTrackClientProxy"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 43560503 "flush"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43560631 "setLoop"
	public explicit_return_type "void"
	nparams 3
	  param in name "loopStart" explicit_type "size_t"
	  param in name "loopEnd" explicit_type "size_t"
	  param in name "loopCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setLoop(), setBufferPosition(), and setBufferPositionAndLoop() set the
 static buffer position and looping parameters.  These commands are not
 synchronous (they do not wait or block); instead they take effect at the
 next buffer data read from the server side. However, the client side
 getters will read a cached version of the position and loop variables
 until the setting takes effect.

 setBufferPositionAndLoop() is equivalent to calling, in order, setLoop() and
 setBufferPosition().

 The functions should not be relied upon to do parameter or state checking.
 That is done at the AudioTrack level."
      end

      operation 43560759 "setBufferPosition"
	public explicit_return_type "void"
	nparams 1
	  param in name "position" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43560887 "setBufferPositionAndLoop"
	public explicit_return_type "void"
	nparams 4
	  param in name "position" explicit_type "size_t"
	  param in name "loopStart" explicit_type "size_t"
	  param in name "loopEnd" explicit_type "size_t"
	  param in name "loopCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43561015 "getBufferPosition"
	public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43561143 "getBufferPositionAndLoopCount"
	public explicit_return_type "void"
	nparams 2
	  param inout name "position" explicit_type "size_t"
	  param inout name "loopCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getBufferPositionAndLoopCount() provides the proper snapshot of
 position and loopCount together."
      end

      operation 43561271 "getMisalignment"
	cpp_virtual cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return 0;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43561399 "getUnderrunFrames"
	const cpp_virtual cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return 0;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12899511 "mMutator"
	private explicit_type "StaticAudioTrackSingleStateQueue::Mutator"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12899639 "mPosLoopObserver"
	private explicit_type "StaticAudioTrackPosLoopQueue::Observer"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 11302071 // mState (<directional composition>)
	relation 11301303 *-->
	  a role_name "mState" private
	    comment " last communicated state to server"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 11302071 // mState (<directional composition>)
	  b parent class_ref 4052919 // StaticAudioTrackState
      end

      classrelation 11302199 // mPosLoop (<directional composition>)
	relation 11301431 *-->
	  a role_name "mPosLoop" private
	    comment " snapshot of position and loop."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 11302199 // mPosLoop (<directional composition>)
	  b parent class_ref 4053175 // StaticAudioTrackPosLoop
      end
    end

    class 4055223 "StaticAudioTrackServerProxy"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 11302711 // <generalisation>
	relation 11301943 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 11302711 // <generalisation>
	  b parent class_ref 4054583 // AudioTrackServerProxy
      end

      operation 43564599 "StaticAudioTrackServerProxy"
	public explicit_return_type ""
	nparams 4
	  param inout name "cblk" type class_ref 4053815 // audio_track_cblk_t
	  param inout name "buffers" explicit_type "void"
	  param in name "frameCount" explicit_type "size_t"
	  param in name "frameSize" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43564727 "~StaticAudioTrackServerProxy"
	cpp_virtual cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 43564855 "framesReady"
	cpp_virtual public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43564983 "framesReadyIsCalledByMultipleThreads"
	cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43565111 "obtainBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "buffer" explicit_type "Buffer"
	  param in name "ackFlush" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43565239 "releaseBuffer"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param inout name "buffer" explicit_type "Buffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43565367 "tallyUnderrunFrames"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "frameCount" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43565495 "getUnderrunFrames"
	const cpp_virtual cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43565623 "updateStateWithLoop"
	const private explicit_return_type "status_t"
	nparams 2
	  param inout name "localState" type class_ref 4052919 // StaticAudioTrackState
	  param in name "update" type class_ref 4052919 // StaticAudioTrackState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43565751 "updateStateWithPosition"
	const private explicit_return_type "status_t"
	nparams 2
	  param inout name "localState" type class_ref 4052919 // StaticAudioTrackState
	  param in name "update" type class_ref 4052919 // StaticAudioTrackState
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 43565879 "pollPosition"
	private explicit_return_type "ssize_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 12901047 "mObserver"
	private explicit_type "StaticAudioTrackSingleStateQueue::Observer"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " poll for state queue update, and return current position"
      end

      attribute 12901175 "mPosLoopMutator"
	private explicit_type "StaticAudioTrackPosLoopQueue::Mutator"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12901303 "mFramesReadySafe"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Assuming size_t read/writes are atomic on 32 / 64 bit"
      end

      attribute 12901431 "mFramesReady"
	private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " processors, this is a thread-safe version of
 mFramesReady.
 The number of frames ready in the static buffer"
      end

      attribute 12901559 "mFramesReadyIsCalledByMultipleThreads"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " including loops.  This is 64 bits since loop mode
 can cause a track to appear to have a large number
 of frames. INT64_MAX means an infinite loop."
      end

      classrelation 11302839 // mState (<directional composition>)
	relation 11302071 *-->
	  a role_name "mState" private
	    comment " Server side state. Any updates from client must be"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 11302839 // mState (<directional composition>)
	  b parent class_ref 4052919 // StaticAudioTrackState
      end
    end

    class 4055351 "VideoFrame"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Represents a color converted (RGB-based) video frame
 with bitmap pixels stored in FrameBuffer"
      operation 43566263 "VideoFrame"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mWidth(0), mHeight(0), mDisplayWidth(0), mDisplayHeight(0), mSize(0), mData(0),
            mRotationAngle(0) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43566391 "VideoFrame"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "copy" type class_ref 4055351 // VideoFrame
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} {
        mWidth = copy.mWidth;
        mHeight = copy.mHeight;
        mDisplayWidth = copy.mDisplayWidth;
        mDisplayHeight = copy.mDisplayHeight;
        mSize = copy.mSize;
        mData = NULL;  // initialize it first
        if (mSize > 0 && copy.mData != NULL) {
            mData = new uint8_t[mSize];
            if (mData != NULL) {
                memcpy(mData, copy.mData, mSize);
            } else {
                mSize = 0;
            }
        }
        mRotationAngle = copy.mRotationAngle;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 43566519 "~VideoFrame"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        if (mData != 0) {
            delete[] mData;
        }
    };
"
	
	
	
	
      end

      attribute 12901687 "mWidth"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Intentional public access modifier:"
      end

      attribute 12901815 "mHeight"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12901943 "mDisplayWidth"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12902071 "mDisplayHeight"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 12902199 "mSize"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of bytes in mData"
      end

      attribute 12902327 "mRotationAngle"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " rotation angle, clockwise, should be multiple of 90"
      end

      attribute 12902455 "mData"
	public explicit_type "uint8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mData should be 64 bit aligned to prevent additional padding
 Actual binary data"
      end

      attribute 12902583 "mPadding"
	public explicit_type "char"
	multiplicity "[8 - sizeof(mData)]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " pad structure so it's the same size on 64 bit and 32 bit"
      end
    end
  end

  deploymentview 322743 "media"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1711927 "AudioEffectShared"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4052663 // effect_param_cblk_t
      end
    end

    artifact 1712055 "AudioTrackShared"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4052791 // AudioTrackSharedStreaming
	class_ref 4052919 // StaticAudioTrackState
	class_ref 4053047 // StaticAudioTrackSingleStateQueue
	class_ref 4053175 // StaticAudioTrackPosLoop
	class_ref 4053303 // StaticAudioTrackPosLoopQueue
	class_ref 4053431 // AudioTrackSharedStatic
	class_ref 4053559 // PlaybackRateQueue
	class_ref 4053687 // ExtendedTimestampQueue
	class_ref 4053815 // audio_track_cblk_t
	class_ref 4054839 // typedef1
	class_ref 4053943 // Proxy
	class_ref 4054071 // ClientProxy
	class_ref 4054199 // AudioTrackClientProxy
	class_ref 4055095 // StaticAudioTrackClientProxy
	class_ref 4054327 // AudioRecordClientProxy
	class_ref 4054455 // ServerProxy
	class_ref 4054583 // AudioTrackServerProxy
	class_ref 4055223 // StaticAudioTrackServerProxy
	class_ref 4054711 // AudioRecordServerProxy
      end
    end

    artifact 1712183 "VideoFrame"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4055351 // VideoFrame
      end
    end
  end
end
