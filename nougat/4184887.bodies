class StatusBarWindowManager
!!!45169719.java!!!	StatusBarWindowManager(inout context : Context)
        mContext = context;
        mWindowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        mKeyguardScreenRotation = shouldEnableKeyguardScreenRotation();
        mScreenBrightnessDoze = mContext.getResources().getInteger(
                com.android.internal.R.integer.config_screenBrightnessDoze) / 255f;
!!!45169847.java!!!	shouldEnableKeyguardScreenRotation() : boolean
        Resources res = mContext.getResources();
        return SystemProperties.getBoolean("lockscreen.rot_override", false)
                || res.getBoolean(R.bool.config_enableLockScreenRotation);
!!!45169975.java!!!	add(inout statusBarView : View, in barHeight : int) : void

        // Now that the status bar window encompasses the sliding panel and its
        // translucent backdrop, the entire thing is made TRANSLUCENT and is
        // hardware-accelerated.
        mLp = new WindowManager.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                barHeight,
                WindowManager.LayoutParams.TYPE_STATUS_BAR,
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
                        | WindowManager.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING
                        | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH
                        | WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH
                        | WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS,
                PixelFormat.TRANSLUCENT);
        mLp.flags |= WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
        mLp.gravity = Gravity.TOP;
        mLp.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
        mLp.setTitle("StatusBar");
        mLp.packageName = mContext.getPackageName();
        mStatusBarView = statusBarView;
        mBarHeight = barHeight;
        mWindowManager.addView(mStatusBarView, mLp);
        mLpChanged = new WindowManager.LayoutParams();
        mLpChanged.copyFrom(mLp);
!!!45170103.java!!!	applyKeyguardFlags(inout state : StatusBarWindowManager::State) : void
        if (state.keyguardShowing) {
            mLpChanged.privateFlags |= WindowManager.LayoutParams.PRIVATE_FLAG_KEYGUARD;
        } else {
            mLpChanged.privateFlags &= ~WindowManager.LayoutParams.PRIVATE_FLAG_KEYGUARD;
        }

        if (state.keyguardShowing && !state.backdropShowing) {
            mLpChanged.flags |= WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
        } else {
            mLpChanged.flags &= ~WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;
        }
!!!45170231.java!!!	adjustScreenOrientation(inout state : StatusBarWindowManager::State) : void
        if (state.isKeyguardShowingAndNotOccluded()) {
            if (mKeyguardScreenRotation) {
                mLpChanged.screenOrientation = ActivityInfo.SCREEN_ORIENTATION_USER;
            } else {
                mLpChanged.screenOrientation = ActivityInfo.SCREEN_ORIENTATION_NOSENSOR;
            }
        } else {
            mLpChanged.screenOrientation = ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
        }
!!!45170359.java!!!	applyFocusableFlag(inout state : StatusBarWindowManager::State) : void
        boolean panelFocusable = state.statusBarFocusable && state.panelExpanded;
        if (state.keyguardShowing && state.keyguardNeedsInput && state.bouncerShowing
                || BaseStatusBar.ENABLE_REMOTE_INPUT && state.remoteInputActive) {
            mLpChanged.flags &= ~WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
            mLpChanged.flags &= ~WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;
        } else if (state.isKeyguardShowingAndNotOccluded() || panelFocusable) {
            mLpChanged.flags &= ~WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
            mLpChanged.flags |= WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;
        } else {
            mLpChanged.flags |= WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
            mLpChanged.flags &= ~WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;
        }

        mLpChanged.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
!!!45170487.java!!!	applyHeight(inout state : StatusBarWindowManager::State) : void
        boolean expanded = isExpanded(state);
        if (expanded) {
            mLpChanged.height = ViewGroup.LayoutParams.MATCH_PARENT;
        } else {
            mLpChanged.height = mBarHeight;
        }
!!!45170615.java!!!	isExpanded(inout state : StatusBarWindowManager::State) : boolean
        return !state.forceCollapsed && (state.isKeyguardShowingAndNotOccluded()
                || state.panelVisible || state.keyguardFadingAway || state.bouncerShowing
                || state.headsUpShowing);
!!!45170743.java!!!	applyFitsSystemWindows(inout state : StatusBarWindowManager::State) : void
        mStatusBarView.setFitsSystemWindows(!state.isKeyguardShowingAndNotOccluded());
!!!45170871.java!!!	applyUserActivityTimeout(inout state : StatusBarWindowManager::State) : void
        if (state.isKeyguardShowingAndNotOccluded()
                && state.statusBarState == StatusBarState.KEYGUARD
                && !state.qsExpanded) {
            mLpChanged.userActivityTimeout = KeyguardViewMediator.AWAKE_INTERVAL_DEFAULT_MS;
        } else {
            mLpChanged.userActivityTimeout = -1;
        }
!!!45170999.java!!!	applyInputFeatures(inout state : StatusBarWindowManager::State) : void
        if (state.isKeyguardShowingAndNotOccluded()
                && state.statusBarState == StatusBarState.KEYGUARD
                && !state.qsExpanded && !state.forceUserActivity) {
            mLpChanged.inputFeatures |=
                    WindowManager.LayoutParams.INPUT_FEATURE_DISABLE_USER_ACTIVITY;
        } else {
            mLpChanged.inputFeatures &=
                    ~WindowManager.LayoutParams.INPUT_FEATURE_DISABLE_USER_ACTIVITY;
        }
!!!45171127.java!!!	apply(inout state : StatusBarWindowManager::State) : void
        applyKeyguardFlags(state);
        applyForceStatusBarVisibleFlag(state);
        applyFocusableFlag(state);
        adjustScreenOrientation(state);
        applyHeight(state);
        applyUserActivityTimeout(state);
        applyInputFeatures(state);
        applyFitsSystemWindows(state);
        applyModalFlag(state);
        applyBrightness(state);
        if (mLp.copyFrom(mLpChanged) != 0) {
            mWindowManager.updateViewLayout(mStatusBarView, mLp);
        }
!!!45171255.java!!!	applyForceStatusBarVisibleFlag(inout state : StatusBarWindowManager::State) : void
        if (state.forceStatusBarVisible) {
            mLpChanged.privateFlags |= WindowManager
                    .LayoutParams.PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT;
        } else {
            mLpChanged.privateFlags &= ~WindowManager
                    .LayoutParams.PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT;
        }
!!!45171383.java!!!	applyModalFlag(inout state : StatusBarWindowManager::State) : void
        if (state.headsUpShowing) {
            mLpChanged.flags |= WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;
        } else {
            mLpChanged.flags &= ~WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;
        }
!!!45171511.java!!!	applyBrightness(inout state : StatusBarWindowManager::State) : void
        if (state.forceDozeBrightness) {
            mLpChanged.screenBrightness = mScreenBrightnessDoze;
        } else {
            mLpChanged.screenBrightness = WindowManager.LayoutParams.BRIGHTNESS_OVERRIDE_NONE;
        }
!!!45171639.java!!!	setKeyguardShowing(inout showing : boolean) : void
        mCurrentState.keyguardShowing = showing;
        apply(mCurrentState);
!!!45171767.java!!!	setKeyguardOccluded(inout occluded : boolean) : void
        mCurrentState.keyguardOccluded = occluded;
        apply(mCurrentState);
!!!45171895.java!!!	setKeyguardNeedsInput(inout needsInput : boolean) : void
        mCurrentState.keyguardNeedsInput = needsInput;
        apply(mCurrentState);
!!!45172023.java!!!	setPanelVisible(inout visible : boolean) : void
        mCurrentState.panelVisible = visible;
        mCurrentState.statusBarFocusable = visible;
        apply(mCurrentState);
!!!45172151.java!!!	setStatusBarFocusable(inout focusable : boolean) : void
        mCurrentState.statusBarFocusable = focusable;
        apply(mCurrentState);
!!!45172279.java!!!	setBouncerShowing(inout showing : boolean) : void
        mCurrentState.bouncerShowing = showing;
        apply(mCurrentState);
!!!45172407.java!!!	setBackdropShowing(inout showing : boolean) : void
        mCurrentState.backdropShowing = showing;
        apply(mCurrentState);
!!!45172535.java!!!	setKeyguardFadingAway(inout keyguardFadingAway : boolean) : void
        mCurrentState.keyguardFadingAway = keyguardFadingAway;
        apply(mCurrentState);
!!!45172663.java!!!	setQsExpanded(inout expanded : boolean) : void
        mCurrentState.qsExpanded = expanded;
        apply(mCurrentState);
!!!45172791.java!!!	setForceUserActivity(inout forceUserActivity : boolean) : void
        mCurrentState.forceUserActivity = forceUserActivity;
        apply(mCurrentState);
!!!45172919.java!!!	setHeadsUpShowing(inout showing : boolean) : void
        mCurrentState.headsUpShowing = showing;
        apply(mCurrentState);
!!!45173047.java!!!	setStatusBarState(in state : int) : void
        mCurrentState.statusBarState = state;
        apply(mCurrentState);
!!!45173175.java!!!	setForceStatusBarVisible(inout forceStatusBarVisible : boolean) : void
        mCurrentState.forceStatusBarVisible = forceStatusBarVisible;
        apply(mCurrentState);
!!!45173303.java!!!	setForceWindowCollapsed(inout force : boolean) : void
        mCurrentState.forceCollapsed = force;
        apply(mCurrentState);
!!!45173431.java!!!	setPanelExpanded(inout isExpanded : boolean) : void
        mCurrentState.panelExpanded = isExpanded;
        apply(mCurrentState);
!!!45173559.java!!!	onRemoteInputActive(inout remoteInputActive : boolean) : void
        mCurrentState.remoteInputActive = remoteInputActive;
        apply(mCurrentState);
!!!45173687.java!!!	setForceDozeBrightness(inout forceDozeBrightness : boolean) : void
        mCurrentState.forceDozeBrightness = forceDozeBrightness;
        apply(mCurrentState);
!!!45173815.java!!!	setBarHeight(in barHeight : int) : void
        mBarHeight = barHeight;
        apply(mCurrentState);
!!!45173943.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        pw.println("StatusBarWindowManager state:");
        pw.println(mCurrentState);
!!!45174071.java!!!	isShowingWallpaper() : boolean
        return !mCurrentState.backdropShowing;
