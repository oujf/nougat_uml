class QSTileHost
!!!45132983.java!!!	QSTileHost(inout context : Context, inout statusBar : PhoneStatusBar, inout bluetooth : BluetoothController, inout location : LocationController, inout rotation : RotationLockController, inout network : NetworkController, inout zen : ZenModeController, inout hotspot : HotspotController, inout cast : CastController, inout flashlight : FlashlightController, inout userSwitcher : UserSwitcherController, inout userInfo : UserInfoController, inout keyguard : KeyguardMonitor, inout security : SecurityController, inout battery : BatteryController, inout iconController : StatusBarIconController, inout nextAlarmController : NextAlarmController)
        mContext = context;
        mStatusBar = statusBar;
        mBluetooth = bluetooth;
        mLocation = location;
        mRotation = rotation;
        mNetwork = network;
        mZen = zen;
        mHotspot = hotspot;
        mCast = cast;
        mFlashlight = flashlight;
        mUserSwitcherController = userSwitcher;
        mUserInfoController = userInfo;
        mKeyguard = keyguard;
        mSecurity = security;
        mBattery = battery;
        mIconController = iconController;
        mNextAlarmController = nextAlarmController;
        mNightModeController = new NightModeController(mContext, true);
        mProfileController = new ManagedProfileController(this);

        final HandlerThread ht = new HandlerThread(QSTileHost.class.getSimpleName(),
                Process.THREAD_PRIORITY_BACKGROUND);
        ht.start();
        mLooper = ht.getLooper();

        mServices = new TileServices(this, mLooper);

        TunerService.get(mContext).addTunable(this, TILES_SETTING);
        // AutoTileManager can modify mTiles so make sure mTiles has already been initialized.
        mAutoTiles = new AutoTileManager(context, this);
!!!45133111.java!!!	getNextAlarmController() : NextAlarmController
        return mNextAlarmController;
!!!45133239.java!!!	setHeaderView(inout view : View) : void
        mHeader = view;
!!!45133367.java!!!	getPhoneStatusBar() : PhoneStatusBar
        return mStatusBar;
!!!45133495.java!!!	destroy() : void
        mAutoTiles.destroy();
        TunerService.get(mContext).removeTunable(this);
!!!45133623.java!!!	addCallback(inout callback : QSTile::Host::Callback) : void
        mCallbacks.add(callback);
!!!45133751.java!!!	removeCallback(inout callback : QSTile::Host::Callback) : void
        mCallbacks.remove(callback);
!!!45133879.java!!!	getTiles() : QSTile
        return mTiles.values();
!!!45134007.java!!!	startActivityDismissingKeyguard(in intent : Intent) : void
        mStatusBar.postStartActivityDismissingKeyguard(intent, 0);
!!!45134135.java!!!	startActivityDismissingKeyguard(inout intent : PendingIntent) : void
        mStatusBar.postStartActivityDismissingKeyguard(intent);
!!!45134263.java!!!	startRunnableDismissingKeyguard(inout runnable : Runnable) : void
        mStatusBar.postQSRunnableDismissingKeyguard(runnable);
!!!45134391.java!!!	warn(inout message : String, inout t : Throwable) : void
        // already logged
!!!45134519.java!!!	animateToggleQSExpansion() : void
        // TODO: Better path to animated panel expansion.
        mHeader.callOnClick();
!!!45134647.java!!!	collapsePanels() : void
        mStatusBar.postAnimateCollapsePanels();
!!!45134775.java!!!	openPanels() : void
        mStatusBar.postAnimateOpenPanels();
!!!45134903.java!!!	getLooper() : Looper
        return mLooper;
!!!45135031.java!!!	getContext() : Context
        return mContext;
!!!45135159.java!!!	getBluetoothController() : BluetoothController
        return mBluetooth;
!!!45135287.java!!!	getLocationController() : LocationController
        return mLocation;
!!!45135415.java!!!	getRotationLockController() : RotationLockController
        return mRotation;
!!!45135543.java!!!	getNetworkController() : NetworkController
        return mNetwork;
!!!45135671.java!!!	getZenModeController() : ZenModeController
        return mZen;
!!!45135799.java!!!	getHotspotController() : HotspotController
        return mHotspot;
!!!45135927.java!!!	getCastController() : CastController
        return mCast;
!!!45136055.java!!!	getFlashlightController() : FlashlightController
        return mFlashlight;
!!!45136183.java!!!	getKeyguardMonitor() : KeyguardMonitor
        return mKeyguard;
!!!45136311.java!!!	getUserSwitcherController() : UserSwitcherController
        return mUserSwitcherController;
!!!45136439.java!!!	getUserInfoController() : UserInfoController
        return mUserInfoController;
!!!45136567.java!!!	getBatteryController() : BatteryController
        return mBattery;
!!!45136695.java!!!	getSecurityController() : SecurityController
        return mSecurity;
!!!45136823.java!!!	getTileServices() : TileServices
        return mServices;
!!!45136951.java!!!	getIconController() : StatusBarIconController
        return mIconController;
!!!45137079.java!!!	getNightModeController() : NightModeController
        return mNightModeController;
!!!45137207.java!!!	getManagedProfileController() : ManagedProfileController
        return mProfileController;
!!!45137335.java!!!	onTuningChanged(inout key : String, inout newValue : String) : void
        if (!TILES_SETTING.equals(key)) {
            return;
        }
        if (DEBUG) Log.d(TAG, "Recreating tiles");
        final List<String> tileSpecs = loadTileSpecs(mContext, newValue);
        int currentUser = ActivityManager.getCurrentUser();
        if (tileSpecs.equals(mTileSpecs) && currentUser == mCurrentUser) return;
        for (Map.Entry<String, QSTile<?>> tile : mTiles.entrySet()) {
            if (!tileSpecs.contains(tile.getKey())) {
                if (DEBUG) Log.d(TAG, "Destroying tile: " + tile.getKey());
                tile.getValue().destroy();
            }
        }
        final LinkedHashMap<String, QSTile<?>> newTiles = new LinkedHashMap<>();
        for (String tileSpec : tileSpecs) {
            QSTile<?> tile = mTiles.get(tileSpec);
            if (tile != null && (!(tile instanceof CustomTile)
                    || ((CustomTile) tile).getUser() == currentUser)) {
                if (DEBUG) Log.d(TAG, "Adding " + tile);
                tile.removeCallbacks();
                newTiles.put(tileSpec, tile);
            } else {
                if (DEBUG) Log.d(TAG, "Creating tile: " + tileSpec);
                try {
                    tile = createTile(tileSpec);
                    if (tile != null && tile.isAvailable()) {
                        tile.setTileSpec(tileSpec);
                        newTiles.put(tileSpec, tile);
                    }
                } catch (Throwable t) {
                    Log.w(TAG, "Error creating tile for spec: " + tileSpec, t);
                }
            }
        }
        mCurrentUser = currentUser;
        mTileSpecs.clear();
        mTileSpecs.addAll(tileSpecs);
        mTiles.clear();
        mTiles.putAll(newTiles);
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onTilesChanged();
        }
!!!45137463.java!!!	removeTile(inout tileSpec : String) : void
        ArrayList<String> specs = new ArrayList<>(mTileSpecs);
        specs.remove(tileSpec);
        Settings.Secure.putStringForUser(mContext.getContentResolver(), TILES_SETTING,
                TextUtils.join(",", specs), ActivityManager.getCurrentUser());
!!!45137591.java!!!	addTile(inout spec : String) : void
        final String setting = Settings.Secure.getStringForUser(mContext.getContentResolver(),
                TILES_SETTING, ActivityManager.getCurrentUser());
        final List<String> tileSpecs = loadTileSpecs(mContext, setting);
        if (tileSpecs.contains(spec)) {
            return;
        }
        tileSpecs.add(spec);
        Settings.Secure.putStringForUser(mContext.getContentResolver(), TILES_SETTING,
                TextUtils.join(",", tileSpecs), ActivityManager.getCurrentUser());
!!!45137719.java!!!	addTile(inout tile : ComponentName) : void
        List<String> newSpecs = new ArrayList<>(mTileSpecs);
        newSpecs.add(0, CustomTile.toSpec(tile));
        changeTiles(mTileSpecs, newSpecs);
!!!45137847.java!!!	removeTile(inout tile : ComponentName) : void
        List<String> newSpecs = new ArrayList<>(mTileSpecs);
        newSpecs.remove(CustomTile.toSpec(tile));
        changeTiles(mTileSpecs, newSpecs);
!!!45137975.java!!!	changeTiles(inout previousTiles : List<String>, inout newTiles : List<String>) : void
        final int NP = previousTiles.size();
        final int NA = newTiles.size();
        for (int i = 0; i < NP; i++) {
            String tileSpec = previousTiles.get(i);
            if (!tileSpec.startsWith(CustomTile.PREFIX)) continue;
            if (!newTiles.contains(tileSpec)) {
                ComponentName component = CustomTile.getComponentFromSpec(tileSpec);
                Intent intent = new Intent().setComponent(component);
                TileLifecycleManager lifecycleManager = new TileLifecycleManager(new Handler(),
                        mContext, mServices, new Tile(component), intent,
                        new UserHandle(ActivityManager.getCurrentUser()));
                lifecycleManager.onStopListening();
                lifecycleManager.onTileRemoved();
                TileLifecycleManager.setTileAdded(mContext, component, false);
                lifecycleManager.flushMessagesAndUnbind();
            }
        }
        if (DEBUG) Log.d(TAG, "saveCurrentTiles " + newTiles);
        Secure.putStringForUser(getContext().getContentResolver(), QSTileHost.TILES_SETTING,
                TextUtils.join(",", newTiles), ActivityManager.getCurrentUser());
!!!45138103.java!!!	createTile(inout tileSpec : String) : QSTile
        if (tileSpec.equals("wifi")) return new WifiTile(this);
        else if (tileSpec.equals("bt")) return new BluetoothTile(this);
        else if (tileSpec.equals("cell")) return new CellularTile(this);
        else if (tileSpec.equals("dnd")) return new DndTile(this);
        else if (tileSpec.equals("inversion")) return new ColorInversionTile(this);
        else if (tileSpec.equals("airplane")) return new AirplaneModeTile(this);
        else if (tileSpec.equals("work")) return new WorkModeTile(this);
        else if (tileSpec.equals("rotation")) return new RotationLockTile(this);
        else if (tileSpec.equals("flashlight")) return new FlashlightTile(this);
        else if (tileSpec.equals("location")) return new LocationTile(this);
        else if (tileSpec.equals("cast")) return new CastTile(this);
        else if (tileSpec.equals("hotspot")) return new HotspotTile(this);
        else if (tileSpec.equals("user")) return new UserTile(this);
        else if (tileSpec.equals("battery")) return new BatteryTile(this);
        else if (tileSpec.equals("saver")) return new DataSaverTile(this);
        else if (tileSpec.equals(NightModeTile.NIGHT_MODE_SPEC))
            return new NightModeTile(this);
        // Intent tiles.
        else if (tileSpec.startsWith(IntentTile.PREFIX)) return IntentTile.create(this,tileSpec);
        else if (tileSpec.startsWith(CustomTile.PREFIX)) return CustomTile.create(this,tileSpec);
        else {
            Log.w(TAG, "Bad tile spec: " + tileSpec);
            return null;
        }
!!!45138231.java!!!	loadTileSpecs(inout context : Context, inout tileList : String) : String
        final Resources res = context.getResources();
        final String defaultTileList = res.getString(R.string.quick_settings_tiles_default);
        if (tileList == null) {
            tileList = res.getString(R.string.quick_settings_tiles);
            if (DEBUG) Log.d(TAG, "Loaded tile specs from config: " + tileList);
        } else {
            if (DEBUG) Log.d(TAG, "Loaded tile specs from setting: " + tileList);
        }
        final ArrayList<String> tiles = new ArrayList<String>();
        boolean addedDefault = false;
        for (String tile : tileList.split(",")) {
            tile = tile.trim();
            if (tile.isEmpty()) continue;
            if (tile.equals("default")) {
                if (!addedDefault) {
                    tiles.addAll(Arrays.asList(defaultTileList.split(",")));
                    addedDefault = true;
                }
            } else {
                tiles.add(tile);
            }
        }
        return tiles;
