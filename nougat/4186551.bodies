class FlashlightController
!!!44603959.java!!!	FlashlightController(inout mContext : Context)
        mCameraManager = (CameraManager) mContext.getSystemService(Context.CAMERA_SERVICE);

        String cameraId = null;
        try {
            cameraId = getCameraId();
        } catch (Throwable e) {
            Log.e(TAG, "Couldn't initialize.", e);
            return;
        } finally {
            mCameraId = cameraId;
        }

        if (mCameraId != null) {
            ensureHandler();
            mCameraManager.registerTorchCallback(mTorchCallback, mHandler);
        }
!!!44604087.java!!!	setFlashlight(inout enabled : boolean) : void
        boolean pendingError = false;
        synchronized (this) {
            if (mFlashlightEnabled != enabled) {
                mFlashlightEnabled = enabled;
                try {
                    mCameraManager.setTorchMode(mCameraId, enabled);
                } catch (CameraAccessException e) {
                    Log.e(TAG, "Couldn't set torch mode", e);
                    mFlashlightEnabled = false;
                    pendingError = true;
                }
            }
        }
        dispatchModeChanged(mFlashlightEnabled);
        if (pendingError) {
            dispatchError();
        }
!!!44604215.java!!!	hasFlashlight() : boolean
        return mCameraId != null;
!!!44604343.java!!!	isEnabled() : boolean
        return mFlashlightEnabled;
!!!44604471.java!!!	isAvailable() : boolean
        return mTorchAvailable;
!!!44604599.java!!!	addListener(inout l : FlashlightController::FlashlightListener) : void
        synchronized (mListeners) {
            cleanUpListenersLocked(l);
            mListeners.add(new WeakReference<>(l));
        }
!!!44604727.java!!!	removeListener(inout l : FlashlightController::FlashlightListener) : void
        synchronized (mListeners) {
            cleanUpListenersLocked(l);
        }
!!!44604855.java!!!	ensureHandler() : void
        if (mHandler == null) {
            HandlerThread thread = new HandlerThread(TAG, Process.THREAD_PRIORITY_BACKGROUND);
            thread.start();
            mHandler = new Handler(thread.getLooper());
        }
!!!44604983.java!!!	getCameraId() : String
        String[] ids = mCameraManager.getCameraIdList();
        for (String id : ids) {
            CameraCharacteristics c = mCameraManager.getCameraCharacteristics(id);
            Boolean flashAvailable = c.get(CameraCharacteristics.FLASH_INFO_AVAILABLE);
            Integer lensFacing = c.get(CameraCharacteristics.LENS_FACING);
            if (flashAvailable != null && flashAvailable
                    && lensFacing != null && lensFacing == CameraCharacteristics.LENS_FACING_BACK) {
                return id;
            }
        }
        return null;
!!!44605111.java!!!	dispatchModeChanged(inout enabled : boolean) : void
        dispatchListeners(DISPATCH_CHANGED, enabled);
!!!44605239.java!!!	dispatchError() : void
        dispatchListeners(DISPATCH_CHANGED, false /* argument (ignored) */);
!!!44605367.java!!!	dispatchAvailabilityChanged(inout available : boolean) : void
        dispatchListeners(DISPATCH_AVAILABILITY_CHANGED, available);
!!!44605495.java!!!	dispatchListeners(in message : int, inout argument : boolean) : void
        synchronized (mListeners) {
            final int N = mListeners.size();
            boolean cleanup = false;
            for (int i = 0; i < N; i++) {
                FlashlightListener l = mListeners.get(i).get();
                if (l != null) {
                    if (message == DISPATCH_ERROR) {
                        l.onFlashlightError();
                    } else if (message == DISPATCH_CHANGED) {
                        l.onFlashlightChanged(argument);
                    } else if (message == DISPATCH_AVAILABILITY_CHANGED) {
                        l.onFlashlightAvailabilityChanged(argument);
                    }
                } else {
                    cleanup = true;
                }
            }
            if (cleanup) {
                cleanUpListenersLocked(null);
            }
        }
!!!44605623.java!!!	cleanUpListenersLocked(inout listener : FlashlightController::FlashlightListener) : void
        for (int i = mListeners.size() - 1; i >= 0; i--) {
            FlashlightListener found = mListeners.get(i).get();
            if (found == null || found == listener) {
                mListeners.remove(i);
            }
        }
