class QSTile
!!!44503351.java!!!	QSTile(inout host : QSTile::Host)
        mHost = host;
        mContext = host.getContext();
        mHandler = new H(host.getLooper());
!!!44503479.java!!!	setListening(inout listener : Object, inout listening : boolean) : void
        if (listening) {
            if (mListeners.add(listener) && mListeners.size() == 1) {
                if (DEBUG) Log.d(TAG, "setListening " + true);
                mHandler.obtainMessage(H.SET_LISTENING, 1, 0).sendToTarget();
            }
        } else {
            if (mListeners.remove(listener) && mListeners.size() == 0) {
                if (DEBUG) Log.d(TAG, "setListening " + false);
                mHandler.obtainMessage(H.SET_LISTENING, 0, 0).sendToTarget();
            }
        }
!!!44503607.java!!!	getTileSpec() : String
        return mTileSpec;
!!!44503735.java!!!	setTileSpec(inout tileSpec : String) : void
        mTileSpec = tileSpec;
!!!44503863.java!!!	getHost() : QSTile::Host
        return mHost;
!!!44503991.java!!!	createTileView(inout context : Context) : QSIconView
        return new QSIconView(context);
!!!44504119.java!!!	getDetailAdapter() : QSTile::DetailAdapter
        return null; // optional
!!!44504247.java!!!	isAvailable() : boolean
        return true;
!!!44505143.java!!!	addCallback(inout callback : QSTile::Callback) : void
        mHandler.obtainMessage(H.ADD_CALLBACK, callback).sendToTarget();
!!!44505271.java!!!	removeCallback(inout callback : QSTile::Callback) : void
        mHandler.obtainMessage(H.REMOVE_CALLBACK, callback).sendToTarget();
!!!44505399.java!!!	removeCallbacks() : void
        mHandler.sendEmptyMessage(H.REMOVE_CALLBACKS);
!!!44505527.java!!!	click() : void
        mHandler.sendEmptyMessage(H.CLICK);
!!!44505655.java!!!	secondaryClick() : void
        mHandler.sendEmptyMessage(H.SECONDARY_CLICK);
!!!44505783.java!!!	longClick() : void
        mHandler.sendEmptyMessage(H.LONG_CLICK);
!!!44505911.java!!!	showDetail(inout show : boolean) : void
        mHandler.obtainMessage(H.SHOW_DETAIL, show ? 1 : 0, 0).sendToTarget();
!!!44506039.java!!!	refreshState() : void
        refreshState(null);
!!!44506167.java!!!	refreshState(inout arg : Object) : void
        mHandler.obtainMessage(H.REFRESH_STATE, arg).sendToTarget();
!!!44506295.java!!!	clearState() : void
        mHandler.sendEmptyMessage(H.CLEAR_STATE);
!!!44506423.java!!!	userSwitch(in newUserId : int) : void
        mHandler.obtainMessage(H.USER_SWITCH, newUserId, 0).sendToTarget();
!!!44506551.java!!!	fireToggleStateChanged(inout state : boolean) : void
        mHandler.obtainMessage(H.TOGGLE_STATE_CHANGED, state ? 1 : 0, 0).sendToTarget();
!!!44506679.java!!!	fireScanStateChanged(inout state : boolean) : void
        mHandler.obtainMessage(H.SCAN_STATE_CHANGED, state ? 1 : 0, 0).sendToTarget();
!!!44506807.java!!!	destroy() : void
        mHandler.sendEmptyMessage(H.DESTROY);
!!!44506935.java!!!	getState() : TState
        return mState;
!!!44507063.java!!!	setDetailListening(inout listening : boolean) : void
        // optional
!!!44507191.java!!!	handleAddCallback(inout callback : QSTile::Callback) : void
        mCallbacks.add(callback);
        callback.onStateChanged(mState);
!!!44507319.java!!!	handleRemoveCallback(inout callback : QSTile::Callback) : void
        mCallbacks.remove(callback);
!!!44507447.java!!!	handleRemoveCallbacks() : void
        mCallbacks.clear();
!!!44507575.java!!!	handleSecondaryClick() : void
        // Default to normal click.
        handleClick();
!!!44507703.java!!!	handleLongClick() : void
        MetricsLogger.action(mContext, MetricsEvent.ACTION_QS_LONG_PRESS, getTileSpec());
        mHost.startActivityDismissingKeyguard(getLongClickIntent());
!!!44507959.java!!!	handleClearState() : void
        mTmpState = newTileState();
        mState = newTileState();
!!!44508087.java!!!	handleRefreshState(inout arg : Object) : void
        handleUpdateState(mTmpState, arg);
        final boolean changed = mTmpState.copyTo(mState);
        if (changed) {
            handleStateChanged();
        }
!!!44508215.java!!!	handleStateChanged() : void
        boolean delayAnnouncement = shouldAnnouncementBeDelayed();
        if (mCallbacks.size() != 0) {
            for (int i = 0; i < mCallbacks.size(); i++) {
                mCallbacks.get(i).onStateChanged(mState);
            }
            if (mAnnounceNextStateChange && !delayAnnouncement) {
                String announcement = composeChangeAnnouncement();
                if (announcement != null) {
                    mCallbacks.get(0).onAnnouncementRequested(announcement);
                }
            }
        }
        mAnnounceNextStateChange = mAnnounceNextStateChange && delayAnnouncement;
!!!44508343.java!!!	shouldAnnouncementBeDelayed() : boolean
        return false;
!!!44508471.java!!!	composeChangeAnnouncement() : String
        return null;
!!!44508599.java!!!	handleShowDetail(inout show : boolean) : void
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onShowDetail(show);
        }
!!!44508727.java!!!	handleToggleStateChanged(inout state : boolean) : void
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onToggleStateChanged(state);
        }
!!!44508855.java!!!	handleScanStateChanged(inout state : boolean) : void
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onScanStateChanged(state);
        }
!!!44508983.java!!!	handleUserSwitch(in newUserId : int) : void
        handleRefreshState(null);
!!!44509239.java!!!	handleDestroy() : void
        setListening(false);
        mCallbacks.clear();
!!!44509367.java!!!	checkIfRestrictionEnforcedByAdminOnly(inout state : QSTile::State, inout userRestriction : String) : void
        EnforcedAdmin admin = RestrictedLockUtils.checkIfRestrictionEnforced(mContext,
                userRestriction, ActivityManager.getCurrentUser());
        if (admin != null && !RestrictedLockUtils.hasBaseUserRestriction(mContext,
                userRestriction, ActivityManager.getCurrentUser())) {
            state.disabledByPolicy = true;
            state.enforcedAdmin = admin;
        } else {
            state.disabledByPolicy = false;
            state.enforcedAdmin = null;
        }
