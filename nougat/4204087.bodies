class QSTileBaseView
!!!44552119.java!!!	QSTileBaseView(inout context : Context, inout icon : QSIconView)
        this(context, icon, false);
!!!44552247.java!!!	QSTileBaseView(inout context : Context, inout icon : QSIconView, inout collapsedView : boolean)
        super(context);
        mIcon = icon;
        addView(mIcon);

        mTileBackground = newTileBackground();
        if (mTileBackground instanceof RippleDrawable) {
            setRipple((RippleDrawable) mTileBackground);
        }
        setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_YES);
        setBackground(mTileBackground);

        // Default to Quick Tile padding, and QSTileView will specify its own padding.
        int padding = context.getResources().getDimensionPixelSize(R.dimen.qs_quick_tile_padding);
        setPadding(0, padding, 0, padding);
        setClipChildren(false);
        setClipToPadding(false);
        mCollapsedView = collapsedView;
!!!44552375.java!!!	newTileBackground() : Drawable
        final int[] attrs = new int[] { android.R.attr.selectableItemBackgroundBorderless };
        final TypedArray ta = mContext.obtainStyledAttributes(attrs);
        final Drawable d = ta.getDrawable(0);
        ta.recycle();
        return d;
!!!44552503.java!!!	setRipple(inout tileBackground : RippleDrawable) : void
        mRipple = tileBackground;
        if (getWidth() != 0) {
            updateRippleSize(getWidth(), getHeight());
        }
!!!44552631.java!!!	updateRippleSize(in width : int, in height : int) : void
        // center the touch feedback on the center of the icon, and dial it down a bit
        final int cx = width / 2;
        final int cy = height / 2;
        final int rad = (int)(mIcon.getHeight() * .85f);
        mRipple.setHotspotBounds(cx - rad, cy - rad, cx + rad, cy + rad);
!!!44552759.java!!!	init(inout click : OnClickListener, inout longClick : OnLongClickListener) : void
        setClickable(true);
        setOnClickListener(click);
        setOnLongClickListener(longClick);
!!!44552887.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
        super.onLayout(changed, l, t, r, b);
        final int w = getMeasuredWidth();
        final int h = getMeasuredHeight();

        if (mRipple != null) {
            updateRippleSize(w, h);
        }
!!!44553015.java!!!	hasOverlappingRendering() : boolean
        // Avoid layers for this layout - we don't need them.
        return false;
!!!44553143.java!!!	updateAccessibilityOrder(inout previousView : View) : View
        setAccessibilityTraversalAfter(previousView.getId());
        return this;
!!!44553271.java!!!	onStateChanged(inout state : QSTile::State) : void
        mHandler.obtainMessage(H.STATE_CHANGED, state).sendToTarget();
!!!44553399.java!!!	handleStateChanged(inout state : QSTile::State) : void
        mIcon.setIcon(state);
        if (mCollapsedView && !TextUtils.isEmpty(state.minimalContentDescription)) {
            setContentDescription(state.minimalContentDescription);
        } else {
            setContentDescription(state.contentDescription);
        }
        if (mCollapsedView) {
            mAccessibilityClass = state.minimalAccessibilityClassName;
        } else {
            mAccessibilityClass = state.expandedAccessibilityClassName;
        }
        if (state instanceof QSTile.BooleanState) {
            mTileState = ((QSTile.BooleanState) state).value;
        }
!!!44553527.java!!!	getIcon() : QSIconView
        return mIcon;
!!!44553655.java!!!	onInitializeAccessibilityEvent(inout event : AccessibilityEvent) : void
        super.onInitializeAccessibilityEvent(event);
        if (!TextUtils.isEmpty(mAccessibilityClass)) {
            event.setClassName(mAccessibilityClass);
            if (Switch.class.getName().equals(mAccessibilityClass)) {
                String label = getResources()
                        .getString(!mTileState ? R.string.switch_bar_on : R.string.switch_bar_off);
                event.setContentDescription(label);
                event.setChecked(!mTileState);
            }
        }
!!!44553783.java!!!	onInitializeAccessibilityNodeInfo(inout info : AccessibilityNodeInfo) : void
        super.onInitializeAccessibilityNodeInfo(info);
        if (!TextUtils.isEmpty(mAccessibilityClass)) {
            info.setClassName(mAccessibilityClass);
            if (Switch.class.getName().equals(mAccessibilityClass)) {
                String label = getResources()
                        .getString(mTileState ? R.string.switch_bar_on : R.string.switch_bar_off);
                info.setText(label);
                info.setChecked(mTileState);
                info.setCheckable(true);
            }
        }
