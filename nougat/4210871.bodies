class TileServiceManager
!!!44575671.java!!!	TileServiceManager(inout tileServices : TileServices, inout handler : Handler, inout component : ComponentName, inout tile : Tile)
        this(tileServices, handler, new TileLifecycleManager(handler,
                tileServices.getContext(), tileServices, tile, new Intent().setComponent(component),
                new UserHandle(ActivityManager.getCurrentUser())));
!!!44575799.java!!!	TileServiceManager(inout tileServices : TileServices, inout handler : Handler, inout tileLifecycleManager : TileLifecycleManager)
        mServices = tileServices;
        mHandler = handler;
        mStateManager = tileLifecycleManager;

        IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
        filter.addDataScheme("package");
        Context context = mServices.getContext();
        context.registerReceiverAsUser(mUninstallReceiver,
                new UserHandle(ActivityManager.getCurrentUser()), filter, null, mHandler);
        ComponentName component = tileLifecycleManager.getComponent();
        if (!TileLifecycleManager.isTileAdded(context, component)) {
            TileLifecycleManager.setTileAdded(context, component, true);
            mStateManager.onTileAdded();
            mStateManager.flushMessagesAndUnbind();
        }
!!!44575927.java!!!	setTileChangeListener(inout changeListener : TileLifecycleManager::TileChangeListener) : void
        mStateManager.setTileChangeListener(changeListener);
!!!44576055.java!!!	isActiveTile() : boolean
        return mStateManager.isActiveTile();
!!!44576183.java!!!	setShowingDialog(inout dialog : boolean) : void
        mShowingDialog = dialog;
!!!44576311.java!!!	getTileService() : IQSTileService
        return mStateManager;
!!!44576439.java!!!	setBindRequested(inout bindRequested : boolean) : void
        if (mBindRequested == bindRequested) return;
        mBindRequested = bindRequested;
        if (mBindAllowed && mBindRequested && !mBound) {
            mHandler.removeCallbacks(mUnbind);
            bindService();
        } else {
            mServices.recalculateBindAllowance();
        }
        if (mBound && !mBindRequested) {
            mHandler.postDelayed(mUnbind, UNBIND_DELAY);
        }
!!!44576567.java!!!	setLastUpdate(in lastUpdate : long) : void
        mLastUpdate = lastUpdate;
        if (mBound && isActiveTile()) {
            mStateManager.onStopListening();
            setBindRequested(false);
        }
        mServices.recalculateBindAllowance();
!!!44576695.java!!!	handleDestroy() : void
        mServices.getContext().unregisterReceiver(mUninstallReceiver);
        mStateManager.handleDestroy();
!!!44576823.java!!!	setBindAllowed(inout allowed : boolean) : void
        if (mBindAllowed == allowed) return;
        mBindAllowed = allowed;
        if (!mBindAllowed && mBound) {
            unbindService();
        } else if (mBindAllowed && mBindRequested && !mBound) {
            bindService();
        }
!!!44576951.java!!!	hasPendingBind() : boolean
        return mPendingBind;
!!!44577079.java!!!	clearPendingBind() : void
        mPendingBind = false;
!!!44577207.java!!!	bindService() : void
        if (mBound) {
            Log.e(TAG, "Service already bound");
            return;
        }
        mPendingBind = true;
        mBound = true;
        mJustBound = true;
        mHandler.postDelayed(mJustBoundOver, MIN_BIND_TIME);
        mStateManager.setBindService(true);
!!!44577335.java!!!	unbindService() : void
        if (!mBound) {
            Log.e(TAG, "Service not bound");
            return;
        }
        mBound = false;
        mJustBound = false;
        mStateManager.setBindService(false);
!!!44577463.java!!!	calculateBindPriority(in currentTime : long) : void
        if (mStateManager.hasPendingClick()) {
            // Pending click is the most important thing, need to put this service at the top of
            // the list to be bound.
            mPriority = Integer.MAX_VALUE;
        } else if (mShowingDialog) {
            // Hang on to services that are showing dialogs so they don't die.
            mPriority = Integer.MAX_VALUE - 1;
        } else if (mJustBound) {
            // If we just bound, lets not thrash on binding/unbinding too much, this is second most
            // important.
            mPriority = Integer.MAX_VALUE - 2;
        } else if (!mBindRequested) {
            // Don't care about binding right now, put us last.
            mPriority = Integer.MIN_VALUE;
        } else {
            // Order based on whether this was just updated.
            long timeSinceUpdate = currentTime - mLastUpdate;
            // Fit compare into integer space for simplicity. Make sure to leave MAX_VALUE and
            // MAX_VALUE - 1 for the more important states above.
            if (timeSinceUpdate > Integer.MAX_VALUE - 3) {
                mPriority = Integer.MAX_VALUE - 3;
            } else {
                mPriority = (int) timeSinceUpdate;
            }
        }
!!!44577591.java!!!	getBindPriority() : int
        return mPriority;
