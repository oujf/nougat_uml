class CastTile
!!!44587575.java!!!	CastTile(inout host : QSTile::Host)
        super(host);
        mController = host.getCastController();
        mDetailAdapter = new CastDetailAdapter();
        mKeyguard = host.getKeyguardMonitor();
!!!44587703.java!!!	getDetailAdapter() : QSTile::DetailAdapter
        return mDetailAdapter;
!!!44587831.java!!!	newTileState() : QSTile::BooleanState
        return new BooleanState();
!!!44587959.java!!!	setListening(inout listening : boolean) : void
        if (mController == null) return;
        if (DEBUG) Log.d(TAG, "setListening " + listening);
        if (listening) {
            mController.addCallback(mCallback);
            mKeyguard.addCallback(mCallback);
        } else {
            mController.setDiscovering(false);
            mController.removeCallback(mCallback);
            mKeyguard.removeCallback(mCallback);
        }
!!!44588087.java!!!	handleUserSwitch(in newUserId : int) : void
        super.handleUserSwitch(newUserId);
        if (mController == null) return;
        mController.setCurrentUserId(newUserId);
!!!44588215.java!!!	getLongClickIntent() : Intent
        return new Intent(Settings.ACTION_CAST_SETTINGS);
!!!44588343.java!!!	handleClick() : void
        if (mKeyguard.isSecure() && !mKeyguard.canSkipBouncer()) {
            mHost.startRunnableDismissingKeyguard(new Runnable() {
                @Override
                public void run() {
                    MetricsLogger.action(mContext, getMetricsCategory());
                    showDetail(true);
                    mHost.openPanels();
                }
            });
            return;
        }
        MetricsLogger.action(mContext, getMetricsCategory());
        showDetail(true);
!!!44588471.java!!!	getTileLabel() : CharSequence
        return mContext.getString(R.string.quick_settings_cast_title);
!!!44588599.java!!!	handleUpdateState(inout state : QSTile::BooleanState, inout arg : Object) : void
        state.label = mContext.getString(R.string.quick_settings_cast_title);
        state.contentDescription = state.label;
        state.value = false;
        state.autoMirrorDrawable = false;
        final Set<CastDevice> devices = mController.getCastDevices();
        boolean connecting = false;
        for (CastDevice device : devices) {
            if (device.state == CastDevice.STATE_CONNECTED) {
                state.value = true;
                state.label = getDeviceName(device);
                state.contentDescription = state.contentDescription + "," +
                        mContext.getString(R.string.accessibility_cast_name, state.label);
            } else if (device.state == CastDevice.STATE_CONNECTING) {
                connecting = true;
            }
        }
        if (!state.value && connecting) {
            state.label = mContext.getString(R.string.quick_settings_connecting);
        }
        state.icon = ResourceIcon.get(state.value ? R.drawable.ic_qs_cast_on
                : R.drawable.ic_qs_cast_off);
        mDetailAdapter.updateItems(devices);
        state.minimalAccessibilityClassName = state.expandedAccessibilityClassName =
                Button.class.getName();
        state.contentDescription = state.contentDescription + ","
                + mContext.getString(R.string.accessibility_quick_settings_open_details);
!!!44588727.java!!!	getMetricsCategory() : int
        return MetricsEvent.QS_CAST;
!!!44588855.java!!!	composeChangeAnnouncement() : String
        if (!mState.value) {
            // We only announce when it's turned off to avoid vocal overflow.
            return mContext.getString(R.string.accessibility_casting_turned_off);
        }
        return null;
!!!44588983.java!!!	getDeviceName(inout device : CastController::CastDevice) : String
        return device.name != null ? device.name
                : mContext.getString(R.string.quick_settings_cast_device_default_name);
