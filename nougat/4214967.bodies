class HotspotTile
!!!44608183.java!!!	HotspotTile(inout host : QSTile::Host)
        super(host);
        mController = host.getHotspotController();
        mAirplaneMode = new GlobalSetting(mContext, mHandler, Global.AIRPLANE_MODE_ON) {
            @Override
            protected void handleValueChanged(int value) {
                refreshState();
            }
        };
!!!44608311.java!!!	isAvailable() : boolean
        return mController.isHotspotSupported();
!!!44608439.java!!!	handleDestroy() : void
        super.handleDestroy();
!!!44608567.java!!!	newTileState() : QSTile::AirplaneBooleanState
        return new AirplaneBooleanState();
!!!44608695.java!!!	setListening(inout listening : boolean) : void
        if (mListening == listening) return;
        mListening = listening;
        if (listening) {
            mController.addCallback(mCallback);
            final IntentFilter filter = new IntentFilter();
            filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);
            refreshState();
        } else {
            mController.removeCallback(mCallback);
        }
        mAirplaneMode.setListening(listening);
!!!44608823.java!!!	getLongClickIntent() : Intent
        return new Intent(Settings.ACTION_WIRELESS_SETTINGS);
!!!44608951.java!!!	handleClick() : void
        final boolean isEnabled = (Boolean) mState.value;
        if (!isEnabled && mAirplaneMode.getValue() != 0) {
            return;
        }
        MetricsLogger.action(mContext, getMetricsCategory(), !isEnabled);
        mController.setHotspotEnabled(!isEnabled);
!!!44609079.java!!!	getTileLabel() : CharSequence
        return mContext.getString(R.string.quick_settings_hotspot_label);
!!!44609207.java!!!	handleUpdateState(inout state : QSTile::AirplaneBooleanState, inout arg : Object) : void
        state.label = mContext.getString(R.string.quick_settings_hotspot_label);

        checkIfRestrictionEnforcedByAdminOnly(state, UserManager.DISALLOW_CONFIG_TETHERING);
        if (arg instanceof Boolean) {
            state.value = (boolean) arg;
        } else {
            state.value = mController.isHotspotEnabled();
        }
        state.icon = state.value ? mEnable : mDisable;
        boolean wasAirplane = state.isAirplaneMode;
        state.isAirplaneMode = mAirplaneMode.getValue() != 0;
        if (state.isAirplaneMode) {
            final int disabledColor = mHost.getContext().getColor(R.color.qs_tile_tint_unavailable);
            state.label = new SpannableStringBuilder().append(state.label,
                    new ForegroundColorSpan(disabledColor),
                    SpannableStringBuilder.SPAN_INCLUSIVE_INCLUSIVE);
            state.icon = mUnavailable;
        } else if (wasAirplane) {
            state.icon = mDisableNoAnimation;
        }
        state.minimalAccessibilityClassName = state.expandedAccessibilityClassName
                = Switch.class.getName();
        state.contentDescription = state.label;
!!!44609335.java!!!	getMetricsCategory() : int
        return MetricsEvent.QS_HOTSPOT;
!!!44609463.java!!!	composeChangeAnnouncement() : String
        if (mState.value) {
            return mContext.getString(R.string.accessibility_quick_settings_hotspot_changed_on);
        } else {
            return mContext.getString(R.string.accessibility_quick_settings_hotspot_changed_off);
        }
