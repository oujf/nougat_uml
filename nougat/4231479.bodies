class Utilities
!!!44672951.java!!!	findParent(inout v : View, inout parentClass : Class) : T
        ViewParent parent = v.getParent();
        while (parent != null) {
            if (parent.getClass().equals(parentClass)) {
                return (T) parent;
            }
            parent = parent.getParent();
        }
        return null;
!!!44673079.java!!!	objectToSet(inout obj : T, inout setOut : ArraySet) : ArraySet
        setOut.clear();
        if (obj != null) {
            setOut.add(obj);
        }
        return setOut;
!!!44673207.java!!!	arrayToSet(inout array : T, inout setOut : ArraySet) : ArraySet
        setOut.clear();
        if (array != null) {
            Collections.addAll(setOut, array);
        }
        return setOut;
!!!44673335.java!!!	clamp(in value : float, in min : float, in max : float) : float
        return Math.max(min, Math.min(max, value));
!!!44673463.java!!!	clamp(in value : int, in min : int, in max : int) : int
        return Math.max(min, Math.min(max, value));
!!!44673591.java!!!	clamp01(in value : float) : float
        return Math.max(0f, Math.min(1f, value));
!!!44673719.java!!!	mapRange(in value : float, in min : float, in max : float) : float
        return min + (value * (max - min));
!!!44673847.java!!!	unmapRange(in value : float, in min : float, in max : float) : float
        return (value - min) / (max - min);
!!!44673975.java!!!	scaleRectAboutCenter(inout r : RectF, in scale : float) : void
        if (scale != 1.0f) {
            float cx = r.centerX();
            float cy = r.centerY();
            r.offset(-cx, -cy);
            r.left *= scale;
            r.top *= scale;
            r.right *= scale;
            r.bottom *= scale;
            r.offset(cx, cy);
        }
!!!44674103.java!!!	computeContrastBetweenColors(in bg : int, in fg : int) : float
        float bgR = Color.red(bg) / 255f;
        float bgG = Color.green(bg) / 255f;
        float bgB = Color.blue(bg) / 255f;
        bgR = (bgR < 0.03928f) ? bgR / 12.92f : (float) Math.pow((bgR + 0.055f) / 1.055f, 2.4f);
        bgG = (bgG < 0.03928f) ? bgG / 12.92f : (float) Math.pow((bgG + 0.055f) / 1.055f, 2.4f);
        bgB = (bgB < 0.03928f) ? bgB / 12.92f : (float) Math.pow((bgB + 0.055f) / 1.055f, 2.4f);
        float bgL = 0.2126f * bgR + 0.7152f * bgG + 0.0722f * bgB;
        
        float fgR = Color.red(fg) / 255f;
        float fgG = Color.green(fg) / 255f;
        float fgB = Color.blue(fg) / 255f;
        fgR = (fgR < 0.03928f) ? fgR / 12.92f : (float) Math.pow((fgR + 0.055f) / 1.055f, 2.4f);
        fgG = (fgG < 0.03928f) ? fgG / 12.92f : (float) Math.pow((fgG + 0.055f) / 1.055f, 2.4f);
        fgB = (fgB < 0.03928f) ? fgB / 12.92f : (float) Math.pow((fgB + 0.055f) / 1.055f, 2.4f);
        float fgL = 0.2126f * fgR + 0.7152f * fgG + 0.0722f * fgB;

        return Math.abs((fgL + 0.05f) / (bgL + 0.05f));
!!!44674231.java!!!	getColorWithOverlay(in baseColor : int, in overlayColor : int, in overlayAlpha : float) : int
        return Color.rgb(
            (int) (overlayAlpha * Color.red(baseColor) +
                    (1f - overlayAlpha) * Color.red(overlayColor)),
            (int) (overlayAlpha * Color.green(baseColor) +
                    (1f - overlayAlpha) * Color.green(overlayColor)),
            (int) (overlayAlpha * Color.blue(baseColor) +
                    (1f - overlayAlpha) * Color.blue(overlayColor)));
!!!44674359.java!!!	cancelAnimationWithoutCallbacks(inout animator : Animator) : void
        if (animator != null && animator.isStarted()) {
            removeAnimationListenersRecursive(animator);
            animator.cancel();
        }
!!!44674487.java!!!	removeAnimationListenersRecursive(inout animator : Animator) : void
        if (animator instanceof AnimatorSet) {
            ArrayList<Animator> animators = ((AnimatorSet) animator).getChildAnimations();
            for (int i = animators.size() - 1; i >= 0; i--) {
                removeAnimationListenersRecursive(animators.get(i));
            }
        }
        animator.removeAllListeners();
!!!44674615.java!!!	setViewFrameFromTranslation(inout v : View) : void
        RectF taskViewRect = new RectF(v.getLeft(), v.getTop(), v.getRight(), v.getBottom());
        taskViewRect.offset(v.getTranslationX(), v.getTranslationY());
        v.setTranslationX(0);
        v.setTranslationY(0);
        v.setLeftTopRightBottom((int) taskViewRect.left, (int) taskViewRect.top,
                (int) taskViewRect.right, (int) taskViewRect.bottom);
!!!44674743.java!!!	findViewStubById(inout v : View, in stubId : int) : ViewStub
        return (ViewStub) v.findViewById(stubId);
!!!44674871.java!!!	findViewStubById(inout a : Activity, in stubId : int) : ViewStub
        return (ViewStub) a.findViewById(stubId);
!!!44674999.java!!!	matchTaskListSize(inout tasks : List<Task>, inout transforms : List<TaskViewTransform>) : void
        // We can reuse the task transforms where possible to reduce object allocation
        int taskTransformCount = transforms.size();
        int taskCount = tasks.size();
        if (taskTransformCount < taskCount) {
            // If there are less transforms than tasks, then add as many transforms as necessary
            for (int i = taskTransformCount; i < taskCount; i++) {
                transforms.add(new TaskViewTransform());
            }
        } else if (taskTransformCount > taskCount) {
            // If there are more transforms than tasks, then just subset the transform list
            transforms.subList(taskCount, taskTransformCount).clear();
        }
!!!44675127.java!!!	dpToPx(inout res : Resources, in dp : float) : float
        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, res.getDisplayMetrics());
!!!44675255.java!!!	addTraceEvent(inout event : String) : void
        Trace.traceBegin(Trace.TRACE_TAG_VIEW, event);
        Trace.traceEnd(Trace.TRACE_TAG_VIEW);
!!!44675383.java!!!	isDescendentAccessibilityFocused(inout v : View) : boolean
        if (v.isAccessibilityFocused()) {
            return true;
        }

        if (v instanceof ViewGroup) {
            ViewGroup vg = (ViewGroup) v;
            int childCount = vg.getChildCount();
            for (int i = 0; i < childCount; i++) {
                if (isDescendentAccessibilityFocused(vg.getChildAt(i))) {
                    return true;
                }
            }
        }
        return false;
!!!44675511.java!!!	getAppConfiguration(inout context : Context) : Configuration
        return context.getApplicationContext().getResources().getConfiguration();
!!!44675639.java!!!	dumpRect(inout r : Rect) : String
        if (r == null) {
            return "N:0,0-0,0";
        }
        return r.left + "," + r.top + "-" + r.right + "," + r.bottom;
