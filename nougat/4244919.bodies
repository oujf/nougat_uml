class ExpandableNotificationRow
!!!44827703.java!!!	isGroupExpansionChanging() : boolean
        if (isChildInGroup()) {
            return mNotificationParent.isGroupExpansionChanging();
        }
        return mGroupExpansionChanging;
!!!44827831.java!!!	setGroupExpansionChanging(inout changing : boolean) : void
        mGroupExpansionChanging = changing;
!!!44827959.java!!!	setActualHeightAnimating(inout animating : boolean) : void
        if (mPrivateLayout != null) {
            mPrivateLayout.setContentHeightAnimating(animating);
        }
!!!44828087.java!!!	getPrivateLayout() : NotificationContentView
        return mPrivateLayout;
!!!44828215.java!!!	getPublicLayout() : NotificationContentView
        return mPublicLayout;
!!!44828343.java!!!	setIconAnimationRunning(inout running : boolean) : void
        setIconAnimationRunning(running, mPublicLayout);
        setIconAnimationRunning(running, mPrivateLayout);
        if (mIsSummaryWithChildren) {
            setIconAnimationRunningForChild(running, mChildrenContainer.getHeaderView());
            List<ExpandableNotificationRow> notificationChildren =
                    mChildrenContainer.getNotificationChildren();
            for (int i = 0; i < notificationChildren.size(); i++) {
                ExpandableNotificationRow child = notificationChildren.get(i);
                child.setIconAnimationRunning(running);
            }
        }
        mIconAnimationRunning = running;
!!!44828471.java!!!	setIconAnimationRunning(inout running : boolean, inout layout : NotificationContentView) : void
        if (layout != null) {
            View contractedChild = layout.getContractedChild();
            View expandedChild = layout.getExpandedChild();
            View headsUpChild = layout.getHeadsUpChild();
            setIconAnimationRunningForChild(running, contractedChild);
            setIconAnimationRunningForChild(running, expandedChild);
            setIconAnimationRunningForChild(running, headsUpChild);
        }
!!!44828599.java!!!	setIconAnimationRunningForChild(inout running : boolean, inout child : View) : void
        if (child != null) {
            ImageView icon = (ImageView) child.findViewById(com.android.internal.R.id.icon);
            setIconRunning(icon, running);
            ImageView rightIcon = (ImageView) child.findViewById(
                    com.android.internal.R.id.right_icon);
            setIconRunning(rightIcon, running);
        }
!!!44828727.java!!!	setIconRunning(inout imageView : ImageView, inout running : boolean) : void
        if (imageView != null) {
            Drawable drawable = imageView.getDrawable();
            if (drawable instanceof AnimationDrawable) {
                AnimationDrawable animationDrawable = (AnimationDrawable) drawable;
                if (running) {
                    animationDrawable.start();
                } else {
                    animationDrawable.stop();
                }
            } else if (drawable instanceof AnimatedVectorDrawable) {
                AnimatedVectorDrawable animationDrawable = (AnimatedVectorDrawable) drawable;
                if (running) {
                    animationDrawable.start();
                } else {
                    animationDrawable.stop();
                }
            }
        }
!!!44828855.java!!!	onNotificationUpdated(inout entry : NotificationData::Entry) : void
        mEntry = entry;
        mStatusBarNotification = entry.notification;
        mPrivateLayout.onNotificationUpdated(entry);
        mPublicLayout.onNotificationUpdated(entry);
        mShowingPublicInitialized = false;
        updateNotificationColor();
        if (mIsSummaryWithChildren) {
            mChildrenContainer.recreateNotificationHeader(mExpandClickListener, mEntry.notification);
            mChildrenContainer.onNotificationUpdated();
        }
        if (mIconAnimationRunning) {
            setIconAnimationRunning(true);
        }
        if (mNotificationParent != null) {
            mNotificationParent.updateChildrenHeaderAppearance();
        }
        onChildrenCountChanged();
        // The public layouts expand button is always visible
        mPublicLayout.updateExpandButtons(true);
        updateLimits();
!!!44828983.java!!!	updateLimits() : void
        updateLimitsForView(mPrivateLayout);
        updateLimitsForView(mPublicLayout);
!!!44829111.java!!!	updateLimitsForView(inout layout : NotificationContentView) : void
        boolean customView = layout.getContractedChild().getId()
                != com.android.internal.R.id.status_bar_latest_event_content;
        boolean beforeN = mEntry.targetSdk < Build.VERSION_CODES.N;
        int minHeight = customView && beforeN && !mIsSummaryWithChildren ?
                mNotificationMinHeightLegacy : mNotificationMinHeight;
        boolean headsUpCustom = layout.getHeadsUpChild() != null &&
                layout.getHeadsUpChild().getId()
                        != com.android.internal.R.id.status_bar_latest_event_content;
        int headsUpheight = headsUpCustom && beforeN ? mMaxHeadsUpHeightLegacy
                : mMaxHeadsUpHeight;
        layout.setHeights(minHeight, headsUpheight, mNotificationMaxHeight);
!!!44829239.java!!!	getStatusBarNotification() : StatusBarNotification
        return mStatusBarNotification;
!!!44829367.java!!!	isHeadsUp() : boolean
        return mIsHeadsUp;
!!!44829495.java!!!	setHeadsUp(inout isHeadsUp : boolean) : void
        int intrinsicBefore = getIntrinsicHeight();
        mIsHeadsUp = isHeadsUp;
        mPrivateLayout.setHeadsUp(isHeadsUp);
        if (mIsSummaryWithChildren) {
            // The overflow might change since we allow more lines as HUN.
            mChildrenContainer.updateGroupOverflow();
        }
        if (intrinsicBefore != getIntrinsicHeight()) {
            notifyHeightChanged(false  /* needsAnimation */);
        }
!!!44829623.java!!!	setGroupManager(inout groupManager : NotificationGroupManager) : void
        mGroupManager = groupManager;
        mPrivateLayout.setGroupManager(groupManager);
!!!44829751.java!!!	setRemoteInputController(inout r : RemoteInputController) : void
        mPrivateLayout.setRemoteInputController(r);
!!!44829879.java!!!	setAppName(inout appName : String) : void
        mAppName = appName;
        if (mSettingsIconRow != null) {
            mSettingsIconRow.setAppName(mAppName);
        }
!!!44830007.java!!!	addChildNotification(inout row : ExpandableNotificationRow) : void
        addChildNotification(row, -1);
!!!44830135.java!!!	addChildNotification(inout row : ExpandableNotificationRow, in childIndex : int) : void
        if (mChildrenContainer == null) {
            mChildrenContainerStub.inflate();
        }
        mChildrenContainer.addNotification(row, childIndex);
        onChildrenCountChanged();
        row.setIsChildInGroup(true, this);
!!!44830263.java!!!	removeChildNotification(inout row : ExpandableNotificationRow) : void
        if (mChildrenContainer != null) {
            mChildrenContainer.removeNotification(row);
        }
        onChildrenCountChanged();
        row.setIsChildInGroup(false, null);
!!!44830391.java!!!	isChildInGroup() : boolean
        return mNotificationParent != null;
!!!44830519.java!!!	getNotificationParent() : ExpandableNotificationRow
        return mNotificationParent;
!!!44830647.java!!!	setIsChildInGroup(inout isChildInGroup : boolean, inout parent : ExpandableNotificationRow) : void
;
        boolean childInGroup = BaseStatusBar.ENABLE_CHILD_NOTIFICATIONS && isChildInGroup;
        mNotificationParent = childInGroup ? parent : null;
        mPrivateLayout.setIsChildInGroup(childInGroup);
        resetBackgroundAlpha();
        updateBackgroundForGroupState();
        updateClickAndFocus();
        if (mNotificationParent != null) {
            mNotificationParent.updateBackgroundForGroupState();
        }
!!!44830775.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        if (event.getActionMasked() != MotionEvent.ACTION_DOWN
                || !isChildInGroup() || isGroupExpanded()) {
            return super.onTouchEvent(event);
        } else {
            return false;
        }
!!!44830903.java!!!	handleSlideBack() : boolean
        if (mSettingsIconRow != null && mSettingsIconRow.isVisible()) {
            animateTranslateNotification(0 /* targetLeft */);
            return true;
        }
        return false;
!!!44831031.java!!!	shouldHideBackground() : boolean
        return super.shouldHideBackground() || mShowNoBackground;
!!!44831159.java!!!	isSummaryWithChildren() : boolean
        return mIsSummaryWithChildren;
!!!44831287.java!!!	areChildrenExpanded() : boolean
        return mChildrenExpanded;
!!!44831415.java!!!	getNotificationChildren() : ExpandableNotificationRow
        return mChildrenContainer == null ? null : mChildrenContainer.getNotificationChildren();
!!!44831543.java!!!	getNumberOfNotificationChildren() : int
        if (mChildrenContainer == null) {
            return 0;
        }
        return mChildrenContainer.getNotificationChildren().size();
!!!44831671.java!!!	applyChildOrder(inout childOrder : List<ExpandableNotificationRow>) : boolean
        return mChildrenContainer != null && mChildrenContainer.applyChildOrder(childOrder);
!!!44831799.java!!!	getChildrenStates(inout resultState : StackScrollState) : void
        if (mIsSummaryWithChildren) {
            StackViewState parentState = resultState.getViewStateForView(this);
            mChildrenContainer.getState(resultState, parentState);
        }
!!!44831927.java!!!	applyChildrenState(inout state : StackScrollState) : void
        if (mIsSummaryWithChildren) {
            mChildrenContainer.applyState(state);
        }
!!!44832055.java!!!	prepareExpansionChanged(inout state : StackScrollState) : void
        if (mIsSummaryWithChildren) {
            mChildrenContainer.prepareExpansionChanged(state);
        }
!!!44832183.java!!!	startChildAnimation(inout finalState : StackScrollState, inout stateAnimator : StackStateAnimator, in delay : long, in duration : long) : void
        if (mIsSummaryWithChildren) {
            mChildrenContainer.startAnimationToState(finalState, stateAnimator, delay,
                    duration);
        }
!!!44832311.java!!!	getViewAtPosition(in y : float) : ExpandableNotificationRow
        if (!mIsSummaryWithChildren || !mChildrenExpanded) {
            return this;
        } else {
            ExpandableNotificationRow view = mChildrenContainer.getViewAtPosition(y);
            return view == null ? this : view;
        }
!!!44832439.java!!!	getGuts() : NotificationGuts
        return mGuts;
!!!44832567.java!!!	setPinned(inout pinned : boolean) : void
        int intrinsicHeight = getIntrinsicHeight();
        mIsPinned = pinned;
        if (intrinsicHeight != getIntrinsicHeight()) {
            notifyHeightChanged(false);
        }
        if (pinned) {
            setIconAnimationRunning(true);
            mExpandedWhenPinned = false;
        } else if (mExpandedWhenPinned) {
            setUserExpanded(true);
        }
        setChronometerRunning(mLastChronometerRunning);
!!!44832695.java!!!	isPinned() : boolean
        return mIsPinned;
!!!44832823.java!!!	getPinnedHeadsUpHeight(inout atLeastMinHeight : boolean) : int
        if (mIsSummaryWithChildren) {
            return mChildrenContainer.getIntrinsicHeight();
        }
        if(mExpandedWhenPinned) {
            return Math.max(getMaxExpandHeight(), mHeadsUpHeight);
        } else if (atLeastMinHeight) {
            return Math.max(getCollapsedHeight(), mHeadsUpHeight);
        } else {
            return mHeadsUpHeight;
        }
!!!44832951.java!!!	setJustClicked(inout justClicked : boolean) : void
        mJustClicked = justClicked;
!!!44833079.java!!!	wasJustClicked() : boolean
        return mJustClicked;
!!!44833207.java!!!	setChronometerRunning(inout running : boolean) : void
        mLastChronometerRunning = running;
        setChronometerRunning(running, mPrivateLayout);
        setChronometerRunning(running, mPublicLayout);
        if (mChildrenContainer != null) {
            List<ExpandableNotificationRow> notificationChildren =
                    mChildrenContainer.getNotificationChildren();
            for (int i = 0; i < notificationChildren.size(); i++) {
                ExpandableNotificationRow child = notificationChildren.get(i);
                child.setChronometerRunning(running);
            }
        }
!!!44833335.java!!!	setChronometerRunning(inout running : boolean, inout layout : NotificationContentView) : void
        if (layout != null) {
            running = running || isPinned();
            View contractedChild = layout.getContractedChild();
            View expandedChild = layout.getExpandedChild();
            View headsUpChild = layout.getHeadsUpChild();
            setChronometerRunningForChild(running, contractedChild);
            setChronometerRunningForChild(running, expandedChild);
            setChronometerRunningForChild(running, headsUpChild);
        }
!!!44833463.java!!!	setChronometerRunningForChild(inout running : boolean, inout child : View) : void
        if (child != null) {
            View chronometer = child.findViewById(com.android.internal.R.id.chronometer);
            if (chronometer instanceof Chronometer) {
                ((Chronometer) chronometer).setStarted(running);
            }
        }
!!!44833591.java!!!	getNotificationHeader() : NotificationHeaderView
        if (mIsSummaryWithChildren) {
            return mChildrenContainer.getHeaderView();
        }
        return mPrivateLayout.getNotificationHeader();
!!!44833719.java!!!	getVisibleNotificationHeader() : NotificationHeaderView
        if (mIsSummaryWithChildren) {
            return mChildrenContainer.getHeaderView();
        }
        return getShowingLayout().getVisibleNotificationHeader();
!!!44833847.java!!!	setOnExpandClickListener(inout onExpandClickListener : ExpandableNotificationRow::OnExpandClickListener) : void
        mOnExpandClickListener = onExpandClickListener;
!!!44833975.java!!!	setOnClickListener(inout l : OnClickListener) : void
        super.setOnClickListener(l);
        mOnClickListener = l;
        updateClickAndFocus();
!!!44834103.java!!!	updateClickAndFocus() : void
        boolean normalChild = !isChildInGroup() || isGroupExpanded();
        boolean clickable = mOnClickListener != null && normalChild;
        if (isFocusable() != normalChild) {
            setFocusable(normalChild);
        }
        if (isClickable() != clickable) {
            setClickable(clickable);
        }
!!!44834231.java!!!	setHeadsUpManager(inout headsUpManager : HeadsUpManager) : void
        mHeadsUpManager = headsUpManager;
!!!44834359.java!!!	reInflateViews() : void
        initDimens();
        if (mIsSummaryWithChildren) {
            if (mChildrenContainer != null) {
                mChildrenContainer.reInflateViews(mExpandClickListener, mEntry.notification);
            }
        }
        if (mGuts != null) {
            View oldGuts = mGuts;
            int index = indexOfChild(oldGuts);
            removeView(oldGuts);
            mGuts = (NotificationGuts) LayoutInflater.from(mContext).inflate(
                    R.layout.notification_guts, this, false);
            mGuts.setVisibility(oldGuts.getVisibility());
            addView(mGuts, index);
        }
        if (mSettingsIconRow != null) {
            View oldSettings = mSettingsIconRow;
            int settingsIndex = indexOfChild(oldSettings);
            removeView(oldSettings);
            mSettingsIconRow = (NotificationSettingsIconRow) LayoutInflater.from(mContext).inflate(
                    R.layout.notification_settings_icon_row, this, false);
            mSettingsIconRow.setNotificationRowParent(ExpandableNotificationRow.this);
            mSettingsIconRow.setAppName(mAppName);
            mSettingsIconRow.setVisibility(oldSettings.getVisibility());
            addView(mSettingsIconRow, settingsIndex);

        }
        mPrivateLayout.reInflateViews();
        mPublicLayout.reInflateViews();
!!!44834487.java!!!	setContentBackground(in customBackgroundColor : int, inout animate : boolean, inout notificationContentView : NotificationContentView) : void
        if (getShowingLayout() == notificationContentView) {
            setTintColor(customBackgroundColor, animate);
        }
!!!44834615.java!!!	closeRemoteInput() : void
        mPrivateLayout.closeRemoteInput();
        mPublicLayout.closeRemoteInput();
!!!44834743.java!!!	setSingleLineWidthIndention(in indention : int) : void
        mPrivateLayout.setSingleLineWidthIndention(indention);
!!!44834871.java!!!	getNotificationColor() : int
        return mNotificationColor;
!!!44834999.java!!!	updateNotificationColor() : void
        mNotificationColor = NotificationColorUtil.resolveContrastColor(mContext,
                getStatusBarNotification().getNotification().color);
!!!44835127.java!!!	getSingleLineView() : HybridNotificationView
        return mPrivateLayout.getSingleLineView();
!!!44835255.java!!!	isOnKeyguard() : boolean
        return mOnKeyguard;
!!!44835383.java!!!	removeAllChildren() : void
        List<ExpandableNotificationRow> notificationChildren
                = mChildrenContainer.getNotificationChildren();
        ArrayList<ExpandableNotificationRow> clonedList = new ArrayList<>(notificationChildren);
        for (int i = 0; i < clonedList.size(); i++) {
            ExpandableNotificationRow row = clonedList.get(i);
            if (row.keepInParent()) {
                continue;
            }
            mChildrenContainer.removeNotification(row);
            row.setIsChildInGroup(false, null);
        }
        onChildrenCountChanged();
!!!44835511.java!!!	setForceUnlocked(inout forceUnlocked : boolean) : void
        mForceUnlocked = forceUnlocked;
        if (mIsSummaryWithChildren) {
            List<ExpandableNotificationRow> notificationChildren = getNotificationChildren();
            for (ExpandableNotificationRow child : notificationChildren) {
                child.setForceUnlocked(forceUnlocked);
            }
        }
!!!44835639.java!!!	setDismissed(inout dismissed : boolean, inout fromAccessibility : boolean) : void
        mDismissed = dismissed;
        mGroupParentWhenDismissed = mNotificationParent;
        mRefocusOnDismiss = fromAccessibility;
        mChildAfterViewWhenDismissed = null;
        if (isChildInGroup()) {
            List<ExpandableNotificationRow> notificationChildren =
                    mNotificationParent.getNotificationChildren();
            int i = notificationChildren.indexOf(this);
            if (i != -1 && i < notificationChildren.size() - 1) {
                mChildAfterViewWhenDismissed = notificationChildren.get(i + 1);
            }
        }
!!!44835767.java!!!	isDismissed() : boolean
        return mDismissed;
!!!44835895.java!!!	keepInParent() : boolean
        return mKeepInParent;
!!!44836023.java!!!	setKeepInParent(inout keepInParent : boolean) : void
        mKeepInParent = keepInParent;
!!!44836151.java!!!	isRemoved() : boolean
        return mRemoved;
!!!44836279.java!!!	setRemoved() : void
        mRemoved = true;

        mPrivateLayout.setRemoved();
!!!44836407.java!!!	getChildrenContainer() : NotificationChildrenContainer
        return mChildrenContainer;
!!!44836535.java!!!	setHeadsupDisappearRunning(inout running : boolean) : void
        mHeadsupDisappearRunning = running;
        mPrivateLayout.setHeadsupDisappearRunning(running);
!!!44836663.java!!!	getChildAfterViewWhenDismissed() : View
        return mChildAfterViewWhenDismissed;
!!!44836791.java!!!	getGroupParentWhenDismissed() : View
        return mGroupParentWhenDismissed;
!!!44836919.java!!!	performDismiss() : void
        mVetoButton.performClick();
!!!44837047.java!!!	setOnDismissListener(inout listener : OnClickListener) : void
        mVetoButton.setOnClickListener(listener);
!!!44837303.java!!!	ExpandableNotificationRow(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        mFalsingManager = FalsingManager.getInstance(context);
        initDimens();
!!!44837431.java!!!	initDimens() : void
        mNotificationMinHeightLegacy = getFontScaledHeight(R.dimen.notification_min_height_legacy);
        mNotificationMinHeight = getFontScaledHeight(R.dimen.notification_min_height);
        mNotificationMaxHeight = getFontScaledHeight(R.dimen.notification_max_height);
        mMaxHeadsUpHeightLegacy = getFontScaledHeight(
                R.dimen.notification_max_heads_up_height_legacy);
        mMaxHeadsUpHeight = getFontScaledHeight(R.dimen.notification_max_heads_up_height);
        mIncreasedPaddingBetweenElements = getResources()
                .getDimensionPixelSize(R.dimen.notification_divider_height_increased);
!!!44837559.java!!!	getFontScaledHeight(in dimenId : int) : int
        int dimensionPixelSize = getResources().getDimensionPixelSize(dimenId);
        float factor = Math.max(1.0f, getResources().getDisplayMetrics().scaledDensity /
                getResources().getDisplayMetrics().density);
        return (int) (dimensionPixelSize * factor);
!!!44837687.java!!!	reset() : void
        super.reset();
        final boolean wasExpanded = isExpanded();
        mExpandable = false;
        mHasUserChangedExpansion = false;
        mUserLocked = false;
        mShowingPublic = false;
        mSensitive = false;
        mShowingPublicInitialized = false;
        mIsSystemExpanded = false;
        mOnKeyguard = false;
        mPublicLayout.reset();
        mPrivateLayout.reset();
        resetHeight();
        resetTranslation();
        logExpansionEvent(false, wasExpanded);
!!!44837815.java!!!	resetHeight() : void
        mMaxExpandHeight = 0;
        mHeadsUpHeight = 0;
        onHeightReset();
        requestLayout();
!!!44837943.java!!!	onFinishInflate() : void
        super.onFinishInflate();
        mPublicLayout = (NotificationContentView) findViewById(R.id.expandedPublic);
        mPublicLayout.setContainingNotification(this);
        mPrivateLayout = (NotificationContentView) findViewById(R.id.expanded);
        mPrivateLayout.setExpandClickListener(mExpandClickListener);
        mPrivateLayout.setContainingNotification(this);
        mPublicLayout.setExpandClickListener(mExpandClickListener);
        mSettingsIconRowStub = (ViewStub) findViewById(R.id.settings_icon_row_stub);
        mSettingsIconRowStub.setOnInflateListener(new ViewStub.OnInflateListener() {
            @Override
            public void onInflate(ViewStub stub, View inflated) {
                mSettingsIconRow = (NotificationSettingsIconRow) inflated;
                mSettingsIconRow.setNotificationRowParent(ExpandableNotificationRow.this);
                mSettingsIconRow.setAppName(mAppName);
            }
        });
        mGutsStub = (ViewStub) findViewById(R.id.notification_guts_stub);
        mGutsStub.setOnInflateListener(new ViewStub.OnInflateListener() {
            @Override
            public void onInflate(ViewStub stub, View inflated) {
                mGuts = (NotificationGuts) inflated;
                mGuts.setClipTopAmount(getClipTopAmount());
                mGuts.setActualHeight(getActualHeight());
                mGutsStub = null;
            }
        });
        mChildrenContainerStub = (ViewStub) findViewById(R.id.child_container_stub);
        mChildrenContainerStub.setOnInflateListener(new ViewStub.OnInflateListener() {

            @Override
            public void onInflate(ViewStub stub, View inflated) {
                mChildrenContainer = (NotificationChildrenContainer) inflated;
                mChildrenContainer.setNotificationParent(ExpandableNotificationRow.this);
                mChildrenContainer.onNotificationUpdated();
                mTranslateableViews.add(mChildrenContainer);
            }
        });
        mVetoButton = findViewById(R.id.veto);
        mVetoButton.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);
        mVetoButton.setContentDescription(mContext.getString(
                R.string.accessibility_remove_notification));

        // Add the views that we translate to reveal the gear
        mTranslateableViews = new ArrayList<View>();
        for (int i = 0; i < getChildCount(); i++) {
            mTranslateableViews.add(getChildAt(i));
        }
        // Remove views that don't translate
        mTranslateableViews.remove(mVetoButton);
        mTranslateableViews.remove(mSettingsIconRowStub);
        mTranslateableViews.remove(mChildrenContainerStub);
        mTranslateableViews.remove(mGutsStub);
!!!44838071.java!!!	getVetoButton() : View
        return mVetoButton;
!!!44838199.java!!!	resetTranslation() : void
        if (mTranslateableViews != null) {
            for (int i = 0; i < mTranslateableViews.size(); i++) {
                mTranslateableViews.get(i).setTranslationX(0);
            }
        }
        invalidateOutline();
        if (mSettingsIconRow != null) {
            mSettingsIconRow.resetState();
        }
!!!44838327.java!!!	animateTranslateNotification(in leftTarget : float) : void
        if (mTranslateAnim != null) {
            mTranslateAnim.cancel();
        }
        mTranslateAnim = getTranslateViewAnimator(leftTarget, null /* updateListener */);
        if (mTranslateAnim != null) {
            mTranslateAnim.start();
        }
!!!44838455.java!!!	setTranslation(in translationX : float) : void
        if (areGutsExposed()) {
            // Don't translate if guts are showing.
            return;
        }
        // Translate the group of views
        for (int i = 0; i < mTranslateableViews.size(); i++) {
            if (mTranslateableViews.get(i) != null) {
                mTranslateableViews.get(i).setTranslationX(translationX);
            }
        }
        invalidateOutline();
        if (mSettingsIconRow != null) {
            mSettingsIconRow.updateSettingsIcons(translationX, getMeasuredWidth());
        }
!!!44838583.java!!!	getTranslation() : float
        if (mTranslateableViews != null && mTranslateableViews.size() > 0) {
            // All of the views in the list should have same translation, just use first one.
            return mTranslateableViews.get(0).getTranslationX();
        }
        return 0;
!!!44838711.java!!!	getTranslateViewAnimator(in leftTarget : float, inout listener : ValueAnimator::AnimatorUpdateListener) : Animator
        if (mTranslateAnim != null) {
            mTranslateAnim.cancel();
        }
        if (areGutsExposed()) {
            // No translation if guts are exposed.
            return null;
        }
        final ObjectAnimator translateAnim = ObjectAnimator.ofFloat(this, TRANSLATE_CONTENT,
                leftTarget);
        if (listener != null) {
            translateAnim.addUpdateListener(listener);
        }
        translateAnim.addListener(new AnimatorListenerAdapter() {
            boolean cancelled = false;

            @Override
            public void onAnimationCancel(Animator anim) {
                cancelled = true;
            }

            @Override
            public void onAnimationEnd(Animator anim) {
                if (!cancelled && mSettingsIconRow != null && leftTarget == 0) {
                    mSettingsIconRow.resetState();
                    mTranslateAnim = null;
                }
            }
        });
        mTranslateAnim = translateAnim;
        return translateAnim;
!!!44838839.java!!!	getSpaceForGear() : float
        if (mSettingsIconRow != null) {
            return mSettingsIconRow.getSpaceForGear();
        }
        return 0;
!!!44838967.java!!!	getSettingsRow() : NotificationSettingsIconRow
        if (mSettingsIconRow == null) {
            mSettingsIconRowStub.inflate();
        }
        return mSettingsIconRow;
!!!44839095.java!!!	inflateGuts() : void
        if (mGuts == null) {
            mGutsStub.inflate();
        }
!!!44839223.java!!!	updateChildrenVisibility() : void
        mPrivateLayout.setVisibility(!mShowingPublic && !mIsSummaryWithChildren ? VISIBLE
                : INVISIBLE);
        if (mChildrenContainer != null) {
            mChildrenContainer.setVisibility(!mShowingPublic && mIsSummaryWithChildren ? VISIBLE
                    : INVISIBLE);
            mChildrenContainer.updateHeaderVisibility(!mShowingPublic && mIsSummaryWithChildren
                    ? VISIBLE
                    : INVISIBLE);
        }
        // The limits might have changed if the view suddenly became a group or vice versa
        updateLimits();
!!!44839351.java!!!	onRequestSendAccessibilityEventInternal(inout child : View, inout event : AccessibilityEvent) : boolean
        if (super.onRequestSendAccessibilityEventInternal(child, event)) {
            // Add a record for the entire layout since its content is somehow small.
            // The event comes from a leaf view that is interacted with.
            AccessibilityEvent record = AccessibilityEvent.obtain();
            onInitializeAccessibilityEvent(record);
            dispatchPopulateAccessibilityEvent(record);
            event.appendRecord(record);
            return true;
        }
        return false;
!!!44839479.java!!!	setDark(inout dark : boolean, inout fade : boolean, in delay : long) : void
        super.setDark(dark, fade, delay);
        final NotificationContentView showing = getShowingLayout();
        if (showing != null) {
            showing.setDark(dark, fade, delay);
        }
        if (mIsSummaryWithChildren) {
            mChildrenContainer.setDark(dark, fade, delay);
        }
!!!44839607.java!!!	isExpandable() : boolean
        if (mIsSummaryWithChildren && !mShowingPublic) {
            return !mChildrenExpanded;
        }
        return mExpandable;
!!!44839735.java!!!	setExpandable(inout expandable : boolean) : void
        mExpandable = expandable;
        mPrivateLayout.updateExpandButtons(isExpandable());
!!!44839863.java!!!	setClipToActualHeight(inout clipToActualHeight : boolean) : void
        super.setClipToActualHeight(clipToActualHeight || isUserLocked());
        getShowingLayout().setClipToActualHeight(clipToActualHeight || isUserLocked());
!!!44839991.java!!!	hasUserChangedExpansion() : boolean
        return mHasUserChangedExpansion;
!!!44840119.java!!!	isUserExpanded() : boolean
        return mUserExpanded;
!!!44840247.java!!!	setUserExpanded(inout userExpanded : boolean) : void
        setUserExpanded(userExpanded, false /* allowChildExpansion */);
!!!44840375.java!!!	setUserExpanded(inout userExpanded : boolean, inout allowChildExpansion : boolean) : void
        mFalsingManager.setNotificationExpanded();
        if (mIsSummaryWithChildren && !mShowingPublic && allowChildExpansion) {
            final boolean wasExpanded = mGroupManager.isGroupExpanded(mStatusBarNotification);
            mGroupManager.setGroupExpanded(mStatusBarNotification, userExpanded);
            logExpansionEvent(true /* userAction */, wasExpanded);
            return;
        }
        if (userExpanded && !mExpandable) return;
        final boolean wasExpanded = isExpanded();
        mHasUserChangedExpansion = true;
        mUserExpanded = userExpanded;
        logExpansionEvent(true, wasExpanded);
!!!44840503.java!!!	resetUserExpansion() : void
        mHasUserChangedExpansion = false;
        mUserExpanded = false;
!!!44840631.java!!!	isUserLocked() : boolean
        return mUserLocked && !mForceUnlocked;
!!!44840759.java!!!	setUserLocked(inout userLocked : boolean) : void
        mUserLocked = userLocked;
        mPrivateLayout.setUserExpanding(userLocked);
        if (mIsSummaryWithChildren) {
            mChildrenContainer.setUserLocked(userLocked);
            if (userLocked || (!userLocked && !isGroupExpanded())) {
                updateBackgroundForGroupState();
            }
        }
!!!44840887.java!!!	isSystemExpanded() : boolean
        return mIsSystemExpanded;
!!!44841015.java!!!	setSystemExpanded(inout expand : boolean) : void
        if (expand != mIsSystemExpanded) {
            final boolean wasExpanded = isExpanded();
            mIsSystemExpanded = expand;
            notifyHeightChanged(false /* needsAnimation */);
            logExpansionEvent(false, wasExpanded);
            if (mIsSummaryWithChildren) {
                mChildrenContainer.updateGroupOverflow();
            }
        }
!!!44841143.java!!!	setOnKeyguard(inout onKeyguard : boolean) : void
        if (onKeyguard != mOnKeyguard) {
            final boolean wasExpanded = isExpanded();
            mOnKeyguard = onKeyguard;
            logExpansionEvent(false, wasExpanded);
            if (wasExpanded != isExpanded()) {
                if (mIsSummaryWithChildren) {
                    mChildrenContainer.updateGroupOverflow();
                }
                notifyHeightChanged(false /* needsAnimation */);
            }
        }
!!!44841271.java!!!	isClearable() : boolean
        return mStatusBarNotification != null && mStatusBarNotification.isClearable();
!!!44841399.java!!!	getIntrinsicHeight() : int
        if (isUserLocked()) {
            return getActualHeight();
        }
        if (mGuts != null && mGuts.areGutsExposed()) {
            return mGuts.getHeight();
        } else if ((isChildInGroup() && !isGroupExpanded())) {
            return mPrivateLayout.getMinHeight();
        } else if (mSensitive && mHideSensitiveForIntrinsicHeight) {
            return getMinHeight();
        } else if (mIsSummaryWithChildren && !mOnKeyguard) {
            return mChildrenContainer.getIntrinsicHeight();
        } else if (mIsHeadsUp || mHeadsupDisappearRunning) {
            if (isPinned() || mHeadsupDisappearRunning) {
                return getPinnedHeadsUpHeight(true /* atLeastMinHeight */);
            } else if (isExpanded()) {
                return Math.max(getMaxExpandHeight(), mHeadsUpHeight);
            } else {
                return Math.max(getCollapsedHeight(), mHeadsUpHeight);
            }
        } else if (isExpanded()) {
            return getMaxExpandHeight();
        } else {
            return getCollapsedHeight();
        }
!!!44841527.java!!!	isGroupExpanded() : boolean
        return mGroupManager.isGroupExpanded(mStatusBarNotification);
!!!44841655.java!!!	onChildrenCountChanged() : void
        mIsSummaryWithChildren = BaseStatusBar.ENABLE_CHILD_NOTIFICATIONS
                && mChildrenContainer != null && mChildrenContainer.getNotificationChildCount() > 0;
        if (mIsSummaryWithChildren && mChildrenContainer.getHeaderView() == null) {
            mChildrenContainer.recreateNotificationHeader(mExpandClickListener,
                    mEntry.notification);
        }
        getShowingLayout().updateBackgroundColor(false /* animate */);
        mPrivateLayout.updateExpandButtons(isExpandable());
        updateChildrenHeaderAppearance();
        updateChildrenVisibility();
!!!44841783.java!!!	updateChildrenHeaderAppearance() : void
        if (mIsSummaryWithChildren) {
            mChildrenContainer.updateChildrenHeaderAppearance();
        }
!!!44841911.java!!!	isExpanded() : boolean
        return isExpanded(false /* allowOnKeyguard */);
!!!44842039.java!!!	isExpanded(inout allowOnKeyguard : boolean) : boolean
        return (!mOnKeyguard || allowOnKeyguard)
                && (!hasUserChangedExpansion() && (isSystemExpanded() || isSystemChildExpanded())
                || isUserExpanded());
!!!44842167.java!!!	isSystemChildExpanded() : boolean
        return mIsSystemChildExpanded;
!!!44842295.java!!!	setSystemChildExpanded(inout expanded : boolean) : void
        mIsSystemChildExpanded = expanded;
!!!44842423.java!!!	onLayout(inout changed : boolean, in left : int, in top : int, in right : int, in bottom : int) : void
        super.onLayout(changed, left, top, right, bottom);
        updateMaxHeights();
        if (mSettingsIconRow != null) {
            mSettingsIconRow.updateVerticalLocation();
        }
!!!44842551.java!!!	updateMaxHeights() : void
        int intrinsicBefore = getIntrinsicHeight();
        View expandedChild = mPrivateLayout.getExpandedChild();
        if (expandedChild == null) {
            expandedChild = mPrivateLayout.getContractedChild();
        }
        mMaxExpandHeight = expandedChild.getHeight();
        View headsUpChild = mPrivateLayout.getHeadsUpChild();
        if (headsUpChild == null) {
            headsUpChild = mPrivateLayout.getContractedChild();
        }
        mHeadsUpHeight = headsUpChild.getHeight();
        if (intrinsicBefore != getIntrinsicHeight()) {
            notifyHeightChanged(false  /* needsAnimation */);
        }
!!!44842679.java!!!	notifyHeightChanged(inout needsAnimation : boolean) : void
        super.notifyHeightChanged(needsAnimation);
        getShowingLayout().requestSelectLayout(needsAnimation || isUserLocked());
!!!44842807.java!!!	setSensitive(inout sensitive : boolean, inout hideSensitive : boolean) : void
        mSensitive = sensitive;
        mSensitiveHiddenInGeneral = hideSensitive;
!!!44842935.java!!!	setHideSensitiveForIntrinsicHeight(inout hideSensitive : boolean) : void
        mHideSensitiveForIntrinsicHeight = hideSensitive;
        if (mIsSummaryWithChildren) {
            List<ExpandableNotificationRow> notificationChildren =
                    mChildrenContainer.getNotificationChildren();
            for (int i = 0; i < notificationChildren.size(); i++) {
                ExpandableNotificationRow child = notificationChildren.get(i);
                child.setHideSensitiveForIntrinsicHeight(hideSensitive);
            }
        }
!!!44843063.java!!!	setHideSensitive(inout hideSensitive : boolean, inout animated : boolean, in delay : long, in duration : long) : void
        boolean oldShowingPublic = mShowingPublic;
        mShowingPublic = mSensitive && hideSensitive;
        if (mShowingPublicInitialized && mShowingPublic == oldShowingPublic) {
            return;
        }

        // bail out if no public version
        if (mPublicLayout.getChildCount() == 0) return;

        if (!animated) {
            mPublicLayout.animate().cancel();
            mPrivateLayout.animate().cancel();
            if (mChildrenContainer != null) {
                mChildrenContainer.animate().cancel();
                mChildrenContainer.setAlpha(1f);
            }
            mPublicLayout.setAlpha(1f);
            mPrivateLayout.setAlpha(1f);
            mPublicLayout.setVisibility(mShowingPublic ? View.VISIBLE : View.INVISIBLE);
            updateChildrenVisibility();
        } else {
            animateShowingPublic(delay, duration);
        }
        NotificationContentView showingLayout = getShowingLayout();
        showingLayout.updateBackgroundColor(animated);
        mPrivateLayout.updateExpandButtons(isExpandable());
        mShowingPublicInitialized = true;
!!!44843191.java!!!	animateShowingPublic(in delay : long, in duration : long) : void
        View[] privateViews = mIsSummaryWithChildren
                ? new View[] {mChildrenContainer}
                : new View[] {mPrivateLayout};
        View[] publicViews = new View[] {mPublicLayout};
        View[] hiddenChildren = mShowingPublic ? privateViews : publicViews;
        View[] shownChildren = mShowingPublic ? publicViews : privateViews;
        for (final View hiddenView : hiddenChildren) {
            hiddenView.setVisibility(View.VISIBLE);
            hiddenView.animate().cancel();
            hiddenView.animate()
                    .alpha(0f)
                    .setStartDelay(delay)
                    .setDuration(duration)
                    .withEndAction(new Runnable() {
                        @Override
                        public void run() {
                            hiddenView.setVisibility(View.INVISIBLE);
                        }
                    });
        }
        for (View showView : shownChildren) {
            showView.setVisibility(View.VISIBLE);
            showView.setAlpha(0f);
            showView.animate().cancel();
            showView.animate()
                    .alpha(1f)
                    .setStartDelay(delay)
                    .setDuration(duration);
        }
!!!44843319.java!!!	mustStayOnScreen() : boolean
        return mIsHeadsUp;
!!!44843447.java!!!	canViewBeDismissed() : boolean
        return isClearable() && (!mShowingPublic || !mSensitiveHiddenInGeneral);
!!!44843575.java!!!	makeActionsVisibile() : void
        setUserExpanded(true, true);
        if (isChildInGroup()) {
            mGroupManager.setGroupExpanded(mStatusBarNotification, true);
        }
        notifyHeightChanged(false);
!!!44843703.java!!!	setChildrenExpanded(inout expanded : boolean, inout animate : boolean) : void
        mChildrenExpanded = expanded;
        if (mChildrenContainer != null) {
            mChildrenContainer.setChildrenExpanded(expanded);
        }
        updateBackgroundForGroupState();
        updateClickAndFocus();
!!!44843831.java!!!	applyTint(inout v : View, in color : int) : void
        int alpha;
        if (color != 0) {
            alpha = COLORED_DIVIDER_ALPHA;
        } else {
            color = 0xff000000;
            alpha = DEFAULT_DIVIDER_ALPHA;
        }
        if (v.getBackground() instanceof ColorDrawable) {
            ColorDrawable background = (ColorDrawable) v.getBackground();
            background.mutate();
            background.setColor(color);
            background.setAlpha(alpha);
        }
!!!44843959.java!!!	getMaxExpandHeight() : int
        return mMaxExpandHeight;
!!!44844087.java!!!	areGutsExposed() : boolean
        return (mGuts != null && mGuts.areGutsExposed());
!!!44844215.java!!!	isContentExpandable() : boolean
        NotificationContentView showingLayout = getShowingLayout();
        return showingLayout.isContentExpandable();
!!!44844343.java!!!	getContentView() : View
        if (mIsSummaryWithChildren) {
            return mChildrenContainer;
        }
        return getShowingLayout();
!!!44844471.java!!!	getExtraBottomPadding() : int
        if (mIsSummaryWithChildren && isGroupExpanded()) {
            return mIncreasedPaddingBetweenElements;
        }
        return 0;
!!!44844599.java!!!	setActualHeight(in height : int, inout notifyListeners : boolean) : void
        super.setActualHeight(height, notifyListeners);
        if (mGuts != null && mGuts.areGutsExposed()) {
            mGuts.setActualHeight(height);
            return;
        }
        int contentHeight = Math.max(getMinHeight(), height);
        mPrivateLayout.setContentHeight(contentHeight);
        mPublicLayout.setContentHeight(contentHeight);
        if (mIsSummaryWithChildren) {
            mChildrenContainer.setActualHeight(height);
        }
        if (mGuts != null) {
            mGuts.setActualHeight(height);
        }
!!!44844727.java!!!	getMaxContentHeight() : int
        if (mIsSummaryWithChildren && !mShowingPublic) {
            return mChildrenContainer.getMaxContentHeight();
        }
        NotificationContentView showingLayout = getShowingLayout();
        return showingLayout.getMaxHeight();
!!!44844855.java!!!	getMinHeight() : int
        if (mIsHeadsUp && mHeadsUpManager.isTrackingHeadsUp()) {
                return getPinnedHeadsUpHeight(false /* atLeastMinHeight */);
        } else if (mIsSummaryWithChildren && !isGroupExpanded() && !mShowingPublic) {
            return mChildrenContainer.getMinHeight();
        } else if (mIsHeadsUp) {
            return mHeadsUpHeight;
        }
        NotificationContentView showingLayout = getShowingLayout();
        return showingLayout.getMinHeight();
!!!44844983.java!!!	getCollapsedHeight() : int
        if (mIsSummaryWithChildren && !mShowingPublic) {
            return mChildrenContainer.getCollapsedHeight();
        }
        return getMinHeight();
!!!44845111.java!!!	setClipTopAmount(in clipTopAmount : int) : void
        super.setClipTopAmount(clipTopAmount);
        mPrivateLayout.setClipTopAmount(clipTopAmount);
        mPublicLayout.setClipTopAmount(clipTopAmount);
        if (mGuts != null) {
            mGuts.setClipTopAmount(clipTopAmount);
        }
!!!44845239.java!!!	isMaxExpandHeightInitialized() : boolean
        return mMaxExpandHeight != 0;
!!!44845367.java!!!	getShowingLayout() : NotificationContentView
        return mShowingPublic ? mPublicLayout : mPrivateLayout;
!!!44845495.java!!!	setShowingLegacyBackground(inout showing : boolean) : void
        super.setShowingLegacyBackground(showing);
        mPrivateLayout.setShowingLegacyBackground(showing);
        mPublicLayout.setShowingLegacyBackground(showing);
!!!44845623.java!!!	updateBackgroundTint() : void
        super.updateBackgroundTint();
        updateBackgroundForGroupState();
        if (mIsSummaryWithChildren) {
            List<ExpandableNotificationRow> notificationChildren =
                    mChildrenContainer.getNotificationChildren();
            for (int i = 0; i < notificationChildren.size(); i++) {
                ExpandableNotificationRow child = notificationChildren.get(i);
                child.updateBackgroundForGroupState();
            }
        }
!!!44845751.java!!!	onFinishedExpansionChange() : void
        mGroupExpansionChanging = false;
        updateBackgroundForGroupState();
!!!44845879.java!!!	updateBackgroundForGroupState() : void
        if (mIsSummaryWithChildren) {
            // Only when the group has finished expanding do we hide its background.
            mShowNoBackground = isGroupExpanded() && !isGroupExpansionChanging() && !isUserLocked();
            mChildrenContainer.updateHeaderForExpansion(mShowNoBackground);
            List<ExpandableNotificationRow> children = mChildrenContainer.getNotificationChildren();
            for (int i = 0; i < children.size(); i++) {
                children.get(i).updateBackgroundForGroupState();
            }
        } else if (isChildInGroup()) {
            final int childColor = getShowingLayout().getBackgroundColorForExpansionState();
            // Only show a background if the group is expanded OR if it is expanding / collapsing
            // and has a custom background color
            final boolean showBackground = isGroupExpanded()
                    || ((mNotificationParent.isGroupExpansionChanging()
                            || mNotificationParent.isUserLocked()) && childColor != 0);
            mShowNoBackground = !showBackground;
        } else {
            // Only children or parents ever need no background.
            mShowNoBackground = false;
        }
        updateOutline();
        updateBackground();
!!!44846007.java!!!	getPositionOfChild(inout childRow : ExpandableNotificationRow) : int
        if (mIsSummaryWithChildren) {
            return mChildrenContainer.getPositionInLinearLayout(childRow);
        }
        return 0;
!!!44846135.java!!!	setExpansionLogger(inout logger : ExpandableNotificationRow::ExpansionLogger, inout key : String) : void
        mLogger = logger;
        mLoggingKey = key;
!!!44846263.java!!!	onExpandedByGesture(inout userExpanded : boolean) : void
        int event = MetricsEvent.ACTION_NOTIFICATION_GESTURE_EXPANDER;
        if (mGroupManager.isSummaryOfGroup(getStatusBarNotification())) {
            event = MetricsEvent.ACTION_NOTIFICATION_GROUP_GESTURE_EXPANDER;
        }
        MetricsLogger.action(mContext, event, userExpanded);
!!!44846391.java!!!	getIncreasedPaddingAmount() : float
        if (mIsSummaryWithChildren) {
            if (isGroupExpanded()) {
                return 1.0f;
            } else if (isUserLocked()) {
                return mChildrenContainer.getGroupExpandFraction();
            }
        }
        return 0.0f;
!!!44846519.java!!!	disallowSingleClick(inout event : MotionEvent) : boolean
        float x = event.getX();
        float y = event.getY();
        NotificationHeaderView header = getVisibleNotificationHeader();
        if (header != null) {
            return header.isInTouchRect(x - getTranslation(), y);
        }
        return super.disallowSingleClick(event);
!!!44846647.java!!!	logExpansionEvent(inout userAction : boolean, inout wasExpanded : boolean) : void
        boolean nowExpanded = isExpanded();
        if (mIsSummaryWithChildren) {
            nowExpanded = mGroupManager.isGroupExpanded(mStatusBarNotification);
        }
        if (wasExpanded != nowExpanded && mLogger != null) {
            mLogger.logNotificationExpansion(mLoggingKey, userAction, nowExpanded) ;
        }
!!!44846775.java!!!	onInitializeAccessibilityNodeInfoInternal(inout info : AccessibilityNodeInfo) : void
        super.onInitializeAccessibilityNodeInfoInternal(info);
        if (canViewBeDismissed()) {
            info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_DISMISS);
        }
!!!44846903.java!!!	performAccessibilityActionInternal(in action : int, inout arguments : Bundle) : boolean
        if (super.performAccessibilityActionInternal(action, arguments)) {
            return true;
        }
        switch (action) {
            case AccessibilityNodeInfo.ACTION_DISMISS:
                NotificationStackScrollLayout.performDismiss(this, mGroupManager,
                        true /* fromAccessibility */);
                return true;
        }
        return false;
!!!44847031.java!!!	shouldRefocusOnDismiss() : boolean
        return mRefocusOnDismiss || isAccessibilityFocused();
