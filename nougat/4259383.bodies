class DozeScrimController
!!!44996919.java!!!	DozeScrimController(inout scrimController : ScrimController, inout context : Context)
        mScrimController = scrimController;
        mDozeParameters = new DozeParameters(context);
!!!44997047.java!!!	setDozing(inout dozing : boolean, inout animate : boolean) : void
        if (mDozing == dozing) return;
        mDozing = dozing;
        if (mDozing) {
            abortAnimations();
            mScrimController.setDozeBehindAlpha(1f);
            mScrimController.setDozeInFrontAlpha(1f);
        } else {
            cancelPulsing();
            if (animate) {
                startScrimAnimation(false /* inFront */, 0f /* target */,
                        NotificationPanelView.DOZE_ANIMATION_DURATION,
                        Interpolators.LINEAR_OUT_SLOW_IN);
                startScrimAnimation(true /* inFront */, 0f /* target */,
                        NotificationPanelView.DOZE_ANIMATION_DURATION,
                        Interpolators.LINEAR_OUT_SLOW_IN);
            } else {
                abortAnimations();
                mScrimController.setDozeBehindAlpha(0f);
                mScrimController.setDozeInFrontAlpha(0f);
            }
        }
!!!44997175.java!!!	pulse(inout callback : DozeHost::PulseCallback, in reason : int) : void
        if (callback == null) {
            throw new IllegalArgumentException("callback must not be null");
        }

        if (!mDozing || mPulseCallback != null) {
            // Pulse suppressed.
            callback.onPulseFinished();
            return;
        }

        // Begin pulse.  Note that it's very important that the pulse finished callback
        // be invoked when we're done so that the caller can drop the pulse wakelock.
        mPulseCallback = callback;
        mPulseReason = reason;
        mHandler.post(mPulseIn);
!!!44997303.java!!!	abortPulsing() : void
        cancelPulsing();
        if (mDozing) {
            mScrimController.setDozeBehindAlpha(1f);
            mScrimController.setDozeInFrontAlpha(1f);
        }
!!!44997431.java!!!	onScreenTurnedOn() : void
        if (isPulsing()) {
            final boolean pickup = mPulseReason == DozeLog.PULSE_REASON_SENSOR_PICKUP;
            startScrimAnimation(true /* inFront */, 0f,
                    mDozeParameters.getPulseInDuration(pickup),
                    pickup ? Interpolators.LINEAR_OUT_SLOW_IN : Interpolators.ALPHA_OUT,
                    mPulseInFinished);
        }
!!!44997559.java!!!	isPulsing() : boolean
        return mPulseCallback != null;
!!!44997687.java!!!	isDozing() : boolean
        return mDozing;
!!!44997815.java!!!	cancelPulsing() : void
        if (DEBUG) Log.d(TAG, "Cancel pulsing");

        if (mPulseCallback != null) {
            mHandler.removeCallbacks(mPulseIn);
            mHandler.removeCallbacks(mPulseOut);
            pulseFinished();
        }
!!!44997943.java!!!	pulseStarted() : void
        if (mPulseCallback != null) {
            mPulseCallback.onPulseStarted();
        }
!!!44998071.java!!!	pulseFinished() : void
        if (mPulseCallback != null) {
            mPulseCallback.onPulseFinished();
            mPulseCallback = null;
        }
!!!44998199.java!!!	abortAnimations() : void
        if (mInFrontAnimator != null) {
            mInFrontAnimator.cancel();
        }
        if (mBehindAnimator != null) {
            mBehindAnimator.cancel();
        }
!!!44998327.java!!!	startScrimAnimation(in inFront : boolean, in target : float, in duration : long, inout interpolator : Interpolator) : void
        startScrimAnimation(inFront, target, duration, interpolator, null /* endRunnable */);
!!!44998455.java!!!	startScrimAnimation(in inFront : boolean, in target : float, in duration : long, inout interpolator : Interpolator, in endRunnable : Runnable) : void
        Animator current = getCurrentAnimator(inFront);
        if (current != null) {
            float currentTarget = getCurrentTarget(inFront);
            if (currentTarget == target) {
                return;
            }
            current.cancel();
        }
        ValueAnimator anim = ValueAnimator.ofFloat(getDozeAlpha(inFront), target);
        anim.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                float value = (float) animation.getAnimatedValue();
                setDozeAlpha(inFront, value);
            }
        });
        anim.setInterpolator(interpolator);
        anim.setDuration(duration);
        anim.addListener(new AnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(Animator animation) {
                setCurrentAnimator(inFront, null);
                if (endRunnable != null) {
                    endRunnable.run();
                }
            }
        });
        anim.start();
        setCurrentAnimator(inFront, anim);
        setCurrentTarget(inFront, target);
!!!44998583.java!!!	getCurrentTarget(inout inFront : boolean) : float
        return inFront ? mInFrontTarget : mBehindTarget;
!!!44998711.java!!!	setCurrentTarget(inout inFront : boolean, in target : float) : void
        if (inFront) {
            mInFrontTarget = target;
        } else {
            mBehindTarget = target;
        }
!!!44998839.java!!!	getCurrentAnimator(inout inFront : boolean) : Animator
        return inFront ? mInFrontAnimator : mBehindAnimator;
!!!44998967.java!!!	setCurrentAnimator(inout inFront : boolean, inout animator : Animator) : void
        if (inFront) {
            mInFrontAnimator = animator;
        } else {
            mBehindAnimator = animator;
        }
!!!44999095.java!!!	setDozeAlpha(inout inFront : boolean, in alpha : float) : void
        if (inFront) {
            mScrimController.setDozeInFrontAlpha(alpha);
        } else {
            mScrimController.setDozeBehindAlpha(alpha);
        }
!!!44999223.java!!!	getDozeAlpha(inout inFront : boolean) : float
        return inFront
                ? mScrimController.getDozeInFrontAlpha()
                : mScrimController.getDozeBehindAlpha();
