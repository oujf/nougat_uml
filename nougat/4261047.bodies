class NotificationHeaderViewWrapper
!!!44975415.java!!!	NotificationHeaderViewWrapper(inout ctx : Context, inout view : View, inout row : ExpandableNotificationRow)
        super(view, row);
        mIconDarkAlpha = ctx.getResources().getInteger(R.integer.doze_small_icon_alpha);
        mInvertHelper = new ViewInvertHelper(ctx, NotificationPanelView.DOZE_ANIMATION_DURATION);
        mTransformationHelper = new ViewTransformationHelper();
        resolveHeaderViews();
        updateInvertHelper();
!!!44975543.java!!!	resolveHeaderViews() : void
        mIcon = (ImageView) mView.findViewById(com.android.internal.R.id.icon);
        mExpandButton = (ImageView) mView.findViewById(com.android.internal.R.id.expand_button);
        mColor = resolveColor(mExpandButton);
        mNotificationHeader = (NotificationHeaderView) mView.findViewById(
                com.android.internal.R.id.notification_header);
!!!44975671.java!!!	resolveColor(inout icon : ImageView) : int
        if (icon != null && icon.getDrawable() != null) {
            ColorFilter filter = icon.getDrawable().getColorFilter();
            if (filter instanceof PorterDuffColorFilter) {
                return ((PorterDuffColorFilter) filter).getColor();
            }
        }
        return 0;
!!!44975799.java!!!	notifyContentUpdated(inout notification : StatusBarNotification) : void
        super.notifyContentUpdated(notification);

        ArraySet<View> previousViews = mTransformationHelper.getAllTransformingViews();

        // Reinspect the notification.
        resolveHeaderViews();
        updateInvertHelper();
        updateTransformedTypes();
        addRemainingTransformTypes();
        updateCropToPaddingForImageViews();

        // We need to reset all views that are no longer transforming in case a view was previously
        // transformed, but now we decided to transform its container instead.
        ArraySet<View> currentViews = mTransformationHelper.getAllTransformingViews();
        for (int i = 0; i < previousViews.size(); i++) {
            View view = previousViews.valueAt(i);
            if (!currentViews.contains(view)) {
                mTransformationHelper.resetTransformedView(view);
            }
        }
!!!44975927.java!!!	addRemainingTransformTypes() : void
        mTransformationHelper.addRemainingTransformTypes(mView);
!!!44976055.java!!!	updateCropToPaddingForImageViews() : void
        Stack<View> stack = new Stack<>();
        stack.push(mView);
        while (!stack.isEmpty()) {
            View child = stack.pop();
            if (child instanceof ImageView) {
                ((ImageView) child).setCropToPadding(true);
            } else if (child instanceof ViewGroup){
                ViewGroup group = (ViewGroup) child;
                for (int i = 0; i < group.getChildCount(); i++) {
                    stack.push(group.getChildAt(i));
                }
            }
        }
!!!44976183.java!!!	updateInvertHelper() : void
        mInvertHelper.clearTargets();
        for (int i = 0; i < mNotificationHeader.getChildCount(); i++) {
            View child = mNotificationHeader.getChildAt(i);
            if (child != mIcon) {
                mInvertHelper.addTarget(child);
            }
        }
!!!44976311.java!!!	updateTransformedTypes() : void
        mTransformationHelper.reset();
        mTransformationHelper.addTransformedView(TransformableView.TRANSFORMING_VIEW_HEADER,
                mNotificationHeader);
!!!44976439.java!!!	setDark(inout dark : boolean, inout fade : boolean, in delay : long) : void
        if (dark == mDark && mDarkInitialized) {
            return;
        }
        super.setDark(dark, fade, delay);
        if (fade) {
            mInvertHelper.fade(dark, delay);
        } else {
            mInvertHelper.update(dark);
        }
        if (mIcon != null && !mRow.isChildInGroup()) {
            // We don't update the color for children views / their icon is invisible anyway.
            // It also may lead to bugs where the icon isn't correctly greyed out.
            boolean hadColorFilter = mNotificationHeader.getOriginalIconColor()
                    != NotificationHeaderView.NO_COLOR;
            if (fade) {
                if (hadColorFilter) {
                    fadeIconColorFilter(mIcon, dark, delay);
                    fadeIconAlpha(mIcon, dark, delay);
                } else {
                    fadeGrayscale(mIcon, dark, delay);
                }
            } else {
                if (hadColorFilter) {
                    updateIconColorFilter(mIcon, dark);
                    updateIconAlpha(mIcon, dark);
                } else {
                    updateGrayscale(mIcon, dark);
                }
            }
        }
!!!44976567.java!!!	fadeIconColorFilter(in target : ImageView, inout dark : boolean, in delay : long) : void
        startIntensityAnimation(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                updateIconColorFilter(target, (Float) animation.getAnimatedValue());
            }
        }, dark, delay, null /* listener */);
!!!44976695.java!!!	fadeIconAlpha(in target : ImageView, inout dark : boolean, in delay : long) : void
        startIntensityAnimation(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                float t = (float) animation.getAnimatedValue();
                target.setImageAlpha((int) (255 * (1f - t) + mIconDarkAlpha * t));
            }
        }, dark, delay, null /* listener */);
!!!44976823.java!!!	fadeGrayscale(in target : ImageView, in dark : boolean, in delay : long) : void
        startIntensityAnimation(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                updateGrayscaleMatrix((float) animation.getAnimatedValue());
                target.setColorFilter(new ColorMatrixColorFilter(mGrayscaleColorMatrix));
            }
        }, dark, delay, new AnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(Animator animation) {
                if (!dark) {
                    target.setColorFilter(null);
                }
            }
        });
!!!44976951.java!!!	updateIconColorFilter(inout target : ImageView, inout dark : boolean) : void
        updateIconColorFilter(target, dark ? 1f : 0f);
!!!44977079.java!!!	updateIconColorFilter(inout target : ImageView, in intensity : float) : void
        int color = interpolateColor(mColor, mIconDarkColor, intensity);
        mIconColorFilter.setColor(color);
        Drawable iconDrawable = target.getDrawable();

        // Also, the notification might have been modified during the animation, so background
        // might be null here.
        if (iconDrawable != null) {
            iconDrawable.mutate().setColorFilter(mIconColorFilter);
        }
!!!44977207.java!!!	updateIconAlpha(inout target : ImageView, inout dark : boolean) : void
        target.setImageAlpha(dark ? mIconDarkAlpha : 255);
!!!44977335.java!!!	updateGrayscale(inout target : ImageView, inout dark : boolean) : void
        if (dark) {
            updateGrayscaleMatrix(1f);
            target.setColorFilter(new ColorMatrixColorFilter(mGrayscaleColorMatrix));
        } else {
            target.setColorFilter(null);
        }
!!!44977463.java!!!	updateExpandability(inout expandable : boolean, inout onClickListener : View::OnClickListener) : void
        mExpandButton.setVisibility(expandable ? View.VISIBLE : View.GONE);
        mNotificationHeader.setOnClickListener(expandable ? onClickListener : null);
!!!44977591.java!!!	interpolateColor(in source : int, in target : int, in t : float) : int
        int aSource = Color.alpha(source);
        int rSource = Color.red(source);
        int gSource = Color.green(source);
        int bSource = Color.blue(source);
        int aTarget = Color.alpha(target);
        int rTarget = Color.red(target);
        int gTarget = Color.green(target);
        int bTarget = Color.blue(target);
        return Color.argb(
                (int) (aSource * (1f - t) + aTarget * t),
                (int) (rSource * (1f - t) + rTarget * t),
                (int) (gSource * (1f - t) + gTarget * t),
                (int) (bSource * (1f - t) + bTarget * t));
!!!44977719.java!!!	getNotificationHeader() : NotificationHeaderView
        return mNotificationHeader;
!!!44977847.java!!!	getCurrentState(in fadingView : int) : TransformState
        return mTransformationHelper.getCurrentState(fadingView);
!!!44977975.java!!!	transformTo(inout notification : TransformableView, inout endRunnable : Runnable) : void
        mTransformationHelper.transformTo(notification, endRunnable);
!!!44978103.java!!!	transformTo(inout notification : TransformableView, in transformationAmount : float) : void
        mTransformationHelper.transformTo(notification, transformationAmount);
!!!44978231.java!!!	transformFrom(inout notification : TransformableView) : void
        mTransformationHelper.transformFrom(notification);
!!!44978359.java!!!	transformFrom(inout notification : TransformableView, in transformationAmount : float) : void
        mTransformationHelper.transformFrom(notification, transformationAmount);
!!!44978487.java!!!	setVisible(inout visible : boolean) : void
        super.setVisible(visible);
        mTransformationHelper.setVisible(visible);
