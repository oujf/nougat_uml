class NotificationMessagingTemplateViewWrapper
!!!44982967.java!!!	NotificationMessagingTemplateViewWrapper(inout ctx : Context, inout view : View, inout row : ExpandableNotificationRow)
        super(ctx, view, row);
!!!44983095.java!!!	resolveViews() : void
        mContractedMessage = null;

        View container = mView.findViewById(com.android.internal.R.id.notification_messaging);
        if (container instanceof MessagingLinearLayout
                && ((MessagingLinearLayout) container).getChildCount() > 0) {
            MessagingLinearLayout messagingContainer = (MessagingLinearLayout) container;

            // Only consider the first child - transforming to a position other than the first
            // looks bad because we have to move across other messages that are fading in.
            View child = messagingContainer.getChildAt(0);
            if (child.getId() == messagingContainer.getContractedChildId()) {
                mContractedMessage = child;
            }
        }
!!!44983223.java!!!	notifyContentUpdated(inout notification : StatusBarNotification) : void
        // Reinspect the notification. Before the super call, because the super call also updates
        // the transformation types and we need to have our values set by then.
        resolveViews();
        super.notifyContentUpdated(notification);
!!!44983351.java!!!	updateTransformedTypes() : void
        // This also clears the existing types
        super.updateTransformedTypes();
        if (mContractedMessage != null) {
            mTransformationHelper.addTransformedView(TransformableView.TRANSFORMING_VIEW_TEXT,
                    mContractedMessage);
        }
