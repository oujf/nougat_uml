class CalibrateDialog
!!!45279287.java!!!	show(inout fragment : ColorAndAppearanceFragment) : void
            CalibrateDialog dialog = new CalibrateDialog();
            dialog.setTargetFragment(fragment, 0);
            dialog.show(fragment.getFragmentManager(), "Calibrate");
!!!45279415.java!!!	onCreate(inout savedInstanceState : Bundle) : void
            super.onCreate(savedInstanceState);
            mNightModeController = new NightModeController(getContext());
            String customValues = mNightModeController.getCustomValues();
            if (customValues == null) {
                // Generate this as a string because its the easiest way to generate a copy of the
                // identity.
                customValues = NightModeController.toString(NightModeController.IDENTITY_MATRIX);
            }
            mValues = NightModeController.toValues(customValues);
!!!45279543.java!!!	onCreateDialog(inout savedInstanceState : Bundle) : Dialog
            View v = LayoutInflater.from(getContext()).inflate(R.layout.calibrate_sliders, null);
            bindView(v.findViewById(R.id.r_group), 0);
            bindView(v.findViewById(R.id.g_group), 5);
            bindView(v.findViewById(R.id.b_group), 10);
            MetricsLogger.visible(getContext(), MetricsEvent.TUNER_CALIBRATE_DISPLAY);
            return new AlertDialog.Builder(getContext())
                    .setTitle(R.string.calibrate_display)
                    .setView(v)
                    .setPositiveButton(R.string.color_apply, this)
                    .setNegativeButton(android.R.string.cancel, null)
                    .create();
!!!45279671.java!!!	onDismiss(inout dialog : DialogInterface) : void
            super.onDismiss(dialog);
            MetricsLogger.hidden(getContext(), MetricsEvent.TUNER_CALIBRATE_DISPLAY);
!!!45279799.java!!!	bindView(inout view : View, in index : int) : void
            SeekBar seekBar = (SeekBar) view.findViewById(com.android.internal.R.id.seekbar);
            seekBar.setMax(1000);
            seekBar.setProgress((int) (1000 * mValues[index]));
            seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
                @Override
                public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                    mValues[index] = progress / 1000f;
                }

                @Override
                public void onStartTrackingTouch(SeekBar seekBar) {
                }

                @Override
                public void onStopTrackingTouch(SeekBar seekBar) {
                }
            });
!!!45279927.java!!!	onClick(inout dialog : DialogInterface, in which : int) : void
            if (mValues[0] == 1 && mValues[5] == 1 && mValues[10] == 1) {
                // Allow removal of matrix by all values set to highest.
                mNightModeController.setCustomValues(null);
                return;
            }
            ((ColorAndAppearanceFragment) getTargetFragment()).startRevertTimer();
            Settings.Secure.putString(getContext().getContentResolver(),
                    Settings.Secure.ACCESSIBILITY_DISPLAY_COLOR_MATRIX,
                    NightModeController.toString(mValues));
            RevertWarning.show((ColorAndAppearanceFragment) getTargetFragment());
