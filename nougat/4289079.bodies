class NetworkControllerBaseTest
!!!45373495.java!!!	setUp() : void
        super.setUp();

        mMockWm = mock(WifiManager.class);
        mMockTm = mock(TelephonyManager.class);
        mMockSm = mock(SubscriptionManager.class);
        mMockCm = mock(ConnectivityManager.class);
        mMockSubDefaults = mock(SubscriptionDefaults.class);
        mNetCapabilities = new NetworkCapabilities();
        when(mMockCm.isNetworkSupported(ConnectivityManager.TYPE_MOBILE)).thenReturn(true);
        when(mMockCm.getDefaultNetworkCapabilitiesForUser(0)).thenReturn(
                new NetworkCapabilities[] { mNetCapabilities });

        mSignalStrength = mock(SignalStrength.class);
        mServiceState = mock(ServiceState.class);

        mConfig = new Config();
        mConfig.hspaDataDistinguishable = true;
        mCallbackHandler = mock(CallbackHandler.class);
        mNetworkController = new NetworkControllerImpl(mContext, mMockCm, mMockTm, mMockWm, mMockSm,
                mConfig, Looper.getMainLooper(), mCallbackHandler,
                mock(AccessPointControllerImpl.class), mock(DataUsageController.class),
                mMockSubDefaults);
        setupNetworkController();

        // Trigger blank callbacks to always get the current state (some tests don't trigger
        // changes from default state).
        mNetworkController.addSignalCallback(mock(SignalCallback.class));
        mNetworkController.addEmergencyListener(null);
!!!45373623.java!!!	setupNetworkController() : void
        // For now just pretend to be the data sim, so we can test that too.
        mSubId = SubscriptionManager.DEFAULT_SUBSCRIPTION_ID;
        when(mMockTm.getDataEnabled(mSubId)).thenReturn(true);
        setDefaultSubId(mSubId);
        setSubscriptions(mSubId);
        mNetworkController.handleSetUserSetupComplete(true);
        mMobileSignalController = mNetworkController.mMobileSignalControllers.get(mSubId);
        mPhoneStateListener = mMobileSignalController.mPhoneStateListener;
!!!45373751.java!!!	setDefaultSubId(in subId : int) : void
        when(mMockSubDefaults.getDefaultDataSubId()).thenReturn(subId);
        when(mMockSubDefaults.getDefaultVoiceSubId()).thenReturn(subId);
!!!45373879.java!!!	setSubscriptions(inout  : int...subIds) : void
        List<SubscriptionInfo> subs = new ArrayList<SubscriptionInfo>();
        for (int subId : subIds) {
            SubscriptionInfo subscription = mock(SubscriptionInfo.class);
            when(subscription.getSubscriptionId()).thenReturn(subId);
            subs.add(subscription);
        }
        when(mMockSm.getActiveSubscriptionInfoList()).thenReturn(subs);
        mNetworkController.doUpdateMobileControllers();
!!!45374007.java!!!	setUpNoMobileData() : NetworkControllerImpl
      when(mMockCm.isNetworkSupported(ConnectivityManager.TYPE_MOBILE)).thenReturn(false);
      NetworkControllerImpl networkControllerNoMobile
              = new NetworkControllerImpl(mContext, mMockCm, mMockTm, mMockWm, mMockSm,
                        mConfig, Looper.getMainLooper(), mCallbackHandler,
                        mock(AccessPointControllerImpl.class),
                        mock(DataUsageController.class), mMockSubDefaults);

      setupNetworkController();

      return networkControllerNoMobile;

!!!45374135.java!!!	tearDown() : void
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        mNetworkController.dump(null, pw, null);
        pw.flush();
        Log.d(TAG, sw.toString());
        super.tearDown();
!!!45374263.java!!!	setupDefaultSignal() : void
        setIsGsm(true);
        setVoiceRegState(ServiceState.STATE_IN_SERVICE);
        setGsmRoaming(false);
        setLevel(DEFAULT_LEVEL);
        updateDataConnectionState(TelephonyManager.DATA_CONNECTED,
                TelephonyManager.NETWORK_TYPE_UMTS);
        setConnectivity(NetworkCapabilities.TRANSPORT_CELLULAR, true, true);
!!!45374391.java!!!	setConnectivity(in networkType : int, inout inetCondition : boolean, inout isConnected : boolean) : void
        Intent i = new Intent(ConnectivityManager.INET_CONDITION_ACTION);
        // TODO: Separate out into several NetworkCapabilities.
        if (isConnected) {
            mNetCapabilities.addTransportType(networkType);
        } else {
            mNetCapabilities.removeTransportType(networkType);
        }
        if (inetCondition) {
            mNetCapabilities.addCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED);
        } else {
            mNetCapabilities.removeCapability(NetworkCapabilities.NET_CAPABILITY_VALIDATED);
        }

        mNetworkController.onReceive(mContext, i);
!!!45374519.java!!!	setGsmRoaming(inout isRoaming : boolean) : void
        when(mServiceState.getRoaming()).thenReturn(isRoaming);
        updateServiceState();
!!!45374647.java!!!	setCdmaRoaming(inout isRoaming : boolean) : void
        when(mServiceState.getCdmaEriIconIndex()).thenReturn(isRoaming ?
                EriInfo.ROAMING_INDICATOR_ON : EriInfo.ROAMING_INDICATOR_OFF);
        when(mServiceState.getCdmaEriIconMode()).thenReturn(isRoaming ?
                EriInfo.ROAMING_ICON_MODE_NORMAL : -1);
        updateServiceState();
!!!45374775.java!!!	setVoiceRegState(in voiceRegState : int) : void
        when(mServiceState.getVoiceRegState()).thenReturn(voiceRegState);
        updateServiceState();
!!!45374903.java!!!	setDataRegState(in dataRegState : int) : void
        when(mServiceState.getDataRegState()).thenReturn(dataRegState);
        updateServiceState();
!!!45375031.java!!!	setIsEmergencyOnly(inout isEmergency : boolean) : void
        when(mServiceState.isEmergencyOnly()).thenReturn(isEmergency);
        updateServiceState();
!!!45375159.java!!!	setCdmaLevel(in level : int) : void
        when(mSignalStrength.getCdmaLevel()).thenReturn(level);
        updateSignalStrength();
!!!45375287.java!!!	setLevel(in level : int) : void
        when(mSignalStrength.getLevel()).thenReturn(level);
        updateSignalStrength();
!!!45375415.java!!!	setIsGsm(inout gsm : boolean) : void
        when(mSignalStrength.isGsm()).thenReturn(gsm);
        updateSignalStrength();
!!!45375543.java!!!	setCdmaEri(in index : int, in mode : int) : void
        // TODO: Figure this out.
!!!45375671.java!!!	updateSignalStrength() : void
        Log.d(TAG, "Sending Signal Strength: " + mSignalStrength);
        mPhoneStateListener.onSignalStrengthsChanged(mSignalStrength);
!!!45375799.java!!!	updateServiceState() : void
        Log.d(TAG, "Sending Service State: " + mServiceState);
        mPhoneStateListener.onServiceStateChanged(mServiceState);
!!!45375927.java!!!	updateCallState(in state : int) : void
        // Inputs not currently used in NetworkControllerImpl.
        mPhoneStateListener.onCallStateChanged(state, "0123456789");
!!!45376055.java!!!	updateDataConnectionState(in dataState : int, in dataNetType : int) : void
        when(mServiceState.getDataNetworkType()).thenReturn(dataNetType);
        mPhoneStateListener.onDataConnectionStateChanged(dataState, dataNetType);
!!!45376183.java!!!	updateDataActivity(in dataActivity : int) : void
        mPhoneStateListener.onDataActivity(dataActivity);
!!!45376311.java!!!	setCarrierNetworkChange(inout enable : boolean) : void
        Log.d(TAG, "setCarrierNetworkChange(" + enable + ")");
        mPhoneStateListener.onCarrierNetworkChange(enable);
!!!45376439.java!!!	verifyHasNoSims(inout hasNoSimsVisible : boolean) : void
        ArgumentCaptor<Boolean> hasNoSimsArg = ArgumentCaptor.forClass(Boolean.class);

        Mockito.verify(mCallbackHandler, Mockito.atLeastOnce()).setNoSims(hasNoSimsArg.capture());
        assertEquals("No sims", hasNoSimsVisible, (boolean) hasNoSimsArg.getValue());
!!!45376567.java!!!	verifyLastQsMobileDataIndicators(inout visible : boolean, in icon : int, in typeIcon : int, inout dataIn : boolean, inout dataOut : boolean) : void
        ArgumentCaptor<IconState> iconArg = ArgumentCaptor.forClass(IconState.class);
        ArgumentCaptor<Integer> typeIconArg = ArgumentCaptor.forClass(Integer.class);
        ArgumentCaptor<Boolean> dataInArg = ArgumentCaptor.forClass(Boolean.class);
        ArgumentCaptor<Boolean> dataOutArg = ArgumentCaptor.forClass(Boolean.class);

        Mockito.verify(mCallbackHandler, Mockito.atLeastOnce()).setMobileDataIndicators(
                    ArgumentCaptor.forClass(IconState.class).capture(),
                    iconArg.capture(),
                    ArgumentCaptor.forClass(Integer.class).capture(),
                    typeIconArg.capture(), dataInArg.capture(), dataOutArg.capture(),
                    ArgumentCaptor.forClass(String.class).capture(),
                    ArgumentCaptor.forClass(String.class).capture(),
                    ArgumentCaptor.forClass(Boolean.class).capture(),
                    ArgumentCaptor.forClass(Integer.class).capture());
        IconState iconState = iconArg.getValue();
        assertEquals("Visibility in, quick settings", visible, iconState.visible);
        assertEquals("Signal icon in, quick settings", icon, iconState.icon);
        assertEquals("Data icon in, quick settings", typeIcon, (int) typeIconArg.getValue());
        assertEquals("Data direction in, in quick settings", dataIn,
                (boolean) dataInArg.getValue());
        assertEquals("Data direction out, in quick settings", dataOut,
                (boolean) dataOutArg.getValue());
!!!45376695.java!!!	verifyLastMobileDataIndicators(inout visible : boolean, in icon : int, in typeIcon : int) : void
        ArgumentCaptor<IconState> iconArg = ArgumentCaptor.forClass(IconState.class);
        ArgumentCaptor<Integer> typeIconArg = ArgumentCaptor.forClass(Integer.class);

        // TODO: Verify all fields.
        Mockito.verify(mCallbackHandler, Mockito.atLeastOnce()).setMobileDataIndicators(
                iconArg.capture(),
                ArgumentCaptor.forClass(IconState.class).capture(),
                typeIconArg.capture(),
                ArgumentCaptor.forClass(Integer.class).capture(),
                ArgumentCaptor.forClass(Boolean.class).capture(),
                ArgumentCaptor.forClass(Boolean.class).capture(),
                ArgumentCaptor.forClass(String.class).capture(),
                ArgumentCaptor.forClass(String.class).capture(),
                ArgumentCaptor.forClass(Boolean.class).capture(),
                ArgumentCaptor.forClass(Integer.class).capture());
        IconState iconState = iconArg.getValue();

        assertEquals("Data icon in status bar", typeIcon, (int) typeIconArg.getValue());
        assertEquals("Visibility in status bar", visible, iconState.visible);
!!!45376823.java!!!	assertNetworkNameEquals(inout expected : String) : void
       assertEquals("Network name", expected, mMobileSignalController.getState().networkName);
