class ExifData
!!!45396151.java!!!	ExifData(inout order : ByteOrder)
        mByteOrder = order;
!!!45396279.java!!!	getCompressedThumbnail() : byte
        return mThumbnail;
!!!45396407.java!!!	setCompressedThumbnail(inout thumbnail : byte) : void
        mThumbnail = thumbnail;
!!!45396535.java!!!	hasCompressedThumbnail() : boolean
        return mThumbnail != null;
!!!45396663.java!!!	setStripBytes(in index : int, inout strip : byte) : void
        if (index < mStripBytes.size()) {
            mStripBytes.set(index, strip);
        } else {
            for (int i = mStripBytes.size(); i < index; i++) {
                mStripBytes.add(null);
            }
            mStripBytes.add(strip);
        }
!!!45396791.java!!!	getStripCount() : int
        return mStripBytes.size();
!!!45396919.java!!!	getStrip(in index : int) : byte
        return mStripBytes.get(index);
!!!45397047.java!!!	hasUncompressedStrip() : boolean
        return mStripBytes.size() != 0;
!!!45397175.java!!!	getByteOrder() : ByteOrder
        return mByteOrder;
!!!45397303.java!!!	getIfdData(in ifdId : int) : IfdData
        if (ExifTag.isValidIfd(ifdId)) {
            return mIfdDatas[ifdId];
        }
        return null;
!!!45397431.java!!!	addIfdData(inout data : IfdData) : void
        mIfdDatas[data.getId()] = data;
!!!45397559.java!!!	getOrCreateIfdData(in ifdId : int) : IfdData
        IfdData ifdData = mIfdDatas[ifdId];
        if (ifdData == null) {
            ifdData = new IfdData(ifdId);
            mIfdDatas[ifdId] = ifdData;
        }
        return ifdData;
!!!45397687.java!!!	getTag(in tag : short, in ifd : int) : ExifTag
        IfdData ifdData = mIfdDatas[ifd];
        return (ifdData == null) ? null : ifdData.getTag(tag);
!!!45397815.java!!!	addTag(inout tag : ExifTag) : ExifTag
        if (tag != null) {
            int ifd = tag.getIfd();
            return addTag(tag, ifd);
        }
        return null;
!!!45397943.java!!!	addTag(inout tag : ExifTag, in ifdId : int) : ExifTag
        if (tag != null && ExifTag.isValidIfd(ifdId)) {
            IfdData ifdData = getOrCreateIfdData(ifdId);
            return ifdData.setTag(tag);
        }
        return null;
!!!45398071.java!!!	clearThumbnailAndStrips() : void
        mThumbnail = null;
        mStripBytes.clear();
!!!45398199.java!!!	removeThumbnailData() : void
        clearThumbnailAndStrips();
        mIfdDatas[IfdId.TYPE_IFD_1] = null;
!!!45398327.java!!!	removeTag(in tagId : short, in ifdId : int) : void
        IfdData ifdData = mIfdDatas[ifdId];
        if (ifdData == null) {
            return;
        }
        ifdData.removeTag(tagId);
!!!45398455.java!!!	getUserComment() : String
        IfdData ifdData = mIfdDatas[IfdId.TYPE_IFD_0];
        if (ifdData == null) {
            return null;
        }
        ExifTag tag = ifdData.getTag(ExifInterface.getTrueTagKey(ExifInterface.TAG_USER_COMMENT));
        if (tag == null) {
            return null;
        }
        if (tag.getComponentCount() < 8) {
            return null;
        }

        byte[] buf = new byte[tag.getComponentCount()];
        tag.getBytes(buf);

        byte[] code = new byte[8];
        System.arraycopy(buf, 0, code, 0, 8);

        try {
            if (Arrays.equals(code, USER_COMMENT_ASCII)) {
                return new String(buf, 8, buf.length - 8, "US-ASCII");
            } else if (Arrays.equals(code, USER_COMMENT_JIS)) {
                return new String(buf, 8, buf.length - 8, "EUC-JP");
            } else if (Arrays.equals(code, USER_COMMENT_UNICODE)) {
                return new String(buf, 8, buf.length - 8, "UTF-16");
            } else {
                return null;
            }
        } catch (UnsupportedEncodingException e) {
            Log.w(TAG, "Failed to decode the user comment");
            return null;
        }
!!!45398583.java!!!	getAllTags() : ExifTag
        ArrayList<ExifTag> ret = new ArrayList<ExifTag>();
        for (IfdData d : mIfdDatas) {
            if (d != null) {
                ExifTag[] tags = d.getAllTags();
                if (tags != null) {
                    for (ExifTag t : tags) {
                        ret.add(t);
                    }
                }
            }
        }
        if (ret.size() == 0) {
            return null;
        }
        return ret;
!!!45398711.java!!!	getAllTagsForIfd(in ifd : int) : ExifTag
        IfdData d = mIfdDatas[ifd];
        if (d == null) {
            return null;
        }
        ExifTag[] tags = d.getAllTags();
        if (tags == null) {
            return null;
        }
        ArrayList<ExifTag> ret = new ArrayList<ExifTag>(tags.length);
        for (ExifTag t : tags) {
            ret.add(t);
        }
        if (ret.size() == 0) {
            return null;
        }
        return ret;
!!!45398839.java!!!	getAllTagsForTagId(in tag : short) : ExifTag
        ArrayList<ExifTag> ret = new ArrayList<ExifTag>();
        for (IfdData d : mIfdDatas) {
            if (d != null) {
                ExifTag t = d.getTag(tag);
                if (t != null) {
                    ret.add(t);
                }
            }
        }
        if (ret.size() == 0) {
            return null;
        }
        return ret;
!!!45398967.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (obj instanceof ExifData) {
            ExifData data = (ExifData) obj;
            if (data.mByteOrder != mByteOrder ||
                    data.mStripBytes.size() != mStripBytes.size() ||
                    !Arrays.equals(data.mThumbnail, mThumbnail)) {
                return false;
            }
            for (int i = 0; i < mStripBytes.size(); i++) {
                if (!Arrays.equals(data.mStripBytes.get(i), mStripBytes.get(i))) {
                    return false;
                }
            }
            for (int i = 0; i < IfdId.TYPE_IFD_COUNT; i++) {
                IfdData ifd1 = data.getIfdData(i);
                IfdData ifd2 = getIfdData(i);
                if (ifd1 != ifd2 && ifd1 != null && !ifd1.equals(ifd2)) {
                    return false;
                }
            }
            return true;
        }
        return false;
