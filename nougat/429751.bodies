class UndoState
!!!2702775.java!!!	UndoState(inout manager : UndoManager, in commitId : int)
            mManager = manager;
            mCommitId = commitId;
!!!2702903.java!!!	UndoState(inout manager : UndoManager, inout p : Parcel, inout loader : ClassLoader)
            mManager = manager;
            mCommitId = p.readInt();
            mCanMerge = p.readInt() != 0;
            mExecuted = p.readInt() != 0;
            mLabel = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(p);
            final int N = p.readInt();
            for (int i=0; i<N; i++) {
                UndoOwner owner = mManager.restoreOwner(p);
                UndoOperation op = (UndoOperation)p.readParcelable(loader);
                op.mOwner = owner;
                mOperations.add(op);
            }
!!!2703031.java!!!	writeToParcel(inout p : Parcel) : void
            if (mRecent != null) {
                throw new IllegalStateException("Can't save state before committing");
            }
            p.writeInt(mCommitId);
            p.writeInt(mCanMerge ? 1 : 0);
            p.writeInt(mExecuted ? 1 : 0);
            TextUtils.writeToParcel(mLabel, p, 0);
            final int N = mOperations.size();
            p.writeInt(N);
            for (int i=0; i<N; i++) {
                UndoOperation op = mOperations.get(i);
                mManager.saveOwner(op.mOwner, p);
                p.writeParcelable(op, 0);
            }
!!!2703159.java!!!	getCommitId() : int
            return mCommitId;
!!!2703287.java!!!	setLabel(inout label : CharSequence) : void
            mLabel = label;
!!!2703415.java!!!	updateLabel(inout label : CharSequence) : void
            if (mLabel != null) {
                mLabel = label;
            }
!!!2703543.java!!!	getLabel() : CharSequence
            return mLabel;
!!!2703671.java!!!	setCanMerge(inout state : boolean) : boolean
            // Don't allow re-enabling of merging if state has been executed.
            if (state && mExecuted) {
                return false;
            }
            mCanMerge = state;
            return true;
!!!2703799.java!!!	makeExecuted() : void
            mExecuted = true;
!!!2703927.java!!!	canMerge() : boolean
            return mCanMerge && !mExecuted;
!!!2704055.java!!!	countOperations() : int
            return mOperations.size();
!!!2704183.java!!!	hasOperation(inout owner : UndoOwner) : boolean
            final int N = mOperations.size();
            if (owner == null) {
                return N != 0;
            }
            for (int i=0; i<N; i++) {
                if (mOperations.get(i).getOwner() == owner) {
                    return true;
                }
            }
            return false;
!!!2704311.java!!!	hasMultipleOwners() : boolean
            final int N = mOperations.size();
            if (N <= 1) {
                return false;
            }
            UndoOwner owner = mOperations.get(0).getOwner();
            for (int i=1; i<N; i++) {
                if (mOperations.get(i).getOwner() != owner) {
                    return true;
                }
            }
            return false;
!!!2704439.java!!!	addOperation(inout op : UndoOperation) : void
            if (mOperations.contains(op)) {
                throw new IllegalStateException("Already holds " + op);
            }
            mOperations.add(op);
            if (mRecent == null) {
                mRecent = new ArrayList<UndoOperation<?>>();
                mRecent.add(op);
            }
            op.mOwner.mOpCount++;
!!!2704567.java!!!	getLastOperation(inout clazz : Class, inout owner : UndoOwner) : T
            final int N = mOperations.size();
            if (clazz == null && owner == null) {
                return N > 0 ? (T)mOperations.get(N-1) : null;
            }
            // First look for the top-most operation with the same owner.
            for (int i=N-1; i>=0; i--) {
                UndoOperation<?> op = mOperations.get(i);
                if (owner != null && op.getOwner() != owner) {
                    continue;
                }
                // Return this operation if it has the same class that the caller wants.
                // Note that we don't search deeper for the class, because we don't want
                // to end up with a different order of operations for the same owner.
                if (clazz != null && op.getClass() != clazz) {
                    return null;
                }
                return (T)op;
            }

            return null;
!!!2704695.java!!!	matchOwner(inout owner : UndoOwner) : boolean
            for (int i=mOperations.size()-1; i>=0; i--) {
                if (mOperations.get(i).matchOwner(owner)) {
                    return true;
                }
            }
            return false;
!!!2704823.java!!!	hasData() : boolean
            for (int i=mOperations.size()-1; i>=0; i--) {
                if (mOperations.get(i).hasData()) {
                    return true;
                }
            }
            return false;
!!!2704951.java!!!	commit() : void
            final int N = mRecent != null ? mRecent.size() : 0;
            for (int i=0; i<N; i++) {
                mRecent.get(i).commit();
            }
            mRecent = null;
!!!2705079.java!!!	undo() : void
            for (int i=mOperations.size()-1; i>=0; i--) {
                mOperations.get(i).undo();
            }
!!!2705207.java!!!	redo() : void
            final int N = mOperations.size();
            for (int i=0; i<N; i++) {
                mOperations.get(i).redo();
            }
!!!2705335.java!!!	destroy() : void
            for (int i=mOperations.size()-1; i>=0; i--) {
                UndoOwner owner = mOperations.get(i).mOwner;
                owner.mOpCount--;
                if (owner.mOpCount <= 0) {
                    if (owner.mOpCount < 0) {
                        throw new IllegalStateException("Underflow of op count on owner " + owner
                                + " in op " + mOperations.get(i));
                    }
                    mManager.removeOwner(owner);
                }
            }
