class ShortcutInfo
!!!2780855.java!!!	ShortcutInfo(inout b : ShortcutInfo::Builder)
        mUserId = b.mContext.getUserId();

        mId = Preconditions.checkStringNotEmpty(b.mId, "Shortcut ID must be provided");

        // Note we can't do other null checks here because SM.updateShortcuts() takes partial
        // information.
        mPackageName = b.mContext.getPackageName();
        mActivityComponent = b.mActivityComponent;
        mIcon = b.mIcon;
        mTitle = b.mTitle;
        mText = b.mText;
        mCategories = clone(b.mCategories);
        mIntent = b.mIntent;
        if (mIntent != null) {
            final Bundle intentExtras = mIntent.getExtras();
            if (intentExtras != null) {
                mIntent.replaceExtras((Bundle) null);
                mIntentPersistableExtras = new PersistableBundle(intentExtras);
            }
        }
        mWeight = b.mWeight;
        mExtras = b.mExtras;
        updateTimestamp();
!!!2780983.java!!!	clone(inout source : Set<T>) : ArraySet
        return (source == null) ? null : new ArraySet<>(source);
!!!2781111.java!!!	enforceMandatoryFields() : void
        Preconditions.checkStringNotEmpty(mId, "Shortcut ID must be provided");
        Preconditions.checkStringNotEmpty(mTitle, "Shortcut title must be provided");
        Preconditions.checkNotNull(mIntent, "Shortcut Intent must be provided");
!!!2781239.java!!!	ShortcutInfo(inout source : ShortcutInfo, in cloneFlags : int)
        mUserId = source.mUserId;
        mId = source.mId;
        mPackageName = source.mPackageName;
        mFlags = source.mFlags;
        mLastChangedTimestamp = source.mLastChangedTimestamp;

        // Just always keep it since it's cheep.
        mIconResourceId = source.mIconResourceId;

        if ((cloneFlags & CLONE_REMOVE_NON_KEY_INFO) == 0) {
            mActivityComponent = source.mActivityComponent;

            if ((cloneFlags & CLONE_REMOVE_ICON) == 0) {
                mIcon = source.mIcon;
                mBitmapPath = source.mBitmapPath;
            }

            mTitle = source.mTitle;
            mText = source.mText;
            mCategories = clone(source.mCategories);
            if ((cloneFlags & CLONE_REMOVE_INTENT) == 0) {
                mIntent = source.mIntent;
                mIntentPersistableExtras = source.mIntentPersistableExtras;
            }
            mWeight = source.mWeight;
            mExtras = source.mExtras;
        } else {
            // Set this bit.
            mFlags |= FLAG_KEY_FIELDS_ONLY;
        }
!!!2781367.java!!!	clone(in cloneFlags : int) : ShortcutInfo
        return new ShortcutInfo(this, cloneFlags);
!!!2781495.java!!!	copyNonNullFieldsFrom(inout source : ShortcutInfo) : void
        Preconditions.checkState(mUserId == source.mUserId, "Owner User ID must match");
        Preconditions.checkState(mId.equals(source.mId), "ID must match");
        Preconditions.checkState(mPackageName.equals(source.mPackageName),
                "Package name must match");

        if (source.mActivityComponent != null) {
            mActivityComponent = source.mActivityComponent;
        }

        if (source.mIcon != null) {
            mIcon = source.mIcon;
        }
        if (source.mTitle != null) {
            mTitle = source.mTitle;
        }
        if (source.mText != null) {
            mText = source.mText;
        }
        if (source.mCategories != null) {
            mCategories = clone(source.mCategories);
        }
        if (source.mIntent != null) {
            mIntent = source.mIntent;
            mIntentPersistableExtras = source.mIntentPersistableExtras;
        }
        if (source.mWeight != 0) {
            mWeight = source.mWeight;
        }
        if (source.mExtras != null) {
            mExtras = source.mExtras;
        }

        updateTimestamp();
!!!2781623.java!!!	validateIcon(inout icon : Icon) : Icon
        switch (icon.getType()) {
            case Icon.TYPE_RESOURCE:
            case Icon.TYPE_BITMAP:
                break; // OK
            default:
                throw getInvalidIconException();
        }
        if (icon.hasTint()) {
            // TODO support it
            throw new IllegalArgumentException("Icons with tints are not supported");
        }

        return icon;
!!!2781751.java!!!	getInvalidIconException() : IllegalArgumentException
        return new IllegalArgumentException("Unsupported icon type:"
                +" only bitmap, resource and content URI are supported");
!!!2783287.java!!!	getId() : String
        return mId;
!!!2783415.java!!!	getPackageName() : String
        return mPackageName;
!!!2783543.java!!!	getActivityComponent() : ComponentName
        return mActivityComponent;
!!!2783671.java!!!	getIcon() : Icon
        return mIcon;
!!!2783799.java!!!	getTitle() : String
        return mTitle;
!!!2783927.java!!!	getText() : String
        return mText;
!!!2784055.java!!!	getCategories() : String
        return mCategories;
!!!2784183.java!!!	getIntent() : Intent
        if (mIntent == null) {
            return null;
        }
        final Intent intent = new Intent(mIntent);
        intent.replaceExtras(
                mIntentPersistableExtras != null ? new Bundle(mIntentPersistableExtras) : null);
        return intent;
!!!2784311.java!!!	getIntentNoExtras() : Intent
        return mIntent;
!!!2784439.java!!!	getIntentPersistableExtras() : PersistableBundle
        return mIntentPersistableExtras;
!!!2784567.java!!!	getWeight() : int
        return mWeight;
!!!2784695.java!!!	getExtras() : PersistableBundle
        return mExtras;
!!!2784823.java!!!	getUserId() : int
        return mUserId;
!!!2784951.java!!!	getUserHandle() : UserHandle
        return UserHandle.of(mUserId);
!!!2785079.java!!!	getLastChangedTimestamp() : long
        return mLastChangedTimestamp;
!!!2785207.java!!!	getFlags() : int
        return mFlags;
!!!2785335.java!!!	replaceFlags(in flags : int) : void
        mFlags = flags;
!!!2785463.java!!!	addFlags(in flags : int) : void
        mFlags |= flags;
!!!2785591.java!!!	clearFlags(in flags : int) : void
        mFlags &= ~flags;
!!!2785719.java!!!	hasFlags(in flags : int) : boolean
        return (mFlags & flags) == flags;
!!!2785847.java!!!	isDynamic() : boolean
        return hasFlags(FLAG_DYNAMIC);
!!!2785975.java!!!	isPinned() : boolean
        return hasFlags(FLAG_PINNED);
!!!2786103.java!!!	hasIconResource() : boolean
        return hasFlags(FLAG_HAS_ICON_RES);
!!!2786231.java!!!	hasIconFile() : boolean
        return hasFlags(FLAG_HAS_ICON_FILE);
!!!2786359.java!!!	hasKeyFieldsOnly() : boolean
        return hasFlags(FLAG_KEY_FIELDS_ONLY);
!!!2786487.java!!!	updateTimestamp() : void
        mLastChangedTimestamp = System.currentTimeMillis();
!!!2786615.java!!!	setTimestamp(in value : long) : void
        mLastChangedTimestamp = value;
!!!2786743.java!!!	clearIcon() : void
        mIcon = null;
!!!2786871.java!!!	setIconResourceId(in iconResourceId : int) : void
        mIconResourceId = iconResourceId;
!!!2786999.java!!!	getIconResourceId() : int
        return mIconResourceId;
!!!2787127.java!!!	getBitmapPath() : String
        return mBitmapPath;
!!!2787255.java!!!	setBitmapPath(inout bitmapPath : String) : void
        mBitmapPath = bitmapPath;
!!!2787383.java!!!	ShortcutInfo(inout source : Parcel)
        final ClassLoader cl = getClass().getClassLoader();

        mUserId = source.readInt();
        mId = source.readString();
        mPackageName = source.readString();
        mActivityComponent = source.readParcelable(cl);
        mIcon = source.readParcelable(cl);
        mTitle = source.readString();
        mText = source.readString();
        mIntent = source.readParcelable(cl);
        mIntentPersistableExtras = source.readParcelable(cl);
        mWeight = source.readInt();
        mExtras = source.readParcelable(cl);
        mLastChangedTimestamp = source.readLong();
        mFlags = source.readInt();
        mIconResourceId = source.readInt();
        mBitmapPath = source.readString();

        int N = source.readInt();
        if (N == 0) {
            mCategories = null;
        } else {
            mCategories = new ArraySet<>(N);
            for (int i = 0; i < N; i++) {
                mCategories.add(source.readString().intern());
            }
        }
!!!2787511.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mUserId);
        dest.writeString(mId);
        dest.writeString(mPackageName);
        dest.writeParcelable(mActivityComponent, flags);
        dest.writeParcelable(mIcon, flags);
        dest.writeString(mTitle);
        dest.writeString(mText);

        dest.writeParcelable(mIntent, flags);
        dest.writeParcelable(mIntentPersistableExtras, flags);
        dest.writeInt(mWeight);
        dest.writeParcelable(mExtras, flags);
        dest.writeLong(mLastChangedTimestamp);
        dest.writeInt(mFlags);
        dest.writeInt(mIconResourceId);
        dest.writeString(mBitmapPath);

        if (mCategories != null) {
            final int N = mCategories.size();
            dest.writeInt(N);
            for (int i = 0; i < N; i++) {
                dest.writeString(mCategories.valueAt(i));
            }
        } else {
            dest.writeInt(0);
        }
!!!2787639.java!!!	describeContents() : int
        return 0;
!!!2787767.java!!!	toString() : String
        return toStringInner(/* secure =*/ true, /* includeInternalData =*/ false);
!!!2787895.java!!!	toInsecureString() : String
        return toStringInner(/* secure =*/ false, /* includeInternalData =*/ true);
!!!2788023.java!!!	toStringInner(inout secure : boolean, inout includeInternalData : boolean) : String
        final StringBuilder sb = new StringBuilder();
        sb.append("ShortcutInfo {");

        sb.append("id=");
        sb.append(secure ? "***" : mId);

        sb.append(", packageName=");
        sb.append(mPackageName);

        if (isDynamic()) {
            sb.append(", dynamic");
        }
        if (isPinned()) {
            sb.append(", pinned");
        }

        sb.append(", activity=");
        sb.append(mActivityComponent);

        sb.append(", title=");
        sb.append(secure ? "***" : mTitle);

        sb.append(", text=");
        sb.append(secure ? "***" : mText);

        sb.append(", categories=");
        sb.append(mCategories);

        sb.append(", icon=");
        sb.append(mIcon);

        sb.append(", weight=");
        sb.append(mWeight);

        sb.append(", timestamp=");
        sb.append(mLastChangedTimestamp);

        sb.append(", intent=");
        sb.append(mIntent);

        sb.append(", intentExtras=");
        sb.append(secure ? "***" : mIntentPersistableExtras);

        sb.append(", extras=");
        sb.append(mExtras);

        sb.append(", flags=");
        sb.append(mFlags);

        if (includeInternalData) {

            sb.append(", iconRes=");
            sb.append(mIconResourceId);

            sb.append(", bitmapPath=");
            sb.append(mBitmapPath);
        }

        sb.append("}");
        return sb.toString();
!!!2788151.java!!!	ShortcutInfo(in userId : int, inout id : String, inout packageName : String, inout activityComponent : ComponentName, inout icon : Icon, inout title : String, inout text : String, inout categories : Set<String>, inout intent : Intent, inout intentPersistableExtras : PersistableBundle, in weight : int, inout extras : PersistableBundle, in lastChangedTimestamp : long, in flags : int, in iconResId : int, inout bitmapPath : String)
        mUserId = userId;
        mId = id;
        mPackageName = packageName;
        mActivityComponent = activityComponent;
        mIcon = icon;
        mTitle = title;
        mText = text;
        mCategories = clone(categories);
        mIntent = intent;
        mIntentPersistableExtras = intentPersistableExtras;
        mWeight = weight;
        mExtras = extras;
        mLastChangedTimestamp = lastChangedTimestamp;
        mFlags = flags;
        mIconResourceId = iconResId;
        mBitmapPath = bitmapPath;
