class AppOpsManager
!!!45541687.cpp!!!	checkOp(in op : int32_t, in uid : int32_t, in callingPackage : String16) : int32_t
    sp<IAppOpsService> service = getService();
    return service != NULL ? service->checkOperation(op, uid, callingPackage) : MODE_IGNORED;
!!!45541815.cpp!!!	noteOp(in op : int32_t, in uid : int32_t, in callingPackage : String16) : int32_t
    sp<IAppOpsService> service = getService();
    return service != NULL ? service->noteOperation(op, uid, callingPackage) : MODE_IGNORED;
!!!45541943.cpp!!!	startOp(in op : int32_t, in uid : int32_t, in callingPackage : String16) : int32_t
    sp<IAppOpsService> service = getService();
    return service != NULL ? service->startOperation(getToken(service), op, uid, callingPackage)
            : MODE_IGNORED;
!!!45542071.cpp!!!	finishOp(in op : int32_t, in uid : int32_t, in callingPackage : String16) : void
    sp<IAppOpsService> service = getService();
    if (service != NULL) {
        service->finishOperation(getToken(service), op, uid, callingPackage);
    }
!!!45542199.cpp!!!	startWatchingMode(in op : int32_t, in packageName : String16, in callback : sp<IAppOpsCallback>) : void
    sp<IAppOpsService> service = getService();
    if (service != NULL) {
        service->startWatchingMode(op, packageName, callback);
    }
!!!45542327.cpp!!!	stopWatchingMode(in callback : sp<IAppOpsCallback>) : void
    sp<IAppOpsService> service = getService();
    if (service != NULL) {
        service->stopWatchingMode(callback);
    }
!!!45542455.cpp!!!	permissionToOpCode(in permission : String16) : int32_t
    sp<IAppOpsService> service = getService();
    if (service != NULL) {
        return service->permissionToOpCode(permission);
    }
    return -1;
!!!45542583.cpp!!!	getService() : sp<IAppOpsService>
    int64_t startTime = 0;
    mLock.lock();
    sp<IAppOpsService> service = mService;
    while (service == NULL || !IInterface::asBinder(service)->isBinderAlive()) {
        sp<IBinder> binder = defaultServiceManager()->checkService(_appops);
        if (binder == NULL) {
            // Wait for the app ops service to come back...
            if (startTime == 0) {
                startTime = uptimeMillis();
                ALOGI("Waiting for app ops service");
            } else if ((uptimeMillis()-startTime) > 10000) {
                ALOGW("Waiting too long for app ops service, giving up");
                return NULL;
            }
            sleep(1);
        } else {
            service = interface_cast<IAppOpsService>(binder);
            mService = service;
        }
    }
    mLock.unlock();
    return service;
