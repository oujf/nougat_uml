class BBinder
!!!45542839.cpp!!!	getInterfaceDescriptor() : String16
    // This is a local static rather than a global static,
    // to avoid static initializer ordering issues.
    static String16 sEmptyDescriptor;
    ALOGW("reached BBinder::getInterfaceDescriptor (this=%p)", this);
    return sEmptyDescriptor;
!!!45542967.cpp!!!	isBinderAlive() : bool
    return true;
!!!45543095.cpp!!!	pingBinder() : status_t
    return NO_ERROR;
!!!45543223.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    return NO_ERROR;
!!!45543351.cpp!!!	transact(in code : uint32_t, in data : Parcel, inout reply : Parcel, in flags : uint32_t = 0) : status_t
    data.setDataPosition(0);

    status_t err = NO_ERROR;
    switch (code) {
        case PING_TRANSACTION:
            reply->writeInt32(pingBinder());
            break;
        default:
            err = onTransact(code, data, reply, flags);
            break;
    }

    if (reply != NULL) {
        reply->setDataPosition(0);
    }

    return err;
!!!45543479.cpp!!!	linkToDeath(in recipient : sp<DeathRecipient>, inout cookie : void = NULL, in flags : uint32_t = 0) : status_t
    return INVALID_OPERATION;
!!!45543607.cpp!!!	unlinkToDeath(in recipient : wp<DeathRecipient>, inout cookie : void = NULL, in flags : uint32_t = 0, inout outRecipient : wp<DeathRecipient> = NULL) : status_t
    return INVALID_OPERATION;
!!!45543735.cpp!!!	attachObject(in objectID : void, inout object : void, inout cleanupCookie : void, in func : object_cleanup_func) : void
    Extras* e = mExtras.load(std::memory_order_acquire);

    if (!e) {
        e = new Extras;
        Extras* expected = nullptr;
        if (!mExtras.compare_exchange_strong(expected, e,
                                             std::memory_order_release,
                                             std::memory_order_acquire)) {
            delete e;
            e = expected;  // Filled in by CAS
        }
        if (e == 0) return; // out of memory
    }

    AutoMutex _l(e->mLock);
    e->mObjects.attach(objectID, object, cleanupCookie, func);
!!!45543863.cpp!!!	findObject(in objectID : void) : void
    Extras* e = mExtras.load(std::memory_order_acquire);
    if (!e) return NULL;

    AutoMutex _l(e->mLock);
    return e->mObjects.find(objectID);
!!!45543991.cpp!!!	detachObject(in objectID : void) : void
    Extras* e = mExtras.load(std::memory_order_acquire);
    if (!e) return;

    AutoMutex _l(e->mLock);
    e->mObjects.detach(objectID);
!!!45544119.cpp!!!	localBinder() : BBinder
    return this;
!!!45544247.cpp!!!	~BBinder()
    Extras* e = mExtras.load(std::memory_order_relaxed);
    if (e) delete e;
!!!45544375.cpp!!!	onTransact(in code : uint32_t, in data : Parcel, inout reply : Parcel, in flags : uint32_t = 0) : status_t
    switch (code) {
        case INTERFACE_TRANSACTION:
            reply->writeString16(getInterfaceDescriptor());
            return NO_ERROR;

        case DUMP_TRANSACTION: {
            int fd = data.readFileDescriptor();
            int argc = data.readInt32();
            Vector<String16> args;
            for (int i = 0; i < argc && data.dataAvail() > 0; i++) {
               args.add(data.readString16());
            }
            return dump(fd, args);
        }

        case SHELL_COMMAND_TRANSACTION: {
            int in = data.readFileDescriptor();
            int out = data.readFileDescriptor();
            int err = data.readFileDescriptor();
            int argc = data.readInt32();
            Vector<String16> args;
            for (int i = 0; i < argc && data.dataAvail() > 0; i++) {
               args.add(data.readString16());
            }
            sp<IResultReceiver> resultReceiver = IResultReceiver::asInterface(
                    data.readStrongBinder());

            // XXX can't add virtuals until binaries are updated.
            //return shellCommand(in, out, err, args, resultReceiver);
            if (resultReceiver != NULL) {
                resultReceiver->send(INVALID_OPERATION);
            }
        }

        case SYSPROPS_TRANSACTION: {
            report_sysprop_change();
            return NO_ERROR;
        }

        default:
            return UNKNOWN_TRANSACTION;
    }
