class PermissionCache
!!!45578423.cpp!!!	purge() : void
    Mutex::Autolock _l(mLock);
    mCache.clear();
!!!45578551.cpp!!!	check(inout granted : bool, in permission : String16, in uid : uid_t) : status_t
    Mutex::Autolock _l(mLock);
    Entry e;
    e.name = permission;
    e.uid  = uid;
    ssize_t index = mCache.indexOf(e);
    if (index >= 0) {
        *granted = mCache.itemAt(index).granted;
        return NO_ERROR;
    }
    return NAME_NOT_FOUND;
!!!45578679.cpp!!!	cache(in permission : String16, in uid : uid_t, in granted : bool) : void
    Mutex::Autolock _l(mLock);
    Entry e;
    ssize_t index = mPermissionNamesPool.indexOf(permission);
    if (index > 0) {
        e.name = mPermissionNamesPool.itemAt(index);
    } else {
        mPermissionNamesPool.add(permission);
        e.name = permission;
    }
    // note, we don't need to store the pid, which is not actually used in
    // permission checks
    e.uid  = uid;
    e.granted = granted;
    index = mCache.indexOf(e);
    if (index < 0) {
        mCache.add(e);
    }
!!!45578935.cpp!!!	checkCallingPermission(in permission : String16) : bool
    return PermissionCache::checkCallingPermission(permission, NULL, NULL);
!!!45579063.cpp!!!	checkCallingPermission(in permission : String16, inout outPid : int32_t, inout outUid : int32_t) : bool
    IPCThreadState* ipcState = IPCThreadState::self();
    pid_t pid = ipcState->getCallingPid();
    uid_t uid = ipcState->getCallingUid();
    if (outPid) *outPid = pid;
    if (outUid) *outUid = uid;
    return PermissionCache::checkPermission(permission, pid, uid);
!!!45579191.cpp!!!	checkPermission(in permission : String16, in pid : pid_t, in uid : uid_t) : bool
    if ((uid == 0) || (pid == getpid())) {
        // root and ourselves is always okay
        return true;
    }

    PermissionCache& pc(PermissionCache::getInstance());
    bool granted = false;
    if (pc.check(&granted, permission, uid) != NO_ERROR) {
        nsecs_t t = -systemTime();
        granted = android::checkPermission(permission, pid, uid);
        t += systemTime();
        ALOGD("checking %s for uid=%d => %s (%d us)",
                String8(permission).string(), uid,
                granted?"granted":"denied", (int)ns2us(t));
        pc.cache(permission, uid, granted);
    }
    return granted;
