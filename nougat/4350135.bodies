class PersistableBundle
!!!45579959.cpp!!!	empty() : bool
    return size() == 0u;
!!!45580087.cpp!!!	size() : size_t
    return (mBoolMap.size() +
            mIntMap.size() +
            mLongMap.size() +
            mDoubleMap.size() +
            mStringMap.size() +
            mBoolVectorMap.size() +
            mIntVectorMap.size() +
            mLongVectorMap.size() +
            mDoubleVectorMap.size() +
            mStringVectorMap.size() +
            mPersistableBundleMap.size());
!!!45580215.cpp!!!	erase(in key : String16) : size_t
    RETURN_IF_ENTRY_ERASED(mBoolMap, key);
    RETURN_IF_ENTRY_ERASED(mIntMap, key);
    RETURN_IF_ENTRY_ERASED(mLongMap, key);
    RETURN_IF_ENTRY_ERASED(mDoubleMap, key);
    RETURN_IF_ENTRY_ERASED(mStringMap, key);
    RETURN_IF_ENTRY_ERASED(mBoolVectorMap, key);
    RETURN_IF_ENTRY_ERASED(mIntVectorMap, key);
    RETURN_IF_ENTRY_ERASED(mLongVectorMap, key);
    RETURN_IF_ENTRY_ERASED(mDoubleVectorMap, key);
    RETURN_IF_ENTRY_ERASED(mStringVectorMap, key);
    return mPersistableBundleMap.erase(key);
!!!45580343.cpp!!!	putBoolean(in key : String16, in value : bool) : void
    erase(key);
    mBoolMap[key] = value;
!!!45580471.cpp!!!	putInt(in key : String16, in value : int32_t) : void
    erase(key);
    mIntMap[key] = value;
!!!45580599.cpp!!!	putLong(in key : String16, in value : int64_t) : void
    erase(key);
    mLongMap[key] = value;
!!!45580727.cpp!!!	putDouble(in key : String16, in value : double) : void
    erase(key);
    mDoubleMap[key] = value;
!!!45580855.cpp!!!	putString(in key : String16, in value : String16) : void
    erase(key);
    mStringMap[key] = value;
!!!45580983.cpp!!!	putBooleanVector(in key : String16, in value : std::vector<bool>) : void
    erase(key);
    mBoolVectorMap[key] = value;
!!!45581111.cpp!!!	putIntVector(in key : String16, in value : std::vector<int32_t>) : void
    erase(key);
    mIntVectorMap[key] = value;
!!!45581239.cpp!!!	putLongVector(in key : String16, in value : std::vector<int64_t>) : void
    erase(key);
    mLongVectorMap[key] = value;
!!!45581367.cpp!!!	putDoubleVector(in key : String16, in value : std::vector<double>) : void
    erase(key);
    mDoubleVectorMap[key] = value;
!!!45581495.cpp!!!	putStringVector(in key : String16, in value : std::vector<String16>) : void
    erase(key);
    mStringVectorMap[key] = value;
!!!45581623.cpp!!!	putPersistableBundle(in key : String16, in value : PersistableBundle) : void
    erase(key);
    mPersistableBundleMap[key] = value;
!!!45581751.cpp!!!	getBoolean(in key : String16, inout out : bool) : bool
    return getValue(key, out, mBoolMap);
!!!45581879.cpp!!!	getInt(in key : String16, inout out : int32_t) : bool
    return getValue(key, out, mIntMap);
!!!45582007.cpp!!!	getLong(in key : String16, inout out : int64_t) : bool
    return getValue(key, out, mLongMap);
!!!45582135.cpp!!!	getDouble(in key : String16, inout out : double) : bool
    return getValue(key, out, mDoubleMap);
!!!45582263.cpp!!!	getString(in key : String16, inout out : String16) : bool
    return getValue(key, out, mStringMap);
!!!45582391.cpp!!!	getBooleanVector(in key : String16, inout out : std::vector<bool>) : bool
    return getValue(key, out, mBoolVectorMap);
!!!45582519.cpp!!!	getIntVector(in key : String16, inout out : std::vector<int32_t>) : bool
    return getValue(key, out, mIntVectorMap);
!!!45582647.cpp!!!	getLongVector(in key : String16, inout out : std::vector<int64_t>) : bool
    return getValue(key, out, mLongVectorMap);
!!!45582775.cpp!!!	getDoubleVector(in key : String16, inout out : std::vector<double>) : bool
    return getValue(key, out, mDoubleVectorMap);
!!!45582903.cpp!!!	getStringVector(in key : String16, inout out : std::vector<String16>) : bool
    return getValue(key, out, mStringVectorMap);
!!!45583031.cpp!!!	getPersistableBundle(in key : String16, inout out : PersistableBundle) : bool
    return getValue(key, out, mPersistableBundleMap);
!!!45583415.cpp!!!	writeToParcelInner(inout parcel : Parcel) : status_t
    /*
     * To keep this implementation in sync with writeArrayMapInternal() in
     * frameworks/base/core/java/android/os/Parcel.java, the number of key
     * value pairs must be written into the parcel before writing the key-value
     * pairs themselves.
     */
    size_t num_entries = size();
    if (num_entries > std::numeric_limits<int32_t>::max()) {
        ALOGE("The size of this PersistableBundle (%zu) too large to store in 32-bit signed int",
              num_entries);
        return BAD_VALUE;
    }
    RETURN_IF_FAILED(parcel->writeInt32(static_cast<int32_t>(num_entries)));

    for (const auto& key_val_pair : mBoolMap) {
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.first));
        RETURN_IF_FAILED(parcel->writeInt32(VAL_BOOLEAN));
        RETURN_IF_FAILED(parcel->writeBool(key_val_pair.second));
    }
    for (const auto& key_val_pair : mIntMap) {
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.first));
        RETURN_IF_FAILED(parcel->writeInt32(VAL_INTEGER));
        RETURN_IF_FAILED(parcel->writeInt32(key_val_pair.second));
    }
    for (const auto& key_val_pair : mLongMap) {
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.first));
        RETURN_IF_FAILED(parcel->writeInt32(VAL_LONG));
        RETURN_IF_FAILED(parcel->writeInt64(key_val_pair.second));
    }
    for (const auto& key_val_pair : mDoubleMap) {
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.first));
        RETURN_IF_FAILED(parcel->writeInt32(VAL_DOUBLE));
        RETURN_IF_FAILED(parcel->writeDouble(key_val_pair.second));
    }
    for (const auto& key_val_pair : mStringMap) {
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.first));
        RETURN_IF_FAILED(parcel->writeInt32(VAL_STRING));
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.second));
    }
    for (const auto& key_val_pair : mBoolVectorMap) {
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.first));
        RETURN_IF_FAILED(parcel->writeInt32(VAL_BOOLEANARRAY));
        RETURN_IF_FAILED(parcel->writeBoolVector(key_val_pair.second));
    }
    for (const auto& key_val_pair : mIntVectorMap) {
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.first));
        RETURN_IF_FAILED(parcel->writeInt32(VAL_INTARRAY));
        RETURN_IF_FAILED(parcel->writeInt32Vector(key_val_pair.second));
    }
    for (const auto& key_val_pair : mLongVectorMap) {
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.first));
        RETURN_IF_FAILED(parcel->writeInt32(VAL_LONGARRAY));
        RETURN_IF_FAILED(parcel->writeInt64Vector(key_val_pair.second));
    }
    for (const auto& key_val_pair : mDoubleVectorMap) {
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.first));
        RETURN_IF_FAILED(parcel->writeInt32(VAL_DOUBLEARRAY));
        RETURN_IF_FAILED(parcel->writeDoubleVector(key_val_pair.second));
    }
    for (const auto& key_val_pair : mStringVectorMap) {
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.first));
        RETURN_IF_FAILED(parcel->writeInt32(VAL_STRINGARRAY));
        RETURN_IF_FAILED(parcel->writeString16Vector(key_val_pair.second));
    }
    for (const auto& key_val_pair : mPersistableBundleMap) {
        RETURN_IF_FAILED(parcel->writeString16(key_val_pair.first));
        RETURN_IF_FAILED(parcel->writeInt32(VAL_PERSISTABLEBUNDLE));
        RETURN_IF_FAILED(key_val_pair.second.writeToParcel(parcel));
    }
    return NO_ERROR;
!!!45583543.cpp!!!	readFromParcelInner(in parcel : Parcel, in length : size_t) : status_t
    /*
     * Note: we don't actually use length for anything other than an empty PersistableBundle
     * check, since we do not actually need to copy in an entire Parcel, unlike in the Java
     * implementation.
     */
    if (length == 0) {
        // Empty PersistableBundle or end of data.
        return NO_ERROR;
    }

    int32_t magic;
    RETURN_IF_FAILED(parcel->readInt32(&magic));
    if (magic != BUNDLE_MAGIC) {
        ALOGE("Bad magic number for PersistableBundle: 0x%08x", magic);
        return BAD_VALUE;
    }

    /*
     * To keep this implementation in sync with unparcel() in
     * frameworks/base/core/java/android/os/BaseBundle.java, the number of
     * key-value pairs must be read from the parcel before reading the key-value
     * pairs themselves.
     */
    int32_t num_entries;
    RETURN_IF_FAILED(parcel->readInt32(&num_entries));

    for (; num_entries > 0; --num_entries) {
        size_t start_pos = parcel->dataPosition();
        String16 key;
        int32_t value_type;
        RETURN_IF_FAILED(parcel->readString16(&key));
        RETURN_IF_FAILED(parcel->readInt32(&value_type));

        /*
         * We assume that both the C++ and Java APIs ensure that all keys in a PersistableBundle
         * are unique.
         */
        switch (value_type) {
            case VAL_STRING: {
                RETURN_IF_FAILED(parcel->readString16(&mStringMap[key]));
                break;
            }
            case VAL_INTEGER: {
                RETURN_IF_FAILED(parcel->readInt32(&mIntMap[key]));
                break;
            }
            case VAL_LONG: {
                RETURN_IF_FAILED(parcel->readInt64(&mLongMap[key]));
                break;
            }
            case VAL_DOUBLE: {
                RETURN_IF_FAILED(parcel->readDouble(&mDoubleMap[key]));
                break;
            }
            case VAL_BOOLEAN: {
                RETURN_IF_FAILED(parcel->readBool(&mBoolMap[key]));
                break;
            }
            case VAL_STRINGARRAY: {
                RETURN_IF_FAILED(parcel->readString16Vector(&mStringVectorMap[key]));
                break;
            }
            case VAL_INTARRAY: {
                RETURN_IF_FAILED(parcel->readInt32Vector(&mIntVectorMap[key]));
                break;
            }
            case VAL_LONGARRAY: {
                RETURN_IF_FAILED(parcel->readInt64Vector(&mLongVectorMap[key]));
                break;
            }
            case VAL_BOOLEANARRAY: {
                RETURN_IF_FAILED(parcel->readBoolVector(&mBoolVectorMap[key]));
                break;
            }
            case VAL_PERSISTABLEBUNDLE: {
                RETURN_IF_FAILED(mPersistableBundleMap[key].readFromParcel(parcel));
                break;
            }
            case VAL_DOUBLEARRAY: {
                RETURN_IF_FAILED(parcel->readDoubleVector(&mDoubleVectorMap[key]));
                break;
            }
            default: {
                ALOGE("Unrecognized type: %d", value_type);
                return BAD_TYPE;
                break;
            }
        }
    }

    return NO_ERROR;
