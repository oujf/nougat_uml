class Fence
!!!45716023.cpp!!!	wait(in timeout : int) : status_t
    ATRACE_CALL();
    if (mFenceFd == -1) {
        return NO_ERROR;
    }
    int err = sync_wait(mFenceFd, timeout);
    return err < 0 ? -errno : status_t(NO_ERROR);
!!!45716151.cpp!!!	waitForever(in logname : char) : status_t
    ATRACE_CALL();
    if (mFenceFd == -1) {
        return NO_ERROR;
    }
    int warningTimeout = 3000;
    int err = sync_wait(mFenceFd, warningTimeout);
    if (err < 0 && errno == ETIME) {
        ALOGE("%s: fence %d didn't signal in %u ms", logname, mFenceFd,
                warningTimeout);
        err = sync_wait(mFenceFd, TIMEOUT_NEVER);
    }
    return err < 0 ? -errno : status_t(NO_ERROR);
!!!45716279.cpp!!!	merge(in name : String8, in f1 : sp<Fence>, in f2 : sp<Fence>) : sp<Fence>
    ATRACE_CALL();
    int result;
    // Merge the two fences.  In the case where one of the fences is not a
    // valid fence (e.g. NO_FENCE) we merge the one valid fence with itself so
    // that a new fence with the given name is created.
    if (f1->isValid() && f2->isValid()) {
        result = sync_merge(name.string(), f1->mFenceFd, f2->mFenceFd);
    } else if (f1->isValid()) {
        result = sync_merge(name.string(), f1->mFenceFd, f1->mFenceFd);
    } else if (f2->isValid()) {
        result = sync_merge(name.string(), f2->mFenceFd, f2->mFenceFd);
    } else {
        return NO_FENCE;
    }
    if (result == -1) {
        status_t err = -errno;
        ALOGE("merge: sync_merge(\"%s\", %d, %d) returned an error: %s (%d)",
                name.string(), f1->mFenceFd, f2->mFenceFd,
                strerror(-err), err);
        return NO_FENCE;
    }
    return sp<Fence>(new Fence(result));
!!!45716407.cpp!!!	dup() : int
    return ::dup(mFenceFd);
!!!45716535.cpp!!!	getSignalTime() : nsecs_t
    if (mFenceFd == -1) {
        return -1;
    }

    struct sync_fence_info_data* finfo = sync_fence_info(mFenceFd);
    if (finfo == NULL) {
        ALOGE("sync_fence_info returned NULL for fd %d", mFenceFd);
        return -1;
    }
    if (finfo->status != 1) {
        sync_fence_info_free(finfo);
        return INT64_MAX;
    }

    struct sync_pt_info* pinfo = NULL;
    uint64_t timestamp = 0;
    while ((pinfo = sync_pt_info(finfo, pinfo)) != NULL) {
        if (pinfo->timestamp_ns > timestamp) {
            timestamp = pinfo->timestamp_ns;
        }
    }
    sync_fence_info_free(finfo);

    return nsecs_t(timestamp);
!!!45716663.cpp!!!	getFlattenedSize() : size_t
    return 4;
!!!45716791.cpp!!!	getFdCount() : size_t
    return isValid() ? 1 : 0;
!!!45716919.cpp!!!	flatten(inout buffer : void, inout size : size_t, inout fds : int, inout count : size_t) : status_t
    if (size < getFlattenedSize() || count < getFdCount()) {
        return NO_MEMORY;
    }
    // Cast to uint32_t since the size of a size_t can vary between 32- and
    // 64-bit processes
    FlattenableUtils::write(buffer, size, static_cast<uint32_t>(getFdCount()));
    if (isValid()) {
        *fds++ = mFenceFd;
        count--;
    }
    return NO_ERROR;
!!!45717047.cpp!!!	unflatten(in buffer : void, inout size : size_t, in fds : int, inout count : size_t) : status_t
    if (mFenceFd != -1) {
        // Don't unflatten if we already have a valid fd.
        return INVALID_OPERATION;
    }

    if (size < 1) {
        return NO_MEMORY;
    }

    uint32_t numFds;
    FlattenableUtils::read(buffer, size, numFds);

    if (numFds > 1) {
        return BAD_VALUE;
    }

    if (count < numFds) {
        return NO_MEMORY;
    }

    if (numFds) {
        mFenceFd = *fds++;
        count--;
    }

    return NO_ERROR;
!!!45717175.cpp!!!	~Fence()
    if (mFenceFd != -1) {
        close(mFenceFd);
    }
