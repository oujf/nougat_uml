class Rect
!!!45731639.cpp!!!	makeInvalid() : void
    left = 0;
    top = 0;
    right = -1;
    bottom = -1;
!!!45733559.cpp!!!	operator <(in rhs : Rect) : bool
    if (top < rhs.top) {
        return true;
    } else if (top == rhs.top) {
        if (left < rhs.left) {
            return true;
        } else if (left == rhs.left) {
            if (bottom < rhs.bottom) {
                return true;
            } else if (bottom == rhs.bottom) {
                if (right < rhs.right) {
                    return true;
                }
            }
        }
    }
    return false;
!!!45733687.cpp!!!	operator +(in rhs : Point) : Rect
    const Rect result(left + rhs.x, top + rhs.y, right + rhs.x, bottom + rhs.y);
    return result;
!!!45733815.cpp!!!	operator -(in rhs : Point) : Rect
    const Rect result(left - rhs.x, top - rhs.y, right - rhs.x, bottom - rhs.y);
    return result;
!!!45734583.cpp!!!	offsetTo(in x : int32_t, in y : int32_t) : Rect
    right -= left - x;
    bottom -= top - y;
    left = x;
    top = y;
    return *this;
!!!45734711.cpp!!!	offsetBy(in x : int32_t, in y : int32_t) : Rect
    left += x;
    top += y;
    right += x;
    bottom += y;
    return *this;
!!!45734839.cpp!!!	intersect(in with : Rect, inout result : Rect) : bool
    result->left = max(left, with.left);
    result->top = max(top, with.top);
    result->right = min(right, with.right);
    result->bottom = min(bottom, with.bottom);
    return !(result->isEmpty());
!!!45734967.cpp!!!	transform(in xform : uint32_t, in width : int32_t, in height : int32_t) : Rect
    Rect result(*this);
    if (xform & HAL_TRANSFORM_FLIP_H) {
        result = Rect(width - result.right, result.top, width - result.left,
                result.bottom);
    }
    if (xform & HAL_TRANSFORM_FLIP_V) {
        result = Rect(result.left, height - result.bottom, result.right,
                height - result.top);
    }
    if (xform & HAL_TRANSFORM_ROT_90) {
        int left = height - result.bottom;
        int top = result.left;
        int right = height - result.top;
        int bottom = result.right;
        result = Rect(left, top, right, bottom);
    }
    return result;
!!!45735095.cpp!!!	reduce(in exclude : Rect) : Rect
    Rect result(Rect::EMPTY_RECT);

    uint32_t mask = 0;
    mask |= (exclude.left   > left)   ? 1 : 0;
    mask |= (exclude.top    > top)    ? 2 : 0;
    mask |= (exclude.right  < right)  ? 4 : 0;
    mask |= (exclude.bottom < bottom) ? 8 : 0;

    if (mask == 0) {
        // crop entirely covers us
        result.clear();
    } else {
        result = *this;
        if (!(mask & (mask - 1))) {
            // power-of-2, i.e.: just one bit is set
            if (mask & 1) {
                result.right = min(result.right, exclude.left);
            } else if (mask & 2) {
                result.bottom = min(result.bottom, exclude.top);
            } else if (mask & 4) {
                result.left = max(result.left, exclude.right);
            } else if (mask & 8) {
                result.top = max(result.top, exclude.bottom);
            }
        }
    }

    return result;
