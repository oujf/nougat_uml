class Region
!!!45735607.cpp!!!	Region()
    mStorage.add(Rect(0,0));
!!!45735735.cpp!!!	Region(in rhs : Region)
#if VALIDATE_REGIONS
    validate(rhs, "rhs copy-ctor");
#endif
!!!45735863.cpp!!!	Region(in rhs : Rect)
    mStorage.add(rhs);
!!!45736119.cpp!!!	createTJunctionFreeRegion(in r : Region) : Region
    if (r.isEmpty()) return r;
    if (r.isRect()) return r;

    Vector<Rect> reversed;
    reverseRectsResolvingJunctions(r.begin(), r.end(), reversed, direction_RTL);

    Region outputRegion;
    reverseRectsResolvingJunctions(reversed.begin(), reversed.end(),
            outputRegion.mStorage, direction_LTR);
    outputRegion.mStorage.add(r.getBounds()); // to make region valid, mStorage must end with bounds

#if VALIDATE_REGIONS
    validate(outputRegion, "T-Junction free region");
#endif

    return outputRegion;
!!!45736247.cpp!!!	operator =(in rhs : Region) : Region
#if VALIDATE_REGIONS
    validate(*this, "this->operator=");
    validate(rhs, "rhs.operator=");
#endif
    mStorage = rhs.mStorage;
    return *this;
!!!45736887.cpp!!!	contains(in point : Point) : bool
    return contains(point.x, point.y);
!!!45737015.cpp!!!	contains(in x : int, in y : int) : bool
    const_iterator cur = begin();
    const_iterator const tail = end();
    while (cur != tail) {
        if (y >= cur->top && y < cur->bottom && x >= cur->left && x < cur->right) {
            return true;
        }
        cur++;
    }
    return false;
!!!45737143.cpp!!!	makeBoundsSelf() : Region
    if (mStorage.size() >= 2) {
        const Rect bounds(getBounds());
        mStorage.clear();
        mStorage.add(bounds);
    }
    return *this;
!!!45737271.cpp!!!	clear() : void
    mStorage.clear();
    mStorage.add(Rect(0,0));
!!!45737399.cpp!!!	set(in r : Rect) : void
    mStorage.clear();
    mStorage.add(r);
!!!45737527.cpp!!!	set(in w : int32_t, in h : int32_t) : void
    mStorage.clear();
    mStorage.add(Rect(w, h));
!!!45737655.cpp!!!	set(in w : uint32_t, in h : uint32_t) : void
    mStorage.clear();
    mStorage.add(Rect(w, h));
!!!45737783.cpp!!!	orSelf(in r : Rect) : Region
    return operationSelf(r, op_or);
!!!45737911.cpp!!!	xorSelf(in r : Rect) : Region
    return operationSelf(r, op_xor);
!!!45738039.cpp!!!	andSelf(in r : Rect) : Region
    return operationSelf(r, op_and);
!!!45738167.cpp!!!	subtractSelf(in r : Rect) : Region
    return operationSelf(r, op_nand);
!!!45738295.cpp!!!	orSelf(in rhs : Region) : Region
    return operationSelf(rhs, op_or);
!!!45738423.cpp!!!	xorSelf(in rhs : Region) : Region
    return operationSelf(rhs, op_xor);
!!!45738551.cpp!!!	andSelf(in rhs : Region) : Region
    return operationSelf(rhs, op_and);
!!!45738679.cpp!!!	subtractSelf(in rhs : Region) : Region
    return operationSelf(rhs, op_nand);
!!!45738807.cpp!!!	merge(in rhs : Rect) : Region
    return operation(rhs, op_or);
!!!45738935.cpp!!!	mergeExclusive(in rhs : Rect) : Region
    return operation(rhs, op_xor);
!!!45739063.cpp!!!	intersect(in rhs : Rect) : Region
    return operation(rhs, op_and);
!!!45739191.cpp!!!	subtract(in rhs : Rect) : Region
    return operation(rhs, op_nand);
!!!45739319.cpp!!!	merge(in rhs : Region) : Region
    return operation(rhs, op_or);
!!!45739447.cpp!!!	mergeExclusive(in rhs : Region) : Region
    return operation(rhs, op_xor);
!!!45739575.cpp!!!	intersect(in rhs : Region) : Region
    return operation(rhs, op_and);
!!!45739703.cpp!!!	subtract(in rhs : Region) : Region
    return operation(rhs, op_nand);
!!!45739831.cpp!!!	translateSelf(in x : int, in y : int) : Region
    if (x|y) translate(*this, x, y);
    return *this;
!!!45739959.cpp!!!	orSelf(in rhs : Region, in dx : int, in dy : int) : Region
    return operationSelf(rhs, dx, dy, op_or);
!!!45740087.cpp!!!	xorSelf(in rhs : Region, in dx : int, in dy : int) : Region
    return operationSelf(rhs, dx, dy, op_xor);
!!!45740215.cpp!!!	andSelf(in rhs : Region, in dx : int, in dy : int) : Region
    return operationSelf(rhs, dx, dy, op_and);
!!!45740343.cpp!!!	subtractSelf(in rhs : Region, in dx : int, in dy : int) : Region
    return operationSelf(rhs, dx, dy, op_nand);
!!!45740471.cpp!!!	translate(in x : int, in y : int) : Region
    Region result;
    translate(result, *this, x, y);
    return result;
!!!45740599.cpp!!!	merge(in rhs : Region, in dx : int, in dy : int) : Region
    return operation(rhs, dx, dy, op_or);
!!!45740727.cpp!!!	mergeExclusive(in rhs : Region, in dx : int, in dy : int) : Region
    return operation(rhs, dx, dy, op_xor);
!!!45740855.cpp!!!	intersect(in rhs : Region, in dx : int, in dy : int) : Region
    return operation(rhs, dx, dy, op_and);
!!!45740983.cpp!!!	subtract(in rhs : Region, in dx : int, in dy : int) : Region
    return operation(rhs, dx, dy, op_nand);
!!!45741111.cpp!!!	operator |(in rhs : Region) : Region
    return merge(rhs);
!!!45741239.cpp!!!	operator ^(in rhs : Region) : Region
    return mergeExclusive(rhs);
!!!45741367.cpp!!!	operator &(in rhs : Region) : Region
    return intersect(rhs);
!!!45741495.cpp!!!	operator -(in rhs : Region) : Region
    return subtract(rhs);
!!!45741623.cpp!!!	operator +(in pt : Point) : Region
    return translate(pt.x, pt.y);
!!!45741751.cpp!!!	operator |=(in rhs : Region) : Region
    return orSelf(rhs);
!!!45741879.cpp!!!	operator ^=(in rhs : Region) : Region
    return xorSelf(rhs);
!!!45742007.cpp!!!	operator &=(in rhs : Region) : Region
    return andSelf(rhs);
!!!45742135.cpp!!!	operator -=(in rhs : Region) : Region
    return subtractSelf(rhs);
!!!45742263.cpp!!!	operator +=(in pt : Point) : Region
    return translateSelf(pt.x, pt.y);
!!!45742391.cpp!!!	isTriviallyEqual(in region : Region) : bool
    return begin() == region.begin();
!!!45742519.cpp!!!	begin() : Region::const_iterator
    return mStorage.array();
!!!45742647.cpp!!!	end() : Region::const_iterator
    size_t numRects = isRect() ? 1 : mStorage.size() - 1;
    return mStorage.array() + numRects;
!!!45742775.cpp!!!	getArray(inout count : size_t) : Rect
    if (count) *count = static_cast<size_t>(end() - begin());
    return begin();
!!!45742903.cpp!!!	addRectUnchecked(in l : int, in t : int, in r : int, in b : int) : void
    Rect rect(l,t,r,b);
    size_t where = mStorage.size() - 1;
    mStorage.insertAt(rect, where, 1);
!!!45743159.cpp!!!	getFlattenedSize() : size_t
    return sizeof(uint32_t) + mStorage.size() * sizeof(Rect);
!!!45743287.cpp!!!	flatten(inout buffer : void, in size : size_t) : status_t
#if VALIDATE_REGIONS
    validate(*this, "Region::flatten");
#endif
    if (size < getFlattenedSize()) {
        return NO_MEMORY;
    }
    // Cast to uint32_t since the size of a size_t can vary between 32- and
    // 64-bit processes
    FlattenableUtils::write(buffer, size, static_cast<uint32_t>(mStorage.size()));
    for (auto rect : mStorage) {
        status_t result = rect.flatten(buffer, size);
        if (result != NO_ERROR) {
            return result;
        }
        FlattenableUtils::advance(buffer, size, sizeof(rect));
    }
    return NO_ERROR;
!!!45743415.cpp!!!	unflatten(in buffer : void, in size : size_t) : status_t
    if (size < sizeof(uint32_t)) {
        return NO_MEMORY;
    }

    uint32_t numRects = 0;
    FlattenableUtils::read(buffer, size, numRects);
    if (size < numRects * sizeof(Rect)) {
        return NO_MEMORY;
    }

    if (numRects > (UINT32_MAX / sizeof(Rect))) {
        android_errorWriteWithInfoLog(0x534e4554, "29983260", -1, NULL, 0);
        return NO_MEMORY;
    }

    Region result;
    result.mStorage.clear();
    for (size_t r = 0; r < numRects; ++r) {
        Rect rect(Rect::EMPTY_RECT);
        status_t status = rect.unflatten(buffer, size);
        if (status != NO_ERROR) {
            return status;
        }
        FlattenableUtils::advance(buffer, size, sizeof(rect));
        result.mStorage.push_back(rect);
    }

#if VALIDATE_REGIONS
    validate(result, "Region::unflatten");
#endif

    if (!result.validate(result, "Region::unflatten", true)) {
        ALOGE("Region::unflatten() failed, invalid region");
        return BAD_VALUE;
    }
    mStorage = result.mStorage;
    return NO_ERROR;
!!!45743543.cpp!!!	dump(inout out : String8, in what : char, in flags : uint32_t = 0) : void
    const_iterator head = begin();
    const_iterator const tail = end();

    out.appendFormat("  Region %s (this=%p, count=%" PRIdPTR ")\n",
            what, this, tail - head);
    while (head != tail) {
        out.appendFormat("    [%3d, %3d, %3d, %3d]\n", head->left, head->top,
                head->right, head->bottom);
        ++head;
    }
!!!45743671.cpp!!!	dump(in what : char, in flags : uint32_t = 0) : void
    const_iterator head = begin();
    const_iterator const tail = end();
    ALOGD("  Region %s (this=%p, count=%" PRIdPTR ")\n", what, this, tail-head);
    while (head != tail) {
        ALOGD("    [%3d, %3d, %3d, %3d]\n",
                head->left, head->top, head->right, head->bottom);
        head++;
    }
!!!45743799.cpp!!!	operationSelf(in r : Rect, in op : int) : Region
    Region lhs(*this);
    boolean_operation(op, *this, lhs, r);
    return *this;
!!!45743927.cpp!!!	operationSelf(in rhs : Region, in op : int) : Region
    Region lhs(*this);
    boolean_operation(op, *this, lhs, rhs);
    return *this;
!!!45744055.cpp!!!	operationSelf(in rhs : Region, in dx : int, in dy : int, in op : int) : Region
    Region lhs(*this);
    boolean_operation(op, *this, lhs, rhs, dx, dy);
    return *this;
!!!45744183.cpp!!!	operation(in rhs : Rect, in op : int) : Region
    Region result;
    boolean_operation(op, result, *this, rhs);
    return result;
!!!45744311.cpp!!!	operation(in rhs : Region, in op : int) : Region
    Region result;
    boolean_operation(op, result, *this, rhs);
    return result;
!!!45744439.cpp!!!	operation(in rhs : Region, in dx : int, in dy : int, in op : int) : Region
    Region result;
    boolean_operation(op, result, *this, rhs, dx, dy);
    return result;
!!!45744567.cpp!!!	boolean_operation(in op : int, inout dst : Region, in lhs : Region, in rhs : Region, in dx : int, in dy : int) : void
#if VALIDATE_REGIONS
    validate(lhs, "boolean_operation (before): lhs");
    validate(rhs, "boolean_operation (before): rhs");
    validate(dst, "boolean_operation (before): dst");
#endif

    size_t lhs_count;
    Rect const * const lhs_rects = lhs.getArray(&lhs_count);

    size_t rhs_count;
    Rect const * const rhs_rects = rhs.getArray(&rhs_count);

    region_operator<Rect>::region lhs_region(lhs_rects, lhs_count);
    region_operator<Rect>::region rhs_region(rhs_rects, rhs_count, dx, dy);
    region_operator<Rect> operation(op, lhs_region, rhs_region);
    { // scope for rasterizer (dtor has side effects)
        rasterizer r(dst);
        operation(r);
    }

#if VALIDATE_REGIONS
    validate(lhs, "boolean_operation: lhs");
    validate(rhs, "boolean_operation: rhs");
    validate(dst, "boolean_operation: dst");
#endif

#if VALIDATE_WITH_CORECG
    SkRegion sk_lhs;
    SkRegion sk_rhs;
    SkRegion sk_dst;
    
    for (size_t i=0 ; i<lhs_count ; i++)
        sk_lhs.op(
                lhs_rects[i].left   + dx,
                lhs_rects[i].top    + dy,
                lhs_rects[i].right  + dx,
                lhs_rects[i].bottom + dy,
                SkRegion::kUnion_Op);
    
    for (size_t i=0 ; i<rhs_count ; i++)
        sk_rhs.op(
                rhs_rects[i].left   + dx,
                rhs_rects[i].top    + dy,
                rhs_rects[i].right  + dx,
                rhs_rects[i].bottom + dy,
                SkRegion::kUnion_Op);
 
    const char* name = "---";
    SkRegion::Op sk_op;
    switch (op) {
        case op_or: sk_op = SkRegion::kUnion_Op; name="OR"; break;
        case op_xor: sk_op = SkRegion::kUnion_XOR; name="XOR"; break;
        case op_and: sk_op = SkRegion::kIntersect_Op; name="AND"; break;
        case op_nand: sk_op = SkRegion::kDifference_Op; name="NAND"; break;
    }
    sk_dst.op(sk_lhs, sk_rhs, sk_op);

    if (sk_dst.isEmpty() && dst.isEmpty())
        return;
    
    bool same = true;
    Region::const_iterator head = dst.begin();
    Region::const_iterator const tail = dst.end();
    SkRegion::Iterator it(sk_dst);
    while (!it.done()) {
        if (head != tail) {
            if (
                    head->left != it.rect().fLeft ||     
                    head->top != it.rect().fTop ||     
                    head->right != it.rect().fRight ||     
                    head->bottom != it.rect().fBottom
            ) {
                same = false;
                break;
            }
        } else {
            same = false;
            break;
        }
        head++;
        it.next();
    }
    
    if (head != tail) {
        same = false;
    }
    
    if(!same) {
        ALOGD("---\nregion boolean %s failed", name);
        lhs.dump("lhs");
        rhs.dump("rhs");
        dst.dump("dst");
        ALOGD("should be");
        SkRegion::Iterator it(sk_dst);
        while (!it.done()) {
            ALOGD("    [%3d, %3d, %3d, %3d]",
                it.rect().fLeft,
                it.rect().fTop,
                it.rect().fRight,
                it.rect().fBottom);
            it.next();
        }
    }
#endif
!!!45744695.cpp!!!	boolean_operation(in op : int, inout dst : Region, in lhs : Region, in rhs : Rect, in dx : int, in dy : int) : void
    // We allow this particular flavor of invalid Rect, since it is used as a
    // signal value in various parts of the system
    if (!rhs.isValid() && rhs != Rect::INVALID_RECT) {
        ALOGE("Region::boolean_operation(op=%d) invalid Rect={%d,%d,%d,%d}",
                op, rhs.left, rhs.top, rhs.right, rhs.bottom);
        return;
    }

#if VALIDATE_WITH_CORECG || VALIDATE_REGIONS
    boolean_operation(op, dst, lhs, Region(rhs), dx, dy);
#else
    size_t lhs_count;
    Rect const * const lhs_rects = lhs.getArray(&lhs_count);

    region_operator<Rect>::region lhs_region(lhs_rects, lhs_count);
    region_operator<Rect>::region rhs_region(&rhs, 1, dx, dy);
    region_operator<Rect> operation(op, lhs_region, rhs_region);
    { // scope for rasterizer (dtor has side effects)
        rasterizer r(dst);
        operation(r);
    }

#endif
!!!45744823.cpp!!!	boolean_operation(in op : int, inout dst : Region, in lhs : Region, in rhs : Region) : void
    boolean_operation(op, dst, lhs, rhs, 0, 0);
!!!45744951.cpp!!!	boolean_operation(in op : int, inout dst : Region, in lhs : Region, in rhs : Rect) : void
    boolean_operation(op, dst, lhs, rhs, 0, 0);
!!!45745079.cpp!!!	translate(inout reg : Region, in dx : int, in dy : int) : void
    if ((dx || dy) && !reg.isEmpty()) {
#if VALIDATE_REGIONS
        validate(reg, "translate (before)");
#endif
        size_t count = reg.mStorage.size();
        Rect* rects = reg.mStorage.editArray();
        while (count) {
            rects->offsetBy(dx, dy);
            rects++;
            count--;
        }
#if VALIDATE_REGIONS
        validate(reg, "translate (after)");
#endif
    }
!!!45745207.cpp!!!	translate(inout dst : Region, in reg : Region, in dx : int, in dy : int) : void
    dst = reg;
    translate(dst, dx, dy);
!!!45745335.cpp!!!	validate(in reg : Region, in name : char, in silent : bool = false) : bool
    bool result = true;
    const_iterator cur = reg.begin();
    const_iterator const tail = reg.end();
    const_iterator prev = cur;
    Rect b(*prev);
    while (cur != tail) {
        if (cur->isValid() == false) {
            // We allow this particular flavor of invalid Rect, since it is used
            // as a signal value in various parts of the system
            if (*cur != Rect::INVALID_RECT) {
                ALOGE_IF(!silent, "%s: region contains an invalid Rect", name);
                result = false;
            }
        }
        if (cur->right > region_operator<Rect>::max_value) {
            ALOGE_IF(!silent, "%s: rect->right > max_value", name);
            result = false;
        }
        if (cur->bottom > region_operator<Rect>::max_value) {
            ALOGE_IF(!silent, "%s: rect->right > max_value", name);
            result = false;
        }
        if (prev != cur) {
            b.left   = b.left   < cur->left   ? b.left   : cur->left;
            b.top    = b.top    < cur->top    ? b.top    : cur->top;
            b.right  = b.right  > cur->right  ? b.right  : cur->right;
            b.bottom = b.bottom > cur->bottom ? b.bottom : cur->bottom;
            if ((*prev < *cur) == false) {
                ALOGE_IF(!silent, "%s: region's Rects not sorted", name);
                result = false;
            }
            if (cur->top == prev->top) {
                if (cur->bottom != prev->bottom) {
                    ALOGE_IF(!silent, "%s: invalid span %p", name, cur);
                    result = false;
                } else if (cur->left < prev->right) {
                    ALOGE_IF(!silent,
                            "%s: spans overlap horizontally prev=%p, cur=%p",
                            name, prev, cur);
                    result = false;
                }
            } else if (cur->top < prev->bottom) {
                ALOGE_IF(!silent,
                        "%s: spans overlap vertically prev=%p, cur=%p",
                        name, prev, cur);
                result = false;
            }
            prev = cur;
        }
        cur++;
    }
    if (b != reg.getBounds()) {
        result = false;
        ALOGE_IF(!silent,
                "%s: invalid bounds [%d,%d,%d,%d] vs. [%d,%d,%d,%d]", name,
                b.left, b.top, b.right, b.bottom,
                reg.getBounds().left, reg.getBounds().top, 
                reg.getBounds().right, reg.getBounds().bottom);
    }
    if (reg.mStorage.size() == 2) {
        result = false;
        ALOGE_IF(!silent, "%s: mStorage size is 2, which is never valid", name);
    }
    if (result == false && !silent) {
        reg.dump(name);
        CallStack stack(LOG_TAG);
    }
    return result;
