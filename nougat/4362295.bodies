class FrameStats
!!!45717815.cpp!!!	isFixedSize() : bool
    return false;
!!!45717943.cpp!!!	getFlattenedSize() : size_t
    const size_t timestampSize = sizeof(nsecs_t);

    size_t size = timestampSize;
    size += 3 * desiredPresentTimesNano.size() * timestampSize;

    return size;
!!!45718071.cpp!!!	flatten(inout buffer : void, in size : size_t) : status_t
    if (size < getFlattenedSize()) {
        return NO_MEMORY;
    }

    nsecs_t* timestamps = reinterpret_cast<nsecs_t*>(buffer);
    const size_t timestampSize = sizeof(nsecs_t);
    size_t frameCount = desiredPresentTimesNano.size();

    memcpy(timestamps, &refreshPeriodNano, timestampSize);
    timestamps += 1;

    memcpy(timestamps, desiredPresentTimesNano.array(), frameCount * timestampSize);
    timestamps += frameCount;

    memcpy(timestamps, actualPresentTimesNano.array(), frameCount * timestampSize);
    timestamps += frameCount;

    memcpy(timestamps, frameReadyTimesNano.array(), frameCount * timestampSize);

    return NO_ERROR;
!!!45718199.cpp!!!	unflatten(in buffer : void, in size : size_t) : status_t
    const size_t timestampSize = sizeof(nsecs_t);

    if (size < timestampSize) {
        return NO_MEMORY;
    }

    nsecs_t const* timestamps = reinterpret_cast<nsecs_t const*>(buffer);
    size_t frameCount = (size - timestampSize) / (3 * timestampSize);

    memcpy(&refreshPeriodNano, timestamps, timestampSize);
    timestamps += 1;

    desiredPresentTimesNano.resize(frameCount);
    memcpy(desiredPresentTimesNano.editArray(), timestamps, frameCount * timestampSize);
    timestamps += frameCount;

    actualPresentTimesNano.resize(frameCount);
    memcpy(actualPresentTimesNano.editArray(), timestamps, frameCount * timestampSize);
    timestamps += frameCount;

    frameReadyTimesNano.resize(frameCount);
    memcpy(frameReadyTimesNano.editArray(), timestamps, frameCount * timestampSize);

    return NO_ERROR;
