class SensorEventQueue
!!!45630263.cpp!!!	SensorEventQueue(in connection : sp<ISensorEventConnection>)
    mRecBuffer = new ASensorEvent[MAX_RECEIVE_BUFFER_EVENT_COUNT];
!!!45630391.cpp!!!	~SensorEventQueue()
    delete [] mRecBuffer;
!!!45630519.cpp!!!	onFirstRef() : void
    mSensorChannel = mSensorEventConnection->getSensorChannel();
!!!45630647.cpp!!!	getFd() : int
    return mSensorChannel->getFd();
!!!45630775.cpp!!!	write(in tube : sp<BitTube>, in events : ASensorEvent, in numEvents : size_t) : ssize_t
    return BitTube::sendObjects(tube, events, numEvents);
!!!45630903.cpp!!!	read(inout events : ASensorEvent, in numEvents : size_t) : ssize_t
    if (mAvailable == 0) {
        ssize_t err = BitTube::recvObjects(mSensorChannel,
                mRecBuffer, MAX_RECEIVE_BUFFER_EVENT_COUNT);
        if (err < 0) {
            return err;
        }
        mAvailable = static_cast<size_t>(err);
        mConsumed = 0;
    }
    size_t count = min(numEvents, mAvailable);
    memcpy(events, mRecBuffer + mConsumed, count * sizeof(ASensorEvent));
    mAvailable -= count;
    mConsumed += count;
    return static_cast<ssize_t>(count);
!!!45631031.cpp!!!	waitForEvent() : status_t
    const int fd = getFd();
    sp<Looper> looper(getLooper());

    int events;
    int32_t result;
    do {
        result = looper->pollOnce(-1, NULL, &events, NULL);
        if (result == ALOOPER_POLL_ERROR) {
            ALOGE("SensorEventQueue::waitForEvent error (errno=%d)", errno);
            result = -EPIPE; // unknown error, so we make up one
            break;
        }
        if (events & ALOOPER_EVENT_HANGUP) {
            // the other-side has died
            ALOGE("SensorEventQueue::waitForEvent error HANGUP");
            result = -EPIPE; // unknown error, so we make up one
            break;
        }
    } while (result != fd);

    return  (result == fd) ? status_t(NO_ERROR) : result;
!!!45631159.cpp!!!	wake() : status_t
    sp<Looper> looper(getLooper());
    looper->wake();
    return NO_ERROR;
!!!45631287.cpp!!!	enableSensor(in sensor : Sensor) : status_t
    return enableSensor(sensor, SENSOR_DELAY_NORMAL);
!!!45631415.cpp!!!	enableSensor(in sensor : Sensor, in samplingPeriodUs : int32_t) : status_t
    return mSensorEventConnection->enableDisable(sensor->getHandle(), true,
                                                 us2ns(samplingPeriodUs), 0, 0);
!!!45631543.cpp!!!	disableSensor(in sensor : Sensor) : status_t
    return mSensorEventConnection->enableDisable(sensor->getHandle(), false, 0, 0, 0);
!!!45631671.cpp!!!	setEventRate(in sensor : Sensor, in ns : nsecs_t) : status_t
    return mSensorEventConnection->setEventRate(sensor->getHandle(), ns);
!!!45631799.cpp!!!	enableSensor(in handle : int32_t, in samplingPeriodUs : int32_t, in maxBatchReportLatencyUs : int, in reservedFlags : int) : status_t
    return mSensorEventConnection->enableDisable(handle, true, us2ns(samplingPeriodUs),
                                                 us2ns(maxBatchReportLatencyUs), reservedFlags);
!!!45631927.cpp!!!	disableSensor(in handle : int32_t) : status_t
    return mSensorEventConnection->enableDisable(handle, false, 0, 0, false);
!!!45632055.cpp!!!	flush() : status_t
    return mSensorEventConnection->flush();
!!!45632183.cpp!!!	sendAck(in events : ASensorEvent, in count : int) : void
    for (int i = 0; i < count; ++i) {
        if (events[i].flags & WAKE_UP_SENSOR_EVENT_NEEDS_ACK) {
            ++mNumAcksToSend;
        }
    }
    // Send mNumAcksToSend to acknowledge for the wake up sensor events received.
    if (mNumAcksToSend > 0) {
        ssize_t size = ::send(mSensorChannel->getFd(), &mNumAcksToSend, sizeof(mNumAcksToSend),
                MSG_DONTWAIT | MSG_NOSIGNAL);
        if (size < 0) {
            ALOGE("sendAck failure %zd %d", size, mNumAcksToSend);
        } else {
            mNumAcksToSend = 0;
        }
    }
    return;
!!!45632311.cpp!!!	injectSensorEvent(in event : ASensorEvent) : status_t
    do {
        // Blocking call.
        ssize_t size = ::send(mSensorChannel->getFd(), &event, sizeof(event), MSG_NOSIGNAL);
        if (size >= 0) {
            return NO_ERROR;
        } else if (size < 0 && errno == EAGAIN) {
            // If send is returning a "Try again" error, sleep for 100ms and try again. In all
            // other cases log a failure and exit.
            usleep(100000);
        } else {
            ALOGE("injectSensorEvent failure %s %zd", strerror(errno), size);
            return INVALID_OPERATION;
        }
    } while (true);
!!!45632439.cpp!!!	getLooper() : sp<Looper>
    Mutex::Autolock _l(mLock);
    if (mLooper == 0) {
        mLooper = new Looper(true);
        mLooper->addFd(getFd(), getFd(), ALOOPER_EVENT_INPUT, NULL, NULL);
    }
    return mLooper;
