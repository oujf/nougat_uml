class ThemeImpl
!!!2858039.java!!!	ThemeImpl()
            mAssets = ResourcesImpl.this.mAssets;
            mTheme = mAssets.createTheme();
!!!2858167.java!!!	finalize() : void
            super.finalize();
            mAssets.releaseTheme(mTheme);
!!!2858295.java!!!	getKey() : Resources::ThemeKey
            return mKey;
!!!2858423.java!!!	getNativeTheme() : long
            return mTheme;
!!!2858551.java!!!	getAppliedStyleResId() : int
            return mThemeResId;
!!!2858679.java!!!	applyStyle(in resId : int, inout force : boolean) : void
            synchronized (mKey) {
                AssetManager.applyThemeStyle(mTheme, resId, force);

                mThemeResId = resId;
                mKey.append(resId, force);
            }
!!!2858807.java!!!	setTo(inout other : ResourcesImpl::ThemeImpl) : void
            synchronized (mKey) {
                synchronized (other.mKey) {
                    AssetManager.copyTheme(mTheme, other.mTheme);

                    mThemeResId = other.mThemeResId;
                    mKey.setTo(other.getKey());
                }
            }
!!!2858935.java!!!	obtainStyledAttributes(inout wrapper : Resources::Theme, inout set : AttributeSet, inout attrs : int, in defStyleAttr : int, in defStyleRes : int) : TypedArray
            synchronized (mKey) {
                final int len = attrs.length;
                final TypedArray array = TypedArray.obtain(wrapper.getResources(), len);

                // XXX note that for now we only work with compiled XML files.
                // To support generic XML files we will need to manually parse
                // out the attributes from the XML file (applying type information
                // contained in the resources and such).
                final XmlBlock.Parser parser = (XmlBlock.Parser) set;
                AssetManager.applyStyle(mTheme, defStyleAttr, defStyleRes,
                        parser != null ? parser.mParseState : 0,
                        attrs, array.mData, array.mIndices);
                array.mTheme = wrapper;
                array.mXml = parser;

                return array;
            }
!!!2859063.java!!!	resolveAttributes(inout wrapper : Resources::Theme, inout values : int, inout attrs : int) : TypedArray
            synchronized (mKey) {
                final int len = attrs.length;
                if (values == null || len != values.length) {
                    throw new IllegalArgumentException(
                            "Base attribute values must the same length as attrs");
                }

                final TypedArray array = TypedArray.obtain(wrapper.getResources(), len);
                AssetManager.resolveAttrs(mTheme, 0, 0, values, attrs, array.mData, array.mIndices);
                array.mTheme = wrapper;
                array.mXml = null;
                return array;
            }
!!!2859191.java!!!	resolveAttribute(in resid : int, inout outValue : TypedValue, inout resolveRefs : boolean) : boolean
            synchronized (mKey) {
                return mAssets.getThemeValue(mTheme, resid, outValue, resolveRefs);
            }
!!!2859319.java!!!	getAllAttributes() : int
            return mAssets.getStyleAttributes(getAppliedStyleResId());
!!!2859447.java!!!	getChangingConfigurations() : int
            synchronized (mKey) {
                final int nativeChangingConfig =
                        AssetManager.getThemeChangingConfigurations(mTheme);
                return ActivityInfo.activityInfoConfigNativeToJava(nativeChangingConfig);
            }
!!!2859575.java!!!	dump(in priority : int, inout tag : String, inout prefix : String) : void
            synchronized (mKey) {
                AssetManager.dumpTheme(mTheme, priority, tag, prefix);
            }
!!!2859703.java!!!	getTheme() : String
            synchronized (mKey) {
                final int N = mKey.mCount;
                final String[] themes = new String[N * 2];
                for (int i = 0, j = N - 1; i < themes.length; i += 2, --j) {
                    final int resId = mKey.mResId[j];
                    final boolean forced = mKey.mForce[j];
                    try {
                        themes[i] = getResourceName(resId);
                    } catch (NotFoundException e) {
                        themes[i] = Integer.toHexString(i);
                    }
                    themes[i + 1] = forced ? "forced" : "not forced";
                }
                return themes;
            }
!!!2859831.java!!!	rebase() : void
            synchronized (mKey) {
                AssetManager.clearTheme(mTheme);

                // Reapply the same styles in the same order.
                for (int i = 0; i < mKey.mCount; i++) {
                    final int resId = mKey.mResId[i];
                    final boolean force = mKey.mForce[i];
                    AssetManager.applyThemeStyle(mTheme, resId, force);
                }
            }
