class GraphicBufferMapper
!!!45724471.cpp!!!	registerBuffer(in handle : buffer_handle_t) : status_t
    ATRACE_CALL();
    status_t err;

    err = mAllocMod->registerBuffer(mAllocMod, handle);

    ALOGW_IF(err, "registerBuffer(%p) failed %d (%s)",
            handle, err, strerror(-err));
    return err;
!!!45724599.cpp!!!	unregisterBuffer(in handle : buffer_handle_t) : status_t
    ATRACE_CALL();
    status_t err;

    err = mAllocMod->unregisterBuffer(mAllocMod, handle);

    ALOGW_IF(err, "unregisterBuffer(%p) failed %d (%s)",
            handle, err, strerror(-err));
    return err;
!!!45724727.cpp!!!	lock(in handle : buffer_handle_t, in usage : uint32_t, in bounds : Rect, inout vaddr : void) : status_t
    ATRACE_CALL();
    status_t err;

    err = mAllocMod->lock(mAllocMod, handle, static_cast<int>(usage),
            bounds.left, bounds.top, bounds.width(), bounds.height(),
            vaddr);

    ALOGW_IF(err, "lock(...) failed %d (%s)", err, strerror(-err));
    return err;
!!!45724855.cpp!!!	lockYCbCr(in handle : buffer_handle_t, in usage : uint32_t, in bounds : Rect, inout ycbcr : android_ycbcr) : status_t
    ATRACE_CALL();
    status_t err;

    if (mAllocMod->lock_ycbcr == NULL) {
        return -EINVAL; // do not log failure
    }

    err = mAllocMod->lock_ycbcr(mAllocMod, handle, static_cast<int>(usage),
            bounds.left, bounds.top, bounds.width(), bounds.height(),
            ycbcr);

    ALOGW_IF(err, "lock(...) failed %d (%s)", err, strerror(-err));
    return err;
!!!45724983.cpp!!!	unlock(in handle : buffer_handle_t) : status_t
    ATRACE_CALL();
    status_t err;

    err = mAllocMod->unlock(mAllocMod, handle);

    ALOGW_IF(err, "unlock(...) failed %d (%s)", err, strerror(-err));
    return err;
!!!45725111.cpp!!!	lockAsync(in handle : buffer_handle_t, in usage : uint32_t, in bounds : Rect, inout vaddr : void, in fenceFd : int) : status_t
    ATRACE_CALL();
    status_t err;

    if (mAllocMod->common.module_api_version >= GRALLOC_MODULE_API_VERSION_0_3) {
        err = mAllocMod->lockAsync(mAllocMod, handle, static_cast<int>(usage),
                bounds.left, bounds.top, bounds.width(), bounds.height(),
                vaddr, fenceFd);
    } else {
        if (fenceFd >= 0) {
            sync_wait(fenceFd, -1);
            close(fenceFd);
        }
        err = mAllocMod->lock(mAllocMod, handle, static_cast<int>(usage),
                bounds.left, bounds.top, bounds.width(), bounds.height(),
                vaddr);
    }

    ALOGW_IF(err, "lockAsync(...) failed %d (%s)", err, strerror(-err));
    return err;
!!!45725239.cpp!!!	lockAsyncYCbCr(in handle : buffer_handle_t, in usage : uint32_t, in bounds : Rect, inout ycbcr : android_ycbcr, in fenceFd : int) : status_t
    ATRACE_CALL();
    status_t err;

    if (mAllocMod->common.module_api_version >= GRALLOC_MODULE_API_VERSION_0_3
            && mAllocMod->lockAsync_ycbcr != NULL) {
        err = mAllocMod->lockAsync_ycbcr(mAllocMod, handle,
                static_cast<int>(usage), bounds.left, bounds.top,
                bounds.width(), bounds.height(), ycbcr, fenceFd);
    } else if (mAllocMod->lock_ycbcr != NULL) {
        if (fenceFd >= 0) {
            sync_wait(fenceFd, -1);
            close(fenceFd);
        }
        err = mAllocMod->lock_ycbcr(mAllocMod, handle, static_cast<int>(usage),
                bounds.left, bounds.top, bounds.width(), bounds.height(),
                ycbcr);
    } else {
        if (fenceFd >= 0) {
            close(fenceFd);
        }
        return -EINVAL; // do not log failure
    }

    ALOGW_IF(err, "lock(...) failed %d (%s)", err, strerror(-err));
    return err;
!!!45725367.cpp!!!	unlockAsync(in handle : buffer_handle_t, inout fenceFd : int) : status_t
    ATRACE_CALL();
    status_t err;

    if (mAllocMod->common.module_api_version >= GRALLOC_MODULE_API_VERSION_0_3) {
        err = mAllocMod->unlockAsync(mAllocMod, handle, fenceFd);
    } else {
        *fenceFd = -1;
        err = mAllocMod->unlock(mAllocMod, handle);
    }

    ALOGW_IF(err, "unlockAsync(...) failed %d (%s)", err, strerror(-err));
    return err;
