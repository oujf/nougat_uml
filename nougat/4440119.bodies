class EGLBufferObjectManager
!!!45755319.cpp!!!	~EGLBufferObjectManager()
    // destroy all the buffer objects and their storage
    GLsizei n = mBuffers.size();
    for (GLsizei i=0 ; i<n ; i++) {
        buffer_t* bo = mBuffers.valueAt(i);
        free(bo->data);
        delete bo;
    }
!!!45755447.cpp!!!	incStrong(in id : void) : void
    mCount.fetch_add(1, std::memory_order_relaxed);
!!!45755575.cpp!!!	decStrong(in id : void) : void
    if (mCount.fetch_sub(1, std::memory_order_release) == 0) {
        std::atomic_thread_fence(std::memory_order_acquire);
        delete this;
    }
!!!45755703.cpp!!!	bind(in buffer : GLuint) : buffer_t
    Mutex::Autolock _l(mLock);
    int32_t i = mBuffers.indexOfKey(buffer);
    if (i >= 0) {
        return mBuffers.valueAt(i);
    }
    buffer_t* bo = new buffer_t;
    bo->data = 0;
    bo->usage = GL_STATIC_DRAW;
    bo->size = 0;
    bo->name = buffer;
    mBuffers.add(buffer, bo);
    return bo;
!!!45755831.cpp!!!	allocateStore(inout bo : buffer_t, in size : GLsizeiptr, in usage : GLenum) : int
    Mutex::Autolock _l(mLock);
    if (size != bo->size) {
       uint8_t* data = (uint8_t*)malloc(size);
        if (data == 0)
            return -1;
        free(bo->data);
        bo->data = data;
        bo->size = size;
    }
    bo->usage = usage;
    return 0;
!!!45755959.cpp!!!	deleteBuffers(in n : GLsizei, in buffers : GLuint) : void
    Mutex::Autolock _l(mLock);
    while (n--) {
        const GLuint t = *buffers++;
        if (t) {
            int32_t index = mBuffers.indexOfKey(t);
            if (index >= 0) {
                buffer_t* bo = mBuffers.valueAt(index);
                free(bo->data);
                mBuffers.removeItemsAt(index);
                delete bo;
            }
        }
    }
