class InsertHelper
!!!2916919.java!!!	InsertHelper(inout db : SQLiteDatabase, inout tableName : String)
            mDb = db;
            mTableName = tableName;
!!!2917047.java!!!	buildSQL() : void
            StringBuilder sb = new StringBuilder(128);
            sb.append("INSERT INTO ");
            sb.append(mTableName);
            sb.append(" (");

            StringBuilder sbv = new StringBuilder(128);
            sbv.append("VALUES (");

            int i = 1;
            Cursor cur = null;
            try {
                cur = mDb.rawQuery("PRAGMA table_info(" + mTableName + ")", null);
                mColumns = new HashMap<String, Integer>(cur.getCount());
                while (cur.moveToNext()) {
                    String columnName = cur.getString(TABLE_INFO_PRAGMA_COLUMNNAME_INDEX);
                    String defaultValue = cur.getString(TABLE_INFO_PRAGMA_DEFAULT_INDEX);

                    mColumns.put(columnName, i);
                    sb.append("'");
                    sb.append(columnName);
                    sb.append("'");

                    if (defaultValue == null) {
                        sbv.append("?");
                    } else {
                        sbv.append("COALESCE(?, ");
                        sbv.append(defaultValue);
                        sbv.append(")");
                    }

                    sb.append(i == cur.getCount() ? ") " : ", ");
                    sbv.append(i == cur.getCount() ? ");" : ", ");
                    ++i;
                }
            } finally {
                if (cur != null) cur.close();
            }

            sb.append(sbv);

            mInsertSQL = sb.toString();
            if (DEBUG) Log.v(TAG, "insert statement is " + mInsertSQL);
!!!2917175.java!!!	getStatement(inout allowReplace : boolean) : SQLiteStatement
            if (allowReplace) {
                if (mReplaceStatement == null) {
                    if (mInsertSQL == null) buildSQL();
                    // chop "INSERT" off the front and prepend "INSERT OR REPLACE" instead.
                    String replaceSQL = "INSERT OR REPLACE" + mInsertSQL.substring(6);
                    mReplaceStatement = mDb.compileStatement(replaceSQL);
                }
                return mReplaceStatement;
            } else {
                if (mInsertStatement == null) {
                    if (mInsertSQL == null) buildSQL();
                    mInsertStatement = mDb.compileStatement(mInsertSQL);
                }
                return mInsertStatement;
            }
!!!2917303.java!!!	insertInternal(inout values : ContentValues, inout allowReplace : boolean) : long
            // Start a transaction even though we don't really need one.
            // This is to help maintain compatibility with applications that
            // access InsertHelper from multiple threads even though they never should have.
            // The original code used to lock the InsertHelper itself which was prone
            // to deadlocks.  Starting a transaction achieves the same mutual exclusion
            // effect as grabbing a lock but without the potential for deadlocks.
            mDb.beginTransactionNonExclusive();
            try {
                SQLiteStatement stmt = getStatement(allowReplace);
                stmt.clearBindings();
                if (DEBUG) Log.v(TAG, "--- inserting in table " + mTableName);
                for (Map.Entry<String, Object> e: values.valueSet()) {
                    final String key = e.getKey();
                    int i = getColumnIndex(key);
                    DatabaseUtils.bindObjectToProgram(stmt, i, e.getValue());
                    if (DEBUG) {
                        Log.v(TAG, "binding " + e.getValue() + " to column " +
                              i + " (" + key + ")");
                    }
                }
                long result = stmt.executeInsert();
                mDb.setTransactionSuccessful();
                return result;
            } catch (SQLException e) {
                Log.e(TAG, "Error inserting " + values + " into table  " + mTableName, e);
                return -1;
            } finally {
                mDb.endTransaction();
            }
!!!2917431.java!!!	getColumnIndex(inout key : String) : int
            getStatement(false);
            final Integer index = mColumns.get(key);
            if (index == null) {
                throw new IllegalArgumentException("column '" + key + "' is invalid");
            }
            return index;
!!!2917559.java!!!	bind(in index : int, in value : double) : void
            mPreparedStatement.bindDouble(index, value);
!!!2917687.java!!!	bind(in index : int, in value : float) : void
            mPreparedStatement.bindDouble(index, value);
!!!2917815.java!!!	bind(in index : int, in value : long) : void
            mPreparedStatement.bindLong(index, value);
!!!2917943.java!!!	bind(in index : int, in value : int) : void
            mPreparedStatement.bindLong(index, value);
!!!2918071.java!!!	bind(in index : int, inout value : boolean) : void
            mPreparedStatement.bindLong(index, value ? 1 : 0);
!!!2918199.java!!!	bindNull(in index : int) : void
            mPreparedStatement.bindNull(index);
!!!2918327.java!!!	bind(in index : int, inout value : byte) : void
            if (value == null) {
                mPreparedStatement.bindNull(index);
            } else {
                mPreparedStatement.bindBlob(index, value);
            }
!!!2918455.java!!!	bind(in index : int, inout value : String) : void
            if (value == null) {
                mPreparedStatement.bindNull(index);
            } else {
                mPreparedStatement.bindString(index, value);
            }
!!!2918583.java!!!	insert(inout values : ContentValues) : long
            return insertInternal(values, false);
!!!2918711.java!!!	execute() : long
            if (mPreparedStatement == null) {
                throw new IllegalStateException("you must prepare this inserter before calling "
                        + "execute");
            }
            try {
                if (DEBUG) Log.v(TAG, "--- doing insert or replace in table " + mTableName);
                return mPreparedStatement.executeInsert();
            } catch (SQLException e) {
                Log.e(TAG, "Error executing InsertHelper with table " + mTableName, e);
                return -1;
            } finally {
                // you can only call this once per prepare
                mPreparedStatement = null;
            }
!!!2918839.java!!!	prepareForInsert() : void
            mPreparedStatement = getStatement(false);
            mPreparedStatement.clearBindings();
!!!2918967.java!!!	prepareForReplace() : void
            mPreparedStatement = getStatement(true);
            mPreparedStatement.clearBindings();
!!!2919095.java!!!	replace(inout values : ContentValues) : long
            return insertInternal(values, true);
!!!2919223.java!!!	close() : void
            if (mInsertStatement != null) {
                mInsertStatement.close();
                mInsertStatement = null;
            }
            if (mReplaceStatement != null) {
                mReplaceStatement.close();
                mReplaceStatement = null;
            }
            mInsertSQL = null;
            mColumns = null;
