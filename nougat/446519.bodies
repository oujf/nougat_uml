class MergeCursor
!!!2923191.java!!!	MergeCursor(inout cursors : Cursor)
        mCursors = cursors;
        mCursor = cursors[0];
        
        for (int i = 0; i < mCursors.length; i++) {
            if (mCursors[i] == null) continue;
            
            mCursors[i].registerDataSetObserver(mObserver);
        }
!!!2923319.java!!!	getCount() : int
        int count = 0;
        int length = mCursors.length;
        for (int i = 0 ; i < length ; i++) {
            if (mCursors[i] != null) {
                count += mCursors[i].getCount();
            }
        }
        return count;
!!!2923447.java!!!	onMove(in oldPosition : int, in newPosition : int) : boolean
        /* Find the right cursor */
        mCursor = null;
        int cursorStartPos = 0;
        int length = mCursors.length;
        for (int i = 0 ; i < length; i++) {
            if (mCursors[i] == null) {
                continue;
            }
            
            if (newPosition < (cursorStartPos + mCursors[i].getCount())) {
                mCursor = mCursors[i];
                break;
            }

            cursorStartPos += mCursors[i].getCount();
        }

        /* Move it to the right position */
        if (mCursor != null) {
            boolean ret = mCursor.moveToPosition(newPosition - cursorStartPos);
            return ret;
        }
        return false;
!!!2923575.java!!!	getString(in column : int) : String
        return mCursor.getString(column);
!!!2923703.java!!!	getShort(in column : int) : short
        return mCursor.getShort(column);
!!!2923831.java!!!	getInt(in column : int) : int
        return mCursor.getInt(column);
!!!2923959.java!!!	getLong(in column : int) : long
        return mCursor.getLong(column);
!!!2924087.java!!!	getFloat(in column : int) : float
        return mCursor.getFloat(column);
!!!2924215.java!!!	getDouble(in column : int) : double
        return mCursor.getDouble(column);
!!!2924343.java!!!	getType(in column : int) : int
        return mCursor.getType(column);
!!!2924471.java!!!	isNull(in column : int) : boolean
        return mCursor.isNull(column);
!!!2924599.java!!!	getBlob(in column : int) : byte
        return mCursor.getBlob(column);   
!!!2924727.java!!!	getColumnNames() : String
        if (mCursor != null) {
            return mCursor.getColumnNames();
        } else {
            return new String[0];
        }
!!!2924855.java!!!	deactivate() : void
        int length = mCursors.length;
        for (int i = 0 ; i < length ; i++) {
            if (mCursors[i] != null) {
                mCursors[i].deactivate();
            }
        }
        super.deactivate();
!!!2924983.java!!!	close() : void
        int length = mCursors.length;
        for (int i = 0 ; i < length ; i++) {
            if (mCursors[i] == null) continue;
            mCursors[i].close();
        }
        super.close();
!!!2925111.java!!!	registerContentObserver(inout observer : ContentObserver) : void
        int length = mCursors.length;
        for (int i = 0 ; i < length ; i++) {
            if (mCursors[i] != null) {
                mCursors[i].registerContentObserver(observer);
            }
        }
!!!2925239.java!!!	unregisterContentObserver(inout observer : ContentObserver) : void
        int length = mCursors.length;
        for (int i = 0 ; i < length ; i++) {
            if (mCursors[i] != null) {
                mCursors[i].unregisterContentObserver(observer);
            }
        }
!!!2925367.java!!!	registerDataSetObserver(inout observer : DataSetObserver) : void
        int length = mCursors.length;
        for (int i = 0 ; i < length ; i++) {
            if (mCursors[i] != null) {
                mCursors[i].registerDataSetObserver(observer);
            }
        }
!!!2925495.java!!!	unregisterDataSetObserver(inout observer : DataSetObserver) : void
        int length = mCursors.length;
        for (int i = 0 ; i < length ; i++) {
            if (mCursors[i] != null) {
                mCursors[i].unregisterDataSetObserver(observer);
            }
        }
!!!2925623.java!!!	requery() : boolean
        int length = mCursors.length;
        for (int i = 0 ; i < length ; i++) {
            if (mCursors[i] == null) {
                continue;
            }

            if (mCursors[i].requery() == false) {
                return false;
            }
        }

        return true;
