class FenceTracker
!!!45928247.cpp!!!	dump(inout outString : String8) : void
    Mutex::Autolock lock(mMutex);
    checkFencesForCompletion();

    for (size_t i = 0; i < MAX_FRAME_HISTORY; i++) {
        int index = (mOffset + i) % MAX_FRAME_HISTORY;
        const FrameRecord& frame = mFrames[index];

        outString->appendFormat("Frame %" PRIu64 "\n", frame.frameId);
        outString->appendFormat("- Refresh start\t%" PRId64 "\n",
                frame.refreshStartTime);

        if (frame.glesCompositionDoneTime) {
            outString->appendFormat("- GLES done\t%" PRId64 "\n",
                    frame.glesCompositionDoneTime);
        } else if (frame.glesCompositionDoneFence != Fence::NO_FENCE) {
            outString->append("- GLES done\tNot signaled\n");
        }
        if (frame.retireTime) {
            outString->appendFormat("- Retire\t%" PRId64 "\n",
                    frame.retireTime);
        } else {
            outString->append("- Retire\tNot signaled\n");
        }
        for (const auto& kv : frame.layers) {
            const LayerRecord& layer = kv.second;
            outString->appendFormat("-- %s\n", layer.name.string());
            outString->appendFormat("---- Frame # %" PRIu64 " (%s)\n",
                    layer.frameNumber,
                    layer.isGlesComposition ? "GLES" : "HWC");
            outString->appendFormat("---- Posted\t%" PRId64 "\n",
                    layer.postedTime);
            if (layer.acquireTime) {
                outString->appendFormat("---- Acquire\t%" PRId64 "\n",
                        layer.acquireTime);
            } else {
                outString->append("---- Acquire\tNot signaled\n");
            }
            if (layer.releaseTime) {
                outString->appendFormat("---- Release\t%" PRId64 "\n",
                        layer.releaseTime);
            } else {
                outString->append("---- Release\tNot signaled\n");
            }
        }
    }
