class MonitoredProducer
!!!45948215.cpp!!!	~MonitoredProducer()
    // Remove ourselves from SurfaceFlinger's list. We do this asynchronously
    // because we don't know where this destructor is called from. It could be
    // called with the mStateLock held, leading to a dead-lock (it actually
    // happens).
    class MessageCleanUpList : public MessageBase {
    public:
        MessageCleanUpList(const sp<SurfaceFlinger>& flinger,
                const wp<IBinder>& producer)
            : mFlinger(flinger), mProducer(producer) {}

        virtual ~MessageCleanUpList() {}

        virtual bool handler() {
            Mutex::Autolock _l(mFlinger->mStateLock);
            mFlinger->mGraphicBufferProducerList.remove(mProducer);
            return true;
        }

    private:
        sp<SurfaceFlinger> mFlinger;
        wp<IBinder> mProducer;
    };

    mFlinger->postMessageAsync(new MessageCleanUpList(mFlinger, asBinder(this)));
!!!45948343.cpp!!!	requestBuffer(in slot : int, inout buf : sp<GraphicBuffer>) : status_t
    return mProducer->requestBuffer(slot, buf);
!!!45948471.cpp!!!	setMaxDequeuedBufferCount(in maxDequeuedBuffers : int) : status_t
    return mProducer->setMaxDequeuedBufferCount(maxDequeuedBuffers);
!!!45948599.cpp!!!	setAsyncMode(in async : bool) : status_t
    return mProducer->setAsyncMode(async);
!!!45948727.cpp!!!	dequeueBuffer(inout slot : int, inout fence : sp<Fence>, in w : uint32_t, in h : uint32_t, in format : PixelFormat, in usage : uint32_t) : status_t
    return mProducer->dequeueBuffer(slot, fence, w, h, format, usage);
!!!45948855.cpp!!!	detachBuffer(in slot : int) : status_t
    return mProducer->detachBuffer(slot);
!!!45948983.cpp!!!	detachNextBuffer(inout outBuffer : sp<GraphicBuffer>, inout outFence : sp<Fence>) : status_t
    return mProducer->detachNextBuffer(outBuffer, outFence);
!!!45949111.cpp!!!	attachBuffer(inout outSlot : int, in buffer : sp<GraphicBuffer>) : status_t
    return mProducer->attachBuffer(outSlot, buffer);
!!!45949239.cpp!!!	queueBuffer(in slot : int, in input : QueueBufferInput, inout output : QueueBufferOutput) : status_t
    return mProducer->queueBuffer(slot, input, output);
!!!45949367.cpp!!!	cancelBuffer(in slot : int, in fence : sp<Fence>) : status_t
    return mProducer->cancelBuffer(slot, fence);
!!!45949495.cpp!!!	query(in what : int, inout value : int) : int
    return mProducer->query(what, value);
!!!45949623.cpp!!!	connect(in listener : sp<IProducerListener>, in api : int, in producerControlledByApp : bool, inout output : QueueBufferOutput) : status_t
    return mProducer->connect(listener, api, producerControlledByApp, output);
!!!45949751.cpp!!!	disconnect(in api : int) : status_t
    return mProducer->disconnect(api);
!!!45949879.cpp!!!	setSidebandStream(in stream : sp<NativeHandle>) : status_t
    return mProducer->setSidebandStream(stream);
!!!45950007.cpp!!!	allocateBuffers(in width : uint32_t, in height : uint32_t, in format : PixelFormat, in usage : uint32_t) : void
    mProducer->allocateBuffers(width, height, format, usage);
!!!45950135.cpp!!!	allowAllocation(in allow : bool) : status_t
    return mProducer->allowAllocation(allow);
!!!45950263.cpp!!!	setGenerationNumber(in generationNumber : uint32_t) : status_t
    return mProducer->setGenerationNumber(generationNumber);
!!!45950391.cpp!!!	getConsumerName() : String8
    return mProducer->getConsumerName();
!!!45950519.cpp!!!	getNextFrameNumber() : uint64_t
    return mProducer->getNextFrameNumber();
!!!45950903.cpp!!!	onAsBinder() : IBinder
    return IInterface::asBinder(mProducer).get();
