class SQLiteQueryBuilder
!!!2970295.java!!!	SQLiteQueryBuilder()
        mDistinct = false;
        mFactory = null;
!!!2970423.java!!!	setDistinct(inout distinct : boolean) : void
        mDistinct = distinct;
!!!2970551.java!!!	getTables() : String
        return mTables;
!!!2970679.java!!!	setTables(inout inTables : String) : void
        mTables = inTables;
!!!2970807.java!!!	appendWhere(inout inWhere : CharSequence) : void
        if (mWhereClause == null) {
            mWhereClause = new StringBuilder(inWhere.length() + 16);
        }
        if (mWhereClause.length() == 0) {
            mWhereClause.append('(');
        }
        mWhereClause.append(inWhere);
!!!2970935.java!!!	appendWhereEscapeString(inout inWhere : String) : void
        if (mWhereClause == null) {
            mWhereClause = new StringBuilder(inWhere.length() + 16);
        }
        if (mWhereClause.length() == 0) {
            mWhereClause.append('(');
        }
        DatabaseUtils.appendEscapedSQLString(mWhereClause, inWhere);
!!!2971063.java!!!	setProjectionMap(inout columnMap : Map<String, String>) : void
        mProjectionMap = columnMap;
!!!2971191.java!!!	setCursorFactory(inout factory : SQLiteDatabase::CursorFactory) : void
        mFactory = factory;
!!!2971319.java!!!	setStrict(inout flag : boolean) : void
        mStrict = flag;
!!!2971447.java!!!	buildQueryString(inout distinct : boolean, inout tables : String, inout columns : String, inout where : String, inout groupBy : String, inout having : String, inout orderBy : String, inout limit : String) : String
        if (TextUtils.isEmpty(groupBy) && !TextUtils.isEmpty(having)) {
            throw new IllegalArgumentException(
                    "HAVING clauses are only permitted when using a groupBy clause");
        }
        if (!TextUtils.isEmpty(limit) && !sLimitPattern.matcher(limit).matches()) {
            throw new IllegalArgumentException("invalid LIMIT clauses:" + limit);
        }

        StringBuilder query = new StringBuilder(120);

        query.append("SELECT ");
        if (distinct) {
            query.append("DISTINCT ");
        }
        if (columns != null && columns.length != 0) {
            appendColumns(query, columns);
        } else {
            query.append("* ");
        }
        query.append("FROM ");
        query.append(tables);
        appendClause(query, " WHERE ", where);
        appendClause(query, " GROUP BY ", groupBy);
        appendClause(query, " HAVING ", having);
        appendClause(query, " ORDER BY ", orderBy);
        appendClause(query, " LIMIT ", limit);

        return query.toString();
!!!2971575.java!!!	appendClause(inout s : StringBuilder, inout name : String, inout clause : String) : void
        if (!TextUtils.isEmpty(clause)) {
            s.append(name);
            s.append(clause);
        }
!!!2971703.java!!!	appendColumns(inout s : StringBuilder, inout columns : String) : void
        int n = columns.length;

        for (int i = 0; i < n; i++) {
            String column = columns[i];

            if (column != null) {
                if (i > 0) {
                    s.append(", ");
                }
                s.append(column);
            }
        }
        s.append(' ');
!!!2971831.java!!!	query(inout db : SQLiteDatabase, inout projectionIn : String, inout selection : String, inout selectionArgs : String, inout groupBy : String, inout having : String, inout sortOrder : String) : Cursor
        return query(db, projectionIn, selection, selectionArgs, groupBy, having, sortOrder,
                null /* limit */, null /* cancellationSignal */);
!!!2971959.java!!!	query(inout db : SQLiteDatabase, inout projectionIn : String, inout selection : String, inout selectionArgs : String, inout groupBy : String, inout having : String, inout sortOrder : String, inout limit : String) : Cursor
        return query(db, projectionIn, selection, selectionArgs,
                groupBy, having, sortOrder, limit, null);
!!!2972087.java!!!	query(inout db : SQLiteDatabase, inout projectionIn : String, inout selection : String, inout selectionArgs : String, inout groupBy : String, inout having : String, inout sortOrder : String, inout limit : String, inout cancellationSignal : CancellationSignal) : Cursor
        if (mTables == null) {
            return null;
        }

        if (mStrict && selection != null && selection.length() > 0) {
            // Validate the user-supplied selection to detect syntactic anomalies
            // in the selection string that could indicate a SQL injection attempt.
            // The idea is to ensure that the selection clause is a valid SQL expression
            // by compiling it twice: once wrapped in parentheses and once as
            // originally specified. An attacker cannot create an expression that
            // would escape the SQL expression while maintaining balanced parentheses
            // in both the wrapped and original forms.
            String sqlForValidation = buildQuery(projectionIn, "(" + selection + ")", groupBy,
                    having, sortOrder, limit);
            db.validateSql(sqlForValidation, cancellationSignal); // will throw if query is invalid
        }

        String sql = buildQuery(
                projectionIn, selection, groupBy, having,
                sortOrder, limit);

        if (Log.isLoggable(TAG, Log.DEBUG)) {
            Log.d(TAG, "Performing query: " + sql);
        }
        return db.rawQueryWithFactory(
                mFactory, sql, selectionArgs,
                SQLiteDatabase.findEditTable(mTables),
                cancellationSignal); // will throw if query is invalid
!!!2972215.java!!!	buildQuery(inout projectionIn : String, inout selection : String, inout groupBy : String, inout having : String, inout sortOrder : String, inout limit : String) : String
        String[] projection = computeProjection(projectionIn);

        StringBuilder where = new StringBuilder();
        boolean hasBaseWhereClause = mWhereClause != null && mWhereClause.length() > 0;

        if (hasBaseWhereClause) {
            where.append(mWhereClause.toString());
            where.append(')');
        }

        // Tack on the user's selection, if present.
        if (selection != null && selection.length() > 0) {
            if (hasBaseWhereClause) {
                where.append(" AND ");
            }

            where.append('(');
            where.append(selection);
            where.append(')');
        }

        return buildQueryString(
                mDistinct, mTables, projection, where.toString(),
                groupBy, having, sortOrder, limit);
!!!2972343.java!!!	buildQuery(inout projectionIn : String, inout selection : String, inout selectionArgs : String, inout groupBy : String, inout having : String, inout sortOrder : String, inout limit : String) : String
        return buildQuery(projectionIn, selection, groupBy, having, sortOrder, limit);
!!!2972471.java!!!	buildUnionSubQuery(inout typeDiscriminatorColumn : String, inout unionColumns : String, inout columnsPresentInTable : Set<String>, in computedColumnsOffset : int, inout typeDiscriminatorValue : String, inout selection : String, inout groupBy : String, inout having : String) : String
        int unionColumnsCount = unionColumns.length;
        String[] projectionIn = new String[unionColumnsCount];

        for (int i = 0; i < unionColumnsCount; i++) {
            String unionColumn = unionColumns[i];

            if (unionColumn.equals(typeDiscriminatorColumn)) {
                projectionIn[i] = "'" + typeDiscriminatorValue + "' AS "
                        + typeDiscriminatorColumn;
            } else if (i <= computedColumnsOffset
                       || columnsPresentInTable.contains(unionColumn)) {
                projectionIn[i] = unionColumn;
            } else {
                projectionIn[i] = "NULL AS " + unionColumn;
            }
        }
        return buildQuery(
                projectionIn, selection, groupBy, having,
                null /* sortOrder */,
                null /* limit */);
!!!2972599.java!!!	buildUnionSubQuery(inout typeDiscriminatorColumn : String, inout unionColumns : String, inout columnsPresentInTable : Set<String>, in computedColumnsOffset : int, inout typeDiscriminatorValue : String, inout selection : String, inout selectionArgs : String, inout groupBy : String, inout having : String) : String
        return buildUnionSubQuery(
                typeDiscriminatorColumn, unionColumns, columnsPresentInTable,
                computedColumnsOffset, typeDiscriminatorValue, selection,
                groupBy, having);
!!!2972727.java!!!	buildUnionQuery(inout subQueries : String, inout sortOrder : String, inout limit : String) : String
        StringBuilder query = new StringBuilder(128);
        int subQueryCount = subQueries.length;
        String unionOperator = mDistinct ? " UNION " : " UNION ALL ";

        for (int i = 0; i < subQueryCount; i++) {
            if (i > 0) {
                query.append(unionOperator);
            }
            query.append(subQueries[i]);
        }
        appendClause(query, " ORDER BY ", sortOrder);
        appendClause(query, " LIMIT ", limit);
        return query.toString();
!!!2972855.java!!!	computeProjection(inout projectionIn : String) : String
        if (projectionIn != null && projectionIn.length > 0) {
            if (mProjectionMap != null) {
                String[] projection = new String[projectionIn.length];
                int length = projectionIn.length;

                for (int i = 0; i < length; i++) {
                    String userColumn = projectionIn[i];
                    String column = mProjectionMap.get(userColumn);

                    if (column != null) {
                        projection[i] = column;
                        continue;
                    }

                    if (!mStrict &&
                            ( userColumn.contains(" AS ") || userColumn.contains(" as "))) {
                        /* A column alias already exist */
                        projection[i] = userColumn;
                        continue;
                    }

                    throw new IllegalArgumentException("Invalid column "
                            + projectionIn[i]);
                }
                return projection;
            } else {
                return projectionIn;
            }
        } else if (mProjectionMap != null) {
            // Return all columns in projection map.
            Set<Entry<String, String>> entrySet = mProjectionMap.entrySet();
            String[] projection = new String[entrySet.size()];
            Iterator<Entry<String, String>> entryIter = entrySet.iterator();
            int i = 0;

            while (entryIter.hasNext()) {
                Entry<String, String> entry = entryIter.next();

                // Don't include the _count column when people ask for no projection.
                if (entry.getKey().equals(BaseColumns._COUNT)) {
                    continue;
                }
                projection[i++] = entry.getValue();
            }
            return projection;
        }
        return null;
