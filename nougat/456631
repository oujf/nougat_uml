format 76
"dumpstate" // nougat_src::frameworks::native::cmds::dumpstate
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/cmds/dumpstate/"
  cpp_src_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/cmds/dumpstate/"
  classview 408759 "dumpstate"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 4327479 "for_each_pid_func"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}( ${name})(int, const char *);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 4327607 "for_each_tid_func"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}( ${name})(int, int, const char *);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 4327735 "RootMode"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 13648567 "DROP_ROOT"
	public type class_ref 4327735 // RootMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13648695 "DONT_DROP_ROOT"
	public type class_ref 4327735 // RootMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4327863 "StdoutMode"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 13648823 "NORMAL_STDOUT"
	public type class_ref 4327863 // StdoutMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13648951 "REDIRECT_TO_STDERR"
	public type class_ref 4327863 // StdoutMode
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4327991 "DurationReporter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Helper class used to report how long it takes for a section to finish.

Typical usage:

   DurationReporter duration_reporter(title);
"
      operation 45536695 "DurationReporter"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "title" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// media.codec
// media.extractor

${inline}${class}::${name}${(}const ${t0} * ${p0}${)} : DurationReporter(title, stdout) ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45536823 "DurationReporter"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "title" explicit_type "char"
	  param inout name "out" explicit_type "FILE"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45536951 "~DurationReporter"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45537079 "nanotime"
	class_operation public explicit_return_type "uint64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 13649079 "title_"
	const_attribute private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13649207 "out_"
	private explicit_type "FILE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13649335 "started_"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4530103 "tombstone_data_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 14333367 "name"
	public explicit_type "char"
	multiplicity "[TOMBSTONE_MAX_LEN]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 14333495 "fd"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end
  end

  deploymentview 351799 "dumpstate"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1864503 "dumpstate"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4327479 // for_each_pid_func
	class_ref 4327607 // for_each_tid_func
	class_ref 4327735 // RootMode
	class_ref 4327863 // StdoutMode
	class_ref 4327991 // DurationReporter
      end
    end

    artifact 1901367 "tombstone_data_t"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4530103 // tombstone_data_t
      end
    end

    artifact 1901495 "main"
      stereotype "source"
      cpp_src "int main(int argc, char *argv[]) {
    struct sigaction sigact;
    int do_add_date = 0;
    int do_zip_file = 0;
    int do_vibrate = 1;
    char* use_outfile = 0;
    int use_socket = 0;
    int use_control_socket = 0;
    int do_fb = 0;
    int do_broadcast = 0;
    int do_early_screenshot = 0;
    int is_remote_mode = 0;
    std::string version = VERSION_DEFAULT;

    now = time(NULL);

    MYLOGI(\"begin\\n\");

    /* gets the sequential id */
    char last_id[PROPERTY_VALUE_MAX];
    property_get(\"dumpstate.last_id\", last_id, \"0\");
    id = strtoul(last_id, NULL, 10) + 1;
    snprintf(last_id, sizeof(last_id), \"%lu\", id);
    property_set(\"dumpstate.last_id\", last_id);
    MYLOGI(\"dumpstate id: %lu\\n\", id);

    /* clear SIGPIPE handler */
    memset(&sigact, 0, sizeof(sigact));
    sigact.sa_handler = sigpipe_handler;
    sigaction(SIGPIPE, &sigact, NULL);

    /* set as high priority, and protect from OOM killer */
    setpriority(PRIO_PROCESS, 0, -20);
    FILE *oom_adj = fopen(\"/proc/self/oom_adj\", \"we\");
    if (oom_adj) {
        fputs(\"-17\", oom_adj);
        fclose(oom_adj);
    }

    /* parse arguments */
    std::string args;
    format_args(argc, const_cast<const char **>(argv), &args);
    MYLOGD(\"Dumpstate command line: %s\\n\", args.c_str());
    int c;
    while ((c = getopt(argc, argv, \"dho:svqzpPBRSV:\")) != -1) {
        switch (c) {
            case 'd': do_add_date = 1;          break;
            case 'z': do_zip_file = 1;          break;
            case 'o': use_outfile = optarg;     break;
            case 's': use_socket = 1;           break;
            case 'S': use_control_socket = 1;   break;
            case 'v': break;  // compatibility no-op
            case 'q': do_vibrate = 0;           break;
            case 'p': do_fb = 1;                break;
            case 'P': do_update_progress = 1;   break;
            case 'R': is_remote_mode = 1;       break;
            case 'B': do_broadcast = 1;         break;
            case 'V': version = optarg;         break;
            case '?': printf(\"\\n\");
            case 'h':
                usage();
                exit(1);
        }
    }

    if ((do_zip_file || do_add_date || do_update_progress || do_broadcast) && !use_outfile) {
        usage();
        exit(1);
    }

    if (use_control_socket && !do_zip_file) {
        usage();
        exit(1);
    }

    if (do_update_progress && !do_broadcast) {
        usage();
        exit(1);
    }

    if (is_remote_mode && (do_update_progress || !do_broadcast || !do_zip_file || !do_add_date)) {
        usage();
        exit(1);
    }

    if (version != VERSION_DEFAULT) {
      usage();
      exit(1);
    }

    MYLOGI(\"bugreport format version: %s\\n\", version.c_str());

    do_early_screenshot = do_update_progress;

    // If we are going to use a socket, do it as early as possible
    // to avoid timeouts from bugreport.
    if (use_socket) {
        redirect_to_socket(stdout, \"dumpstate\");
    }

    if (use_control_socket) {
        MYLOGD(\"Opening control socket\\n\");
        control_socket_fd = open_socket(\"dumpstate\");
    }

    /* full path of the temporary file containing the bugreport */
    std::string tmp_path;

    /* full path of the file containing the dumpstate logs*/
    std::string log_path;

    /* full path of the systrace file, when enabled */
    std::string systrace_path;

    /* full path of the temporary file containing the screenshot (when requested) */
    std::string screenshot_path;

    /* base name (without suffix or extensions) of the bugreport files */
    std::string base_name;

    /* pointer to the actual path, be it zip or text */
    std::string path;

    /* pointer to the zipped file */
    std::unique_ptr<FILE, int(*)(FILE*)> zip_file(NULL, fclose);

    /* redirect output if needed */
    bool is_redirecting = !use_socket && use_outfile;

    if (is_redirecting) {
        bugreport_dir = dirname(use_outfile);
        base_name = basename(use_outfile);
        if (do_add_date) {
            char date[80];
            strftime(date, sizeof(date), \"%Y-%m-%d-%H-%M-%S\", localtime(&now));
            suffix = date;
        } else {
            suffix = \"undated\";
        }
        char build_id[PROPERTY_VALUE_MAX];
        property_get(\"ro.build.id\", build_id, \"UNKNOWN_BUILD\");
        base_name = base_name + \"-\" + build_id;
        if (do_fb) {
            // TODO: if dumpstate was an object, the paths could be internal variables and then
            // we could have a function to calculate the derived values, such as:
            //     screenshot_path = GetPath(\".png\");
            screenshot_path = bugreport_dir + \"/\" + base_name + \"-\" + suffix + \".png\";
        }
        tmp_path = bugreport_dir + \"/\" + base_name + \"-\" + suffix + \".tmp\";
        log_path = bugreport_dir + \"/dumpstate_log-\" + suffix + \"-\"
                + std::to_string(getpid()) + \".txt\";

        MYLOGD(\"Bugreport dir: %s\\n\"
                \"Base name: %s\\n\"
                \"Suffix: %s\\n\"
                \"Log path: %s\\n\"
                \"Temporary path: %s\\n\"
                \"Screenshot path: %s\\n\",
                bugreport_dir.c_str(), base_name.c_str(), suffix.c_str(),
                log_path.c_str(), tmp_path.c_str(), screenshot_path.c_str());

        if (do_zip_file) {
            path = bugreport_dir + \"/\" + base_name + \"-\" + suffix + \".zip\";
            MYLOGD(\"Creating initial .zip file (%s)\\n\", path.c_str());
            create_parent_dirs(path.c_str());
            zip_file.reset(fopen(path.c_str(), \"wb\"));
            if (!zip_file) {
                MYLOGE(\"fopen(%s, 'wb'): %s\\n\", path.c_str(), strerror(errno));
                do_zip_file = 0;
            } else {
                zip_writer.reset(new ZipWriter(zip_file.get()));
            }
            add_text_zip_entry(\"version.txt\", version);
        }

        if (do_update_progress) {
            std::vector<std::string> am_args = {
                 \"--receiver-permission\", \"android.permission.DUMP\", \"--receiver-foreground\",
                 \"--es\", \"android.intent.extra.NAME\", suffix,
                 \"--ei\", \"android.intent.extra.ID\", std::to_string(id),
                 \"--ei\", \"android.intent.extra.PID\", std::to_string(getpid()),
                 \"--ei\", \"android.intent.extra.MAX\", std::to_string(WEIGHT_TOTAL),
            };
            send_broadcast(\"android.intent.action.BUGREPORT_STARTED\", am_args);
        }
    }

    /* read /proc/cmdline before dropping root */
    FILE *cmdline = fopen(\"/proc/cmdline\", \"re\");
    if (cmdline) {
        fgets(cmdline_buf, sizeof(cmdline_buf), cmdline);
        fclose(cmdline);
    }

    /* open the vibrator before dropping root */
    std::unique_ptr<FILE, int(*)(FILE*)> vibrator(NULL, fclose);
    if (do_vibrate) {
        vibrator.reset(fopen(\"/sys/class/timed_output/vibrator/enable\", \"we\"));
        if (vibrator) {
            vibrate(vibrator.get(), 150);
        }
    }

    if (do_fb && do_early_screenshot) {
        if (screenshot_path.empty()) {
            // should not have happened
            MYLOGE(\"INTERNAL ERROR: skipping early screenshot because path was not set\\n\");
        } else {
            MYLOGI(\"taking early screenshot\\n\");
            take_screenshot(screenshot_path);
            MYLOGI(\"wrote screenshot: %s\\n\", screenshot_path.c_str());
            if (chown(screenshot_path.c_str(), AID_SHELL, AID_SHELL)) {
                MYLOGE(\"Unable to change ownership of screenshot file %s: %s\\n\",
                        screenshot_path.c_str(), strerror(errno));
            }
        }
    }

    if (do_zip_file) {
        if (chown(path.c_str(), AID_SHELL, AID_SHELL)) {
            MYLOGE(\"Unable to change ownership of zip file %s: %s\\n\", path.c_str(), strerror(errno));
        }
    }

    if (is_redirecting) {
        redirect_to_file(stderr, const_cast<char*>(log_path.c_str()));
        if (chown(log_path.c_str(), AID_SHELL, AID_SHELL)) {
            MYLOGE(\"Unable to change ownership of dumpstate log file %s: %s\\n\",
                    log_path.c_str(), strerror(errno));
        }
        /* TODO: rather than generating a text file now and zipping it later,
           it would be more efficient to redirect stdout to the zip entry
           directly, but the libziparchive doesn't support that option yet. */
        redirect_to_file(stdout, const_cast<char*>(tmp_path.c_str()));
        if (chown(tmp_path.c_str(), AID_SHELL, AID_SHELL)) {
            MYLOGE(\"Unable to change ownership of temporary bugreport file %s: %s\\n\",
                    tmp_path.c_str(), strerror(errno));
        }
    }
    // NOTE: there should be no stdout output until now, otherwise it would break the header.
    // In particular, DurationReport objects should be created passing 'title, NULL', so their
    // duration is logged into MYLOG instead.
    print_header(version);

    // Dumps systrace right away, otherwise it will be filled with unnecessary events.
    dump_systrace();

    // Invoking the following dumpsys calls before dump_traces() to try and
    // keep the system stats as close to its initial state as possible.
    run_command_as_shell(\"DUMPSYS MEMINFO\", 30, \"dumpsys\", \"-t\", \"30\", \"meminfo\", \"-a\", NULL);
    run_command_as_shell(\"DUMPSYS CPUINFO\", 10, \"dumpsys\", \"-t\", \"10\", \"cpuinfo\", \"-a\", NULL);

    /* collect stack traces from Dalvik and native processes (needs root) */
    dump_traces_path = dump_traces();

    /* Run some operations that require root. */
    get_tombstone_fds(tombstone_data);
    add_dir(RECOVERY_DIR, true);
    add_dir(RECOVERY_DATA_DIR, true);
    add_dir(LOGPERSIST_DATA_DIR, false);
    add_mountinfo();
    dump_iptables();

    if (!drop_root_user()) {
        return -1;
    }

    dumpstate(do_early_screenshot ? \"\": screenshot_path, version);

    /* close output if needed */
    if (is_redirecting) {
        fclose(stdout);
    }

    /* rename or zip the (now complete) .tmp file to its final location */
    if (use_outfile) {

        /* check if user changed the suffix using system properties */
        char key[PROPERTY_KEY_MAX];
        char value[PROPERTY_VALUE_MAX];
        snprintf(key, sizeof(key), \"dumpstate.%d.name\", getpid());
        property_get(key, value, \"\");
        bool change_suffix= false;
        if (value[0]) {
            /* must whitelist which characters are allowed, otherwise it could cross directories */
            std::regex valid_regex(\"^[-_a-zA-Z0-9]+$\");
            if (std::regex_match(value, valid_regex)) {
                change_suffix = true;
            } else {
                MYLOGE(\"invalid suffix provided by user: %s\\n\", value);
            }
        }
        if (change_suffix) {
            MYLOGI(\"changing suffix from %s to %s\\n\", suffix.c_str(), value);
            suffix = value;
            if (!screenshot_path.empty()) {
                std::string new_screenshot_path =
                        bugreport_dir + \"/\" + base_name + \"-\" + suffix + \".png\";
                if (rename(screenshot_path.c_str(), new_screenshot_path.c_str())) {
                    MYLOGE(\"rename(%s, %s): %s\\n\", screenshot_path.c_str(),
                            new_screenshot_path.c_str(), strerror(errno));
                } else {
                    screenshot_path = new_screenshot_path;
                }
            }
        }

        bool do_text_file = true;
        if (do_zip_file) {
            std::string entry_name = base_name + \"-\" + suffix + \".txt\";
            MYLOGD(\"Adding main entry (%s) to .zip bugreport\\n\", entry_name.c_str());
            if (!finish_zip_file(entry_name, tmp_path, now)) {
                MYLOGE(\"Failed to finish zip file; sending text bugreport instead\\n\");
                do_text_file = true;
            } else {
                do_text_file = false;
                // Since zip file is already created, it needs to be renamed.
                std::string new_path = bugreport_dir + \"/\" + base_name + \"-\" + suffix + \".zip\";
                if (path != new_path) {
                    MYLOGD(\"Renaming zip file from %s to %s\\n\", path.c_str(), new_path.c_str());
                    if (rename(path.c_str(), new_path.c_str())) {
                        MYLOGE(\"rename(%s, %s): %s\\n\", path.c_str(),
                                new_path.c_str(), strerror(errno));
                    } else {
                        path = new_path;
                    }
                }
            }
        }
        if (do_text_file) {
            path = bugreport_dir + \"/\" + base_name + \"-\" + suffix + \".txt\";
            MYLOGD(\"Generating .txt bugreport at %s from %s\\n\", path.c_str(), tmp_path.c_str());
            if (rename(tmp_path.c_str(), path.c_str())) {
                MYLOGE(\"rename(%s, %s): %s\\n\", tmp_path.c_str(), path.c_str(), strerror(errno));
                path.clear();
            }
        }
        if (use_control_socket) {
            if (do_text_file) {
                dprintf(control_socket_fd, \"FAIL:could not create zip file, check %s \"
                        \"for more details\\n\", log_path.c_str());
            } else {
                dprintf(control_socket_fd, \"OK:%s\\n\", path.c_str());
            }
        }
    }

    /* vibrate a few but shortly times to let user know it's finished */
    if (vibrator) {
        for (int i = 0; i < 3; i++) {
            vibrate(vibrator.get(), 75);
            usleep((75 + 50) * 1000);
        }
    }

    /* tell activity manager we're done */
    if (do_broadcast) {
        if (!path.empty()) {
            MYLOGI(\"Final bugreport path: %s\\n\", path.c_str());
            std::vector<std::string> am_args = {
                 \"--receiver-permission\", \"android.permission.DUMP\", \"--receiver-foreground\",
                 \"--ei\", \"android.intent.extra.ID\", std::to_string(id),
                 \"--ei\", \"android.intent.extra.PID\", std::to_string(getpid()),
                 \"--ei\", \"android.intent.extra.MAX\", std::to_string(weight_total),
                 \"--es\", \"android.intent.extra.BUGREPORT\", path,
                 \"--es\", \"android.intent.extra.DUMPSTATE_LOG\", log_path
            };
            if (do_fb) {
                am_args.push_back(\"--es\");
                am_args.push_back(\"android.intent.extra.SCREENSHOT\");
                am_args.push_back(screenshot_path);
            }
            if (is_remote_mode) {
                am_args.push_back(\"--es\");
                am_args.push_back(\"android.intent.extra.REMOTE_BUGREPORT_HASH\");
                am_args.push_back(SHA256_file_hash(path));
                send_broadcast(\"android.intent.action.REMOTE_BUGREPORT_FINISHED\", am_args);
            } else {
                send_broadcast(\"android.intent.action.BUGREPORT_FINISHED\", am_args);
            }
        } else {
            MYLOGE(\"Skipping finished broadcast because bugreport could not be generated\\n\");
        }
    }

    MYLOGD(\"Final progress: %d/%d (originally %d)\\n\", progress, weight_total, WEIGHT_TOTAL);
    MYLOGI(\"done\\n\");

    if (is_redirecting) {
        fclose(stderr);
    }

    if (use_control_socket && control_socket_fd >= 0) {
        MYLOGD(\"Closing control socket\\n\");
        close(control_socket_fd);
    }

    return 0;
}
"
      associated_classes
      end
    end
  end
end
