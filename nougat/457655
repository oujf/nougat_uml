format 76
"gui" // nougat_src::frameworks::include::gui
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/include/gui/"
  cpp_src_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/include/gui/"
  cpp_namespace "android"
  classview 409399 "gui"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 4329527 "GraphicBufferAlloc"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12284343 // <generalisation>
	relation 12283319 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12284343 // <generalisation>
	  b parent class_ref 4359607 // BnGraphicBufferAlloc
      end

      operation 45616695 "GraphicBufferAlloc"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------

${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45616823 "~GraphicBufferAlloc"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45616951 "createGraphicBuffer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "sp<GraphicBuffer>"
	nparams 5
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	  param in name "format" type class_ref 4354615 // PixelFormat
	  param in name "usage" explicit_type "uint32_t"
	  param inout name "error" explicit_type "status_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} * ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4329911 "GLConsumer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "GLConsumer consumes buffers of graphics data from a BufferQueue,
and makes them available to OpenGL as a texture.

A typical usage pattern is to set up the GLConsumer with the
desired options, and call updateTexImage() when a new frame is desired.
If a new frame is available, the texture will be updated.  If not,
the previous contents are retained.

By default, the texture is attached to the GL_TEXTURE_EXTERNAL_OES
texture target, in the EGL context of the first thread that calls
updateTexImage().

This class was previously called SurfaceTexture."
      classrelation 12281783 // <generalisation>
	relation 12280759 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12281783 // <generalisation>
	  b parent class_ref 4352439 // ConsumerBase
      end

      class 4358711 "anonymous71"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13779383 "TEXTURE_EXTERNAL"
	  public type class_ref 4358711 // anonymous71
	  init_value " 0x8D65 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4358839 "FrameAvailableListener"
	visibility package stereotype "typedef" base_type class_ref 4352567 // FrameAvailableListener
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12281911 // <dependency>
	  relation 12280887 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 12281911 // <dependency>
	    b parent class_ref 4352567 // FrameAvailableListener
	end
      end

      operation 45610167 "GLConsumer"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 5
	  param in name "bq" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "tex" explicit_type "uint32_t"
	  param in name "texTarget" explicit_type "uint32_t"
	  param in name "useFenceSync" explicit_type "bool"
	  param in name "isControlledByApp" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)} :
    ConsumerBase(bq, isControlledByApp),
    mCurrentCrop(Rect::EMPTY_RECT),
    mCurrentTransform(0),
    mCurrentScalingMode(NATIVE_WINDOW_SCALING_MODE_FREEZE),
    mCurrentFence(Fence::NO_FENCE),
    mCurrentTimestamp(0),
    mCurrentFrameNumber(0),
    mDefaultWidth(1),
    mDefaultHeight(1),
    mFilteringEnabled(true),
    mTexName(tex),
    mUseFenceSync(useFenceSync),
    mTexTarget(texTarget),
    mEglDisplay(EGL_NO_DISPLAY),
    mEglContext(EGL_NO_CONTEXT),
    mCurrentTexture(BufferQueue::INVALID_BUFFER_SLOT),
    mAttached(true)
${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " GLConsumer constructs a new GLConsumer object. If the constructor with
 the tex parameter is used, tex indicates the name of the OpenGL ES
 texture to which images are to be streamed. texTarget specifies the
 OpenGL ES texture target to which the texture will be bound in
 updateTexImage. useFenceSync specifies whether fences should be used to
 synchronize access to buffers if that behavior is enabled at
 compile-time.

 A GLConsumer may be detached from one OpenGL ES context and then
 attached to a different context using the detachFromContext and
 attachToContext methods, respectively. The intention of these methods is
 purely to allow a GLConsumer to be transferred from one consumer
 context to another. If such a transfer is not needed there is no
 requirement that either of these methods be called.

 If the constructor with the tex parameter is used, the GLConsumer is
 created in a state where it is considered attached to an OpenGL ES
 context for the purposes of the attachToContext and detachFromContext
 methods. However, despite being considered \"attached\" to a context, the
 specific OpenGL ES context doesn't get latched until the first call to
 updateTexImage. After that point, all calls to updateTexImage must be
 made with the same OpenGL ES context current.

 If the constructor without the tex parameter is used, the GLConsumer is
 created in a detached state, and attachToContext must be called before
 calls to updateTexImage."
      end

      operation 45610295 "GLConsumer"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 4
	  param in name "bq" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "texTarget" explicit_type "uint32_t"
	  param in name "useFenceSync" explicit_type "bool"
	  param in name "isControlledByApp" explicit_type "bool"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)} :
    ConsumerBase(bq, isControlledByApp),
    mCurrentCrop(Rect::EMPTY_RECT),
    mCurrentTransform(0),
    mCurrentScalingMode(NATIVE_WINDOW_SCALING_MODE_FREEZE),
    mCurrentFence(Fence::NO_FENCE),
    mCurrentTimestamp(0),
    mCurrentFrameNumber(0),
    mDefaultWidth(1),
    mDefaultHeight(1),
    mFilteringEnabled(true),
    mTexName(0),
    mUseFenceSync(useFenceSync),
    mTexTarget(texTarget),
    mEglDisplay(EGL_NO_DISPLAY),
    mEglContext(EGL_NO_CONTEXT),
    mCurrentTexture(BufferQueue::INVALID_BUFFER_SLOT),
    mAttached(false)
${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45610423 "updateTexImage"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " updateTexImage acquires the most recently queued buffer, and sets the
 image contents of the target texture to it.

 This call may only be made while the OpenGL ES context to which the
 target texture belongs is bound to the calling thread.

 This calls doGLFenceWait to ensure proper synchronization."
      end

      operation 45610551 "releaseTexImage"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " releaseTexImage releases the texture acquired in updateTexImage().
 This is intended to be used in single buffer mode.

 This call may only be made while the OpenGL ES context to which the
 target texture belongs is bound to the calling thread."
      end

      operation 45610679 "setReleaseFence"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "fence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setReleaseFence stores a fence that will signal when the current buffer
 is no longer being read. This fence will be returned to the producer
 when the current buffer is released by updateTexImage(). Multiple
 fences can be set for a given buffer; they will be merged into a single
 union fence."
      end

      operation 45610807 "getTransformMatrix"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "mtx" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}[16]${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}[16]${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getTransformMatrix retrieves the 4x4 texture coordinate transform matrix
 associated with the texture image set by the most recent call to
 updateTexImage.

 This transform matrix maps 2D homogeneous texture coordinates of the form
 (s, t, 0, 1) with s and t in the inclusive range [0, 1] to the texture
 coordinate that should be used to sample that location from the texture.
 Sampling the texture outside of the range of this transform is undefined.

 This transform is necessary to compensate for transforms that the stream
 content producer may implicitly apply to the content. By forcing users of
 a GLConsumer to apply this transform we avoid performing an extra
 copy of the data that would be needed to hide the transform from the
 user.

 The matrix is stored in column-major order so that it may be passed
 directly to OpenGL ES via the glLoadMatrixf or glUniformMatrix4fv
 functions."
      end

      operation 45610935 "computeTransformMatrix"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 5
	  param in name "outTransform" explicit_type "float"
	  param in name "buf" explicit_type "sp<GraphicBuffer>"
	  param in name "cropRect" type class_ref 4352183 // Rect
	  param in name "transform" explicit_type "uint32_t"
	  param in name "filtering" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}[16]${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}[16], const ${t1} & ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Computes the transform matrix documented by getTransformMatrix
 from the BufferItem sub parts."
      end

      operation 45611063 "getTimestamp"
	preserve_cpp_body_indent public explicit_return_type "int64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getTimestamp retrieves the timestamp associated with the texture image
 set by the most recent call to updateTexImage.

 The timestamp is in nanoseconds, and is monotonically increasing. Its
 other semantics (zero point, etc) are source-dependent and should be
 documented by the source."
      end

      operation 45611191 "getFrameNumber"
	preserve_cpp_body_indent public explicit_return_type "uint64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getFrameNumber retrieves the frame number associated with the texture
 image set by the most recent call to updateTexImage.

 The frame number is an incrementing counter set to 0 at the creation of
 the BufferQueue associated with this consumer."
      end

      operation 45611319 "setDefaultBufferSize"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setDefaultBufferSize is used to set the size of buffers returned by
 requestBuffers when a with and height of zero is requested.
 A call to setDefaultBufferSize() may trigger requestBuffers() to
 be called from the client.
 The width and height parameters must be no greater than the minimum of
 GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see: glGetIntegerv).
 An error due to invalid dimensions might not be reported until
 updateTexImage() is called."
      end

      operation 45611447 "setFilteringEnabled"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "enabled" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setFilteringEnabled sets whether the transform matrix should be computed
 for use with bilinear filtering."
      end

      operation 45611575 "getCurrentBuffer"
	preserve_cpp_body_indent const public explicit_return_type "sp<GraphicBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getCurrentBuffer returns the buffer associated with the current image."
      end

      operation 45611703 "getCurrentTextureTarget"
	preserve_cpp_body_indent const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getCurrentTextureTarget returns the texture target of the current
 texture as returned by updateTexImage()."
      end

      operation 45611831 "getCurrentCrop"
	preserve_cpp_body_indent const public return_type class_ref 4352183 // Rect
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getCurrentCrop returns the cropping rectangle of the current buffer."
      end

      operation 45611959 "getCurrentTransform"
	preserve_cpp_body_indent const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getCurrentTransform returns the transform of the current buffer."
      end

      operation 45612087 "getCurrentScalingMode"
	preserve_cpp_body_indent const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getCurrentScalingMode returns the scaling mode of the current buffer."
      end

      operation 45612215 "getCurrentFence"
	preserve_cpp_body_indent const public explicit_return_type "sp<Fence>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getCurrentFence returns the fence indicating when the current buffer is
 ready to be read from."
      end

      operation 45612343 "doGLFenceWait"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doGLFenceWait inserts a wait command into the OpenGL ES command stream
 to ensure that it is safe for future OpenGL ES commands to access the
 current texture buffer."
      end

      operation 45612471 "setName"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " set the name of the GLConsumer that will be used to identify it in
 log messages."
      end

      operation 45612599 "setDefaultBufferFormat"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultFormat" type class_ref 4354615 // PixelFormat
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " These functions call the corresponding BufferQueue implementation
 so the refactoring can proceed smoothly"
      end

      operation 45612727 "setDefaultBufferDataSpace"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultDataSpace" explicit_type "android_dataspace"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45612855 "setConsumerUsageBits"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45612983 "setTransformHint"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "hint" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45613111 "setMaxAcquiredBufferCount"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "maxAcquiredBuffers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45613239 "detachFromContext"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " detachFromContext detaches the GLConsumer from the calling thread's
 current OpenGL ES context.  This context must be the same as the context
 that was current for previous calls to updateTexImage.

 Detaching a GLConsumer from an OpenGL ES context will result in the
 deletion of the OpenGL ES texture object into which the images were being
 streamed.  After a GLConsumer has been detached from the OpenGL ES
 context calls to updateTexImage will fail returning INVALID_OPERATION
 until the GLConsumer is attached to a new OpenGL ES context using the
 attachToContext method."
      end

      operation 45613367 "attachToContext"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "tex" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " attachToContext attaches a GLConsumer that is currently in the
 'detached' state to the current OpenGL ES context.  A GLConsumer is
 in the 'detached' state iff detachFromContext has successfully been
 called and no calls to attachToContext have succeeded since the last
 detachFromContext call.  Calls to attachToContext made on a
 GLConsumer that is not in the 'detached' state will result in an
 INVALID_OPERATION error.

 The tex argument specifies the OpenGL ES texture object name in the
 new context into which the image contents will be streamed.  A successful
 call to attachToContext will result in this texture object being bound to
 the texture target and populated with the image contents that were
 current at the time of the last call to detachFromContext."
      end

      operation 45613495 "abandonLocked"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " abandonLocked overrides the ConsumerBase method to clear
 mCurrentTextureImage in addition to the ConsumerBase behavior."
      end

      operation 45613623 "dumpLocked"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " dumpLocked overrides the ConsumerBase method to dump GLConsumer-
 specific info in addition to the ConsumerBase behavior."
      end

      operation 45613751 "acquireBufferLocked"
	cpp_virtual protected explicit_return_type "status_t"
	nparams 3
	  param inout name "item" type class_ref 4351543 // BufferItem
	  param in name "presentWhen" explicit_type "nsecs_t"
	  param in name "maxFrameNumber" explicit_type "uint64_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " acquireBufferLocked overrides the ConsumerBase method to update the
 mEglSlots array in addition to the ConsumerBase behavior."
      end

      operation 45613879 "releaseBufferLocked"
	cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  param in name "display" type class_ref 4329655 // EGLDisplay
	  param in name "eglFence" type class_ref 4354487 // EGLSyncKHR
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " releaseBufferLocked overrides the ConsumerBase method to update the
 mEglSlots array in addition to the ConsumerBase."
      end

      operation 45614007 "releaseBufferLocked"
	cpp_inline protected explicit_return_type "status_t"
	nparams 3
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  param in name "eglFence" type class_ref 4354487 // EGLSyncKHR
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return releaseBufferLocked(slot, graphicBuffer, mEglDisplay, eglFence);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45614135 "isExternalFormat"
	class_operation preserve_cpp_body_indent protected explicit_return_type "bool"
	nparams 1
	  param in name "format" type class_ref 4354615 // PixelFormat
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 4358967 "PendingRelease"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 45614263 "PendingRelease"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : isPending(false), currentTexture(-1),
                graphicBuffer(), display(nullptr), fence(nullptr) {};
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	attribute 13779511 "isPending"
	  public explicit_type "bool"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13779639 "currentTexture"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 12282039 // graphicBuffer (<directional composition>)
	  relation 12281015 *-->
	    stereotype "sp"
	    a role_name "graphicBuffer" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12282039 // graphicBuffer (<directional composition>)
	    b parent class_ref 4351927 // GraphicBuffer
	end

	classrelation 12282167 // display (<directional composition>)
	  relation 12281143 *-->
	    a role_name "display" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12282167 // display (<directional composition>)
	    b parent class_ref 4329655 // EGLDisplay
	end

	classrelation 12282295 // fence (<directional composition>)
	  relation 12281271 *-->
	    a role_name "fence" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12282295 // fence (<directional composition>)
	    b parent class_ref 4354487 // EGLSyncKHR
	end
      end

      operation 45614391 "updateAndReleaseLocked"
	preserve_cpp_body_indent protected explicit_return_type "status_t"
	nparams 2
	  param in name "item" type class_ref 4351543 // BufferItem
	  param inout name "pendingRelease" type class_ref 4358967 // PendingRelease
	    defaultvalue "nullptr"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This releases the buffer in the slot referenced by mCurrentTexture,
 then updates state to refer to the BufferItem, which must be a
 newly-acquired buffer. If pendingRelease is not null, the parameters
 which would have been passed to releaseBufferLocked upon the successful
 completion of the method will instead be returned to the caller, so that
 it may call releaseBufferLocked itself later."
      end

      operation 45614519 "bindTextureImageLocked"
	preserve_cpp_body_indent protected explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Binds mTexName and the current buffer to mTexTarget.  Uses
 mCurrentTexture if it's set, mCurrentTextureImage if not.  If the
 bind succeeds, this calls doGLFenceWait."
      end

      operation 45614647 "checkAndUpdateEglStateLocked"
	preserve_cpp_body_indent protected explicit_return_type "status_t"
	nparams 1
	  param in name "contextCheck" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the current EGLDisplay and EGLContext values, and compares them
 to mEglDisplay and mEglContext.  If the fields have been previously
 set, the values must match; if not, the fields are set to the current
 values.
 The contextCheck argument is used to ensure that a GL context is
 properly set; when set to false, the check is not performed."
      end

      class 4359095 "EglImage"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12282423 // <generalisation>
	  relation 12281399 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 12282423 // <generalisation>
	    b parent class_ref 4359223 // typedef13
	end

	operation 45614775 "EglImage"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 1
	    param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)} :
    mGraphicBuffer(graphicBuffer),
    mEglImage(EGL_NO_IMAGE_KHR),
    mEglDisplay(EGL_NO_DISPLAY),
    mCropRect(Rect::EMPTY_RECT) ${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 45614903 "createIfNeeded"
	  preserve_cpp_body_indent public explicit_return_type "status_t"
	  nparams 3
	    param in name "eglDisplay" type class_ref 4329655 // EGLDisplay
	    param in name "cropRect" type class_ref 4352183 // Rect
	    param in name "forceCreation" explicit_type "bool"
	      defaultvalue "false"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " createIfNeeded creates an EGLImage if required (we haven't created
 one yet, or the EGLDisplay or crop-rect has changed)."
	end

	operation 45615031 "bindToTextureTarget"
	  preserve_cpp_body_indent public explicit_return_type "void"
	  nparams 1
	    param in name "texTarget" explicit_type "uint32_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " This calls glEGLImageTargetTexture2DOES to bind the image to the
 texture in the specified texture target."
	end

	operation 45615159 "graphicBuffer"
	  cpp_inline public explicit_return_type "sp<GraphicBuffer>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mGraphicBuffer; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45615287 "graphicBufferHandle"
	  cpp_inline public explicit_return_type "native_handle"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
            return mGraphicBuffer == NULL ? NULL : mGraphicBuffer->handle;
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	extra_member 232247 "friend"
	  
	  cpp "
        // Only allow instantiation using ref counting.
        friend class LightRefBase<EglImage>;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 45615415 "~EglImage"
	  preserve_cpp_body_indent cpp_virtual private explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 45615543 "createImage"
	  preserve_cpp_body_indent private return_type class_ref 4359351 // EGLImageKHR
	  nparams 3
	    param in name "dpy" type class_ref 4329655 // EGLDisplay
	    param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	    param in name "crop" type class_ref 4352183 // Rect
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " createImage creates a new EGLImage from a GraphicBuffer."
	end

	operation 45615671 "EglImage"
	  private explicit_return_type ""
	  nparams 1
	    param in name "rhs" type class_ref 4359095 // EglImage
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment " Disallow copying"
	end

	operation 45615799 "operator ="
	  private explicit_return_type "void"
	  nparams 1
	    param in name "rhs" type class_ref 4359095 // EglImage
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	classrelation 12282551 // mGraphicBuffer (<directional composition>)
	  relation 12281527 *-->
	    stereotype "sp"
	    a role_name "mGraphicBuffer" private
	      comment " mGraphicBuffer is the buffer that was used to create this image."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12282551 // mGraphicBuffer (<directional composition>)
	    b parent class_ref 4351927 // GraphicBuffer
	end

	classrelation 12282679 // mEglImage (<directional composition>)
	  relation 12281655 *-->
	    a role_name "mEglImage" private
	      comment " mEglImage is the EGLImage created from mGraphicBuffer."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12282679 // mEglImage (<directional composition>)
	    b parent class_ref 4359351 // EGLImageKHR
	end

	classrelation 12282807 // mEglDisplay (<directional composition>)
	  relation 12281783 *-->
	    a role_name "mEglDisplay" private
	      comment " mEGLDisplay is the EGLDisplay that was used to create mEglImage."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12282807 // mEglDisplay (<directional composition>)
	    b parent class_ref 4329655 // EGLDisplay
	end

	classrelation 12282935 // mCropRect (<directional composition>)
	  relation 12281911 *-->
	    a role_name "mCropRect" private
	      comment " mCropRect is the crop rectangle passed to EGL when mEglImage
 was created."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12282935 // mCropRect (<directional composition>)
	    b parent class_ref 4352183 // Rect
	end
      end

      class 4359223 "typedef13"
	visibility package stereotype "typedef" explicit_base_type "LightRefBase<EglImage>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 45615927 "freeBufferLocked"
	preserve_cpp_body_indent cpp_virtual private explicit_return_type "void"
	nparams 1
	  param in name "slotIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " freeBufferLocked frees up the given buffer slot. If the slot has been
 initialized this will release the reference to the GraphicBuffer in that
 slot and destroy the EGLImage in that slot.  Otherwise it has no effect.

 This method must be called with mMutex locked."
      end

      operation 45616055 "computeCurrentTransformMatrixLocked"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " computeCurrentTransformMatrixLocked computes the transform matrix for the
 current texture.  It uses mCurrentTransform and the current GraphicBuffer
 to compute this matrix and stores it in mCurrentTransformMatrix.
 mCurrentTextureImage must not be NULL."
      end

      operation 45616183 "doGLFenceWaitLocked"
	preserve_cpp_body_indent const private explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " doGLFenceWaitLocked inserts a wait command into the OpenGL ES command
 stream to ensure that it is safe for future OpenGL ES commands to
 access the current texture buffer."
      end

      operation 45616311 "syncForReleaseLocked"
	preserve_cpp_body_indent private explicit_return_type "status_t"
	nparams 1
	  param in name "dpy" type class_ref 4329655 // EGLDisplay
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " syncForReleaseLocked performs the synchronization needed to release the
 current slot from an OpenGL ES context.  If needed it will set the
 current slot's fence to guard against a producer accessing the buffer
 before the outstanding accesses have completed."
      end

      operation 45616439 "getDebugTexImageBuffer"
	class_operation preserve_cpp_body_indent private explicit_return_type "sp<GraphicBuffer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " returns a graphic buffer used when the texture image has been released"
      end

      attribute 13779767 "DEFAULT_USAGE_FLAGS"
	class_attribute const_attribute private explicit_type "uint32_t"
	init_value "=  GraphicBuffer::USAGE_HW_TEXTURE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The default consumer usage flags that GLConsumer always sets on its
 BufferQueue instance; these will be OR:d with any additional flags passed
 from the GLConsumer user. In particular, GLConsumer will always
 consume buffers as hardware textures."
      end

      classrelation 12283063 // mCurrentTextureImage (<directional composition>)
	relation 12282039 *-->
	  stereotype "sp"
	  a role_name "mCurrentTextureImage" private
	    comment " mCurrentTextureImage is the EglImage/buffer of the current texture. It's
 possible that this buffer is not associated with any buffer slot, so we
 must track it separately in order to support the getCurrentBuffer method."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12283063 // mCurrentTextureImage (<directional composition>)
	  b parent class_ref 4359095 // EglImage
      end

      classrelation 12283191 // mCurrentCrop (<directional composition>)
	relation 12282167 *-->
	  a role_name "mCurrentCrop" private
	    comment " mCurrentCrop is the crop rectangle that applies to the current texture.
 It gets set each time updateTexImage is called."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12283191 // mCurrentCrop (<directional composition>)
	  b parent class_ref 4352183 // Rect
      end

      attribute 13779895 "mCurrentTransform"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentTransform is the transform identifier for the current texture. It
 gets set each time updateTexImage is called."
      end

      attribute 13780023 "mCurrentScalingMode"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentScalingMode is the scaling mode for the current texture. It gets
 set each time updateTexImage is called."
      end

      classrelation 12283319 // mCurrentFence (<directional composition>)
	relation 12282295 *-->
	  stereotype "sp"
	  a role_name "mCurrentFence" private
	    comment " mCurrentFence is the fence received from BufferQueue in updateTexImage."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12283319 // mCurrentFence (<directional composition>)
	  b parent class_ref 4352055 // Fence
      end

      attribute 13780151 "mCurrentTransformMatrix"
	private explicit_type "float"
	multiplicity "[16]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentTransformMatrix is the transform matrix for the current texture.
 It gets computed by computeTransformMatrix each time updateTexImage is
 called."
      end

      attribute 13780279 "mCurrentTimestamp"
	private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentTimestamp is the timestamp for the current texture. It
 gets set each time updateTexImage is called."
      end

      attribute 13780407 "mCurrentFrameNumber"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentFrameNumber is the frame counter for the current texture.
 It gets set each time updateTexImage is called."
      end

      attribute 13780535 "mFilteringEnabled"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFilteringEnabled indicates whether the transform matrix is computed for
 use with bilinear filtering. It defaults to true and is changed by
 setFilteringEnabled()."
      end

      attribute 13780663 "mTexName"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTexName is the name of the OpenGL texture to which streamed images will
 be bound when updateTexImage is called. It is set at construction time
 and can be changed with a call to attachToContext."
      end

      attribute 13780791 "mUseFenceSync"
	const_attribute private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mUseFenceSync indicates whether creation of the EGL_KHR_fence_sync
 extension should be used to prevent buffers from being dequeued before
 it's safe for them to be written. It gets set at construction time and
 never changes."
      end

      attribute 13780919 "mTexTarget"
	const_attribute private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTexTarget is the GL texture target with which the GL texture object is
 associated.  It is set in the constructor and never changed.  It is
 almost always GL_TEXTURE_EXTERNAL_OES except for one use case in Android
 Browser.  In that case it is set to GL_TEXTURE_2D to allow
 glCopyTexSubImage to read from the texture.  This is a hack to work
 around a GL driver limitation on the number of FBO attachments, which the
 browser's tile cache exceeds."
      end

      class 4359479 "EglSlot"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 45616567 "EglSlot"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mEglFence(EGL_NO_SYNC_KHR) {};
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	classrelation 12283447 // mEglImage (<directional composition>)
	  relation 12282423 *-->
	    stereotype "sp"
	    a role_name "mEglImage" public
	      comment " mEglImage is the EGLImage created from mGraphicBuffer."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12283447 // mEglImage (<directional composition>)
	    b parent class_ref 4359095 // EglImage
	end

	classrelation 12283575 // mEglFence (<directional composition>)
	  relation 12282551 *-->
	    a role_name "mEglFence" public
	      comment " mFence is the EGL sync object that must signal before the buffer
 associated with this buffer slot may be dequeued. It is initialized
 to EGL_NO_SYNC_KHR when the buffer is created and (optionally, based
 on a compile-time option) set to a new sync object in updateTexImage."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12283575 // mEglFence (<directional composition>)
	    b parent class_ref 4354487 // EGLSyncKHR
	end
      end

      classrelation 12283703 // mEglDisplay (<directional composition>)
	relation 12282679 *-->
	  a role_name "mEglDisplay" private
	    comment " mEglDisplay is the EGLDisplay with which this GLConsumer is currently
 associated.  It is intialized to EGL_NO_DISPLAY and gets set to the
 current display when updateTexImage is called for the first time and when
 attachToContext is called."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12283703 // mEglDisplay (<directional composition>)
	  b parent class_ref 4329655 // EGLDisplay
      end

      classrelation 12283831 // mEglContext (<directional composition>)
	relation 12282807 *-->
	  a role_name "mEglContext" private
	    comment " mEglContext is the OpenGL ES context with which this GLConsumer is
 currently associated.  It is initialized to EGL_NO_CONTEXT and gets set
 to the current GL context when updateTexImage is called for the first
 time and when attachToContext is called."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12283831 // mEglContext (<directional composition>)
	  b parent class_ref 4329783 // EGLContext
      end

      classrelation 12283959 // mEglSlots (<directional composition>)
	relation 12282935 *-->
	  a role_name "mEglSlots" multiplicity "[BufferQueue::NUM_BUFFER_SLOTS]" private
	    comment " mEGLSlots stores the buffers that have been allocated by the BufferQueue
 for each buffer slot.  It is initialized to null pointers, and gets
 filled in with the result of BufferQueue::acquire when the
 client dequeues a buffer from a
 slot that has not yet been used. The buffer allocated to a slot will also
 be replaced if the requested buffer usage or geometry differs from that
 of the buffer allocated to a slot."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12283959 // mEglSlots (<directional composition>)
	  b parent class_ref 4359479 // EglSlot
      end

      attribute 13781047 "mCurrentTexture"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mCurrentTexture is the buffer slot index of the buffer that is currently
 bound to the OpenGL texture. It is initialized to INVALID_BUFFER_SLOT,
 indicating that no buffer slot is currently bound to the texture. Note,
 however, that a value of INVALID_BUFFER_SLOT does not necessarily mean
 that no buffer is bound to the texture. A call to setBufferCount will
 reset mCurrentTexture to INVALID_BUFFER_SLOT."
      end

      attribute 13781175 "mAttached"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mAttached indicates whether the ConsumerBase is currently attached to
 an OpenGL ES context.  For legacy reasons, this is initialized to true,
 indicating that the ConsumerBase is considered to be attached to
 whatever context is current at the time of the first updateTexImage call.
 It is set to false by detachFromContext, and then set to true again by
 attachToContext."
      end

      attribute 13781303 "sStaticInitLock"
	class_attribute private explicit_type "Mutex"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " protects static initialization"
      end

      classrelation 12284087 // sReleasedTexImageBuffer (<directional composition>)
	relation 12283063 *-->
	  stereotype "sp"
	  a role_name "sReleasedTexImageBuffer" class_relation private
	    comment " mReleasedTexImageBuffer is a dummy buffer used when in single buffer
 mode and releaseTexImage() has been called"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12284087 // sReleasedTexImageBuffer (<directional composition>)
	  b parent class_ref 4351927 // GraphicBuffer
      end

      classrelation 12284215 // mReleasedTexImage (<directional composition>)
	relation 12283191 *-->
	  stereotype "sp"
	  a role_name "mReleasedTexImage" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12284215 // mReleasedTexImage (<directional composition>)
	  b parent class_ref 4359095 // EglImage
      end
    end

    class 4330167 "SurfaceComposerClient"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      classrelation 12291383 // <generalisation>
	relation 12290359 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12291383 // <generalisation>
	  b parent class_ref 4351415 // typedef8
      end

      classrelation 12291511 // <dependency>
	relation 12290487 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 12291511 // <dependency>
	  b parent class_ref 4328503 // Composer
      end

      operation 45645367 "SurfaceComposerClient"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "// ---------------------------------------------------------------------------

${inline}${class}::${name}${(}${)}
    : mStatus(NO_INIT), mComposer(Composer::getInstance())
${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45645495 "~SurfaceComposerClient"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45645623 "initCheck"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Always make sure we could initialize"
      end

      operation 45645751 "connection"
	preserve_cpp_body_indent const public explicit_return_type "sp<IBinder>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the connection of this client"
      end

      operation 45645879 "dispose"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Forcibly remove connection before all references have gone away."
      end

      operation 45646007 "linkToComposerDeath"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param in name "recipient" explicit_type "sp<IBinder::DeathRecipient>"
	  param inout name "cookie" explicit_type "void"
	    defaultvalue "NULL"
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " callback when the composer is dies"
      end

      operation 45646135 "getDisplayConfigs"
	class_operation preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "configs" explicit_type "Vector<DisplayInfo>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get a list of supported configurations for a given display"
      end

      operation 45646263 "getDisplayInfo"
	class_operation preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "info" type class_ref 4364855 // DisplayInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the DisplayInfo for the currently-active configuration"
      end

      operation 45646391 "getActiveConfig"
	class_operation preserve_cpp_body_indent public explicit_return_type "int"
	nparams 1
	  param in name "display" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the index of the current active configuration (relative to the list
 returned by getDisplayInfo)"
      end

      operation 45646519 "setActiveConfig"
	class_operation preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set a new active configuration using an index relative to the list
 returned by getDisplayInfo"
      end

      operation 45646647 "setDisplayPowerMode"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Triggers screen on/off or low power mode and waits for it to complete "
      end

      operation 45646775 "createSurface"
	preserve_cpp_body_indent public explicit_return_type "sp<SurfaceControl>"
	nparams 5
	  param in name "name" explicit_type "String8"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" type class_ref 4354615 // PixelFormat
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0  // usage flags
    "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------------
 surface creation / destruction
! Create a surface"
      end

      operation 45646903 "createDisplay"
	class_operation preserve_cpp_body_indent public explicit_return_type "sp<IBinder>"
	nparams 2
	  param in name "displayName" explicit_type "String8"
	  param in name "secure" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "! Create a virtual display"
      end

      operation 45647031 "destroyDisplay"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "display" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "! Destroy a virtual display"
      end

      operation 45647159 "getBuiltInDisplay"
	class_operation preserve_cpp_body_indent public explicit_return_type "sp<IBinder>"
	nparams 1
	  param in name "id" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "! Get the token for the existing default displays.
! Possible values for id are eDisplayIdMain and eDisplayIdHdmi."
      end

      operation 45647287 "openGlobalTransaction"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------------------------------------------------------------------------
 Composer parameters
 All composer parameters must be changed within a transaction
 several surfaces can be updated in one transaction, all changes are
 committed at once when the transaction is closed.
 closeGlobalTransaction() requires an IPC with the server.
! Open a composer transaction on all active SurfaceComposerClients."
      end

      operation 45647415 "closeGlobalTransaction"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "synchronous" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "! Close a composer transaction on all active SurfaceComposerClients."
      end

      operation 45647543 "setAnimationTransaction"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "! Flag the currently open transaction as an animation transaction."
      end

      operation 45647671 "hide"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "id" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45647799 "show"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "id" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45647927 "setFlags"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "flags" explicit_type "uint32_t"
	  param in name "mask" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45648055 "setTransparentRegionHint"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "transparentRegion" type class_ref 4360631 // Region
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45648183 "setLayer"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "z" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45648311 "setAlpha"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "alpha" explicit_type "float"
	    defaultvalue "1.0f"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45648439 "setMatrix"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 5
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "dsdx" explicit_type "float"
	  param in name "dtdx" explicit_type "float"
	  param in name "dsdy" explicit_type "float"
	  param in name "dtdy" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45648567 "setPosition"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45648695 "setSize"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45648823 "setCrop"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "crop" type class_ref 4352183 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45648951 "setFinalCrop"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "crop" type class_ref 4352183 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45649079 "setLayerStack"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "layerStack" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45649207 "deferTransactionUntil"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "handle" explicit_type "sp<IBinder>"
	  param in name "frameNumber" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45649335 "setOverrideScalingMode"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "id" explicit_type "sp<IBinder>"
	  param in name "overrideScalingMode" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45649463 "setPositionAppliesWithResize"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "id" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45649591 "destroySurface"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "sid" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45649719 "clearLayerFrameStats"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 1
	  param in name "token" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45649847 "getLayerFrameStats"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 2
	  param in name "token" explicit_type "sp<IBinder>"
	  param inout name "outStats" type class_ref 4362295 // FrameStats
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45649975 "clearAnimationFrameStats"
	class_operation preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45650103 "getAnimationFrameStats"
	class_operation preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param inout name "outStats" type class_ref 4362295 // FrameStats
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45650231 "getHdrCapabilities"
	class_operation preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "outCapabilities" type class_ref 4362423 // HdrCapabilities
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45650359 "setDisplaySurface"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "bufferProducer" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45650487 "setDisplayLayerStack"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "layerStack" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45650615 "setDisplaySize"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45650743 "setDisplayProjection"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "token" explicit_type "sp<IBinder>"
	  param in name "orientation" explicit_type "uint32_t"
	  param in name "layerStackRect" type class_ref 4352183 // Rect
	  param in name "displayRect" type class_ref 4352183 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setDisplayProjection() defines the projection of layer stacks
to a given display.

- orientation defines the display's orientation.
- layerStackRect defines which area of the window manager coordinate
space will be used.
- displayRect defines where on the display will layerStackRect be
mapped to. displayRect is specified post-orientation, that is
it uses the orientation seen by the end-user."
      end

      operation 45650871 "onFirstRef"
	preserve_cpp_body_indent cpp_virtual private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45650999 "getComposer"
	preserve_cpp_body_indent cpp_inline private return_type class_ref 4328503 // Composer
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 13792823 "mLock"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13792951 "mStatus"
	private explicit_type "status_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 12291639 // mClient (<directional composition>)
	relation 12290615 *-->
	  stereotype "sp"
	  a role_name "mClient" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12291639 // mClient (<directional composition>)
	  b parent class_ref 4362807 // ISurfaceComposerClient
      end

      classrelation 12291767 // mComposer (<unidirectional association>)
	relation 12290743 --->
	  a role_name "mComposer" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12291767 // mComposer (<unidirectional association>)
	  b parent class_ref 4328503 // Composer
      end
    end

    class 4343991 "BufferState"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BufferState tracks the states in which a buffer slot can be."
      operation 45602615 "BufferState"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mDequeueCount(0),
      mQueueCount(0),
      mAcquireCount(0),
      mShared(false) {
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " All slots are initially FREE (not dequeued, queued, acquired, or shared)."
      end

      attribute 13774903 "mDequeueCount"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13775031 "mQueueCount"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13775159 "mAcquireCount"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13775287 "mShared"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 45602743 "isFree"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return !isAcquired() && !isDequeued() && !isQueued();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A buffer can be in one of five states, represented as below:

         | mShared | mDequeueCount | mQueueCount | mAcquireCount |
 --------|---------|---------------|-------------|---------------|
 FREE    |  false  |       0       |      0      |       0       |
 DEQUEUED|  false  |       1       |      0      |       0       |
 QUEUED  |  false  |       0       |      1      |       0       |
 ACQUIRED|  false  |       0       |      0      |       1       |
 SHARED  |  true   |      any      |     any     |      any      |

 FREE indicates that the buffer is available to be dequeued by the
 producer. The slot is \"owned\" by BufferQueue. It transitions to DEQUEUED
 when dequeueBuffer is called.

 DEQUEUED indicates that the buffer has been dequeued by the producer, but
 has not yet been queued or canceled. The producer may modify the
 buffer's contents as soon as the associated release fence is signaled.
 The slot is \"owned\" by the producer. It can transition to QUEUED (via
 queueBuffer or attachBuffer) or back to FREE (via cancelBuffer or
 detachBuffer).

 QUEUED indicates that the buffer has been filled by the producer and
 queued for use by the consumer. The buffer contents may continue to be
 modified for a finite time, so the contents must not be accessed until
 the associated fence is signaled. The slot is \"owned\" by BufferQueue. It
 can transition to ACQUIRED (via acquireBuffer) or to FREE (if another
 buffer is queued in asynchronous mode).

 ACQUIRED indicates that the buffer has been acquired by the consumer. As
 with QUEUED, the contents must not be accessed by the consumer until the
 acquire fence is signaled. The slot is \"owned\" by the consumer. It
 transitions to FREE when releaseBuffer (or detachBuffer) is called. A
 detached buffer can also enter the ACQUIRED state via attachBuffer.

 SHARED indicates that this buffer is being used in shared buffer
 mode. It can be in any combination of the other states at the same time,
 except for FREE (since that excludes being in any other state). It can
 also be dequeued, queued, or acquired multiple times."
      end

      operation 45602871 "isDequeued"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mDequeueCount > 0;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45602999 "isQueued"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mQueueCount > 0;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45603127 "isAcquired"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mAcquireCount > 0;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45603255 "isShared"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mShared;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45603383 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        *this = BufferState();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45603511 "string"
	preserve_cpp_body_indent const public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45603639 "dequeue"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mDequeueCount++;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45603767 "detachProducer"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mDequeueCount > 0) {
            mDequeueCount--;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45603895 "attachProducer"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mDequeueCount++;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45604023 "queue"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mDequeueCount > 0) {
            mDequeueCount--;
        }
        mQueueCount++;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45604151 "cancel"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mDequeueCount > 0) {
            mDequeueCount--;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45604279 "freeQueued"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mQueueCount > 0) {
            mQueueCount--;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45604407 "acquire"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mQueueCount > 0) {
            mQueueCount--;
        }
        mAcquireCount++;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45604535 "acquireNotInQueue"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mAcquireCount++;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45604663 "release"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mAcquireCount > 0) {
            mAcquireCount--;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45604791 "detachConsumer"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (mAcquireCount > 0) {
            mAcquireCount--;
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45604919 "attachConsumer"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        mAcquireCount++;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4351287 "BitTube"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12274871 // <generalisation>
	relation 12273847 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12274871 // <generalisation>
	  b parent class_ref 4351415 // typedef8
      end

      operation 45589687 "BitTube"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : mSendFd(-1), mReceiveFd(-1)
${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " creates a BitTube with a default (4KB) send buffer"
      end

      operation 45589815 "BitTube"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "bufsize" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}
    : mSendFd(-1), mReceiveFd(-1)
${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " creates a BitTube with a a specified send and receive buffer size"
      end

      operation 45589943 "BitTube"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "data" type class_ref 4340535 // Parcel
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : mSendFd(-1), mReceiveFd(-1)
${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45590071 "~BitTube"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45590199 "initCheck"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " check state after construction"
      end

      operation 45590327 "getFd"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get receive file-descriptor"
      end

      operation 45590455 "getSendFd"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get the send file-descriptor."
      end

      operation 45590583 "sendObjects"
	stereotype "template"
	class_operation cpp_inline public explicit_return_type "ssize_t"
	nparams 3
	  param in name "tube" explicit_type "sp<BitTube>"
	  param in name "events" explicit_type "T"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return sendObjects(tube, events, count, sizeof(T));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " send objects (sized blobs). All objects are guaranteed to be written or the call fails."
      end

      operation 45590711 "recvObjects"
	stereotype "template"
	class_operation cpp_inline public explicit_return_type "ssize_t"
	nparams 3
	  param in name "tube" explicit_type "sp<BitTube>"
	  param inout name "events" explicit_type "T"
	  param in name "count" explicit_type "size_t"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return recvObjects(tube, events, count, sizeof(T));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " receive objects (sized blobs). If the receiving buffer isn't large enough,
 excess messages are silently discarded."
      end

      operation 45590839 "writeToParcel"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 1
	  param inout name "reply" type class_ref 4340535 // Parcel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " parcels this BitTube"
      end

      operation 45590967 "init"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 2
	  param in name "rcvbuf" explicit_type "size_t"
	  param in name "sndbuf" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45591095 "write"
	preserve_cpp_body_indent private explicit_return_type "ssize_t"
	nparams 2
	  param in name "vaddr" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " send a message. The write is guaranteed to send the whole message or fail."
      end

      operation 45591223 "read"
	preserve_cpp_body_indent private explicit_return_type "ssize_t"
	nparams 2
	  param inout name "vaddr" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " receive a message. the passed buffer must be at least as large as the
 write call used to send the message, excess data is silently discarded."
      end

      attribute 13767479 "mSendFd"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13767607 "mReceiveFd"
	private explicit_type "int"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 45591351 "sendObjects"
	class_operation preserve_cpp_body_indent private explicit_return_type "ssize_t"
	nparams 4
	  param in name "tube" explicit_type "sp<BitTube>"
	  param in name "events" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	  param in name "objSize" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45591479 "recvObjects"
	class_operation preserve_cpp_body_indent private explicit_return_type "ssize_t"
	nparams 4
	  param in name "tube" explicit_type "sp<BitTube>"
	  param inout name "events" explicit_type "void"
	  param in name "count" explicit_type "size_t"
	  param in name "objSize" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4351415 "typedef8"
      visibility package stereotype "typedef" explicit_base_type "RefBase"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 4351543 "BufferItem"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12274999 // <generalisation>
	relation 12273975 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12274999 // <generalisation>
	  b parent class_ref 4351671 // typedef9
      end

      extra_member 232119 "friend"
	
	cpp "
    friend class Flattenable<BufferItem>;" ""
	java ""
	php ""
	python ""
	idl ""
      end

      operation 45591607 "getPodSize"
	preserve_cpp_body_indent const private explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45591735 "getFlattenedSize"
	preserve_cpp_body_indent const private explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45591863 "getFdCount"
	preserve_cpp_body_indent const private explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45591991 "flatten"
	preserve_cpp_body_indent const private explicit_return_type "status_t"
	nparams 4
	  param inout name "buffer" explicit_type "void"
	  param inout name "size" explicit_type "size_t"
	  param inout name "fds" explicit_type "int"
	  param inout name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} * & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * & ${p0}, ${t1} & ${p1}, ${t2} * & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45592119 "unflatten"
	preserve_cpp_body_indent private explicit_return_type "status_t"
	nparams 4
	  param in name "buffer" explicit_type "void"
	  param inout name "size" explicit_type "size_t"
	  param in name "fds" explicit_type "int"
	  param inout name "count" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} * & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * & ${p0}, ${t1} & ${p1}, const ${t2} * & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 4351799 "anonymous58"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13767735 "INVALID_BUFFER_SLOT"
	  public type class_ref 4351799 // anonymous58
	  init_value " -1 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 45592247 "BufferItem"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)} :
    mGraphicBuffer(NULL),
    mFence(NULL),
    mCrop(Rect::INVALID_RECT),
    mTransform(0),
    mScalingMode(NATIVE_WINDOW_SCALING_MODE_FREEZE),
    mTimestamp(0),
    mIsAutoTimestamp(false),
    mDataSpace(HAL_DATASPACE_UNKNOWN),
    mFrameNumber(0),
    mSlot(INVALID_BUFFER_SLOT),
    mIsDroppable(false),
    mAcquireCalled(false),
    mTransformToDisplayInverse(false),
    mSurfaceDamage(),
    mAutoRefresh(false),
    mQueuedBuffer(true),
    mIsStale(false) ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45592375 "~BufferItem"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45592503 "scalingModeName"
	class_operation preserve_cpp_body_indent public explicit_return_type "char"
	nparams 1
	  param in name "scalingMode" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 12275127 // mGraphicBuffer (<directional composition>)
	relation 12274103 *-->
	  stereotype "sp"
	  a role_name "mGraphicBuffer" public
	    comment " mGraphicBuffer points to the buffer allocated for this slot, or is NULL
 if the buffer in this slot has been acquired in the past (see
 BufferSlot.mAcquireCalled)."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12275127 // mGraphicBuffer (<directional composition>)
	  b parent class_ref 4351927 // GraphicBuffer
      end

      classrelation 12275255 // mFence (<directional composition>)
	relation 12274231 *-->
	  stereotype "sp"
	  a role_name "mFence" public
	    comment " mFence is a fence that will signal when the buffer is idle."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12275255 // mFence (<directional composition>)
	  b parent class_ref 4352055 // Fence
      end

      classrelation 12275383 // mCrop (<directional composition>)
	relation 12274359 *-->
	  a role_name "mCrop" public
	    comment " mCrop is the current crop rectangle for this buffer slot."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12275383 // mCrop (<directional composition>)
	  b parent class_ref 4352183 // Rect
      end

      attribute 13767863 "mTransform"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTransform is the current transform flags for this buffer slot.
 refer to NATIVE_WINDOW_TRANSFORM_* in <window.h>"
      end

      attribute 13767991 "mScalingMode"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mScalingMode is the current scaling mode for this buffer slot.
 refer to NATIVE_WINDOW_SCALING_* in <window.h>"
      end

      attribute 13768119 "mTimestamp"
	public explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13768247 "mTimestampLo"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13768375 "mTimestampHi"
	public explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4351671 "typedef9"
      visibility package stereotype "typedef" explicit_base_type "Flattenable<BufferItem>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 4352311 "BufferItemConsumer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "BufferItemConsumer is a BufferQueue consumer endpoint that allows clients
access to the whole BufferItem entry from BufferQueue. Multiple buffers may
be acquired at once, to be used concurrently by the client. This consumer can
operate either in synchronous or asynchronous mode."
      classrelation 12275511 // <generalisation>
	relation 12274487 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12275511 // <generalisation>
	  b parent class_ref 4352439 // ConsumerBase
      end

      class 4352695 "FrameAvailableListener"
	visibility package stereotype "typedef" base_type class_ref 4352567 // FrameAvailableListener
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12275639 // <dependency>
	  relation 12274615 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 12275639 // <dependency>
	    b parent class_ref 4352567 // FrameAvailableListener
	end
      end

      class 4352823 "anonymous59"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13768503 "DEFAULT_MAX_BUFFERS"
	  public type class_ref 4352823 // anonymous59
	  init_value " -1 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4352951 "anonymous60"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13768631 "INVALID_BUFFER_SLOT"
	  public type class_ref 4352951 // anonymous60
	  init_value " BufferQueue::INVALID_BUFFER_SLOT "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4353079 "anonymous61"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13768759 "NO_BUFFER_AVAILABLE"
	  public type class_ref 4353079 // anonymous61
	  init_value " BufferQueue::NO_BUFFER_AVAILABLE "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 45592631 "BufferItemConsumer"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 4
	  param in name "consumer" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "consumerUsage" explicit_type "uint32_t"
	  param in name "bufferCount" explicit_type "int"
	    defaultvalue "DEFAULT_MAX_BUFFERS"
	  param in name "controlledByApp" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)} :
    ConsumerBase(consumer, controlledByApp)
${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Create a new buffer item consumer. The consumerUsage parameter determines
 the consumer usage flags passed to the graphics allocator. The
 bufferCount parameter specifies how many buffers can be locked for user
 access at the same time.
 controlledByApp tells whether this consumer is controlled by the
 application."
      end

      operation 45592759 "~BufferItemConsumer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45592887 "setName"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " set the name of the BufferItemConsumer that will be used to identify it in
 log messages."
      end

      operation 45593015 "acquireBuffer"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param inout name "item" type class_ref 4351543 // BufferItem
	  param in name "presentWhen" explicit_type "nsecs_t"
	  param in name "waitForFence" explicit_type "bool"
	    defaultvalue "true"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the next graphics buffer from the producer, filling out the
 passed-in BufferItem structure. Returns NO_BUFFER_AVAILABLE if the queue
 of buffers is empty, and INVALID_OPERATION if the maximum number of
 buffers is already acquired.

 Only a fixed number of buffers can be acquired at a time, determined by
 the construction-time bufferCount parameter. If INVALID_OPERATION is
 returned by acquireBuffer, then old buffers must be returned to the
 queue by calling releaseBuffer before more buffers can be acquired.

 If waitForFence is true, and the acquired BufferItem has a valid fence object,
 acquireBuffer will wait on the fence with no timeout before returning."
      end

      operation 45593143 "releaseBuffer"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "item" type class_ref 4351543 // BufferItem
	  param in name "releaseFence" explicit_type "sp<Fence>"
	    defaultvalue "Fence::NO_FENCE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns an acquired buffer to the queue, allowing it to be reused. Since
 only a fixed number of buffers may be acquired at a time, old buffers
 must be released by calling releaseBuffer to ensure new buffers can be
 acquired by acquireBuffer. Once a BufferItem is released, the caller must
 not access any members of the BufferItem, and should immediately remove
 all of its references to the BufferItem itself."
      end
    end

    class 4352439 "ConsumerBase"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ConsumerBase is a base class for BufferQueue consumer end-points. It
 handles common tasks like management of the connection to the BufferQueue
 and the buffer pool."
      class 4352567 "FrameAvailableListener"
	abstract visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12279607 // <generalisation>
	  relation 12278583 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 12279607 // <generalisation>
	    b parent class_ref 4356919 // typedef11
	end

	classrelation 12279735 // <generalisation>
	  relation 12278711 ---|>
	    a private
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 12279735 // <generalisation>
	    b parent class_ref 4357047 // typedef12
	end

	operation 45605175 "onFrameAvailable"
	  abstract cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "item" type class_ref 4351543 // BufferItem
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " See IConsumerListener::onFrame{Available,Replaced}"
	end

	operation 45605303 "onFrameReplaced"
	  cpp_virtual cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "" type class_ref 4351543 // BufferItem
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 12279223 // <generalisation>
	relation 12278199 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12279223 // <generalisation>
	  b parent class_ref 4354999 // typedef10
      end

      classrelation 12279351 // <generalisation>
	relation 12278327 ---|>
	  a private
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12279351 // <generalisation>
	  b parent class_ref 4351415 // typedef8
      end

      classrelation 12279479 // <generalisation>
	relation 12278455 ---|>
	  a protected
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12279479 // <generalisation>
	  b parent class_ref 4356791 // ConsumerListener
      end

      class 4356919 "typedef11"
	visibility package stereotype "typedef" explicit_base_type "virtual"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 4357047 "typedef12"
	visibility package stereotype "typedef" explicit_base_type "RefBase"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 45605431 "~ConsumerBase"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45605559 "abandon"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " abandon frees all the buffers and puts the ConsumerBase into the
 'abandoned' state.  Once put in this state the ConsumerBase can never
 leave it.  When in the 'abandoned' state, all methods of the
 IGraphicBufferProducer interface will fail with the NO_INIT error.

 Note that while calling this method causes all the buffers to be freed
 from the perspective of the the ConsumerBase, if there are additional
 references on the buffers (e.g. if a buffer is referenced by a client
 or by OpenGL ES as a texture) then those buffer will remain allocated."
      end

      operation 45605687 "isAbandoned"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns true if the ConsumerBase is in the 'abandoned' state"
      end

      operation 45605815 "setName"
	public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " set the name of the ConsumerBase that will be used to identify it in
 log messages."
      end

      operation 45605943 "dump"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 1
	  param inout name "result" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " dump writes the current state to a string. Child classes should add
 their state to the dump by overriding the dumpLocked method, which is
 called by these methods after locking the mutex."
      end

      operation 45606071 "dump"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45606199 "setFrameAvailableListener"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "listener" explicit_type "wp<FrameAvailableListener>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setFrameAvailableListener sets the listener object that will be notified
 when a new frame becomes available."
      end

      operation 45606327 "detachBuffer"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferConsumer::detachBuffer"
      end

      operation 45606455 "setDefaultBufferSize"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferConsumer::setDefaultBufferSize"
      end

      operation 45606583 "setDefaultBufferFormat"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultFormat" type class_ref 4354615 // PixelFormat
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferConsumer::setDefaultBufferFormat"
      end

      operation 45606711 "setDefaultBufferDataSpace"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultDataSpace" explicit_type "android_dataspace"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferConsumer::setDefaultBufferDataSpace"
      end

      operation 45606839 "discardFreeBuffers"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferConsumer::discardFreeBuffers"
      end

      operation 45606967 "ConsumerBase"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 4352439 // ConsumerBase
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45607095 "operator ="
	private explicit_return_type "void"
	nparams 1
	  param in name "" type class_ref 4352439 // ConsumerBase
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 45607223 "ConsumerBase"
	preserve_cpp_body_indent protected explicit_return_type ""
	nparams 2
	  param in name "bufferQueue" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "controlledByApp" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)} :
        mAbandoned(false),
        mConsumer(bufferQueue) ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " ConsumerBase constructs a new ConsumerBase object to consume image
 buffers from the given IGraphicBufferConsumer.
 The controlledByApp flag indicates that this consumer is under the application's
 control."
      end

      operation 45607351 "onLastStrongRef"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "id" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " onLastStrongRef gets called by RefBase just before the dtor of the most
 derived class.  It is used to clean up the buffers so that ConsumerBase
 can coordinate the clean-up by calling into virtual methods implemented
 by the derived classes.  This would not be possible from the
 ConsuemrBase dtor because by the time that gets called the derived
 classes have already been destructed.

 This methods should not need to be overridden by derived classes, but
 if they are overridden the ConsumerBase implementation must be called
 from the derived class."
      end

      operation 45607479 "onFrameAvailable"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "item" type class_ref 4351543 // BufferItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Implementation of the IConsumerListener interface.  These
 calls are used to notify the ConsumerBase of asynchronous events in the
 BufferQueue.  The onFrameAvailable, onFrameReplaced, and
 onBuffersReleased methods should not need to be overridden by derived
 classes, but if they are overridden the ConsumerBase implementation must
 be called from the derived class. The ConsumerBase version of
 onSidebandStreamChanged does nothing and can be overriden by derived
 classes if they want the notification."
      end

      operation 45607607 "onFrameReplaced"
	cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "item" type class_ref 4351543 // BufferItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45607735 "onBuffersReleased"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45607863 "onSidebandStreamChanged"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45607991 "freeBufferLocked"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 1
	  param in name "slotIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " freeBufferLocked frees up the given buffer slot.  If the slot has been
 initialized this will release the reference to the GraphicBuffer in that
 slot.  Otherwise it has no effect.

 Derived classes should override this method to clean up any state they
 keep per slot.  If it is overridden, the derived class's implementation
 must call ConsumerBase::freeBufferLocked.

 This method must be called with mMutex locked."
      end

      operation 45608119 "abandonLocked"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " abandonLocked puts the BufferQueue into the abandoned state, causing
 all future operations on it to fail. This method rather than the public
 abandon method should be overridden by child classes to add abandon-
 time behavior.

 Derived classes should override this method to clean up any object
 state they keep (as opposed to per-slot state).  If it is overridden,
 the derived class's implementation must call ConsumerBase::abandonLocked.

 This method must be called with mMutex locked."
      end

      operation 45608247 "dumpLocked"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " dumpLocked dumps the current state of the ConsumerBase object to the
 result string.  Each line is prefixed with the string pointed to by the
 prefix argument.  The buffer argument points to a buffer that may be
 used for intermediate formatting data, and the size of that buffer is
 indicated by the size argument.

 Derived classes should override this method to dump their internal
 state.  If this method is overridden the derived class's implementation
 should call ConsumerBase::dumpLocked.

 This method must be called with mMutex locked."
      end

      operation 45608375 "acquireBufferLocked"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "status_t"
	nparams 3
	  param inout name "item" type class_ref 4351543 // BufferItem
	  param in name "presentWhen" explicit_type "nsecs_t"
	  param in name "maxFrameNumber" explicit_type "uint64_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " acquireBufferLocked fetches the next buffer from the BufferQueue and
 updates the buffer slot for the buffer returned.

 Derived classes should override this method to perform any
 initialization that must take place the first time a buffer is assigned
 to a slot.  If it is overridden the derived class's implementation must
 call ConsumerBase::acquireBufferLocked."
      end

      operation 45608503 "releaseBufferLocked"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "status_t"
	nparams 4
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  param in name "display" type class_ref 4329655 // EGLDisplay
	  param in name "eglFence" type class_ref 4354487 // EGLSyncKHR
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " releaseBufferLocked relinquishes control over a buffer, returning that
 control to the BufferQueue.

 Derived classes should override this method to perform any cleanup that
 must take place when a buffer is released back to the BufferQueue.  If
 it is overridden the derived class's implementation must call
 ConsumerBase::releaseBufferLocked.e"
      end

      operation 45608631 "stillTracking"
	preserve_cpp_body_indent protected explicit_return_type "bool"
	nparams 2
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " returns true iff the slot still has the graphicBuffer in it."
      end

      operation 45608759 "addReleaseFence"
	preserve_cpp_body_indent protected explicit_return_type "status_t"
	nparams 3
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  param in name "fence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " addReleaseFence* adds the sync points associated with a fence to the set
 of sync points that must be reached before the buffer in the given slot
 may be used after the slot has been released.  This should be called by
 derived classes each time some asynchronous work is kicked off that
 references the buffer."
      end

      operation 45608887 "addReleaseFenceLocked"
	preserve_cpp_body_indent protected explicit_return_type "status_t"
	nparams 3
	  param in name "slot" explicit_type "int"
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  param in name "fence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 4357175 "Slot"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12279863 // mGraphicBuffer (<directional composition>)
	  relation 12278839 *-->
	    stereotype "sp"
	    a role_name "mGraphicBuffer" public
	      comment " mGraphicBuffer is the Gralloc buffer store in the slot or NULL if
 no Gralloc buffer is in the slot."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12279863 // mGraphicBuffer (<directional composition>)
	    b parent class_ref 4351927 // GraphicBuffer
	end

	classrelation 12279991 // mFence (<directional composition>)
	  relation 12278967 *-->
	    stereotype "sp"
	    a role_name "mFence" public
	      comment " mFence is a fence which will signal when the buffer associated with
 this buffer slot is no longer being used by the consumer and can be
 overwritten. The buffer can be dequeued before the fence signals;
 the producer is responsible for delaying writes until it signals."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12279991 // mFence (<directional composition>)
	    b parent class_ref 4352055 // Fence
	end

	attribute 13775927 "mFrameNumber"
	  public explicit_type "uint64_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " the frame number of the last acquired frame for this slot"
	end
      end

      classrelation 12280119 // mSlots (<directional composition>)
	relation 12279095 *-->
	  a role_name "mSlots" multiplicity "[BufferQueue::NUM_BUFFER_SLOTS]" protected
	    comment " mSlots stores the buffers that have been allocated by the BufferQueue
 for each buffer slot.  It is initialized to null pointers, and gets
 filled in with the result of BufferQueue::acquire when the
 client dequeues a buffer from a
 slot that has not yet been used. The buffer allocated to a slot will also
 be replaced if the requested buffer usage or geometry differs from that
 of the buffer allocated to a slot."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12280119 // mSlots (<directional composition>)
	  b parent class_ref 4357175 // Slot
      end

      attribute 13776055 "mAbandoned"
	protected explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mAbandoned indicates that the BufferQueue will no longer be used to
 consume images buffers pushed to it using the IGraphicBufferProducer
 interface. It is initialized to false, and set to true in the abandon
 method.  A BufferQueue that has been abandoned will return the NO_INIT
 error from all IConsumerBase methods capable of returning an error."
      end

      attribute 13776183 "mName"
	protected explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mName is a string used to identify the ConsumerBase in log messages.
 It can be set by the setName method."
      end

      classrelation 12280247 // mFrameAvailableListener (<directional composition>)
	relation 12279223 *-->
	  stereotype "wp"
	  a role_name "mFrameAvailableListener" protected
	    comment " mFrameAvailableListener is the listener object that will be called when a
 new frame becomes available. If it is not NULL it will be called from
 queueBuffer."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12280247 // mFrameAvailableListener (<directional composition>)
	  b parent class_ref 4352567 // FrameAvailableListener
      end

      classrelation 12280375 // mConsumer (<directional composition>)
	relation 12279351 *-->
	  stereotype "sp"
	  a role_name "mConsumer" protected
	    comment " The ConsumerBase has-a BufferQueue and is responsible for creating this object
 if none is supplied"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12280375 // mConsumer (<directional composition>)
	  b parent class_ref 4357303 // IGraphicBufferConsumer
      end

      attribute 13776311 "mMutex"
	protected explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mMutex is the mutex used to prevent concurrent access to the member
 variables of ConsumerBase objects. It must be locked whenever the
 member variables are accessed or when any of the *Locked methods are
 called.

 This mutex is intended to be locked by derived classes."
      end
    end

    class 4353207 "BufferQueue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 4353335 "anonymous62"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13768887 "NUM_BUFFER_SLOTS"
	  public type class_ref 4353335 // anonymous62
	  init_value " BufferQueueDefs::NUM_BUFFER_SLOTS "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4353463 "anonymous63"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13769015 "INVALID_BUFFER_SLOT"
	  public type class_ref 4353463 // anonymous63
	  init_value " BufferItem::INVALID_BUFFER_SLOT "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4353591 "anonymous64"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13769143 "NO_BUFFER_AVAILABLE"
	  public type class_ref 4353591 // anonymous64
	  init_value " IGraphicBufferConsumer::NO_BUFFER_AVAILABLE"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13769271 "PRESENT_LATER"
	  public type class_ref 4353591 // anonymous64
	  init_value " IGraphicBufferConsumer::PRESENT_LATER"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4353719 "anonymous65"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13769399 "MAX_MAX_ACQUIRED_BUFFERS"
	  public type class_ref 4353719 // anonymous65
	  init_value " NUM_BUFFER_SLOTS - 2 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4353847 "ConsumerListener"
	visibility package stereotype "typedef" base_type class_ref 4353847 // ConsumerListener
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12275767 // <dependency>
	  relation 12274743 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 12275767 // <dependency>
	    b parent class_ref 4353847 // ConsumerListener
	end
      end

      class 4353975 "ProxyConsumerListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12275895 // <generalisation>
	  relation 12274871 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 12275895 // <generalisation>
	    b parent class_ref 4354103 // BnConsumerListener
	end

	operation 45593271 "ProxyConsumerListener"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 1
	    param in name "consumerListener" explicit_type "wp<ConsumerListener>"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}:
        mConsumerListener(consumerListener) ${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 45593399 "~ProxyConsumerListener"
	  preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 45593527 "onFrameAvailable"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "item" type class_ref 4351543 // BufferItem
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45593655 "onFrameReplaced"
	  cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "item" type class_ref 4351543 // BufferItem
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45593783 "onBuffersReleased"
	  preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45593911 "onSidebandStreamChanged"
	  preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 12276023 // mConsumerListener (<directional composition>)
	  relation 12274999 *-->
	    stereotype "wp"
	    a role_name "mConsumerListener" private
	      comment " mConsumerListener is a weak reference to the IConsumerListener.  This is
 the raison d'etre of ProxyConsumerListener."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12276023 // mConsumerListener (<directional composition>)
	    b parent class_ref 4353847 // ConsumerListener
	end
      end

      operation 45594039 "createBufferQueue"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 3
	  param inout name "outProducer" explicit_type "sp<IGraphicBufferProducer>"
	  param inout name "outConsumer" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "allocator" explicit_type "sp<IGraphicBufferAlloc>"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " BufferQueue manages a pool of gralloc memory slots to be used by
 producers and consumers. allocator is used to allocate all the
 needed gralloc buffers."
      end

      operation 45594167 "BufferQueue"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end
    end

    class 4354103 "BnConsumerListener"
      visibility package 
      nactuals 1
      actual class class_ref 4341559 // BnInterface
        rank 0 value class_ref 4355895 // IConsumerListener
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 12284983 // <realization>
	relation 12283959 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12284983 // <realization>
	  b parent class_ref 4341559 // BnInterface
      end

      operation 45617847 "onTransact"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" type class_ref 4340535 // Parcel
	  param inout name "reply" type class_ref 4340535 // Parcel
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4354231 "BufferQueueConsumer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12276151 // <generalisation>
	relation 12275127 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12276151 // <generalisation>
	  b parent class_ref 4354359 // BnGraphicBufferConsumer
      end

      operation 45594295 "BufferQueueConsumer"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "core" explicit_type "sp<BufferQueueCore>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} :
    mCore(core),
    mSlots(core->mSlots),
    mConsumerName() ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45594423 "~BufferQueueConsumer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45594551 "acquireBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param inout name "outBuffer" type class_ref 4351543 // BufferItem
	  param in name "expectedPresent" explicit_type "nsecs_t"
	  param in name "maxFrameNumber" explicit_type "uint64_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " acquireBuffer attempts to acquire ownership of the next pending buffer in
 the BufferQueue. If no buffer is pending then it returns
 NO_BUFFER_AVAILABLE. If a buffer is successfully acquired, the
 information about the buffer is returned in BufferItem.  If the buffer
 returned had previously been acquired then the BufferItem::mGraphicBuffer
 field of buffer is set to NULL and it is assumed that the consumer still
 holds a reference to the buffer.

 If expectedPresent is nonzero, it indicates the time when the buffer
 will be displayed on screen. If the buffer's timestamp is farther in the
 future, the buffer won't be acquired, and PRESENT_LATER will be
 returned.  The presentation time is in nanoseconds, and the time base
 is CLOCK_MONOTONIC."
      end

      operation 45594679 "detachBuffer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferConsumer::detachBuffer"
      end

      operation 45594807 "attachBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "slot" explicit_type "int"
	  param in name "buffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferConsumer::attachBuffer"
      end

      operation 45594935 "releaseBuffer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "slot" explicit_type "int"
	  param in name "frameNumber" explicit_type "uint64_t"
	  param in name "releaseFence" explicit_type "sp<Fence>"
	  param in name "eglDisplay" type class_ref 4329655 // EGLDisplay
	  param in name "eglFence" type class_ref 4354487 // EGLSyncKHR
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " releaseBuffer releases a buffer slot from the consumer back to the
 BufferQueue.  This may be done while the buffer's contents are still
 being accessed.  The fence will signal when the buffer is no longer
 in use. frameNumber is used to indentify the exact buffer returned.

 If releaseBuffer returns STALE_BUFFER_SLOT, then the consumer must free
 any references to the just-released buffer that it might have, as if it
 had received a onBuffersReleased() call with a mask set for the released
 buffer.

 Note that the dependencies on EGL will be removed once we switch to using
 the Android HW Sync HAL."
      end

      operation 45595063 "connect"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "consumerListener" explicit_type "sp<IConsumerListener>"
	  param in name "controlledByApp" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " connect connects a consumer to the BufferQueue.  Only one
 consumer may be connected, and when that consumer disconnects the
 BufferQueue is placed into the \"abandoned\" state, causing most
 interactions with the BufferQueue by the producer to fail.
 controlledByApp indicates whether the consumer is controlled by
 the application.

 consumerListener may not be NULL."
      end

      operation 45595191 "disconnect"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " disconnect disconnects a consumer from the BufferQueue. All
 buffers will be freed and the BufferQueue is placed in the \"abandoned\"
 state, causing most interactions with the BufferQueue by the producer to
 fail."
      end

      operation 45595319 "getReleasedBuffers"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "outSlotMask" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getReleasedBuffers sets the value pointed to by outSlotMask to a bit mask
 indicating which buffer slots have been released by the BufferQueue
 but have not yet been released by the consumer.

 This should be called from the onBuffersReleased() callback."
      end

      operation 45595447 "setDefaultBufferSize"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setDefaultBufferSize is used to set the size of buffers returned by
 dequeueBuffer when a width and height of zero is requested.  Default
 is 1x1."
      end

      operation 45595575 "setMaxBufferCount"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " see IGraphicBufferConsumer::setMaxBufferCount"
      end

      operation 45595703 "setMaxAcquiredBufferCount"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "maxAcquiredBuffers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setMaxAcquiredBufferCount sets the maximum number of buffers that can
 be acquired by the consumer at one time (default 1).  This call will
 fail if a producer is connected to the BufferQueue."
      end

      operation 45595831 "setConsumerName"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setConsumerName sets the name used in logging"
      end

      operation 45595959 "setDefaultBufferFormat"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultFormat" type class_ref 4354615 // PixelFormat
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setDefaultBufferFormat allows the BufferQueue to create
 GraphicBuffers of a defaultFormat if no format is specified
 in dequeueBuffer. The initial default is HAL_PIXEL_FORMAT_RGBA_8888."
      end

      operation 45596087 "setDefaultBufferDataSpace"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultDataSpace" explicit_type "android_dataspace"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setDefaultBufferDataSpace allows the BufferQueue to create
 GraphicBuffers of a defaultDataSpace if no data space is specified
 in queueBuffer.
 The initial default is HAL_DATASPACE_UNKNOWN"
      end

      operation 45596215 "setConsumerUsageBits"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setConsumerUsageBits will turn on additional usage bits for dequeueBuffer.
 These are merged with the bits passed to dequeueBuffer.  The values are
 enumerated in gralloc.h, e.g. GRALLOC_USAGE_HW_RENDER; the default is 0."
      end

      operation 45596343 "setTransformHint"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "hint" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setTransformHint bakes in rotation to buffers so overlays can be used.
 The values are enumerated in window.h, e.g.
 NATIVE_WINDOW_TRANSFORM_ROT_90.  The default is 0 (no transform)."
      end

      operation 45596471 "getSidebandStream"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "sp<NativeHandle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieve the sideband buffer stream, if any."
      end

      operation 45596599 "discardFreeBuffers"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferConsumer::discardFreeBuffers"
      end

      operation 45596727 "dump"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " dump our state in a String"
      end

      operation 45596855 "releaseBuffer"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 5
	  param in name "buf" explicit_type "int"
	  param in name "frameNumber" explicit_type "uint64_t"
	  param in name "display" type class_ref 4329655 // EGLDisplay
	  param in name "fence" type class_ref 4354487 // EGLSyncKHR
	  param in name "releaseFence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        return releaseBuffer(buf, frameNumber, releaseFence, display, fence);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Functions required for backwards compatibility.
 These will be modified/renamed in IGraphicBufferConsumer and will be
 removed from this class at that time. See b/13306289."
      end

      operation 45596983 "consumerConnect"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 2
	  param in name "consumer" explicit_type "sp<IConsumerListener>"
	  param in name "controlledByApp" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return connect(consumer, controlledByApp);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45597111 "consumerDisconnect"
	cpp_virtual cpp_inline public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return disconnect(); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 12276279 // mCore (<directional composition>)
	relation 12275255 *-->
	  stereotype "sp"
	  a role_name "mCore" private
	    comment " End functions required for backwards compatibility"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12276279 // mCore (<directional composition>)
	  b parent class_ref 4354743 // BufferQueueCore
      end

      classrelation 12276407 // mSlots (<unidirectional association>)
	relation 12275383 --->
	  a role_name "mSlots" private
	    comment " This references mCore->mSlots. Lock mCore->mMutex while accessing."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12276407 // mSlots (<unidirectional association>)
	  b parent class_ref 4354871 // SlotsType
      end

      attribute 13769527 "mConsumerName"
	private explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This is a cached copy of the name stored in the BufferQueueCore.
 It's updated during setConsumerName."
      end
    end

    class 4354359 "BnGraphicBufferConsumer"
      visibility package 
      nactuals 1
      actual class class_ref 4341559 // BnInterface
        rank 0 value class_ref 4357303 // IGraphicBufferConsumer
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 12285751 // <realization>
	relation 12284727 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12285751 // <realization>
	  b parent class_ref 4341559 // BnInterface
      end

      operation 45621047 "onTransact"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" type class_ref 4340535 // Parcel
	  param inout name "reply" type class_ref 4340535 // Parcel
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4354743 "BufferQueueCore"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12276535 // <generalisation>
	relation 12275511 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12276535 // <generalisation>
	  b parent class_ref 4354999 // typedef10
      end

      classrelation 12276663 // <generalisation>
	relation 12275639 ---|>
	  a private
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12276663 // <generalisation>
	  b parent class_ref 4351415 // typedef8
      end

      classrelation 12276791 // <dependency>
	relation 12275767 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 12276791 // <dependency>
	  b parent class_ref 4355127 // BufferQueueProducer
      end

      classrelation 12276919 // <dependency>
	relation 12275895 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 12276919 // <dependency>
	  b parent class_ref 4354231 // BufferQueueConsumer
      end

      class 4355255 "anonymous66"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13769655 "INVALID_BUFFER_SLOT"
	  public type class_ref 4355255 // anonymous66
	  init_value " BufferItem::INVALID_BUFFER_SLOT "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4355383 "anonymous67"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13769783 "MAX_MAX_ACQUIRED_BUFFERS"
	  public type class_ref 4355383 // anonymous67
	  init_value " BufferQueueDefs::NUM_BUFFER_SLOTS - 2 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4355511 "anonymous68"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13769911 "CURRENTLY_CONNECTED_API"
	  public type class_ref 4355511 // anonymous68
	  init_value " -1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13770039 "NO_CONNECTED_API"
	  public type class_ref 4355511 // anonymous68
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4355639 "Fifo"
	visibility package stereotype "typedef" base_type class_ref 4351543 // BufferItem
	cpp_decl "${comment}typedef Vector<${type}> ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12277047 // <dependency>
	  relation 12276023 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 12277047 // <dependency>
	    b parent class_ref 4351543 // BufferItem
	end
      end

      operation 45597239 "BufferQueueCore"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "allocator" explicit_type "sp<IGraphicBufferAlloc>"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} :
    mAllocator(allocator),
    mMutex(),
    mIsAbandoned(false),
    mConsumerControlledByApp(false),
    mConsumerName(getUniqueName()),
    mConsumerListener(),
    mConsumerUsageBits(0),
    mConnectedApi(NO_CONNECTED_API),
    mConnectedProducerListener(),
    mSlots(),
    mQueue(),
    mFreeSlots(),
    mFreeBuffers(),
    mUnusedSlots(),
    mActiveBuffers(),
    mDequeueCondition(),
    mDequeueBufferCannotBlock(false),
    mDefaultBufferFormat(PIXEL_FORMAT_RGBA_8888),
    mDefaultWidth(1),
    mDefaultHeight(1),
    mDefaultBufferDataSpace(HAL_DATASPACE_UNKNOWN),
    mMaxBufferCount(BufferQueueDefs::NUM_BUFFER_SLOTS),
    mMaxAcquiredBufferCount(1),
    mMaxDequeuedBufferCount(1),
    mBufferHasBeenQueued(false),
    mFrameCounter(0),
    mTransformHint(0),
    mIsAllocating(false),
    mIsAllocatingCondition(),
    mAllowAllocation(true),
    mBufferAge(0),
    mGenerationNumber(0),
    mAsyncMode(false),
    mSharedBufferMode(false),
    mAutoRefresh(false),
    mSharedBufferSlot(INVALID_BUFFER_SLOT),
    mSharedBufferCache(Rect::INVALID_RECT, 0, NATIVE_WINDOW_SCALING_MODE_FREEZE,
            HAL_DATASPACE_UNKNOWN),
    mUniqueId(getUniqueId())
${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " BufferQueueCore manages a pool of gralloc memory slots to be used by
 producers and consumers. allocator is used to allocate all the needed
 gralloc buffers."
      end

      operation 45597367 "~BufferQueueCore"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45597495 "dump"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Dump our state in a string"
      end

      operation 45597623 "getMinUndequeuedBufferCountLocked"
	preserve_cpp_body_indent const private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getMinUndequeuedBufferCountLocked returns the minimum number of buffers
 that must remain in a state other than DEQUEUED. The async parameter
 tells whether we're in asynchronous mode."
      end

      operation 45597751 "getMinMaxBufferCountLocked"
	preserve_cpp_body_indent const private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getMinMaxBufferCountLocked returns the minimum number of buffers allowed
 given the current BufferQueue state. The async parameter tells whether
 we're in asynchonous mode."
      end

      operation 45597879 "getMaxBufferCountLocked"
	preserve_cpp_body_indent const private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getMaxBufferCountLocked returns the maximum number of buffers that can be
 allocated at once. This value depends on the following member variables:

     mMaxDequeuedBufferCount
     mMaxAcquiredBufferCount
     mMaxBufferCount
     mAsyncMode
     mDequeueBufferCannotBlock

 Any time one of these member variables is changed while a producer is
 connected, mDequeueCondition must be broadcast."
      end

      operation 45598007 "getMaxBufferCountLocked"
	preserve_cpp_body_indent const private explicit_return_type "int"
	nparams 3
	  param in name "asyncMode" explicit_type "bool"
	  param in name "dequeueBufferCannotBlock" explicit_type "bool"
	  param in name "maxBufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This performs the same computation but uses the given arguments instead
 of the member variables for mMaxBufferCount, mAsyncMode, and
 mDequeueBufferCannotBlock."
      end

      operation 45598135 "clearBufferSlotLocked"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " clearBufferSlotLocked frees the GraphicBuffer and sync resources for the
 given slot."
      end

      operation 45598263 "freeAllBuffersLocked"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " freeAllBuffersLocked frees the GraphicBuffer and sync resources for
 all slots, even if they're currently dequeued, queued, or acquired."
      end

      operation 45598391 "discardFreeBuffersLocked"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " discardFreeBuffersLocked releases all currently-free buffers held by the
 queue, in order to reduce the memory consumption of the queue to the
 minimum possible without discarding data."
      end

      operation 45598519 "adjustAvailableSlotsLocked"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param in name "delta" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If delta is positive, makes more slots available. If negative, takes
 away slots. Returns false if the request can't be met."
      end

      operation 45598647 "waitWhileAllocatingLocked"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " waitWhileAllocatingLocked blocks until mIsAllocating is false."
      end

      operation 45598775 "validateConsistencyLocked"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " validateConsistencyLocked ensures that the free lists are in sync with
 the information stored in mSlots"
      end

      classrelation 12277175 // mAllocator (<directional composition>)
	relation 12276151 *-->
	  stereotype "sp"
	  a role_name "mAllocator" private
	    comment " mAllocator is the connection to SurfaceFlinger that is used to allocate
 new GraphicBuffer objects."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12277175 // mAllocator (<directional composition>)
	  b parent class_ref 4355767 // IGraphicBufferAlloc
      end

      attribute 13770167 "mMutex"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mMutex is the mutex used to prevent concurrent access to the member
 variables of BufferQueueCore objects. It must be locked whenever any
 member variable is accessed."
      end

      attribute 13770295 "mIsAbandoned"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mIsAbandoned indicates that the BufferQueue will no longer be used to
 consume image buffers pushed to it using the IGraphicBufferProducer
 interface. It is initialized to false, and set to true in the
 consumerDisconnect method. A BufferQueue that is abandoned will return
 the NO_INIT error from all IGraphicBufferProducer methods capable of
 returning an error."
      end

      attribute 13770423 "mConsumerControlledByApp"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mConsumerControlledByApp indicates whether the connected consumer is
 controlled by the application."
      end

      attribute 13770551 "mConsumerName"
	private explicit_type "String8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mConsumerName is a string used to identify the BufferQueue in log
 messages. It is set by the IGraphicBufferConsumer::setConsumerName
 method."
      end

      classrelation 12277303 // mConsumerListener (<directional composition>)
	relation 12276279 *-->
	  stereotype "sp"
	  a role_name "mConsumerListener" private
	    comment " mConsumerListener is used to notify the connected consumer of
 asynchronous events that it may wish to react to. It is initially
 set to NULL and is written by consumerConnect and consumerDisconnect."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12277303 // mConsumerListener (<directional composition>)
	  b parent class_ref 4355895 // IConsumerListener
      end

      attribute 13770679 "mConsumerUsageBits"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mConsumerUsageBits contains flags that the consumer wants for
 GraphicBuffers."
      end

      attribute 13770807 "mConnectedApi"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mConnectedApi indicates the producer API that is currently connected
 to this BufferQueue. It defaults to NO_CONNECTED_API, and gets updated
 by the connect and disconnect methods."
      end

      classrelation 12277431 // mConnectedProducerListener (<directional composition>)
	relation 12276407 *-->
	  stereotype "sp"
	  a role_name "mConnectedProducerListener" private
	    comment " mConnectedProducerToken is used to set a binder death notification on
 the producer."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12277431 // mConnectedProducerListener (<directional composition>)
	  b parent class_ref 4356023 // IProducerListener
      end

      classrelation 12277559 // mSlots (<directional composition>)
	relation 12276535 *-->
	  a role_name "mSlots" private
	    comment " mSlots is an array of buffer slots that must be mirrored on the producer
 side. This allows buffer ownership to be transferred between the producer
 and consumer without sending a GraphicBuffer over Binder. The entire
 array is initialized to NULL at construction time, and buffers are
 allocated for a slot when requestBuffer is called with that slot's index."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12277559 // mSlots (<directional composition>)
	  b parent class_ref 4354871 // SlotsType
      end

      classrelation 12277687 // mQueue (<directional composition>)
	relation 12276663 *-->
	  a role_name "mQueue" private
	    comment " mQueue is a FIFO of queued buffers used in synchronous mode."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12277687 // mQueue (<directional composition>)
	  b parent class_ref 4355639 // Fifo
      end

      attribute 13770935 "mFreeSlots"
	private explicit_type "int"
	stereotype "std::set"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFreeSlots contains all of the slots which are FREE and do not currently
 have a buffer attached."
      end

      attribute 13771063 "mFreeBuffers"
	private explicit_type "int"
	stereotype "std::list"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFreeBuffers contains all of the slots which are FREE and currently have
 a buffer attached."
      end

      attribute 13771191 "mUnusedSlots"
	private explicit_type "int"
	stereotype "std::list"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mUnusedSlots contains all slots that are currently unused. They should be
 free and not have a buffer attached."
      end

      attribute 13771319 "mActiveBuffers"
	private explicit_type "int"
	stereotype "std::set"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mActiveBuffers contains all slots which have a non-FREE buffer attached."
      end

      attribute 13771447 "mDequeueCondition"
	private explicit_type "Condition"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDequeueCondition is a condition variable used for dequeueBuffer in
 synchronous mode."
      end

      attribute 13771575 "mDequeueBufferCannotBlock"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDequeueBufferCannotBlock indicates whether dequeueBuffer is allowed to
 block. This flag is set during connect when both the producer and
 consumer are controlled by the application."
      end

      classrelation 12277815 // mDefaultBufferFormat (<directional composition>)
	relation 12276791 *-->
	  a role_name "mDefaultBufferFormat" private
	    comment " mDefaultBufferFormat can be set so it will override the buffer format
 when it isn't specified in dequeueBuffer."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12277815 // mDefaultBufferFormat (<directional composition>)
	  b parent class_ref 4354615 // PixelFormat
      end

      attribute 13771703 "mDefaultWidth"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDefaultWidth holds the default width of allocated buffers. It is used
 in dequeueBuffer if a width and height of 0 are specified."
      end

      attribute 13771831 "mDefaultHeight"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDefaultHeight holds the default height of allocated buffers. It is used
 in dequeueBuffer if a width and height of 0 are specified."
      end

      attribute 13771959 "mDefaultBufferDataSpace"
	private explicit_type "android_dataspace"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDefaultBufferDataSpace holds the default dataSpace of queued buffers.
 It is used in queueBuffer if a dataspace of 0 (HAL_DATASPACE_UNKNOWN)
 is specified."
      end

      attribute 13772087 "mMaxBufferCount"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mMaxBufferCount is the limit on the number of buffers that will be
 allocated at one time. This limit can be set by the consumer."
      end

      attribute 13772215 "mMaxAcquiredBufferCount"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mMaxAcquiredBufferCount is the number of buffers that the consumer may
 acquire at one time. It defaults to 1, and can be changed by the consumer
 via setMaxAcquiredBufferCount, but this may only be done while no
 producer is connected to the BufferQueue. This value is used to derive
 the value returned for the MIN_UNDEQUEUED_BUFFERS query to the producer."
      end

      attribute 13772343 "mMaxDequeuedBufferCount"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mMaxDequeuedBufferCount is the number of buffers that the producer may
 dequeue at one time. It defaults to 1, and can be changed by the producer
 via setMaxDequeuedBufferCount."
      end

      attribute 13772471 "mBufferHasBeenQueued"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mBufferHasBeenQueued is true once a buffer has been queued. It is reset
 when something causes all buffers to be freed (e.g., changing the buffer
 count)."
      end

      attribute 13772599 "mFrameCounter"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFrameCounter is the free running counter, incremented on every
 successful queueBuffer call and buffer allocation."
      end

      attribute 13772727 "mTransformHint"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTransformHint is used to optimize for screen rotations."
      end

      attribute 13772855 "mSidebandStream"
	private explicit_type "NativeHandle"
	stereotype "sp"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mSidebandStream is a handle to the sideband buffer stream, if any"
      end

      attribute 13772983 "mIsAllocating"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mIsAllocating indicates whether a producer is currently trying to allocate buffers (which
 releases mMutex while doing the allocation proper). Producers should not modify any of the
 FREE slots while this is true. mIsAllocatingCondition is signaled when this value changes to
 false."
      end

      attribute 13773111 "mIsAllocatingCondition"
	private explicit_type "Condition"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mIsAllocatingCondition is a condition variable used by producers to wait until mIsAllocating
 becomes false."
      end

      attribute 13773239 "mAllowAllocation"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mAllowAllocation determines whether dequeueBuffer is allowed to allocate
 new buffers"
      end

      attribute 13773367 "mBufferAge"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mBufferAge tracks the age of the contents of the most recently dequeued
 buffer as the number of frames that have elapsed since it was last queued"
      end

      attribute 13773495 "mGenerationNumber"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mGenerationNumber stores the current generation number of the attached
 producer. Any attempt to attach a buffer with a different generation
 number will fail."
      end

      attribute 13773623 "mAsyncMode"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mAsyncMode indicates whether or not async mode is enabled.
 In async mode an extra buffer will be allocated to allow the producer to
 enqueue buffers without blocking."
      end

      attribute 13773751 "mSharedBufferMode"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mSharedBufferMode indicates whether or not shared buffer mode is enabled."
      end

      attribute 13773879 "mAutoRefresh"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " When shared buffer mode is enabled, this indicates whether the consumer
 should acquire buffers even if BufferQueue doesn't indicate that they are
 available."
      end

      attribute 13774007 "mSharedBufferSlot"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " When shared buffer mode is enabled, this tracks which slot contains the
 shared buffer."
      end

      class 4356151 "SharedBufferCache"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 45598903 "SharedBufferCache"
	  cpp_inline public explicit_return_type ""
	  nparams 4
	    param in name "_crop" type class_ref 4352183 // Rect
	    param in name "_transform" explicit_type "uint32_t"
	    param in name "_scalingMode" explicit_type "int"
	    param in name "_dataspace" explicit_type "android_dataspace"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw} : crop(_crop),
          transform(_transform),
          scalingMode(_scalingMode),
          dataspace(_dataspace) {
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	classrelation 12277943 // crop (<directional composition>)
	  relation 12276919 *-->
	    a role_name "crop" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12277943 // crop (<directional composition>)
	    b parent class_ref 4352183 // Rect
	end

	attribute 13774135 "transform"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13774263 "scalingMode"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13774391 "dataspace"
	  public explicit_type "android_dataspace"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      attribute 13774519 "mLastQueuedSlot"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The slot of the last queued buffer"
      end

      attribute 13774647 "mUniqueId"
	const_attribute private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4354999 "typedef10"
      visibility package stereotype "typedef" explicit_base_type "virtual"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 4355127 "BufferQueueProducer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12278199 // <generalisation>
	relation 12277175 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12278199 // <generalisation>
	  b parent class_ref 4356535 // BnGraphicBufferProducer
      end

      classrelation 12278327 // <generalisation>
	relation 12277303 ---|>
	  a private
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12278327 // <generalisation>
	  b parent class_ref 4345527 // DeathRecipient
      end

      classrelation 12278455 // <dependency>
	relation 12277431 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 12278455 // <dependency>
	  b parent class_ref 4353207 // BufferQueue
      end

      operation 45599031 "BufferQueueProducer"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "core" explicit_type "sp<BufferQueueCore>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} :
    mCore(core),
    mSlots(core->mSlots),
    mConsumerName(),
    mStickyTransform(0),
    mLastQueueBufferFence(Fence::NO_FENCE),
    mCallbackMutex(),
    mNextCallbackTicket(0),
    mCurrentCallbackTicket(0),
    mCallbackCondition(),
    mDequeueTimeout(-1) ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45599159 "~BufferQueueProducer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45599287 "requestBuffer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "slot" explicit_type "int"
	  param inout name "buf" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " requestBuffer returns the GraphicBuffer for slot N.

 In normal operation, this is called the first time slot N is returned
 by dequeueBuffer.  It must be called again if dequeueBuffer returns
 flags indicating that previously-returned buffers are no longer valid."
      end

      operation 45599415 "setMaxDequeuedBufferCount"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "maxDequeuedBuffers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " see IGraphicsBufferProducer::setMaxDequeuedBufferCount"
      end

      operation 45599543 "setAsyncMode"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "async" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " see IGraphicsBufferProducer::setAsyncMode"
      end

      operation 45599671 "dequeueBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 6
	  param inout name "outSlot" explicit_type "int"
	  param inout name "outFence" explicit_type "sp<Fence>"
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	  param in name "format" type class_ref 4354615 // PixelFormat
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " dequeueBuffer gets the next buffer slot index for the producer to use.
 If a buffer slot is available then that slot index is written to the
 location pointed to by the buf argument and a status of OK is returned.
 If no slot is available then a status of -EBUSY is returned and buf is
 unmodified.

 The outFence parameter will be updated to hold the fence associated with
 the buffer. The contents of the buffer must not be overwritten until the
 fence signals. If the fence is Fence::NO_FENCE, the buffer may be
 written immediately.

 The width and height parameters must be no greater than the minimum of
 GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see: glGetIntegerv).
 An error due to invalid dimensions might not be reported until
 updateTexImage() is called.  If width and height are both zero, the
 default values specified by setDefaultBufferSize() are used instead.

 If the format is 0, the default format will be used.

 The usage argument specifies gralloc buffer usage flags.  The values
 are enumerated in gralloc.h, e.g. GRALLOC_USAGE_HW_RENDER.  These
 will be merged with the usage flags specified by setConsumerUsageBits.

 The return value may be a negative error value or a non-negative
 collection of flags.  If the flags are set, the return values are
 valid, but additional actions must be performed.

 If IGraphicBufferProducer::BUFFER_NEEDS_REALLOCATION is set, the
 producer must discard cached GraphicBuffer references for the slot
 returned in buf.
 If IGraphicBufferProducer::RELEASE_ALL_BUFFERS is set, the producer
 must discard cached GraphicBuffer references for all slots.

 In both cases, the producer will need to call requestBuffer to get a
 GraphicBuffer handle for the returned slot."
      end

      operation 45599799 "detachBuffer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::detachBuffer"
      end

      operation 45599927 "detachNextBuffer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "outBuffer" explicit_type "sp<GraphicBuffer>"
	  param inout name "outFence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::detachNextBuffer"
      end

      operation 45600055 "attachBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "outSlot" explicit_type "int"
	  param in name "buffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::attachBuffer"
      end

      operation 45600183 "queueBuffer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param in name "slot" explicit_type "int"
	  param in name "input" explicit_type "QueueBufferInput"
	  param inout name "output" explicit_type "QueueBufferOutput"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " queueBuffer returns a filled buffer to the BufferQueue.

 Additional data is provided in the QueueBufferInput struct.  Notably,
 a timestamp must be provided for the buffer. The timestamp is in
 nanoseconds, and must be monotonically increasing. Its other semantics
 (zero point, etc) are producer-specific and should be documented by the
 producer.

 The caller may provide a fence that signals when all rendering
 operations have completed.  Alternatively, NO_FENCE may be used,
 indicating that the buffer is ready immediately.

 Some values are returned in the output struct: the current settings
 for default width and height, the current transform hint, and the
 number of queued buffers."
      end

      operation 45600311 "cancelBuffer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "slot" explicit_type "int"
	  param in name "fence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " cancelBuffer returns a dequeued buffer to the BufferQueue, but doesn't
 queue it for use by the consumer.

 The buffer will not be overwritten until the fence signals.  The fence
 will usually be the one obtained from dequeueBuffer."
      end

      operation 45600439 "query"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "int"
	nparams 2
	  param in name "what" explicit_type "int"
	  param inout name "outValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query native window attributes.  The \"what\" values are enumerated in
 window.h (e.g. NATIVE_WINDOW_FORMAT)."
      end

      operation 45600567 "connect"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "listener" explicit_type "sp<IProducerListener>"
	  param in name "api" explicit_type "int"
	  param in name "producerControlledByApp" explicit_type "bool"
	  param inout name "output" explicit_type "QueueBufferOutput"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " connect attempts to connect a producer API to the BufferQueue.  This
 must be called before any other IGraphicBufferProducer methods are
 called except for getAllocator.  A consumer must already be connected.

 This method will fail if connect was previously called on the
 BufferQueue and no corresponding disconnect call was made (i.e. if
 it's still connected to a producer).

 APIs are enumerated in window.h (e.g. NATIVE_WINDOW_API_CPU)."
      end

      operation 45600695 "disconnect"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "api" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " disconnect attempts to disconnect a producer API from the BufferQueue.
 Calling this method will cause any subsequent calls to other
 IGraphicBufferProducer methods to fail except for getAllocator and connect.
 Successfully calling connect after this will allow the other methods to
 succeed again.

 This method will fail if the the BufferQueue is not currently
 connected to the specified producer API."
      end

      operation 45600823 "setSidebandStream"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "stream" explicit_type "sp<NativeHandle>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Attaches a sideband buffer stream to the IGraphicBufferProducer.

 A sideband stream is a device-specific mechanism for passing buffers
 from the producer to the consumer without using dequeueBuffer/
 queueBuffer. If a sideband stream is present, the consumer can choose
 whether to acquire buffers from the sideband stream or from the queued
 buffers.

 Passing NULL or a different stream handle will detach the previous
 handle if any."
      end

      operation 45600951 "allocateBuffers"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 4
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	  param in name "format" type class_ref 4354615 // PixelFormat
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::allocateBuffers"
      end

      operation 45601079 "allowAllocation"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "allow" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::allowAllocation"
      end

      operation 45601207 "setGenerationNumber"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "generationNumber" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::setGenerationNumber"
      end

      operation 45601335 "getConsumerName"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "String8"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::getConsumerName"
      end

      operation 45601463 "getNextFrameNumber"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "uint64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::getNextFrameNumber"
      end

      operation 45601591 "setSharedBufferMode"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "sharedBufferMode" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::setSharedBufferMode"
      end

      operation 45601719 "setAutoRefresh"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "autoRefresh" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::setAutoRefresh"
      end

      operation 45601847 "setDequeueTimeout"
	cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "timeout" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::setDequeueTimeout"
      end

      operation 45601975 "getLastQueuedBuffer"
	cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param inout name "outBuffer" explicit_type "sp<GraphicBuffer>"
	  param inout name "outFence" explicit_type "sp<Fence>"
	  param in name "outTransformMatrix" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::getLastQueuedBuffer"
      end

      operation 45602103 "getUniqueId"
	const cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "outId" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::getUniqueId"
      end

      operation 45602231 "binderDied"
	cpp_virtual private explicit_return_type "void"
	nparams 1
	  param in name "who" explicit_type "wp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This is required by the IBinder::DeathRecipient interface"
      end

      operation 45602359 "getFreeBufferLocked"
	preserve_cpp_body_indent const private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the slot of the next free buffer if one is available or
 BufferQueueCore::INVALID_BUFFER_SLOT otherwise"
      end

      operation 45602487 "getFreeSlotLocked"
	preserve_cpp_body_indent const private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the next free slot if one is available or
 BufferQueueCore::INVALID_BUFFER_SLOT otherwise"
      end

      class 4356663 "FreeSlotCaller"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end
    end

    class 4355767 "IGraphicBufferAlloc"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12285367 // <generalisation>
	relation 12284343 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12285367 // <generalisation>
	  b parent class_ref 4341047 // IInterface
      end

      operation 45618487 "createGraphicBuffer"
	abstract cpp_virtual public explicit_return_type "sp<GraphicBuffer>"
	nparams 5
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" type class_ref 4354615 // PixelFormat
	  param in name "usage" explicit_type "uint32_t"
	  param inout name "error" explicit_type "status_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a new GraphicBuffer for the client to use."
      end
    end

    class 4355895 "IConsumerListener"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Asynchronous "
      classrelation 12284727 // <generalisation>
	relation 12283703 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12284727 // <generalisation>
	  b parent class_ref 4356791 // ConsumerListener
      end

      classrelation 12284855 // <generalisation>
	relation 12283831 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12284855 // <generalisation>
	  b parent class_ref 4341047 // IInterface
      end
    end

    class 4356023 "IProducerListener"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Asynchronous"
      classrelation 12286903 // <generalisation>
	relation 12285879 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12286903 // <generalisation>
	  b parent class_ref 4360759 // ProducerListener
      end

      classrelation 12287031 // <generalisation>
	relation 12286007 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12287031 // <generalisation>
	  b parent class_ref 4341047 // IInterface
      end
    end

    class 4356407 "BufferSlot"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 45605047 "BufferSlot"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mGraphicBuffer(nullptr),
      mEglDisplay(EGL_NO_DISPLAY),
      mBufferState(),
      mRequestBufferCalled(false),
      mFrameNumber(0),
      mEglFence(EGL_NO_SYNC_KHR),
      mFence(Fence::NO_FENCE),
      mAcquireCalled(false),
      mNeedsReallocation(false) {
    };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      classrelation 12278583 // mGraphicBuffer (<directional composition>)
	relation 12277559 *-->
	  stereotype "sp"
	  a role_name "mGraphicBuffer" public
	    comment " mGraphicBuffer points to the buffer allocated for this slot or is NULL
 if no buffer has been allocated."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12278583 // mGraphicBuffer (<directional composition>)
	  b parent class_ref 4351927 // GraphicBuffer
      end

      classrelation 12278711 // mEglDisplay (<directional composition>)
	relation 12277687 *-->
	  a role_name "mEglDisplay" public
	    comment " mEglDisplay is the EGLDisplay used to create EGLSyncKHR objects."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12278711 // mEglDisplay (<directional composition>)
	  b parent class_ref 4329655 // EGLDisplay
      end

      classrelation 12278839 // mBufferState (<directional composition>)
	relation 12277815 *-->
	  a role_name "mBufferState" public
	    comment " mBufferState is the current state of this buffer slot."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12278839 // mBufferState (<directional composition>)
	  b parent class_ref 4343991 // BufferState
      end

      attribute 13775415 "mRequestBufferCalled"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mRequestBufferCalled is used for validating that the producer did
 call requestBuffer() when told to do so. Technically this is not
 needed but useful for debugging and catching producer bugs."
      end

      attribute 13775543 "mFrameNumber"
	public explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mFrameNumber is the number of the queued frame for this slot.  This
 is used to dequeue buffers in LRU order (useful because buffers
 may be released before their release fence is signaled)."
      end

      classrelation 12278967 // mEglFence (<directional composition>)
	relation 12277943 *-->
	  a role_name "mEglFence" public
	    comment " mEglFence is the EGL sync object that must signal before the buffer
 associated with this buffer slot may be dequeued. It is initialized
 to EGL_NO_SYNC_KHR when the buffer is created and may be set to a
 new sync object in releaseBuffer.  (This is deprecated in favor of
 mFence, below.)"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12278967 // mEglFence (<directional composition>)
	  b parent class_ref 4354487 // EGLSyncKHR
      end

      classrelation 12279095 // mFence (<directional composition>)
	relation 12278071 *-->
	  stereotype "sp"
	  a role_name "mFence" public
	    comment " mFence is a fence which will signal when work initiated by the
 previous owner of the buffer is finished. When the buffer is FREE,
 the fence indicates when the consumer has finished reading
 from the buffer, or when the producer has finished writing if it
 called cancelBuffer after queueing some writes. When the buffer is
 QUEUED, it indicates when the producer has finished filling the
 buffer. When the buffer is DEQUEUED or ACQUIRED, the fence has been
 passed to the consumer or producer along with ownership of the
 buffer, and mFence is set to NO_FENCE."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12279095 // mFence (<directional composition>)
	  b parent class_ref 4352055 // Fence
      end

      attribute 13775671 "mAcquireCalled"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Indicates whether this buffer has been seen by a consumer yet"
      end

      attribute 13775799 "mNeedsReallocation"
	public explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Indicates whether the buffer was re-allocated without notifying the
 producer. If so, it needs to set the BUFFER_NEEDS_REALLOCATION flag when
 dequeued to prevent the producer from using a stale cached buffer."
      end
    end

    class 4356535 "BnGraphicBufferProducer"
      visibility package 
      nactuals 1
      actual class class_ref 4341559 // BnInterface
        rank 0 value class_ref 4360119 // IGraphicBufferProducer
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 12286519 // <realization>
	relation 12285495 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12286519 // <realization>
	  b parent class_ref 4341559 // BnInterface
      end

      operation 45625271 "onTransact"
	cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" type class_ref 4340535 // Parcel
	  param inout name "reply" type class_ref 4340535 // Parcel
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4356791 "ConsumerListener"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ConsumerListener is the interface through which the BufferQueue notifies
 the consumer of events that the consumer may wish to react to.  Because
 the consumer will generally have a mutex that is locked during calls from
 the consumer to the BufferQueue, these calls from the BufferQueue to the
 consumer *MUST* be called only when the BufferQueue mutex is NOT locked."
      classrelation 12284471 // <generalisation>
	relation 12283447 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12284471 // <generalisation>
	  b parent class_ref 4354999 // typedef10
      end

      classrelation 12284599 // <generalisation>
	relation 12283575 ---|>
	  a private
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12284599 // <generalisation>
	  b parent class_ref 4351415 // typedef8
      end

      operation 45617079 "ConsumerListener"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} { };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45617207 "~ConsumerListener"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { };
"
	
	
	
	
      end

      operation 45617335 "onFrameAvailable"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "item" type class_ref 4351543 // BufferItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " onFrameAvailable is called from queueBuffer each time an additional
 frame becomes available for consumption. This means that frames that
 are queued while in asynchronous mode only trigger the callback if no
 previous frames are pending. Frames queued while in synchronous mode
 always trigger the callback. The item passed to the callback will contain
 all of the information about the queued frame except for its
 GraphicBuffer pointer, which will always be null.

 This is called without any lock held and can be called concurrently
 by multiple threads."
      end

      operation 45617463 "onFrameReplaced"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "" type class_ref 4351543 // BufferItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Asynchronous 
 onFrameReplaced is called from queueBuffer if the frame being queued is
 replacing an existing slot in the queue. Any call to queueBuffer that
 doesn't call onFrameAvailable will call this callback instead. The item
 passed to the callback will contain all of the information about the
 queued frame except for its GraphicBuffer pointer, which will always be
 null.

 This is called without any lock held and can be called concurrently
 by multiple threads."
      end

      operation 45617591 "onBuffersReleased"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Asynchronous 
 onBuffersReleased is called to notify the buffer consumer that the
 BufferQueue has released its references to one or more GraphicBuffers
 contained in its slots.  The buffer consumer should then call
 BufferQueue::getReleasedBuffers to retrieve the list of buffers

 This is called without any lock held and can be called concurrently
 by multiple threads."
      end

      operation 45617719 "onSidebandStreamChanged"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Asynchronous 
 onSidebandStreamChanged is called to notify the buffer consumer that the
 BufferQueue's sideband buffer stream has changed. This is called when a
 stream is first attached and when it is either detached or replaced by a
 different stream."
      end
    end

    class 4357303 "IGraphicBufferConsumer"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12285623 // <generalisation>
	relation 12284599 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12285623 // <generalisation>
	  b parent class_ref 4341047 // IInterface
      end

      class 4359991 "anonymous72"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13781431 "STALE_BUFFER_SLOT"
	  public type class_ref 4359991 // anonymous72
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13781559 "NO_BUFFER_AVAILABLE"
	  public type class_ref 4359991 // anonymous72
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13781687 "PRESENT_LATER"
	  public type class_ref 4359991 // anonymous72
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 45618743 "acquireBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param inout name "buffer" type class_ref 4351543 // BufferItem
	  param in name "presentWhen" explicit_type "nsecs_t"
	  param in name "maxFrameNumber" explicit_type "uint64_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " acquireBuffer attempts to acquire ownership of the next pending buffer in
 the BufferQueue.  If no buffer is pending then it returns
 NO_BUFFER_AVAILABLE.  If a buffer is successfully acquired, the
 information about the buffer is returned in BufferItem.

 If the buffer returned had previously been
 acquired then the BufferItem::mGraphicBuffer field of buffer is set to
 NULL and it is assumed that the consumer still holds a reference to the
 buffer.

 If presentWhen is non-zero, it indicates the time when the buffer will
 be displayed on screen.  If the buffer's timestamp is farther in the
 future, the buffer won't be acquired, and PRESENT_LATER will be
 returned.  The presentation time is in nanoseconds, and the time base
 is CLOCK_MONOTONIC.

 If maxFrameNumber is non-zero, it indicates that acquireBuffer should
 only return a buffer with a frame number less than or equal to
 maxFrameNumber. If no such frame is available (such as when a buffer has
 been replaced but the consumer has not received the onFrameReplaced
 callback), then PRESENT_LATER will be returned.

 Return of NO_ERROR means the operation completed as normal.

 Return of a positive value means the operation could not be completed
    at this time, but the user should try again later:
 * NO_BUFFER_AVAILABLE - no buffer is pending (nothing queued by producer)
 * PRESENT_LATER - the buffer's timestamp is farther in the future

 Return of a negative value means an error has occurred:
 * INVALID_OPERATION - too many buffers have been acquired"
      end

      operation 45618871 "detachBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " detachBuffer attempts to remove all ownership of the buffer in the given
 slot from the buffer queue. If this call succeeds, the slot will be
 freed, and there will be no way to obtain the buffer from this interface.
 The freed slot will remain unallocated until either it is selected to
 hold a freshly allocated buffer in dequeueBuffer or a buffer is attached
 to the slot. The buffer must have already been acquired.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - the given slot number is invalid, either because it is
               out of the range [0, NUM_BUFFER_SLOTS) or because the slot
               it refers to is not currently acquired."
      end

      operation 45618999 "attachBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "outSlot" explicit_type "int"
	  param in name "buffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " attachBuffer attempts to transfer ownership of a buffer to the buffer
 queue. If this call succeeds, it will be as if this buffer was acquired
 from the returned slot number. As such, this call will fail if attaching
 this buffer would cause too many buffers to be simultaneously acquired.

 If the buffer is successfully attached, its frameNumber is initialized
 to 0. This must be passed into the releaseBuffer call or else the buffer
 will be deallocated as stale.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - outSlot or buffer were NULL, or the generation number of
               the buffer did not match the buffer queue.
 * INVALID_OPERATION - cannot attach the buffer because it would cause too
                       many buffers to be acquired.
 * NO_MEMORY - no free slots available"
      end

      operation 45619127 "releaseBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "buf" explicit_type "int"
	  param in name "frameNumber" explicit_type "uint64_t"
	  param in name "display" type class_ref 4329655 // EGLDisplay
	  param in name "fence" type class_ref 4354487 // EGLSyncKHR
	  param in name "releaseFence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " releaseBuffer releases a buffer slot from the consumer back to the
 BufferQueue.  This may be done while the buffer's contents are still
 being accessed.  The fence will signal when the buffer is no longer
 in use. frameNumber is used to indentify the exact buffer returned.

 If releaseBuffer returns STALE_BUFFER_SLOT, then the consumer must free
 any references to the just-released buffer that it might have, as if it
 had received a onBuffersReleased() call with a mask set for the released
 buffer.

 Note that the dependencies on EGL will be removed once we switch to using
 the Android HW Sync HAL.

 Return of NO_ERROR means the operation completed as normal.

 Return of a positive value means the operation could not be completed
    at this time, but the user should try again later:
 * STALE_BUFFER_SLOT - see above (second paragraph)

 Return of a negative value means an error has occurred:
 * BAD_VALUE - one of the following could've happened:
               * the buffer slot was invalid
               * the fence was NULL
               * the buffer slot specified is not in the acquired state"
      end

      operation 45619255 "consumerConnect"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "consumer" explicit_type "sp<IConsumerListener>"
	  param in name "controlledByApp" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " consumerConnect connects a consumer to the BufferQueue.  Only one
 consumer may be connected, and when that consumer disconnects the
 BufferQueue is placed into the \"abandoned\" state, causing most
 interactions with the BufferQueue by the producer to fail.
 controlledByApp indicates whether the consumer is controlled by
 the application.

 consumer may not be NULL.

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned
 * BAD_VALUE - a NULL consumer was provided"
      end

      operation 45619383 "consumerDisconnect"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " consumerDisconnect disconnects a consumer from the BufferQueue. All
 buffers will be freed and the BufferQueue is placed in the \"abandoned\"
 state, causing most interactions with the BufferQueue by the producer to
 fail.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - no consumer is currently connected"
      end

      operation 45619511 "getReleasedBuffers"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "slotMask" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getReleasedBuffers sets the value pointed to by slotMask to a bit set.
 Each bit index with a 1 corresponds to a released buffer slot with that
 index value.  In particular, a released buffer is one that has
 been released by the BufferQueue but have not yet been released by the consumer.

 This should be called from the onBuffersReleased() callback.

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned."
      end

      operation 45619639 "setDefaultBufferSize"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setDefaultBufferSize is used to set the size of buffers returned by
 dequeueBuffer when a width and height of zero is requested.  Default
 is 1x1.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - either w or h was zero"
      end

      operation 45619767 "setMaxBufferCount"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setMaxBufferCount sets the maximum value for the number of buffers used
 in the buffer queue (the initial default is NUM_BUFFER_SLOTS). If a call
 to setMaxAcquiredBufferCount (by the consumer), or a call to setAsyncMode
 or setMaxDequeuedBufferCount (by the producer), would cause this value to
 be exceeded then that call will fail. This call will fail if a producer
 is connected to the BufferQueue.

 The count must be between 1 and NUM_BUFFER_SLOTS, inclusive. The count
 cannot be less than maxAcquiredBufferCount.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - one of the below conditions occurred:
             * bufferCount was out of range (see above).
             * failure to adjust the number of available slots.
 * INVALID_OPERATION - attempting to call this after a producer connected."
      end

      operation 45619895 "setMaxAcquiredBufferCount"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "maxAcquiredBuffers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setMaxAcquiredBufferCount sets the maximum number of buffers that can
 be acquired by the consumer at one time (default 1). If this method
 succeeds, any new buffer slots will be both unallocated and owned by the
 BufferQueue object (i.e. they are not owned by the producer or consumer).
 Calling this may also cause some buffer slots to be emptied.

 This function should not be called with a value of maxAcquiredBuffers
 that is less than the number of currently acquired buffer slots. Doing so
 will result in a BAD_VALUE error.

 maxAcquiredBuffers must be (inclusive) between 1 and
 MAX_MAX_ACQUIRED_BUFFERS. It also cannot cause the maxBufferCount value
 to be exceeded.

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned
 * BAD_VALUE - one of the below conditions occurred:
             * maxAcquiredBuffers was out of range (see above).
             * failure to adjust the number of available slots.
             * client would have more than the requested number of
               acquired buffers after this call
 * INVALID_OPERATION - attempting to call this after a producer connected."
      end

      operation 45620023 "setConsumerName"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setConsumerName sets the name used in logging"
      end

      operation 45620151 "setDefaultBufferFormat"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultFormat" type class_ref 4354615 // PixelFormat
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setDefaultBufferFormat allows the BufferQueue to create
 GraphicBuffers of a defaultFormat if no format is specified
 in dequeueBuffer.
 The initial default is PIXEL_FORMAT_RGBA_8888.

 Return of a value other than NO_ERROR means an unknown error has occurred."
      end

      operation 45620279 "setDefaultBufferDataSpace"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "defaultDataSpace" explicit_type "android_dataspace"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setDefaultBufferDataSpace is a request to the producer to provide buffers
 of the indicated dataSpace. The producer may ignore this request.
 The initial default is HAL_DATASPACE_UNKNOWN.

 Return of a value other than NO_ERROR means an unknown error has occurred."
      end

      operation 45620407 "setConsumerUsageBits"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setConsumerUsageBits will turn on additional usage bits for dequeueBuffer.
 These are merged with the bits passed to dequeueBuffer.  The values are
 enumerated in gralloc.h, e.g. GRALLOC_USAGE_HW_RENDER; the default is 0.

 Return of a value other than NO_ERROR means an unknown error has occurred."
      end

      operation 45620535 "setTransformHint"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "hint" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setTransformHint bakes in rotation to buffers so overlays can be used.
 The values are enumerated in window.h, e.g.
 NATIVE_WINDOW_TRANSFORM_ROT_90.  The default is 0 (no transform).

 Return of a value other than NO_ERROR means an unknown error has occurred."
      end

      operation 45620663 "getSidebandStream"
	abstract const cpp_virtual public explicit_return_type "sp<NativeHandle>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieve the sideband buffer stream, if any."
      end

      operation 45620791 "discardFreeBuffers"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " discardFreeBuffers releases all currently-free buffers held by the queue,
 in order to reduce the memory consumption of the queue to the minimum
 possible without discarding data."
      end

      operation 45620919 "dump"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "result" explicit_type "String8"
	  param in name "prefix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " dump state into a string"
      end
    end

    class 4357431 "CpuConsumer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "CpuConsumer is a BufferQueue consumer endpoint that allows direct CPU
access to the underlying gralloc buffers provided by BufferQueue. Multiple
buffers may be acquired by it at once, to be used concurrently by the
CpuConsumer owner. Sets gralloc usage flags to be software-read-only.
This queue is synchronous by default."
      classrelation 12280503 // <generalisation>
	relation 12279479 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12280503 // <generalisation>
	  b parent class_ref 4352439 // ConsumerBase
      end

      class 4357559 "FrameAvailableListener"
	visibility package stereotype "typedef" base_type class_ref 4352567 // FrameAvailableListener
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12280631 // <dependency>
	  relation 12279607 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 12280631 // <dependency>
	    b parent class_ref 4352567 // FrameAvailableListener
	end
      end

      class 4357687 "LockedBuffer"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13776439 "data"
	  public explicit_type "uint8_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13776567 "width"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13776695 "height"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 12280759 // format (<directional composition>)
	  relation 12279735 *-->
	    a role_name "format" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12280759 // format (<directional composition>)
	    b parent class_ref 4354615 // PixelFormat
	end

	attribute 13776823 "stride"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 12280887 // crop (<directional composition>)
	  relation 12279863 *-->
	    a role_name "crop" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12280887 // crop (<directional composition>)
	    b parent class_ref 4352183 // Rect
	end

	attribute 13776951 "transform"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13777079 "scalingMode"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13777207 "timestamp"
	  public explicit_type "int64_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13777335 "dataSpace"
	  public explicit_type "android_dataspace"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13777463 "frameNumber"
	  public explicit_type "uint64_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 12281015 // flexFormat (<directional composition>)
	  relation 12279991 *-->
	    a role_name "flexFormat" public
	      comment " this is the same as format, except for formats that are compatible with
 a flexible format (e.g. HAL_PIXEL_FORMAT_YCbCr_420_888). In the latter
 case this contains that flexible format"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12281015 // flexFormat (<directional composition>)
	    b parent class_ref 4354615 // PixelFormat
	end

	attribute 13777591 "dataCb"
	  public explicit_type "uint8_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Values below are only valid when using HAL_PIXEL_FORMAT_YCbCr_420_888
 or compatible format, in which case LockedBuffer::data
 contains the Y channel, and stride is the Y channel stride. For other
 formats, these will all be 0."
	end

	attribute 13777719 "dataCr"
	  public explicit_type "uint8_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13777847 "chromaStride"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13777975 "chromaStep"
	  public explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 45609015 "LockedBuffer"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
            data(NULL),
            width(0),
            height(0),
            format(PIXEL_FORMAT_NONE),
            stride(0),
            crop(Rect::EMPTY_RECT),
            transform(0),
            scalingMode(NATIVE_WINDOW_SCALING_MODE_FREEZE),
            timestamp(0),
            dataSpace(HAL_DATASPACE_UNKNOWN),
            frameNumber(0),
            flexFormat(PIXEL_FORMAT_NONE),
            dataCb(NULL),
            dataCr(NULL),
            chromaStride(0),
            chromaStep(0)
        {};
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end
      end

      operation 45609143 "CpuConsumer"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param in name "bq" explicit_type "sp<IGraphicBufferConsumer>"
	  param in name "maxLockedBuffers" explicit_type "size_t"
	  param in name "controlledByApp" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)} :
    ConsumerBase(bq, controlledByApp),
    mMaxLockedBuffers(maxLockedBuffers),
    mCurrentLockedBuffers(0)
${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Create a new CPU consumer. The maxLockedBuffers parameter specifies
 how many buffers can be locked for user access at the same time."
      end

      operation 45609271 "~CpuConsumer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45609399 "setName"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " set the name of the CpuConsumer that will be used to identify it in
 log messages."
      end

      operation 45609527 "lockNextBuffer"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param inout name "nativeBuffer" type class_ref 4357687 // LockedBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the next graphics buffer from the producer and locks it for CPU use,
 filling out the passed-in locked buffer structure with the native pointer
 and metadata. Returns BAD_VALUE if no new buffer is available, and
 NOT_ENOUGH_DATA if the maximum number of buffers is already locked.

 Only a fixed number of buffers can be locked at a time, determined by the
 construction-time maxLockedBuffers parameter. If INVALID_OPERATION is
 returned by lockNextBuffer, then old buffers must be returned to the queue
 by calling unlockBuffer before more buffers can be acquired."
      end

      operation 45609655 "unlockBuffer"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "nativeBuffer" type class_ref 4357687 // LockedBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a locked buffer to the queue, allowing it to be reused. Since
 only a fixed number of buffers may be locked at a time, old buffers must
 be released by calling unlockBuffer to ensure new buffers can be acquired by
 lockNextBuffer."
      end

      attribute 13778103 "mMaxLockedBuffers"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Maximum number of buffers that can be locked at a time"
      end

      operation 45609783 "releaseAcquiredBufferLocked"
	preserve_cpp_body_indent private explicit_return_type "status_t"
	nparams 1
	  param in name "lockedIdx" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45609911 "freeBufferLocked"
	preserve_cpp_body_indent cpp_virtual private explicit_return_type "void"
	nparams 1
	  param in name "slotIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 4357815 "AcquiredBuffer"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13778231 "mSlot"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Need to track the original mSlot index and the buffer itself because
 the mSlot entry may be freed/reused before the acquired buffer is
 released."
	end

	classrelation 12281143 // mGraphicBuffer (<directional composition>)
	  relation 12280119 *-->
	    stereotype "sp"
	    a role_name "mGraphicBuffer" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12281143 // mGraphicBuffer (<directional composition>)
	    b parent class_ref 4351927 // GraphicBuffer
	end

	attribute 13778359 "mBufferPointer"
	  public explicit_type "void"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 45610039 "AcquiredBuffer"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} :
                mSlot(BufferQueue::INVALID_BUFFER_SLOT),
                mBufferPointer(NULL) {
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 12281271 // mAcquiredBuffers (<directional composition>)
	relation 12280247 *-->
	  stereotype "Vector"
	  a role_name "mAcquiredBuffers" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12281271 // mAcquiredBuffers (<directional composition>)
	  b parent class_ref 4357815 // AcquiredBuffer
      end

      attribute 13778487 "mCurrentLockedBuffers"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Count of currently locked buffers"
      end
    end

    class 4357943 "DisplayEventReceiver"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      class 4358071 "anonymous70"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13778615 "DISPLAY_EVENT_VSYNC"
	  public type class_ref 4358071 // anonymous70
	  init_value " 'vsyn'"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13778743 "DISPLAY_EVENT_HOTPLUG"
	  public type class_ref 4358071 // anonymous70
	  init_value " 'plug'
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4358199 "Event"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 4358327 "Header"
	  visibility package stereotype "struct"
	  cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 13778871 "type"
	    public explicit_type "uint32_t"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 13778999 "id"
	    public explicit_type "uint32_t"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end
	end

	class 4358455 "VSync"
	  visibility package stereotype "struct"
	  cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 13779127 "count"
	    public explicit_type "uint32_t"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end
	end

	class 4358583 "Hotplug"
	  visibility package stereotype "struct"
	  cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  attribute 13779255 "connected"
	    public explicit_type "bool"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end
	end

	classrelation 12281399 // header (<directional composition>)
	  relation 12280375 *-->
	    a role_name "header" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12281399 // header (<directional composition>)
	    b parent class_ref 4358327 // Header
	end

	classrelation 12281527 // vsync (<directional composition>)
	  relation 12280503 *-->
	    a role_name "vsync" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12281527 // vsync (<directional composition>)
	    b parent class_ref 4358455 // VSync
	end

	classrelation 12281655 // hotplug (<directional composition>)
	  relation 12280631 *-->
	    a role_name "hotplug" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12281655 // hotplug (<directional composition>)
	    b parent class_ref 4358583 // Hotplug
	end
      end
    end

    class 4359607 "BnGraphicBufferAlloc"
      visibility package 
      nactuals 1
      actual class class_ref 4341559 // BnInterface
        rank 0 value class_ref 4355767 // IGraphicBufferAlloc
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 12285495 // <realization>
	relation 12284471 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12285495 // <realization>
	  b parent class_ref 4341559 // BnInterface
      end

      operation 45618615 "onTransact"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" type class_ref 4340535 // Parcel
	  param inout name "reply" type class_ref 4340535 // Parcel
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4359735 "IDisplayEventConnection"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12285111 // <generalisation>
	relation 12284087 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12285111 // <generalisation>
	  b parent class_ref 4341047 // IInterface
      end

      operation 45617975 "getDataChannel"
	abstract const cpp_virtual public explicit_return_type "sp<BitTube>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "getDataChannel() returns a BitTube where to receive the events from"
      end

      operation 45618103 "setVsyncRate"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "setVsyncRate() sets the vsync event delivery rate. A value of
1 returns every vsync events. A value of 2 returns every other events,
etc... a value of 0 returns no event unless  requestNextVsync() has
been called."
      end

      operation 45618231 "requestNextVsync"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "requestNextVsync() schedules the next vsync event. It has no effect
if the vsync rate is > 0."
      end
    end

    class 4359863 "BnDisplayEventConnection"
      visibility package 
      nactuals 1
      actual class class_ref 4341559 // BnInterface
        rank 0 value class_ref 4359735 // IDisplayEventConnection
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " asynchronous
 ----------------------------------------------------------------------------"
      classrelation 12285239 // <realization>
	relation 12284215 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12285239 // <realization>
	  b parent class_ref 4341559 // BnInterface
      end

      operation 45618359 "onTransact"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" type class_ref 4340535 // Parcel
	  param inout name "reply" type class_ref 4340535 // Parcel
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4360119 "IGraphicBufferProducer"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class defines the Binder IPC interface for the producer side of
a queue of graphics buffers.  It's used to send graphics data from one
component to another.  For example, a class that decodes video for
playback might use this to provide frames.  This is typically done
indirectly, through Surface.

The underlying mechanism is a BufferQueue, which implements
BnGraphicBufferProducer.  In normal operation, the producer calls
dequeueBuffer() to get an empty buffer, fills it with data, then
calls queueBuffer() to make it available to the consumer.

This class was previously called ISurfaceTexture."
      classrelation 12285879 // <generalisation>
	relation 12284855 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12285879 // <generalisation>
	  b parent class_ref 4341047 // IInterface
      end

      class 4360247 "anonymous73"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13781815 "BUFFER_NEEDS_REALLOCATION"
	  public type class_ref 4360247 // anonymous73
	  init_value " 0x1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13781943 "RELEASE_ALL_BUFFERS"
	  public type class_ref 4360247 // anonymous73
	  init_value " 0x2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 45621175 "requestBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "slot" explicit_type "int"
	  param inout name "buf" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " requestBuffer requests a new buffer for the given index. The server (i.e.
 the IGraphicBufferProducer implementation) assigns the newly created
 buffer to the given slot index, and the client is expected to mirror the
 slot->buffer mapping so that it's not necessary to transfer a
 GraphicBuffer for every dequeue operation.

 The slot must be in the range of [0, NUM_BUFFER_SLOTS).

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned or the producer is not
             connected.
 * BAD_VALUE - one of the two conditions occurred:
              * slot was out of range (see above)
              * buffer specified by the slot is not dequeued"
      end

      operation 45621303 "setMaxDequeuedBufferCount"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "maxDequeuedBuffers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setMaxDequeuedBufferCount sets the maximum number of buffers that can be
 dequeued by the producer at one time. If this method succeeds, any new
 buffer slots will be both unallocated and owned by the BufferQueue object
 (i.e. they are not owned by the producer or consumer). Calling this may
 also cause some buffer slots to be emptied. If the caller is caching the
 contents of the buffer slots, it should empty that cache after calling
 this method.

 This function should not be called with a value of maxDequeuedBuffers
 that is less than the number of currently dequeued buffer slots. Doing so
 will result in a BAD_VALUE error.

 The buffer count should be at least 1 (inclusive), but at most
 (NUM_BUFFER_SLOTS - the minimum undequeued buffer count) (exclusive). The
 minimum undequeued buffer count can be obtained by calling
 query(NATIVE_WINDOW_MIN_UNDEQUEUED_BUFFERS).

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned.
 * BAD_VALUE - one of the below conditions occurred:
     * bufferCount was out of range (see above).
     * client would have more than the requested number of dequeued
       buffers after this call.
     * this call would cause the maxBufferCount value to be exceeded.
     * failure to adjust the number of available slots."
      end

      operation 45621431 "setAsyncMode"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "async" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the async flag if the producer intends to asynchronously queue
 buffers without blocking. Typically this is used for triple-buffering
 and/or when the swap interval is set to zero.

 Enabling async mode will internally allocate an additional buffer to
 allow for the asynchronous behavior. If it is not enabled queue/dequeue
 calls may block.

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned.
 * BAD_VALUE - one of the following has occurred:
             * this call would cause the maxBufferCount value to be
               exceeded
             * failure to adjust the number of available slots."
      end

      operation 45621559 "dequeueBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 6
	  param inout name "slot" explicit_type "int"
	  param inout name "fence" explicit_type "sp<Fence>"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" type class_ref 4354615 // PixelFormat
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " dequeueBuffer requests a new buffer slot for the client to use. Ownership
 of the slot is transfered to the client, meaning that the server will not
 use the contents of the buffer associated with that slot.

 The slot index returned may or may not contain a buffer (client-side).
 If the slot is empty the client should call requestBuffer to assign a new
 buffer to that slot.

 Once the client is done filling this buffer, it is expected to transfer
 buffer ownership back to the server with either cancelBuffer on
 the dequeued slot or to fill in the contents of its associated buffer
 contents and call queueBuffer.

 If dequeueBuffer returns the BUFFER_NEEDS_REALLOCATION flag, the client is
 expected to call requestBuffer immediately.

 If dequeueBuffer returns the RELEASE_ALL_BUFFERS flag, the client is
 expected to release all of the mirrored slot->buffer mappings.

 The fence parameter will be updated to hold the fence associated with
 the buffer. The contents of the buffer must not be overwritten until the
 fence signals. If the fence is Fence::NO_FENCE, the buffer may be written
 immediately.

 The width and height parameters must be no greater than the minimum of
 GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see: glGetIntegerv).
 An error due to invalid dimensions might not be reported until
 updateTexImage() is called.  If width and height are both zero, the
 default values specified by setDefaultBufferSize() are used instead.

 If the format is 0, the default format will be used.

 The usage argument specifies gralloc buffer usage flags.  The values
 are enumerated in <gralloc.h>, e.g. GRALLOC_USAGE_HW_RENDER.  These
 will be merged with the usage flags specified by
 IGraphicBufferConsumer::setConsumerUsageBits.

 This call will block until a buffer is available to be dequeued. If
 both the producer and consumer are controlled by the app, then this call
 can never block and will return WOULD_BLOCK if no buffer is available.

 A non-negative value with flags set (see above) will be returned upon
 success.

 Return of a negative means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned or the producer is not
             connected.
 * BAD_VALUE - both in async mode and buffer count was less than the
               max numbers of buffers that can be allocated at once.
 * INVALID_OPERATION - cannot attach the buffer because it would cause
                       too many buffers to be dequeued, either because
                       the producer already has a single buffer dequeued
                       and did not set a buffer count, or because a
                       buffer count was set and this call would cause
                       it to be exceeded.
 * WOULD_BLOCK - no buffer is currently available, and blocking is disabled
                 since both the producer/consumer are controlled by app
 * NO_MEMORY - out of memory, cannot allocate the graphics buffer.
 * TIMED_OUT - the timeout set by setDequeueTimeout was exceeded while
               waiting for a buffer to become available.

 All other negative values are an unknown error returned downstream
 from the graphics allocator (typically errno)."
      end

      operation 45621687 "detachBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "slot" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " detachBuffer attempts to remove all ownership of the buffer in the given
 slot from the buffer queue. If this call succeeds, the slot will be
 freed, and there will be no way to obtain the buffer from this interface.
 The freed slot will remain unallocated until either it is selected to
 hold a freshly allocated buffer in dequeueBuffer or a buffer is attached
 to the slot. The buffer must have already been dequeued, and the caller
 must already possesses the sp<GraphicBuffer> (i.e., must have called
 requestBuffer).

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned or the producer is not
             connected.
 * BAD_VALUE - the given slot number is invalid, either because it is
               out of the range [0, NUM_BUFFER_SLOTS), or because the slot
               it refers to is not currently dequeued and requested."
      end

      operation 45621815 "detachNextBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "outBuffer" explicit_type "sp<GraphicBuffer>"
	  param inout name "outFence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " detachNextBuffer is equivalent to calling dequeueBuffer, requestBuffer,
 and detachBuffer in sequence, except for two things:

 1) It is unnecessary to know the dimensions, format, or usage of the
    next buffer.
 2) It will not block, since if it cannot find an appropriate buffer to
    return, it will return an error instead.

 Only slots that are free but still contain a GraphicBuffer will be
 considered, and the oldest of those will be returned. outBuffer is
 equivalent to outBuffer from the requestBuffer call, and outFence is
 equivalent to fence from the dequeueBuffer call.

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned or the producer is not
             connected.
 * BAD_VALUE - either outBuffer or outFence were NULL.
 * NO_MEMORY - no slots were found that were both free and contained a
               GraphicBuffer."
      end

      operation 45621943 "attachBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param inout name "outSlot" explicit_type "int"
	  param in name "buffer" explicit_type "sp<GraphicBuffer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " attachBuffer attempts to transfer ownership of a buffer to the buffer
 queue. If this call succeeds, it will be as if this buffer was dequeued
 from the returned slot number. As such, this call will fail if attaching
 this buffer would cause too many buffers to be simultaneously dequeued.

 If attachBuffer returns the RELEASE_ALL_BUFFERS flag, the caller is
 expected to release all of the mirrored slot->buffer mappings.

 A non-negative value with flags set (see above) will be returned upon
 success.

 Return of a negative value means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned or the producer is not
             connected.
 * BAD_VALUE - outSlot or buffer were NULL, invalid combination of
               async mode and buffer count override, or the generation
               number of the buffer did not match the buffer queue.
 * INVALID_OPERATION - cannot attach the buffer because it would cause
                       too many buffers to be dequeued, either because
                       the producer already has a single buffer dequeued
                       and did not set a buffer count, or because a
                       buffer count was set and this call would cause
                       it to be exceeded.
 * WOULD_BLOCK - no buffer slot is currently available, and blocking is
                 disabled since both the producer/consumer are
                 controlled by the app.
 * TIMED_OUT - the timeout set by setDequeueTimeout was exceeded while
               waiting for a slot to become available."
      end

      class 4360375 "QueueBufferInput"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12286007 // <generalisation>
	  relation 12284983 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 12286007 // <generalisation>
	    b parent class_ref 4360503 // typedef14
	end

	extra_member 232375 "friend"
	  
	  cpp "
        friend class Flattenable<QueueBufferInput>;" ""
	  java ""
	  php ""
	  python ""
	  idl ""
	end

	operation 45622071 "QueueBufferInput"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "parcel" type class_ref 4340535 // Parcel
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 45622199 "QueueBufferInput"
	  cpp_inline public explicit_return_type ""
	  nparams 8
	    param in name "timestamp" explicit_type "int64_t"
	    param in name "isAutoTimestamp" explicit_type "bool"
	    param in name "dataSpace" explicit_type "android_dataspace"
	    param in name "crop" type class_ref 4352183 // Rect
	    param in name "scalingMode" explicit_type "int"
	    param in name "transform" explicit_type "uint32_t"
	    param in name "fence" explicit_type "sp<Fence>"
	    param in name "sticky" explicit_type "uint32_t"
	      defaultvalue "0"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, const ${t6} & ${p6}${v6}, ${t7} ${p7}${v7}${)}${volatile}${throw} : timestamp(timestamp), isAutoTimestamp(isAutoTimestamp),
                  dataSpace(dataSpace), crop(crop), scalingMode(scalingMode),
                  transform(transform), stickyTransform(sticky), fence(fence),
                  surfaceDamage() { };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment " timestamp - a monotonically increasing value in nanoseconds
 isAutoTimestamp - if the timestamp was synthesized at queue time
 dataSpace - description of the contents, interpretation depends on format
 crop - a crop rectangle that's used as a hint to the consumer
 scalingMode - a set of flags from NATIVE_WINDOW_SCALING_* in <window.h>
 transform - a set of flags from NATIVE_WINDOW_TRANSFORM_* in <window.h>
 fence - a fence that the consumer must wait on before reading the buffer,
         set this to Fence::NO_FENCE if the buffer is ready immediately
 sticky - the sticky transform set in Surface (only used by the LEGACY
          camera mode)."
	end

	operation 45622327 "deflate"
	  const cpp_inline public explicit_return_type "void"
	  nparams 8
	    param inout name "outTimestamp" explicit_type "int64_t"
	    param inout name "outIsAutoTimestamp" explicit_type "bool"
	    param inout name "outDataSpace" explicit_type "android_dataspace"
	    param inout name "outCrop" type class_ref 4352183 // Rect
	    param inout name "outScalingMode" explicit_type "int"
	    param inout name "outTransform" explicit_type "uint32_t"
	    param inout name "outFence" explicit_type "sp<Fence>"
	    param inout name "outStickyTransform" explicit_type "uint32_t"
	      defaultvalue "NULL"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} * ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
            *outTimestamp = timestamp;
            *outIsAutoTimestamp = bool(isAutoTimestamp);
            *outDataSpace = dataSpace;
            *outCrop = crop;
            *outScalingMode = scalingMode;
            *outTransform = transform;
            *outFence = fence;
            if (outStickyTransform != NULL) {
                *outStickyTransform = stickyTransform;
            }
        };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45622455 "getFlattenedSize"
	  const public explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Flattenable protocol"
	end

	operation 45622583 "getFdCount"
	  const public explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45622711 "flatten"
	  const public explicit_return_type "status_t"
	  nparams 4
	    param inout name "buffer" explicit_type "void"
	    param inout name "size" explicit_type "size_t"
	    param inout name "fds" explicit_type "int"
	    param inout name "count" explicit_type "size_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} * & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * & ${p0}, ${t1} & ${p1}, ${t2} * & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45622839 "unflatten"
	  public explicit_return_type "status_t"
	  nparams 4
	    param in name "buffer" explicit_type "void"
	    param inout name "size" explicit_type "size_t"
	    param in name "fds" explicit_type "int"
	    param inout name "count" explicit_type "size_t"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * & ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} * & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * & ${p0}, ${t1} & ${p1}, const ${t2} * & ${p2}, ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45622967 "getSurfaceDamage"
	  const cpp_inline public return_type class_ref 4360631 // Region
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return surfaceDamage; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45623095 "setSurfaceDamage"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "damage" type class_ref 4360631 // Region
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { surfaceDamage = damage; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 13782071 "timestamp"
	  private explicit_type "int64_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13782199 "isAutoTimestamp"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13782327 "dataSpace"
	  private explicit_type "android_dataspace"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 12286135 // crop (<directional composition>)
	  relation 12285111 *-->
	    a role_name "crop" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12286135 // crop (<directional composition>)
	    b parent class_ref 4352183 // Rect
	end

	attribute 13782455 "scalingMode"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13782583 "transform"
	  private explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13782711 "stickyTransform"
	  private explicit_type "uint32_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 12286263 // fence (<directional composition>)
	  relation 12285239 *-->
	    stereotype "sp"
	    a role_name "fence" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12286263 // fence (<directional composition>)
	    b parent class_ref 4352055 // Fence
	end

	classrelation 12286391 // surfaceDamage (<directional composition>)
	  relation 12285367 *-->
	    a role_name "surfaceDamage" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12286391 // surfaceDamage (<directional composition>)
	    b parent class_ref 4360631 // Region
	end
      end

      class 4360503 "typedef14"
	visibility package stereotype "typedef" explicit_base_type "Flattenable<QueueBufferInput>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 45623223 "queueBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param in name "slot" explicit_type "int"
	  param in name "input" type class_ref 4360375 // QueueBufferInput
	  param inout name "output" explicit_type "QueueBufferOutput"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45623351 "cancelBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "slot" explicit_type "int"
	  param in name "fence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " cancelBuffer indicates that the client does not wish to fill in the
 buffer associated with slot and transfers ownership of the slot back to
 the server.

 The buffer is not queued for use by the consumer.

 The slot must be in the range of [0, NUM_BUFFER_SLOTS).

 The buffer will not be overwritten until the fence signals.  The fence
 will usually be the one obtained from dequeueBuffer.

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned or the producer is not
             connected.
 * BAD_VALUE - one of the below conditions occurred:
              * fence was NULL
              * slot index was out of range (see above).
              * the slot was not in the dequeued state"
      end

      operation 45623479 "query"
	abstract cpp_virtual public explicit_return_type "int"
	nparams 2
	  param in name "what" explicit_type "int"
	  param inout name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " query retrieves some information for this surface
 'what' tokens allowed are that of NATIVE_WINDOW_* in <window.h>

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - the buffer queue has been abandoned.
 * BAD_VALUE - what was out of range"
      end

      operation 45623607 "connect"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "listener" explicit_type "sp<IProducerListener>"
	  param in name "api" explicit_type "int"
	  param in name "producerControlledByApp" explicit_type "bool"
	  param inout name "output" explicit_type "QueueBufferOutput"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " connect attempts to connect a client API to the IGraphicBufferProducer.
 This must be called before any other IGraphicBufferProducer methods are
 called except for getAllocator. A consumer must be already connected.

 This method will fail if the connect was previously called on the
 IGraphicBufferProducer and no corresponding disconnect call was made.

 The listener is an optional binder callback object that can be used if
 the producer wants to be notified when the consumer releases a buffer
 back to the BufferQueue. It is also used to detect the death of the
 producer. If only the latter functionality is desired, there is a
 DummyProducerListener class in IProducerListener.h that can be used.

 The api should be one of the NATIVE_WINDOW_API_* values in <window.h>

 The producerControlledByApp should be set to true if the producer is hosted
 by an untrusted process (typically app_process-forked processes). If both
 the producer and the consumer are app-controlled then all buffer queues
 will operate in async mode regardless of the async flag.

 Upon success, the output will be filled with meaningful data
 (refer to QueueBufferOutput documentation above).

 Return of a value other than NO_ERROR means an error has occurred:
 * NO_INIT - one of the following occurred:
             * the buffer queue was abandoned
             * no consumer has yet connected
 * BAD_VALUE - one of the following has occurred:
             * the producer is already connected
             * api was out of range (see above).
             * output was NULL.
             * Failure to adjust the number of available slots. This can
               happen because of trying to allocate/deallocate the async
               buffer in response to the value of producerControlledByApp.
 * DEAD_OBJECT - the token is hosted by an already-dead process

 Additional negative errors may be returned by the internals, they
 should be treated as opaque fatal unrecoverable errors."
      end

      operation 45623735 "disconnect"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "api" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " disconnect attempts to disconnect a client API from the
 IGraphicBufferProducer.  Calling this method will cause any subsequent
 calls to other IGraphicBufferProducer methods to fail except for
 getAllocator and connect.  Successfully calling connect after this will
 allow the other methods to succeed again.

 This method will fail if the the IGraphicBufferProducer is not currently
 connected to the specified client API.

 The api should be one of the NATIVE_WINDOW_API_* values in <window.h>

 Disconnecting from an abandoned IGraphicBufferProducer is legal and
 is considered a no-op.

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - one of the following has occurred:
             * the api specified does not match the one that was connected
             * api was out of range (see above).
 * DEAD_OBJECT - the token is hosted by an already-dead process"
      end

      operation 45623863 "setSidebandStream"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "stream" explicit_type "sp<NativeHandle>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Attaches a sideband buffer stream to the IGraphicBufferProducer.

 A sideband stream is a device-specific mechanism for passing buffers
 from the producer to the consumer without using dequeueBuffer/
 queueBuffer. If a sideband stream is present, the consumer can choose
 whether to acquire buffers from the sideband stream or from the queued
 buffers.

 Passing NULL or a different stream handle will detach the previous
 handle if any."
      end

      operation 45623991 "allocateBuffers"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 4
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	  param in name "format" type class_ref 4354615 // PixelFormat
	  param in name "usage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Allocates buffers based on the given dimensions/format.

 This function will allocate up to the maximum number of buffers
 permitted by the current BufferQueue configuration. It will use the
 given format, dimensions, and usage bits, which are interpreted in the
 same way as for dequeueBuffer, and the async flag must be set the same
 way as for dequeueBuffer to ensure that the correct number of buffers are
 allocated. This is most useful to avoid an allocation delay during
 dequeueBuffer. If there are already the maximum number of buffers
 allocated, this function has no effect."
      end

      operation 45624119 "allowAllocation"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "allow" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets whether dequeueBuffer is allowed to allocate new buffers.

 Normally dequeueBuffer does not discriminate between free slots which
 already have an allocated buffer and those which do not, and will
 allocate a new buffer if the slot doesn't have a buffer or if the slot's
 buffer doesn't match the requested size, format, or usage. This method
 allows the producer to restrict the eligible slots to those which already
 have an allocated buffer of the correct size, format, and usage. If no
 eligible slot is available, dequeueBuffer will block or return an error
 as usual."
      end

      operation 45624247 "setGenerationNumber"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "generationNumber" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the current generation number of the BufferQueue.

 This generation number will be inserted into any buffers allocated by the
 BufferQueue, and any attempts to attach a buffer with a different
 generation number will fail. Buffers already in the queue are not
 affected and will retain their current generation number. The generation
 number defaults to 0."
      end

      operation 45624375 "getConsumerName"
	abstract const cpp_virtual public explicit_return_type "String8"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the name of the connected consumer."
      end

      operation 45624503 "getNextFrameNumber"
	abstract const cpp_virtual public explicit_return_type "uint64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the number of the next frame which will be dequeued."
      end

      operation 45624631 "setSharedBufferMode"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "sharedBufferMode" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Used to enable/disable shared buffer mode.

 When shared buffer mode is enabled the first buffer that is queued or
 dequeued will be cached and returned to all subsequent calls to
 dequeueBuffer and acquireBuffer. This allows the producer and consumer to
 simultaneously access the same buffer."
      end

      operation 45624759 "setAutoRefresh"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "autoRefresh" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Used to enable/disable auto-refresh.

 Auto refresh has no effect outside of shared buffer mode. In shared
 buffer mode, when enabled, it indicates to the consumer that it should
 attempt to acquire buffers even if it is not aware of any being
 available."
      end

      operation 45624887 "setDequeueTimeout"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "timeout" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets how long dequeueBuffer will wait for a buffer to become available
 before returning an error (TIMED_OUT).

 This timeout also affects the attachBuffer call, which will block if
 there is not a free slot available into which the attached buffer can be
 placed.

 By default, the BufferQueue will wait forever, which is indicated by a
 timeout of -1. If set (to a value other than -1), this will disable
 non-blocking mode and its corresponding spare buffer (which is used to
 ensure a buffer is always available).

 Return of a value other than NO_ERROR means an error has occurred:
 * BAD_VALUE - Failure to adjust the number of available slots. This can
               happen because of trying to allocate/deallocate the async
               buffer."
      end

      operation 45625015 "getLastQueuedBuffer"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param inout name "outBuffer" explicit_type "sp<GraphicBuffer>"
	  param inout name "outFence" explicit_type "sp<Fence>"
	  param in name "outTransformMatrix" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}[16]${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the last queued buffer along with a fence which must signal
 before the contents of the buffer are read. If there are no buffers in
 the queue, outBuffer will be populated with nullptr and outFence will be
 populated with Fence::NO_FENCE

 outTransformMatrix is not modified if outBuffer is null.

 Returns NO_ERROR or the status of the Binder transaction"
      end

      operation 45625143 "getUniqueId"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "outId" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns a unique id for this BufferQueue"
      end
    end

    class 4360759 "ProducerListener"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ProducerListener is the interface through which the BufferQueue notifies the
 producer of events that the producer may wish to react to. Because the
 producer will generally have a mutex that is locked during calls from the
 producer to the BufferQueue, these calls from the BufferQueue to the
 producer *MUST* be called only when the BufferQueue mutex is NOT locked."
      classrelation 12286647 // <generalisation>
	relation 12285623 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12286647 // <generalisation>
	  b parent class_ref 4354999 // typedef10
      end

      classrelation 12286775 // <generalisation>
	relation 12285751 ---|>
	  a private
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12286775 // <generalisation>
	  b parent class_ref 4351415 // typedef8
      end

      operation 45625399 "ProducerListener"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45625527 "~ProducerListener"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 45625655 "onBufferReleased"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " onBufferReleased is called from IGraphicBufferConsumer::releaseBuffer to
 notify the producer that a new buffer is free and ready to be dequeued.

 This is called without any lock held and can be called concurrently by
 multiple threads."
      end
    end

    class 4360887 "DummyProducerListener"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12287159 // <generalisation>
	relation 12286135 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12287159 // <generalisation>
	  b parent class_ref 4361015 // typedef15
      end

      operation 45625783 "onBufferReleased"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4361015 "typedef15"
      visibility package stereotype "typedef" explicit_base_type "BnProducerListener"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 4361143 "ISensorEventConnection"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12287287 // <generalisation>
	relation 12286263 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12287287 // <generalisation>
	  b parent class_ref 4341047 // IInterface
      end

      operation 45625911 "getSensorChannel"
	abstract const cpp_virtual public explicit_return_type "sp<BitTube>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45626039 "enableDisable"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "handle" explicit_type "int"
	  param in name "enabled" explicit_type "bool"
	  param in name "samplingPeriodNs" explicit_type "nsecs_t"
	  param in name "maxBatchReportLatencyNs" explicit_type "nsecs_t"
	  param in name "reservedFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45626167 "setEventRate"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "handle" explicit_type "int"
	  param in name "ns" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45626295 "flush"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4361271 "BnSensorEventConnection"
      visibility package 
      nactuals 1
      actual class class_ref 4341559 // BnInterface
        rank 0 value class_ref 4361143 // ISensorEventConnection
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 12287415 // <realization>
	relation 12286391 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12287415 // <realization>
	  b parent class_ref 4341559 // BnInterface
      end

      operation 45626423 "onTransact"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" type class_ref 4340535 // Parcel
	  param inout name "reply" type class_ref 4340535 // Parcel
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4361399 "ISensorServer"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12287543 // <generalisation>
	relation 12286519 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12287543 // <generalisation>
	  b parent class_ref 4341047 // IInterface
      end

      operation 45626551 "getSensorList"
	abstract cpp_virtual public explicit_return_type "Vector<Sensor>"
	nparams 1
	  param in name "opPackageName" explicit_type "String16"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45626679 "getDynamicSensorList"
	abstract cpp_virtual public explicit_return_type "Vector<Sensor>"
	nparams 1
	  param in name "opPackageName" explicit_type "String16"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45626807 "createSensorEventConnection"
	abstract cpp_virtual public explicit_return_type "sp<ISensorEventConnection>"
	nparams 3
	  param in name "packageName" explicit_type "String8"
	  param in name "mode" explicit_type "int"
	  param in name "opPackageName" explicit_type "String16"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45626935 "isDataInjectionEnabled"
	abstract cpp_virtual public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4361527 "BnSensorServer"
      visibility package 
      nactuals 1
      actual class class_ref 4341559 // BnInterface
        rank 0 value class_ref 4361399 // ISensorServer
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 12287671 // <realization>
	relation 12286647 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12287671 // <realization>
	  b parent class_ref 4341559 // BnInterface
      end

      operation 45627063 "onTransact"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" type class_ref 4340535 // Parcel
	  param inout name "reply" type class_ref 4340535 // Parcel
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4361655 "ISurfaceComposer"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class defines the Binder IPC interface for accessing various
SurfaceFlinger features."
      classrelation 12287799 // <generalisation>
	relation 12286775 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12287799 // <generalisation>
	  b parent class_ref 4341047 // IInterface
      end

      class 4361783 "anonymous74"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13782839 "eSynchronous"
	  public type class_ref 4361783 // anonymous74
	  init_value " 0x01"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13782967 "eAnimation"
	  public type class_ref 4361783 // anonymous74
	  init_value " 0x02"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4361911 "anonymous75"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13783095 "eDisplayIdMain"
	  public type class_ref 4361911 // anonymous75
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13783223 "eDisplayIdHdmi"
	  public type class_ref 4361911 // anonymous75
	  init_value " 1
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4362039 "Rotation"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13783351 "eRotateNone"
	  public type class_ref 4362039 // Rotation
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13783479 "eRotate90"
	  public type class_ref 4362039 // Rotation
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13783607 "eRotate180"
	  public type class_ref 4362039 // Rotation
	  init_value " 2"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13783735 "eRotate270"
	  public type class_ref 4362039 // Rotation
	  init_value " 3
    "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 45627191 "createConnection"
	abstract cpp_virtual public explicit_return_type "sp<ISurfaceComposerClient>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " create connection with surface flinger, requires
ACCESS_SURFACE_FLINGER permission"
      end

      operation 45627319 "createGraphicBufferAlloc"
	abstract cpp_virtual public explicit_return_type "sp<IGraphicBufferAlloc>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " create a graphic buffer allocator"
      end

      operation 45627447 "createDisplayEventConnection"
	abstract cpp_virtual public explicit_return_type "sp<IDisplayEventConnection>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " return an IDisplayEventConnection "
      end

      operation 45627575 "createDisplay"
	abstract cpp_virtual public explicit_return_type "sp<IBinder>"
	nparams 2
	  param in name "displayName" explicit_type "String8"
	  param in name "secure" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " create a virtual display
requires ACCESS_SURFACE_FLINGER permission."
      end

      operation 45627703 "destroyDisplay"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "display" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " destroy a virtual display
requires ACCESS_SURFACE_FLINGER permission."
      end

      operation 45627831 "getBuiltInDisplay"
	abstract cpp_virtual public explicit_return_type "sp<IBinder>"
	nparams 1
	  param in name "id" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get the token for the existing default displays. possible values
for id are eDisplayIdMain and eDisplayIdHdmi."
      end

      operation 45627959 "setTransactionState"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 3
	  param in name "state" explicit_type "Vector<ComposerState>"
	  param in name "displays" explicit_type "Vector<DisplayState>"
	  param in name "flags" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " open/close transactions. requires ACCESS_SURFACE_FLINGER permission "
      end

      operation 45628087 "bootFinished"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " signal that we're done booting.
Requires ACCESS_SURFACE_FLINGER permission"
      end

      operation 45628215 "authenticateSurfaceTexture"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "surface" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " verify that an IGraphicBufferProducer was created by SurfaceFlinger."
      end

      operation 45628343 "setPowerMode"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " set display power mode. depending on the mode, it can either trigger
screen on, off or low power mode and wait for it to complete.
requires ACCESS_SURFACE_FLINGER permission."
      end

      operation 45628471 "getDisplayConfigs"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "configs" explicit_type "Vector<DisplayInfo>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " returns information for each configuration of the given display
intended to be used to get information about built-in displays "
      end

      operation 45628599 "getDisplayStats"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "stats" type class_ref 4362167 // DisplayStatInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " returns display statistics for a given display
intended to be used by the media framework to properly schedule
video frames "
      end

      operation 45628727 "getActiveConfig"
	abstract cpp_virtual public explicit_return_type "int"
	nparams 1
	  param in name "display" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " indicates which of the configurations returned by getDisplayInfo is
currently active "
      end

      operation 45628855 "setActiveConfig"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " specifies which configuration (of those returned by getDisplayInfo)
should be used "
      end

      operation 45628983 "captureScreen"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 9
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "producer" explicit_type "sp<IGraphicBufferProducer>"
	  param in name "sourceCrop" type class_ref 4352183 // Rect
	  param in name "reqWidth" explicit_type "uint32_t"
	  param in name "reqHeight" explicit_type "uint32_t"
	  param in name "minLayerZ" explicit_type "uint32_t"
	  param in name "maxLayerZ" explicit_type "uint32_t"
	  param in name "useIdentityTransform" explicit_type "bool"
	  param in name "rotation" type class_ref 4362039 // Rotation
	    defaultvalue "eRotateNone"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Capture the specified screen. requires READ_FRAME_BUFFER permission
This function will fail if there is a secure window on screen."
      end

      operation 45629111 "clearAnimationFrameStats"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears the frame statistics for animations.

Requires the ACCESS_SURFACE_FLINGER permission."
      end

      operation 45629239 "getAnimationFrameStats"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "outStats" type class_ref 4362295 // FrameStats
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the frame statistics for animations.

Requires the ACCESS_SURFACE_FLINGER permission."
      end

      operation 45629367 "getHdrCapabilities"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "display" explicit_type "sp<IBinder>"
	  param inout name "outCapabilities" type class_ref 4362423 // HdrCapabilities
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the supported HDR capabilities of the given display.

Requires the ACCESS_SURFACE_FLINGER permission."
      end
    end

    class 4362551 "BnSurfaceComposer"
      visibility package 
      nactuals 1
      actual class class_ref 4341559 // BnInterface
        rank 0 value class_ref 4361655 // ISurfaceComposer
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 12287927 // <realization>
	relation 12286903 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12287927 // <realization>
	  b parent class_ref 4341559 // BnInterface
      end

      class 4362679 "anonymous76"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13783863 "BOOT_FINISHED"
	  public type class_ref 4362679 // anonymous76
	  init_value " IBinder::FIRST_CALL_TRANSACTION"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13783991 "CREATE_CONNECTION"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13784119 "CREATE_GRAPHIC_BUFFER_ALLOC"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13784247 "CREATE_DISPLAY_EVENT_CONNECTION"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13784375 "CREATE_DISPLAY"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13784503 "DESTROY_DISPLAY"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13784631 "GET_BUILT_IN_DISPLAY"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13784759 "SET_TRANSACTION_STATE"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13784887 "AUTHENTICATE_SURFACE"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13785015 "GET_DISPLAY_CONFIGS"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13785143 "GET_ACTIVE_CONFIG"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13785271 "SET_ACTIVE_CONFIG"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13785399 "CONNECT_DISPLAY"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13785527 "CAPTURE_SCREEN"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13785655 "CLEAR_ANIMATION_FRAME_STATS"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13785783 "GET_ANIMATION_FRAME_STATS"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13785911 "SET_POWER_MODE"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13786039 "GET_DISPLAY_STATS"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13786167 "GET_HDR_CAPABILITIES"
	  public type class_ref 4362679 // anonymous76
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 45629495 "onTransact"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" type class_ref 4340535 // Parcel
	  param inout name "reply" type class_ref 4340535 // Parcel
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4362807 "ISurfaceComposerClient"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12288055 // <generalisation>
	relation 12287031 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12288055 // <generalisation>
	  b parent class_ref 4341047 // IInterface
      end

      class 4362935 "anonymous77"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13786295 "eHidden"
	  public type class_ref 4362935 // anonymous77
	  init_value " 0x00000004"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13786423 "eDestroyBackbuffer"
	  public type class_ref 4362935 // anonymous77
	  init_value " 0x00000020"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13786551 "eSecure"
	  public type class_ref 4362935 // anonymous77
	  init_value " 0x00000080"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13786679 "eNonPremultiplied"
	  public type class_ref 4362935 // anonymous77
	  init_value " 0x00000100"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13786807 "eOpaque"
	  public type class_ref 4362935 // anonymous77
	  init_value " 0x00000400"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13786935 "eProtectedByApp"
	  public type class_ref 4362935 // anonymous77
	  init_value " 0x00000800"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13787063 "eProtectedByDRM"
	  public type class_ref 4362935 // anonymous77
	  init_value " 0x00001000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13787191 "eCursorWindow"
	  public type class_ref 4362935 // anonymous77
	  init_value " 0x00002000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13787319 "eFXSurfaceNormal"
	  public type class_ref 4362935 // anonymous77
	  init_value " 0x00000000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13787447 "eFXSurfaceDim"
	  public type class_ref 4362935 // anonymous77
	  init_value " 0x00020000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13787575 "eFXSurfaceMask"
	  public type class_ref 4362935 // anonymous77
	  init_value " 0x000F0000"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 45629623 "createSurface"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 7
	  param in name "name" explicit_type "String8"
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	  param in name "format" type class_ref 4354615 // PixelFormat
	  param in name "flags" explicit_type "uint32_t"
	  param inout name "handle" explicit_type "sp<IBinder>"
	  param inout name "gbp" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} * ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requires ACCESS_SURFACE_FLINGER permission"
      end

      operation 45629751 "destroySurface"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "handle" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requires ACCESS_SURFACE_FLINGER permission"
      end

      operation 45629879 "clearLayerFrameStats"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "handle" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requires ACCESS_SURFACE_FLINGER permission"
      end

      operation 45630007 "getLayerFrameStats"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "handle" explicit_type "sp<IBinder>"
	  param inout name "outStats" type class_ref 4362295 // FrameStats
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requires ACCESS_SURFACE_FLINGER permission"
      end
    end

    class 4363063 "BnSurfaceComposerClient"
      visibility package 
      nactuals 1
      actual class class_ref 4341559 // BnInterface
        rank 0 value class_ref 4362807 // ISurfaceComposerClient
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 12288183 // <realization>
	relation 12287159 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12288183 // <realization>
	  b parent class_ref 4341559 // BnInterface
      end

      operation 45630135 "onTransact"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "code" explicit_type "uint32_t"
	  param in name "data" type class_ref 4340535 // Parcel
	  param inout name "reply" type class_ref 4340535 // Parcel
	  param in name "flags" explicit_type "uint32_t"
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4363191 "SensorEventQueue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      classrelation 12288311 // <generalisation>
	relation 12287287 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12288311 // <generalisation>
	  b parent class_ref 4338999 // ASensorEventQueue
      end

      classrelation 12288439 // <generalisation>
	relation 12287415 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12288439 // <generalisation>
	  b parent class_ref 4351415 // typedef8
      end

      class 4363319 "anonymous78"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13787703 "MAX_RECEIVE_BUFFER_EVENT_COUNT"
	  public type class_ref 4363319 // anonymous78
	  init_value " 256 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 45630263 "SensorEventQueue"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "connection" explicit_type "sp<ISensorEventConnection>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------

${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
    : mSensorEventConnection(connection), mRecBuffer(NULL), mAvailable(0), mConsumed(0),
      mNumAcksToSend(0) ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45630391 "~SensorEventQueue"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45630519 "onFirstRef"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45630647 "getFd"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45630775 "write"
	class_operation preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 3
	  param in name "tube" explicit_type "sp<BitTube>"
	  param in name "events" type class_ref 4338743 // ASensorEvent
	  param in name "numEvents" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45630903 "read"
	preserve_cpp_body_indent public explicit_return_type "ssize_t"
	nparams 2
	  param inout name "events" type class_ref 4338743 // ASensorEvent
	  param in name "numEvents" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45631031 "waitForEvent"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45631159 "wake"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45631287 "enableSensor"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 1
	  param in name "sensor" type class_ref 4363447 // Sensor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45631415 "enableSensor"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 2
	  param in name "sensor" type class_ref 4363447 // Sensor
	  param in name "samplingPeriodUs" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45631543 "disableSensor"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 1
	  param in name "sensor" type class_ref 4363447 // Sensor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45631671 "setEventRate"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 2
	  param in name "sensor" type class_ref 4363447 // Sensor
	  param in name "ns" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45631799 "enableSensor"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 4
	  param in name "handle" explicit_type "int32_t"
	  param in name "samplingPeriodUs" explicit_type "int32_t"
	  param in name "maxBatchReportLatencyUs" explicit_type "int"
	  param in name "reservedFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " these are here only to support SensorManager.java"
      end

      operation 45631927 "disableSensor"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 1
	  param in name "handle" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45632055 "flush"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45632183 "sendAck"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "events" type class_ref 4338743 // ASensorEvent
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Send an ack for every wake_up sensor event that is set to WAKE_UP_SENSOR_EVENT_NEEDS_ACK."
      end

      operation 45632311 "injectSensorEvent"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "event" type class_ref 4338743 // ASensorEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45632439 "getLooper"
	preserve_cpp_body_indent const private explicit_return_type "sp<Looper>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 12288567 // mSensorEventConnection (<directional composition>)
	relation 12287543 *-->
	  stereotype "sp"
	  a role_name "mSensorEventConnection" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12288567 // mSensorEventConnection (<directional composition>)
	  b parent class_ref 4361143 // ISensorEventConnection
      end

      classrelation 12288695 // mSensorChannel (<directional composition>)
	relation 12287671 *-->
	  stereotype "sp"
	  a role_name "mSensorChannel" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12288695 // mSensorChannel (<directional composition>)
	  b parent class_ref 4351287 // BitTube
      end

      attribute 13787831 "mLock"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13787959 "mLooper"
	private explicit_type "Looper"
	stereotype "sp"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 12288823 // mRecBuffer (<unidirectional association>)
	relation 12287799 --->
	  a role_name "mRecBuffer" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12288823 // mRecBuffer (<unidirectional association>)
	  b parent class_ref 4338743 // ASensorEvent
      end

      attribute 13788087 "mAvailable"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13788215 "mConsumed"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13788343 "mNumAcksToSend"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4363575 "StreamSplitter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " StreamSplitter is an autonomous class that manages one input BufferQueue
 and multiple output BufferQueues. By using the buffer attach and detach logic
 in BufferQueue, it is able to present the illusion of a single split
 BufferQueue, where each buffer queued to the input is available to be
 acquired by each of the outputs, and is able to be dequeued by the input
 again only once all of the outputs have released it."
      classrelation 12288951 // <generalisation>
	relation 12287927 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12288951 // <generalisation>
	  b parent class_ref 4354103 // BnConsumerListener
      end

      operation 45632567 "createSplitter"
	class_operation preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "inputQueue" explicit_type "sp<IGraphicBufferConsumer>"
	  param inout name "outSplitter" explicit_type "sp<StreamSplitter>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " createSplitter creates a new splitter, outSplitter, using inputQueue as
 the input BufferQueue. Output BufferQueues must be added using addOutput
 before queueing any buffers to the input.

 A return value other than NO_ERROR means that an error has occurred and
 outSplitter has not been modified. BAD_VALUE is returned if inputQueue or
 outSplitter is NULL. See IGraphicBufferConsumer::consumerConnect for
 explanations of other error codes."
      end

      operation 45632695 "addOutput"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "outputQueue" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " addOutput adds an output BufferQueue to the splitter. The splitter
 connects to outputQueue as a CPU producer, and any buffers queued
 to the input will be queued to each output. It is assumed that all of the
 outputs are added before any buffers are queued on the input. If any
 output is abandoned by its consumer, the splitter will abandon its input
 queue (see onAbandoned).

 A return value other than NO_ERROR means that an error has occurred and
 outputQueue has not been added to the splitter. BAD_VALUE is returned if
 outputQueue is NULL. See IGraphicBufferProducer::connect for explanations
 of other error codes."
      end

      operation 45632823 "setName"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " setName sets the consumer name of the input queue"
      end

      operation 45632951 "onFrameAvailable"
	preserve_cpp_body_indent cpp_virtual private explicit_return_type "void"
	nparams 1
	  param in name "item" type class_ref 4351543 // BufferItem
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From IConsumerListener

 During this callback, we store some tracking information, detach the
 buffer from the input, and attach it to each of the outputs. This call
 can block if there are too many outstanding buffers. If it blocks, it
 will resume when onBufferReleasedByOutput releases a buffer back to the
 input."
      end

      operation 45633079 "onBuffersReleased"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From IConsumerListener
 We don't care about released buffers because we detach each buffer as
 soon as we acquire it. See the comment for onBufferReleased below for
 some clarifying notes about the name."
      end

      operation 45633207 "onSidebandStreamChanged"
	cpp_virtual cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From IConsumerListener
 We don't care about sideband streams, since we won't be splitting them"
      end

      operation 45633335 "onBufferReleasedByOutput"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "from" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This is the implementation of the onBufferReleased callback from
 IProducerListener. It gets called from an OutputListener (see below), and
 'from' is which producer interface from which the callback was received.

 During this callback, we detach the buffer from the output queue that
 generated the callback, update our state tracking to see if this is the
 last output releasing the buffer, and if so, release it to the input.
 If we release the buffer to the input, we allow a blocked
 onFrameAvailable call to proceed."
      end

      operation 45633463 "onAbandonedLocked"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " When this is called, the splitter disconnects from (i.e., abandons) its
 input queue and signals any waiting onFrameAvailable calls to wake up.
 It still processes callbacks from other outputs, but only detaches their
 buffers so they can continue operating until they run out of buffers to
 acquire. This must be called with mMutex locked."
      end

      class 4363703 "OutputListener"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12289079 // <generalisation>
	  relation 12288055 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 12289079 // <generalisation>
	    b parent class_ref 4363831 // typedef16
	end

	classrelation 12289207 // <generalisation>
	  relation 12288183 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 12289207 // <generalisation>
	    b parent class_ref 4345527 // DeathRecipient
	end

	operation 45633591 "OutputListener"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 2
	    param in name "splitter" explicit_type "sp<StreamSplitter>"
	    param in name "output" explicit_type "sp<IGraphicBufferProducer>"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}
      : mSplitter(splitter), mOutput(output) ${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 45633719 "~OutputListener"
	  preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 45633847 "onBufferReleased"
	  preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " From IProducerListener"
	end

	operation 45633975 "binderDied"
	  preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	  nparams 1
	    param in name "who" explicit_type "wp<IBinder>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " From IBinder::DeathRecipient"
	end

	classrelation 12289335 // mSplitter (<directional composition>)
	  relation 12288311 *-->
	    stereotype "sp"
	    a role_name "mSplitter" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12289335 // mSplitter (<directional composition>)
	    b parent class_ref 4363575 // StreamSplitter
	end

	classrelation 12289463 // mOutput (<directional composition>)
	  relation 12288439 *-->
	    stereotype "sp"
	    a role_name "mOutput" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12289463 // mOutput (<directional composition>)
	    b parent class_ref 4360119 // IGraphicBufferProducer
	end
      end

      class 4363831 "typedef16"
	visibility package stereotype "typedef" explicit_base_type "BnProducerListener"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 4363959 "BufferTracker"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12289591 // <generalisation>
	  relation 12288567 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 12289591 // <generalisation>
	    b parent class_ref 4364087 // typedef17
	end

	operation 45634103 "BufferTracker"
	  preserve_cpp_body_indent public explicit_return_type ""
	  nparams 1
	    param in name "buffer" explicit_type "sp<GraphicBuffer>"
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
      : mBuffer(buffer), mMergedFence(Fence::NO_FENCE), mReleaseCount(0) ${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 45634231 "getBuffer"
	  const cpp_inline public explicit_return_type "sp<GraphicBuffer>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mBuffer; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45634359 "getMergedFence"
	  const cpp_inline public explicit_return_type "sp<Fence>"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mMergedFence; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45634487 "mergeFence"
	  preserve_cpp_body_indent public explicit_return_type "void"
	  nparams 1
	    param in name "with" explicit_type "sp<Fence>"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 45634615 "incrementReleaseCountLocked"
	  cpp_inline public explicit_return_type "size_t"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ++mReleaseCount; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Returns the new value
 Only called while mMutex is held"
	end

	operation 45634743 "~BufferTracker"
	  preserve_cpp_body_indent private explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	  
	  
	  
	  
	end

	operation 45634871 "BufferTracker"
	  private explicit_return_type ""
	  nparams 1
	    param in name "other" type class_ref 4363959 // BufferTracker
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment " Disallow copying"
	end

	operation 45634999 "operator ="
	  private return_type class_ref 4363959 // BufferTracker
	  nparams 1
	    param in name "other" type class_ref 4363959 // BufferTracker
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end

	classrelation 12289719 // mBuffer (<directional composition>)
	  relation 12288695 *-->
	    stereotype "sp"
	    a role_name "mBuffer" private
	      comment " One instance that holds this native handle"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12289719 // mBuffer (<directional composition>)
	    b parent class_ref 4351927 // GraphicBuffer
	end

	classrelation 12289847 // mMergedFence (<directional composition>)
	  relation 12288823 *-->
	    stereotype "sp"
	    a role_name "mMergedFence" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12289847 // mMergedFence (<directional composition>)
	    b parent class_ref 4352055 // Fence
	end

	attribute 13788471 "mReleaseCount"
	  private explicit_type "size_t"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4364087 "typedef17"
	visibility package stereotype "typedef" explicit_base_type "LightRefBase<BufferTracker>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 45635127 "StreamSplitter"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 1
	  param in name "inputQueue" explicit_type "sp<IGraphicBufferConsumer>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
      : mIsAbandoned(false), mMutex(), mReleaseCondition(),
        mOutstandingBuffers(0), mInput(inputQueue), mOutputs(), mBuffers() ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Only called from createSplitter"
      end

      operation 45635255 "~StreamSplitter"
	preserve_cpp_body_indent cpp_virtual private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment " Must be accessed through RefBase"
      end

      attribute 13788599 "MAX_OUTSTANDING_BUFFERS"
	class_attribute const_attribute private explicit_type "int"
	init_value "=  2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13788727 "mIsAbandoned"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mIsAbandoned is set to true when an output dies. Once the StreamSplitter
 has been abandoned, it will continue to detach buffers from other
 outputs, but it will disconnect from the input and not attempt to
 communicate with it further."
      end

      attribute 13788855 "mMutex"
	private explicit_type "Mutex"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13788983 "mReleaseCondition"
	private explicit_type "Condition"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13789111 "mOutstandingBuffers"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 12289975 // mInput (<directional composition>)
	relation 12288951 *-->
	  stereotype "sp"
	  a role_name "mInput" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12289975 // mInput (<directional composition>)
	  b parent class_ref 4357303 // IGraphicBufferConsumer
      end

      attribute 13789239 "mOutputs"
	private explicit_type "sp<IGraphicBufferProducer> "
	stereotype "Vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13789367 "mBuffers"
	private explicit_type "uint64_t, sp<BufferTracker> "
	stereotype "KeyedVector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Map of GraphicBuffer IDs (GraphicBuffer::getId()) to buffer tracking
 objects (which are mostly for counting how many outputs have released the
 buffer, but also contain merged release fences)."
      end
    end

    class 4364215 "Surface"
      visibility package 
      nactuals 3
      actual class class_ref 4364343 // ANativeObjectBase
        rank 0 value class_ref 4336823 // ANativeWindow
      actual class class_ref 4364343 // ANativeObjectBase
        rank 1 value class_ref 4364215 // Surface
      actual class class_ref 4364343 // ANativeObjectBase
        rank 2 explicit_value "RefBase"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An implementation of ANativeWindow that feeds graphics buffers into a
BufferQueue.

This is typically used by programs that want to render frames through
some means (maybe OpenGL, a software renderer, or a hardware decoder)
and have the frames they create forwarded to SurfaceFlinger for
compositing.  For example, a video decoder could render a frame and call
eglSwapBuffers(), which invokes ANativeWindow callbacks defined by
Surface.  Surface then forwards the buffers through Binder IPC
to the BufferQueue's producer interface, providing the new frame to a
consumer such as GLConsumer."
      classrelation 12290103 // <realization>
	relation 12289079 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12290103 // <realization>
	  b parent class_ref 4364343 // ANativeObjectBase
      end

      operation 45635383 "Surface"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 2
	  param in name "bufferProducer" explicit_type "sp<IGraphicBufferProducer>"
	  param in name "controlledByApp" explicit_type "bool"
	    defaultvalue "false"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}
    : mGraphicBufferProducer(bufferProducer),
      mCrop(Rect::EMPTY_RECT),
      mGenerationNumber(0),
      mSharedBufferMode(false),
      mAutoRefresh(false),
      mSharedBufferSlot(BufferItem::INVALID_BUFFER_SLOT),
      mSharedBufferHasBeenQueued(false)
${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "creates a Surface from the given IGraphicBufferProducer (which concrete
implementation is a BufferQueue).

Surface is mainly state-less while it's disconnected, it can be
viewed as a glorified IGraphicBufferProducer holder. It's therefore
safe to create other Surfaces from the same IGraphicBufferProducer.

However, once a Surface is connected, it'll prevent other Surfaces
referring to the same IGraphicBufferProducer to become connected and
therefore prevent them to be used as actual producers of buffers.

the controlledByApp flag indicates that this Surface (producer) is
controlled by the application. This flag is used at connect time."
      end

      operation 45635511 "getIGraphicBufferProducer"
	preserve_cpp_body_indent const public explicit_return_type "sp<IGraphicBufferProducer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " getIGraphicBufferProducer() returns the IGraphicBufferProducer this
Surface was created with. Usually it's an error to use the
IGraphicBufferProducer while the Surface is connected."
      end

      operation 45635639 "isValid"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "surface" explicit_type "sp<Surface>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return surface != NULL && surface->getIGraphicBufferProducer() != NULL;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " convenience function to check that the given surface is non NULL as
well as its IGraphicBufferProducer "
      end

      operation 45635767 "setSidebandStream"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "stream" explicit_type "sp<NativeHandle>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Attaches a sideband buffer stream to the Surface's IGraphicBufferProducer.

A sideband stream is a device-specific mechanism for passing buffers
from the producer to the consumer without using dequeueBuffer/
queueBuffer. If a sideband stream is present, the consumer can choose
whether to acquire buffers from the sideband stream or from the queued
buffers.

Passing NULL or a different stream handle will detach the previous
handle if any."
      end

      operation 45635895 "allocateBuffers"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Allocates buffers based on the current dimensions/format.

This function will allocate up to the maximum number of buffers
permitted by the current BufferQueue configuration. It will use the
default format and dimensions. This is most useful to avoid an allocation
delay during dequeueBuffer. If there are already the maximum number of
buffers allocated, this function has no effect."
      end

      operation 45636023 "setGenerationNumber"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "generation" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the generation number on the IGraphicBufferProducer and updates the
generation number on any buffers attached to the Surface after this call.
See IGBP::setGenerationNumber for more information. "
      end

      operation 45636151 "getConsumerName"
	preserve_cpp_body_indent const public explicit_return_type "String8"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::getConsumerName"
      end

      operation 45636279 "getNextFrameNumber"
	preserve_cpp_body_indent const public explicit_return_type "uint64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::getNextFrameNumber"
      end

      operation 45636407 "setScalingMode"
	preserve_cpp_body_indent public explicit_return_type "int"
	nparams 1
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set the scaling mode to be used with a Surface.
See NATIVE_WINDOW_SET_SCALING_MODE and its parameters
in <system/window.h>. "
      end

      operation 45636535 "setDequeueTimeout"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "timeout" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::setDequeueTimeout"
      end

      operation 45636663 "waitForNextFrame"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "lastFrame" explicit_type "uint64_t"
	  param in name "timeout" explicit_type "nsecs_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wait for frame number to increase past lastFrame for at most
timeoutNs. Useful for one thread to wait for another unknown
thread to queue a buffer."
      end

      operation 45636791 "getLastQueuedBuffer"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param inout name "outBuffer" explicit_type "sp<GraphicBuffer>"
	  param inout name "outFence" explicit_type "sp<Fence>"
	  param in name "outTransformMatrix" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}[16]${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}[16]${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " See IGraphicBufferProducer::getLastQueuedBuffer
 See GLConsumer::getTransformMatrix for outTransformMatrix format"
      end

      operation 45636919 "getUniqueId"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 1
	  param inout name "outId" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45637047 "~Surface"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45637175 "operator ="
	private return_type class_ref 4364215 // Surface
	nparams 1
	  param in name "rhs" type class_ref 4364215 // Surface
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " can't be copied"
      end

      operation 45637303 "Surface"
	private explicit_return_type ""
	nparams 1
	  param in name "rhs" type class_ref 4364215 // Surface
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45637431 "hook_cancelBuffer"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 3
	  param inout name "window" type class_ref 4336823 // ANativeWindow
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param in name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ANativeWindow hooks"
      end

      operation 45637559 "hook_dequeueBuffer"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 3
	  param inout name "window" type class_ref 4336823 // ANativeWindow
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param inout name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * * ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45637687 "hook_perform"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 2
	  param inout name "window" type class_ref 4336823 // ANativeWindow
	  param in name "operation" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ...${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ...${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45637815 "hook_query"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 3
	  param in name "window" type class_ref 4336823 // ANativeWindow
	  param in name "what" explicit_type "int"
	  param inout name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45637943 "hook_queueBuffer"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 3
	  param inout name "window" type class_ref 4336823 // ANativeWindow
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param in name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45638071 "hook_setSwapInterval"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 2
	  param inout name "window" type class_ref 4336823 // ANativeWindow
	  param in name "interval" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45638199 "hook_cancelBuffer_DEPRECATED"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 2
	  param inout name "window" type class_ref 4336823 // ANativeWindow
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45638327 "hook_dequeueBuffer_DEPRECATED"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 2
	  param inout name "window" type class_ref 4336823 // ANativeWindow
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45638455 "hook_lockBuffer_DEPRECATED"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 2
	  param inout name "window" type class_ref 4336823 // ANativeWindow
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45638583 "hook_queueBuffer_DEPRECATED"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 2
	  param inout name "window" type class_ref 4336823 // ANativeWindow
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45638711 "dispatchConnect"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45638839 "dispatchDisconnect"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45638967 "dispatchSetBufferCount"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45639095 "dispatchSetBuffersGeometry"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45639223 "dispatchSetBuffersDimensions"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45639351 "dispatchSetBuffersUserDimensions"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45639479 "dispatchSetBuffersFormat"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45639607 "dispatchSetScalingMode"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45639735 "dispatchSetBuffersTransform"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45639863 "dispatchSetBuffersStickyTransform"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45639991 "dispatchSetBuffersTimestamp"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45640119 "dispatchSetCrop"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45640247 "dispatchSetPostTransformCrop"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45640375 "dispatchSetUsage"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45640503 "dispatchLock"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45640631 "dispatchUnlockAndPost"
	private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45640759 "dispatchSetSidebandStream"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45640887 "dispatchSetBuffersDataSpace"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45641015 "dispatchSetSurfaceDamage"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45641143 "dispatchSetSharedBufferMode"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45641271 "dispatchSetAutoRefresh"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45641399 "dequeueBuffer"
	cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param inout name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45641527 "cancelBuffer"
	cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param in name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45641655 "queueBuffer"
	cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	  param in name "fenceFd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45641783 "perform"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param in name "operation" explicit_type "int"
	  param in name "args" explicit_type "va_list"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45641911 "query"
	preserve_cpp_body_indent const cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param in name "what" explicit_type "int"
	  param inout name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45642039 "setSwapInterval"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "interval" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45642167 "lockBuffer_DEPRECATED"
	cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45642295 "connect"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "api" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45642423 "disconnect"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "api" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45642551 "setBufferCount"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "bufferCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45642679 "setBuffersDimensions"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45642807 "setBuffersUserDimensions"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 2
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45642935 "setBuffersFormat"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "format" type class_ref 4354615 // PixelFormat
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45643063 "setBuffersTransform"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "transform" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45643191 "setBuffersStickyTransform"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "transform" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45643319 "setBuffersTimestamp"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "timestamp" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45643447 "setBuffersDataSpace"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "dataSpace" explicit_type "android_dataspace"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45643575 "setCrop"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "rect" type class_ref 4352183 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45643703 "setUsage"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "int"
	nparams 1
	  param in name "reqUsage" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45643831 "setSurfaceDamage"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "rects" explicit_type "android_native_rect_t"
	  param in name "numRects" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45643959 "setMaxDequeuedBufferCount"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "int"
	nparams 1
	  param in name "maxDequeuedBuffers" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45644087 "setAsyncMode"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "int"
	nparams 1
	  param in name "async" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45644215 "setSharedBufferMode"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "int"
	nparams 1
	  param in name "sharedBufferMode" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45644343 "setAutoRefresh"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "int"
	nparams 1
	  param in name "autoRefresh" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45644471 "lock"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "int"
	nparams 2
	  param inout name "outBuffer" type class_ref 4336951 // ANativeWindow_Buffer
	  param inout name "inOutDirtyBounds" type class_ref 4337335 // ARect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45644599 "unlockAndPost"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45644727 "connect"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "int"
	nparams 2
	  param in name "api" explicit_type "int"
	  param in name "listener" explicit_type "sp<IProducerListener>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45644855 "detachNextBuffer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "int"
	nparams 2
	  param inout name "outBuffer" explicit_type "sp<GraphicBuffer>"
	  param inout name "outFence" explicit_type "sp<Fence>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45644983 "attachBuffer"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "int"
	nparams 1
	  param inout name "buffer" explicit_type "ANativeWindowBuffer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 4364471 "anonymous79"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13789495 "NUM_BUFFER_SLOTS"
	  public type class_ref 4364471 // anonymous79
	  init_value " BufferQueue::NUM_BUFFER_SLOTS "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4364599 "anonymous80"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13789623 "DEFAULT_FORMAT"
	  public type class_ref 4364599 // anonymous80
	  init_value " PIXEL_FORMAT_RGBA_8888 "
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 45645111 "freeAllBuffers"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45645239 "getSlotFromBufferLocked"
	preserve_cpp_body_indent const private explicit_return_type "int"
	nparams 1
	  param inout name "buffer" explicit_type "android_native_buffer_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 4364727 "BufferSlot"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 12290231 // buffer (<directional composition>)
	  relation 12289207 *-->
	    stereotype "sp"
	    a role_name "buffer" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12290231 // buffer (<directional composition>)
	    b parent class_ref 4351927 // GraphicBuffer
	end

	classrelation 12290359 // dirtyRegion (<directional composition>)
	  relation 12289335 *-->
	    a role_name "dirtyRegion" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12290359 // dirtyRegion (<directional composition>)
	    b parent class_ref 4360631 // Region
	end
      end

      classrelation 12290487 // mGraphicBufferProducer (<directional composition>)
	relation 12289463 *-->
	  stereotype "sp"
	  a role_name "mGraphicBufferProducer" private
	    comment " mSurfaceTexture is the interface to the surface texture server. All
 operations on the surface texture client ultimately translate into
 interactions with the server using this interface.
 TODO: rename to mBufferProducer"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12290487 // mGraphicBufferProducer (<directional composition>)
	  b parent class_ref 4360119 // IGraphicBufferProducer
      end

      classrelation 12290615 // mSlots (<directional composition>)
	relation 12289591 *-->
	  a role_name "mSlots" multiplicity "[NUM_BUFFER_SLOTS]" private
	    comment " mSlots stores the buffers that have been allocated for each buffer slot.
 It is initialized to null pointers, and gets filled in with the result of
 IGraphicBufferProducer::requestBuffer when the client dequeues a buffer from a
 slot that has not yet been used. The buffer allocated to a slot will also
 be replaced if the requested buffer usage or geometry differs from that
 of the buffer allocated to a slot."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12290615 // mSlots (<directional composition>)
	  b parent class_ref 4364727 // BufferSlot
      end

      attribute 13789751 "mReqWidth"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mReqWidth is the buffer width that will be requested at the next dequeue
 operation. It is initialized to 1."
      end

      attribute 13789879 "mReqHeight"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mReqHeight is the buffer height that will be requested at the next
 dequeue operation. It is initialized to 1."
      end

      classrelation 12290743 // mReqFormat (<directional composition>)
	relation 12289719 *-->
	  a role_name "mReqFormat" private
	    comment " mReqFormat is the buffer pixel format that will be requested at the next
 deuque operation. It is initialized to PIXEL_FORMAT_RGBA_8888."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12290743 // mReqFormat (<directional composition>)
	  b parent class_ref 4354615 // PixelFormat
      end

      attribute 13790007 "mReqUsage"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mReqUsage is the set of buffer usage flags that will be requested
 at the next deuque operation. It is initialized to 0."
      end

      attribute 13790135 "mTimestamp"
	private explicit_type "int64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTimestamp is the timestamp that will be used for the next buffer queue
 operation. It defaults to NATIVE_WINDOW_TIMESTAMP_AUTO, which means that
 a timestamp is auto-generated when queueBuffer is called."
      end

      attribute 13790263 "mDataSpace"
	private explicit_type "android_dataspace"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDataSpace is the buffer dataSpace that will be used for the next buffer
 queue operation. It defaults to HAL_DATASPACE_UNKNOWN, which
 means that the buffer contains some type of color data."
      end

      classrelation 12290871 // mCrop (<directional composition>)
	relation 12289847 *-->
	  a role_name "mCrop" private
	    comment " mCrop is the crop rectangle that will be used for the next buffer
 that gets queued. It is set by calling setCrop."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12290871 // mCrop (<directional composition>)
	  b parent class_ref 4352183 // Rect
      end

      attribute 13790391 "mScalingMode"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mScalingMode is the scaling mode that will be used for the next
 buffers that get queued. It is set by calling setScalingMode."
      end

      attribute 13790519 "mTransform"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTransform is the transform identifier that will be used for the next
 buffer that gets queued. It is set by calling setTransform."
      end

      attribute 13790647 "mStickyTransform"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mStickyTransform is a transform that is applied on top of mTransform
 in each buffer that is queued.  This is typically used to force the
 compositor to apply a transform, and will prevent the transform hint
 from being set by the compositor."
      end

      attribute 13790775 "mDefaultWidth"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDefaultWidth is default width of the buffers, regardless of the
 native_window_set_buffers_dimensions call."
      end

      attribute 13790903 "mDefaultHeight"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mDefaultHeight is default height of the buffers, regardless of the
 native_window_set_buffers_dimensions call."
      end

      attribute 13791031 "mUserWidth"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mUserWidth, if non-zero, is an application-specified override
 of mDefaultWidth.  This is lower priority than the width set by
 native_window_set_buffers_dimensions."
      end

      attribute 13791159 "mUserHeight"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mUserHeight, if non-zero, is an application-specified override
 of mDefaultHeight.  This is lower priority than the height set
 by native_window_set_buffers_dimensions."
      end

      attribute 13791287 "mTransformHint"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mTransformHint is the transform probably applied to buffers of this
 window. this is only a hint, actual transform may differ."
      end

      attribute 13791415 "mProducerControlledByApp"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mProducerControlledByApp whether this buffer producer is controlled
 by the application"
      end

      attribute 13791543 "mSwapIntervalZero"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mSwapIntervalZero set if we should drop buffers at queue() time to
 achieve an asynchronous swap interval"
      end

      attribute 13791671 "mConsumerRunningBehind"
	private explicit_type "bool"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mConsumerRunningBehind whether the consumer is running more than
 one buffer behind the producer."
      end

      attribute 13791799 "mMutex"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mMutex is the mutex used to prevent concurrent access to the member
 variables of Surface objects. It must be locked whenever the
 member variables are accessed."
      end

      classrelation 12290999 // mLockedBuffer (<directional composition>)
	relation 12289975 *-->
	  stereotype "sp"
	  a role_name "mLockedBuffer" private
	    comment " must be used from the lock/unlock thread"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12290999 // mLockedBuffer (<directional composition>)
	  b parent class_ref 4351927 // GraphicBuffer
      end

      classrelation 12291127 // mPostedBuffer (<directional composition>)
	relation 12290103 *-->
	  stereotype "sp"
	  a role_name "mPostedBuffer" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12291127 // mPostedBuffer (<directional composition>)
	  b parent class_ref 4351927 // GraphicBuffer
      end

      attribute 13791927 "mConnectedToCpu"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 12291255 // mDirtyRegion (<directional composition>)
	relation 12290231 *-->
	  a role_name "mDirtyRegion" private
	    comment " When a CPU producer is attached, this reflects the region that the
 producer wished to update as well as whether the Surface was able to copy
 the previous buffer back to allow a partial update.

 When a non-CPU producer is attached, this reflects the surface damage
 (the change since the previous frame) passed in by the producer."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12291255 // mDirtyRegion (<directional composition>)
	  b parent class_ref 4360631 // Region
      end

      attribute 13792055 "mGenerationNumber"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Stores the current generation number. See setGenerationNumber and
 IGraphicBufferProducer::setGenerationNumber for more information."
      end

      attribute 13792183 "mSharedBufferMode"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Caches the values that have been passed to the producer."
      end

      attribute 13792311 "mAutoRefresh"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13792439 "mSharedBufferSlot"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " If in shared buffer mode and auto refresh is enabled, store the shared
 buffer slot and return it for all calls to queue/dequeue without going
 over Binder."
      end

      attribute 13792567 "mSharedBufferHasBeenQueued"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This is true if the shared buffer has already been queued/canceled. It's
 used to prevent a mismatch between the number of queue/dequeue calls."
      end

      attribute 13792695 "mQueueBufferCondition"
	private explicit_type "Condition"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4364983 "ScreenshotClient"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      operation 45651127 "capture"
	class_operation preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 8
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "producer" explicit_type "sp<IGraphicBufferProducer>"
	  param in name "sourceCrop" type class_ref 4352183 // Rect
	  param in name "reqWidth" explicit_type "uint32_t"
	  param in name "reqHeight" explicit_type "uint32_t"
	  param in name "minLayerZ" explicit_type "uint32_t"
	  param in name "maxLayerZ" explicit_type "uint32_t"
	  param in name "useIdentityTransform" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// ----------------------------------------------------------------------------

${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " if cropping isn't required, callers may pass in a default Rect, e.g.:
   capture(display, producer, Rect(), reqWidth, ...);"
      end

      classrelation 12291895 // mCpuConsumer (<directional composition>)
	relation 12290871 *-->
	  stereotype "sp"
	  a role_name "mCpuConsumer" private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12291895 // mCpuConsumer (<directional composition>)
	  b parent class_ref 4357431 // CpuConsumer
      end

      classrelation 12292023 // mProducer (<directional composition>)
	relation 12290999 *-->
	  stereotype "sp"
	  a role_name "mProducer" private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12292023 // mProducer (<directional composition>)
	  b parent class_ref 4360119 // IGraphicBufferProducer
      end

      classrelation 12292151 // mBuffer (<directional composition>)
	relation 12291127 *-->
	  a role_name "mBuffer" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12292151 // mBuffer (<directional composition>)
	  b parent class_ref 4357687 // LockedBuffer
      end

      attribute 13793079 "mHaveBuffer"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 45651255 "ScreenshotClient"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}
    : mHaveBuffer(false) ${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45651383 "~ScreenshotClient"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45651511 "update"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 3
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "sourceCrop" type class_ref 4352183 // Rect
	  param in name "useIdentityTransform" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " frees the previous screenshot and captures a new one
 if cropping isn't required, callers may pass in a default Rect, e.g.:
   update(display, Rect(), useIdentityTransform);"
      end

      operation 45651639 "update"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 5
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "sourceCrop" type class_ref 4352183 // Rect
	  param in name "reqWidth" explicit_type "uint32_t"
	  param in name "reqHeight" explicit_type "uint32_t"
	  param in name "useIdentityTransform" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45651767 "update"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 7
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "sourceCrop" type class_ref 4352183 // Rect
	  param in name "reqWidth" explicit_type "uint32_t"
	  param in name "reqHeight" explicit_type "uint32_t"
	  param in name "minLayerZ" explicit_type "uint32_t"
	  param in name "maxLayerZ" explicit_type "uint32_t"
	  param in name "useIdentityTransform" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45651895 "update"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 8
	  param in name "display" explicit_type "sp<IBinder>"
	  param in name "sourceCrop" type class_ref 4352183 // Rect
	  param in name "reqWidth" explicit_type "uint32_t"
	  param in name "reqHeight" explicit_type "uint32_t"
	  param in name "minLayerZ" explicit_type "uint32_t"
	  param in name "maxLayerZ" explicit_type "uint32_t"
	  param in name "useIdentityTransform" explicit_type "bool"
	  param in name "rotation" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45652023 "getCpuConsumer"
	preserve_cpp_body_indent const public explicit_return_type "sp<CpuConsumer>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45652151 "release"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " release memory occupied by the screenshot"
      end

      operation 45652279 "getPixels"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " pixels are valid until this object is freed or
 release() or update() is called"
      end

      operation 45652407 "getWidth"
	preserve_cpp_body_indent const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45652535 "getHeight"
	preserve_cpp_body_indent const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45652663 "getFormat"
	preserve_cpp_body_indent const public return_type class_ref 4354615 // PixelFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45652791 "getStride"
	preserve_cpp_body_indent const public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45652919 "getSize"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " size of allocated memory in bytes"
      end
    end

    class 4365111 "SurfaceControl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ---------------------------------------------------------------------------"
      classrelation 12292279 // <generalisation>
	relation 12291255 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 12292279 // <generalisation>
	  b parent class_ref 4351415 // typedef8
      end

      operation 45653047 "isValid"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "surface" explicit_type "sp<SurfaceControl>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return (surface != 0) && surface->isValid();
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45653175 "isValid"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mHandle!=0 && mClient!=0;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45653303 "isSameSurface"
	class_operation preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "lhs" explicit_type "sp<SurfaceControl>"
	  param in name "rhs" explicit_type "sp<SurfaceControl>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45653431 "clear"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " release surface data from java"
      end

      operation 45653559 "disconnect"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " disconnect any api that's connected"
      end

      operation 45653687 "setLayerStack"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "layerStack" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45653815 "setLayer"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "layer" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45653943 "setPosition"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45654071 "setSize"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "w" explicit_type "uint32_t"
	  param in name "h" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45654199 "hide"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45654327 "show"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45654455 "setFlags"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "flags" explicit_type "uint32_t"
	  param in name "mask" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45654583 "setTransparentRegionHint"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "transparent" type class_ref 4360631 // Region
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45654711 "setAlpha"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "alpha" explicit_type "float"
	    defaultvalue "1.0f"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45654839 "setMatrix"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 4
	  param in name "dsdx" explicit_type "float"
	  param in name "dtdx" explicit_type "float"
	  param in name "dsdy" explicit_type "float"
	  param in name "dtdy" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45654967 "setCrop"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "crop" type class_ref 4352183 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45655095 "setFinalCrop"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "crop" type class_ref 4352183 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45655223 "setPositionAppliesWithResize"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If the size changes in this transaction, position updates specified
 in this transaction will not complete until a buffer of the new size
 arrives."
      end

      operation 45655351 "deferTransactionUntil"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "handle" explicit_type "sp<IBinder>"
	  param in name "frameNumber" explicit_type "uint64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Defers applying any changes made in this transaction until the Layer
 identified by handle reaches the given frameNumber"
      end

      operation 45655479 "setOverrideScalingMode"
	preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 1
	  param in name "overrideScalingMode" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Set an override scaling mode as documented in <system/window.h>
 the override scaling mode will take precedence over any client
 specified scaling mode. -1 will clear the override scaling mode."
      end

      operation 45655607 "writeSurfaceToParcel"
	class_operation preserve_cpp_body_indent public explicit_return_type "status_t"
	nparams 2
	  param in name "control" explicit_type "sp<SurfaceControl>"
	  param inout name "parcel" type class_ref 4340535 // Parcel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45655735 "getSurface"
	preserve_cpp_body_indent const public explicit_return_type "sp<Surface>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45655863 "getHandle"
	preserve_cpp_body_indent const public explicit_return_type "sp<IBinder>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45655991 "clearLayerFrameStats"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45656119 "getLayerFrameStats"
	preserve_cpp_body_indent const public explicit_return_type "status_t"
	nparams 1
	  param inout name "outStats" type class_ref 4362295 // FrameStats
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45656247 "operator ="
	private return_type class_ref 4365111 // SurfaceControl
	nparams 1
	  param inout name "rhs" type class_ref 4365111 // SurfaceControl
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " can't be copied"
      end

      operation 45656375 "SurfaceControl"
	private explicit_return_type ""
	nparams 1
	  param in name "rhs" type class_ref 4365111 // SurfaceControl
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      classrelation 12292407 // <dependency>
	relation 12291383 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 12292407 // <dependency>
	  b parent class_ref 4330167 // SurfaceComposerClient
      end

      classrelation 12292535 // <dependency>
	relation 12291511 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 12292535 // <dependency>
	  b parent class_ref 4364215 // Surface
      end

      operation 45656503 "SurfaceControl"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 3
	  param in name "client" explicit_type "sp<SurfaceComposerClient>"
	  param in name "handle" explicit_type "sp<IBinder>"
	  param in name "gbp" explicit_type "sp<IGraphicBufferProducer>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "// ============================================================================
//  SurfaceControl
// ============================================================================

${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}
    : mClient(client), mHandle(handle), mGraphicBufferProducer(gbp)
${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45656631 "~SurfaceControl"
	preserve_cpp_body_indent private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 45656759 "validate"
	preserve_cpp_body_indent const private explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45656887 "destroy"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 12292663 // mClient (<directional composition>)
	relation 12291639 *-->
	  stereotype "sp"
	  a role_name "mClient" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12292663 // mClient (<directional composition>)
	  b parent class_ref 4330167 // SurfaceComposerClient
      end

      classrelation 12292791 // mHandle (<directional composition>)
	relation 12291767 *-->
	  stereotype "sp"
	  a role_name "mHandle" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12292791 // mHandle (<directional composition>)
	  b parent class_ref 4342327 // IBinder
      end

      classrelation 12292919 // mGraphicBufferProducer (<directional composition>)
	relation 12291895 *-->
	  stereotype "sp"
	  a role_name "mGraphicBufferProducer" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12292919 // mGraphicBufferProducer (<directional composition>)
	  b parent class_ref 4360119 // IGraphicBufferProducer
      end

      attribute 13793207 "mLock"
	private explicit_type "Mutex"
	cpp_mutable cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 12293047 // mSurfaceData (<directional composition>)
	relation 12292023 *-->
	  stereotype "sp"
	  a role_name "mSurfaceData" private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12293047 // mSurfaceData (<directional composition>)
	  b parent class_ref 4364215 // Surface
      end
    end
  end

  deploymentview 353207 "gui"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1871927 "BitTube"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4351415 // typedef8
	class_ref 4351287 // BitTube
      end
    end

    artifact 1872055 "BufferItem"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4351671 // typedef9
	class_ref 4351543 // BufferItem
      end
    end

    artifact 1872183 "BufferItemConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4352311 // BufferItemConsumer
      end
    end

    artifact 1872311 "BufferQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4353207 // BufferQueue
      end
    end

    artifact 1872439 "BufferQueueConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4354231 // BufferQueueConsumer
      end
    end

    artifact 1872567 "BufferQueueCore"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4354999 // typedef10
	class_ref 4354743 // BufferQueueCore
      end
    end

    artifact 1872951 "BufferQueueProducer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4355127 // BufferQueueProducer
      end
    end

    artifact 1873079 "BufferSlot"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4343991 // BufferState
	class_ref 4356407 // BufferSlot
      end
    end

    artifact 1873207 "ConsumerBase"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4352439 // ConsumerBase
      end
    end

    artifact 1873335 "CpuConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4357431 // CpuConsumer
      end
    end

    artifact 1873463 "DisplayEventReceiver"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4357943 // DisplayEventReceiver
      end
    end

    artifact 1873591 "GLConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4329911 // GLConsumer
      end
    end

    artifact 1873719 "GraphicBufferAlloc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4329527 // GraphicBufferAlloc
      end
    end

    artifact 1873847 "IConsumerListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4356791 // ConsumerListener
	class_ref 4355895 // IConsumerListener
	class_ref 4354103 // BnConsumerListener
      end
    end

    artifact 1873975 "IDisplayEventConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4359735 // IDisplayEventConnection
	class_ref 4359863 // BnDisplayEventConnection
      end
    end

    artifact 1874103 "IGraphicBufferAlloc"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4355767 // IGraphicBufferAlloc
	class_ref 4359607 // BnGraphicBufferAlloc
      end
    end

    artifact 1874231 "IGraphicBufferConsumer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4357303 // IGraphicBufferConsumer
	class_ref 4354359 // BnGraphicBufferConsumer
      end
    end

    artifact 1874359 "IGraphicBufferProducer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4360119 // IGraphicBufferProducer
	class_ref 4356535 // BnGraphicBufferProducer
      end
    end

    artifact 1874487 "IProducerListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4360759 // ProducerListener
	class_ref 4356023 // IProducerListener
	class_ref 4361015 // typedef15
	class_ref 4360887 // DummyProducerListener
      end
    end

    artifact 1874615 "ISensorEventConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4361143 // ISensorEventConnection
	class_ref 4361271 // BnSensorEventConnection
      end
    end

    artifact 1874743 "ISensorServer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4361399 // ISensorServer
	class_ref 4361527 // BnSensorServer
      end
    end

    artifact 1874871 "ISurfaceComposer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4361655 // ISurfaceComposer
	class_ref 4362551 // BnSurfaceComposer
      end
    end

    artifact 1874999 "ISurfaceComposerClient"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4362807 // ISurfaceComposerClient
	class_ref 4363063 // BnSurfaceComposerClient
      end
    end

    artifact 1875127 "SensorEventQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4363191 // SensorEventQueue
      end
    end

    artifact 1875255 "StreamSplitter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4363575 // StreamSplitter
      end
    end

    artifact 1875383 "Surface"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4364215 // Surface
      end
    end

    artifact 1875511 "SurfaceComposerClient"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4330167 // SurfaceComposerClient
	class_ref 4364983 // ScreenshotClient
      end
    end

    artifact 1875639 "SurfaceControl"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4365111 // SurfaceControl
      end
    end
  end

  package_ref 459191 // android BufferQueueDefs

  package_ref 459319 // gui
end
