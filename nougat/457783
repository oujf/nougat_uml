format 76
"installd" // nougat_src::frameworks::native::cmds::installd
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/cmds/installd/"
  cpp_src_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/cmds/installd/"
  cpp_namespace "android::installd"
  classview 409527 "installd"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 4330295 "dir_rec_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " data structures "
      attribute 13651383 "path"
	public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13651511 "len"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4330423 "dir_rec_array_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 13651639 "count"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 12262199 // dirs (<unidirectional association>)
	relation 12261175 --->
	  a role_name "dirs" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12262199 // dirs (<unidirectional association>)
	  b parent class_ref 4330295 // dir_rec_t
      end
    end

    class 4330551 "SystemProperties"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Helper class to read system properties into and manage as a string->string map."
      operation 45540023 "Load"
	cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "strFile" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return ParseFile(strFile, [&](const std::string& line) {
            size_t equals_pos = line.find('=');
            if (equals_pos == std::string::npos || equals_pos == 0) {
                // Did not find equals sign, or it's the first character - isn't a valid line.
                return true;
            }

            std::string key = line.substr(0, equals_pos);
            std::string value = line.substr(equals_pos + 1,
                                            line.length() - equals_pos + 1);

            properties_.insert(std::make_pair(key, value));

            return true;
        });
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45540151 "GetProperty"
	const cpp_inline public explicit_return_type "std::string"
	nparams 1
	  param in name "key" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        auto it = properties_.find(key);
        if (it != properties_.end()) {
            return &it->second;
        }
        return nullptr;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Look up the key in the map. Returns null if the key isn't mapped."
      end

      operation 45540279 "SetProperty"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "key" explicit_type "std::string"
	  param in name "value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        properties_.insert(std::make_pair(key, value));
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 13651767 "properties_"
	private explicit_type "std::string, std::string"
	stereotype "std::unordered_map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The actual map."
      end
    end

    class 4330679 "cache_dir_struct"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12262327 // parent (<unidirectional association>)
	relation 12261303 --->
	  a role_name "parent" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12262327 // parent (<unidirectional association>)
	  b parent class_ref 4330679 // cache_dir_struct
      end

      attribute 13651895 "childCount"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13652023 "hiddenCount"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13652151 "deleted"
	public explicit_type "int32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13652279 "name"
	public explicit_type "char"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4330807 "cache_dir_t"
      visibility package stereotype "typedef" base_type class_ref 4330679 // cache_dir_struct
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 4330935 "cache_file_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12262455 // dir (<unidirectional association>)
	relation 12261431 --->
	  a role_name "dir" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12262455 // dir (<unidirectional association>)
	  b parent class_ref 4330807 // cache_dir_t
      end

      attribute 13652407 "modTime"
	public explicit_type "time_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13652535 "name"
	public explicit_type "char"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4331063 "cache_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 13652663 "numDirs"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13652791 "availDirs"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13652919 "dirs"
	public type class_ref 4330807 // cache_dir_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13653047 "numFiles"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13653175 "availFiles"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13653303 "files"
	public type class_ref 4330935 // cache_file_t
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13653431 "numCollected"
	public explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13653559 "memBlocks"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13653687 "curMemBlockAvail"
	public explicit_type "int8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 13653815 "curMemBlockEnd"
	public explicit_type "int8_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4530999 "fd_t"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 4531127 "cmdinfo"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 14335671 "name"
	const_attribute public explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 14335799 "numargs"
	public explicit_type "uint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 14335927 "func"
	public explicit_type "int (*)(char **arg, char reply[REPLY_MAX])"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}    int (*${name})(char **arg, char reply[REPLY_MAX])${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 4531255 "OTAPreoptService"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 14336055 "kOTADataDirectory"
	class_attribute const_attribute public explicit_type "constexpr char"
	init_value "=  \"/data/ota\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${h_value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 46003127 "Main"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param in name "argc" explicit_type "int"
	  param inout name "argv" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if (!ReadSystemProperties()) {
            LOG(ERROR)<< \"Failed reading system properties.\";
            return 1;
        }

        if (!ReadEnvironment()) {
            LOG(ERROR) << \"Failed reading environment properties.\";
            return 2;
        }

        if (!ReadPackage(argc, argv)) {
            LOG(ERROR) << \"Failed reading command line file.\";
            return 3;
        }

        PrepareEnvironment();

        if (!PrepareBootImage()) {
            LOG(ERROR) << \"Failed preparing boot image.\";
            return 4;
        }

        int dexopt_retcode = RunPreopt();

        return dexopt_retcode;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Main driver. Performs the following steps.

 1) Parse options (read system properties etc from B partition).

 2) Read in package data.

 3) Prepare environment variables.

 4) Prepare(compile) boot image, if necessary.

 5) Run update."
      end

      operation 46003255 "GetProperty"
	cpp_inline public explicit_return_type "int"
	nparams 3
	  param in name "key" explicit_type "char"
	  param inout name "value" explicit_type "char"
	  param in name "default_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        const std::string* prop_value = system_properties_.GetProperty(key);
        if (prop_value == nullptr) {
            if (default_value == nullptr) {
                return 0;
            }
            // Copy in the default value.
            strncpy(value, default_value, kPropertyValueMax - 1);
            value[kPropertyValueMax - 1] = 0;
            return strlen(default_value);// TODO: Need to truncate?
        }
        size_t size = std::min(kPropertyValueMax - 1, prop_value->length());
        strncpy(value, prop_value->data(), size);
        value[size] = 0;
        return static_cast<int>(size);
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46003383 "ReadSystemProperties"
	cpp_inline private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        static constexpr const char* kPropertyFiles[] = {
                \"/default.prop\", \"/system/build.prop\"
        };

        for (size_t i = 0; i < arraysize(kPropertyFiles); ++i) {
            if (!system_properties_.Load(kPropertyFiles[i])) {
                return false;
            }
        }

        return true;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46003511 "ReadEnvironment"
	cpp_inline private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        // Parse the environment variables from init.environ.rc, which have the form
        //   export NAME VALUE
        // For simplicity, don't respect string quotation. The values we are interested in can be
        // encoded without them.
        std::regex export_regex(\"\\\\s*export\\\\s+(\\\\S+)\\\\s+(\\\\S+)\");
        bool parse_result = ParseFile(\"/init.environ.rc\", [&](const std::string& line) {
            std::smatch export_match;
            if (!std::regex_match(line, export_match, export_regex)) {
                return true;
            }

            if (export_match.size() != 3) {
                return true;
            }

            std::string name = export_match[1].str();
            std::string value = export_match[2].str();

            system_properties_.SetProperty(name, value);

            return true;
        });
        if (!parse_result) {
            return false;
        }

        // Check that we found important properties.
        constexpr const char* kRequiredProperties[] = {
                kBootClassPathPropertyName, kAndroidRootPathPropertyName
        };
        for (size_t i = 0; i < arraysize(kRequiredProperties); ++i) {
            if (system_properties_.GetProperty(kRequiredProperties[i]) == nullptr) {
                return false;
            }
        }

        return true;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46003639 "ReadPackage"
	private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46003767 "PrepareEnvironment"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        CHECK(system_properties_.GetProperty(kBootClassPathPropertyName) != nullptr);
        const std::string& boot_cp =
                *system_properties_.GetProperty(kBootClassPathPropertyName);
        environ_.push_back(StringPrintf(\"BOOTCLASSPATH=%s\", boot_cp.c_str()));
        environ_.push_back(StringPrintf(\"ANDROID_DATA=%s\", kOTADataDirectory));
        CHECK(system_properties_.GetProperty(kAndroidRootPathPropertyName) != nullptr);
        const std::string& android_root =
                *system_properties_.GetProperty(kAndroidRootPathPropertyName);
        environ_.push_back(StringPrintf(\"ANDROID_ROOT=%s\", android_root.c_str()));

        for (const std::string& e : environ_) {
            putenv(const_cast<char*>(e.c_str()));
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46003895 "PrepareBootImage"
	cpp_inline private explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        if (package_parameters_[kISAIndex] == nullptr) {
            LOG(ERROR) << \"Instruction set missing.\";
            return false;
        }
        const char* isa = package_parameters_[kISAIndex];

        // Check whether the file exists where expected.
        std::string dalvik_cache = std::string(kOTADataDirectory) + \"/\" + DALVIK_CACHE;
        std::string isa_path = dalvik_cache + \"/\" + isa;
        std::string art_path = isa_path + \"/system@framework@boot.art\";
        std::string oat_path = isa_path + \"/system@framework@boot.oat\";
        if (access(art_path.c_str(), F_OK) == 0 &&
                access(oat_path.c_str(), F_OK) == 0) {
            // Files exist, assume everything is alright.
            return true;
        }

        // Create the directories, if necessary.
        if (access(dalvik_cache.c_str(), F_OK) != 0) {
            if (mkdir(dalvik_cache.c_str(), 0711) != 0) {
                PLOG(ERROR) << \"Could not create dalvik-cache dir\";
                return false;
            }
        }
        if (access(isa_path.c_str(), F_OK) != 0) {
            if (mkdir(isa_path.c_str(), 0711) != 0) {
                PLOG(ERROR) << \"Could not create dalvik-cache isa dir\";
                return false;
            }
        }

        // Prepare to create.
        // TODO: Delete files, just for a blank slate.
        const std::string& boot_cp = *system_properties_.GetProperty(kBootClassPathPropertyName);

        std::string preopted_boot_art_path = StringPrintf(\"/system/framework/%s/boot.art\", isa);
        if (access(preopted_boot_art_path.c_str(), F_OK) == 0) {
          return PatchoatBootImage(art_path, isa);
        } else {
          // No preopted boot image. Try to compile.
          return Dex2oatBootImage(boot_cp, art_path, oat_path, isa);
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Ensure that we have the right boot image. The first time any app is
 compiled, we'll try to generate it."
      end

      operation 46004023 "PatchoatBootImage"
	cpp_inline private explicit_return_type "bool"
	nparams 2
	  param in name "art_path" explicit_type "std::string"
	  param in name "isa" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        // This needs to be kept in sync with ART, see art/runtime/gc/space/image_space.cc.

        std::vector<std::string> cmd;
        cmd.push_back(\"/system/bin/patchoat\");

        cmd.push_back(\"--input-image-location=/system/framework/boot.art\");
        cmd.push_back(StringPrintf(\"--output-image-file=%s\", art_path.c_str()));

        cmd.push_back(StringPrintf(\"--instruction-set=%s\", isa));

        int32_t base_offset = ChooseRelocationOffsetDelta(ART_BASE_ADDRESS_MIN_DELTA,
                                                          ART_BASE_ADDRESS_MAX_DELTA);
        cmd.push_back(StringPrintf(\"--base-offset-delta=%d\", base_offset));

        std::string error_msg;
        bool result = Exec(cmd, &error_msg);
        if (!result) {
            LOG(ERROR) << \"Could not generate boot image: \" << error_msg;
        }
        return result;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46004151 "Dex2oatBootImage"
	cpp_inline private explicit_return_type "bool"
	nparams 4
	  param in name "boot_cp" explicit_type "std::string"
	  param in name "art_path" explicit_type "std::string"
	  param in name "oat_path" explicit_type "std::string"
	  param in name "isa" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        // This needs to be kept in sync with ART, see art/runtime/gc/space/image_space.cc.
        std::vector<std::string> cmd;
        cmd.push_back(\"/system/bin/dex2oat\");
        cmd.push_back(StringPrintf(\"--image=%s\", art_path.c_str()));
        for (const std::string& boot_part : Split(boot_cp, ':')) {
            cmd.push_back(StringPrintf(\"--dex-file=%s\", boot_part.c_str()));
        }
        cmd.push_back(StringPrintf(\"--oat-file=%s\", oat_path.c_str()));

        int32_t base_offset = ChooseRelocationOffsetDelta(ART_BASE_ADDRESS_MIN_DELTA,
                ART_BASE_ADDRESS_MAX_DELTA);
        cmd.push_back(StringPrintf(\"--base=0x%x\", ART_BASE_ADDRESS + base_offset));

        cmd.push_back(StringPrintf(\"--instruction-set=%s\", isa));

        // These things are pushed by AndroidRuntime, see frameworks/base/core/jni/AndroidRuntime.cpp.
        AddCompilerOptionFromSystemProperty(\"dalvik.vm.image-dex2oat-Xms\",
                \"-Xms\",
                true,
                cmd);
        AddCompilerOptionFromSystemProperty(\"dalvik.vm.image-dex2oat-Xmx\",
                \"-Xmx\",
                true,
                cmd);
        AddCompilerOptionFromSystemProperty(\"dalvik.vm.image-dex2oat-filter\",
                \"--compiler-filter=\",
                false,
                cmd);
        cmd.push_back(\"--image-classes=/system/etc/preloaded-classes\");
        // TODO: Compiled-classes.
        const std::string* extra_opts =
                system_properties_.GetProperty(\"dalvik.vm.image-dex2oat-flags\");
        if (extra_opts != nullptr) {
            std::vector<std::string> extra_vals = Split(*extra_opts, ' ');
            cmd.insert(cmd.end(), extra_vals.begin(), extra_vals.end());
        }
        // TODO: Should we lower this? It's usually set close to max, because
        //       normally there's not much else going on at boot.
        AddCompilerOptionFromSystemProperty(\"dalvik.vm.image-dex2oat-threads\",
                \"-j\",
                false,
                cmd);
        AddCompilerOptionFromSystemProperty(
                StringPrintf(\"dalvik.vm.isa.%s.variant\", isa).c_str(),
                \"--instruction-set-variant=\",
                false,
                cmd);
        AddCompilerOptionFromSystemProperty(
                StringPrintf(\"dalvik.vm.isa.%s.features\", isa).c_str(),
                \"--instruction-set-features=\",
                false,
                cmd);

        std::string error_msg;
        bool result = Exec(cmd, &error_msg);
        if (!result) {
            LOG(ERROR) << \"Could not generate boot image: \" << error_msg;
        }
        return result;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46004279 "ParseNull"
	class_operation cpp_inline private explicit_return_type "char"
	nparams 1
	  param in name "arg" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        return (strcmp(arg, \"!\") == 0) ? nullptr : arg;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46004407 "RunPreopt"
	cpp_inline private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        int ret = dexopt(package_parameters_[0],          // apk_path
                atoi(package_parameters_[1]),             // uid
                package_parameters_[2],                   // pkgname
                package_parameters_[3],                   // instruction_set
                atoi(package_parameters_[4]),             // dexopt_needed
                package_parameters_[5],                   // oat_dir
                atoi(package_parameters_[6]),             // dexopt_flags
                package_parameters_[7],                   // compiler_filter
                ParseNull(package_parameters_[8]),        // volume_uuid
                ParseNull(package_parameters_[9]));       // shared_libraries
        return ret;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46004535 "Exec"
	cpp_inline private explicit_return_type "bool"
	nparams 2
	  param in name "arg_vector" explicit_type "std::vector<std::string>"
	  param inout name "error_msg" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        const std::string command_line(Join(arg_vector, ' '));

        CHECK_GE(arg_vector.size(), 1U) << command_line;

        // Convert the args to char pointers.
        const char* program = arg_vector[0].c_str();
        std::vector<char*> args;
        for (size_t i = 0; i < arg_vector.size(); ++i) {
            const std::string& arg = arg_vector[i];
            char* arg_str = const_cast<char*>(arg.c_str());
            CHECK(arg_str != nullptr) << i;
            args.push_back(arg_str);
        }
        args.push_back(nullptr);

        // Fork and exec.
        pid_t pid = fork();
        if (pid == 0) {
            // No allocation allowed between fork and exec.

            // Change process groups, so we don't get reaped by ProcessManager.
            setpgid(0, 0);

            execv(program, &args[0]);

            PLOG(ERROR) << \"Failed to execv(\" << command_line << \")\";
            // _exit to avoid atexit handlers in child.
            _exit(1);
        } else {
            if (pid == -1) {
                *error_msg = StringPrintf(\"Failed to execv(%s) because fork failed: %s\",
                        command_line.c_str(), strerror(errno));
                return false;
            }

            // wait for subprocess to finish
            int status;
            pid_t got_pid = TEMP_FAILURE_RETRY(waitpid(pid, &status, 0));
            if (got_pid != pid) {
                *error_msg = StringPrintf(\"Failed after fork for execv(%s) because waitpid failed: \"
                        \"wanted %d, got %d: %s\",
                        command_line.c_str(), pid, got_pid, strerror(errno));
                return false;
            }
            if (!WIFEXITED(status) || WEXITSTATUS(status) != 0) {
                *error_msg = StringPrintf(\"Failed execv(%s) because non-0 exit status\",
                        command_line.c_str());
                return false;
            }
        }
        return true;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "//////////////////////////////////
 Helpers, mostly taken from ART //
//////////////////////////////////
 Wrapper on fork/execv to run a command in a subprocess."
      end

      operation 46004663 "ChooseRelocationOffsetDelta"
	class_operation cpp_inline private explicit_return_type "int32_t"
	nparams 2
	  param in name "min_delta" explicit_type "int32_t"
	  param in name "max_delta" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        constexpr size_t kPageSize = PAGE_SIZE;
        CHECK_EQ(min_delta % kPageSize, 0u);
        CHECK_EQ(max_delta % kPageSize, 0u);
        CHECK_LT(min_delta, max_delta);

        std::default_random_engine generator;
        generator.seed(GetSeed());
        std::uniform_int_distribution<int32_t> distribution(min_delta, max_delta);
        int32_t r = distribution(generator);
        if (r % 2 == 0) {
            r = RoundUp(r, kPageSize);
        } else {
            r = RoundDown(r, kPageSize);
        }
        CHECK_LE(min_delta, r);
        CHECK_GE(max_delta, r);
        CHECK_EQ(r % kPageSize, 0u);
        return r;
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Choose a random relocation offset. Taken from art/runtime/gc/image_space.cc."
      end

      operation 46004791 "GetSeed"
	class_operation cpp_inline private explicit_return_type "uint64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
#ifdef __BIONIC__
        // Bionic exposes arc4random, use it.
        uint64_t random_data;
        arc4random_buf(&random_data, sizeof(random_data));
        return random_data;
#else
#error \"This is only supposed to run with bionic. Otherwise, implement...\"
#endif
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 46004919 "AddCompilerOptionFromSystemProperty"
	cpp_inline private explicit_return_type "void"
	nparams 4
	  param in name "system_property" explicit_type "char"
	  param in name "prefix" explicit_type "char"
	  param in name "runtime" explicit_type "bool"
	  param inout name "out" explicit_type "std::vector<std::string>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        const std::string* value =
        system_properties_.GetProperty(system_property);
        if (value != nullptr) {
            if (runtime) {
                out.push_back(\"--runtime-arg\");
            }
            if (prefix != nullptr) {
                out.push_back(StringPrintf(\"%s%s\", prefix, value->c_str()));
            } else {
                out.push_back(*value);
            }
        }
    };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 12598711 // system_properties_ (<directional composition>)
	relation 12597687 *-->
	  a role_name "system_properties_" private
	    comment " Stores the system properties read out of the B partition. We need to use these properties
 to compile, instead of the A properties we could get from init/get_property."
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12598711 // system_properties_ (<directional composition>)
	  b parent class_ref 4330551 // SystemProperties
      end

      attribute 14336183 "package_parameters_"
	const_attribute private explicit_type "char"
	multiplicity "[10]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 14336311 "environ_"
	private explicit_type "std::string"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Store environment values we need to set."
      end
    end
  end

  deploymentview 352183 "installd"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1865143 "globals"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4330295 // dir_rec_t
	class_ref 4330423 // dir_rec_array_t
      end
    end

    artifact 1865271 "system_properties"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4330551 // SystemProperties
      end
    end

    artifact 1865399 "utils"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4330679 // cache_dir_struct
	class_ref 4330807 // cache_dir_t
	class_ref 4330935 // cache_file_t
	class_ref 4331063 // cache_t
      end
    end

    artifact 1902647 "fd_t"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4530999 // fd_t
      end
    end

    artifact 1902775 "cmdinfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4531127 // cmdinfo
      end
    end

    artifact 1903031 "OTAPreoptService"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4531255 // OTAPreoptService
      end
    end
  end

  package_ref 467255 // installd

  package_ref 467383 // tests
end
