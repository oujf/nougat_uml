format 76
"drm" // nougat_src::frameworks::include::media::drm
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/include/media/drm/"
  cpp_src_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/include/media/drm/"
  cpp_namespace "android"
  classview 411447 "drm"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 4374967 "DrmFactory"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " DRMs are implemented in DrmEngine plugins, which are dynamically
 loadable shared libraries that implement the entry points
 createDrmFactory and createCryptoFactory.  createDrmFactory
 constructs and returns an instance of a DrmFactory object.  Similarly,
 createCryptoFactory creates an instance of a CryptoFactory object.
 When a MediaCrypto or MediaDrm object needs to be constructed, all
 available DrmEngines present in the plugins directory on the device
 are scanned for a matching DrmEngine that can support the crypto
 scheme.  When a match is found, the DrmEngine's createCryptoPlugin and
 createDrmPlugin methods are used to create CryptoPlugin or
 DrmPlugin instances to support that DRM scheme."
      operation 45699383 "DrmFactory"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45699511 "~DrmFactory"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 45699639 "isCryptoSchemeSupported"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "uuid" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[16]${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " DrmFactory::isCryptoSchemeSupported can be called to determine
 if the plugin factory is able to construct plugins that support a
 given crypto scheme, which is specified by a UUID."
      end

      operation 45699767 "isContentTypeSupported"
	abstract cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "mimeType" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " DrmFactory::isContentTypeSupported can be called to determine
 if the plugin factory is able to construct plugins that support a
 given media container format specified by mimeType"
      end

      operation 45699895 "createDrmPlugin"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "uuid" explicit_type "uint8_t"
	  param inout name "plugin" type class_ref 4375095 // DrmPlugin
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[16]${v0}, ${t1} * * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Construct a DrmPlugin for the crypto scheme specified by UUID."
      end

      operation 45700023 "DrmFactory"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 4374967 // DrmFactory
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45700151 "operator ="
	private return_type class_ref 4374967 // DrmFactory
	nparams 1
	  param in name "" type class_ref 4374967 // DrmFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 4375095 "DrmPlugin"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 4375223 "EventType"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13821495 "kDrmPluginEventProvisionRequired"
	  public type class_ref 4375223 // EventType
	  init_value " 1"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13821623 "kDrmPluginEventKeyNeeded"
	  public type class_ref 4375223 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13821751 "kDrmPluginEventKeyExpired"
	  public type class_ref 4375223 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13821879 "kDrmPluginEventVendorDefined"
	  public type class_ref 4375223 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13822007 "kDrmPluginEventSessionReclaimed"
	  public type class_ref 4375223 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13822135 "kDrmPluginEventExpirationUpdate"
	  public type class_ref 4375223 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13822263 "kDrmPluginEventKeysChange"
	  public type class_ref 4375223 // EventType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4375351 "KeyType"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13822391 "kKeyType_Offline"
	  public type class_ref 4375351 // KeyType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13822519 "kKeyType_Streaming"
	  public type class_ref 4375351 // KeyType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13822647 "kKeyType_Release"
	  public type class_ref 4375351 // KeyType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4375479 "KeyRequestType"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13822775 "kKeyRequestType_Unknown"
	  public type class_ref 4375479 // KeyRequestType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13822903 "kKeyRequestType_Initial"
	  public type class_ref 4375479 // KeyRequestType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13823031 "kKeyRequestType_Renewal"
	  public type class_ref 4375479 // KeyRequestType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13823159 "kKeyRequestType_Release"
	  public type class_ref 4375479 // KeyRequestType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4375607 "KeyStatusType"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13823287 "kKeyStatusType_Usable"
	  public type class_ref 4375607 // KeyStatusType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13823415 "kKeyStatusType_Expired"
	  public type class_ref 4375607 // KeyStatusType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13823543 "kKeyStatusType_OutputNotAllowed"
	  public type class_ref 4375607 // KeyStatusType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13823671 "kKeyStatusType_StatusPending"
	  public type class_ref 4375607 // KeyStatusType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 13823799 "kKeyStatusType_InternalError"
	  public type class_ref 4375607 // KeyStatusType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 4375735 "KeyStatus"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 13823927 "mKeyId"
	  public explicit_type "uint8_t"
	  stereotype "Vector"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 12301495 // mType (<directional composition>)
	  relation 12300471 *-->
	    a role_name "mType" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 12301495 // mType (<directional composition>)
	    b parent class_ref 4375607 // KeyStatusType
	end
      end

      operation 45700279 "DrmPlugin"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 45700407 "~DrmPlugin"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 45700535 "openSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "sessionId" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Open a new session with the DrmPlugin object.  A session ID is returned
 in the sessionId parameter."
      end

      operation 45700663 "closeSession"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Close a session on the DrmPlugin object."
      end

      operation 45700791 "getKeyRequest"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 8
	  param in name "scope" explicit_type "Vector<uint8_t>"
	  param in name "initData" explicit_type "Vector<uint8_t>"
	  param in name "mimeType" explicit_type "String8"
	  param in name "keyType" type class_ref 4375351 // KeyType
	  param in name "optionalParameters" explicit_type "KeyedVector<String8, String8>"
	  param inout name "request" explicit_type "Vector<uint8_t>"
	  param inout name "defaultUrl" explicit_type "String8"
	  param inout name "keyRequestType" type class_ref 4375479 // KeyRequestType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} & ${p4}${v4}, ${t5} & ${p5}${v5}, ${t6} & ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A key request/response exchange occurs between the app and a License
 Server to obtain the keys required to decrypt the content.  getKeyRequest()
 is used to obtain an opaque key request blob that is delivered to the
 license server.

 The scope parameter may be a sessionId or a keySetId, depending on the
 specified keyType.  When the keyType is kKeyType_Offline or
 kKeyType_Streaming, scope should be set to the sessionId the keys will be
 provided to.  When the keyType is kKeyType_Release, scope should be set to
 the keySetId of the keys being released.  Releasing keys from a device
 invalidates them for all sessions.

 The init data passed to getKeyRequest is container-specific and its
 meaning is interpreted based on the mime type provided in the mimeType
 parameter to getKeyRequest.  It could contain, for example, the content
 ID, key ID or other data obtained from the content metadata that is required
 in generating the key request.  Init may be null when keyType is
 kKeyType_Release.

 mimeType identifies the mime type of the content

 keyType specifies if the keys are to be used for streaming or offline content

 optionalParameters are included in the key request message to allow a
 client application to provide additional message parameters to the server.

 If successful, the opaque key request blob is returned to the caller."
      end

      operation 45700919 "provideKeyResponse"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param in name "scope" explicit_type "Vector<uint8_t>"
	  param in name "response" explicit_type "Vector<uint8_t>"
	  param inout name "keySetId" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " After a key response is received by the app, it is provided to the
 Drm plugin using provideKeyResponse.

 scope may be a sessionId or a keySetId depending on the type of the
 response.  Scope should be set to the sessionId when the response is
 for either streaming or offline key requests.  Scope should be set to the
 keySetId when the response is for a release request.

 When the response is for an offline key request, a keySetId is returned
 in the keySetId vector parameter that can be used to later restore the
 keys to a new session with the method restoreKeys. When the response is
 for a streaming or release request, no keySetId is returned."
      end

      operation 45701047 "removeKeys"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remove the current keys from a session"
      end

      operation 45701175 "restoreKeys"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keySetId" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Restore persisted offline keys into a new session.  keySetId identifies
 the keys to load, obtained from a prior call to provideKeyResponse()."
      end

      operation 45701303 "queryKeyStatus"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param inout name "infoMap" explicit_type "KeyedVector<String8, String8>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Request an informative description of the license for the session.  The status
 is in the form of {name, value} pairs.  Since DRM license policies vary by
 vendor, the specific status field names are determined by each DRM vendor.
 Refer to your DRM provider documentation for definitions of the field names
 for a particular DrmEngine."
      end

      operation 45701431 "getProvisionRequest"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "cert_type" explicit_type "String8"
	  param in name "cert_authority" explicit_type "String8"
	  param inout name "request" explicit_type "Vector<uint8_t>"
	  param inout name "defaultUrl" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A provision request/response exchange occurs between the app and a
 provisioning server to retrieve a device certificate.  getProvisionRequest
 is used to obtain an opaque key request blob that is delivered to the
 provisioning server.

 If successful, the opaque provision request blob is returned to the caller."
      end

      operation 45701559 "provideProvisionResponse"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 3
	  param in name "response" explicit_type "Vector<uint8_t>"
	  param inout name "certificate" explicit_type "Vector<uint8_t>"
	  param inout name "wrapped_key" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}, ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " After a provision response is received by the app, it is provided to the
 Drm plugin using provideProvisionResponse."
      end

      operation 45701687 "getSecureStops"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param inout name "secureStops" explicit_type "List<Vector<uint8_t> >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A means of enforcing the contractual requirement for a concurrent stream
 limit per subscriber across devices is provided via SecureStop.  SecureStop
 is a means of securely monitoring the lifetime of sessions. Since playback
 on a device can be interrupted due to reboot, power failure, etc. a means
 of persisting the lifetime information on the device is needed.

 A signed version of the sessionID is written to persistent storage on the
 device when each MediaCrypto object is created. The sessionID is signed by
 the device private key to prevent tampering.

 In the normal case, playback will be completed, the session destroyed and
 the Secure Stops will be queried. The App queries secure stops and forwards
 the secure stop message to the server which verifies the signature and
 notifies the server side database that the session destruction has been
 confirmed. The persisted record on the client is only removed after positive
 confirmation that the server received the message using releaseSecureStops()."
      end

      operation 45701815 "getSecureStop"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "ssid" explicit_type "Vector<uint8_t>"
	  param inout name "secureStop" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45701943 "releaseSecureStops"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 1
	  param in name "ssRelease" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45702071 "releaseAllSecureStops"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45702199 "getPropertyString"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "name" explicit_type "String8"
	  param inout name "value" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Read a property value given the device property string.  There are a few forms
 of property access methods, depending on the data type returned.
 Since DRM plugin properties may vary, additional field names may be defined
 by each DRM vendor.  Refer to your DRM provider documentation for definitions
 of its additional field names.

 Standard values are:
   \"vendor\" [string] identifies the maker of the plugin
   \"version\" [string] identifies the version of the plugin
   \"description\" [string] describes the plugin
   'deviceUniqueId' [byte array] The device unique identifier is established
   during device provisioning and provides a means of uniquely identifying
   each device."
      end

      operation 45702327 "getPropertyByteArray"
	abstract const cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "name" explicit_type "String8"
	  param inout name "value" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45702455 "setPropertyString"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "name" explicit_type "String8"
	  param in name "value" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Write  a property value given the device property string.  There are a few forms
 of property setting methods, depending on the data type.
 Since DRM plugin properties may vary, additional field names may be defined
 by each DRM vendor.  Refer to your DRM provider documentation for definitions
 of its field names."
      end

      operation 45702583 "setPropertyByteArray"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "name" explicit_type "String8"
	  param in name "value" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45702711 "setCipherAlgorithm"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "algorithm" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The following methods implement operations on a CryptoSession to support
 encrypt, decrypt, sign verify operations on operator-provided
 session keys.

 The algorithm string conforms to JCA Standard Names for Cipher
 Transforms and is case insensitive.  For example \"AES/CBC/PKCS5Padding\".

 Return OK if the algorithm is supported, otherwise return BAD_VALUE"
      end

      operation 45702839 "setMacAlgorithm"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "algorithm" explicit_type "String8"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The algorithm string conforms to JCA Standard Names for Mac
 Algorithms and is case insensitive.  For example \"HmacSHA256\".

 Return OK if the algorithm is supported, otherwise return BAD_VALUE"
      end

      operation 45702967 "encrypt"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyId" explicit_type "Vector<uint8_t>"
	  param in name "input" explicit_type "Vector<uint8_t>"
	  param in name "iv" explicit_type "Vector<uint8_t>"
	  param inout name "output" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Encrypt the provided input buffer with the cipher algorithm
 specified by setCipherAlgorithm and the key selected by keyId,
 and return the encrypted data."
      end

      operation 45703095 "decrypt"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyId" explicit_type "Vector<uint8_t>"
	  param in name "input" explicit_type "Vector<uint8_t>"
	  param in name "iv" explicit_type "Vector<uint8_t>"
	  param inout name "output" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Decrypt the provided input buffer with the cipher algorithm
 specified by setCipherAlgorithm and the key selected by keyId,
 and return the decrypted data."
      end

      operation 45703223 "sign"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 4
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyId" explicit_type "Vector<uint8_t>"
	  param in name "message" explicit_type "Vector<uint8_t>"
	  param inout name "signature" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Compute a signature on the provided message using the mac algorithm
 specified by setMacAlgorithm and the key selected by keyId,
 and return the signature."
      end

      operation 45703351 "verify"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyId" explicit_type "Vector<uint8_t>"
	  param in name "message" explicit_type "Vector<uint8_t>"
	  param in name "signature" explicit_type "Vector<uint8_t>"
	  param inout name "match" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Compute a signature on the provided message using the mac algorithm
 specified by setMacAlgorithm and the key selected by keyId,
 and compare with the expected result.  Set result to true or
 false depending on the outcome."
      end

      operation 45703479 "signRSA"
	abstract cpp_virtual public explicit_return_type "status_t"
	nparams 5
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "algorithm" explicit_type "String8"
	  param in name "message" explicit_type "Vector<uint8_t>"
	  param in name "wrapped_key" explicit_type "Vector<uint8_t>"
	  param inout name "signature" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}, ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Compute an RSA signature on the provided message using the algorithm
 specified by algorithm."
      end

      operation 45703607 "setListener"
	cpp_inline public explicit_return_type "status_t"
	nparams 1
	  param in name "listener" explicit_type "sp<DrmPluginListener>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
            Mutex::Autolock lock(mEventLock);
            mListener = listener;
            return OK;
        };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45703735 "sendEvent"
	preserve_cpp_body_indent cpp_inline protected explicit_return_type "void"
	nparams 4
	  param in name "eventType" type class_ref 4375223 // EventType
	  param in name "extra" explicit_type "int"
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "data" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} * ${p2}, const ${t3} * ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Plugins call these methods to deliver events to the java app"
      end

      operation 45703863 "sendExpirationUpdate"
	preserve_cpp_body_indent cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "expiryTimeInMS" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45703991 "sendKeysChange"
	preserve_cpp_body_indent cpp_inline protected explicit_return_type "void"
	nparams 3
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyStatusList" explicit_type "Vector<DrmPlugin::KeyStatus>"
	  param in name "hasNewUsableKey" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 13824055 "mEventLock"
	private explicit_type "Mutex"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 12301623 // mListener (<directional composition>)
	relation 12300599 *-->
	  stereotype "sp"
	  a role_name "mListener" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 12301623 // mListener (<directional composition>)
	  b parent class_ref 4375863 // DrmPluginListener
      end
    end

    class 4375863 "DrmPluginListener"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 12301751 // <generalisation>
	relation 12300727 ---|>
	  a public
	    cpp virtual default "${type}"
	    java "${type}"
	    classrelation_ref 12301751 // <generalisation>
	  b parent class_ref 4375991 // typedef19
      end

      operation 45704119 "sendEvent"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 4
	  param in name "eventType" type class_ref 4375223 // EventType
	  param in name "extra" explicit_type "int"
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "data" explicit_type "Vector<uint8_t>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45704247 "sendExpirationUpdate"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "expiryTimeInMS" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 45704375 "sendKeysChange"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 3
	  param in name "sessionId" explicit_type "Vector<uint8_t>"
	  param in name "keyStatusList" explicit_type "Vector<DrmPlugin::KeyStatus>"
	  param in name "hasNewUsableKey" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 4375991 "typedef19"
      visibility package stereotype "typedef" explicit_base_type "RefBase"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end
  end

  deploymentview 353847 "drm"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1877431 "DrmAPI"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 4374967 // DrmFactory
	class_ref 4375095 // DrmPlugin
	class_ref 4375991 // typedef19
	class_ref 4375863 // DrmPluginListener
      end
    end
  end
end
