class CameraCharacteristics
!!!3071031.java!!!	CameraCharacteristics(inout properties : CameraMetadataNative)
        mProperties = CameraMetadataNative.move(properties);
!!!3071159.java!!!	getNativeCopy() : CameraMetadataNative
        return new CameraMetadataNative(mProperties);
!!!3071287.java!!!	get(inout key : CameraCharacteristics::Key) : T
        return mProperties.get(key);
!!!3071415.java!!!	getProtected(inout key : CameraCharacteristics::Key) : T
        return (T) mProperties.get(key);
!!!3071543.java!!!	getKeyClass() : Class
        Object thisClass = Key.class;
        return (Class<Key<?>>)thisClass;
!!!3071671.java!!!	getKeys() : CameraCharacteristics::Key
        // List of keys is immutable; cache the results after we calculate them
        if (mKeys != null) {
            return mKeys;
        }

        int[] filterTags = get(REQUEST_AVAILABLE_CHARACTERISTICS_KEYS);
        if (filterTags == null) {
            throw new AssertionError("android.request.availableCharacteristicsKeys must be non-null"
                    + " in the characteristics");
        }

        mKeys = Collections.unmodifiableList(
                getKeysStatic(getClass(), getKeyClass(), this, filterTags));
        return mKeys;
!!!3071799.java!!!	getAvailableCaptureRequestKeys() : CaptureRequest::Key
        if (mAvailableRequestKeys == null) {
            Object crKey = CaptureRequest.Key.class;
            Class<CaptureRequest.Key<?>> crKeyTyped = (Class<CaptureRequest.Key<?>>)crKey;

            int[] filterTags = get(REQUEST_AVAILABLE_REQUEST_KEYS);
            if (filterTags == null) {
                throw new AssertionError("android.request.availableRequestKeys must be non-null "
                        + "in the characteristics");
            }
            mAvailableRequestKeys =
                    getAvailableKeyList(CaptureRequest.class, crKeyTyped, filterTags);
        }
        return mAvailableRequestKeys;
!!!3071927.java!!!	getAvailableCaptureResultKeys() : CaptureResult::Key
        if (mAvailableResultKeys == null) {
            Object crKey = CaptureResult.Key.class;
            Class<CaptureResult.Key<?>> crKeyTyped = (Class<CaptureResult.Key<?>>)crKey;

            int[] filterTags = get(REQUEST_AVAILABLE_RESULT_KEYS);
            if (filterTags == null) {
                throw new AssertionError("android.request.availableResultKeys must be non-null "
                        + "in the characteristics");
            }
            mAvailableResultKeys = getAvailableKeyList(CaptureResult.class, crKeyTyped, filterTags);
        }
        return mAvailableResultKeys;
!!!3072055.java!!!	getAvailableKeyList(inout metadataClass : Class, inout keyClass : Class, inout filterTags : int) : List<TKey>

        if (metadataClass.equals(CameraMetadata.class)) {
            throw new AssertionError(
                    "metadataClass must be a strict subclass of CameraMetadata");
        } else if (!CameraMetadata.class.isAssignableFrom(metadataClass)) {
            throw new AssertionError(
                    "metadataClass must be a subclass of CameraMetadata");
        }

        List<TKey> staticKeyList = CameraCharacteristics.<TKey>getKeysStatic(
                metadataClass, keyClass, /*instance*/null, filterTags);
        return Collections.unmodifiableList(staticKeyList);
