class Rational
!!!4769079.java!!!	Rational(in numerator : int, in denominator : int)

        if (denominator < 0) {
            numerator = -numerator;
            denominator = -denominator;
        }

        // Convert to reduced form
        if (denominator == 0 && numerator > 0) {
            mNumerator = 1; // +Inf
            mDenominator = 0;
        } else if (denominator == 0 && numerator < 0) {
            mNumerator = -1; // -Inf
            mDenominator = 0;
        } else if (denominator == 0 && numerator == 0) {
            mNumerator = 0; // NaN
            mDenominator = 0;
        } else if (numerator == 0) {
            mNumerator = 0;
            mDenominator = 1;
        } else {
            int gcd = gcd(numerator, denominator);

            mNumerator = numerator / gcd;
            mDenominator = denominator / gcd;
        }
!!!4769207.java!!!	getNumerator() : int
        return mNumerator;
!!!4769335.java!!!	getDenominator() : int
        return mDenominator;
!!!4769463.java!!!	isNaN() : boolean
        return mDenominator == 0 && mNumerator == 0;
!!!4769591.java!!!	isInfinite() : boolean
        return mNumerator != 0 && mDenominator == 0;
!!!4769719.java!!!	isFinite() : boolean
        return mDenominator != 0;
!!!4769847.java!!!	isZero() : boolean
        return isFinite() && mNumerator == 0;
!!!4769975.java!!!	isPosInf() : boolean
        return mDenominator == 0 && mNumerator > 0;
!!!4770103.java!!!	isNegInf() : boolean
        return mDenominator == 0 && mNumerator < 0;
!!!4770231.java!!!	equals(inout obj : Object) : boolean
        return obj instanceof Rational && equals((Rational) obj);
!!!4770359.java!!!	equals(inout other : Rational) : boolean
        return (mNumerator == other.mNumerator && mDenominator == other.mDenominator);
!!!4770487.java!!!	toString() : String
        if (isNaN()) {
            return "NaN";
        } else if (isPosInf()) {
            return "Infinity";
        } else if (isNegInf()) {
            return "-Infinity";
        } else {
            return mNumerator + "/" + mDenominator;
        }
!!!4770615.java!!!	toFloat() : float
        // TODO: remove this duplicate function (used in CTS and the shim)
        return floatValue();
!!!4770743.java!!!	hashCode() : int
        // Bias the hash code for the first (2^16) values for both numerator and denominator
        int numeratorFlipped = mNumerator << 16 | mNumerator >>> 16;

        return mDenominator ^ numeratorFlipped;
!!!4770871.java!!!	gcd(in numerator : int, in denominator : int) : int
        /*
         * Non-recursive implementation of Euclid's algorithm:
         *
         *  gcd(a, 0) := a
         *  gcd(a, b) := gcd(b, a mod b)
         *
         */
        int a = numerator;
        int b = denominator;

        while (b != 0) {
            int oldB = b;

            b = a % b;
            a = oldB;
        }

        return Math.abs(a);
!!!4770999.java!!!	doubleValue() : double
        double num = mNumerator;
        double den = mDenominator;

        return num / den;
!!!4771127.java!!!	floatValue() : float
        float num = mNumerator;
        float den = mDenominator;

        return num / den;
!!!4771255.java!!!	intValue() : int
        // Mimic float to int conversion rules from JLS 5.1.3

        if (isPosInf()) {
            return Integer.MAX_VALUE;
        } else if (isNegInf()) {
            return Integer.MIN_VALUE;
        } else if (isNaN()) {
            return 0;
        } else { // finite
            return mNumerator / mDenominator;
        }
!!!4771383.java!!!	longValue() : long
        // Mimic float to long conversion rules from JLS 5.1.3

        if (isPosInf()) {
            return Long.MAX_VALUE;
        } else if (isNegInf()) {
            return Long.MIN_VALUE;
        } else if (isNaN()) {
            return 0;
        } else { // finite
            return mNumerator / mDenominator;
        }
!!!4771511.java!!!	shortValue() : short
        return (short) intValue();
!!!4771639.java!!!	compareTo(inout another : Rational) : int
        checkNotNull(another, "another must not be null");

        if (equals(another)) {
            return 0;
        } else if (isNaN()) { // NaN is greater than the other non-NaN value
            return 1;
        } else if (another.isNaN()) { // the other NaN is greater than this non-NaN value
            return -1;
        } else if (isPosInf() || another.isNegInf()) {
            return 1; // positive infinity is greater than any non-NaN/non-posInf value
        } else if (isNegInf() || another.isPosInf()) {
            return -1; // negative infinity is less than any non-NaN/non-negInf value
        }

        // else both this and another are finite numbers

        // make the denominators the same, then compare numerators
        long thisNumerator = ((long)mNumerator) * another.mDenominator; // long to avoid overflow
        long otherNumerator = ((long)another.mNumerator) * mDenominator; // long to avoid overflow

        // avoid underflow from subtraction by doing comparisons
        if (thisNumerator < otherNumerator) {
            return -1;
        } else if (thisNumerator > otherNumerator) {
            return 1;
        } else {
            // This should be covered by #equals, but have this code path just in case
            return 0;
        }
!!!4771767.java!!!	readObject(inout in : java.io.ObjectInputStream) : void
        in.defaultReadObject();

        /*
         * Guard against trying to deserialize illegal values (in this case, ones
         * that don't have a standard reduced form).
         *
         * - Non-finite values must be one of [0, 1], [0, 0], [0, 1], [0, -1]
         * - Finite values must always have their greatest common divisor as 1
         */

        if (mNumerator == 0) { // either zero or NaN
            if (mDenominator == 1 || mDenominator == 0) {
                return;
            }
            throw new InvalidObjectException(
                    "Rational must be deserialized from a reduced form for zero values");
        } else if (mDenominator == 0) { // either positive or negative infinity
            if (mNumerator == 1 || mNumerator == -1) {
                return;
            }
            throw new InvalidObjectException(
                    "Rational must be deserialized from a reduced form for infinity values");
        } else { // finite value
            if (gcd(mNumerator, mDenominator) > 1) {
                throw new InvalidObjectException(
                        "Rational must be deserialized from a reduced form for finite values");
            }
        }
!!!4771895.java!!!	invalidRational(inout s : String) : NumberFormatException
        throw new NumberFormatException("Invalid Rational: \"" + s + "\"");
!!!4772023.java!!!	parseRational(inout string : String) : Rational
        checkNotNull(string, "string must not be null");

        if (string.equals("NaN")) {
            return NaN;
        } else if (string.equals("Infinity")) {
            return POSITIVE_INFINITY;
        } else if (string.equals("-Infinity")) {
            return NEGATIVE_INFINITY;
        }

        int sep_ix = string.indexOf(':');
        if (sep_ix < 0) {
            sep_ix = string.indexOf('/');
        }
        if (sep_ix < 0) {
            throw invalidRational(string);
        }
        try {
            return new Rational(Integer.parseInt(string.substring(0, sep_ix)),
                    Integer.parseInt(string.substring(sep_ix + 1)));
        } catch (NumberFormatException e) {
            throw invalidRational(string);
        }
