format 76
"service" // nougat_src::frameworks::native::cmds::service
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/cmds/service/"
  cpp_src_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/cmds/service/"
  deploymentview 361143 "service"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1903671 "main"
      stereotype "source"
      cpp_src "int main(int argc, char* const argv[])
{
    sp<IServiceManager> sm = defaultServiceManager();
    fflush(stdout);
    if (sm == NULL) {
        aerr << \"service: Unable to get default service manager!\" << endl;
        return 20;
    }
    
    bool wantsUsage = false;
    int result = 0;
    
    while (1) {
        int ic = getopt(argc, argv, \"h?\");
        if (ic < 0)
            break;

        switch (ic) {
        case 'h':
        case '?':
            wantsUsage = true;
            break;
        default:
            aerr << \"service: Unknown option -\" << ic << endl;
            wantsUsage = true;
            result = 10;
            break;
        }
    }
    
    if (optind >= argc) {
        wantsUsage = true;
    } else if (!wantsUsage) {
        if (strcmp(argv[optind], \"check\") == 0) {
            optind++;
            if (optind < argc) {
                sp<IBinder> service = sm->checkService(String16(argv[optind]));
                aout << \"Service \" << argv[optind] <<
                    (service == NULL ? \": not found\" : \": found\") << endl;
            } else {
                aerr << \"service: No service specified for check\" << endl;
                wantsUsage = true;
                result = 10;
            }
        }
        else if (strcmp(argv[optind], \"list\") == 0) {
            Vector<String16> services = sm->listServices();
            aout << \"Found \" << services.size() << \" services:\" << endl;
            for (unsigned i = 0; i < services.size(); i++) {
                String16 name = services[i];
                sp<IBinder> service = sm->checkService(name);
                aout << i 
                     << \"\\t\" << good_old_string(name) 
                     << \": [\" << good_old_string(get_interface_name(service)) << \"]\"
                     << endl;
            }
        } else if (strcmp(argv[optind], \"call\") == 0) {
            optind++;
            if (optind+1 < argc) {
                int serviceArg = optind;
                sp<IBinder> service = sm->checkService(String16(argv[optind++]));
                String16 ifName = get_interface_name(service);
                int32_t code = atoi(argv[optind++]);
                if (service != NULL && ifName.size() > 0) {
                    Parcel data, reply;

                    // the interface name is first
                    data.writeInterfaceToken(ifName);

                    // then the rest of the call arguments
                    while (optind < argc) {
                        if (strcmp(argv[optind], \"i32\") == 0) {
                            optind++;
                            if (optind >= argc) {
                                aerr << \"service: no integer supplied for 'i32'\" << endl;
                                wantsUsage = true;
                                result = 10;
                                break;
                            }
                            data.writeInt32(atoi(argv[optind++]));
                        } else if (strcmp(argv[optind], \"i64\") == 0) {
                            optind++;
                            if (optind >= argc) {
                                aerr << \"service: no integer supplied for 'i64'\" << endl;
                                wantsUsage = true;
                                result = 10;
                                break;
                            }
                            data.writeInt64(atoll(argv[optind++]));
                        } else if (strcmp(argv[optind], \"s16\") == 0) {
                            optind++;
                            if (optind >= argc) {
                                aerr << \"service: no string supplied for 's16'\" << endl;
                                wantsUsage = true;
                                result = 10;
                                break;
                            }
                            data.writeString16(String16(argv[optind++]));
                        } else if (strcmp(argv[optind], \"f\") == 0) {
                            optind++;
                            if (optind >= argc) {
                                aerr << \"service: no number supplied for 'f'\" << endl;
                                wantsUsage = true;
                                result = 10;
                                break;
                            }
                            data.writeFloat(atof(argv[optind++]));
                        } else if (strcmp(argv[optind], \"d\") == 0) {
                            optind++;
                            if (optind >= argc) {
                                aerr << \"service: no number supplied for 'd'\" << endl;
                                wantsUsage = true;
                                result = 10;
                                break;
                            }
                            data.writeDouble(atof(argv[optind++]));
                        } else if (strcmp(argv[optind], \"null\") == 0) {
                            optind++;
                            data.writeStrongBinder(NULL);
                        } else if (strcmp(argv[optind], \"intent\") == 0) {
                        	
                        	char* action = NULL;
                        	char* dataArg = NULL;
                        	char* type = NULL;
                        	int launchFlags = 0;
                        	char* component = NULL;
                        	int categoryCount = 0;
                        	char* categories[16];
                        	
                        	char* context1 = NULL;
                        	
                            optind++;
                            
                        	while (optind < argc)
                        	{
                        		char* key = strtok_r(argv[optind], \"=\", &context1);
                        		char* value = strtok_r(NULL, \"=\", &context1);
                                
                                // we have reached the end of the XXX=XXX args.
                                if (key == NULL) break;
                        		
                        		if (strcmp(key, \"action\") == 0)
                        		{
                        			action = value;
                        		}
                        		else if (strcmp(key, \"data\") == 0)
                        		{
                        			dataArg = value;
                        		}
                        		else if (strcmp(key, \"type\") == 0)
                        		{
                        			type = value;
                        		}
                        		else if (strcmp(key, \"launchFlags\") == 0)
                        		{
                        			launchFlags = atoi(value);
                        		}
                        		else if (strcmp(key, \"component\") == 0)
                        		{
                        			component = value;
                        		}
                        		else if (strcmp(key, \"categories\") == 0)
                        		{
                        			char* context2 = NULL;
                        			int categoryCount = 0;
                        			categories[categoryCount] = strtok_r(value, \",\", &context2);
                        			
                        			while (categories[categoryCount] != NULL)
                        			{
                        				categoryCount++;
                        				categories[categoryCount] = strtok_r(NULL, \",\", &context2);
                        			}
                        		}
                                
                                optind++;
                        	} 
                        	
                            writeString16(data, action);
                            writeString16(data, dataArg);
                            writeString16(data, type);
                       		data.writeInt32(launchFlags);
                            writeString16(data, component);
                        	
                            if (categoryCount > 0)
                            {
                                data.writeInt32(categoryCount);
                                for (int i = 0 ; i < categoryCount ; i++)
                                {
                                    writeString16(data, categories[i]);
                                }
                            }
                            else
                            {
                                data.writeInt32(0);
                            }                            
  
                            // for now just set the extra field to be null.
                       		data.writeInt32(-1);
                        } else {
                            aerr << \"service: unknown option \" << argv[optind] << endl;
                            wantsUsage = true;
                            result = 10;
                            break;
                        }
                    }
                    
                    service->transact(code, data, &reply);
                    aout << \"Result: \" << reply << endl;
                } else {
                    aerr << \"service: Service \" << argv[serviceArg]
                        << \" does not exist\" << endl;
                    result = 10;
                }
            } else {
                if (optind < argc) {
                    aerr << \"service: No service specified for call\" << endl;
                } else {
                    aerr << \"service: No code specified for call\" << endl;
                }
                wantsUsage = true;
                result = 10;
            }
        } else {
            aerr << \"service: Unknown command \" << argv[optind] << endl;
            wantsUsage = true;
            result = 10;
        }
    }
    
    if (wantsUsage) {
        aout << \"Usage: service [-h|-?]\\n\"
                \"       service list\\n\"
                \"       service check SERVICE\\n\"
                \"       service call SERVICE CODE [i32 N | i64 N | f N | d N | s16 STR ] ...\\n\"
                \"Options:\\n\"
                \"   i32: Write the 32-bit integer N into the send parcel.\\n\"
                \"   i64: Write the 64-bit integer N into the send parcel.\\n\"
                \"   f:   Write the 32-bit single-precision number N into the send parcel.\\n\"
                \"   d:   Write the 64-bit double-precision number N into the send parcel.\\n\"
                \"   s16: Write the UTF-16 string STR into the send parcel.\\n\";
//                \"   intent: Write and Intent int the send parcel. ARGS can be\\n\"
//                \"       action=STR data=STR type=STR launchFlags=INT component=STR categories=STR[,STR,...]\\n\";
        return result;
    }
    
    return result;
}
"
      associated_classes
      end
    end
  end
end
