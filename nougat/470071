format 76
"gl_yuvtex" // nougat_src::frameworks::opengl::tests::gl_yuvtex
  revision 1
  modified_by 55 "Jeff"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default class_drawing_mode default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/opengl/tests/gl_yuvtex/"
  cpp_src_dir "d:/Workspace/AndroidSourceCode/nougat_src/frameworks/native/opengl/tests/gl_yuvtex/"
  deploymentview 363831 "gl_yuvtex"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1919671 "main"
      stereotype "source"
      cpp_src "int main(int argc, char** argv) {
    EGLBoolean returnValue;
    EGLConfig myConfig = {0};

    EGLint context_attribs[] = { EGL_CONTEXT_CLIENT_VERSION, 1, EGL_NONE };
    EGLint s_configAttribs[] = {
            EGL_SURFACE_TYPE, EGL_WINDOW_BIT,
            EGL_RENDERABLE_TYPE, EGL_OPENGL_ES_BIT,
            EGL_NONE };
    EGLint majorVersion;
    EGLint minorVersion;
    EGLContext context;
    EGLSurface surface;
    EGLint w, h;

    EGLDisplay dpy;

    checkEglError(\"<init>\");
    dpy = eglGetDisplay(EGL_DEFAULT_DISPLAY);
    checkEglError(\"eglGetDisplay\");
    if (dpy == EGL_NO_DISPLAY) {
        printf(\"eglGetDisplay returned EGL_NO_DISPLAY.\\n\");
        return 0;
    }

    returnValue = eglInitialize(dpy, &majorVersion, &minorVersion);
    checkEglError(\"eglInitialize\", returnValue);
    fprintf(stderr, \"EGL version %d.%d\\n\", majorVersion, minorVersion);
    if (returnValue != EGL_TRUE) {
        printf(\"eglInitialize failed\\n\");
        return 0;
    }

    WindowSurface windowSurface;
    EGLNativeWindowType window = windowSurface.getSurface();
    returnValue = EGLUtils::selectConfigForNativeWindow(dpy, s_configAttribs, window, &myConfig);
    if (returnValue) {
        printf(\"EGLUtils::selectConfigForNativeWindow() returned %d\", returnValue);
        return 1;
    }

    checkEglError(\"EGLUtils::selectConfigForNativeWindow\");

    printf(\"Chose this configuration:\\n\");
    printEGLConfiguration(dpy, myConfig);

    surface = eglCreateWindowSurface(dpy, myConfig, window, NULL);
    checkEglError(\"eglCreateWindowSurface\");
    if (surface == EGL_NO_SURFACE) {
        printf(\"gelCreateWindowSurface failed.\\n\");
        return 1;
    }

    context = eglCreateContext(dpy, myConfig, EGL_NO_CONTEXT, context_attribs);
    checkEglError(\"eglCreateContext\");
    if (context == EGL_NO_CONTEXT) {
        printf(\"eglCreateContext failed\\n\");
        return 1;
    }
    returnValue = eglMakeCurrent(dpy, surface, surface, context);
    checkEglError(\"eglMakeCurrent\", returnValue);
    if (returnValue != EGL_TRUE) {
        return 1;
    }
    eglQuerySurface(dpy, surface, EGL_WIDTH, &w);
    checkEglError(\"eglQuerySurface\");
    eglQuerySurface(dpy, surface, EGL_HEIGHT, &h);
    checkEglError(\"eglQuerySurface\");
    GLint dim = w < h ? w : h;

    fprintf(stderr, \"Window dimensions: %d x %d\\n\", w, h);

    printGLString(\"Version\", GL_VERSION);
    printGLString(\"Vendor\", GL_VENDOR);
    printGLString(\"Renderer\", GL_RENDERER);
    printGLString(\"Extensions\", GL_EXTENSIONS);

    if(!setupYuvTexSurface(dpy, context)) {
        fprintf(stderr, \"Could not set up texture surface.\\n\");
        return 1;
    }

    if(!setupGraphics(w, h)) {
        fprintf(stderr, \"Could not set up graphics.\\n\");
        return 1;
    }

    for (;;) {
        static int dir = -1;

        renderFrame(w, h);
        eglSwapBuffers(dpy, surface);
        checkEglError(\"eglSwapBuffers\");

        if (w <= 10 || h <= 10)
        {
            dir = -dir;
        }

        if (w >= 1300 || h >= 900)
        {
            dir = -dir;
        }


        w += dir;
        h += dir;
    }

    return 0;
}
"
      associated_classes
      end
    end
  end
end
