class CameraConstrainedHighSpeedCaptureSessionImpl
!!!3111479.java!!!	CameraConstrainedHighSpeedCaptureSessionImpl(in id : int, inout outputs : List<Surface>, inout callback : CameraCaptureSession::StateCallback, inout stateHandler : Handler, inout deviceImpl : CameraDeviceImpl, inout deviceStateHandler : Handler, inout configureSuccess : boolean, inout characteristics : CameraCharacteristics)
        mCharacteristics = characteristics;
        CameraCaptureSession.StateCallback wrapperCallback = new WrapperCallback(callback);
        mSessionImpl = new CameraCaptureSessionImpl(id, /*input*/null, outputs, wrapperCallback,
                stateHandler, deviceImpl, deviceStateHandler, configureSuccess);
!!!3111607.java!!!	createHighSpeedRequestList(inout request : CaptureRequest) : CaptureRequest
        if (request == null) {
            throw new IllegalArgumentException("Input capture request must not be null");
        }
        Collection<Surface> outputSurfaces = request.getTargets();
        Range<Integer> fpsRange = request.get(CaptureRequest.CONTROL_AE_TARGET_FPS_RANGE);

        StreamConfigurationMap config =
                mCharacteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
        SurfaceUtils.checkConstrainedHighSpeedSurfaces(outputSurfaces, fpsRange, config);

        // Request list size: to limit the preview to 30fps, need use maxFps/30; to maximize
        // the preview frame rate, should use maxBatch size for that high speed stream
        // configuration. We choose the former for now.
        int requestListSize = fpsRange.getUpper() / 30;
        List<CaptureRequest> requestList = new ArrayList<CaptureRequest>();

        // Prepare the Request builders: need carry over the request controls.
        // First, create a request builder that will only include preview or recording target.
        CameraMetadataNative requestMetadata = new CameraMetadataNative(request.getNativeCopy());
        // Note that after this step, the requestMetadata is mutated (swapped) and can not be used
        // for next request builder creation.
        CaptureRequest.Builder singleTargetRequestBuilder = new CaptureRequest.Builder(
                requestMetadata, /*reprocess*/false, CameraCaptureSession.SESSION_ID_NONE);

        // Overwrite the capture intent to make sure a good value is set.
        Iterator<Surface> iterator = outputSurfaces.iterator();
        Surface firstSurface = iterator.next();
        Surface secondSurface = null;
        if (outputSurfaces.size() == 1 && SurfaceUtils.isSurfaceForHwVideoEncoder(firstSurface)) {
            singleTargetRequestBuilder.set(CaptureRequest.CONTROL_CAPTURE_INTENT,
                    CaptureRequest.CONTROL_CAPTURE_INTENT_PREVIEW);
        } else {
            // Video only, or preview + video
            singleTargetRequestBuilder.set(CaptureRequest.CONTROL_CAPTURE_INTENT,
                    CaptureRequest.CONTROL_CAPTURE_INTENT_VIDEO_RECORD);
        }
        singleTargetRequestBuilder.setPartOfCHSRequestList(/*partOfCHSList*/true);

        // Second, Create a request builder that will include both preview and recording targets.
        CaptureRequest.Builder doubleTargetRequestBuilder = null;
        if (outputSurfaces.size() == 2) {
            // Have to create a new copy, the original one was mutated after a new
            // CaptureRequest.Builder creation.
            requestMetadata = new CameraMetadataNative(request.getNativeCopy());
            doubleTargetRequestBuilder = new CaptureRequest.Builder(
                    requestMetadata, /*reprocess*/false, CameraCaptureSession.SESSION_ID_NONE);
            doubleTargetRequestBuilder.set(CaptureRequest.CONTROL_CAPTURE_INTENT,
                    CaptureRequest.CONTROL_CAPTURE_INTENT_VIDEO_RECORD);
            doubleTargetRequestBuilder.addTarget(firstSurface);
            secondSurface = iterator.next();
            doubleTargetRequestBuilder.addTarget(secondSurface);
            doubleTargetRequestBuilder.setPartOfCHSRequestList(/*partOfCHSList*/true);
            // Make sure singleTargetRequestBuilder contains only recording surface for
            // preview + recording case.
            Surface recordingSurface = firstSurface;
            if (!SurfaceUtils.isSurfaceForHwVideoEncoder(recordingSurface)) {
                recordingSurface = secondSurface;
            }
            singleTargetRequestBuilder.addTarget(recordingSurface);
        } else {
            // Single output case: either recording or preview.
            singleTargetRequestBuilder.addTarget(firstSurface);
        }

        // Generate the final request list.
        for (int i = 0; i < requestListSize; i++) {
            if (i == 0 && doubleTargetRequestBuilder != null) {
                // First request should be recording + preview request
                requestList.add(doubleTargetRequestBuilder.build());
            } else {
                requestList.add(singleTargetRequestBuilder.build());
            }
        }

        return Collections.unmodifiableList(requestList);
!!!3111735.java!!!	isConstrainedHighSpeedRequestList(inout requestList : List<CaptureRequest>) : boolean
        checkCollectionNotEmpty(requestList, "High speed request list");
        for (CaptureRequest request : requestList) {
            if (!request.isPartOfCRequestList()) {
                return false;
            }
        }
        return true;
!!!3111863.java!!!	getDevice() : CameraDevice
        return mSessionImpl.getDevice();
!!!3111991.java!!!	prepare(inout surface : Surface) : void
        mSessionImpl.prepare(surface);
!!!3112119.java!!!	prepare(in maxCount : int, inout surface : Surface) : void
        mSessionImpl.prepare(maxCount, surface);
!!!3112247.java!!!	tearDown(inout surface : Surface) : void
        mSessionImpl.tearDown(surface);
!!!3112375.java!!!	capture(inout request : CaptureRequest, inout listener : CameraCaptureSession::CaptureCallback, inout handler : Handler) : int
        throw new UnsupportedOperationException("Constrained high speed session doesn't support"
                + " this method");
!!!3112503.java!!!	captureBurst(inout requests : List<CaptureRequest>, inout listener : CameraCaptureSession::CaptureCallback, inout handler : Handler) : int
        if (!isConstrainedHighSpeedRequestList(requests)) {
            throw new IllegalArgumentException(
                "Only request lists created by createHighSpeedRequestList() can be submitted to " +
                "a constrained high speed capture session");
        }
        return mSessionImpl.captureBurst(requests, listener, handler);
!!!3112631.java!!!	setRepeatingRequest(inout request : CaptureRequest, inout listener : CameraCaptureSession::CaptureCallback, inout handler : Handler) : int
        throw new UnsupportedOperationException("Constrained high speed session doesn't support"
                + " this method");
!!!3112759.java!!!	setRepeatingBurst(inout requests : List<CaptureRequest>, inout listener : CameraCaptureSession::CaptureCallback, inout handler : Handler) : int
        if (!isConstrainedHighSpeedRequestList(requests)) {
            throw new IllegalArgumentException(
                "Only request lists created by createHighSpeedRequestList() can be submitted to " +
                "a constrained high speed capture session");
        }
        return mSessionImpl.setRepeatingBurst(requests, listener, handler);
!!!3112887.java!!!	stopRepeating() : void
        mSessionImpl.stopRepeating();
!!!3113015.java!!!	abortCaptures() : void
        mSessionImpl.abortCaptures();
!!!3113143.java!!!	getInputSurface() : Surface
        return null;
!!!3113271.java!!!	close() : void
        mSessionImpl.close();
!!!3113399.java!!!	isReprocessable() : boolean
        return false;
!!!3113527.java!!!	replaceSessionClose() : void
        mSessionImpl.replaceSessionClose();
!!!3113655.java!!!	getDeviceStateCallback() : CameraDeviceImpl::StateCallbackKK
        return mSessionImpl.getDeviceStateCallback();
!!!3113783.java!!!	isAborting() : boolean
        return mSessionImpl.isAborting();
