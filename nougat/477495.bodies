class ParameterUtils
!!!3157687.java!!!	convertSize(inout size : Camera::Size) : Size
        checkNotNull(size, "size must not be null");

        return new Size(size.width, size.height);
!!!3157815.java!!!	convertSizeList(inout sizeList : List<Camera.Size>) : Size
        checkNotNull(sizeList, "sizeList must not be null");

        List<Size> sizes = new ArrayList<>(sizeList.size());
        for (Camera.Size s : sizeList) {
            sizes.add(new Size(s.width, s.height));
        }
        return sizes;
!!!3157943.java!!!	convertSizeListToArray(inout sizeList : List<Camera.Size>) : Size
        checkNotNull(sizeList, "sizeList must not be null");

        Size[] array = new Size[sizeList.size()];
        int ctr = 0;
        for (Camera.Size s : sizeList) {
            array[ctr++] = new Size(s.width, s.height);
        }
        return array;
!!!3158071.java!!!	containsSize(inout sizeList : List<Camera.Size>, in width : int, in height : int) : boolean
        checkNotNull(sizeList, "sizeList must not be null");
        for (Camera.Size s : sizeList) {
            if (s.height == height && s.width == width) {
                return true;
            }
        }
        return false;
!!!3158199.java!!!	getLargestSupportedJpegSizeByArea(inout params : Camera::Parameters) : Size
        checkNotNull(params, "params must not be null");

        List<Size> supportedJpegSizes = convertSizeList(params.getSupportedPictureSizes());
        return SizeAreaComparator.findLargestByArea(supportedJpegSizes);
!!!3158327.java!!!	stringFromArea(inout area : Camera::Area) : String
        if (area == null) {
            return null;
        } else {
            StringBuilder sb = new StringBuilder();
            Rect r = area.rect;

            sb.setLength(0);
            sb.append("(["); sb.append(r.left); sb.append(',');
            sb.append(r.top); sb.append("]["); sb.append(r.right);
            sb.append(','); sb.append(r.bottom); sb.append(']');

            sb.append(',');
            sb.append(area.weight);
            sb.append(')');

            return sb.toString();
        }
!!!3158455.java!!!	stringFromAreaList(inout areaList : List<Camera.Area>) : String
        StringBuilder sb = new StringBuilder();

        if (areaList == null) {
            return null;
        }

        int i = 0;
        for (Camera.Area area : areaList) {
            if (area == null) {
                sb.append("null");
            } else {
                sb.append(stringFromArea(area));
            }

            if (i != areaList.size() - 1) {
                sb.append(", ");
            }

            i++;
        }

        return sb.toString();
!!!3158583.java!!!	getClosestAvailableZoomCrop(inout params : Camera::Parameters, inout activeArray : Rect, inout streamSize : Size, inout cropRegion : Rect, inout reportedCropRegion : Rect, inout previewCropRegion : Rect) : int
        checkNotNull(params, "params must not be null");
        checkNotNull(activeArray, "activeArray must not be null");
        checkNotNull(streamSize, "streamSize must not be null");
        checkNotNull(reportedCropRegion, "reportedCropRegion must not be null");
        checkNotNull(previewCropRegion, "previewCropRegion must not be null");

        Rect actualCrop = new Rect(cropRegion);

        /*
         * Shrink requested crop region to fit inside of the active array size
         */
        if (!actualCrop.intersect(activeArray)) {
            Log.w(TAG, "getClosestAvailableZoomCrop - Crop region out of range; " +
                    "setting to active array size");
            actualCrop.set(activeArray);
        }

        Rect previewCrop = getPreviewCropRectangleUnzoomed(activeArray, streamSize);

        // Make the user-requested crop region the same aspect ratio as the preview stream size
        Rect cropRegionAsPreview =
                shrinkToSameAspectRatioCentered(previewCrop, actualCrop);

        if (DEBUG) {
            Log.v(TAG, "getClosestAvailableZoomCrop - actualCrop = " + actualCrop);
            Log.v(TAG,
                    "getClosestAvailableZoomCrop - previewCrop = " + previewCrop);
            Log.v(TAG,
                    "getClosestAvailableZoomCrop - cropRegionAsPreview = " + cropRegionAsPreview);
        }

        /*
         * Iterate all available zoom rectangles and find the closest zoom index
         */
        Rect bestReportedCropRegion = null;
        Rect bestPreviewCropRegion = null;
        int bestZoomIndex = -1;

        List<Rect> availableReportedCropRegions =
                getAvailableZoomCropRectangles(params, activeArray);
        List<Rect> availablePreviewCropRegions =
                getAvailablePreviewZoomCropRectangles(params, activeArray, streamSize);

        if (DEBUG) {
            Log.v(TAG,
                    "getClosestAvailableZoomCrop - availableReportedCropRegions = " +
                            ListUtils.listToString(availableReportedCropRegions));
            Log.v(TAG,
                    "getClosestAvailableZoomCrop - availablePreviewCropRegions = " +
                            ListUtils.listToString(availablePreviewCropRegions));
        }

        if (availableReportedCropRegions.size() != availablePreviewCropRegions.size()) {
            throw new AssertionError("available reported/preview crop region size mismatch");
        }

        for (int i = 0; i < availableReportedCropRegions.size(); ++i) {
            Rect currentPreviewCropRegion = availablePreviewCropRegions.get(i);
            Rect currentReportedCropRegion = availableReportedCropRegions.get(i);

            boolean isBest;
            if (bestZoomIndex == -1) {
                isBest = true;
            } else if (currentPreviewCropRegion.width() >= cropRegionAsPreview.width() &&
                    currentPreviewCropRegion.height() >= cropRegionAsPreview.height()) {
                isBest = true;
            } else {
                isBest = false;
            }

            // Sizes are sorted largest-to-smallest, so once the available crop is too small,
            // we the rest are too small. Furthermore, this is the final best crop,
            // since its the largest crop that still fits the requested crop
            if (isBest) {
                bestPreviewCropRegion = currentPreviewCropRegion;
                bestReportedCropRegion = currentReportedCropRegion;
                bestZoomIndex = i;
            } else {
                break;
            }
        }

        if (bestZoomIndex == -1) {
            // Even in the worst case, we should always at least return 0 here
            throw new AssertionError("Should've found at least one valid zoom index");
        }

        // Write the rectangles in-place
        reportedCropRegion.set(bestReportedCropRegion);
        previewCropRegion.set(bestPreviewCropRegion);

        return bestZoomIndex;
!!!3158711.java!!!	getPreviewCropRectangleUnzoomed(inout activeArray : Rect, inout previewSize : Size) : Rect
        if (previewSize.getWidth() > activeArray.width()) {
            throw new IllegalArgumentException("previewSize must not be wider than activeArray");
        } else if (previewSize.getHeight() > activeArray.height()) {
            throw new IllegalArgumentException("previewSize must not be taller than activeArray");
        }

        float aspectRatioArray = activeArray.width() * 1.0f / activeArray.height();
        float aspectRatioPreview = previewSize.getWidth() * 1.0f / previewSize.getHeight();

        float cropH, cropW;
        if (Math.abs(aspectRatioPreview - aspectRatioArray) < ASPECT_RATIO_TOLERANCE) {
            cropH = activeArray.height();
            cropW = activeArray.width();
        } else if (aspectRatioPreview < aspectRatioArray) {
            // The new width must be smaller than the height, so scale the width by AR
            cropH = activeArray.height();
            cropW = cropH * aspectRatioPreview;
        } else {
            // The new height must be smaller (or equal) than the width, so scale the height by AR
            cropW = activeArray.width();
            cropH = cropW / aspectRatioPreview;
        }

        Matrix translateMatrix = new Matrix();
        RectF cropRect = new RectF(/*left*/0, /*top*/0, cropW, cropH);

        // Now center the crop rectangle so its center is in the center of the active array
        translateMatrix.setTranslate(activeArray.exactCenterX(), activeArray.exactCenterY());
        translateMatrix.postTranslate(-cropRect.centerX(), -cropRect.centerY());

        translateMatrix.mapRect(/*inout*/cropRect);

        // Round the rect corners towards the nearest integer values
        return ParamsUtils.createRect(cropRect);
!!!3158839.java!!!	shrinkToSameAspectRatioCentered(inout reference : Rect, inout shrinkTarget : Rect) : Rect
        float aspectRatioReference = reference.width() * 1.0f / reference.height();
        float aspectRatioShrinkTarget = shrinkTarget.width() * 1.0f / shrinkTarget.height();

        float cropH, cropW;
        if (aspectRatioShrinkTarget < aspectRatioReference) {
            // The new width must be smaller than the height, so scale the width by AR
            cropH = reference.height();
            cropW = cropH * aspectRatioShrinkTarget;
        } else {
            // The new height must be smaller (or equal) than the width, so scale the height by AR
            cropW = reference.width();
            cropH = cropW / aspectRatioShrinkTarget;
        }

        Matrix translateMatrix = new Matrix();
        RectF shrunkRect = new RectF(shrinkTarget);

        // Scale the rectangle down, but keep its center in the same place as before
        translateMatrix.setScale(cropW / reference.width(), cropH / reference.height(),
                shrinkTarget.exactCenterX(), shrinkTarget.exactCenterY());

        translateMatrix.mapRect(/*inout*/shrunkRect);

        return ParamsUtils.createRect(shrunkRect);
!!!3158967.java!!!	getAvailableZoomCropRectangles(inout params : Camera::Parameters, inout activeArray : Rect) : Rect
        checkNotNull(params, "params must not be null");
        checkNotNull(activeArray, "activeArray must not be null");

        return getAvailableCropRectangles(params, activeArray, ParamsUtils.createSize(activeArray));
!!!3159095.java!!!	getAvailablePreviewZoomCropRectangles(inout params : Camera::Parameters, inout activeArray : Rect, inout previewSize : Size) : Rect
        checkNotNull(params, "params must not be null");
        checkNotNull(activeArray, "activeArray must not be null");
        checkNotNull(previewSize, "previewSize must not be null");

        return getAvailableCropRectangles(params, activeArray, previewSize);
!!!3159223.java!!!	getAvailableCropRectangles(inout params : Camera::Parameters, inout activeArray : Rect, inout streamSize : Size) : Rect
        checkNotNull(params, "params must not be null");
        checkNotNull(activeArray, "activeArray must not be null");
        checkNotNull(streamSize, "streamSize must not be null");

        // TODO: change all uses of Rect activeArray to Size activeArray,
        // since we want the crop to be active-array relative, not pixel-array relative

        Rect unzoomedStreamCrop = getPreviewCropRectangleUnzoomed(activeArray, streamSize);

        if (!params.isZoomSupported()) {
            // Trivial case: No zoom -> only support the full size as the crop region
            return new ArrayList<>(Arrays.asList(unzoomedStreamCrop));
        }

        List<Rect> zoomCropRectangles = new ArrayList<>(params.getMaxZoom() + 1);
        Matrix scaleMatrix = new Matrix();
        RectF scaledRect = new RectF();

        for (int zoom : params.getZoomRatios()) {
            float shrinkRatio = ZOOM_RATIO_MULTIPLIER * 1.0f / zoom; // normalize to 1.0 and smaller

            // set scaledRect to unzoomedStreamCrop
            ParamsUtils.convertRectF(unzoomedStreamCrop, /*out*/scaledRect);

            scaleMatrix.setScale(
                    shrinkRatio, shrinkRatio,
                    activeArray.exactCenterX(),
                    activeArray.exactCenterY());

            scaleMatrix.mapRect(scaledRect);

            Rect intRect = ParamsUtils.createRect(scaledRect);

            // Round the rect corners towards the nearest integer values
            zoomCropRectangles.add(intRect);
        }

        return zoomCropRectangles;
!!!3159351.java!!!	getMaxZoomRatio(inout params : Camera::Parameters) : float
        if (!params.isZoomSupported()) {
            return 1.0f; // no zoom
        }

        List<Integer> zoomRatios = params.getZoomRatios(); // sorted smallest->largest
        int zoom = zoomRatios.get(zoomRatios.size() - 1); // largest zoom ratio
        float zoomRatio = zoom * 1.0f / ZOOM_RATIO_MULTIPLIER; // normalize to 1.0 and smaller

        return zoomRatio;
!!!3159479.java!!!	getZoomRatio(inout activeArraySize : Size, inout cropSize : Size) : SizeF
        checkNotNull(activeArraySize, "activeArraySize must not be null");
        checkNotNull(cropSize, "cropSize must not be null");
        checkArgumentPositive(cropSize.getWidth(), "cropSize.width must be positive");
        checkArgumentPositive(cropSize.getHeight(), "cropSize.height must be positive");

        float zoomRatioWidth = activeArraySize.getWidth() * 1.0f / cropSize.getWidth();
        float zoomRatioHeight = activeArraySize.getHeight() * 1.0f / cropSize.getHeight();

        return new SizeF(zoomRatioWidth, zoomRatioHeight);
!!!3159607.java!!!	convertScalerCropRegion(inout activeArraySize : Rect, inout cropRegion : Rect, inout previewSize : Size, inout params : Camera::Parameters) : ParameterUtils::ZoomData
        Rect activeArraySizeOnly = new Rect(
                /*left*/0, /*top*/0,
                activeArraySize.width(), activeArraySize.height());

        Rect userCropRegion = cropRegion;

        if (userCropRegion == null) {
            userCropRegion = activeArraySizeOnly;
        }

        if (DEBUG) {
            Log.v(TAG, "convertScalerCropRegion - user crop region was " + userCropRegion);
        }

        final Rect reportedCropRegion = new Rect();
        final Rect previewCropRegion = new Rect();
        final int zoomIdx = ParameterUtils.getClosestAvailableZoomCrop(params, activeArraySizeOnly,
                previewSize, userCropRegion,
                /*out*/reportedCropRegion, /*out*/previewCropRegion);

        if (DEBUG) {
            Log.v(TAG, "convertScalerCropRegion - zoom calculated to: " +
                    "zoomIndex = " + zoomIdx +
                    ", reported crop region = " + reportedCropRegion +
                    ", preview crop region = " + previewCropRegion);
        }

        return new ZoomData(zoomIdx, previewCropRegion, reportedCropRegion);
!!!3159735.java!!!	convertMeteringRectangleToLegacy(inout activeArray : Rect, inout meteringRect : MeteringRectangle, inout zoomData : ParameterUtils::ZoomData) : ParameterUtils::MeteringData
        Rect previewCrop = zoomData.previewCrop;

        float scaleW = (NORMALIZED_RECTANGLE_MAX - NORMALIZED_RECTANGLE_MIN) * 1.0f /
                previewCrop.width();
        float scaleH = (NORMALIZED_RECTANGLE_MAX - NORMALIZED_RECTANGLE_MIN) * 1.0f /
                previewCrop.height();

        Matrix transform = new Matrix();
        // Move the preview crop so that top,left is at (0,0), otherwise after scaling
        // the corner bounds will be outside of [-1000, 1000]
        transform.setTranslate(-previewCrop.left, -previewCrop.top);
        // Scale into [0, 2000] range about the center of the preview
        transform.postScale(scaleW, scaleH);
        // Move so that top left of a typical rect is at [-1000, -1000]
        transform.postTranslate(/*dx*/NORMALIZED_RECTANGLE_MIN, /*dy*/NORMALIZED_RECTANGLE_MIN);

        /*
         * Calculate the preview metering region (effective), and the camera1 api
         * normalized metering region.
         */
        Rect normalizedRegionUnbounded = ParamsUtils.mapRect(transform, meteringRect.getRect());

        /*
         * Try to intersect normalized area with [-1000, 1000] rectangle; otherwise
         * it's completely out of range
         */
        Rect normalizedIntersected = new Rect(normalizedRegionUnbounded);

        Camera.Area meteringArea;
        if (!normalizedIntersected.intersect(NORMALIZED_RECTANGLE_DEFAULT)) {
            Log.w(TAG,
                    "convertMeteringRectangleToLegacy - metering rectangle too small, " +
                    "no metering will be done");
            normalizedIntersected.set(RECTANGLE_EMPTY);
            meteringArea = new Camera.Area(RECTANGLE_EMPTY,
                    MeteringRectangle.METERING_WEIGHT_DONT_CARE);
        } else {
            meteringArea = new Camera.Area(normalizedIntersected,
                    meteringRect.getMeteringWeight());
        }

        /*
         * Calculate effective preview metering region
         */
        Rect previewMetering = meteringRect.getRect();
        if (!previewMetering.intersect(previewCrop)) {
            previewMetering.set(RECTANGLE_EMPTY);
        }

        /*
         * Calculate effective reported metering region
         * - Transform the calculated metering area back into active array space
         * - Clip it to be a subset of the reported crop region
         */
        Rect reportedMetering;
        {
            Camera.Area normalizedAreaUnbounded = new Camera.Area(
                    normalizedRegionUnbounded, meteringRect.getMeteringWeight());
            WeightedRectangle reportedMeteringRect = convertCameraAreaToActiveArrayRectangle(
                    activeArray, zoomData, normalizedAreaUnbounded, /*usePreviewCrop*/false);
            reportedMetering = reportedMeteringRect.rect;
        }

        if (DEBUG) {
            Log.v(TAG, String.format(
                    "convertMeteringRectangleToLegacy - activeArray = %s, meteringRect = %s, " +
                    "previewCrop = %s, meteringArea = %s, previewMetering = %s, " +
                    "reportedMetering = %s, normalizedRegionUnbounded = %s",
                    activeArray, meteringRect,
                    previewCrop, stringFromArea(meteringArea), previewMetering,
                    reportedMetering, normalizedRegionUnbounded));
        }

        return new MeteringData(meteringArea, previewMetering, reportedMetering);
!!!3159863.java!!!	convertCameraAreaToActiveArrayRectangle(inout activeArray : Rect, inout zoomData : ParameterUtils::ZoomData, inout area : Camera::Area) : ParameterUtils::WeightedRectangle
        return convertCameraAreaToActiveArrayRectangle(activeArray, zoomData, area,
                /*usePreviewCrop*/true);
!!!3159991.java!!!	convertFaceFromLegacy(inout face : Camera::Face, inout activeArray : Rect, inout zoomData : ParameterUtils::ZoomData) : Face
        checkNotNull(face, "face must not be null");

        Face api2Face;

        Camera.Area fakeArea = new Camera.Area(face.rect, /*weight*/1);

        WeightedRectangle faceRect =
                convertCameraAreaToActiveArrayRectangle(activeArray, zoomData, fakeArea);

        Point leftEye = face.leftEye, rightEye = face.rightEye, mouth = face.mouth;
        if (leftEye != null && rightEye != null && mouth != null && leftEye.x != -2000 &&
                leftEye.y != -2000 && rightEye.x != -2000 && rightEye.y != -2000 &&
                mouth.x != -2000 && mouth.y != -2000) {
            leftEye = convertCameraPointToActiveArrayPoint(activeArray, zoomData,
                    leftEye, /*usePreviewCrop*/true);
            rightEye = convertCameraPointToActiveArrayPoint(activeArray, zoomData,
                    leftEye, /*usePreviewCrop*/true);
            mouth = convertCameraPointToActiveArrayPoint(activeArray, zoomData,
                    leftEye, /*usePreviewCrop*/true);

            api2Face = faceRect.toFace(face.id, leftEye, rightEye, mouth);
        } else {
            api2Face = faceRect.toFace();
        }

        return api2Face;
!!!3160119.java!!!	convertCameraPointToActiveArrayPoint(inout activeArray : Rect, inout zoomData : ParameterUtils::ZoomData, inout point : Point, inout usePreviewCrop : boolean) : Point
        Rect pointedRect = new Rect(point.x, point.y, point.x, point.y);
        Camera.Area pointedArea = new Area(pointedRect, /*weight*/1);

        WeightedRectangle adjustedRect =
                convertCameraAreaToActiveArrayRectangle(activeArray,
                        zoomData, pointedArea, usePreviewCrop);

        Point transformedPoint = new Point(adjustedRect.rect.left, adjustedRect.rect.top);

        return transformedPoint;
!!!3160247.java!!!	convertCameraAreaToActiveArrayRectangle(inout activeArray : Rect, inout zoomData : ParameterUtils::ZoomData, inout area : Camera::Area, inout usePreviewCrop : boolean) : ParameterUtils::WeightedRectangle
        Rect previewCrop = zoomData.previewCrop;
        Rect reportedCrop = zoomData.reportedCrop;

        float scaleW = previewCrop.width() * 1.0f /
                (NORMALIZED_RECTANGLE_MAX - NORMALIZED_RECTANGLE_MIN);
        float scaleH = previewCrop.height() * 1.0f /
                (NORMALIZED_RECTANGLE_MAX - NORMALIZED_RECTANGLE_MIN);

        /*
         * Calculate the reported metering region from the non-intersected normalized region
         * by scaling and translating back into active array-relative coordinates.
         */
        Matrix transform = new Matrix();

        // Move top left from (-1000, -1000) to (0, 0)
        transform.setTranslate(/*dx*/NORMALIZED_RECTANGLE_MAX, /*dy*/NORMALIZED_RECTANGLE_MAX);

        // Scale from [0, 2000] back into the preview rectangle
        transform.postScale(scaleW, scaleH);

        // Move the rect so that the [-1000,-1000] point ends up at the preview [left, top]
        transform.postTranslate(previewCrop.left, previewCrop.top);

        Rect cropToIntersectAgainst = usePreviewCrop ? previewCrop : reportedCrop;

        // Now apply the transformation backwards to get the reported metering region
        Rect reportedMetering = ParamsUtils.mapRect(transform, area.rect);
        // Intersect it with the crop region, to avoid reporting out-of-bounds
        // metering regions
        if (!reportedMetering.intersect(cropToIntersectAgainst)) {
            reportedMetering.set(RECTANGLE_EMPTY);
        }

        int weight = area.weight;
        if (weight < MeteringRectangle.METERING_WEIGHT_MIN) {
            Log.w(TAG,
                    "convertCameraAreaToMeteringRectangle - rectangle "
                            + stringFromArea(area) + " has too small weight, clip to 0");
            weight = 0;
        }

        return new WeightedRectangle(reportedMetering, area.weight);
!!!3160375.java!!!	ParameterUtils()
        throw new AssertionError();
