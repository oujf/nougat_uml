class MarshalerParcelable
!!!3185591.java!!!	MarshalerParcelable(inout typeReference : TypeReference, in nativeType : int)
            super(MarshalQueryableParcelable.this, typeReference, nativeType);

            mClass = (Class<T>)typeReference.getRawType();
            Field creatorField;
            try {
                creatorField = mClass.getDeclaredField(FIELD_CREATOR);
            } catch (NoSuchFieldException e) {
                // Impossible. All Parcelable implementations must have a 'CREATOR' static field
                throw new AssertionError(e);
            }

            try {
                mCreator = (Parcelable.Creator<T>)creatorField.get(null);
            } catch (IllegalAccessException e) {
                // Impossible: All 'CREATOR' static fields must be public
                throw new AssertionError(e);
            } catch (IllegalArgumentException e) {
                // Impossible: This is a static field, so null must be ok
                throw new AssertionError(e);
            }
!!!3185719.java!!!	marshal(inout value : T, inout buffer : ByteBuffer) : void
            if (DEBUG) {
                Log.v(TAG, "marshal " + value);
            }

            Parcel parcel = Parcel.obtain();
            byte[] parcelContents;

            try {
                value.writeToParcel(parcel, /*flags*/0);

                if (parcel.hasFileDescriptors()) {
                    throw new UnsupportedOperationException(
                            "Parcelable " + value + " must not have file descriptors");
                }

                parcelContents = parcel.marshall();
            }
            finally {
                parcel.recycle();
            }

            if (parcelContents.length == 0) {
                throw new AssertionError("No data marshaled for " + value);
            }

            buffer.put(parcelContents);
!!!3185847.java!!!	unmarshal(inout buffer : ByteBuffer) : T
            if (DEBUG) {
                Log.v(TAG, "unmarshal, buffer remaining " + buffer.remaining());
            }

            /*
             * Quadratically slow when marshaling an array of parcelables.
             *
             * Read out the entire byte buffer as an array, then copy it into the parcel.
             *
             * Once we unparcel the entire object, advance the byte buffer by only how many
             * bytes the parcel actually used up.
             *
             * Future: If we ever do need to use parcelable arrays, we can do this a little smarter
             * by reading out a chunk like 4,8,16,24 each time, but not sure how to detect
             * parcels being too short in this case.
             *
             * Future: Alternatively use Parcel#obtain(long) directly into the native
             * pointer of a ByteBuffer, which would not copy if the ByteBuffer was direct.
             */
            buffer.mark();

            Parcel parcel = Parcel.obtain();
            try {
                int maxLength = buffer.remaining();

                byte[] remaining = new byte[maxLength];
                buffer.get(remaining);

                parcel.unmarshall(remaining, /*offset*/0, maxLength);
                parcel.setDataPosition(/*pos*/0);

                T value = mCreator.createFromParcel(parcel);
                int actualLength = parcel.dataPosition();

                if (actualLength == 0) {
                    throw new AssertionError("No data marshaled for " + value);
                }

                // set the position past the bytes the parcelable actually used
                buffer.reset();
                buffer.position(buffer.position() + actualLength);

                if (DEBUG) {
                    Log.v(TAG, "unmarshal, parcel length was " + actualLength);
                    Log.v(TAG, "unmarshal, value is " + value);
                }

                return mClass.cast(value);
            } finally {
                parcel.recycle();
            }
!!!3185975.java!!!	getNativeSize() : int
            return NATIVE_SIZE_DYNAMIC;
!!!3186103.java!!!	calculateMarshalSize(inout value : T) : int
            Parcel parcel = Parcel.obtain();
            try {
                value.writeToParcel(parcel, /*flags*/0);
                int length = parcel.marshall().length;

                if (DEBUG) {
                    Log.v(TAG, "calculateMarshalSize, length when parceling "
                            + value + " is " + length);
                }

                return length;
            } finally {
                parcel.recycle();
            }
