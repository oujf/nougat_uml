class MarshalerRange
!!!3188279.java!!!	MarshalerRange(inout typeReference : TypeReference, in nativeType : int)
            super(MarshalQueryableRange.this, typeReference, nativeType);

            mClass = typeReference.getRawType();

            /*
             * Lookup the actual type argument, e.g. Range<Integer> --> Integer
             * and then get the marshaler for that managed type.
             */
            ParameterizedType paramType;
            try {
                paramType = (ParameterizedType) typeReference.getType();
            } catch (ClassCastException e) {
                throw new AssertionError("Raw use of Range is not supported", e);
            }
            Type actualTypeArgument = paramType.getActualTypeArguments()[0];

            TypeReference<?> actualTypeArgToken =
                    TypeReference.createSpecializedTypeReference(actualTypeArgument);

            mNestedTypeMarshaler = (Marshaler<T>)MarshalRegistry.getMarshaler(
                    actualTypeArgToken, mNativeType);
            try {
                mConstructor = (Constructor<Range<T>>)mClass.getConstructor(
                        Comparable.class, Comparable.class);
            } catch (NoSuchMethodException e) {
                throw new AssertionError(e);
            }
!!!3188407.java!!!	marshal(inout value : Range, inout buffer : ByteBuffer) : void
            mNestedTypeMarshaler.marshal(value.getLower(), buffer);
            mNestedTypeMarshaler.marshal(value.getUpper(), buffer);
!!!3188535.java!!!	unmarshal(inout buffer : ByteBuffer) : Range
            T lower = mNestedTypeMarshaler.unmarshal(buffer);
            T upper = mNestedTypeMarshaler.unmarshal(buffer);

            try {
                return mConstructor.newInstance(lower, upper);
            } catch (InstantiationException e) {
                throw new AssertionError(e);
            } catch (IllegalAccessException e) {
                throw new AssertionError(e);
            } catch (IllegalArgumentException e) {
                throw new AssertionError(e);
            } catch (InvocationTargetException e) {
                throw new AssertionError(e);
            }
!!!3188663.java!!!	getNativeSize() : int
            int nestedSize = mNestedTypeMarshaler.getNativeSize();

            if (nestedSize != NATIVE_SIZE_DYNAMIC) {
                return nestedSize * RANGE_COUNT;
            } else {
                return NATIVE_SIZE_DYNAMIC;
            }
!!!3188791.java!!!	calculateMarshalSize(inout value : Range) : int
            int nativeSize = getNativeSize();

            if (nativeSize != NATIVE_SIZE_DYNAMIC) {
                return nativeSize;
            } else {
                int lowerSize = mNestedTypeMarshaler.calculateMarshalSize(value.getLower());
                int upperSize = mNestedTypeMarshaler.calculateMarshalSize(value.getUpper());

                return lowerSize + upperSize;
            }
