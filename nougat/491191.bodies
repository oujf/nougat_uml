class HdmiRecordSources
!!!3263031.java!!!	ofOwnSource() : HdmiRecordSources::OwnSource
        return new OwnSource();
!!!3265079.java!!!	ofDigitalChannelId(in broadcastSystem : int, inout data : HdmiRecordSources::DigitalChannelData) : HdmiRecordSources::DigitalServiceSource
        if (data == null) {
            throw new IllegalArgumentException("data should not be null.");
        }
        switch (broadcastSystem) {
            case DIGITAL_BROADCAST_TYPE_ARIB:
            case DIGITAL_BROADCAST_TYPE_ATSC:
            case DIGITAL_BROADCAST_TYPE_DVB:
            case DIGITAL_BROADCAST_TYPE_ARIB_BS:
            case DIGITAL_BROADCAST_TYPE_ARIB_CS:
            case DIGITAL_BROADCAST_TYPE_ARIB_T:
            case DIGITAL_BROADCAST_TYPE_ATSC_CABLE:
            case DIGITAL_BROADCAST_TYPE_ATSC_SATELLITE:
            case DIGITAL_BROADCAST_TYPE_ATSC_TERRESTRIAL:
            case DIGITAL_BROADCAST_TYPE_DVB_C:
            case DIGITAL_BROADCAST_TYPE_DVB_S:
            case DIGITAL_BROADCAST_TYPE_DVB_S2:
            case DIGITAL_BROADCAST_TYPE_DVB_T:
                return new DigitalServiceSource(
                        DigitalServiceSource.DIGITAL_SERVICE_IDENTIFIED_BY_CHANNEL,
                        broadcastSystem,
                        data);
            default:
                Log.w(TAG, "Invalid broadcast type:" + broadcastSystem);
                throw new IllegalArgumentException(
                        "Invalid broadcast system value:" + broadcastSystem);
        }
!!!3265207.java!!!	ofArib(in aribType : int, inout data : HdmiRecordSources::AribData) : HdmiRecordSources::DigitalServiceSource
        if (data == null) {
            throw new IllegalArgumentException("data should not be null.");
        }
        switch (aribType) {
            case DIGITAL_BROADCAST_TYPE_ARIB:
            case DIGITAL_BROADCAST_TYPE_ARIB_BS:
            case DIGITAL_BROADCAST_TYPE_ARIB_CS:
            case DIGITAL_BROADCAST_TYPE_ARIB_T:
                return new DigitalServiceSource(
                        DigitalServiceSource.DIGITAL_SERVICE_IDENTIFIED_BY_DIGITAL_ID,
                        aribType, data);
            default:
                Log.w(TAG, "Invalid ARIB type:" + aribType);
                throw new IllegalArgumentException("type should not be null.");
        }
!!!3265335.java!!!	ofAtsc(in atscType : int, inout data : HdmiRecordSources::AtscData) : HdmiRecordSources::DigitalServiceSource
        if (data == null) {
            throw new IllegalArgumentException("data should not be null.");
        }
        switch (atscType) {
            case DIGITAL_BROADCAST_TYPE_ATSC:
            case DIGITAL_BROADCAST_TYPE_ATSC_CABLE:
            case DIGITAL_BROADCAST_TYPE_ATSC_SATELLITE:
            case DIGITAL_BROADCAST_TYPE_ATSC_TERRESTRIAL:
                return new DigitalServiceSource(
                        DigitalServiceSource.DIGITAL_SERVICE_IDENTIFIED_BY_DIGITAL_ID,
                        atscType, data);
            default:
                Log.w(TAG, "Invalid ATSC type:" + atscType);
                throw new IllegalArgumentException("Invalid ATSC type:" + atscType);
        }
!!!3265463.java!!!	ofDvb(in dvbType : int, inout data : HdmiRecordSources::DvbData) : HdmiRecordSources::DigitalServiceSource
        if (data == null) {
            throw new IllegalArgumentException("data should not be null.");
        }
        switch (dvbType) {
            case DIGITAL_BROADCAST_TYPE_DVB:
            case DIGITAL_BROADCAST_TYPE_DVB_C:
            case DIGITAL_BROADCAST_TYPE_DVB_S:
            case DIGITAL_BROADCAST_TYPE_DVB_S2:
            case DIGITAL_BROADCAST_TYPE_DVB_T:
                return new DigitalServiceSource(
                        DigitalServiceSource.DIGITAL_SERVICE_IDENTIFIED_BY_DIGITAL_ID,
                        dvbType, data);
            default:
                Log.w(TAG, "Invalid DVB type:" + dvbType);
                throw new IllegalArgumentException("Invalid DVB type:" + dvbType);
        }
!!!3265847.java!!!	ofAnalogue(in broadcastType : int, in frequency : int, in broadcastSystem : int) : HdmiRecordSources::AnalogueServiceSource
        if (broadcastType < ANALOGUE_BROADCAST_TYPE_CABLE
                || broadcastType > ANALOGUE_BROADCAST_TYPE_TERRESTRIAL) {
            Log.w(TAG, "Invalid Broadcast type:" + broadcastType);
            throw new IllegalArgumentException("Invalid Broadcast type:" + broadcastType);
        }
        if (frequency < 0 || frequency > 0xFFFF) {
            Log.w(TAG, "Invalid frequency value[0x0000-0xFFFF]:" + frequency);
            throw new IllegalArgumentException(
                    "Invalid frequency value[0x0000-0xFFFF]:" + frequency);
        }
        if (broadcastSystem < BROADCAST_SYSTEM_PAL_BG
                || broadcastSystem > BROADCAST_SYSTEM_PAL_OTHER_SYSTEM) {

            Log.w(TAG, "Invalid Broadcast system:" + broadcastSystem);
            throw new IllegalArgumentException(
                    "Invalid Broadcast system:" + broadcastSystem);
        }

        return new AnalogueServiceSource(broadcastType, frequency, broadcastSystem);
!!!3266231.java!!!	ofExternalPlug(in plugNumber : int) : HdmiRecordSources::ExternalPlugData
        if (plugNumber < 1 || plugNumber > 255) {
            Log.w(TAG, "Invalid plug number[1-255]" + plugNumber);
            throw new IllegalArgumentException("Invalid plug number[1-255]" + plugNumber);
        }
        return new ExternalPlugData(plugNumber);
!!!3266615.java!!!	ofExternalPhysicalAddress(in physicalAddress : int) : HdmiRecordSources::ExternalPhysicalAddress
        if ((physicalAddress & ~0xFFFF) != 0) {
            Log.w(TAG, "Invalid physical address:" + physicalAddress);
            throw new IllegalArgumentException("Invalid physical address:" + physicalAddress);
        }

        return new ExternalPhysicalAddress(physicalAddress);
!!!3266999.java!!!	threeFieldsToSixBytes(in first : int, in second : int, in third : int, inout data : byte, in index : int) : int
        shortToByteArray((short) first, data, index);
        shortToByteArray((short) second, data, index + 2);
        shortToByteArray((short) third, data, index + 4);
        return 6;
!!!3267127.java!!!	shortToByteArray(in value : short, inout byteArray : byte, in index : int) : int
        byteArray[index] = (byte) ((value >>> 8) & 0xFF);
        byteArray[index + 1] = (byte) (value & 0xFF);
        return 2;
!!!3267255.java!!!	checkRecordSource(inout recordSource : byte) : boolean
        if (recordSource == null || recordSource.length == 0) return false;

        int recordSourceType = recordSource[0];
        int extraDataSize = recordSource.length - 1;
        switch (recordSourceType) {
            case RECORD_SOURCE_TYPE_OWN_SOURCE:
                return extraDataSize == OwnSource.EXTRA_DATA_SIZE;
            case RECORD_SOURCE_TYPE_DIGITAL_SERVICE:
                return extraDataSize == DigitalServiceSource.EXTRA_DATA_SIZE;
            case RECORD_SOURCE_TYPE_ANALOGUE_SERVICE:
                return extraDataSize == AnalogueServiceSource.EXTRA_DATA_SIZE;
            case RECORD_SOURCE_TYPE_EXTERNAL_PLUG:
                return extraDataSize == ExternalPlugData.EXTRA_DATA_SIZE;
            case RECORD_SOURCE_TYPE_EXTERNAL_PHYSICAL_ADDRESS:
                return extraDataSize == ExternalPhysicalAddress.EXTRA_DATA_SIZE;
            default:
                return false;
        }
