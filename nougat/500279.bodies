class PowerManager
!!!3844791.java!!!	PowerManager(inout context : Context, inout service : IPowerManager, inout handler : Handler)
        mContext = context;
        mService = service;
        mHandler = handler;
!!!3844919.java!!!	getMinimumScreenBrightnessSetting() : int
        return mContext.getResources().getInteger(
                com.android.internal.R.integer.config_screenBrightnessSettingMinimum);
!!!3845047.java!!!	getMaximumScreenBrightnessSetting() : int
        return mContext.getResources().getInteger(
                com.android.internal.R.integer.config_screenBrightnessSettingMaximum);
!!!3845175.java!!!	getDefaultScreenBrightnessSetting() : int
        return mContext.getResources().getInteger(
                com.android.internal.R.integer.config_screenBrightnessSettingDefault);
!!!3845303.java!!!	useTwilightAdjustmentFeature() : boolean
        return SystemProperties.getBoolean("persist.power.usetwilightadj", false);
!!!3845431.java!!!	newWakeLock(in levelAndFlags : int, inout tag : String) : PowerManager::WakeLock
        validateWakeLockParameters(levelAndFlags, tag);
        return new WakeLock(levelAndFlags, tag, mContext.getOpPackageName());
!!!3845559.java!!!	validateWakeLockParameters(in levelAndFlags : int, inout tag : String) : void
        switch (levelAndFlags & WAKE_LOCK_LEVEL_MASK) {
            case PARTIAL_WAKE_LOCK:
            case SCREEN_DIM_WAKE_LOCK:
            case SCREEN_BRIGHT_WAKE_LOCK:
            case FULL_WAKE_LOCK:
            case PROXIMITY_SCREEN_OFF_WAKE_LOCK:
            case DOZE_WAKE_LOCK:
            case DRAW_WAKE_LOCK:
                break;
            default:
                throw new IllegalArgumentException("Must specify a valid wake lock level.");
        }
        if (tag == null) {
            throw new IllegalArgumentException("The tag must not be null.");
        }
!!!3845687.java!!!	userActivity(in when : long, inout noChangeLights : boolean) : void
        userActivity(when, USER_ACTIVITY_EVENT_OTHER,
                noChangeLights ? USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS : 0);
!!!3845815.java!!!	userActivity(in when : long, in event : int, in flags : int) : void
        try {
            mService.userActivity(when, event, flags);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3845943.java!!!	goToSleep(in time : long) : void
        goToSleep(time, GO_TO_SLEEP_REASON_APPLICATION, 0);
!!!3846071.java!!!	goToSleep(in time : long, in reason : int, in flags : int) : void
        try {
            mService.goToSleep(time, reason, flags);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3846199.java!!!	wakeUp(in time : long) : void
        try {
            mService.wakeUp(time, "wakeUp", mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3846327.java!!!	wakeUp(in time : long, inout reason : String) : void
        try {
            mService.wakeUp(time, reason, mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3846455.java!!!	nap(in time : long) : void
        try {
            mService.nap(time);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3846583.java!!!	boostScreenBrightness(in time : long) : void
        try {
            mService.boostScreenBrightness(time);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3846711.java!!!	isScreenBrightnessBoosted() : boolean
        try {
            return mService.isScreenBrightnessBoosted();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3846839.java!!!	setBacklightBrightness(in brightness : int) : void
        try {
            mService.setTemporaryScreenBrightnessSettingOverride(brightness);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3846967.java!!!	isWakeLockLevelSupported(in level : int) : boolean
        try {
            return mService.isWakeLockLevelSupported(level);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3847095.java!!!	isScreenOn() : boolean
        return isInteractive();
!!!3847223.java!!!	isInteractive() : boolean
        try {
            return mService.isInteractive();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3847351.java!!!	reboot(inout reason : String) : void
        try {
            mService.reboot(false, reason, true);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3847479.java!!!	rebootSafeMode() : void
        try {
            mService.rebootSafeMode(false, true);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3847607.java!!!	isPowerSaveMode() : boolean
        try {
            return mService.isPowerSaveMode();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3847735.java!!!	setPowerSaveMode(inout mode : boolean) : boolean
        try {
            return mService.setPowerSaveMode(mode);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3847863.java!!!	isDeviceIdleMode() : boolean
        try {
            return mService.isDeviceIdleMode();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3847991.java!!!	isLightDeviceIdleMode() : boolean
        try {
            return mService.isLightDeviceIdleMode();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3848119.java!!!	isIgnoringBatteryOptimizations(inout packageName : String) : boolean
        synchronized (this) {
            if (mIDeviceIdleController == null) {
                mIDeviceIdleController = IDeviceIdleController.Stub.asInterface(
                        ServiceManager.getService(Context.DEVICE_IDLE_CONTROLLER));
            }
        }
        try {
            return mIDeviceIdleController.isPowerSaveWhitelistApp(packageName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3848247.java!!!	shutdown(inout confirm : boolean, inout reason : String, inout wait : boolean) : void
        try {
            mService.shutdown(confirm, reason, wait);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3848375.java!!!	isSustainedPerformanceModeSupported() : boolean
        return mContext.getResources().getBoolean(
                com.android.internal.R.bool.config_sustainedPerformanceModeSupported);
