class ModuleProperties
!!!3325495.java!!!	ModuleProperties(in id : int, in classId : int, inout implementor : String, inout product : String, inout version : String, inout serial : String, in numTuners : int, in numAudioSources : int, inout isCaptureSupported : boolean, inout bands : RadioManager::BandDescriptor)
            mId = id;
            mClassId = classId;
            mImplementor = implementor;
            mProduct = product;
            mVersion = version;
            mSerial = serial;
            mNumTuners = numTuners;
            mNumAudioSources = numAudioSources;
            mIsCaptureSupported = isCaptureSupported;
            mBands = bands;
!!!3325623.java!!!	getId() : int
            return mId;
!!!3325751.java!!!	getClassId() : int
            return mClassId;
!!!3325879.java!!!	getImplementor() : String
            return mImplementor;
!!!3326007.java!!!	getProduct() : String
            return mProduct;
!!!3326135.java!!!	getVersion() : String
            return mVersion;
!!!3326263.java!!!	getSerial() : String
            return mSerial;
!!!3326391.java!!!	getNumTuners() : int
            return mNumTuners;
!!!3326519.java!!!	getNumAudioSources() : int
            return mNumAudioSources;
!!!3326647.java!!!	isCaptureSupported() : boolean
            return mIsCaptureSupported;
!!!3326775.java!!!	getBands() : RadioManager::BandDescriptor
            return mBands;
!!!3326903.java!!!	ModuleProperties(inout in : Parcel)
            mId = in.readInt();
            mClassId = in.readInt();
            mImplementor = in.readString();
            mProduct = in.readString();
            mVersion = in.readString();
            mSerial = in.readString();
            mNumTuners = in.readInt();
            mNumAudioSources = in.readInt();
            mIsCaptureSupported = in.readInt() == 1;
            Parcelable[] tmp = in.readParcelableArray(BandDescriptor.class.getClassLoader());
            mBands = new BandDescriptor[tmp.length];
            for (int i = 0; i < tmp.length; i++) {
                mBands[i] = (BandDescriptor) tmp[i];
            }
!!!3327031.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
            dest.writeInt(mId);
            dest.writeInt(mClassId);
            dest.writeString(mImplementor);
            dest.writeString(mProduct);
            dest.writeString(mVersion);
            dest.writeString(mSerial);
            dest.writeInt(mNumTuners);
            dest.writeInt(mNumAudioSources);
            dest.writeInt(mIsCaptureSupported ? 1 : 0);
            dest.writeParcelableArray(mBands, flags);
!!!3327159.java!!!	describeContents() : int
            return 0;
!!!3327287.java!!!	toString() : String
            return "ModuleProperties [mId=" + mId + ", mClassId=" + mClassId
                    + ", mImplementor=" + mImplementor + ", mProduct=" + mProduct
                    + ", mVersion=" + mVersion + ", mSerial=" + mSerial
                    + ", mNumTuners=" + mNumTuners
                    + ", mNumAudioSources=" + mNumAudioSources
                    + ", mIsCaptureSupported=" + mIsCaptureSupported
                    + ", mBands=" + Arrays.toString(mBands) + "]";
!!!3327415.java!!!	hashCode() : int
            final int prime = 31;
            int result = 1;
            result = prime * result + mId;
            result = prime * result + mClassId;
            result = prime * result + ((mImplementor == null) ? 0 : mImplementor.hashCode());
            result = prime * result + ((mProduct == null) ? 0 : mProduct.hashCode());
            result = prime * result + ((mVersion == null) ? 0 : mVersion.hashCode());
            result = prime * result + ((mSerial == null) ? 0 : mSerial.hashCode());
            result = prime * result + mNumTuners;
            result = prime * result + mNumAudioSources;
            result = prime * result + (mIsCaptureSupported ? 1 : 0);
            result = prime * result + Arrays.hashCode(mBands);
            return result;
!!!3327543.java!!!	equals(inout obj : Object) : boolean
            if (this == obj)
                return true;
            if (!(obj instanceof ModuleProperties))
                return false;
            ModuleProperties other = (ModuleProperties) obj;
            if (mId != other.getId())
                return false;
            if (mClassId != other.getClassId())
                return false;
            if (mImplementor == null) {
                if (other.getImplementor() != null)
                    return false;
            } else if (!mImplementor.equals(other.getImplementor()))
                return false;
            if (mProduct == null) {
                if (other.getProduct() != null)
                    return false;
            } else if (!mProduct.equals(other.getProduct()))
                return false;
            if (mVersion == null) {
                if (other.getVersion() != null)
                    return false;
            } else if (!mVersion.equals(other.getVersion()))
                return false;
            if (mSerial == null) {
                if (other.getSerial() != null)
                    return false;
            } else if (!mSerial.equals(other.getSerial()))
                return false;
            if (mNumTuners != other.getNumTuners())
                return false;
            if (mNumAudioSources != other.getNumAudioSources())
                return false;
            if (mIsCaptureSupported != other.isCaptureSupported())
                return false;
            if (!Arrays.equals(mBands, other.getBands()))
                return false;
            return true;
