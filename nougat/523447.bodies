class SSLSocketFactory
!!!6529975.java!!!	getSocketFactory() : SSLSocketFactory
        return NoPreloadHolder.DEFAULT_FACTORY;
!!!6530103.java!!!	SSLSocketFactory(inout algorithm : String, in keystore : KeyStore, in keystorePassword : String, in truststore : KeyStore, in random : SecureRandom, in nameResolver : HostNameResolver)
        super();
        if (algorithm == null) {
            algorithm = TLS;
        }
        KeyManager[] keymanagers = null;
        if (keystore != null) {
            keymanagers = createKeyManagers(keystore, keystorePassword);
        }
        TrustManager[] trustmanagers = null;
        if (truststore != null) {
            trustmanagers = createTrustManagers(truststore);
        }
        this.sslcontext = SSLContext.getInstance(algorithm);
        this.sslcontext.init(keymanagers, trustmanagers, random);
        this.socketfactory = this.sslcontext.getSocketFactory();
        this.nameResolver = nameResolver;
!!!6530231.java!!!	SSLSocketFactory(in keystore : KeyStore, in keystorePassword : String, in truststore : KeyStore)
        this(TLS, keystore, keystorePassword, truststore, null, null);
!!!6530359.java!!!	SSLSocketFactory(in keystore : KeyStore, in keystorePassword : String)
        this(TLS, keystore, keystorePassword, null, null, null);
!!!6530487.java!!!	SSLSocketFactory(in truststore : KeyStore)
        this(TLS, null, null, truststore, null, null);
!!!6530615.java!!!	SSLSocketFactory(inout socketfactory : javax.net.ssl.SSLSocketFactory)
        super();
        this.sslcontext = null;
        this.socketfactory = socketfactory;
        this.nameResolver = null;
!!!6530743.java!!!	SSLSocketFactory()
        super();
        this.sslcontext = null;
        this.socketfactory = HttpsURLConnection.getDefaultSSLSocketFactory();
        this.nameResolver = null;
!!!6530871.java!!!	createKeyManagers(in keystore : KeyStore, in password : String) : KeyManager
        if (keystore == null) {
            throw new IllegalArgumentException("Keystore may not be null");
        }
        KeyManagerFactory kmfactory = KeyManagerFactory.getInstance(
            KeyManagerFactory.getDefaultAlgorithm());
        kmfactory.init(keystore, password != null ? password.toCharArray(): null);
        return kmfactory.getKeyManagers(); 
!!!6530999.java!!!	createTrustManagers(in keystore : KeyStore) : TrustManager
 
        if (keystore == null) {
            throw new IllegalArgumentException("Keystore may not be null");
        }
        TrustManagerFactory tmfactory = TrustManagerFactory.getInstance(
            TrustManagerFactory.getDefaultAlgorithm());
        tmfactory.init(keystore);
        return tmfactory.getTrustManagers();
!!!6531127.java!!!	createSocket() : Socket

        // the cast makes sure that the factory is working as expected
        return (SSLSocket) this.socketfactory.createSocket();
!!!6531255.java!!!	connectSocket(in sock : Socket, in host : String, in port : int, in localAddress : InetAddress, in localPort : int, in params : HttpParams) : Socket

        if (host == null) {
            throw new IllegalArgumentException("Target host may not be null.");
        }
        if (params == null) {
            throw new IllegalArgumentException("Parameters may not be null.");
        }

        SSLSocket sslsock = (SSLSocket)
            ((sock != null) ? sock : createSocket());

        if ((localAddress != null) || (localPort > 0)) {

            // we need to bind explicitly
            if (localPort < 0)
                localPort = 0; // indicates "any"

            InetSocketAddress isa =
                new InetSocketAddress(localAddress, localPort);
            sslsock.bind(isa);
        }

        int connTimeout = HttpConnectionParams.getConnectionTimeout(params);
        int soTimeout = HttpConnectionParams.getSoTimeout(params);

        InetSocketAddress remoteAddress;
        if (this.nameResolver != null) {
            remoteAddress = new InetSocketAddress(this.nameResolver.resolve(host), port); 
        } else {
            remoteAddress = new InetSocketAddress(host, port);            
        }
        
        sslsock.connect(remoteAddress, connTimeout);

        sslsock.setSoTimeout(soTimeout);
        try {
            // BEGIN android-added
            /*
             * Make sure we have started the handshake before verifying.
             * Otherwise when we go to the hostname verifier, it directly calls
             * SSLSocket#getSession() which swallows SSL handshake errors.
             */
            sslsock.startHandshake();
            // END android-added
            hostnameVerifier.verify(host, sslsock);
            // verifyHostName() didn't blowup - good!
        } catch (IOException iox) {
            // close the socket before re-throwing the exception
            try { sslsock.close(); } catch (Exception x) { /*ignore*/ }
            throw iox;
        }

        return sslsock;
!!!6531383.java!!!	isSecure(inout sock : Socket) : boolean

        if (sock == null) {
            throw new IllegalArgumentException("Socket may not be null.");
        }
        // This instanceof check is in line with createSocket() above.
        if (!(sock instanceof SSLSocket)) {
            throw new IllegalArgumentException
                ("Socket not created by this factory.");
        }
        // This check is performed last since it calls the argument object.
        if (sock.isClosed()) {
            throw new IllegalArgumentException("Socket is closed.");
        }

        return true;

!!!6531511.java!!!	createSocket(in socket : Socket, in host : String, in port : int, in autoClose : boolean) : Socket
        SSLSocket sslSocket = (SSLSocket) this.socketfactory.createSocket(
              socket,
              host,
              port,
              autoClose
        );
        // BEGIN android-added
        /*
         * Make sure we have started the handshake before verifying.
         * Otherwise when we go to the hostname verifier, it directly calls
         * SSLSocket#getSession() which swallows SSL handshake errors.
         */
        sslSocket.startHandshake();
        // END android-added
        hostnameVerifier.verify(host, sslSocket);
        // verifyHostName() didn't blowup - good!
        return sslSocket;
!!!6531639.java!!!	setHostnameVerifier(inout hostnameVerifier : X509HostnameVerifier) : void
        if ( hostnameVerifier == null ) {
            throw new IllegalArgumentException("Hostname verifier may not be null");
        }
        this.hostnameVerifier = hostnameVerifier;
!!!6531767.java!!!	getHostnameVerifier() : X509HostnameVerifier
        return hostnameVerifier;
