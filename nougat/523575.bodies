class TrafficStats
!!!3566775.java!!!	getStatsService() : INetworkStatsService
        if (sStatsService == null) {
            sStatsService = INetworkStatsService.Stub.asInterface(
                    ServiceManager.getService(Context.NETWORK_STATS_SERVICE));
        }
        return sStatsService;
!!!3566903.java!!!	setThreadStatsTag(in tag : int) : void
        NetworkManagementSocketTagger.setThreadSocketStatsTag(tag);
!!!3567031.java!!!	setThreadStatsTagBackup() : void
        setThreadStatsTag(TAG_SYSTEM_BACKUP);
!!!3567159.java!!!	setThreadStatsTagRestore() : void
        setThreadStatsTag(TAG_SYSTEM_RESTORE);
!!!3567287.java!!!	getThreadStatsTag() : int
        return NetworkManagementSocketTagger.getThreadSocketStatsTag();
!!!3567415.java!!!	clearThreadStatsTag() : void
        NetworkManagementSocketTagger.setThreadSocketStatsTag(-1);
!!!3567543.java!!!	setThreadStatsUid(in uid : int) : void
        NetworkManagementSocketTagger.setThreadSocketStatsUid(uid);
!!!3567671.java!!!	clearThreadStatsUid() : void
        NetworkManagementSocketTagger.setThreadSocketStatsUid(-1);
!!!3567799.java!!!	tagSocket(inout socket : Socket) : void
        SocketTagger.get().tag(socket);
!!!3567927.java!!!	untagSocket(inout socket : Socket) : void
        SocketTagger.get().untag(socket);
!!!3568055.java!!!	tagDatagramSocket(inout socket : DatagramSocket) : void
        SocketTagger.get().tag(socket);
!!!3568183.java!!!	untagDatagramSocket(inout socket : DatagramSocket) : void
        SocketTagger.get().untag(socket);
!!!3568311.java!!!	startDataProfiling(inout context : Context) : void
        synchronized (sProfilingLock) {
            if (sActiveProfilingStart != null) {
                throw new IllegalStateException("already profiling data");
            }

            // take snapshot in time; we calculate delta later
            sActiveProfilingStart = getDataLayerSnapshotForUid(context);
        }
!!!3568439.java!!!	stopDataProfiling(inout context : Context) : NetworkStats
        synchronized (sProfilingLock) {
            if (sActiveProfilingStart == null) {
                throw new IllegalStateException("not profiling data");
            }

            // subtract starting values and return delta
            final NetworkStats profilingStop = getDataLayerSnapshotForUid(context);
            final NetworkStats profilingDelta = NetworkStats.subtract(
                    profilingStop, sActiveProfilingStart, null, null);
            sActiveProfilingStart = null;
            return profilingDelta;
        }
!!!3568567.java!!!	incrementOperationCount(in operationCount : int) : void
        final int tag = getThreadStatsTag();
        incrementOperationCount(tag, operationCount);
!!!3568695.java!!!	incrementOperationCount(in tag : int, in operationCount : int) : void
        final int uid = android.os.Process.myUid();
        try {
            getStatsService().incrementOperationCount(uid, tag, operationCount);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3568823.java!!!	closeQuietly(inout session : INetworkStatsSession) : void
        // TODO: move to NetworkStatsService once it exists
        if (session != null) {
            try {
                session.close();
            } catch (RuntimeException rethrown) {
                throw rethrown;
            } catch (Exception ignored) {
            }
        }
!!!3568951.java!!!	getMobileTxPackets() : long
        long total = 0;
        for (String iface : getMobileIfaces()) {
            total += getTxPackets(iface);
        }
        return total;
!!!3569079.java!!!	getMobileRxPackets() : long
        long total = 0;
        for (String iface : getMobileIfaces()) {
            total += getRxPackets(iface);
        }
        return total;
!!!3569207.java!!!	getMobileTxBytes() : long
        long total = 0;
        for (String iface : getMobileIfaces()) {
            total += getTxBytes(iface);
        }
        return total;
!!!3569335.java!!!	getMobileRxBytes() : long
        long total = 0;
        for (String iface : getMobileIfaces()) {
            total += getRxBytes(iface);
        }
        return total;
!!!3569463.java!!!	getMobileTcpRxPackets() : long
        long total = 0;
        for (String iface : getMobileIfaces()) {
            final long stat = nativeGetIfaceStat(iface, TYPE_TCP_RX_PACKETS);
            if (stat != UNSUPPORTED) {
                total += stat;
            }
        }
        return total;
!!!3569591.java!!!	getMobileTcpTxPackets() : long
        long total = 0;
        for (String iface : getMobileIfaces()) {
            final long stat = nativeGetIfaceStat(iface, TYPE_TCP_TX_PACKETS);
            if (stat != UNSUPPORTED) {
                total += stat;
            }
        }
        return total;
!!!3569719.java!!!	getTxPackets(inout iface : String) : long
        return nativeGetIfaceStat(iface, TYPE_TX_PACKETS);
!!!3569847.java!!!	getRxPackets(inout iface : String) : long
        return nativeGetIfaceStat(iface, TYPE_RX_PACKETS);
!!!3569975.java!!!	getTxBytes(inout iface : String) : long
        return nativeGetIfaceStat(iface, TYPE_TX_BYTES);
!!!3570103.java!!!	getRxBytes(inout iface : String) : long
        return nativeGetIfaceStat(iface, TYPE_RX_BYTES);
!!!3570231.java!!!	getTotalTxPackets() : long
        return nativeGetTotalStat(TYPE_TX_PACKETS);
!!!3570359.java!!!	getTotalRxPackets() : long
        return nativeGetTotalStat(TYPE_RX_PACKETS);
!!!3570487.java!!!	getTotalTxBytes() : long
        return nativeGetTotalStat(TYPE_TX_BYTES);
!!!3570615.java!!!	getTotalRxBytes() : long
        return nativeGetTotalStat(TYPE_RX_BYTES);
!!!3570743.java!!!	getUidTxBytes(in uid : int) : long
        // This isn't actually enforcing any security; it just returns the
        // unsupported value. The real filtering is done at the kernel level.
        final int callingUid = android.os.Process.myUid();
        if (callingUid == android.os.Process.SYSTEM_UID || callingUid == uid) {
            return nativeGetUidStat(uid, TYPE_TX_BYTES);
        } else {
            return UNSUPPORTED;
        }
!!!3570871.java!!!	getUidRxBytes(in uid : int) : long
        // This isn't actually enforcing any security; it just returns the
        // unsupported value. The real filtering is done at the kernel level.
        final int callingUid = android.os.Process.myUid();
        if (callingUid == android.os.Process.SYSTEM_UID || callingUid == uid) {
            return nativeGetUidStat(uid, TYPE_RX_BYTES);
        } else {
            return UNSUPPORTED;
        }
!!!3570999.java!!!	getUidTxPackets(in uid : int) : long
        // This isn't actually enforcing any security; it just returns the
        // unsupported value. The real filtering is done at the kernel level.
        final int callingUid = android.os.Process.myUid();
        if (callingUid == android.os.Process.SYSTEM_UID || callingUid == uid) {
            return nativeGetUidStat(uid, TYPE_TX_PACKETS);
        } else {
            return UNSUPPORTED;
        }
!!!3571127.java!!!	getUidRxPackets(in uid : int) : long
        // This isn't actually enforcing any security; it just returns the
        // unsupported value. The real filtering is done at the kernel level.
        final int callingUid = android.os.Process.myUid();
        if (callingUid == android.os.Process.SYSTEM_UID || callingUid == uid) {
            return nativeGetUidStat(uid, TYPE_RX_PACKETS);
        } else {
            return UNSUPPORTED;
        }
!!!3571255.java!!!	getUidTcpTxBytes(in uid : int) : long
        return UNSUPPORTED;
!!!3571383.java!!!	getUidTcpRxBytes(in uid : int) : long
        return UNSUPPORTED;
!!!3571511.java!!!	getUidUdpTxBytes(in uid : int) : long
        return UNSUPPORTED;
!!!3571639.java!!!	getUidUdpRxBytes(in uid : int) : long
        return UNSUPPORTED;
!!!3571767.java!!!	getUidTcpTxSegments(in uid : int) : long
        return UNSUPPORTED;
!!!3571895.java!!!	getUidTcpRxSegments(in uid : int) : long
        return UNSUPPORTED;
!!!3572023.java!!!	getUidUdpTxPackets(in uid : int) : long
        return UNSUPPORTED;
!!!3572151.java!!!	getUidUdpRxPackets(in uid : int) : long
        return UNSUPPORTED;
!!!3572279.java!!!	getDataLayerSnapshotForUid(inout context : Context) : NetworkStats
        // TODO: take snapshot locally, since proc file is now visible
        final int uid = android.os.Process.myUid();
        try {
            return getStatsService().getDataLayerSnapshotForUid(uid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3572407.java!!!	getMobileIfaces() : String
        try {
            return getStatsService().getMobileIfaces();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
