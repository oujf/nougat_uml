class Builder
!!!3605303.java!!!	Builder()
            mConfig.user = VpnService.this.getClass().getName();
!!!3605431.java!!!	setSession(inout session : String) : VpnService::Builder
            mConfig.session = session;
            return this;
!!!3605559.java!!!	setConfigureIntent(inout intent : PendingIntent) : VpnService::Builder
            mConfig.configureIntent = intent;
            return this;
!!!3605687.java!!!	setMtu(in mtu : int) : VpnService::Builder
            if (mtu <= 0) {
                throw new IllegalArgumentException("Bad mtu");
            }
            mConfig.mtu = mtu;
            return this;
!!!3605815.java!!!	addAddress(inout address : InetAddress, in prefixLength : int) : VpnService::Builder
            check(address, prefixLength);

            if (address.isAnyLocalAddress()) {
                throw new IllegalArgumentException("Bad address");
            }
            mAddresses.add(new LinkAddress(address, prefixLength));
            mConfig.updateAllowedFamilies(address);
            return this;
!!!3605943.java!!!	addAddress(inout address : String, in prefixLength : int) : VpnService::Builder
            return addAddress(InetAddress.parseNumericAddress(address), prefixLength);
!!!3606071.java!!!	addRoute(inout address : InetAddress, in prefixLength : int) : VpnService::Builder
            check(address, prefixLength);

            int offset = prefixLength / 8;
            byte[] bytes = address.getAddress();
            if (offset < bytes.length) {
                for (bytes[offset] <<= prefixLength % 8; offset < bytes.length; ++offset) {
                    if (bytes[offset] != 0) {
                        throw new IllegalArgumentException("Bad address");
                    }
                }
            }
            mRoutes.add(new RouteInfo(new IpPrefix(address, prefixLength), null));
            mConfig.updateAllowedFamilies(address);
            return this;
!!!3606199.java!!!	addRoute(inout address : String, in prefixLength : int) : VpnService::Builder
            return addRoute(InetAddress.parseNumericAddress(address), prefixLength);
!!!3606327.java!!!	addDnsServer(inout address : InetAddress) : VpnService::Builder
            if (address.isLoopbackAddress() || address.isAnyLocalAddress()) {
                throw new IllegalArgumentException("Bad address");
            }
            if (mConfig.dnsServers == null) {
                mConfig.dnsServers = new ArrayList<String>();
            }
            mConfig.dnsServers.add(address.getHostAddress());
            return this;
!!!3606455.java!!!	addDnsServer(inout address : String) : VpnService::Builder
            return addDnsServer(InetAddress.parseNumericAddress(address));
!!!3606583.java!!!	addSearchDomain(inout domain : String) : VpnService::Builder
            if (mConfig.searchDomains == null) {
                mConfig.searchDomains = new ArrayList<String>();
            }
            mConfig.searchDomains.add(domain);
            return this;
!!!3606711.java!!!	allowFamily(in family : int) : VpnService::Builder
            if (family == AF_INET) {
                mConfig.allowIPv4 = true;
            } else if (family == AF_INET6) {
                mConfig.allowIPv6 = true;
            } else {
                throw new IllegalArgumentException(family + " is neither " + AF_INET + " nor " +
                        AF_INET6);
            }
            return this;
!!!3606839.java!!!	verifyApp(inout packageName : String) : void
            IPackageManager pm = IPackageManager.Stub.asInterface(
                    ServiceManager.getService("package"));
            try {
                pm.getApplicationInfo(packageName, 0, UserHandle.getCallingUserId());
            } catch (RemoteException e) {
                throw new IllegalStateException(e);
            }
!!!3606967.java!!!	addAllowedApplication(inout packageName : String) : VpnService::Builder
            if (mConfig.disallowedApplications != null) {
                throw new UnsupportedOperationException("addDisallowedApplication already called");
            }
            verifyApp(packageName);
            if (mConfig.allowedApplications == null) {
                mConfig.allowedApplications = new ArrayList<String>();
            }
            mConfig.allowedApplications.add(packageName);
            return this;
!!!3607095.java!!!	addDisallowedApplication(inout packageName : String) : VpnService::Builder
            if (mConfig.allowedApplications != null) {
                throw new UnsupportedOperationException("addAllowedApplication already called");
            }
            verifyApp(packageName);
            if (mConfig.disallowedApplications == null) {
                mConfig.disallowedApplications = new ArrayList<String>();
            }
            mConfig.disallowedApplications.add(packageName);
            return this;
!!!3607223.java!!!	allowBypass() : VpnService::Builder
            mConfig.allowBypass = true;
            return this;
!!!3607351.java!!!	setBlocking(inout blocking : boolean) : VpnService::Builder
            mConfig.blocking = blocking;
            return this;
!!!3607479.java!!!	setUnderlyingNetworks(inout networks : Network) : VpnService::Builder
            mConfig.underlyingNetworks = networks != null ? networks.clone() : null;
            return this;
!!!3607607.java!!!	establish() : ParcelFileDescriptor
            mConfig.addresses = mAddresses;
            mConfig.routes = mRoutes;

            try {
                return getService().establishVpn(mConfig);
            } catch (RemoteException e) {
                throw new IllegalStateException(e);
            }
