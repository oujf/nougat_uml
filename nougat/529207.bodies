class DnsSdTxtRecord
!!!3626167.java!!!	DnsSdTxtRecord()
        mData = new byte[0];
!!!3626295.java!!!	DnsSdTxtRecord(inout data : byte)
        mData = (byte[]) data.clone();
!!!3626423.java!!!	DnsSdTxtRecord(inout src : DnsSdTxtRecord)
        if (src != null && src.mData != null) {
            mData = (byte[]) src.mData.clone();
        }
!!!3626551.java!!!	set(inout key : String, inout value : String) : void
        byte[] keyBytes;
        byte[] valBytes;
        int valLen;

        if (value != null) {
            valBytes = value.getBytes();
            valLen = valBytes.length;
        } else {
            valBytes = null;
            valLen = 0;
        }

        try {
            keyBytes = key.getBytes("US-ASCII");
        }
        catch (java.io.UnsupportedEncodingException e) {
            throw new IllegalArgumentException("key should be US-ASCII");
        }

        for (int i = 0; i < keyBytes.length; i++) {
            if (keyBytes[i] == '=') {
                throw new IllegalArgumentException("= is not a valid character in key");
            }
        }

        if (keyBytes.length + valLen >= 255) {
            throw new IllegalArgumentException("Key and Value length cannot exceed 255 bytes");
        }

        int currentLoc = remove(key);
        if (currentLoc == -1)
            currentLoc = keyCount();

        insert(keyBytes, valBytes, currentLoc);
!!!3626679.java!!!	get(inout key : String) : String
        byte[] val = this.getValue(key);
        return val != null ? new String(val) : null;
!!!3626807.java!!!	remove(inout key : String) : int
        int avStart = 0;

        for (int i=0; avStart < mData.length; i++) {
            int avLen = mData[avStart];
            if (key.length() <= avLen &&
                    (key.length() == avLen || mData[avStart + key.length() + 1] == mSeperator)) {
                String s = new String(mData, avStart + 1, key.length());
                if (0 == key.compareToIgnoreCase(s)) {
                    byte[] oldBytes = mData;
                    mData = new byte[oldBytes.length - avLen - 1];
                    System.arraycopy(oldBytes, 0, mData, 0, avStart);
                    System.arraycopy(oldBytes, avStart + avLen + 1, mData, avStart,
                            oldBytes.length - avStart - avLen - 1);
                    return i;
                }
            }
            avStart += (0xFF & (avLen + 1));
        }
        return -1;
!!!3626935.java!!!	keyCount() : int
        int count = 0, nextKey;
        for (nextKey = 0; nextKey < mData.length; count++) {
            nextKey += (0xFF & (mData[nextKey] + 1));
        }
        return count;
!!!3627063.java!!!	contains(inout key : String) : boolean
        String s = null;
        for (int i = 0; null != (s = this.getKey(i)); i++) {
            if (0 == key.compareToIgnoreCase(s)) return true;
        }
        return false;
!!!3627191.java!!!	size() : int
        return mData.length;
!!!3627319.java!!!	getRawData() : byte
        return (byte[]) mData.clone();
!!!3627447.java!!!	insert(inout keyBytes : byte, inout value : byte, in index : int) : void
        byte[] oldBytes = mData;
        int valLen = (value != null) ? value.length : 0;
        int insertion = 0;
        int newLen, avLen;

        for (int i = 0; i < index && insertion < mData.length; i++) {
            insertion += (0xFF & (mData[insertion] + 1));
        }

        avLen = keyBytes.length + valLen + (value != null ? 1 : 0);
        newLen = avLen + oldBytes.length + 1;

        mData = new byte[newLen];
        System.arraycopy(oldBytes, 0, mData, 0, insertion);
        int secondHalfLen = oldBytes.length - insertion;
        System.arraycopy(oldBytes, insertion, mData, newLen - secondHalfLen, secondHalfLen);
        mData[insertion] = (byte) avLen;
        System.arraycopy(keyBytes, 0, mData, insertion + 1, keyBytes.length);
        if (value != null) {
            mData[insertion + 1 + keyBytes.length] = mSeperator;
            System.arraycopy(value, 0, mData, insertion + keyBytes.length + 2, valLen);
        }
!!!3627575.java!!!	getKey(in index : int) : String
        int avStart = 0;

        for (int i=0; i < index && avStart < mData.length; i++) {
            avStart += mData[avStart] + 1;
        }

        if (avStart < mData.length) {
            int avLen = mData[avStart];
            int aLen = 0;

            for (aLen=0; aLen < avLen; aLen++) {
                if (mData[avStart + aLen + 1] == mSeperator) break;
            }
            return new String(mData, avStart + 1, aLen);
        }
        return null;
!!!3627703.java!!!	getValue(in index : int) : byte
        int avStart = 0;
        byte[] value = null;

        for (int i=0; i < index && avStart < mData.length; i++) {
            avStart += mData[avStart] + 1;
        }

        if (avStart < mData.length) {
            int avLen = mData[avStart];
            int aLen = 0;

            for (aLen=0; aLen < avLen; aLen++) {
                if (mData[avStart + aLen + 1] == mSeperator) {
                    value = new byte[avLen - aLen - 1];
                    System.arraycopy(mData, avStart + aLen + 2, value, 0, avLen - aLen - 1);
                    break;
                }
            }
        }
        return value;
!!!3627831.java!!!	getValueAsString(in index : int) : String
        byte[] value = this.getValue(index);
        return value != null ? new String(value) : null;
!!!3627959.java!!!	getValue(inout forKey : String) : byte
        String s = null;
        int i;

        for (i = 0; null != (s = this.getKey(i)); i++) {
            if (0 == forKey.compareToIgnoreCase(s)) {
                return this.getValue(i);
            }
        }

        return null;
!!!3628087.java!!!	toString() : String
        String a, result = null;

        for (int i = 0; null != (a = this.getKey(i)); i++) {
            String av =  "{" + a;
            String val = this.getValueAsString(i);
            if (val != null)
                av += "=" + val + "}";
            else
                av += "}";
            if (result == null)
                result = av;
            else
                result = result + ", " + av;
        }
        return result != null ? result : "";
!!!3628215.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }
        if (!(o instanceof DnsSdTxtRecord)) {
            return false;
        }

        DnsSdTxtRecord record = (DnsSdTxtRecord)o;
        return  Arrays.equals(record.mData, mData);
!!!3628343.java!!!	hashCode() : int
        return Arrays.hashCode(mData);
!!!3628471.java!!!	describeContents() : int
        return 0;
!!!3628599.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeByteArray(mData);
