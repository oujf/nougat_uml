class BaseBundle
!!!3683639.java!!!	setShouldDefuse(inout shouldDefuse : boolean) : void
        sShouldDefuse = shouldDefuse;
!!!3683767.java!!!	BaseBundle(inout loader : ClassLoader, in capacity : int)
        mMap = capacity > 0 ?
                new ArrayMap<String, Object>(capacity) : new ArrayMap<String, Object>();
        mClassLoader = loader == null ? getClass().getClassLoader() : loader;
!!!3683895.java!!!	BaseBundle()
        this((ClassLoader) null, 0);
!!!3684023.java!!!	BaseBundle(inout parcelledData : Parcel)
        readFromParcelInner(parcelledData);
!!!3684151.java!!!	BaseBundle(inout parcelledData : Parcel, in length : int)
        readFromParcelInner(parcelledData, length);
!!!3684279.java!!!	BaseBundle(inout loader : ClassLoader)
        this(loader, 0);
!!!3684407.java!!!	BaseBundle(in capacity : int)
        this((ClassLoader) null, capacity);
!!!3684535.java!!!	BaseBundle(inout b : BaseBundle)
        if (b.mParcelledData != null) {
            if (b.isEmptyParcel()) {
                mParcelledData = NoImagePreloadHolder.EMPTY_PARCEL;
            } else {
                mParcelledData = Parcel.obtain();
                mParcelledData.appendFrom(b.mParcelledData, 0, b.mParcelledData.dataSize());
                mParcelledData.setDataPosition(0);
            }
        } else {
            mParcelledData = null;
        }

        if (b.mMap != null) {
            mMap = new ArrayMap<>(b.mMap);
        } else {
            mMap = null;
        }

        mClassLoader = b.mClassLoader;
!!!3684663.java!!!	getPairValue() : String
        unparcel();
        int size = mMap.size();
        if (size > 1) {
            Log.w(TAG, "getPairValue() used on Bundle with multiple pairs.");
        }
        if (size == 0) {
            return null;
        }
        Object o = mMap.valueAt(0);
        try {
            return (String) o;
        } catch (ClassCastException e) {
            typeWarning("getPairValue()", o, "String", e);
            return null;
        }
!!!3684791.java!!!	setClassLoader(inout loader : ClassLoader) : void
        mClassLoader = loader;
!!!3684919.java!!!	getClassLoader() : ClassLoader
        return mClassLoader;
!!!3685047.java!!!	unparcel() : void
        synchronized (this) {
            final Parcel parcelledData = mParcelledData;
            if (parcelledData == null) {
                if (DEBUG) Log.d(TAG, "unparcel "
                        + Integer.toHexString(System.identityHashCode(this))
                        + ": no parcelled data");
                return;
            }

            if (LOG_DEFUSABLE && sShouldDefuse && (mFlags & FLAG_DEFUSABLE) == 0) {
                Slog.wtf(TAG, "Attempting to unparcel a Bundle while in transit; this may "
                        + "clobber all data inside!", new Throwable());
            }

            if (isEmptyParcel()) {
                if (DEBUG) Log.d(TAG, "unparcel "
                        + Integer.toHexString(System.identityHashCode(this)) + ": empty");
                if (mMap == null) {
                    mMap = new ArrayMap<>(1);
                } else {
                    mMap.erase();
                }
                mParcelledData = null;
                return;
            }

            int N = parcelledData.readInt();
            if (DEBUG) Log.d(TAG, "unparcel " + Integer.toHexString(System.identityHashCode(this))
                    + ": reading " + N + " maps");
            if (N < 0) {
                return;
            }
            ArrayMap<String, Object> map = mMap;
            if (map == null) {
                map = new ArrayMap<>(N);
            } else {
                map.erase();
                map.ensureCapacity(N);
            }
            try {
                parcelledData.readArrayMapInternal(map, N, mClassLoader);
            } catch (BadParcelableException e) {
                if (sShouldDefuse) {
                    Log.w(TAG, "Failed to parse Bundle, but defusing quietly", e);
                    map.erase();
                } else {
                    throw e;
                }
            } finally {
                mMap = map;
                parcelledData.recycle();
                mParcelledData = null;
            }
            if (DEBUG) Log.d(TAG, "unparcel " + Integer.toHexString(System.identityHashCode(this))
                    + " final map: " + mMap);
        }
!!!3685175.java!!!	isParcelled() : boolean
        return mParcelledData != null;
!!!3685303.java!!!	isEmptyParcel() : boolean
        return mParcelledData == NoImagePreloadHolder.EMPTY_PARCEL;
!!!3685431.java!!!	getMap() : ArrayMap
        unparcel();
        return mMap;
!!!3685559.java!!!	size() : int
        unparcel();
        return mMap.size();
!!!3685687.java!!!	isEmpty() : boolean
        unparcel();
        return mMap.isEmpty();
!!!3685815.java!!!	clear() : void
        unparcel();
        mMap.clear();
!!!3685943.java!!!	containsKey(inout key : String) : boolean
        unparcel();
        return mMap.containsKey(key);
!!!3686071.java!!!	get(inout key : String) : Object
        unparcel();
        return mMap.get(key);
!!!3686199.java!!!	remove(inout key : String) : void
        unparcel();
        mMap.remove(key);
!!!3686327.java!!!	putAll(inout bundle : PersistableBundle) : void
        unparcel();
        bundle.unparcel();
        mMap.putAll(bundle.mMap);
!!!3686455.java!!!	putAll(inout map : ArrayMap) : void
        unparcel();
        mMap.putAll(map);
!!!3686583.java!!!	keySet() : String
        unparcel();
        return mMap.keySet();
!!!3686711.java!!!	putBoolean(inout key : String, inout value : boolean) : void
        unparcel();
        mMap.put(key, value);
!!!3686839.java!!!	putByte(inout key : String, in value : byte) : void
        unparcel();
        mMap.put(key, value);
!!!3686967.java!!!	putChar(inout key : String, in value : char) : void
        unparcel();
        mMap.put(key, value);
!!!3687095.java!!!	putShort(inout key : String, in value : short) : void
        unparcel();
        mMap.put(key, value);
!!!3687223.java!!!	putInt(inout key : String, in value : int) : void
        unparcel();
        mMap.put(key, value);
!!!3687351.java!!!	putLong(inout key : String, in value : long) : void
        unparcel();
        mMap.put(key, value);
!!!3687479.java!!!	putFloat(inout key : String, in value : float) : void
        unparcel();
        mMap.put(key, value);
!!!3687607.java!!!	putDouble(inout key : String, in value : double) : void
        unparcel();
        mMap.put(key, value);
!!!3687735.java!!!	putString(inout key : String, inout value : String) : void
        unparcel();
        mMap.put(key, value);
!!!3687863.java!!!	putCharSequence(inout key : String, inout value : CharSequence) : void
        unparcel();
        mMap.put(key, value);
!!!3687991.java!!!	putIntegerArrayList(inout key : String, inout value : ArrayList<Integer>) : void
        unparcel();
        mMap.put(key, value);
!!!3688119.java!!!	putStringArrayList(inout key : String, inout value : ArrayList<String>) : void
        unparcel();
        mMap.put(key, value);
!!!3688247.java!!!	putCharSequenceArrayList(inout key : String, inout value : ArrayList<CharSequence>) : void
        unparcel();
        mMap.put(key, value);
!!!3688375.java!!!	putSerializable(inout key : String, inout value : Serializable) : void
        unparcel();
        mMap.put(key, value);
!!!3688503.java!!!	putBooleanArray(inout key : String, inout value : boolean) : void
        unparcel();
        mMap.put(key, value);
!!!3688631.java!!!	putByteArray(inout key : String, inout value : byte) : void
        unparcel();
        mMap.put(key, value);
!!!3688759.java!!!	putShortArray(inout key : String, inout value : short) : void
        unparcel();
        mMap.put(key, value);
!!!3688887.java!!!	putCharArray(inout key : String, inout value : char) : void
        unparcel();
        mMap.put(key, value);
!!!3689015.java!!!	putIntArray(inout key : String, inout value : int) : void
        unparcel();
        mMap.put(key, value);
!!!3689143.java!!!	putLongArray(inout key : String, inout value : long) : void
        unparcel();
        mMap.put(key, value);
!!!3689271.java!!!	putFloatArray(inout key : String, inout value : float) : void
        unparcel();
        mMap.put(key, value);
!!!3689399.java!!!	putDoubleArray(inout key : String, inout value : double) : void
        unparcel();
        mMap.put(key, value);
!!!3689527.java!!!	putStringArray(inout key : String, inout value : String) : void
        unparcel();
        mMap.put(key, value);
!!!3689655.java!!!	putCharSequenceArray(inout key : String, inout value : CharSequence) : void
        unparcel();
        mMap.put(key, value);
!!!3689783.java!!!	getBoolean(inout key : String) : boolean
        unparcel();
        if (DEBUG) Log.d(TAG, "Getting boolean in "
                + Integer.toHexString(System.identityHashCode(this)));
        return getBoolean(key, false);
!!!3689911.java!!!	typeWarning(inout key : String, inout value : Object, inout className : String, inout defaultValue : Object, inout e : ClassCastException) : void
        StringBuilder sb = new StringBuilder();
        sb.append("Key ");
        sb.append(key);
        sb.append(" expected ");
        sb.append(className);
        sb.append(" but value was a ");
        sb.append(value.getClass().getName());
        sb.append(".  The default value ");
        sb.append(defaultValue);
        sb.append(" was returned.");
        Log.w(TAG, sb.toString());
        Log.w(TAG, "Attempt to cast generated internal exception:", e);
!!!3690039.java!!!	typeWarning(inout key : String, inout value : Object, inout className : String, inout e : ClassCastException) : void
        typeWarning(key, value, className, "<null>", e);
!!!3690167.java!!!	getBoolean(inout key : String, inout defaultValue : boolean) : boolean
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Boolean) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Boolean", defaultValue, e);
            return defaultValue;
        }
!!!3690295.java!!!	getByte(inout key : String) : byte
        unparcel();
        return getByte(key, (byte) 0);
!!!3690423.java!!!	getByte(inout key : String, in defaultValue : byte) : Byte
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Byte) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Byte", defaultValue, e);
            return defaultValue;
        }
!!!3690551.java!!!	getChar(inout key : String) : char
        unparcel();
        return getChar(key, (char) 0);
!!!3690679.java!!!	getChar(inout key : String, in defaultValue : char) : char
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Character) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Character", defaultValue, e);
            return defaultValue;
        }
!!!3690807.java!!!	getShort(inout key : String) : short
        unparcel();
        return getShort(key, (short) 0);
!!!3690935.java!!!	getShort(inout key : String, in defaultValue : short) : short
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Short) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Short", defaultValue, e);
            return defaultValue;
        }
!!!3691063.java!!!	getInt(inout key : String) : int
        unparcel();
        return getInt(key, 0);
!!!3691191.java!!!	getInt(inout key : String, in defaultValue : int) : int
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Integer) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Integer", defaultValue, e);
            return defaultValue;
        }
!!!3691319.java!!!	getLong(inout key : String) : long
        unparcel();
        return getLong(key, 0L);
!!!3691447.java!!!	getLong(inout key : String, in defaultValue : long) : long
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Long) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Long", defaultValue, e);
            return defaultValue;
        }
!!!3691575.java!!!	getFloat(inout key : String) : float
        unparcel();
        return getFloat(key, 0.0f);
!!!3691703.java!!!	getFloat(inout key : String, in defaultValue : float) : float
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Float) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Float", defaultValue, e);
            return defaultValue;
        }
!!!3691831.java!!!	getDouble(inout key : String) : double
        unparcel();
        return getDouble(key, 0.0);
!!!3691959.java!!!	getDouble(inout key : String, in defaultValue : double) : double
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Double) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Double", defaultValue, e);
            return defaultValue;
        }
!!!3692087.java!!!	getString(inout key : String) : String
        unparcel();
        final Object o = mMap.get(key);
        try {
            return (String) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "String", e);
            return null;
        }
!!!3692215.java!!!	getString(inout key : String, inout defaultValue : String) : String
        final String s = getString(key);
        return (s == null) ? defaultValue : s;
!!!3692343.java!!!	getCharSequence(inout key : String) : CharSequence
        unparcel();
        final Object o = mMap.get(key);
        try {
            return (CharSequence) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "CharSequence", e);
            return null;
        }
!!!3692471.java!!!	getCharSequence(inout key : String, inout defaultValue : CharSequence) : CharSequence
        final CharSequence cs = getCharSequence(key);
        return (cs == null) ? defaultValue : cs;
!!!3692599.java!!!	getSerializable(inout key : String) : Serializable
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (Serializable) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Serializable", e);
            return null;
        }
!!!3692727.java!!!	getIntegerArrayList(inout key : String) : ArrayList<Integer>
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (ArrayList<Integer>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "ArrayList<Integer>", e);
            return null;
        }
!!!3692855.java!!!	getStringArrayList(inout key : String) : String
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (ArrayList<String>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "ArrayList<String>", e);
            return null;
        }
!!!3692983.java!!!	getCharSequenceArrayList(inout key : String) : ArrayList<CharSequence>
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (ArrayList<CharSequence>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "ArrayList<CharSequence>", e);
            return null;
        }
!!!3693111.java!!!	getBooleanArray(inout key : String) : boolean
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (boolean[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "byte[]", e);
            return null;
        }
!!!3693239.java!!!	getByteArray(inout key : String) : byte
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (byte[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "byte[]", e);
            return null;
        }
!!!3693367.java!!!	getShortArray(inout key : String) : short
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (short[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "short[]", e);
            return null;
        }
!!!3693495.java!!!	getCharArray(inout key : String) : char
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (char[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "char[]", e);
            return null;
        }
!!!3693623.java!!!	getIntArray(inout key : String) : int
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (int[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "int[]", e);
            return null;
        }
!!!3693751.java!!!	getLongArray(inout key : String) : long
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (long[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "long[]", e);
            return null;
        }
!!!3693879.java!!!	getFloatArray(inout key : String) : float
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (float[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "float[]", e);
            return null;
        }
!!!3694007.java!!!	getDoubleArray(inout key : String) : double
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (double[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "double[]", e);
            return null;
        }
!!!3694135.java!!!	getStringArray(inout key : String) : String
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (String[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "String[]", e);
            return null;
        }
!!!3694263.java!!!	getCharSequenceArray(inout key : String) : CharSequence
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (CharSequence[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "CharSequence[]", e);
            return null;
        }
!!!3694391.java!!!	writeToParcelInner(inout parcel : Parcel, in flags : int) : void
        // Keep implementation in sync with writeToParcel() in
        // frameworks/native/libs/binder/PersistableBundle.cpp.
        final Parcel parcelledData;
        synchronized (this) {
            parcelledData = mParcelledData;
        }
        if (parcelledData != null) {
            if (isEmptyParcel()) {
                parcel.writeInt(0);
            } else {
                int length = parcelledData.dataSize();
                parcel.writeInt(length);
                parcel.writeInt(BUNDLE_MAGIC);
                parcel.appendFrom(parcelledData, 0, length);
            }
        } else {
            // Special case for empty bundles.
            if (mMap == null || mMap.size() <= 0) {
                parcel.writeInt(0);
                return;
            }
            int lengthPos = parcel.dataPosition();
            parcel.writeInt(-1); // dummy, will hold length
            parcel.writeInt(BUNDLE_MAGIC);

            int startPos = parcel.dataPosition();
            parcel.writeArrayMapInternal(mMap);
            int endPos = parcel.dataPosition();

            // Backpatch length
            parcel.setDataPosition(lengthPos);
            int length = endPos - startPos;
            parcel.writeInt(length);
            parcel.setDataPosition(endPos);
        }
!!!3694519.java!!!	readFromParcelInner(inout parcel : Parcel) : void
        // Keep implementation in sync with readFromParcel() in
        // frameworks/native/libs/binder/PersistableBundle.cpp.
        int length = parcel.readInt();
        readFromParcelInner(parcel, length);
!!!3694647.java!!!	readFromParcelInner(inout parcel : Parcel, in length : int) : void
        if (length < 0) {
            throw new RuntimeException("Bad length in parcel: " + length);

        } else if (length == 0) {
            // Empty Bundle or end of data.
            mParcelledData = NoImagePreloadHolder.EMPTY_PARCEL;
            return;
        }

        final int magic = parcel.readInt();
        if (magic != BUNDLE_MAGIC) {
            throw new IllegalStateException("Bad magic number for Bundle: 0x"
                    + Integer.toHexString(magic));
        }

        // Advance within this Parcel
        int offset = parcel.dataPosition();
        parcel.setDataPosition(MathUtils.addOrThrow(offset, length));

        Parcel p = Parcel.obtain();
        p.setDataPosition(0);
        p.appendFrom(parcel, offset, length);
        if (DEBUG) Log.d(TAG, "Retrieving "  + Integer.toHexString(System.identityHashCode(this))
                + ": " + length + " bundle bytes starting at " + offset);
        p.setDataPosition(0);

        mParcelledData = p;
