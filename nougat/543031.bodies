class FileBridgeOutputStream
!!!3781047.java!!!	FileBridgeOutputStream(inout clientPfd : ParcelFileDescriptor)
            mClientPfd = clientPfd;
            mClient = clientPfd.getFileDescriptor();
!!!3781175.java!!!	FileBridgeOutputStream(inout client : FileDescriptor)
            mClientPfd = null;
            mClient = client;
!!!3781303.java!!!	close() : void
            try {
                writeCommandAndBlock(CMD_CLOSE, "close()");
            } finally {
                IoBridge.closeAndSignalBlockedThreads(mClient);
                IoUtils.closeQuietly(mClientPfd);
            }
!!!3781431.java!!!	fsync() : void
            writeCommandAndBlock(CMD_FSYNC, "fsync()");
!!!3781559.java!!!	writeCommandAndBlock(in cmd : int, inout cmdString : String) : void
            Memory.pokeInt(mTemp, 0, cmd, ByteOrder.BIG_ENDIAN);
            IoBridge.write(mClient, mTemp, 0, MSG_LENGTH);

            // Wait for server to ack
            if (IoBridge.read(mClient, mTemp, 0, MSG_LENGTH) == MSG_LENGTH) {
                if (Memory.peekInt(mTemp, 0, ByteOrder.BIG_ENDIAN) == cmd) {
                    return;
                }
            }

            throw new IOException("Failed to execute " + cmdString + " across bridge");
!!!3781687.java!!!	write(inout buffer : byte, in byteOffset : int, in byteCount : int) : void
            Arrays.checkOffsetAndCount(buffer.length, byteOffset, byteCount);
            Memory.pokeInt(mTemp, 0, CMD_WRITE, ByteOrder.BIG_ENDIAN);
            Memory.pokeInt(mTemp, 4, byteCount, ByteOrder.BIG_ENDIAN);
            IoBridge.write(mClient, mTemp, 0, MSG_LENGTH);
            IoBridge.write(mClient, buffer, byteOffset, byteCount);
!!!3781815.java!!!	write(in oneByte : int) : void
            Streams.writeSingleByte(this, oneByte);
