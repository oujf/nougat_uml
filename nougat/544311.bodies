class MemoryInputStream
!!!3799095.java!!!	available() : int
            if (mOffset >= mLength) {
                return 0;
            }
            return mLength - mOffset;
!!!3799223.java!!!	markSupported() : boolean
            return true;
!!!3799351.java!!!	mark(in readlimit : int) : void
            mMark = mOffset;
!!!3799479.java!!!	reset() : void
            mOffset = mMark;
!!!3799607.java!!!	read() : int
            if (mSingleByte == null) {
                mSingleByte = new byte[1];
            }
            int result = read(mSingleByte, 0, 1);
            if (result != 1) {
                return -1;
            }
            return mSingleByte[0];
!!!3799735.java!!!	read(inout buffer : byte, in offset : int, in count : int) : int
            if (offset < 0 || count < 0 || offset + count > buffer.length) {
                // readBytes() also does this check, but we need to do it before
                // changing count.
                throw new IndexOutOfBoundsException();
            }
            count = Math.min(count, available());
            if (count < 1) {
                return -1;
            }
            int result = readBytes(buffer, mOffset, offset, count);
            if (result > 0) {
                mOffset += result;
            }
            return result;
!!!3799863.java!!!	skip(in n : long) : long
            if (mOffset + n > mLength) {
                n = mLength - mOffset;
            }
            mOffset += n;
            return n;
