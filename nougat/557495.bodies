class StorageManager
!!!3969719.java!!!	getNextNonce() : int
        return mNextNonce.getAndIncrement();
!!!3970231.java!!!	from(inout context : Context) : StorageManager
        return context.getSystemService(StorageManager.class);
!!!3970359.java!!!	StorageManager(inout context : Context, inout looper : Looper)
        mContext = context;
        mResolver = context.getContentResolver();
        mLooper = looper;
        mMountService = IMountService.Stub.asInterface(ServiceManager.getService("mount"));
        if (mMountService == null) {
            throw new IllegalStateException("Failed to find running mount service");
        }
!!!3970487.java!!!	registerListener(inout listener : StorageEventListener) : void
        synchronized (mDelegates) {
            final StorageEventListenerDelegate delegate = new StorageEventListenerDelegate(listener,
                    mLooper);
            try {
                mMountService.registerListener(delegate);
            } catch (RemoteException e) {
                throw e.rethrowFromSystemServer();
            }
            mDelegates.add(delegate);
        }
!!!3970615.java!!!	unregisterListener(inout listener : StorageEventListener) : void
        synchronized (mDelegates) {
            for (Iterator<StorageEventListenerDelegate> i = mDelegates.iterator(); i.hasNext();) {
                final StorageEventListenerDelegate delegate = i.next();
                if (delegate.mCallback == listener) {
                    try {
                        mMountService.unregisterListener(delegate);
                    } catch (RemoteException e) {
                        throw e.rethrowFromSystemServer();
                    }
                    i.remove();
                }
            }
        }
!!!3970999.java!!!	isUsbMassStorageConnected() : boolean
        return false;
!!!3971127.java!!!	isUsbMassStorageEnabled() : boolean
        return false;
!!!3971255.java!!!	mountObb(inout rawPath : String, inout key : String, inout listener : OnObbStateChangeListener) : boolean
        Preconditions.checkNotNull(rawPath, "rawPath cannot be null");
        Preconditions.checkNotNull(listener, "listener cannot be null");

        try {
            final String canonicalPath = new File(rawPath).getCanonicalPath();
            final int nonce = mObbActionListener.addListener(listener);
            mMountService.mountObb(rawPath, canonicalPath, key, mObbActionListener, nonce);
            return true;
        } catch (IOException e) {
            throw new IllegalArgumentException("Failed to resolve path: " + rawPath, e);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3971383.java!!!	unmountObb(inout rawPath : String, inout force : boolean, inout listener : OnObbStateChangeListener) : boolean
        Preconditions.checkNotNull(rawPath, "rawPath cannot be null");
        Preconditions.checkNotNull(listener, "listener cannot be null");

        try {
            final int nonce = mObbActionListener.addListener(listener);
            mMountService.unmountObb(rawPath, force, mObbActionListener, nonce);
            return true;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3971511.java!!!	isObbMounted(inout rawPath : String) : boolean
        Preconditions.checkNotNull(rawPath, "rawPath cannot be null");

        try {
            return mMountService.isObbMounted(rawPath);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3971639.java!!!	getMountedObbPath(inout rawPath : String) : String
        Preconditions.checkNotNull(rawPath, "rawPath cannot be null");

        try {
            return mMountService.getMountedObbPath(rawPath);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3971767.java!!!	getDisks() : DiskInfo
        try {
            return Arrays.asList(mMountService.getDisks());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3971895.java!!!	findDiskById(inout id : String) : DiskInfo
        Preconditions.checkNotNull(id);
        // TODO; go directly to service to make this faster
        for (DiskInfo disk : getDisks()) {
            if (Objects.equals(disk.id, id)) {
                return disk;
            }
        }
        return null;
!!!3972023.java!!!	findVolumeById(inout id : String) : VolumeInfo
        Preconditions.checkNotNull(id);
        // TODO; go directly to service to make this faster
        for (VolumeInfo vol : getVolumes()) {
            if (Objects.equals(vol.id, id)) {
                return vol;
            }
        }
        return null;
!!!3972151.java!!!	findVolumeByUuid(inout fsUuid : String) : VolumeInfo
        Preconditions.checkNotNull(fsUuid);
        // TODO; go directly to service to make this faster
        for (VolumeInfo vol : getVolumes()) {
            if (Objects.equals(vol.fsUuid, fsUuid)) {
                return vol;
            }
        }
        return null;
!!!3972279.java!!!	findRecordByUuid(inout fsUuid : String) : VolumeRecord
        Preconditions.checkNotNull(fsUuid);
        // TODO; go directly to service to make this faster
        for (VolumeRecord rec : getVolumeRecords()) {
            if (Objects.equals(rec.fsUuid, fsUuid)) {
                return rec;
            }
        }
        return null;
!!!3972407.java!!!	findPrivateForEmulated(inout emulatedVol : VolumeInfo) : VolumeInfo
        if (emulatedVol != null) {
            return findVolumeById(emulatedVol.getId().replace("emulated", "private"));
        } else {
            return null;
        }
!!!3972535.java!!!	findEmulatedForPrivate(inout privateVol : VolumeInfo) : VolumeInfo
        if (privateVol != null) {
            return findVolumeById(privateVol.getId().replace("private", "emulated"));
        } else {
            return null;
        }
!!!3972663.java!!!	findVolumeByQualifiedUuid(inout volumeUuid : String) : VolumeInfo
        if (Objects.equals(StorageManager.UUID_PRIVATE_INTERNAL, volumeUuid)) {
            return findVolumeById(VolumeInfo.ID_PRIVATE_INTERNAL);
        } else if (Objects.equals(StorageManager.UUID_PRIMARY_PHYSICAL, volumeUuid)) {
            return getPrimaryPhysicalVolume();
        } else {
            return findVolumeByUuid(volumeUuid);
        }
!!!3972791.java!!!	getVolumes() : VolumeInfo
        try {
            return Arrays.asList(mMountService.getVolumes(0));
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3972919.java!!!	getWritablePrivateVolumes() : VolumeInfo
        try {
            final ArrayList<VolumeInfo> res = new ArrayList<>();
            for (VolumeInfo vol : mMountService.getVolumes(0)) {
                if (vol.getType() == VolumeInfo.TYPE_PRIVATE && vol.isMountedWritable()) {
                    res.add(vol);
                }
            }
            return res;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3973047.java!!!	getVolumeRecords() : VolumeRecord
        try {
            return Arrays.asList(mMountService.getVolumeRecords(0));
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3973175.java!!!	getBestVolumeDescription(inout vol : VolumeInfo) : String
        if (vol == null) return null;

        // Nickname always takes precedence when defined
        if (!TextUtils.isEmpty(vol.fsUuid)) {
            final VolumeRecord rec = findRecordByUuid(vol.fsUuid);
            if (rec != null && !TextUtils.isEmpty(rec.nickname)) {
                return rec.nickname;
            }
        }

        if (!TextUtils.isEmpty(vol.getDescription())) {
            return vol.getDescription();
        }

        if (vol.disk != null) {
            return vol.disk.getDescription();
        }

        return null;
!!!3973303.java!!!	getPrimaryPhysicalVolume() : VolumeInfo
        final List<VolumeInfo> vols = getVolumes();
        for (VolumeInfo vol : vols) {
            if (vol.isPrimaryPhysical()) {
                return vol;
            }
        }
        return null;
!!!3973431.java!!!	mount(inout volId : String) : void
        try {
            mMountService.mount(volId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3973559.java!!!	unmount(inout volId : String) : void
        try {
            mMountService.unmount(volId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3973687.java!!!	format(inout volId : String) : void
        try {
            mMountService.format(volId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3973815.java!!!	benchmark(inout volId : String) : long
        try {
            return mMountService.benchmark(volId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3973943.java!!!	partitionPublic(inout diskId : String) : void
        try {
            mMountService.partitionPublic(diskId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3974071.java!!!	partitionPrivate(inout diskId : String) : void
        try {
            mMountService.partitionPrivate(diskId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3974199.java!!!	partitionMixed(inout diskId : String, in ratio : int) : void
        try {
            mMountService.partitionMixed(diskId, ratio);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3974327.java!!!	wipeAdoptableDisks() : void
        // We only wipe devices in "adoptable" locations, which are in a
        // long-term stable slot/location on the device, where apps have a
        // reasonable chance of storing sensitive data. (Apps need to go through
        // SAF to write to transient volumes.)
        final List<DiskInfo> disks = getDisks();
        for (DiskInfo disk : disks) {
            final String diskId = disk.getId();
            if (disk.isAdoptable()) {
                Slog.d(TAG, "Found adoptable " + diskId + "; wiping");
                try {
                    // TODO: switch to explicit wipe command when we have it,
                    // for now rely on the fact that vfat format does a wipe
                    mMountService.partitionPublic(diskId);
                } catch (Exception e) {
                    Slog.w(TAG, "Failed to wipe " + diskId + ", but soldiering onward", e);
                }
            } else {
                Slog.d(TAG, "Ignorning non-adoptable disk " + disk.getId());
            }
        }
!!!3974455.java!!!	setVolumeNickname(inout fsUuid : String, inout nickname : String) : void
        try {
            mMountService.setVolumeNickname(fsUuid, nickname);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3974583.java!!!	setVolumeInited(inout fsUuid : String, inout inited : boolean) : void
        try {
            mMountService.setVolumeUserFlags(fsUuid, inited ? VolumeRecord.USER_FLAG_INITED : 0,
                    VolumeRecord.USER_FLAG_INITED);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3974711.java!!!	setVolumeSnoozed(inout fsUuid : String, inout snoozed : boolean) : void
        try {
            mMountService.setVolumeUserFlags(fsUuid, snoozed ? VolumeRecord.USER_FLAG_SNOOZED : 0,
                    VolumeRecord.USER_FLAG_SNOOZED);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3974839.java!!!	forgetVolume(inout fsUuid : String) : void
        try {
            mMountService.forgetVolume(fsUuid);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3974967.java!!!	getPrimaryStorageUuid() : String
        try {
            return mMountService.getPrimaryStorageUuid();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3975095.java!!!	setPrimaryStorageUuid(inout volumeUuid : String, inout callback : IPackageMoveObserver) : void
        try {
            mMountService.setPrimaryStorageUuid(volumeUuid, callback);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3975223.java!!!	getStorageVolume(inout file : File) : StorageVolume
        return getStorageVolume(getVolumeList(), file);
!!!3975351.java!!!	getStorageVolume(inout file : File, in userId : int) : StorageVolume
        return getStorageVolume(getVolumeList(userId, 0), file);
!!!3975479.java!!!	getStorageVolume(inout volumes : StorageVolume, inout file : File) : StorageVolume
        if (file == null) {
            return null;
        }
        try {
            file = file.getCanonicalFile();
        } catch (IOException ignored) {
            Slog.d(TAG, "Could not get canonical path for " + file);
            return null;
        }
        for (StorageVolume volume : volumes) {
            File volumeFile = volume.getPathFile();
            try {
                volumeFile = volumeFile.getCanonicalFile();
            } catch (IOException ignored) {
                continue;
            }
            if (FileUtils.contains(volumeFile, file)) {
                return volume;
            }
        }
        return null;
!!!3975607.java!!!	getVolumeState(inout mountPoint : String) : String
        final StorageVolume vol = getStorageVolume(new File(mountPoint));
        if (vol != null) {
            return vol.getState();
        } else {
            return Environment.MEDIA_UNKNOWN;
        }
!!!3975735.java!!!	getStorageVolumes() : StorageVolume
        final ArrayList<StorageVolume> res = new ArrayList<>();
        Collections.addAll(res,
                getVolumeList(UserHandle.myUserId(), FLAG_REAL_STATE | FLAG_INCLUDE_INVISIBLE));
        return res;
!!!3975863.java!!!	getPrimaryStorageVolume() : StorageVolume
        return getVolumeList(UserHandle.myUserId(), FLAG_REAL_STATE | FLAG_INCLUDE_INVISIBLE)[0];
!!!3975991.java!!!	getVolumeList() : StorageVolume
        return getVolumeList(mContext.getUserId(), 0);
!!!3976119.java!!!	getVolumeList(in userId : int, in flags : int) : StorageVolume
        final IMountService mountService = IMountService.Stub.asInterface(
                ServiceManager.getService("mount"));
        try {
            String packageName = ActivityThread.currentOpPackageName();
            if (packageName == null) {
                // Package name can be null if the activity thread is running but the app
                // hasn't bound yet. In this case we fall back to the first package in the
                // current UID. This works for runtime permissions as permission state is
                // per UID and permission realted app ops are updated for all UID packages.
                String[] packageNames = ActivityThread.getPackageManager().getPackagesForUid(
                        android.os.Process.myUid());
                if (packageNames == null || packageNames.length <= 0) {
                    return new StorageVolume[0];
                }
                packageName = packageNames[0];
            }
            final int uid = ActivityThread.getPackageManager().getPackageUid(packageName,
                    PackageManager.MATCH_DEBUG_TRIAGED_MISSING, userId);
            if (uid <= 0) {
                return new StorageVolume[0];
            }
            return mountService.getVolumeList(uid, packageName, flags);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3976247.java!!!	getVolumePaths() : String
        StorageVolume[] volumes = getVolumeList();
        int count = volumes.length;
        String[] paths = new String[count];
        for (int i = 0; i < count; i++) {
            paths[i] = volumes[i].getPath();
        }
        return paths;
!!!3976375.java!!!	getPrimaryVolume() : StorageVolume
        return getPrimaryVolume(getVolumeList());
!!!3976503.java!!!	getPrimaryVolume(inout volumes : StorageVolume) : StorageVolume
        for (StorageVolume volume : volumes) {
            if (volume.isPrimary()) {
                return volume;
            }
        }
        throw new IllegalStateException("Missing primary storage");
!!!3976631.java!!!	getStorageBytesUntilLow(inout path : File) : long
        return path.getUsableSpace() - getStorageFullBytes(path);
!!!3976759.java!!!	getStorageLowBytes(inout path : File) : long
        final long lowPercent = Settings.Global.getInt(mResolver,
                Settings.Global.SYS_STORAGE_THRESHOLD_PERCENTAGE, DEFAULT_THRESHOLD_PERCENTAGE);
        final long lowBytes = (path.getTotalSpace() * lowPercent) / 100;

        final long maxLowBytes = Settings.Global.getLong(mResolver,
                Settings.Global.SYS_STORAGE_THRESHOLD_MAX_BYTES, DEFAULT_THRESHOLD_MAX_BYTES);

        return Math.min(lowBytes, maxLowBytes);
!!!3976887.java!!!	getStorageFullBytes(inout path : File) : long
        return Settings.Global.getLong(mResolver, Settings.Global.SYS_STORAGE_FULL_THRESHOLD_BYTES,
                DEFAULT_FULL_THRESHOLD_BYTES);
!!!3977015.java!!!	createUserKey(in userId : int, in serialNumber : int, inout ephemeral : boolean) : void
        try {
            mMountService.createUserKey(userId, serialNumber, ephemeral);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3977143.java!!!	destroyUserKey(in userId : int) : void
        try {
            mMountService.destroyUserKey(userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3977271.java!!!	unlockUserKey(in userId : int, in serialNumber : int, inout token : byte, inout secret : byte) : void
        try {
            mMountService.unlockUserKey(userId, serialNumber, token, secret);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3977399.java!!!	lockUserKey(in userId : int) : void
        try {
            mMountService.lockUserKey(userId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3977527.java!!!	prepareUserStorage(inout volumeUuid : String, in userId : int, in serialNumber : int, in flags : int) : void
        try {
            mMountService.prepareUserStorage(volumeUuid, userId, serialNumber, flags);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3977655.java!!!	destroyUserStorage(inout volumeUuid : String, in userId : int, in flags : int) : void
        try {
            mMountService.destroyUserStorage(volumeUuid, userId, flags);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!3977783.java!!!	isUserKeyUnlocked(in userId : int) : boolean
        if (sMountService == null) {
            sMountService = IMountService.Stub
                    .asInterface(ServiceManager.getService("mount"));
        }
        if (sMountService == null) {
            Slog.w(TAG, "Early during boot, assuming locked");
            return false;
        }
        final long token = Binder.clearCallingIdentity();
        try {
            return sMountService.isUserKeyUnlocked(userId);
        } catch (RemoteException e) {
            throw e.rethrowAsRuntimeException();
        } finally {
            Binder.restoreCallingIdentity(token);
        }
!!!3977911.java!!!	isEncrypted(inout file : File) : boolean
        if (FileUtils.contains(Environment.getDataDirectory(), file)) {
            return isEncrypted();
        } else if (FileUtils.contains(Environment.getExpandDirectory(), file)) {
            return true;
        }
        // TODO: extend to support shared storage
        return false;
!!!3978039.java!!!	isEncryptable() : boolean
        final String state = SystemProperties.get("ro.crypto.state", "unsupported");
        return !"unsupported".equalsIgnoreCase(state);
!!!3978167.java!!!	isEncrypted() : boolean
        final String state = SystemProperties.get("ro.crypto.state", "");
        return "encrypted".equalsIgnoreCase(state);
!!!3978295.java!!!	isFileEncryptedNativeOnly() : boolean
        if (!isEncrypted()) {
            return false;
        }

        final String status = SystemProperties.get("ro.crypto.type", "");
        return "file".equalsIgnoreCase(status);
!!!3978423.java!!!	isBlockEncrypted() : boolean
        if (!isEncrypted()) {
            return false;
        }
        final String status = SystemProperties.get("ro.crypto.type", "");
        return "block".equalsIgnoreCase(status);
!!!3978551.java!!!	isNonDefaultBlockEncrypted() : boolean
        if (!isBlockEncrypted()) {
            return false;
        }

        try {
            IMountService mountService = IMountService.Stub.asInterface(
                    ServiceManager.getService("mount"));
            return mountService.getPasswordType() != CRYPT_TYPE_DEFAULT;
        } catch (RemoteException e) {
            Log.e(TAG, "Error getting encryption type");
            return false;
        }
!!!3978679.java!!!	isBlockEncrypting() : boolean
        final String state = SystemProperties.get("vold.encrypt_progress", "");
        return !"".equalsIgnoreCase(state);
!!!3978807.java!!!	inCryptKeeperBounce() : boolean
        final String status = SystemProperties.get("vold.decrypt");
        return "trigger_restart_min_framework".equals(status);
!!!3978935.java!!!	isFileEncryptedEmulatedOnly() : boolean
        return SystemProperties.getBoolean(StorageManager.PROP_EMULATE_FBE, false);
!!!3979063.java!!!	isFileEncryptedNativeOrEmulated() : boolean
        return isFileEncryptedNativeOnly()
               || isFileEncryptedEmulatedOnly();
!!!3979191.java!!!	maybeTranslateEmulatedPathToInternal(inout path : File) : File
        final IMountService mountService = IMountService.Stub.asInterface(
                ServiceManager.getService("mount"));
        try {
            final VolumeInfo[] vols = mountService.getVolumes(0);
            for (VolumeInfo vol : vols) {
                if ((vol.getType() == VolumeInfo.TYPE_EMULATED
                        || vol.getType() == VolumeInfo.TYPE_PUBLIC) && vol.isMountedReadable()) {
                    final File internalPath = FileUtils.rewriteAfterRename(vol.getPath(),
                            vol.getInternalPath(), path);
                    if (internalPath != null && internalPath.exists()) {
                        return internalPath;
                    }
                }
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
        return path;
!!!3979319.java!!!	mountAppFuse(inout name : String) : ParcelFileDescriptor
        try {
            return mMountService.mountAppFuse(name);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
