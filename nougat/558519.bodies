class TwoStatePreference
!!!4003511.java!!!	TwoStatePreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);
!!!4003639.java!!!	TwoStatePreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!4003767.java!!!	TwoStatePreference(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!4003895.java!!!	TwoStatePreference(inout context : Context)
        this(context, null);
!!!4004023.java!!!	onClick() : void
        super.onClick();

        final boolean newValue = !isChecked();
        if (callChangeListener(newValue)) {
            setChecked(newValue);
        }
!!!4004151.java!!!	setChecked(inout checked : boolean) : void
        // Always persist/notify the first time; don't assume the field's default of false.
        final boolean changed = mChecked != checked;
        if (changed || !mCheckedSet) {
            mChecked = checked;
            mCheckedSet = true;
            persistBoolean(checked);
            if (changed) {
                notifyDependencyChange(shouldDisableDependents());
                notifyChanged();
            }
        }
!!!4004279.java!!!	isChecked() : boolean
        return mChecked;
!!!4004407.java!!!	shouldDisableDependents() : boolean
        boolean shouldDisable = mDisableDependentsState ? mChecked : !mChecked;
        return shouldDisable || super.shouldDisableDependents();
!!!4004535.java!!!	setSummaryOn(inout summary : CharSequence) : void
        mSummaryOn = summary;
        if (isChecked()) {
            notifyChanged();
        }
!!!4004663.java!!!	setSummaryOn(in summaryResId : int) : void
        setSummaryOn(getContext().getString(summaryResId));
!!!4004791.java!!!	getSummaryOn() : CharSequence
        return mSummaryOn;
!!!4004919.java!!!	setSummaryOff(inout summary : CharSequence) : void
        mSummaryOff = summary;
        if (!isChecked()) {
            notifyChanged();
        }
!!!4005047.java!!!	setSummaryOff(in summaryResId : int) : void
        setSummaryOff(getContext().getString(summaryResId));
!!!4005175.java!!!	getSummaryOff() : CharSequence
        return mSummaryOff;
!!!4005303.java!!!	getDisableDependentsState() : boolean
        return mDisableDependentsState;
!!!4005431.java!!!	setDisableDependentsState(inout disableDependentsState : boolean) : void
        mDisableDependentsState = disableDependentsState;
!!!4005559.java!!!	onGetDefaultValue(inout a : TypedArray, in index : int) : Object
        return a.getBoolean(index, false);
!!!4005687.java!!!	onSetInitialValue(inout restoreValue : boolean, inout defaultValue : Object) : void
        setChecked(restoreValue ? getPersistedBoolean(mChecked)
                : (Boolean) defaultValue);
!!!4005815.java!!!	syncSummaryView(inout view : View) : void
        // Sync the summary view
        TextView summaryView = (TextView) view.findViewById(com.android.internal.R.id.summary);
        if (summaryView != null) {
            boolean useDefaultSummary = true;
            if (mChecked && !TextUtils.isEmpty(mSummaryOn)) {
                summaryView.setText(mSummaryOn);
                useDefaultSummary = false;
            } else if (!mChecked && !TextUtils.isEmpty(mSummaryOff)) {
                summaryView.setText(mSummaryOff);
                useDefaultSummary = false;
            }

            if (useDefaultSummary) {
                final CharSequence summary = getSummary();
                if (!TextUtils.isEmpty(summary)) {
                    summaryView.setText(summary);
                    useDefaultSummary = false;
                }
            }

            int newVisibility = View.GONE;
            if (!useDefaultSummary) {
                // Someone has written to it
                newVisibility = View.VISIBLE;
            }
            if (newVisibility != summaryView.getVisibility()) {
                summaryView.setVisibility(newVisibility);
            }
        }
!!!4005943.java!!!	onSaveInstanceState() : Parcelable
        final Parcelable superState = super.onSaveInstanceState();
        if (isPersistent()) {
            // No need to save instance state since it's persistent
            return superState;
        }

        final SavedState myState = new SavedState(superState);
        myState.checked = isChecked();
        return myState;
!!!4006071.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        if (state == null || !state.getClass().equals(SavedState.class)) {
            // Didn't save state for us in onSaveInstanceState
            super.onRestoreInstanceState(state);
            return;
        }

        SavedState myState = (SavedState) state;
        super.onRestoreInstanceState(myState.getSuperState());
        setChecked(myState.checked);
