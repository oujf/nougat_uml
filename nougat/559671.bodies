class DialogPreference
!!!4014391.java!!!	DialogPreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);

        final TypedArray a = context.obtainStyledAttributes(attrs,
                com.android.internal.R.styleable.DialogPreference, defStyleAttr, defStyleRes);
        mDialogTitle = a.getString(com.android.internal.R.styleable.DialogPreference_dialogTitle);
        if (mDialogTitle == null) {
            // Fallback on the regular title of the preference
            // (the one that is seen in the list)
            mDialogTitle = getTitle();
        }
        mDialogMessage = a.getString(com.android.internal.R.styleable.DialogPreference_dialogMessage);
        mDialogIcon = a.getDrawable(com.android.internal.R.styleable.DialogPreference_dialogIcon);
        mPositiveButtonText = a.getString(com.android.internal.R.styleable.DialogPreference_positiveButtonText);
        mNegativeButtonText = a.getString(com.android.internal.R.styleable.DialogPreference_negativeButtonText);
        mDialogLayoutResId = a.getResourceId(com.android.internal.R.styleable.DialogPreference_dialogLayout,
                mDialogLayoutResId);
        a.recycle();
!!!4014519.java!!!	DialogPreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!4014647.java!!!	DialogPreference(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, com.android.internal.R.attr.dialogPreferenceStyle);
!!!4014775.java!!!	DialogPreference(inout context : Context)
        this(context, null);
!!!4014903.java!!!	setDialogTitle(inout dialogTitle : CharSequence) : void
        mDialogTitle = dialogTitle;
!!!4015031.java!!!	setDialogTitle(in dialogTitleResId : int) : void
        setDialogTitle(getContext().getString(dialogTitleResId));
!!!4015159.java!!!	getDialogTitle() : CharSequence
        return mDialogTitle;
!!!4015287.java!!!	setDialogMessage(inout dialogMessage : CharSequence) : void
        mDialogMessage = dialogMessage;
!!!4015415.java!!!	setDialogMessage(in dialogMessageResId : int) : void
        setDialogMessage(getContext().getString(dialogMessageResId));
!!!4015543.java!!!	getDialogMessage() : CharSequence
        return mDialogMessage;
!!!4015671.java!!!	setDialogIcon(inout dialogIcon : Drawable) : void
        mDialogIcon = dialogIcon;
!!!4015799.java!!!	setDialogIcon(in dialogIconRes : int) : void
        mDialogIcon = getContext().getDrawable(dialogIconRes);
!!!4015927.java!!!	getDialogIcon() : Drawable
        return mDialogIcon;
!!!4016055.java!!!	setPositiveButtonText(inout positiveButtonText : CharSequence) : void
        mPositiveButtonText = positiveButtonText;
!!!4016183.java!!!	setPositiveButtonText(in positiveButtonTextResId : int) : void
        setPositiveButtonText(getContext().getString(positiveButtonTextResId));
!!!4016311.java!!!	getPositiveButtonText() : CharSequence
        return mPositiveButtonText;
!!!4016439.java!!!	setNegativeButtonText(inout negativeButtonText : CharSequence) : void
        mNegativeButtonText = negativeButtonText;
!!!4016567.java!!!	setNegativeButtonText(in negativeButtonTextResId : int) : void
        setNegativeButtonText(getContext().getString(negativeButtonTextResId));
!!!4016695.java!!!	getNegativeButtonText() : CharSequence
        return mNegativeButtonText;
!!!4016823.java!!!	setDialogLayoutResource(in dialogLayoutResId : int) : void
        mDialogLayoutResId = dialogLayoutResId;
!!!4016951.java!!!	getDialogLayoutResource() : int
        return mDialogLayoutResId;
!!!4017207.java!!!	onClick() : void
        if (mDialog != null && mDialog.isShowing()) return;

        showDialog(null);
!!!4017335.java!!!	showDialog(inout state : Bundle) : void
        Context context = getContext();

        mWhichButtonClicked = DialogInterface.BUTTON_NEGATIVE;
        
        mBuilder = new AlertDialog.Builder(context)
            .setTitle(mDialogTitle)
            .setIcon(mDialogIcon)
            .setPositiveButton(mPositiveButtonText, this)
            .setNegativeButton(mNegativeButtonText, this);

        View contentView = onCreateDialogView();
        if (contentView != null) {
            onBindDialogView(contentView);
            mBuilder.setView(contentView);
        } else {
            mBuilder.setMessage(mDialogMessage);
        }
        
        onPrepareDialogBuilder(mBuilder);
        
        getPreferenceManager().registerOnActivityDestroyListener(this);
        
        // Create the dialog
        final Dialog dialog = mDialog = mBuilder.create();
        if (state != null) {
            dialog.onRestoreInstanceState(state);
        }
        if (needInputMethod()) {
            requestInputMethod(dialog);
        }
        dialog.setOnDismissListener(this);
        dialog.show();
!!!4017463.java!!!	needInputMethod() : boolean
        return false;
!!!4017591.java!!!	requestInputMethod(inout dialog : Dialog) : void
        Window window = dialog.getWindow();
        window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
!!!4017719.java!!!	onCreateDialogView() : View
        if (mDialogLayoutResId == 0) {
            return null;
        }
        
        LayoutInflater inflater = LayoutInflater.from(mBuilder.getContext());
        return inflater.inflate(mDialogLayoutResId, null);
!!!4017847.java!!!	onBindDialogView(inout view : View) : void
        View dialogMessageView = view.findViewById(com.android.internal.R.id.message);
        
        if (dialogMessageView != null) {
            final CharSequence message = getDialogMessage();
            int newVisibility = View.GONE;
            
            if (!TextUtils.isEmpty(message)) {
                if (dialogMessageView instanceof TextView) {
                    ((TextView) dialogMessageView).setText(message);
                }
                
                newVisibility = View.VISIBLE;
            }
            
            if (dialogMessageView.getVisibility() != newVisibility) {
                dialogMessageView.setVisibility(newVisibility);
            }
        }
!!!4017975.java!!!	onClick(inout dialog : DialogInterface, in which : int) : void
        mWhichButtonClicked = which;
!!!4018103.java!!!	onDismiss(inout dialog : DialogInterface) : void
        
        getPreferenceManager().unregisterOnActivityDestroyListener(this);
        
        mDialog = null;
        onDialogClosed(mWhichButtonClicked == DialogInterface.BUTTON_POSITIVE);
!!!4018359.java!!!	getDialog() : Dialog
        return mDialog;
!!!4018487.java!!!	onActivityDestroy() : void
        
        if (mDialog == null || !mDialog.isShowing()) {
            return;
        }
        
        mDialog.dismiss();
!!!4018615.java!!!	onSaveInstanceState() : Parcelable
        final Parcelable superState = super.onSaveInstanceState();
        if (mDialog == null || !mDialog.isShowing()) {
            return superState;
        }

        final SavedState myState = new SavedState(superState);
        myState.isDialogShowing = true;
        myState.dialogBundle = mDialog.onSaveInstanceState();
        return myState;
!!!4018743.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        if (state == null || !state.getClass().equals(SavedState.class)) {
            // Didn't save state for us in onSaveInstanceState
            super.onRestoreInstanceState(state);
            return;
        }

        SavedState myState = (SavedState) state;
        super.onRestoreInstanceState(myState.getSuperState());
        if (myState.isDialogShowing) {
            showDialog(myState.dialogBundle);
        }
