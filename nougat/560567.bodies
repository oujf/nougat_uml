class EditTextPreference
!!!4019255.java!!!	EditTextPreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);
        
        mEditText = new EditText(context, attrs);
        
        // Give it an ID so it can be saved/restored
        mEditText.setId(com.android.internal.R.id.edit);
        
        /*
         * The preference framework and view framework both have an 'enabled'
         * attribute. Most likely, the 'enabled' specified in this XML is for
         * the preference framework, but it was also given to the view framework.
         * We reset the enabled state.
         */
        mEditText.setEnabled(true);
!!!4019383.java!!!	EditTextPreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!4019511.java!!!	EditTextPreference(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, com.android.internal.R.attr.editTextPreferenceStyle);
!!!4019639.java!!!	EditTextPreference(inout context : Context)
        this(context, null);
!!!4019767.java!!!	setText(inout text : String) : void
        // Always persist/notify the first time.
        final boolean changed = !TextUtils.equals(mText, text);
        if (changed || !mTextSet) {
            mText = text;
            mTextSet = true;
            persistString(text);
            if(changed) {
                notifyDependencyChange(shouldDisableDependents());
                notifyChanged();
            }
        }
!!!4019895.java!!!	getText() : String
        return mText;
!!!4020023.java!!!	onBindDialogView(inout view : View) : void
        super.onBindDialogView(view);

        EditText editText = mEditText;
        editText.setText(getText());
        
        ViewParent oldParent = editText.getParent();
        if (oldParent != view) {
            if (oldParent != null) {
                ((ViewGroup) oldParent).removeView(editText);
            }
            onAddEditTextToDialogView(view, editText);
        }
!!!4020151.java!!!	onAddEditTextToDialogView(inout dialogView : View, inout editText : EditText) : void
        ViewGroup container = (ViewGroup) dialogView
                .findViewById(com.android.internal.R.id.edittext_container);
        if (container != null) {
            container.addView(editText, ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.WRAP_CONTENT);
        }
!!!4020279.java!!!	onDialogClosed(inout positiveResult : boolean) : void
        super.onDialogClosed(positiveResult);
        
        if (positiveResult) {
            String value = mEditText.getText().toString();
            if (callChangeListener(value)) {
                setText(value);
            }
        }
!!!4020407.java!!!	onGetDefaultValue(inout a : TypedArray, in index : int) : Object
        return a.getString(index);
!!!4020535.java!!!	onSetInitialValue(inout restoreValue : boolean, inout defaultValue : Object) : void
        setText(restoreValue ? getPersistedString(mText) : (String) defaultValue);
!!!4020663.java!!!	shouldDisableDependents() : boolean
        return TextUtils.isEmpty(mText) || super.shouldDisableDependents();
!!!4020791.java!!!	getEditText() : EditText
        return mEditText;
!!!4020919.java!!!	needInputMethod() : boolean
        // We want the input method to show, if possible, when dialog is displayed
        return true;
!!!4021047.java!!!	onSaveInstanceState() : Parcelable
        final Parcelable superState = super.onSaveInstanceState();
        if (isPersistent()) {
            // No need to save instance state since it's persistent
            return superState;
        }
        
        final SavedState myState = new SavedState(superState);
        myState.text = getText();
        return myState;
!!!4021175.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        if (state == null || !state.getClass().equals(SavedState.class)) {
            // Didn't save state for us in onSaveInstanceState
            super.onRestoreInstanceState(state);
            return;
        }
         
        SavedState myState = (SavedState) state;
        super.onRestoreInstanceState(myState.getSuperState());
        setText(myState.text);
