class ListPreference
!!!4024119.java!!!	ListPreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);

        TypedArray a = context.obtainStyledAttributes(
                attrs, com.android.internal.R.styleable.ListPreference, defStyleAttr, defStyleRes);
        mEntries = a.getTextArray(com.android.internal.R.styleable.ListPreference_entries);
        mEntryValues = a.getTextArray(com.android.internal.R.styleable.ListPreference_entryValues);
        a.recycle();

        /* Retrieve the Preference summary attribute since it's private
         * in the Preference class.
         */
        a = context.obtainStyledAttributes(attrs,
                com.android.internal.R.styleable.Preference, defStyleAttr, defStyleRes);
        mSummary = a.getString(com.android.internal.R.styleable.Preference_summary);
        a.recycle();
!!!4024247.java!!!	ListPreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!4024375.java!!!	ListPreference(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, com.android.internal.R.attr.dialogPreferenceStyle);
!!!4024503.java!!!	ListPreference(inout context : Context)
        this(context, null);
!!!4024631.java!!!	setEntries(inout entries : CharSequence) : void
        mEntries = entries;
!!!4024759.java!!!	setEntries(in entriesResId : int) : void
        setEntries(getContext().getResources().getTextArray(entriesResId));
!!!4024887.java!!!	getEntries() : CharSequence
        return mEntries;
!!!4025015.java!!!	setEntryValues(inout entryValues : CharSequence) : void
        mEntryValues = entryValues;
!!!4025143.java!!!	setEntryValues(in entryValuesResId : int) : void
        setEntryValues(getContext().getResources().getTextArray(entryValuesResId));
!!!4025271.java!!!	getEntryValues() : CharSequence
        return mEntryValues;
!!!4025399.java!!!	setValue(inout value : String) : void
        // Always persist/notify the first time.
        final boolean changed = !TextUtils.equals(mValue, value);
        if (changed || !mValueSet) {
            mValue = value;
            mValueSet = true;
            persistString(value);
            if (changed) {
                notifyChanged();
            }
        }
!!!4025527.java!!!	getSummary() : CharSequence
        final CharSequence entry = getEntry();
        if (mSummary == null) {
            return super.getSummary();
        } else {
            return String.format(mSummary, entry == null ? "" : entry);
        }
!!!4025655.java!!!	setSummary(inout summary : CharSequence) : void
        super.setSummary(summary);
        if (summary == null && mSummary != null) {
            mSummary = null;
        } else if (summary != null && !summary.equals(mSummary)) {
            mSummary = summary.toString();
        }
!!!4025783.java!!!	setValueIndex(in index : int) : void
        if (mEntryValues != null) {
            setValue(mEntryValues[index].toString());
        }
!!!4025911.java!!!	getValue() : String
        return mValue; 
!!!4026039.java!!!	getEntry() : CharSequence
        int index = getValueIndex();
        return index >= 0 && mEntries != null ? mEntries[index] : null;
!!!4026167.java!!!	findIndexOfValue(inout value : String) : int
        if (value != null && mEntryValues != null) {
            for (int i = mEntryValues.length - 1; i >= 0; i--) {
                if (mEntryValues[i].equals(value)) {
                    return i;
                }
            }
        }
        return -1;
!!!4026295.java!!!	getValueIndex() : int
        return findIndexOfValue(mValue);
!!!4026423.java!!!	onPrepareDialogBuilder(inout builder : AlertDialog::Builder) : void
        super.onPrepareDialogBuilder(builder);
        
        if (mEntries == null || mEntryValues == null) {
            throw new IllegalStateException(
                    "ListPreference requires an entries array and an entryValues array.");
        }

        mClickedDialogEntryIndex = getValueIndex();
        builder.setSingleChoiceItems(mEntries, mClickedDialogEntryIndex, 
                new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        mClickedDialogEntryIndex = which;

                        /*
                         * Clicking on an item simulates the positive button
                         * click, and dismisses the dialog.
                         */
                        ListPreference.this.onClick(dialog, DialogInterface.BUTTON_POSITIVE);
                        dialog.dismiss();
                    }
        });
        
        /*
         * The typical interaction for list-based dialogs is to have
         * click-on-an-item dismiss the dialog instead of the user having to
         * press 'Ok'.
         */
        builder.setPositiveButton(null, null);
!!!4026551.java!!!	onDialogClosed(inout positiveResult : boolean) : void
        super.onDialogClosed(positiveResult);
        
        if (positiveResult && mClickedDialogEntryIndex >= 0 && mEntryValues != null) {
            String value = mEntryValues[mClickedDialogEntryIndex].toString();
            if (callChangeListener(value)) {
                setValue(value);
            }
        }
!!!4026679.java!!!	onGetDefaultValue(inout a : TypedArray, in index : int) : Object
        return a.getString(index);
!!!4026807.java!!!	onSetInitialValue(inout restoreValue : boolean, inout defaultValue : Object) : void
        setValue(restoreValue ? getPersistedString(mValue) : (String) defaultValue);
!!!4026935.java!!!	onSaveInstanceState() : Parcelable
        final Parcelable superState = super.onSaveInstanceState();
        if (isPersistent()) {
            // No need to save instance state since it's persistent
            return superState;
        }
        
        final SavedState myState = new SavedState(superState);
        myState.value = getValue();
        return myState;
!!!4027063.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        if (state == null || !state.getClass().equals(SavedState.class)) {
            // Didn't save state for us in onSaveInstanceState
            super.onRestoreInstanceState(state);
            return;
        }
         
        SavedState myState = (SavedState) state;
        super.onRestoreInstanceState(myState.getSuperState());
        setValue(myState.value);
