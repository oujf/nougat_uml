class PreferenceInflater
!!!4050615.java!!!	PreferenceInflater(inout context : Context, inout preferenceManager : PreferenceManager)
        super(context);
        init(preferenceManager);
!!!4050743.java!!!	PreferenceInflater(inout original : GenericInflater, inout preferenceManager : PreferenceManager, inout newContext : Context)
        super(original, newContext);
        init(preferenceManager);
!!!4050871.java!!!	cloneInContext(inout newContext : Context) : GenericInflater
        return new PreferenceInflater(this, mPreferenceManager, newContext);
!!!4050999.java!!!	init(inout preferenceManager : PreferenceManager) : void
        mPreferenceManager = preferenceManager;
        setDefaultPackage("android.preference.");
!!!4051127.java!!!	onCreateCustomFromTag(inout parser : XmlPullParser, inout parentPreference : Preference, inout attrs : AttributeSet) : boolean
        final String tag = parser.getName();
        
        if (tag.equals(INTENT_TAG_NAME)) {
            Intent intent = null;
            
            try {
                intent = Intent.parseIntent(getContext().getResources(), parser, attrs);
            } catch (IOException e) {
                XmlPullParserException ex = new XmlPullParserException(
                        "Error parsing preference");
                ex.initCause(e);
                throw ex;
            }
            
            if (intent != null) {
                parentPreference.setIntent(intent);
            }
            
            return true;
        } else if (tag.equals(EXTRA_TAG_NAME)) {
            getContext().getResources().parseBundleExtra(EXTRA_TAG_NAME, attrs,
                    parentPreference.getExtras());
            try {
                XmlUtils.skipCurrentTag(parser);
            } catch (IOException e) {
                XmlPullParserException ex = new XmlPullParserException(
                        "Error parsing preference");
                ex.initCause(e);
                throw ex;
            }
            return true;
        }
        
        return false;
!!!4051255.java!!!	onMergeRoots(inout givenRoot : PreferenceGroup, inout attachToGivenRoot : boolean, inout xmlRoot : PreferenceGroup) : PreferenceGroup
        // If we were given a Preferences, use it as the root (ignoring the root
        // Preferences from the XML file).
        if (givenRoot == null) {
            xmlRoot.onAttachedToHierarchy(mPreferenceManager);
            return xmlRoot;
        } else {
            return givenRoot;
        }
