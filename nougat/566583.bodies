class MediaSize
!!!4091575.java!!!	MediaSize(inout id : String, inout packageName : String, in labelResId : int, in widthMils : int, in heightMils : int)
            this(id, null, packageName, widthMils, heightMils, labelResId);

            // Build this mapping only for predefined media sizes.
            sIdToMediaSizeMap.put(mId, this);
!!!4091703.java!!!	MediaSize(inout id : String, inout label : String, in widthMils : int, in heightMils : int)
            this(id, label, null, widthMils, heightMils, 0);
!!!4091831.java!!!	getAllPredefinedSizes() : ArraySet
            ArraySet<MediaSize> definedMediaSizes = new ArraySet<>(sIdToMediaSizeMap.values());

            definedMediaSizes.remove(UNKNOWN_PORTRAIT);
            definedMediaSizes.remove(UNKNOWN_LANDSCAPE);

            return definedMediaSizes;
!!!4091959.java!!!	MediaSize(inout id : String, inout label : String, inout packageName : String, in widthMils : int, in heightMils : int, in labelResId : int)
            mPackageName = packageName;
            mId = Preconditions.checkStringNotEmpty(id, "id cannot be empty.");
            mLabelResId = labelResId;
            mWidthMils = Preconditions.checkArgumentPositive(widthMils, "widthMils cannot be " +
                    "less than or equal to zero.");
            mHeightMils = Preconditions.checkArgumentPositive(heightMils, "heightMils cannot be " +
                    "less than or equal to zero.");
            mLabel = label;

            // The label has to be either a string ot a StringRes
            Preconditions.checkArgument(!TextUtils.isEmpty(label) !=
                    (!TextUtils.isEmpty(packageName) && labelResId != 0), "label cannot be empty.");
!!!4092087.java!!!	getId() : String
            return mId;
!!!4092215.java!!!	getLabel(inout packageManager : PackageManager) : String
            if (!TextUtils.isEmpty(mPackageName) && mLabelResId > 0) {
                try {
                    return packageManager.getResourcesForApplication(
                            mPackageName).getString(mLabelResId);
                } catch (NotFoundException | NameNotFoundException e) {
                    Log.w(LOG_TAG, "Could not load resouce" + mLabelResId
                            + " from package " + mPackageName);
                }
            }
            return mLabel;
!!!4092343.java!!!	getWidthMils() : int
            return mWidthMils;
!!!4092471.java!!!	getHeightMils() : int
            return mHeightMils;
!!!4092599.java!!!	isPortrait() : boolean
            return mHeightMils >= mWidthMils;
!!!4092727.java!!!	asPortrait() : PrintAttributes::MediaSize
            if (isPortrait()) {
                return this;
            }
            return new MediaSize(mId, mLabel, mPackageName,
                    Math.min(mWidthMils, mHeightMils),
                    Math.max(mWidthMils, mHeightMils),
                    mLabelResId);
!!!4092855.java!!!	asLandscape() : PrintAttributes::MediaSize
            if (!isPortrait()) {
                return this;
            }
            return new MediaSize(mId, mLabel, mPackageName,
                    Math.max(mWidthMils, mHeightMils),
                    Math.min(mWidthMils, mHeightMils),
                    mLabelResId);
!!!4092983.java!!!	writeToParcel(inout parcel : Parcel) : void
            parcel.writeString(mId);
            parcel.writeString(mLabel);
            parcel.writeString(mPackageName);
            parcel.writeInt(mWidthMils);
            parcel.writeInt(mHeightMils);
            parcel.writeInt(mLabelResId);
!!!4093111.java!!!	createFromParcel(inout parcel : Parcel) : PrintAttributes::MediaSize
            return new MediaSize(
                    parcel.readString(),
                    parcel.readString(),
                    parcel.readString(),
                    parcel.readInt(),
                    parcel.readInt(),
                    parcel.readInt());
!!!4093239.java!!!	hashCode() : int
            final int prime = 31;
            int result = 1;
            result = prime * result + mWidthMils;
            result = prime * result + mHeightMils;
            return result;
!!!4093367.java!!!	equals(inout obj : Object) : boolean
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            MediaSize other = (MediaSize) obj;
            if (mWidthMils != other.mWidthMils) {
                return false;
            }
            if (mHeightMils != other.mHeightMils) {
                return false;
            }
            return true;
!!!4093495.java!!!	toString() : String
            StringBuilder builder = new StringBuilder();
            builder.append("MediaSize{");
            builder.append("id: ").append(mId);
            builder.append(", label: ").append(mLabel);
            builder.append(", packageName: ").append(mPackageName);
            builder.append(", heightMils: ").append(mHeightMils);
            builder.append(", widthMils: ").append(mWidthMils);
            builder.append(", labelResId: ").append(mLabelResId);
            builder.append("}");
            return builder.toString();
!!!4093623.java!!!	getStandardMediaSizeById(inout id : String) : PrintAttributes::MediaSize
            return sIdToMediaSizeMap.get(id);
