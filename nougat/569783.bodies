class PrintJobInfo
!!!4117431.java!!!	PrintJobInfo()
        mProgress = -1;
!!!4117559.java!!!	PrintJobInfo(inout other : PrintJobInfo)
        mId = other.mId;
        mLabel = other.mLabel;
        mPrinterId = other.mPrinterId;
        mPrinterName = other.mPrinterName;
        mState = other.mState;
        mAppId = other.mAppId;
        mTag = other.mTag;
        mCreationTime = other.mCreationTime;
        mCopies = other.mCopies;
        mPageRanges = other.mPageRanges;
        mAttributes = other.mAttributes;
        mDocumentInfo = other.mDocumentInfo;
        mProgress = other.mProgress;
        mStatus = other.mStatus;
        mStatusRes = other.mStatusRes;
        mStatusResAppPackageName = other.mStatusResAppPackageName;
        mCanceling = other.mCanceling;
        mAdvancedOptions = other.mAdvancedOptions;
!!!4117687.java!!!	PrintJobInfo(inout parcel : Parcel)
        mId = parcel.readParcelable(null);
        mLabel = parcel.readString();
        mPrinterId = parcel.readParcelable(null);
        mPrinterName = parcel.readString();
        mState = parcel.readInt();
        mAppId = parcel.readInt();
        mTag = parcel.readString();
        mCreationTime = parcel.readLong();
        mCopies = parcel.readInt();
        Parcelable[] parcelables = parcel.readParcelableArray(null);
        if (parcelables != null) {
            mPageRanges = new PageRange[parcelables.length];
            for (int i = 0; i < parcelables.length; i++) {
                mPageRanges[i] = (PageRange) parcelables[i];
            }
        }
        mAttributes = (PrintAttributes) parcel.readParcelable(null);
        mDocumentInfo = (PrintDocumentInfo) parcel.readParcelable(null);
        mProgress = parcel.readFloat();
        mStatus = parcel.readCharSequence();
        mStatusRes = parcel.readInt();
        mStatusResAppPackageName = parcel.readCharSequence();
        mCanceling = (parcel.readInt() == 1);
        mAdvancedOptions = parcel.readBundle();

        if (mAdvancedOptions != null) {
            Preconditions.checkArgument(!mAdvancedOptions.containsKey(null));
        }
!!!4117815.java!!!	getId() : PrintJobId
        return mId;
!!!4117943.java!!!	setId(inout id : PrintJobId) : void
        this.mId = id;
!!!4118071.java!!!	getLabel() : String
        return mLabel;
!!!4118199.java!!!	setLabel(inout label : String) : void
        mLabel = label;
!!!4118327.java!!!	getPrinterId() : PrinterId
        return mPrinterId;
!!!4118455.java!!!	setPrinterId(inout printerId : PrinterId) : void
        mPrinterId = printerId;
!!!4118583.java!!!	getPrinterName() : String
        return mPrinterName;
!!!4118711.java!!!	setPrinterName(inout printerName : String) : void
        mPrinterName = printerName;
!!!4118839.java!!!	getState() : int
        return mState;
!!!4118967.java!!!	setState(in state : int) : void
        mState = state;
!!!4119095.java!!!	setProgress(in progress : float) : void
        Preconditions.checkArgumentInRange(progress, 0, 1, "progress");

        mProgress = progress;
!!!4119223.java!!!	setStatus(inout status : CharSequence) : void
        mStatusRes = 0;
        mStatusResAppPackageName = null;

        mStatus = status;
!!!4119351.java!!!	setStatus(in status : int, inout appPackageName : CharSequence) : void
        mStatus = null;

        mStatusRes = status;
        mStatusResAppPackageName = appPackageName;
!!!4119479.java!!!	getAppId() : int
        return mAppId;
!!!4119607.java!!!	setAppId(in appId : int) : void
        mAppId = appId;
!!!4119735.java!!!	getTag() : String
        return mTag;
!!!4119863.java!!!	setTag(inout tag : String) : void
        mTag = tag;
!!!4119991.java!!!	getCreationTime() : long
        return mCreationTime;
!!!4120119.java!!!	setCreationTime(in creationTime : long) : void
        if (creationTime < 0) {
            throw new IllegalArgumentException("creationTime must be non-negative.");
        }
        mCreationTime = creationTime;
!!!4120247.java!!!	getCopies() : int
        return mCopies;
!!!4120375.java!!!	setCopies(in copyCount : int) : void
        if (copyCount < 1) {
            throw new IllegalArgumentException("Copies must be more than one.");
        }
        mCopies = copyCount;
!!!4120503.java!!!	getPages() : PageRange
        return mPageRanges;
!!!4120631.java!!!	setPages(inout pageRanges : PageRange) : void
        mPageRanges = pageRanges;
!!!4120759.java!!!	getAttributes() : PrintAttributes
        return mAttributes;
!!!4120887.java!!!	setAttributes(inout attributes : PrintAttributes) : void
        mAttributes = attributes;
!!!4121015.java!!!	getDocumentInfo() : PrintDocumentInfo
        return mDocumentInfo;
!!!4121143.java!!!	setDocumentInfo(inout info : PrintDocumentInfo) : void
        mDocumentInfo = info;
!!!4121271.java!!!	isCancelling() : boolean
        return mCanceling;
!!!4121399.java!!!	setCancelling(inout cancelling : boolean) : void
        mCanceling = cancelling;
!!!4121527.java!!!	hasAdvancedOption(inout key : String) : boolean
        return mAdvancedOptions != null && mAdvancedOptions.containsKey(key);
!!!4121655.java!!!	getAdvancedStringOption(inout key : String) : String
        if (mAdvancedOptions != null) {
            return mAdvancedOptions.getString(key);
        }
        return null;
!!!4121783.java!!!	getAdvancedIntOption(inout key : String) : int
        if (mAdvancedOptions != null) {
            return mAdvancedOptions.getInt(key);
        }
        return 0;
!!!4121911.java!!!	getAdvancedOptions() : Bundle
        return mAdvancedOptions;
!!!4122039.java!!!	setAdvancedOptions(inout options : Bundle) : void
        mAdvancedOptions = options;
!!!4122167.java!!!	describeContents() : int
        return 0;
!!!4122295.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        parcel.writeParcelable(mId, flags);
        parcel.writeString(mLabel);
        parcel.writeParcelable(mPrinterId, flags);
        parcel.writeString(mPrinterName);
        parcel.writeInt(mState);
        parcel.writeInt(mAppId);
        parcel.writeString(mTag);
        parcel.writeLong(mCreationTime);
        parcel.writeInt(mCopies);
        parcel.writeParcelableArray(mPageRanges, flags);
        parcel.writeParcelable(mAttributes, flags);
        parcel.writeParcelable(mDocumentInfo, 0);
        parcel.writeFloat(mProgress);
        parcel.writeCharSequence(mStatus);
        parcel.writeInt(mStatusRes);
        parcel.writeCharSequence(mStatusResAppPackageName);
        parcel.writeInt(mCanceling ? 1 : 0);
        parcel.writeBundle(mAdvancedOptions);
!!!4122423.java!!!	toString() : String
        StringBuilder builder = new StringBuilder();
        builder.append("PrintJobInfo{");
        builder.append("label: ").append(mLabel);
        builder.append(", id: ").append(mId);
        builder.append(", state: ").append(stateToString(mState));
        builder.append(", printer: " + mPrinterId);
        builder.append(", tag: ").append(mTag);
        builder.append(", creationTime: " + mCreationTime);
        builder.append(", copies: ").append(mCopies);
        builder.append(", attributes: " + (mAttributes != null
                ? mAttributes.toString() : null));
        builder.append(", documentInfo: " + (mDocumentInfo != null
                ? mDocumentInfo.toString() : null));
        builder.append(", cancelling: " + mCanceling);
        builder.append(", pages: " + (mPageRanges != null
                ? Arrays.toString(mPageRanges) : null));
        builder.append(", hasAdvancedOptions: " + (mAdvancedOptions != null));
        builder.append(", progress: " + mProgress);
        builder.append(", status: " + (mStatus != null
                ? mStatus.toString() : null));
        builder.append(", statusRes: " + mStatusRes);
        builder.append(", statusResAppPackageName: " + (mStatusResAppPackageName != null
                ? mStatusResAppPackageName.toString() : null));
        builder.append("}");
        return builder.toString();
!!!4122551.java!!!	stateToString(in state : int) : String
        switch (state) {
            case STATE_CREATED: {
                return "STATE_CREATED";
            }
            case STATE_QUEUED: {
                return "STATE_QUEUED";
            }
            case STATE_STARTED: {
                return "STATE_STARTED";
            }
            case STATE_BLOCKED: {
                return "STATE_BLOCKED";
            }
            case STATE_FAILED: {
                return "STATE_FAILED";
            }
            case STATE_COMPLETED: {
                return "STATE_COMPLETED";
            }
            case STATE_CANCELED: {
                return "STATE_CANCELED";
            }
            default: {
                return "STATE_UNKNOWN";
            }
        }
!!!4122679.java!!!	getProgress() : float
        return mProgress;
!!!4122807.java!!!	getStatus(inout pm : PackageManager) : CharSequence
        if (mStatusRes == 0) {
            return mStatus;
        } else {
            try {
                return pm.getResourcesForApplication(mStatusResAppPackageName.toString())
                        .getString(mStatusRes);
            } catch (PackageManager.NameNotFoundException | Resources.NotFoundException e) {
                return null;
            }
        }
