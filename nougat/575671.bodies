class RecommendationService
!!!4171575.java!!!	attachBaseContext(inout base : Context) : void
        super.attachBaseContext(base);

        mHandler = new MyHandler();
!!!4171703.java!!!	updateRecommendations(inout recommendations : List<RecommendationInfo>) : void
        mHandler.obtainMessage(MyHandler.MSG_UPDATE, recommendations).sendToTarget();
!!!4171831.java!!!	onBind(inout intent : Intent) : IBinder
        return new IRecommendationService.Stub() {
            @Override
            public void registerCallbacks(IRecommendationServiceCallbacks callbacks) {
                // The callbacks come in order of the caller on oneway calls. Hence while the caller
                // cannot know at what time the connection is made, he can know the ordering of
                // connection and disconnection.
                //
                // Similar he cannot know when the disconnection is processed, hence he has to
                // handle callbacks after calling disconnect.
                if (callbacks != null) {
                    mHandler.obtainMessage(MyHandler.MSG_CONNECT, callbacks).sendToTarget();
                } else {
                    mHandler.obtainMessage(MyHandler.MSG_DISCONNECT).sendToTarget();
                }
            }
        };
