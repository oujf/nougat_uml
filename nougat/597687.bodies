class Settings
!!!4215735.java!!!	canDrawOverlays(inout context : Context) : boolean
        return Settings.isCallingPackageAllowedToDrawOverlays(context, Process.myUid(),
                context.getOpPackageName(), false);
!!!4229431.java!!!	getGTalkDeviceId(in androidId : long) : String
        return "android-" + Long.toHexString(androidId);
!!!4229559.java!!!	isCallingPackageAllowedToWriteSettings(inout context : Context, in uid : int, inout callingPackage : String, inout throwException : boolean) : boolean
        return isCallingPackageAllowedToPerformAppOpsProtectedOperation(context, uid,
                callingPackage, throwException, AppOpsManager.OP_WRITE_SETTINGS,
                PM_WRITE_SETTINGS, false);
!!!4229687.java!!!	checkAndNoteWriteSettingsOperation(inout context : Context, in uid : int, inout callingPackage : String, inout throwException : boolean) : boolean
        return isCallingPackageAllowedToPerformAppOpsProtectedOperation(context, uid,
                callingPackage, throwException, AppOpsManager.OP_WRITE_SETTINGS,
                PM_WRITE_SETTINGS, true);
!!!4229815.java!!!	checkAndNoteChangeNetworkStateOperation(inout context : Context, in uid : int, inout callingPackage : String, inout throwException : boolean) : boolean
        if (context.checkCallingOrSelfPermission(android.Manifest.permission.CHANGE_NETWORK_STATE)
                == PackageManager.PERMISSION_GRANTED) {
            return true;
        }
        return isCallingPackageAllowedToPerformAppOpsProtectedOperation(context, uid,
                callingPackage, throwException, AppOpsManager.OP_WRITE_SETTINGS,
                PM_CHANGE_NETWORK_STATE, true);
!!!4229943.java!!!	isCallingPackageAllowedToDrawOverlays(inout context : Context, in uid : int, inout callingPackage : String, inout throwException : boolean) : boolean
        return isCallingPackageAllowedToPerformAppOpsProtectedOperation(context, uid,
                callingPackage, throwException, AppOpsManager.OP_SYSTEM_ALERT_WINDOW,
                PM_SYSTEM_ALERT_WINDOW, false);
!!!4230071.java!!!	checkAndNoteDrawOverlaysOperation(inout context : Context, in uid : int, inout callingPackage : String, inout throwException : boolean) : boolean
        return isCallingPackageAllowedToPerformAppOpsProtectedOperation(context, uid,
                callingPackage, throwException, AppOpsManager.OP_SYSTEM_ALERT_WINDOW,
                PM_SYSTEM_ALERT_WINDOW, true);
!!!4230199.java!!!	isCallingPackageAllowedToPerformAppOpsProtectedOperation(inout context : Context, in uid : int, inout callingPackage : String, inout throwException : boolean, in appOpsOpCode : int, inout permissions : String, inout makeNote : boolean) : boolean
        if (callingPackage == null) {
            return false;
        }

        AppOpsManager appOpsMgr = (AppOpsManager)context.getSystemService(Context.APP_OPS_SERVICE);
        int mode = AppOpsManager.MODE_DEFAULT;
        if (makeNote) {
            mode = appOpsMgr.noteOpNoThrow(appOpsOpCode, uid, callingPackage);
        } else {
            mode = appOpsMgr.checkOpNoThrow(appOpsOpCode, uid, callingPackage);
        }

        switch (mode) {
            case AppOpsManager.MODE_ALLOWED:
                return true;

            case AppOpsManager.MODE_DEFAULT:
                // this is the default operating mode after an app's installation
                // In this case we will check all associated static permission to see
                // if it is granted during install time.
                for (String permission : permissions) {
                    if (context.checkCallingOrSelfPermission(permission) == PackageManager
                            .PERMISSION_GRANTED) {
                        // if either of the permissions are granted, we will allow it
                        return true;
                    }
                }

            default:
                // this is for all other cases trickled down here...
                if (!throwException) {
                    return false;
                }
        }

        // prepare string to throw SecurityException
        StringBuilder exceptionMessage = new StringBuilder();
        exceptionMessage.append(callingPackage);
        exceptionMessage.append(" was not granted ");
        if (permissions.length > 1) {
            exceptionMessage.append(" either of these permissions: ");
        } else {
            exceptionMessage.append(" this permission: ");
        }
        for (int i = 0; i < permissions.length; i++) {
            exceptionMessage.append(permissions[i]);
            exceptionMessage.append((i == permissions.length - 1) ? "." : ", ");
        }

        throw new SecurityException(exceptionMessage.toString());
!!!4230327.java!!!	getPackageNameForUid(inout context : Context, in uid : int) : String
        String[] packages = context.getPackageManager().getPackagesForUid(uid);
        if (packages == null) {
            return null;
        }
        return packages[0];
