class System
!!!4215991.java!!!	getMovedToGlobalSettings(inout outKeySet : Set<String>) : void
            outKeySet.addAll(MOVED_TO_GLOBAL);
            outKeySet.addAll(MOVED_TO_SECURE_THEN_GLOBAL);
!!!4216119.java!!!	getMovedToSecureSettings(inout outKeySet : Set<String>) : void
            outKeySet.addAll(MOVED_TO_SECURE);
!!!4216247.java!!!	getNonLegacyMovedKeys(inout outKeySet : HashSet<String>) : void
            outKeySet.addAll(MOVED_TO_GLOBAL);
!!!4216375.java!!!	getString(inout resolver : ContentResolver, inout name : String) : String
            return getStringForUser(resolver, name, UserHandle.myUserId());
!!!4216503.java!!!	getStringForUser(inout resolver : ContentResolver, inout name : String, in userHandle : int) : String
            if (MOVED_TO_SECURE.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.System"
                        + " to android.provider.Settings.Secure, returning read-only value.");
                return Secure.getStringForUser(resolver, name, userHandle);
            }
            if (MOVED_TO_GLOBAL.contains(name) || MOVED_TO_SECURE_THEN_GLOBAL.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.System"
                        + " to android.provider.Settings.Global, returning read-only value.");
                return Global.getStringForUser(resolver, name, userHandle);
            }
            return sNameValueCache.getStringForUser(resolver, name, userHandle);
!!!4216631.java!!!	putString(inout resolver : ContentResolver, inout name : String, inout value : String) : boolean
            return putStringForUser(resolver, name, value, UserHandle.myUserId());
!!!4216759.java!!!	putStringForUser(inout resolver : ContentResolver, inout name : String, inout value : String, in userHandle : int) : boolean
            if (MOVED_TO_SECURE.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.System"
                        + " to android.provider.Settings.Secure, value is unchanged.");
                return false;
            }
            if (MOVED_TO_GLOBAL.contains(name) || MOVED_TO_SECURE_THEN_GLOBAL.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.System"
                        + " to android.provider.Settings.Global, value is unchanged.");
                return false;
            }
            return sNameValueCache.putStringForUser(resolver, name, value, userHandle);
!!!4216887.java!!!	getUriFor(inout name : String) : Uri
            if (MOVED_TO_SECURE.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.System"
                    + " to android.provider.Settings.Secure, returning Secure URI.");
                return Secure.getUriFor(Secure.CONTENT_URI, name);
            }
            if (MOVED_TO_GLOBAL.contains(name) || MOVED_TO_SECURE_THEN_GLOBAL.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.System"
                        + " to android.provider.Settings.Global, returning read-only global URI.");
                return Global.getUriFor(Global.CONTENT_URI, name);
            }
            return getUriFor(CONTENT_URI, name);
!!!4217015.java!!!	getInt(inout cr : ContentResolver, inout name : String, in def : int) : int
            return getIntForUser(cr, name, def, UserHandle.myUserId());
!!!4217143.java!!!	getIntForUser(inout cr : ContentResolver, inout name : String, in def : int, in userHandle : int) : int
            String v = getStringForUser(cr, name, userHandle);
            try {
                return v != null ? Integer.parseInt(v) : def;
            } catch (NumberFormatException e) {
                return def;
            }
!!!4217271.java!!!	getInt(inout cr : ContentResolver, inout name : String) : int
            return getIntForUser(cr, name, UserHandle.myUserId());
!!!4217399.java!!!	getIntForUser(inout cr : ContentResolver, inout name : String, in userHandle : int) : int
            String v = getStringForUser(cr, name, userHandle);
            try {
                return Integer.parseInt(v);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!4217527.java!!!	putInt(inout cr : ContentResolver, inout name : String, in value : int) : boolean
            return putIntForUser(cr, name, value, UserHandle.myUserId());
!!!4217655.java!!!	putIntForUser(inout cr : ContentResolver, inout name : String, in value : int, in userHandle : int) : boolean
            return putStringForUser(cr, name, Integer.toString(value), userHandle);
!!!4217783.java!!!	getLong(inout cr : ContentResolver, inout name : String, in def : long) : long
            return getLongForUser(cr, name, def, UserHandle.myUserId());
!!!4217911.java!!!	getLongForUser(inout cr : ContentResolver, inout name : String, in def : long, in userHandle : int) : long
            String valString = getStringForUser(cr, name, userHandle);
            long value;
            try {
                value = valString != null ? Long.parseLong(valString) : def;
            } catch (NumberFormatException e) {
                value = def;
            }
            return value;
!!!4218039.java!!!	getLong(inout cr : ContentResolver, inout name : String) : long
            return getLongForUser(cr, name, UserHandle.myUserId());
!!!4218167.java!!!	getLongForUser(inout cr : ContentResolver, inout name : String, in userHandle : int) : long
            String valString = getStringForUser(cr, name, userHandle);
            try {
                return Long.parseLong(valString);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!4218295.java!!!	putLong(inout cr : ContentResolver, inout name : String, in value : long) : boolean
            return putLongForUser(cr, name, value, UserHandle.myUserId());
!!!4218423.java!!!	putLongForUser(inout cr : ContentResolver, inout name : String, in value : long, in userHandle : int) : boolean
            return putStringForUser(cr, name, Long.toString(value), userHandle);
!!!4218551.java!!!	getFloat(inout cr : ContentResolver, inout name : String, in def : float) : float
            return getFloatForUser(cr, name, def, UserHandle.myUserId());
!!!4218679.java!!!	getFloatForUser(inout cr : ContentResolver, inout name : String, in def : float, in userHandle : int) : float
            String v = getStringForUser(cr, name, userHandle);
            try {
                return v != null ? Float.parseFloat(v) : def;
            } catch (NumberFormatException e) {
                return def;
            }
!!!4218807.java!!!	getFloat(inout cr : ContentResolver, inout name : String) : float
            return getFloatForUser(cr, name, UserHandle.myUserId());
!!!4218935.java!!!	getFloatForUser(inout cr : ContentResolver, inout name : String, in userHandle : int) : float
            String v = getStringForUser(cr, name, userHandle);
            if (v == null) {
                throw new SettingNotFoundException(name);
            }
            try {
                return Float.parseFloat(v);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!4219063.java!!!	putFloat(inout cr : ContentResolver, inout name : String, in value : float) : boolean
            return putFloatForUser(cr, name, value, UserHandle.myUserId());
!!!4219191.java!!!	putFloatForUser(inout cr : ContentResolver, inout name : String, in value : float, in userHandle : int) : boolean
            return putStringForUser(cr, name, Float.toString(value), userHandle);
!!!4219319.java!!!	getConfiguration(inout cr : ContentResolver, inout outConfig : Configuration) : void
            adjustConfigurationForUser(cr, outConfig, UserHandle.myUserId(),
                    false /* updateSettingsIfEmpty */);
!!!4219447.java!!!	adjustConfigurationForUser(inout cr : ContentResolver, inout outConfig : Configuration, in userHandle : int, inout updateSettingsIfEmpty : boolean) : void
            outConfig.fontScale = Settings.System.getFloatForUser(
                    cr, FONT_SCALE, DEFAULT_FONT_SCALE, userHandle);
            if (outConfig.fontScale < 0) {
                outConfig.fontScale = DEFAULT_FONT_SCALE;
            }

            final String localeValue =
                    Settings.System.getStringForUser(cr, SYSTEM_LOCALES, userHandle);
            if (localeValue != null) {
                outConfig.setLocales(LocaleList.forLanguageTags(localeValue));
            } else {
                // Do not update configuration with emtpy settings since we need to take over the
                // locale list of previous user if the settings value is empty. This happens when a
                // new user is created.

                if (updateSettingsIfEmpty) {
                    // Make current configuration persistent. This is necessary the first time a
                    // user log in. At the first login, the configuration settings are empty, so we
                    // need to store the adjusted configuration as the initial settings.
                    Settings.System.putStringForUser(
                            cr, SYSTEM_LOCALES, outConfig.getLocales().toLanguageTags(),
                            userHandle);
                }
            }
!!!4219575.java!!!	clearConfiguration(inout inoutConfig : Configuration) : void
            inoutConfig.fontScale = 0;
            if (!inoutConfig.userSetLocale && !inoutConfig.getLocales().isEmpty()) {
                inoutConfig.clearLocales();
            }
!!!4219703.java!!!	putConfiguration(inout cr : ContentResolver, inout config : Configuration) : boolean
            return putConfigurationForUser(cr, config, UserHandle.myUserId());
!!!4219831.java!!!	putConfigurationForUser(inout cr : ContentResolver, inout config : Configuration, in userHandle : int) : boolean
            return Settings.System.putFloatForUser(cr, FONT_SCALE, config.fontScale, userHandle) &&
                    Settings.System.putStringForUser(
                            cr, SYSTEM_LOCALES, config.getLocales().toLanguageTags(), userHandle);
!!!4219959.java!!!	hasInterestingConfigurationChanges(in changes : int) : boolean
            return (changes & ActivityInfo.CONFIG_FONT_SCALE) != 0 ||
                    (changes & ActivityInfo.CONFIG_LOCALE) != 0;
!!!4220087.java!!!	getShowGTalkServiceStatus(inout cr : ContentResolver) : boolean
            return getShowGTalkServiceStatusForUser(cr, UserHandle.myUserId());
!!!4220215.java!!!	getShowGTalkServiceStatusForUser(inout cr : ContentResolver, in userHandle : int) : boolean
            return getIntForUser(cr, SHOW_GTALK_SERVICE_STATUS, 0, userHandle) != 0;
!!!4220343.java!!!	setShowGTalkServiceStatus(inout cr : ContentResolver, inout flag : boolean) : void
            setShowGTalkServiceStatusForUser(cr, flag, UserHandle.myUserId());
!!!4220471.java!!!	setShowGTalkServiceStatusForUser(inout cr : ContentResolver, inout flag : boolean, in userHandle : int) : void
            putIntForUser(cr, SHOW_GTALK_SERVICE_STATUS, flag ? 1 : 0, userHandle);
!!!4221367.java!!!	getCloneToManagedProfileSettings(inout outKeySet : Set<String>) : void
            outKeySet.addAll(CLONE_TO_MANAGED_PROFILE);
!!!4221495.java!!!	canWrite(inout context : Context) : boolean
            return isCallingPackageAllowedToWriteSettings(context, Process.myUid(),
                    context.getOpPackageName(), false);
