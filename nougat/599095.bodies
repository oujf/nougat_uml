class Secure
!!!4221623.java!!!	getMovedToGlobalSettings(inout outKeySet : Set<String>) : void
            outKeySet.addAll(MOVED_TO_GLOBAL);
!!!4221751.java!!!	getString(inout resolver : ContentResolver, inout name : String) : String
            return getStringForUser(resolver, name, UserHandle.myUserId());
!!!4221879.java!!!	getStringForUser(inout resolver : ContentResolver, inout name : String, in userHandle : int) : String
            if (MOVED_TO_GLOBAL.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.Secure"
                        + " to android.provider.Settings.Global.");
                return Global.getStringForUser(resolver, name, userHandle);
            }

            if (MOVED_TO_LOCK_SETTINGS.contains(name)) {
                synchronized (Secure.class) {
                    if (sLockSettings == null) {
                        sLockSettings = ILockSettings.Stub.asInterface(
                                (IBinder) ServiceManager.getService("lock_settings"));
                        sIsSystemProcess = Process.myUid() == Process.SYSTEM_UID;
                    }
                }
                if (sLockSettings != null && !sIsSystemProcess) {
                    // No context; use the ActivityThread's context as an approximation for
                    // determining the target API level.
                    Application application = ActivityThread.currentApplication();

                    boolean isPreMnc = application != null
                            && application.getApplicationInfo() != null
                            && application.getApplicationInfo().targetSdkVersion
                            <= VERSION_CODES.LOLLIPOP_MR1;
                    if (isPreMnc) {
                        try {
                            return sLockSettings.getString(name, "0", userHandle);
                        } catch (RemoteException re) {
                            // Fall through
                        }
                    } else {
                        throw new SecurityException("Settings.Secure." + name
                                + " is deprecated and no longer accessible."
                                + " See API documentation for potential replacements.");
                    }
                }
            }

            return sNameValueCache.getStringForUser(resolver, name, userHandle);
!!!4222007.java!!!	putString(inout resolver : ContentResolver, inout name : String, inout value : String) : boolean
            return putStringForUser(resolver, name, value, UserHandle.myUserId());
!!!4222135.java!!!	putStringForUser(inout resolver : ContentResolver, inout name : String, inout value : String, in userHandle : int) : boolean
            if (LOCATION_MODE.equals(name)) {
                // HACK ALERT: temporary hack to work around b/10491283.
                // TODO: once b/10491283 fixed, remove this hack
                return setLocationModeForUser(resolver, Integer.parseInt(value), userHandle);
            }
            if (MOVED_TO_GLOBAL.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.System"
                        + " to android.provider.Settings.Global");
                return Global.putStringForUser(resolver, name, value, userHandle);
            }
            return sNameValueCache.putStringForUser(resolver, name, value, userHandle);
!!!4222263.java!!!	getUriFor(inout name : String) : Uri
            if (MOVED_TO_GLOBAL.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.Secure"
                        + " to android.provider.Settings.Global, returning global URI.");
                return Global.getUriFor(Global.CONTENT_URI, name);
            }
            return getUriFor(CONTENT_URI, name);
!!!4222391.java!!!	getInt(inout cr : ContentResolver, inout name : String, in def : int) : int
            return getIntForUser(cr, name, def, UserHandle.myUserId());
!!!4222519.java!!!	getIntForUser(inout cr : ContentResolver, inout name : String, in def : int, in userHandle : int) : int
            if (LOCATION_MODE.equals(name)) {
                // HACK ALERT: temporary hack to work around b/10491283.
                // TODO: once b/10491283 fixed, remove this hack
                return getLocationModeForUser(cr, userHandle);
            }
            String v = getStringForUser(cr, name, userHandle);
            try {
                return v != null ? Integer.parseInt(v) : def;
            } catch (NumberFormatException e) {
                return def;
            }
!!!4222647.java!!!	getInt(inout cr : ContentResolver, inout name : String) : int
            return getIntForUser(cr, name, UserHandle.myUserId());
!!!4222775.java!!!	getIntForUser(inout cr : ContentResolver, inout name : String, in userHandle : int) : int
            if (LOCATION_MODE.equals(name)) {
                // HACK ALERT: temporary hack to work around b/10491283.
                // TODO: once b/10491283 fixed, remove this hack
                return getLocationModeForUser(cr, userHandle);
            }
            String v = getStringForUser(cr, name, userHandle);
            try {
                return Integer.parseInt(v);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!4222903.java!!!	putInt(inout cr : ContentResolver, inout name : String, in value : int) : boolean
            return putIntForUser(cr, name, value, UserHandle.myUserId());
!!!4223031.java!!!	putIntForUser(inout cr : ContentResolver, inout name : String, in value : int, in userHandle : int) : boolean
            return putStringForUser(cr, name, Integer.toString(value), userHandle);
!!!4223159.java!!!	getLong(inout cr : ContentResolver, inout name : String, in def : long) : long
            return getLongForUser(cr, name, def, UserHandle.myUserId());
!!!4223287.java!!!	getLongForUser(inout cr : ContentResolver, inout name : String, in def : long, in userHandle : int) : long
            String valString = getStringForUser(cr, name, userHandle);
            long value;
            try {
                value = valString != null ? Long.parseLong(valString) : def;
            } catch (NumberFormatException e) {
                value = def;
            }
            return value;
!!!4223415.java!!!	getLong(inout cr : ContentResolver, inout name : String) : long
            return getLongForUser(cr, name, UserHandle.myUserId());
!!!4223543.java!!!	getLongForUser(inout cr : ContentResolver, inout name : String, in userHandle : int) : long
            String valString = getStringForUser(cr, name, userHandle);
            try {
                return Long.parseLong(valString);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!4223671.java!!!	putLong(inout cr : ContentResolver, inout name : String, in value : long) : boolean
            return putLongForUser(cr, name, value, UserHandle.myUserId());
!!!4223799.java!!!	putLongForUser(inout cr : ContentResolver, inout name : String, in value : long, in userHandle : int) : boolean
            return putStringForUser(cr, name, Long.toString(value), userHandle);
!!!4223927.java!!!	getFloat(inout cr : ContentResolver, inout name : String, in def : float) : float
            return getFloatForUser(cr, name, def, UserHandle.myUserId());
!!!4224055.java!!!	getFloatForUser(inout cr : ContentResolver, inout name : String, in def : float, in userHandle : int) : float
            String v = getStringForUser(cr, name, userHandle);
            try {
                return v != null ? Float.parseFloat(v) : def;
            } catch (NumberFormatException e) {
                return def;
            }
!!!4224183.java!!!	getFloat(inout cr : ContentResolver, inout name : String) : float
            return getFloatForUser(cr, name, UserHandle.myUserId());
!!!4224311.java!!!	getFloatForUser(inout cr : ContentResolver, inout name : String, in userHandle : int) : float
            String v = getStringForUser(cr, name, userHandle);
            if (v == null) {
                throw new SettingNotFoundException(name);
            }
            try {
                return Float.parseFloat(v);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!4224439.java!!!	putFloat(inout cr : ContentResolver, inout name : String, in value : float) : boolean
            return putFloatForUser(cr, name, value, UserHandle.myUserId());
!!!4224567.java!!!	putFloatForUser(inout cr : ContentResolver, inout name : String, in value : float, in userHandle : int) : boolean
            return putStringForUser(cr, name, Float.toString(value), userHandle);
!!!4224695.java!!!	getCloneToManagedProfileSettings(inout outKeySet : Set<String>) : void
            outKeySet.addAll(CLONE_TO_MANAGED_PROFILE);
!!!4224823.java!!!	isLocationProviderEnabled(inout cr : ContentResolver, inout provider : String) : boolean
            return isLocationProviderEnabledForUser(cr, provider, UserHandle.myUserId());
!!!4224951.java!!!	isLocationProviderEnabledForUser(inout cr : ContentResolver, inout provider : String, in userId : int) : boolean
            String allowedProviders = Settings.Secure.getStringForUser(cr,
                    LOCATION_PROVIDERS_ALLOWED, userId);
            return TextUtils.delimitedStringContains(allowedProviders, ',', provider);
!!!4225079.java!!!	setLocationProviderEnabled(inout cr : ContentResolver, inout provider : String, inout enabled : boolean) : void
            setLocationProviderEnabledForUser(cr, provider, enabled, UserHandle.myUserId());
!!!4225207.java!!!	setLocationProviderEnabledForUser(inout cr : ContentResolver, inout provider : String, inout enabled : boolean, in userId : int) : boolean
            synchronized (mLocationSettingsLock) {
                // to ensure thread safety, we write the provider name with a '+' or '-'
                // and let the SettingsProvider handle it rather than reading and modifying
                // the list of enabled providers.
                if (enabled) {
                    provider = "+" + provider;
                } else {
                    provider = "-" + provider;
                }
                return putStringForUser(cr, Settings.Secure.LOCATION_PROVIDERS_ALLOWED, provider,
                        userId);
            }
!!!4225335.java!!!	saveLocationModeForUser(inout cr : ContentResolver, in userId : int) : boolean
            final int mode = getLocationModeForUser(cr, userId);
            return putIntForUser(cr, Settings.Secure.LOCATION_PREVIOUS_MODE, mode, userId);
!!!4225463.java!!!	restoreLocationModeForUser(inout cr : ContentResolver, in userId : int) : boolean
            int mode = getIntForUser(cr, Settings.Secure.LOCATION_PREVIOUS_MODE,
                    LOCATION_MODE_HIGH_ACCURACY, userId);
            // Make sure that the previous mode is never "off". Otherwise the user won't be able to
            // turn on location any longer.
            if (mode == LOCATION_MODE_OFF) {
                mode = LOCATION_MODE_HIGH_ACCURACY;
            }
            return setLocationModeForUser(cr, mode, userId);
!!!4225591.java!!!	setLocationModeForUser(inout cr : ContentResolver, in mode : int, in userId : int) : boolean
            synchronized (mLocationSettingsLock) {
                boolean gps = false;
                boolean network = false;
                switch (mode) {
                    case LOCATION_MODE_PREVIOUS:
                        // Retrieve the actual mode and set to that mode.
                        return restoreLocationModeForUser(cr, userId);
                    case LOCATION_MODE_OFF:
                        saveLocationModeForUser(cr, userId);
                        break;
                    case LOCATION_MODE_SENSORS_ONLY:
                        gps = true;
                        break;
                    case LOCATION_MODE_BATTERY_SAVING:
                        network = true;
                        break;
                    case LOCATION_MODE_HIGH_ACCURACY:
                        gps = true;
                        network = true;
                        break;
                    default:
                        throw new IllegalArgumentException("Invalid location mode: " + mode);
                }
                // Note it's important that we set the NLP mode first. The Google implementation
                // of NLP clears its NLP consent setting any time it receives a
                // LocationManager.PROVIDERS_CHANGED_ACTION broadcast and NLP is disabled. Also,
                // it shows an NLP consent dialog any time it receives the broadcast, NLP is
                // enabled, and the NLP consent is not set. If 1) we were to enable GPS first,
                // 2) a setup wizard has its own NLP consent UI that sets the NLP consent setting,
                // and 3) the receiver happened to complete before we enabled NLP, then the Google
                // NLP would detect the attempt to enable NLP and show a redundant NLP consent
                // dialog. Then the people who wrote the setup wizard would be sad.
                boolean nlpSuccess = Settings.Secure.setLocationProviderEnabledForUser(
                        cr, LocationManager.NETWORK_PROVIDER, network, userId);
                boolean gpsSuccess = Settings.Secure.setLocationProviderEnabledForUser(
                        cr, LocationManager.GPS_PROVIDER, gps, userId);
                return gpsSuccess && nlpSuccess;
            }
!!!4225719.java!!!	getLocationModeForUser(inout cr : ContentResolver, in userId : int) : int
            synchronized (mLocationSettingsLock) {
                boolean gpsEnabled = Settings.Secure.isLocationProviderEnabledForUser(
                        cr, LocationManager.GPS_PROVIDER, userId);
                boolean networkEnabled = Settings.Secure.isLocationProviderEnabledForUser(
                        cr, LocationManager.NETWORK_PROVIDER, userId);
                if (gpsEnabled && networkEnabled) {
                    return LOCATION_MODE_HIGH_ACCURACY;
                } else if (gpsEnabled) {
                    return LOCATION_MODE_SENSORS_ONLY;
                } else if (networkEnabled) {
                    return LOCATION_MODE_BATTERY_SAVING;
                } else {
                    return LOCATION_MODE_OFF;
                }
            }
