class DreamService
!!!4273719.java!!!	DreamService()
        mSandman = IDreamManager.Stub.asInterface(ServiceManager.getService(DREAM_SERVICE));
!!!4273847.java!!!	setDebug(inout dbg : boolean) : void
        mDebug = dbg;
!!!4273975.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        // TODO: create more flexible version of mInteractive that allows use of KEYCODE_BACK
        if (!mInteractive) {
            if (mDebug) Slog.v(TAG, "Waking up on keyEvent");
            wakeUp();
            return true;
        } else if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
            if (mDebug) Slog.v(TAG, "Waking up on back key");
            wakeUp();
            return true;
        }
        return mWindow.superDispatchKeyEvent(event);
!!!4274103.java!!!	dispatchKeyShortcutEvent(inout event : KeyEvent) : boolean
        if (!mInteractive) {
            if (mDebug) Slog.v(TAG, "Waking up on keyShortcutEvent");
            wakeUp();
            return true;
        }
        return mWindow.superDispatchKeyShortcutEvent(event);
!!!4274231.java!!!	dispatchTouchEvent(inout event : MotionEvent) : boolean
        // TODO: create more flexible version of mInteractive that allows clicks
        // but finish()es on any other kind of activity
        if (!mInteractive) {
            if (mDebug) Slog.v(TAG, "Waking up on touchEvent");
            wakeUp();
            return true;
        }
        return mWindow.superDispatchTouchEvent(event);
!!!4274359.java!!!	dispatchTrackballEvent(inout event : MotionEvent) : boolean
        if (!mInteractive) {
            if (mDebug) Slog.v(TAG, "Waking up on trackballEvent");
            wakeUp();
            return true;
        }
        return mWindow.superDispatchTrackballEvent(event);
!!!4274487.java!!!	dispatchGenericMotionEvent(inout event : MotionEvent) : boolean
        if (!mInteractive) {
            if (mDebug) Slog.v(TAG, "Waking up on genericMotionEvent");
            wakeUp();
            return true;
        }
        return mWindow.superDispatchGenericMotionEvent(event);
!!!4274615.java!!!	dispatchPopulateAccessibilityEvent(inout event : AccessibilityEvent) : boolean
        return false;
!!!4274743.java!!!	onCreatePanelView(in featureId : int) : View
        return null;
!!!4274871.java!!!	onCreatePanelMenu(in featureId : int, inout menu : Menu) : boolean
        return false;
!!!4274999.java!!!	onPreparePanel(in featureId : int, inout view : View, inout menu : Menu) : boolean
        return false;
!!!4275127.java!!!	onMenuOpened(in featureId : int, inout menu : Menu) : boolean
        return false;
!!!4275255.java!!!	onMenuItemSelected(in featureId : int, inout item : MenuItem) : boolean
        return false;
!!!4276151.java!!!	onSearchRequested(inout event : SearchEvent) : boolean
        return onSearchRequested();
!!!4276279.java!!!	onSearchRequested() : boolean
        return false;
!!!4276407.java!!!	onWindowStartingActionMode(inout callback : ActionMode::Callback) : ActionMode
        return null;
!!!4276535.java!!!	onWindowStartingActionMode(inout callback : ActionMode::Callback, in type : int) : ActionMode
        return null;
!!!4276919.java!!!	getWindowManager() : WindowManager
        return mWindow != null ? mWindow.getWindowManager() : null;
!!!4277047.java!!!	getWindow() : Window
        return mWindow;
!!!4277175.java!!!	setContentView(in layoutResID : int) : void
        getWindow().setContentView(layoutResID);
!!!4277303.java!!!	setContentView(inout view : View) : void
        getWindow().setContentView(view);
!!!4277431.java!!!	setContentView(inout view : View, inout params : ViewGroup::LayoutParams) : void
        getWindow().setContentView(view, params);
!!!4277559.java!!!	addContentView(inout view : View, inout params : ViewGroup::LayoutParams) : void
        getWindow().addContentView(view, params);
!!!4277687.java!!!	findViewById(in id : int) : View
        return getWindow().findViewById(id);
!!!4277815.java!!!	setInteractive(inout interactive : boolean) : void
        mInteractive = interactive;
!!!4277943.java!!!	isInteractive() : boolean
        return mInteractive;
!!!4278071.java!!!	setLowProfile(inout lowProfile : boolean) : void
        if (mLowProfile != lowProfile) {
            mLowProfile = lowProfile;
            int flag = View.SYSTEM_UI_FLAG_LOW_PROFILE;
            applySystemUiVisibilityFlags(mLowProfile ? flag : 0, flag);
        }
!!!4278199.java!!!	isLowProfile() : boolean
        return getSystemUiVisibilityFlagValue(View.SYSTEM_UI_FLAG_LOW_PROFILE, mLowProfile);
!!!4278327.java!!!	setFullscreen(inout fullscreen : boolean) : void
        if (mFullscreen != fullscreen) {
            mFullscreen = fullscreen;
            int flag = WindowManager.LayoutParams.FLAG_FULLSCREEN;
            applyWindowFlags(mFullscreen ? flag : 0, flag);
        }
!!!4278455.java!!!	isFullscreen() : boolean
        return mFullscreen;
!!!4278583.java!!!	setScreenBright(inout screenBright : boolean) : void
        if (mScreenBright != screenBright) {
            mScreenBright = screenBright;
            int flag = WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON;
            applyWindowFlags(mScreenBright ? flag : 0, flag);
        }
!!!4278711.java!!!	isScreenBright() : boolean
        return getWindowFlagValue(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, mScreenBright);
!!!4278839.java!!!	setWindowless(inout windowless : boolean) : void
        mWindowless = windowless;
!!!4278967.java!!!	isWindowless() : boolean
        return mWindowless;
!!!4279095.java!!!	canDoze() : boolean
        return mCanDoze;
!!!4279223.java!!!	startDozing() : void
        if (mCanDoze && !mDozing) {
            mDozing = true;
            updateDoze();
        }
!!!4279351.java!!!	updateDoze() : void
        if (mDozing) {
            try {
                mSandman.startDozing(mWindowToken, mDozeScreenState, mDozeScreenBrightness);
            } catch (RemoteException ex) {
                // system server died
            }
        }
!!!4279479.java!!!	stopDozing() : void
        if (mDozing) {
            mDozing = false;
            try {
                mSandman.stopDozing(mWindowToken);
            } catch (RemoteException ex) {
                // system server died
            }
        }
!!!4279607.java!!!	isDozing() : boolean
        return mDozing;
!!!4279735.java!!!	getDozeScreenState() : int
        return mDozeScreenState;
!!!4279863.java!!!	setDozeScreenState(in state : int) : void
        if (mDozeScreenState != state) {
            mDozeScreenState = state;
            updateDoze();
        }
!!!4279991.java!!!	getDozeScreenBrightness() : int
        return mDozeScreenBrightness;
!!!4280119.java!!!	setDozeScreenBrightness(in brightness : int) : void
        if (brightness != PowerManager.BRIGHTNESS_DEFAULT) {
            brightness = clampAbsoluteBrightness(brightness);
        }
        if (mDozeScreenBrightness != brightness) {
            mDozeScreenBrightness = brightness;
            updateDoze();
        }
!!!4280247.java!!!	onCreate() : void
        if (mDebug) Slog.v(TAG, "onCreate()");
        super.onCreate();
!!!4280375.java!!!	onDreamingStarted() : void
        if (mDebug) Slog.v(TAG, "onDreamingStarted()");
        // hook for subclasses
!!!4280503.java!!!	onDreamingStopped() : void
        if (mDebug) Slog.v(TAG, "onDreamingStopped()");
        // hook for subclasses
!!!4280631.java!!!	onWakeUp() : void
        finish();
!!!4280759.java!!!	onBind(inout intent : Intent) : IBinder
        if (mDebug) Slog.v(TAG, "onBind() intent = " + intent);
        return new DreamServiceWrapper();
!!!4280887.java!!!	finish() : void
        if (mDebug) Slog.v(TAG, "finish(): mFinished=" + mFinished);

        if (!mFinished) {
            mFinished = true;

            if (mWindowToken == null) {
                Slog.w(TAG, "Finish was called before the dream was attached.");
            } else {
                try {
                    mSandman.finishSelf(mWindowToken, true /*immediate*/);
                } catch (RemoteException ex) {
                    // system server died
                }
            }

            stopSelf(); // if launched via any other means
        }
!!!4281015.java!!!	wakeUp() : void
        wakeUp(false);
!!!4281143.java!!!	wakeUp(inout fromSystem : boolean) : void
        if (mDebug) Slog.v(TAG, "wakeUp(): fromSystem=" + fromSystem
                + ", mWaking=" + mWaking + ", mFinished=" + mFinished);

        if (!mWaking && !mFinished) {
            mWaking = true;

            // As a minor optimization, invoke the callback first in case it simply
            // calls finish() immediately so there wouldn't be much point in telling
            // the system that we are finishing the dream gently.
            onWakeUp();

            // Now tell the system we are waking gently, unless we already told
            // it we were finishing immediately.
            if (!fromSystem && !mFinished) {
                if (mWindowToken == null) {
                    Slog.w(TAG, "WakeUp was called before the dream was attached.");
                } else {
                    try {
                        mSandman.finishSelf(mWindowToken, false /*immediate*/);
                    } catch (RemoteException ex) {
                        // system server died
                    }
                }
            }
        }
!!!4281271.java!!!	onDestroy() : void
        if (mDebug) Slog.v(TAG, "onDestroy()");
        // hook for subclasses

        // Just in case destroy came in before detach, let's take care of that now
        detach();

        super.onDestroy();
!!!4281399.java!!!	detach() : void
        if (mStarted) {
            if (mDebug) Slog.v(TAG, "detach(): Calling onDreamingStopped()");
            mStarted = false;
            onDreamingStopped();
        }

        if (mWindow != null) {
            // force our window to be removed synchronously
            if (mDebug) Slog.v(TAG, "detach(): Removing window from window manager");
            mWindow.getWindowManager().removeViewImmediate(mWindow.getDecorView());
            mWindow = null;
        }

        if (mWindowToken != null) {
            // the following will print a log message if it finds any other leaked windows
            WindowManagerGlobal.getInstance().closeAll(mWindowToken,
                    this.getClass().getName(), "Dream");
            mWindowToken = null;
            mCanDoze = false;
        }
!!!4281527.java!!!	attach(inout windowToken : IBinder, inout canDoze : boolean) : void
        if (mWindowToken != null) {
            Slog.e(TAG, "attach() called when already attached with token=" + mWindowToken);
            return;
        }
        if (mFinished || mWaking) {
            Slog.w(TAG, "attach() called after dream already finished");
            try {
                mSandman.finishSelf(windowToken, true /*immediate*/);
            } catch (RemoteException ex) {
                // system server died
            }
            return;
        }

        mWindowToken = windowToken;
        mCanDoze = canDoze;
        if (mWindowless && !mCanDoze) {
            throw new IllegalStateException("Only doze dreams can be windowless");
        }
        if (!mWindowless) {
            mWindow = new PhoneWindow(this);
            mWindow.setCallback(this);
            mWindow.requestFeature(Window.FEATURE_NO_TITLE);
            mWindow.setBackgroundDrawable(new ColorDrawable(0xFF000000));
            mWindow.setFormat(PixelFormat.OPAQUE);

            if (mDebug) Slog.v(TAG, String.format("Attaching window token: %s to window of type %s",
                    windowToken, WindowManager.LayoutParams.TYPE_DREAM));

            WindowManager.LayoutParams lp = mWindow.getAttributes();
            lp.type = WindowManager.LayoutParams.TYPE_DREAM;
            lp.token = windowToken;
            lp.windowAnimations = com.android.internal.R.style.Animation_Dream;
            lp.flags |= ( WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
                        | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR
                        | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED
                        | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD
                        | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON
                        | (mFullscreen ? WindowManager.LayoutParams.FLAG_FULLSCREEN : 0)
                        | (mScreenBright ? WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON : 0)
                        );
            mWindow.setAttributes(lp);
            // Workaround: Currently low-profile and in-window system bar backgrounds don't go
            // along well. Dreams usually don't need such bars anyways, so disable them by default.
            mWindow.clearFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
            mWindow.setWindowManager(null, windowToken, "dream", true);

            applySystemUiVisibilityFlags(
                    (mLowProfile ? View.SYSTEM_UI_FLAG_LOW_PROFILE : 0),
                    View.SYSTEM_UI_FLAG_LOW_PROFILE);

            try {
                getWindowManager().addView(mWindow.getDecorView(), mWindow.getAttributes());
            } catch (WindowManager.BadTokenException ex) {
                // This can happen because the dream manager service will remove the token
                // immediately without necessarily waiting for the dream to start.
                // We should receive a finish message soon.
                Slog.i(TAG, "attach() called after window token already removed, dream will "
                        + "finish soon");
                mWindow = null;
                return;
            }
        }
        // We need to defer calling onDreamingStarted until after onWindowAttached,
        // which is posted to the handler by addView, so we post onDreamingStarted
        // to the handler also.  Need to watch out here in case detach occurs before
        // this callback is invoked.
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                if (mWindow != null || mWindowless) {
                    if (mDebug) Slog.v(TAG, "Calling onDreamingStarted()");
                    mStarted = true;
                    onDreamingStarted();
                }
            }
        });
!!!4281655.java!!!	getWindowFlagValue(in flag : int, inout defaultValue : boolean) : boolean
        return mWindow == null ? defaultValue : (mWindow.getAttributes().flags & flag) != 0;
!!!4281783.java!!!	applyWindowFlags(in flags : int, in mask : int) : void
        if (mWindow != null) {
            WindowManager.LayoutParams lp = mWindow.getAttributes();
            lp.flags = applyFlags(lp.flags, flags, mask);
            mWindow.setAttributes(lp);
            mWindow.getWindowManager().updateViewLayout(mWindow.getDecorView(), lp);
        }
!!!4281911.java!!!	getSystemUiVisibilityFlagValue(in flag : int, inout defaultValue : boolean) : boolean
        View v = mWindow == null ? null : mWindow.getDecorView();
        return v == null ? defaultValue : (v.getSystemUiVisibility() & flag) != 0;
!!!4282039.java!!!	applySystemUiVisibilityFlags(in flags : int, in mask : int) : void
        View v = mWindow == null ? null : mWindow.getDecorView();
        if (v != null) {
            v.setSystemUiVisibility(applyFlags(v.getSystemUiVisibility(), flags, mask));
        }
!!!4282167.java!!!	applyFlags(in oldFlags : int, in flags : int, in mask : int) : int
        return (oldFlags&~mask) | (flags&mask);
!!!4282295.java!!!	dump(in fd : FileDescriptor, inout pw : PrintWriter, in args : String) : void
        DumpUtils.dumpAsync(mHandler, new Dump() {
            @Override
            public void dump(PrintWriter pw, String prefix) {
                dumpOnHandler(fd, pw, args);
            }
        }, pw, "", 1000);
!!!4282423.java!!!	dumpOnHandler(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        pw.print(TAG + ": ");
        if (mWindowToken == null) {
            pw.println("stopped");
        } else {
            pw.println("running (token=" + mWindowToken + ")");
        }
        pw.println("  window: " + mWindow);
        pw.print("  flags:");
        if (isInteractive()) pw.print(" interactive");
        if (isLowProfile()) pw.print(" lowprofile");
        if (isFullscreen()) pw.print(" fullscreen");
        if (isScreenBright()) pw.print(" bright");
        if (isWindowless()) pw.print(" windowless");
        if (isDozing()) pw.print(" dozing");
        else if (canDoze()) pw.print(" candoze");
        pw.println();
        if (canDoze()) {
            pw.println("  doze screen state: " + Display.stateToString(mDozeScreenState));
            pw.println("  doze screen brightness: " + mDozeScreenBrightness);
        }
!!!4282551.java!!!	clampAbsoluteBrightness(in value : int) : int
        return MathUtils.constrain(value, PowerManager.BRIGHTNESS_OFF, PowerManager.BRIGHTNESS_ON);
