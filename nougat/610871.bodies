class NotificationListenerService
!!!4290743.java!!!	attachBaseContext(inout base : Context) : void
        super.attachBaseContext(base);
        mHandler = new MyHandler(getMainLooper());
!!!4290871.java!!!	onNotificationPosted(inout sbn : StatusBarNotification) : void
        // optional
!!!4290999.java!!!	onNotificationPosted(inout sbn : StatusBarNotification, inout rankingMap : NotificationListenerService::RankingMap) : void
        onNotificationPosted(sbn);
!!!4291127.java!!!	onNotificationRemoved(inout sbn : StatusBarNotification) : void
        // optional
!!!4291255.java!!!	onNotificationRemoved(inout sbn : StatusBarNotification, inout rankingMap : NotificationListenerService::RankingMap) : void
        onNotificationRemoved(sbn);
!!!4291383.java!!!	onListenerConnected() : void
        // optional
!!!4291511.java!!!	onListenerDisconnected() : void
        // optional
!!!4291639.java!!!	onNotificationRankingUpdate(inout rankingMap : NotificationListenerService::RankingMap) : void
        // optional
!!!4291767.java!!!	onListenerHintsChanged(in hints : int) : void
        // optional
!!!4291895.java!!!	onInterruptionFilterChanged(in interruptionFilter : int) : void
        // optional
!!!4292023.java!!!	getNotificationInterface() : INotificationManager
        if (mNoMan == null) {
            mNoMan = INotificationManager.Stub.asInterface(
                    ServiceManager.getService(Context.NOTIFICATION_SERVICE));
        }
        return mNoMan;
!!!4292151.java!!!	cancelNotification(inout pkg : String, inout tag : String, in id : int) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().cancelNotificationFromListener(
                    mWrapper, pkg, tag, id);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!4292279.java!!!	cancelNotification(inout key : String) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().cancelNotificationsFromListener(mWrapper,
                    new String[] { key });
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!4292407.java!!!	cancelAllNotifications() : void
        cancelNotifications(null /*all*/);
!!!4292535.java!!!	cancelNotifications(inout keys : String) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().cancelNotificationsFromListener(mWrapper, keys);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!4292663.java!!!	setNotificationsShown(inout keys : String) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().setNotificationsShownFromListener(mWrapper, keys);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!4292791.java!!!	setOnNotificationPostedTrim(in trim : int) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().setOnNotificationPostedTrimFromListener(mWrapper, trim);
        } catch (RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!4292919.java!!!	getActiveNotifications() : StatusBarNotification
        return getActiveNotifications(null, TRIM_FULL);
!!!4293047.java!!!	getActiveNotifications(in trim : int) : StatusBarNotification
        return getActiveNotifications(null, trim);
!!!4293175.java!!!	getActiveNotifications(inout keys : String) : StatusBarNotification
        return getActiveNotifications(keys, TRIM_FULL);
!!!4293303.java!!!	getActiveNotifications(inout keys : String, in trim : int) : StatusBarNotification
        if (!isBound())
            return null;
        try {
            ParceledListSlice<StatusBarNotification> parceledList = getNotificationInterface()
                    .getActiveNotificationsFromListener(mWrapper, keys, trim);
            List<StatusBarNotification> list = parceledList.getList();
            ArrayList<StatusBarNotification> corruptNotifications = null;
            int N = list.size();
            for (int i = 0; i < N; i++) {
                StatusBarNotification sbn = list.get(i);
                Notification notification = sbn.getNotification();
                try {
                    // convert icon metadata to legacy format for older clients
                    createLegacyIconExtras(notification);
                    // populate remote views for older clients.
                    maybePopulateRemoteViews(notification);
                } catch (IllegalArgumentException e) {
                    if (corruptNotifications == null) {
                        corruptNotifications = new ArrayList<>(N);
                    }
                    corruptNotifications.add(sbn);
                    Log.w(TAG, "onNotificationPosted: can't rebuild notification from " +
                            sbn.getPackageName());
                }
            }
            if (corruptNotifications != null) {
                list.removeAll(corruptNotifications);
            }
            return list.toArray(new StatusBarNotification[list.size()]);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
        return null;
!!!4293431.java!!!	getCurrentListenerHints() : int
        if (!isBound()) return 0;
        try {
            return getNotificationInterface().getHintsFromListener(mWrapper);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
            return 0;
        }
!!!4293559.java!!!	getCurrentInterruptionFilter() : int
        if (!isBound()) return INTERRUPTION_FILTER_UNKNOWN;
        try {
            return getNotificationInterface().getInterruptionFilterFromListener(mWrapper);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
            return INTERRUPTION_FILTER_UNKNOWN;
        }
!!!4293687.java!!!	requestListenerHints(in hints : int) : void
        if (!isBound()) return;
        try {
            getNotificationInterface().requestHintsFromListener(mWrapper, hints);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!4293815.java!!!	requestInterruptionFilter(in interruptionFilter : int) : void
        if (!isBound()) return;
        try {
            getNotificationInterface()
                    .requestInterruptionFilterFromListener(mWrapper, interruptionFilter);
        } catch (android.os.RemoteException ex) {
            Log.v(TAG, "Unable to contact notification manager", ex);
        }
!!!4293943.java!!!	getCurrentRanking() : NotificationListenerService::RankingMap
        synchronized (mLock) {
            return mRankingMap;
        }
!!!4294071.java!!!	onBind(inout intent : Intent) : IBinder
        if (mWrapper == null) {
            mWrapper = new NotificationListenerWrapper();
        }
        return mWrapper;
!!!4294199.java!!!	isBound() : boolean
        if (mWrapper == null) {
            Log.w(TAG, "Notification listener service not yet bound.");
            return false;
        }
        return true;
!!!4294327.java!!!	onDestroy() : void
        onListenerDisconnected();
        super.onDestroy();
!!!4294455.java!!!	registerAsSystemService(inout context : Context, inout componentName : ComponentName, in currentUser : int) : void
        if (mWrapper == null) {
            mWrapper = new NotificationListenerWrapper();
        }
        mSystemContext = context;
        INotificationManager noMan = getNotificationInterface();
        mHandler = new MyHandler(context.getMainLooper());
        mCurrentUser = currentUser;
        noMan.registerListener(mWrapper, componentName, currentUser);
!!!4294583.java!!!	unregisterAsSystemService() : void
        if (mWrapper != null) {
            INotificationManager noMan = getNotificationInterface();
            noMan.unregisterListener(mWrapper, mCurrentUser);
        }
!!!4294711.java!!!	requestRebind(inout componentName : ComponentName) : void
        INotificationManager noMan = INotificationManager.Stub.asInterface(
                ServiceManager.getService(Context.NOTIFICATION_SERVICE));
        try {
            noMan.requestBindListener(componentName);
        } catch (RemoteException ex) {
            throw ex.rethrowFromSystemServer();
        }
!!!4294839.java!!!	requestUnbind() : void
        if (mWrapper != null) {
            INotificationManager noMan = getNotificationInterface();
            try {
                noMan.requestUnbindListener(mWrapper);
                // Disable future messages.
                isConnected = false;
            } catch (RemoteException ex) {
                throw ex.rethrowFromSystemServer();
            }
        }
!!!4294967.java!!!	createLegacyIconExtras(inout n : Notification) : void
        Icon smallIcon = n.getSmallIcon();
        Icon largeIcon = n.getLargeIcon();
        if (smallIcon != null && smallIcon.getType() == Icon.TYPE_RESOURCE) {
            n.extras.putInt(Notification.EXTRA_SMALL_ICON, smallIcon.getResId());
            n.icon = smallIcon.getResId();
        }
        if (largeIcon != null) {
            Drawable d = largeIcon.loadDrawable(getContext());
            if (d != null && d instanceof BitmapDrawable) {
                final Bitmap largeIconBits = ((BitmapDrawable) d).getBitmap();
                n.extras.putParcelable(Notification.EXTRA_LARGE_ICON, largeIconBits);
                n.largeIcon = largeIconBits;
            }
        }
!!!4295095.java!!!	maybePopulateRemoteViews(inout notification : Notification) : void
        if (getContext().getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.N) {
            Builder builder = Builder.recoverBuilder(getContext(), notification);

            // Some styles wrap Notification's contentView, bigContentView and headsUpContentView.
            // First inflate them all, only then set them to avoid recursive wrapping.
            RemoteViews content = builder.createContentView();
            RemoteViews big = builder.createBigContentView();
            RemoteViews headsUp = builder.createHeadsUpContentView();

            notification.contentView = content;
            notification.bigContentView = big;
            notification.headsUpContentView = headsUp;
        }
!!!4296631.java!!!	applyUpdateLocked(inout update : NotificationRankingUpdate) : void
        mRankingMap = new RankingMap(update);
!!!4296759.java!!!	getContext() : Context
        if (mSystemContext != null) {
            return mSystemContext;
        }
        return this;
