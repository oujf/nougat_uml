class TileService
!!!4322999.java!!!	onDestroy() : void
        if (mListening) {
            onStopListening();
            mListening = false;
        }
        super.onDestroy();
!!!4323767.java!!!	setStatusIcon(inout icon : Icon, inout contentDescription : String) : void
        if (mService != null) {
            try {
                mService.updateStatusIcon(mTile, icon, contentDescription);
            } catch (RemoteException e) {
            }
        }
!!!4323895.java!!!	showDialog(inout dialog : Dialog) : void
        dialog.getWindow().getAttributes().token = mToken;
        dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_QS_DIALOG);
        dialog.getWindow().getDecorView().addOnAttachStateChangeListener(
                new OnAttachStateChangeListener() {
            @Override
            public void onViewAttachedToWindow(View v) {
            }

            @Override
            public void onViewDetachedFromWindow(View v) {
                try {
                    mService.onDialogHidden(getQsTile());
                } catch (RemoteException e) {
                }
            }
        });
        dialog.show();
        try {
            mService.onShowDialog(mTile);
        } catch (RemoteException e) {
        }
!!!4324023.java!!!	unlockAndRun(inout runnable : Runnable) : void
        mUnlockRunnable = runnable;
        try {
            mService.startUnlockAndRun(mTile);
        } catch (RemoteException e) {
        }
!!!4324151.java!!!	isSecure() : boolean
        try {
            return mService.isSecure();
        } catch (RemoteException e) {
            return true;
        }
!!!4324279.java!!!	isLocked() : boolean
        try {
            return mService.isLocked();
        } catch (RemoteException e) {
            return true;
        }
!!!4324407.java!!!	startActivityAndCollapse(inout intent : Intent) : void
        startActivity(intent);
        try {
            mService.onStartActivity(mTile);
        } catch (RemoteException e) {
        }
!!!4324535.java!!!	getQsTile() : Tile
        return mTile;
!!!4324663.java!!!	onBind(inout intent : Intent) : IBinder
        mService = IQSService.Stub.asInterface(intent.getIBinderExtra(EXTRA_SERVICE));
        try {
            ComponentName component = intent.getParcelableExtra(EXTRA_COMPONENT);
            mTile = mService.getTile(component);
        } catch (RemoteException e) {
            throw new RuntimeException("Unable to reach IQSService", e);
        }
        if (mTile != null) {
            mTile.setService(mService);
            mHandler.sendEmptyMessage(H.MSG_START_SUCCESS);
        }
        return new IQSTileService.Stub() {
            @Override
            public void onTileRemoved() throws RemoteException {
                mHandler.sendEmptyMessage(H.MSG_TILE_REMOVED);
            }

            @Override
            public void onTileAdded() throws RemoteException {
                mHandler.sendEmptyMessage(H.MSG_TILE_ADDED);
            }

            @Override
            public void onStopListening() throws RemoteException {
                mHandler.sendEmptyMessage(H.MSG_STOP_LISTENING);
            }

            @Override
            public void onStartListening() throws RemoteException {
                mHandler.sendEmptyMessage(H.MSG_START_LISTENING);
            }

            @Override
            public void onClick(IBinder wtoken) throws RemoteException {
                mHandler.obtainMessage(H.MSG_TILE_CLICKED, wtoken).sendToTarget();
            }

            @Override
            public void onUnlockComplete() throws RemoteException{
                mHandler.sendEmptyMessage(H.MSG_UNLOCK_COMPLETE);
            }
        };
!!!4325047.java!!!	requestListeningState(inout context : Context, inout component : ComponentName) : void
        Intent intent = new Intent(ACTION_REQUEST_LISTENING);
        intent.putExtra(EXTRA_COMPONENT, component);
        context.sendBroadcast(intent, Manifest.permission.BIND_QUICK_SETTINGS_TILE);
