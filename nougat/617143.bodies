class VoiceInteractionService
!!!4336055.java!!!	isActiveService(inout context : Context, inout service : ComponentName) : boolean
        String cur = Settings.Secure.getString(context.getContentResolver(),
                Settings.Secure.VOICE_INTERACTION_SERVICE);
        if (cur == null || cur.isEmpty()) {
            return false;
        }
        ComponentName curComp = ComponentName.unflattenFromString(cur);
        if (curComp == null) {
            return false;
        }
        return curComp.equals(service);
!!!4336183.java!!!	setDisabledShowContext(in flags : int) : void
        try {
            mSystemService.setDisabledShowContext(flags);
        } catch (RemoteException e) {
        }
!!!4336311.java!!!	getDisabledShowContext() : int
        try {
            return mSystemService.getDisabledShowContext();
        } catch (RemoteException e) {
            return 0;
        }
!!!4336439.java!!!	showSession(inout args : Bundle, in flags : int) : void
        if (mSystemService == null) {
            throw new IllegalStateException("Not available until onReady() is called");
        }
        try {
            mSystemService.showSession(mInterface, args, flags);
        } catch (RemoteException e) {
        }
!!!4336567.java!!!	onCreate() : void
        super.onCreate();
        mHandler = new MyHandler();
!!!4336695.java!!!	onBind(inout intent : Intent) : IBinder
        if (SERVICE_INTERFACE.equals(intent.getAction())) {
            return mInterface.asBinder();
        }
        return null;
!!!4336823.java!!!	onReady() : void
        mSystemService = IVoiceInteractionManagerService.Stub.asInterface(
                ServiceManager.getService(Context.VOICE_INTERACTION_MANAGER_SERVICE));
        mKeyphraseEnrollmentInfo = new KeyphraseEnrollmentInfo(getPackageManager());
!!!4336951.java!!!	onShutdownInternal() : void
        onShutdown();
        // Stop any active recognitions when shutting down.
        // This ensures that if implementations forget to stop any active recognition,
        // It's still guaranteed to have been stopped.
        // This helps with cases where the voice interaction implementation is changed
        // by the user.
        safelyShutdownHotwordDetector();
!!!4337207.java!!!	onSoundModelsChangedInternal() : void
        synchronized (this) {
            if (mHotwordDetector != null) {
                // TODO: Stop recognition if a sound model that was being recognized gets deleted.
                mHotwordDetector.onSoundModelsChanged();
            }
        }
!!!4337335.java!!!	createAlwaysOnHotwordDetector(inout keyphrase : String, inout locale : Locale, inout callback : AlwaysOnHotwordDetector::Callback) : AlwaysOnHotwordDetector
        if (mSystemService == null) {
            throw new IllegalStateException("Not available until onReady() is called");
        }
        synchronized (mLock) {
            // Allow only one concurrent recognition via the APIs.
            safelyShutdownHotwordDetector();
            mHotwordDetector = new AlwaysOnHotwordDetector(keyphrase, locale, callback,
                    mKeyphraseEnrollmentInfo, mInterface, mSystemService);
        }
        return mHotwordDetector;
!!!4337463.java!!!	getKeyphraseEnrollmentInfo() : KeyphraseEnrollmentInfo
        return mKeyphraseEnrollmentInfo;
!!!4337591.java!!!	safelyShutdownHotwordDetector() : void
        try {
            synchronized (mLock) {
                if (mHotwordDetector != null) {
                    mHotwordDetector.stopRecognition();
                    mHotwordDetector.invalidate();
                    mHotwordDetector = null;
                }
            }
        } catch (Exception ex) {
            // Ignore.
        }
!!!4337719.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        pw.println("VOICE INTERACTION");
        synchronized (mLock) {
            pw.println("  AlwaysOnHotwordDetector");
            if (mHotwordDetector == null) {
                pw.println("    NULL");
            } else {
                mHotwordDetector.dump("    ", pw);
            }
        }
