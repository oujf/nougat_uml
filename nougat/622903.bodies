class AudioPlaybackQueueItem
!!!4372919.java!!!	AudioPlaybackQueueItem(inout dispatcher : TextToSpeechService::UtteranceProgressDispatcher, inout callerIdentity : Object, inout context : Context, inout uri : Uri, inout audioParams : TextToSpeechService::AudioOutputParams)
        super(dispatcher, callerIdentity);

        mContext = context;
        mUri = uri;
        mAudioParams = audioParams;

        mDone = new ConditionVariable();
        mPlayer = null;
        mFinished = false;
!!!4373047.java!!!	run() : void
        final UtteranceProgressDispatcher dispatcher = getDispatcher();

        dispatcher.dispatchOnStart();

        int sessionId = mAudioParams.mSessionId;
        mPlayer = MediaPlayer.create(
                mContext, mUri, null, mAudioParams.mAudioAttributes,
                sessionId > 0 ? sessionId : AudioManager.AUDIO_SESSION_ID_GENERATE);
        if (mPlayer == null) {
            dispatcher.dispatchOnError(TextToSpeech.ERROR_OUTPUT);
            return;
        }

        try {
            mPlayer.setOnErrorListener(new MediaPlayer.OnErrorListener() {
                @Override
                public boolean onError(MediaPlayer mp, int what, int extra) {
                    Log.w(TAG, "Audio playback error: " + what + ", " + extra);
                    mDone.open();
                    return true;
                }
            });
            mPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                @Override
                public void onCompletion(MediaPlayer mp) {
                    mFinished = true;
                    mDone.open();
                }
            });

            setupVolume(mPlayer, mAudioParams.mVolume, mAudioParams.mPan);
            mPlayer.start();
            mDone.block();
            finish();
        } catch (IllegalArgumentException ex) {
            Log.w(TAG, "MediaPlayer failed", ex);
            mDone.open();
        }

        if (mFinished) {
            dispatcher.dispatchOnSuccess();
        } else {
            dispatcher.dispatchOnStop();
        }
!!!4373175.java!!!	setupVolume(inout player : MediaPlayer, in volume : float, in pan : float) : void
        final float vol = clip(volume, 0.0f, 1.0f);
        final float panning = clip(pan, -1.0f, 1.0f);

        float volLeft = vol, volRight = vol;
        if (panning > 0.0f) {
            volLeft *= (1.0f - panning);
        } else if (panning < 0.0f) {
            volRight *= (1.0f + panning);
        }
        player.setVolume(volLeft, volRight);
!!!4373303.java!!!	clip(in value : float, in min : float, in max : float) : float
        return value < min ? min : (value < max ? value : max);
!!!4373431.java!!!	finish() : void
        try {
            mPlayer.stop();
        } catch (IllegalStateException ex) {
            // Do nothing, the player is already stopped
        }
        mPlayer.release();
!!!4373559.java!!!	stop(in errorCode : int) : void
        mDone.open();
