class AndroidTestCase
!!!4411959.java!!!	setUp() : void
        super.setUp();
!!!4412087.java!!!	tearDown() : void
        super.tearDown();
!!!4412215.java!!!	testAndroidTestCaseSetupProperly() : void
        assertNotNull("Context is null. setContext should be called before tests are run",
                mContext);
!!!4412343.java!!!	setContext(inout context : Context) : void
        mContext = context;
!!!4412471.java!!!	getContext() : Context
        return mContext;
!!!4412599.java!!!	setTestContext(inout context : Context) : void
        mTestContext = context;
!!!4412727.java!!!	getTestContext() : Context
        return mTestContext;
!!!4412855.java!!!	assertActivityRequiresPermission(inout packageName : String, inout className : String, inout permission : String) : void
        final Intent intent = new Intent();
        intent.setClassName(packageName, className);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        try {
            getContext().startActivity(intent);
            fail("expected security exception for " + permission);
        } catch (SecurityException expected) {
            assertNotNull("security exception's error message.", expected.getMessage());
            assertTrue("error message should contain " + permission + ".",
                    expected.getMessage().contains(permission));
        }
!!!4412983.java!!!	assertReadingContentUriRequiresPermission(inout uri : Uri, inout permission : String) : void
        try {
            getContext().getContentResolver().query(uri, null, null, null, null);
            fail("expected SecurityException requiring " + permission);
        } catch (SecurityException expected) {
            assertNotNull("security exception's error message.", expected.getMessage());
            assertTrue("error message should contain " + permission + ".",
                    expected.getMessage().contains(permission));
        }
!!!4413111.java!!!	assertWritingContentUriRequiresPermission(inout uri : Uri, inout permission : String) : void
        try {
            getContext().getContentResolver().insert(uri, new ContentValues());
            fail("expected SecurityException requiring " + permission);
        } catch (SecurityException expected) {
            assertNotNull("security exception's error message.", expected.getMessage());
            assertTrue("error message should contain \"" + permission + "\". Got: \""
                    + expected.getMessage() + "\".",
                    expected.getMessage().contains(permission));
        }
!!!4413239.java!!!	scrubClass(in testCaseClass : Class) : void
        final Field[] fields = getClass().getDeclaredFields();
        for (Field field : fields) {
            if (!field.getType().isPrimitive() &&
                    !Modifier.isStatic(field.getModifiers())) {
                try {
                    field.setAccessible(true);
                    field.set(this, null);
                } catch (Exception e) {
                    android.util.Log.d("TestCase", "Error: Could not nullify field!");
                }

                if (field.get(this) != null) {
                    android.util.Log.d("TestCase", "Error: Could not nullify field!");
                }
            }
        }
