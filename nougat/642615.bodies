class TextKeyListener
!!!4577847.java!!!	TextKeyListener(inout cap : TextKeyListener::Capitalize, inout autotext : boolean)
        mAutoCap = cap;
        mAutoText = autotext;
!!!4577975.java!!!	getInstance(inout autotext : boolean, inout cap : TextKeyListener::Capitalize) : TextKeyListener
        int off = cap.ordinal() * 2 + (autotext ? 1 : 0);

        if (sInstance[off] == null) {
            sInstance[off] = new TextKeyListener(cap, autotext);
        }

        return sInstance[off];
!!!4578103.java!!!	getInstance() : TextKeyListener
        return getInstance(false, Capitalize.NONE);
!!!4578231.java!!!	shouldCap(inout cap : TextKeyListener::Capitalize, inout cs : CharSequence, in off : int) : boolean
        int i;
        char c;

        if (cap == Capitalize.NONE) {
            return false;
        }
        if (cap == Capitalize.CHARACTERS) {
            return true;
        }

        return TextUtils.getCapsMode(cs, off, cap == Capitalize.WORDS
                ? TextUtils.CAP_MODE_WORDS : TextUtils.CAP_MODE_SENTENCES)
                != 0;
!!!4578359.java!!!	getInputType() : int
        return makeTextContentType(mAutoCap, mAutoText);
!!!4578487.java!!!	onKeyDown(inout view : View, inout content : Editable, in keyCode : int, inout event : KeyEvent) : boolean
        KeyListener im = getKeyListener(event);

        return im.onKeyDown(view, content, keyCode, event);
!!!4578615.java!!!	onKeyUp(inout view : View, inout content : Editable, in keyCode : int, inout event : KeyEvent) : boolean
        KeyListener im = getKeyListener(event);

        return im.onKeyUp(view, content, keyCode, event);
!!!4578743.java!!!	onKeyOther(inout view : View, inout content : Editable, inout event : KeyEvent) : boolean
        KeyListener im = getKeyListener(event);

        return im.onKeyOther(view, content, event);
!!!4578871.java!!!	clear(inout e : Editable) : void
        e.clear();
        e.removeSpan(ACTIVE);
        e.removeSpan(CAPPED);
        e.removeSpan(INHIBIT_REPLACEMENT);
        e.removeSpan(LAST_TYPED);

        QwertyKeyListener.Replaced[] repl = e.getSpans(0, e.length(),
                                   QwertyKeyListener.Replaced.class);
        final int count = repl.length;
        for (int i = 0; i < count; i++) {
            e.removeSpan(repl[i]);
        }
!!!4579255.java!!!	onSpanChanged(inout s : Spannable, inout what : Object, in start : int, in end : int, in st : int, in en : int) : void
        if (what == Selection.SELECTION_END) {
            s.removeSpan(ACTIVE);
        }
!!!4579383.java!!!	getKeyListener(inout event : KeyEvent) : KeyListener
        KeyCharacterMap kmap = event.getKeyCharacterMap();
        int kind = kmap.getKeyboardType();

        if (kind == KeyCharacterMap.ALPHA) {
            return QwertyKeyListener.getInstance(mAutoText, mAutoCap);
        } else if (kind == KeyCharacterMap.NUMERIC) {
            return MultiTapKeyListener.getInstance(mAutoText, mAutoCap);
        } else if (kind == KeyCharacterMap.FULL
                || kind == KeyCharacterMap.SPECIAL_FUNCTION) {
            // We consider special function keyboards full keyboards as a workaround for
            // devices that do not have built-in keyboards.  Applications may try to inject
            // key events using the built-in keyboard device id which may be configured as
            // a special function keyboard using a default key map.  Ideally, as of Honeycomb,
            // these applications should be modified to use KeyCharacterMap.VIRTUAL_KEYBOARD.
            return QwertyKeyListener.getInstanceForFullKeyboard();
        }

        return NullKeyListener.getInstance();
!!!4580279.java!!!	release() : void
        if (mResolver != null) {
            final ContentResolver contentResolver = mResolver.get();
            if (contentResolver != null) {
                contentResolver.unregisterContentObserver(mObserver);
                mResolver.clear();
            }
            mObserver = null;
            mResolver = null;
            mPrefsInited = false;
        }
!!!4580407.java!!!	initPrefs(inout context : Context) : void
        final ContentResolver contentResolver = context.getContentResolver();
        mResolver = new WeakReference<ContentResolver>(contentResolver);
        if (mObserver == null) {
            mObserver = new SettingsObserver();
            contentResolver.registerContentObserver(Settings.System.CONTENT_URI, true, mObserver);
        }

        updatePrefs(contentResolver);
        mPrefsInited = true;
!!!4580791.java!!!	updatePrefs(inout resolver : ContentResolver) : void
        boolean cap = System.getInt(resolver, System.TEXT_AUTO_CAPS, 1) > 0;
        boolean text = System.getInt(resolver, System.TEXT_AUTO_REPLACE, 1) > 0;
        boolean period = System.getInt(resolver, System.TEXT_AUTO_PUNCTUATE, 1) > 0;
        boolean pw = System.getInt(resolver, System.TEXT_SHOW_PASSWORD, 1) > 0;

        mPrefs = (cap ? AUTO_CAP : 0) |
                 (text ? AUTO_TEXT : 0) |
                 (period ? AUTO_PERIOD : 0) |
                 (pw ? SHOW_PASSWORD : 0);
!!!4580919.java!!!	getPrefs(inout context : Context) : int
        synchronized (this) {
            if (!mPrefsInited || mResolver.get() == null) {
                initPrefs(context);
            }
        }

        return mPrefs;
