class DayOfMonthCursor
!!!4709431.java!!!	DayOfMonthCursor(in year : int, in month : int, in dayOfMonth : int, in weekStartDay : int)
        super(year, month, weekStartDay);
        mRow = getRowOf(dayOfMonth);
        mColumn = getColumnOf(dayOfMonth);
!!!4709559.java!!!	getSelectedRow() : int
        return mRow;
!!!4709687.java!!!	getSelectedColumn() : int
        return mColumn;
!!!4709815.java!!!	setSelectedRowColumn(in row : int, in col : int) : void
        mRow = row;
        mColumn = col;
!!!4709943.java!!!	getSelectedDayOfMonth() : int
        return getDayAt(mRow, mColumn);
!!!4710071.java!!!	getSelectedMonthOffset() : int
        if (isWithinCurrentMonth(mRow, mColumn)) {
            return 0;
        }
        if (mRow == 0) {
            return -1;
        }
        return 1;
!!!4710199.java!!!	setSelectedDayOfMonth(in dayOfMonth : int) : void
        mRow = getRowOf(dayOfMonth);
        mColumn = getColumnOf(dayOfMonth);
!!!4710327.java!!!	isSelected(in row : int, in column : int) : boolean
        return (mRow == row) && (mColumn == column);
!!!4710455.java!!!	up() : boolean
        if (isWithinCurrentMonth(mRow - 1, mColumn)) {
            // within current month, just move up
            mRow--;
            return false;
        }
        // flip back to previous month, same column, first position within month
        previousMonth();
        mRow = 5;
        while(!isWithinCurrentMonth(mRow, mColumn)) {
            mRow--;
        }
        return true;
!!!4710583.java!!!	down() : boolean
        if (isWithinCurrentMonth(mRow + 1, mColumn)) {
            // within current month, just move down
            mRow++;
            return false;
        }
        // flip to next month, same column, first position within month
        nextMonth();
        mRow = 0;
        while (!isWithinCurrentMonth(mRow, mColumn)) {
            mRow++;
        }
        return true;
!!!4710711.java!!!	left() : boolean
        if (mColumn == 0) {
            mRow--;
            mColumn = 6;
        } else {
            mColumn--;
        }

        if (isWithinCurrentMonth(mRow, mColumn)) {
            return false;
        }

        // need to flip to last day of previous month
        previousMonth();
        int lastDay = getNumberOfDaysInMonth();
        mRow = getRowOf(lastDay);
        mColumn = getColumnOf(lastDay);
        return true;
!!!4710839.java!!!	right() : boolean
        if (mColumn == 6) {
            mRow++;
            mColumn = 0;
        } else {
            mColumn++;
        }

        if (isWithinCurrentMonth(mRow, mColumn)) {
            return false;
        }

        // need to flip to first day of next month
        nextMonth();
        mRow = 0;
        mColumn = 0;
        while (!isWithinCurrentMonth(mRow, mColumn)) {
            mColumn++;
        }
        return true;
