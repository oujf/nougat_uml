class Log
!!!4733111.java!!!	v(inout tag : String, inout msg : String) : int
        return println_native(LOG_ID_MAIN, VERBOSE, tag, msg);
!!!4733239.java!!!	v(inout tag : String, inout msg : String, inout tr : Throwable) : int
        return printlns(LOG_ID_MAIN, VERBOSE, tag, msg, tr);
!!!4733367.java!!!	d(inout tag : String, inout msg : String) : int
        return println_native(LOG_ID_MAIN, DEBUG, tag, msg);
!!!4733495.java!!!	d(inout tag : String, inout msg : String, inout tr : Throwable) : int
        return printlns(LOG_ID_MAIN, DEBUG, tag, msg, tr);
!!!4733623.java!!!	i(inout tag : String, inout msg : String) : int
        return println_native(LOG_ID_MAIN, INFO, tag, msg);
!!!4733751.java!!!	i(inout tag : String, inout msg : String, inout tr : Throwable) : int
        return printlns(LOG_ID_MAIN, INFO, tag, msg, tr);
!!!4733879.java!!!	w(inout tag : String, inout msg : String) : int
        return println_native(LOG_ID_MAIN, WARN, tag, msg);
!!!4734007.java!!!	w(inout tag : String, inout msg : String, inout tr : Throwable) : int
        return printlns(LOG_ID_MAIN, WARN, tag, msg, tr);
!!!4734263.java!!!	w(inout tag : String, inout tr : Throwable) : int
        return printlns(LOG_ID_MAIN, WARN, tag, "", tr);
!!!4734391.java!!!	e(inout tag : String, inout msg : String) : int
        return println_native(LOG_ID_MAIN, ERROR, tag, msg);
!!!4734519.java!!!	e(inout tag : String, inout msg : String, inout tr : Throwable) : int
        return printlns(LOG_ID_MAIN, ERROR, tag, msg, tr);
!!!4734647.java!!!	wtf(inout tag : String, inout msg : String) : int
        return wtf(LOG_ID_MAIN, tag, msg, null, false, false);
!!!4734775.java!!!	wtfStack(inout tag : String, inout msg : String) : int
        return wtf(LOG_ID_MAIN, tag, msg, null, true, false);
!!!4734903.java!!!	wtf(inout tag : String, inout tr : Throwable) : int
        return wtf(LOG_ID_MAIN, tag, tr.getMessage(), tr, false, false);
!!!4735031.java!!!	wtf(inout tag : String, inout msg : String, inout tr : Throwable) : int
        return wtf(LOG_ID_MAIN, tag, msg, tr, false, false);
!!!4735159.java!!!	wtf(in logId : int, inout tag : String, inout msg : String, inout tr : Throwable, inout localStack : boolean, inout system : boolean) : int
        TerribleFailure what = new TerribleFailure(msg, tr);
        // Only mark this as ERROR, do not use ASSERT since that should be
        // reserved for cases where the system is guaranteed to abort.
        // The onTerribleFailure call does not always cause a crash.
        int bytes = printlns(logId, ERROR, tag, msg, localStack ? what : tr);
        sWtfHandler.onTerribleFailure(tag, what, system);
        return bytes;
!!!4735287.java!!!	wtfQuiet(in logId : int, inout tag : String, inout msg : String, inout system : boolean) : void
        TerribleFailure what = new TerribleFailure(msg, null);
        sWtfHandler.onTerribleFailure(tag, what, system);
!!!4735415.java!!!	setWtfHandler(inout handler : Log::TerribleFailureHandler) : Log::TerribleFailureHandler
        if (handler == null) {
            throw new NullPointerException("handler == null");
        }
        TerribleFailureHandler oldHandler = sWtfHandler;
        sWtfHandler = handler;
        return oldHandler;
!!!4735543.java!!!	getStackTraceString(inout tr : Throwable) : String
        if (tr == null) {
            return "";
        }

        // This is to reduce the amount of log spew that apps do in the non-error
        // condition of the network being unavailable.
        Throwable t = tr;
        while (t != null) {
            if (t instanceof UnknownHostException) {
                return "";
            }
            t = t.getCause();
        }

        StringWriter sw = new StringWriter();
        PrintWriter pw = new FastPrintWriter(sw, false, 256);
        tr.printStackTrace(pw);
        pw.flush();
        return sw.toString();
!!!4735671.java!!!	println(in priority : int, inout tag : String, inout msg : String) : int
        return println_native(LOG_ID_MAIN, priority, tag, msg);
!!!4736055.java!!!	printlns(in bufID : int, in priority : int, inout tag : String, inout msg : String, inout tr : Throwable) : int
        ImmediateLogWriter logWriter = new ImmediateLogWriter(bufID, priority, tag);
        // Acceptable buffer size. Get the native buffer size, subtract two zero terminators,
        // and the length of the tag.
        // Note: we implicitly accept possible truncation for Modified-UTF8 differences. It
        //       is too expensive to compute that ahead of time.
        int bufferSize = NoPreloadHolder.LOGGER_ENTRY_MAX_PAYLOAD  // Base.
                - 2                                                // Two terminators.
                - (tag != null ? tag.length() : 0)                 // Tag length.
                - 32;                                              // Some slack.
        // At least assume you can print *some* characters (tag is not too large).
        bufferSize = Math.max(bufferSize, 100);

        LineBreakBufferedWriter lbbw = new LineBreakBufferedWriter(logWriter, bufferSize);

        lbbw.println(msg);

        if (tr != null) {
            // This is to reduce the amount of log spew that apps do in the non-error
            // condition of the network being unavailable.
            Throwable t = tr;
            while (t != null) {
                if (t instanceof UnknownHostException) {
                    break;
                }
                if (t instanceof DeadSystemException) {
                    lbbw.println("DeadSystemException: The system died; "
                            + "earlier logs will point to the root cause");
                    break;
                }
                t = t.getCause();
            }
            if (t == null) {
                tr.printStackTrace(lbbw);
            }
        }

        lbbw.flush();

        return logWriter.getWritten();
