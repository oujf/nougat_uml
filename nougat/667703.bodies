class SparseLongArray
!!!4782263.java!!!	SparseLongArray()
        this(10);
!!!4782391.java!!!	SparseLongArray(in initialCapacity : int)
        if (initialCapacity == 0) {
            mKeys = EmptyArray.INT;
            mValues = EmptyArray.LONG;
        } else {
            mValues = ArrayUtils.newUnpaddedLongArray(initialCapacity);
            mKeys = new int[mValues.length];
        }
        mSize = 0;
!!!4782519.java!!!	clone() : SparseLongArray
        SparseLongArray clone = null;
        try {
            clone = (SparseLongArray) super.clone();
            clone.mKeys = mKeys.clone();
            clone.mValues = mValues.clone();
        } catch (CloneNotSupportedException cnse) {
            /* ignore */
        }
        return clone;
!!!4782647.java!!!	get(in key : int) : long
        return get(key, 0);
!!!4782775.java!!!	get(in key : int, in valueIfKeyNotFound : long) : long
        int i = ContainerHelpers.binarySearch(mKeys, mSize, key);

        if (i < 0) {
            return valueIfKeyNotFound;
        } else {
            return mValues[i];
        }
!!!4782903.java!!!	delete(in key : int) : void
        int i = ContainerHelpers.binarySearch(mKeys, mSize, key);

        if (i >= 0) {
            removeAt(i);
        }
!!!4783031.java!!!	removeAt(in index : int) : void
        System.arraycopy(mKeys, index + 1, mKeys, index, mSize - (index + 1));
        System.arraycopy(mValues, index + 1, mValues, index, mSize - (index + 1));
        mSize--;
!!!4783159.java!!!	put(in key : int, in value : long) : void
        int i = ContainerHelpers.binarySearch(mKeys, mSize, key);

        if (i >= 0) {
            mValues[i] = value;
        } else {
            i = ~i;

            mKeys = GrowingArrayUtils.insert(mKeys, mSize, i, key);
            mValues = GrowingArrayUtils.insert(mValues, mSize, i, value);
            mSize++;
        }
!!!4783287.java!!!	size() : int
        return mSize;
!!!4783415.java!!!	keyAt(in index : int) : int
        return mKeys[index];
!!!4783543.java!!!	valueAt(in index : int) : long
        return mValues[index];
!!!4783671.java!!!	indexOfKey(in key : int) : int
        return ContainerHelpers.binarySearch(mKeys, mSize, key);
!!!4783799.java!!!	indexOfValue(in value : long) : int
        for (int i = 0; i < mSize; i++)
            if (mValues[i] == value)
                return i;

        return -1;
!!!4783927.java!!!	clear() : void
        mSize = 0;
!!!4784055.java!!!	append(in key : int, in value : long) : void
        if (mSize != 0 && key <= mKeys[mSize - 1]) {
            put(key, value);
            return;
        }

        mKeys = GrowingArrayUtils.append(mKeys, mSize, key);
        mValues = GrowingArrayUtils.append(mValues, mSize, value);
        mSize++;
!!!4784183.java!!!	toString() : String
        if (size() <= 0) {
            return "{}";
        }

        StringBuilder buffer = new StringBuilder(mSize * 28);
        buffer.append('{');
        for (int i=0; i<mSize; i++) {
            if (i > 0) {
                buffer.append(", ");
            }
            int key = keyAt(i);
            buffer.append(key);
            buffer.append('=');
            long value = valueAt(i);
            buffer.append(value);
        }
        buffer.append('}');
        return buffer.toString();
