class TimedRemoteCaller
!!!4787127.java!!!	TimedRemoteCaller(in callTimeoutMillis : long)
        mCallTimeoutMillis = callTimeoutMillis;
!!!4787255.java!!!	onBeforeRemoteCall() : int
        synchronized (mLock) {
            mAwaitedSequence = mSequenceCounter++;
            return mAwaitedSequence;
        }
!!!4787383.java!!!	getResultTimed(in sequence : int) : T
        synchronized (mLock) {
            final boolean success = waitForResultTimedLocked(sequence);
            if (!success) {
                throw new TimeoutException("No reponse for sequence: " + sequence);
            }
            T result = mResult;
            mResult = null;
            return result;
        }
!!!4787511.java!!!	onRemoteMethodResult(inout result : T, in sequence : int) : void
        synchronized (mLock) {
            if (sequence == mAwaitedSequence) {
                mReceivedSequence = sequence;
                mResult = result;
                mLock.notifyAll();
            }
        }
!!!4787639.java!!!	waitForResultTimedLocked(in sequence : int) : boolean
        final long startMillis = SystemClock.uptimeMillis();
        while (true) {
            try {
                if (mReceivedSequence == sequence) {
                    return true;
                }
                final long elapsedMillis = SystemClock.uptimeMillis() - startMillis;
                final long waitMillis = mCallTimeoutMillis - elapsedMillis;
                if (waitMillis <= 0) {
                    return false;
                }
                mLock.wait(waitMillis);
            } catch (InterruptedException ie) {
                /* ignore */
            }
        }
