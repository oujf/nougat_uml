class BatchedInputEventReceiver
!!!4828343.java!!!	BatchedInputEventReceiver(inout inputChannel : InputChannel, inout looper : Looper, inout choreographer : Choreographer)
        super(inputChannel, looper);
        mChoreographer = choreographer;
!!!4828471.java!!!	onBatchedInputEventPending() : void
        scheduleBatchedInput();
!!!4828599.java!!!	dispose() : void
        unscheduleBatchedInput();
        super.dispose();
!!!4828727.java!!!	doConsumeBatchedInput(in frameTimeNanos : long) : void
        if (mBatchedInputScheduled) {
            mBatchedInputScheduled = false;
            if (consumeBatchedInputEvents(frameTimeNanos) && frameTimeNanos != -1) {
                // If we consumed a batch here, we want to go ahead and schedule the
                // consumption of batched input events on the next frame. Otherwise, we would
                // wait until we have more input events pending and might get starved by other
                // things occurring in the process. If the frame time is -1, however, then
                // we're in a non-batching mode, so there's no need to schedule this.
                scheduleBatchedInput();
            }
        }
!!!4828855.java!!!	scheduleBatchedInput() : void
        if (!mBatchedInputScheduled) {
            mBatchedInputScheduled = true;
            mChoreographer.postCallback(Choreographer.CALLBACK_INPUT, mBatchedInputRunnable, null);
        }
!!!4828983.java!!!	unscheduleBatchedInput() : void
        if (mBatchedInputScheduled) {
            mBatchedInputScheduled = false;
            mChoreographer.removeCallbacks(
                    Choreographer.CALLBACK_INPUT, mBatchedInputRunnable, null);
        }
