class SequentialFocusComparator
!!!4862263.java!!!	recycle() : void
            mRoot = null;
            mFocusables.clear();
            mHeadsOfChains.clear();
            mIsConnectedTo.clear();
!!!4862391.java!!!	setRoot(inout root : ViewGroup) : void
            mRoot = root;
!!!4862519.java!!!	setIsLayoutRtl(inout b : boolean) : void
            mIsLayoutRtl = b;
!!!4862647.java!!!	setFocusables(inout focusables : ArrayList<View>) : void
            for (int i = focusables.size() - 1; i >= 0; i--) {
                final View view = focusables.get(i);
                final int id = view.getId();
                if (isValidId(id)) {
                    mFocusables.put(id, view);
                }
                final int nextId = view.getNextFocusForwardId();
                if (isValidId(nextId)) {
                    mIsConnectedTo.put(nextId, true);
                }
            }

            for (int i = focusables.size() - 1; i >= 0; i--) {
                final View view = focusables.get(i);
                final int nextId = view.getNextFocusForwardId();
                if (isValidId(nextId) && !mIsConnectedTo.get(view.getId())) {
                    setHeadOfChain(view);
                }
            }
!!!4862775.java!!!	setHeadOfChain(inout head : View) : void
            for (View view = head; view != null;
                    view = mFocusables.get(view.getNextFocusForwardId())) {
                final View otherHead = mHeadsOfChains.get(view);
                if (otherHead != null) {
                    if (otherHead == head) {
                        return; // This view has already had its head set properly
                    }
                    // A hydra -- multi-headed focus chain (e.g. A->C and B->C)
                    // Use the one we've already chosen instead and reset this chain.
                    view = head;
                    head = otherHead;
                }
                mHeadsOfChains.put(view, head);
            }
!!!4862903.java!!!	compare(inout first : View, inout second : View) : int
            if (first == second) {
                return 0;
            }
            // Order between views within a chain is immaterial -- next/previous is
            // within a chain is handled elsewhere.
            View firstHead = mHeadsOfChains.get(first);
            View secondHead = mHeadsOfChains.get(second);
            if (firstHead == secondHead && firstHead != null) {
                if (first == firstHead) {
                    return -1; // first is the head, it should be first
                } else if (second == firstHead) {
                    return 1; // second is the head, it should be first
                } else if (isValidId(first.getNextFocusForwardId())) {
                    return -1; // first is not the end of the chain
                } else {
                    return 1; // first is end of chain
                }
            }
            if (firstHead != null) {
                first = firstHead;
            }
            if (secondHead != null) {
                second = secondHead;
            }

            // First see if they belong to the same focus chain.
            getRect(first, mFirstRect);
            getRect(second, mSecondRect);

            if (mFirstRect.top < mSecondRect.top) {
                return -1;
            } else if (mFirstRect.top > mSecondRect.top) {
                return 1;
            } else if (mFirstRect.left < mSecondRect.left) {
                return mIsLayoutRtl ? 1 : -1;
            } else if (mFirstRect.left > mSecondRect.left) {
                return mIsLayoutRtl ? -1 : 1;
            } else if (mFirstRect.bottom < mSecondRect.bottom) {
                return -1;
            } else if (mFirstRect.bottom > mSecondRect.bottom) {
                return 1;
            } else if (mFirstRect.right < mSecondRect.right) {
                return mIsLayoutRtl ? 1 : -1;
            } else if (mFirstRect.right > mSecondRect.right) {
                return mIsLayoutRtl ? -1 : 1;
            } else {
                // The view are distinct but completely coincident so we consider
                // them equal for our purposes.  Since the sort is stable, this
                // means that the views will retain their layout order relative to one another.
                return 0;
            }
!!!4863031.java!!!	getRect(inout view : View, inout rect : Rect) : void
            view.getDrawingRect(rect);
            mRoot.offsetDescendantRectToMyCoords(view, rect);
