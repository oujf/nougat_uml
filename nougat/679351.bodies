class NotificationHeaderView
!!!4934071.java!!!	NotificationHeaderView(inout context : Context)
        this(context, null);
!!!4934199.java!!!	NotificationHeaderView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!4934327.java!!!	NotificationHeaderView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!4934455.java!!!	NotificationHeaderView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);
        mChildMinWidth = getResources().getDimensionPixelSize(
                com.android.internal.R.dimen.notification_header_shrink_min_width);
        mContentEndMargin = getResources().getDimensionPixelSize(
                com.android.internal.R.dimen.notification_content_margin_end);
        mHeaderBackgroundHeight = getResources().getDimensionPixelSize(
                com.android.internal.R.dimen.notification_header_background_height);
!!!4934583.java!!!	onFinishInflate() : void
        super.onFinishInflate();
        mAppName = findViewById(com.android.internal.R.id.app_name_text);
        mHeaderText = findViewById(com.android.internal.R.id.header_text);
        mExpandButton = (ImageView) findViewById(com.android.internal.R.id.expand_button);
        if (mExpandButton != null) {
            mExpandButton.setAccessibilityDelegate(mExpandDelegate);
        }
        mIcon = findViewById(com.android.internal.R.id.icon);
        mProfileBadge = findViewById(com.android.internal.R.id.profile_badge);
!!!4934711.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        final int givenWidth = MeasureSpec.getSize(widthMeasureSpec);
        final int givenHeight = MeasureSpec.getSize(heightMeasureSpec);
        int wrapContentWidthSpec = MeasureSpec.makeMeasureSpec(givenWidth,
                MeasureSpec.AT_MOST);
        int wrapContentHeightSpec = MeasureSpec.makeMeasureSpec(givenHeight,
                MeasureSpec.AT_MOST);
        int totalWidth = getPaddingStart() + getPaddingEnd();
        for (int i = 0; i < getChildCount(); i++) {
            final View child = getChildAt(i);
            if (child.getVisibility() == GONE) {
                // We'll give it the rest of the space in the end
                continue;
            }
            final MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();
            int childWidthSpec = getChildMeasureSpec(wrapContentWidthSpec,
                    lp.leftMargin + lp.rightMargin, lp.width);
            int childHeightSpec = getChildMeasureSpec(wrapContentHeightSpec,
                    lp.topMargin + lp.bottomMargin, lp.height);
            child.measure(childWidthSpec, childHeightSpec);
            totalWidth += lp.leftMargin + lp.rightMargin + child.getMeasuredWidth();
        }
        if (totalWidth > givenWidth) {
            int overFlow = totalWidth - givenWidth;
            // We are overflowing, lets shrink the app name first
            final int appWidth = mAppName.getMeasuredWidth();
            if (overFlow > 0 && mAppName.getVisibility() != GONE && appWidth > mChildMinWidth) {
                int newSize = appWidth - Math.min(appWidth - mChildMinWidth, overFlow);
                int childWidthSpec = MeasureSpec.makeMeasureSpec(newSize, MeasureSpec.AT_MOST);
                mAppName.measure(childWidthSpec, wrapContentHeightSpec);
                overFlow -= appWidth - newSize;
            }
            // still overflowing, finaly we shrink the header text
            if (overFlow > 0 && mHeaderText.getVisibility() != GONE) {
                // we're still too big
                final int textWidth = mHeaderText.getMeasuredWidth();
                int newSize = Math.max(0, textWidth - overFlow);
                int childWidthSpec = MeasureSpec.makeMeasureSpec(newSize, MeasureSpec.AT_MOST);
                mHeaderText.measure(childWidthSpec, wrapContentHeightSpec);
            }
        }
        setMeasuredDimension(givenWidth, givenHeight);
!!!4934839.java!!!	onLayout(inout changed : boolean, in l : int, in t : int, in r : int, in b : int) : void
        int left = getPaddingStart();
        int childCount = getChildCount();
        int ownHeight = getHeight() - getPaddingTop() - getPaddingBottom();
        for (int i = 0; i < childCount; i++) {
            View child = getChildAt(i);
            if (child.getVisibility() == GONE) {
                continue;
            }
            int childHeight = child.getMeasuredHeight();
            MarginLayoutParams params = (MarginLayoutParams) child.getLayoutParams();
            left += params.getMarginStart();
            int right = left + child.getMeasuredWidth();
            int top = (int) (getPaddingTop() + (ownHeight - childHeight) / 2.0f);
            int bottom = top + childHeight;
            int layoutLeft = left;
            int layoutRight = right;
            if (child == mProfileBadge) {
                int paddingEnd = getPaddingEnd();
                if (mShowWorkBadgeAtEnd) {
                    paddingEnd = mContentEndMargin;
                }
                layoutRight = getWidth() - paddingEnd;
                layoutLeft = layoutRight - child.getMeasuredWidth();
            }
            if (getLayoutDirection() == LAYOUT_DIRECTION_RTL) {
                int ltrLeft = layoutLeft;
                layoutLeft = getWidth() - layoutRight;
                layoutRight = getWidth() - ltrLeft;
            }
            child.layout(layoutLeft, top, layoutRight, bottom);
            left = right + params.getMarginEnd();
        }
        updateTouchListener();
!!!4934967.java!!!	generateLayoutParams(inout attrs : AttributeSet) : ViewGroup::LayoutParams
        return new ViewGroup.MarginLayoutParams(getContext(), attrs);
!!!4935095.java!!!	setHeaderBackgroundDrawable(inout drawable : Drawable) : void
        if (drawable != null) {
            setWillNotDraw(false);
            mBackground = drawable;
            mBackground.setCallback(this);
            setOutlineProvider(mProvider);
        } else {
            setWillNotDraw(true);
            mBackground = null;
            setOutlineProvider(null);
        }
        invalidate();
!!!4935223.java!!!	onDraw(inout canvas : Canvas) : void
        if (mBackground != null) {
            mBackground.setBounds(0, 0, getWidth(), mHeaderBackgroundHeight);
            mBackground.draw(canvas);
        }
!!!4935351.java!!!	verifyDrawable(inout who : Drawable) : boolean
        return super.verifyDrawable(who) || who == mBackground;
!!!4935479.java!!!	drawableStateChanged() : void
        if (mBackground != null && mBackground.isStateful()) {
            mBackground.setState(getDrawableState());
        }
!!!4935607.java!!!	updateTouchListener() : void
        if (mExpandClickListener != null) {
            mTouchListener.bindTouchRects();
        }
!!!4935735.java!!!	setOnClickListener(inout l : View::OnClickListener) : void
        mExpandClickListener = l;
        setOnTouchListener(mExpandClickListener != null ? mTouchListener : null);
        mExpandButton.setOnClickListener(mExpandClickListener);
        updateTouchListener();
!!!4935863.java!!!	setOriginalIconColor(in color : int) : void
        mIconColor = color;
!!!4935991.java!!!	getOriginalIconColor() : int
        return mIconColor;
!!!4936119.java!!!	setOriginalNotificationColor(in color : int) : void
        mOriginalNotificationColor = color;
!!!4936247.java!!!	getOriginalNotificationColor() : int
        return mOriginalNotificationColor;
!!!4936375.java!!!	setExpanded(inout expanded : boolean) : void
        mExpanded = expanded;
        updateExpandButton();
!!!4936503.java!!!	updateExpandButton() : void
        int drawableId;
        if (mExpanded) {
            drawableId = com.android.internal.R.drawable.ic_collapse_notification;
        } else {
            drawableId = com.android.internal.R.drawable.ic_expand_notification;
        }
        mExpandButton.setImageDrawable(getContext().getDrawable(drawableId));
        mExpandButton.setColorFilter(mOriginalNotificationColor);
!!!4936631.java!!!	setShowWorkBadgeAtEnd(inout showWorkBadgeAtEnd : boolean) : void
        if (showWorkBadgeAtEnd != mShowWorkBadgeAtEnd) {
            setClipToPadding(!showWorkBadgeAtEnd);
            mShowWorkBadgeAtEnd = showWorkBadgeAtEnd;
        }
!!!4936759.java!!!	getWorkProfileIcon() : View
        return mProfileBadge;
!!!4937783.java!!!	getFirstChildNotGone() : View
        for (int i = 0; i < getChildCount(); i++) {
            final View child = getChildAt(i);
            if (child.getVisibility() != GONE) {
                return child;
            }
        }
        return this;
!!!4937911.java!!!	getExpandButton() : ImageView
        return mExpandButton;
!!!4938039.java!!!	hasOverlappingRendering() : boolean
        return false;
!!!4938167.java!!!	isInTouchRect(in x : float, in y : float) : boolean
        if (mExpandClickListener == null) {
            return false;
        }
        return mTouchListener.isInside(x, y);
