class AnimatedVectorDrawable
!!!27876023.java!!!	AnimatedVectorDrawable()
        this(null, null);
!!!27876151.java!!!	AnimatedVectorDrawable(inout state : AnimatedVectorDrawable::AnimatedVectorDrawableState, inout res : Resources)
        mAnimatedVectorState = new AnimatedVectorDrawableState(state, mCallback, res);
        mRes = res;
!!!27876279.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            mAnimatedVectorState = new AnimatedVectorDrawableState(
                    mAnimatedVectorState, mCallback, mRes);
            mMutated = true;
        }
        return this;
!!!27876407.java!!!	clearMutated() : void
        super.clearMutated();
        if (mAnimatedVectorState.mVectorDrawable != null) {
            mAnimatedVectorState.mVectorDrawable.clearMutated();
        }
        mMutated = false;
!!!27876535.java!!!	shouldIgnoreInvalidAnimation() : boolean
        Application app = ActivityThread.currentApplication();
        if (app == null || app.getApplicationInfo() == null) {
            return true;
        }
        if (app.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.N) {
            return true;
        }
        return false;
!!!27876663.java!!!	getConstantState() : Drawable::ConstantState
        mAnimatedVectorState.mChangingConfigurations = getChangingConfigurations();
        return mAnimatedVectorState;
!!!27876791.java!!!	getChangingConfigurations() : int
        return super.getChangingConfigurations() | mAnimatedVectorState.getChangingConfigurations();
!!!27876919.java!!!	draw(inout canvas : Canvas) : void
        mAnimatorSet.onDraw(canvas);
        mAnimatedVectorState.mVectorDrawable.draw(canvas);
!!!27877047.java!!!	onBoundsChange(inout bounds : Rect) : void
        mAnimatedVectorState.mVectorDrawable.setBounds(bounds);
!!!27877175.java!!!	onStateChange(inout state : int) : boolean
        return mAnimatedVectorState.mVectorDrawable.setState(state);
!!!27877303.java!!!	onLevelChange(in level : int) : boolean
        return mAnimatedVectorState.mVectorDrawable.setLevel(level);
!!!27877431.java!!!	onLayoutDirectionChanged(in layoutDirection : int) : boolean
        return mAnimatedVectorState.mVectorDrawable.setLayoutDirection(layoutDirection);
!!!27877559.java!!!	getAlpha() : int
        return mAnimatedVectorState.mVectorDrawable.getAlpha();
!!!27877687.java!!!	setAlpha(in alpha : int) : void
        mAnimatedVectorState.mVectorDrawable.setAlpha(alpha);
!!!27877815.java!!!	setColorFilter(inout colorFilter : ColorFilter) : void
        mAnimatedVectorState.mVectorDrawable.setColorFilter(colorFilter);
!!!27877943.java!!!	getColorFilter() : ColorFilter
        return mAnimatedVectorState.mVectorDrawable.getColorFilter();
!!!27878071.java!!!	setTintList(inout tint : ColorStateList) : void
        mAnimatedVectorState.mVectorDrawable.setTintList(tint);
!!!27878199.java!!!	setHotspot(in x : float, in y : float) : void
        mAnimatedVectorState.mVectorDrawable.setHotspot(x, y);
!!!27878327.java!!!	setHotspotBounds(in left : int, in top : int, in right : int, in bottom : int) : void
        mAnimatedVectorState.mVectorDrawable.setHotspotBounds(left, top, right, bottom);
!!!27878455.java!!!	setTintMode(inout tintMode : PorterDuff::Mode) : void
        mAnimatedVectorState.mVectorDrawable.setTintMode(tintMode);
!!!27878583.java!!!	setVisible(inout visible : boolean, inout restart : boolean) : boolean
        if (mAnimatorSet.isInfinite() && mAnimatorSet.isStarted()) {
            if (visible) {
                // Resume the infinite animation when the drawable becomes visible again.
                mAnimatorSet.resume();
            } else {
                // Pause the infinite animation once the drawable is no longer visible.
                mAnimatorSet.pause();
            }
        }
        mAnimatedVectorState.mVectorDrawable.setVisible(visible, restart);
        return super.setVisible(visible, restart);
!!!27878711.java!!!	isStateful() : boolean
        return mAnimatedVectorState.mVectorDrawable.isStateful();
!!!27878839.java!!!	getOpacity() : int
        return PixelFormat.TRANSLUCENT;
!!!27878967.java!!!	getIntrinsicWidth() : int
        return mAnimatedVectorState.mVectorDrawable.getIntrinsicWidth();
!!!27879095.java!!!	getIntrinsicHeight() : int
        return mAnimatedVectorState.mVectorDrawable.getIntrinsicHeight();
!!!27879223.java!!!	getOutline(inout outline : Outline) : void
        mAnimatedVectorState.mVectorDrawable.getOutline(outline);
!!!27879351.java!!!	getOpticalInsets() : Insets
        return mAnimatedVectorState.mVectorDrawable.getOpticalInsets();
!!!27879479.java!!!	inflate(inout res : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        final AnimatedVectorDrawableState state = mAnimatedVectorState;

        int eventType = parser.getEventType();
        float pathErrorScale = 1;
        while (eventType != XmlPullParser.END_DOCUMENT) {
            if (eventType == XmlPullParser.START_TAG) {
                final String tagName = parser.getName();
                if (ANIMATED_VECTOR.equals(tagName)) {
                    final TypedArray a = obtainAttributes(res, theme, attrs,
                            R.styleable.AnimatedVectorDrawable);
                    int drawableRes = a.getResourceId(
                            R.styleable.AnimatedVectorDrawable_drawable, 0);
                    if (drawableRes != 0) {
                        VectorDrawable vectorDrawable = (VectorDrawable) res.getDrawable(
                                drawableRes, theme).mutate();
                        vectorDrawable.setAllowCaching(false);
                        vectorDrawable.setCallback(mCallback);
                        pathErrorScale = vectorDrawable.getPixelSize();
                        if (state.mVectorDrawable != null) {
                            state.mVectorDrawable.setCallback(null);
                        }
                        state.mVectorDrawable = vectorDrawable;
                    }
                    a.recycle();
                } else if (TARGET.equals(tagName)) {
                    final TypedArray a = obtainAttributes(res, theme, attrs,
                            R.styleable.AnimatedVectorDrawableTarget);
                    final String target = a.getString(
                            R.styleable.AnimatedVectorDrawableTarget_name);
                    final int animResId = a.getResourceId(
                            R.styleable.AnimatedVectorDrawableTarget_animation, 0);
                    if (animResId != 0) {
                        if (theme != null) {
                            final Animator objectAnimator = AnimatorInflater.loadAnimator(
                                    res, theme, animResId, pathErrorScale);
                            state.addTargetAnimator(target, objectAnimator);
                        } else {
                            // The animation may be theme-dependent. As a
                            // workaround until Animator has full support for
                            // applyTheme(), postpone loading the animator
                            // until we have a theme in applyTheme().
                            state.addPendingAnimator(animResId, pathErrorScale, target);

                        }
                    }
                    a.recycle();
                }
            }

            eventType = parser.next();
        }

        // If we don't have any pending animations, we don't need to hold a
        // reference to the resources.
        mRes = state.mPendingAnims == null ? null : res;
!!!27879607.java!!!	forceAnimationOnUI() : void
        if (mAnimatorSet instanceof VectorDrawableAnimatorRT) {
            VectorDrawableAnimatorRT animator = (VectorDrawableAnimatorRT) mAnimatorSet;
            if (animator.isRunning()) {
                throw new UnsupportedOperationException("Cannot force Animated Vector Drawable to" +
                        " run on UI thread when the animation has started on RenderThread.");
            }
            mAnimatorSet = new VectorDrawableAnimatorUI(this);
            if (mAnimatorSetFromXml != null) {
                mAnimatorSet.init(mAnimatorSetFromXml);
            }
        }
!!!27879735.java!!!	canApplyTheme() : boolean
        return (mAnimatedVectorState != null && mAnimatedVectorState.canApplyTheme())
                || super.canApplyTheme();
!!!27879863.java!!!	applyTheme(inout t : Resources::Theme) : void
        super.applyTheme(t);

        final VectorDrawable vectorDrawable = mAnimatedVectorState.mVectorDrawable;
        if (vectorDrawable != null && vectorDrawable.canApplyTheme()) {
            vectorDrawable.applyTheme(t);
        }

        if (t != null) {
            mAnimatedVectorState.inflatePendingAnimators(t.getResources(), t);
        }

        // If we don't have any pending animations, we don't need to hold a
        // reference to the resources.
        if (mAnimatedVectorState.mPendingAnims == null) {
            mRes = null;
        }
!!!27881527.java!!!	isRunning() : boolean
        return mAnimatorSet.isRunning();
!!!27881655.java!!!	reset() : void
        ensureAnimatorSet();
        if (DBG_ANIMATION_VECTOR_DRAWABLE) {
            Log.w(LOGTAG, "calling reset on AVD: " +
                    ((VectorDrawable.VectorDrawableState) ((AnimatedVectorDrawableState)
                    getConstantState()).mVectorDrawable.getConstantState()).mRootName
                    + ", at: " + this);
        }
        mAnimatorSet.reset();
!!!27881783.java!!!	start() : void
        ensureAnimatorSet();
        if (DBG_ANIMATION_VECTOR_DRAWABLE) {
            Log.w(LOGTAG, "calling start on AVD: " +
                    ((VectorDrawable.VectorDrawableState) ((AnimatedVectorDrawableState)
                    getConstantState()).mVectorDrawable.getConstantState()).mRootName
                    + ", at: " + this);
        }
        mAnimatorSet.start();
!!!27881911.java!!!	ensureAnimatorSet() : void
        if (mAnimatorSetFromXml == null) {
            // TODO: Skip the AnimatorSet creation and init the VectorDrawableAnimator directly
            // with a list of LocalAnimators.
            mAnimatorSetFromXml = new AnimatorSet();
            mAnimatedVectorState.prepareLocalAnimators(mAnimatorSetFromXml, mRes);
            mAnimatorSet.init(mAnimatorSetFromXml);
            mRes = null;
        }
!!!27882039.java!!!	stop() : void
        if (DBG_ANIMATION_VECTOR_DRAWABLE) {
            Log.w(LOGTAG, "calling stop on AVD: " +
                    ((VectorDrawable.VectorDrawableState) ((AnimatedVectorDrawableState)
                            getConstantState()).mVectorDrawable.getConstantState())
                            .mRootName + ", at: " + this);
        }
        mAnimatorSet.end();
!!!27882167.java!!!	reverse() : void
        ensureAnimatorSet();

        // Only reverse when all the animators can be reversed.
        if (!canReverse()) {
            Log.w(LOGTAG, "AnimatedVectorDrawable can't reverse()");
            return;
        }

        mAnimatorSet.reverse();
!!!27882295.java!!!	canReverse() : boolean
        return mAnimatorSet.canReverse();
!!!27882423.java!!!	registerAnimationCallback(inout callback : Animatable2::AnimationCallback) : void
        if (callback == null) {
            return;
        }

        // Add listener accordingly.
        if (mAnimationCallbacks == null) {
            mAnimationCallbacks = new ArrayList<>();
        }

        mAnimationCallbacks.add(callback);

        if (mAnimatorListener == null) {
            // Create a animator listener and trigger the callback events when listener is
            // triggered.
            mAnimatorListener = new AnimatorListenerAdapter() {
                @Override
                public void onAnimationStart(Animator animation) {
                    ArrayList<AnimationCallback> tmpCallbacks = new ArrayList<>(mAnimationCallbacks);
                    int size = tmpCallbacks.size();
                    for (int i = 0; i < size; i ++) {
                        tmpCallbacks.get(i).onAnimationStart(AnimatedVectorDrawable.this);
                    }
                }

                @Override
                public void onAnimationEnd(Animator animation) {
                    ArrayList<AnimationCallback> tmpCallbacks = new ArrayList<>(mAnimationCallbacks);
                    int size = tmpCallbacks.size();
                    for (int i = 0; i < size; i ++) {
                        tmpCallbacks.get(i).onAnimationEnd(AnimatedVectorDrawable.this);
                    }
                }
            };
        }
        mAnimatorSet.setListener(mAnimatorListener);
!!!27882551.java!!!	removeAnimatorSetListener() : void
        if (mAnimatorListener != null) {
            mAnimatorSet.removeListener(mAnimatorListener);
            mAnimatorListener = null;
        }
!!!27882679.java!!!	unregisterAnimationCallback(inout callback : Animatable2::AnimationCallback) : boolean
        if (mAnimationCallbacks == null || callback == null) {
            // Nothing to be removed.
            return false;
        }
        boolean removed = mAnimationCallbacks.remove(callback);

        //  When the last call back unregistered, remove the listener accordingly.
        if (mAnimationCallbacks.size() == 0) {
            removeAnimatorSetListener();
        }
        return removed;
!!!27882807.java!!!	clearAnimationCallbacks() : void
        removeAnimatorSetListener();
        if (mAnimationCallbacks == null) {
            return;
        }

        mAnimationCallbacks.clear();
