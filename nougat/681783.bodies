class SurfaceControl
!!!4976951.java!!!	SurfaceControl(inout session : SurfaceSession, inout name : String, in w : int, in h : int, in format : int, in flags : int)
        if (session == null) {
            throw new IllegalArgumentException("session must not be null");
        }
        if (name == null) {
            throw new IllegalArgumentException("name must not be null");
        }

        if ((flags & SurfaceControl.HIDDEN) == 0) {
            Log.w(TAG, "Surfaces should always be created with the HIDDEN flag set "
                    + "to ensure that they are not made visible prematurely before "
                    + "all of the surface's properties have been configured.  "
                    + "Set the other properties and make the surface visible within "
                    + "a transaction.  New surface name: " + name,
                    new Throwable());
        }

        mName = name;
        mNativeObject = nativeCreate(session, name, w, h, format, flags);
        if (mNativeObject == 0) {
            throw new OutOfResourcesException(
                    "Couldn't allocate SurfaceControl native object");
        }

        mCloseGuard.open("release");
!!!4977079.java!!!	finalize() : void
        try {
            if (mCloseGuard != null) {
                mCloseGuard.warnIfOpen();
            }
            if (mNativeObject != 0) {
                nativeRelease(mNativeObject);
            }
        } finally {
            super.finalize();
        }
!!!4977207.java!!!	toString() : String
        return "Surface(name=" + mName + ")";
!!!4977335.java!!!	release() : void
        if (mNativeObject != 0) {
            nativeRelease(mNativeObject);
            mNativeObject = 0;
        }
        mCloseGuard.close();
!!!4977463.java!!!	destroy() : void
        if (mNativeObject != 0) {
            nativeDestroy(mNativeObject);
            mNativeObject = 0;
        }
        mCloseGuard.close();
!!!4977591.java!!!	disconnect() : void
        if (mNativeObject != 0) {
            nativeDisconnect(mNativeObject);
        }
!!!4977719.java!!!	checkNotReleased() : void
        if (mNativeObject == 0) throw new NullPointerException(
                "mNativeObject is null. Have you called release() already?");
!!!4977847.java!!!	openTransaction() : void
        nativeOpenTransaction();
!!!4977975.java!!!	closeTransaction() : void
        nativeCloseTransaction(false);
!!!4978103.java!!!	closeTransactionSync() : void
        nativeCloseTransaction(true);
!!!4978231.java!!!	deferTransactionUntil(inout handle : IBinder, in frame : long) : void
        nativeDeferTransactionUntil(mNativeObject, handle, frame);
!!!4978359.java!!!	setOverrideScalingMode(in scalingMode : int) : void
        checkNotReleased();
        nativeSetOverrideScalingMode(mNativeObject, scalingMode);
!!!4978487.java!!!	getHandle() : IBinder
        return nativeGetHandle(mNativeObject);
!!!4978615.java!!!	setAnimationTransaction() : void
        nativeSetAnimationTransaction();
!!!4978743.java!!!	setLayer(in zorder : int) : void
        checkNotReleased();
        nativeSetLayer(mNativeObject, zorder);
!!!4978871.java!!!	setPosition(in x : float, in y : float) : void
        checkNotReleased();
        nativeSetPosition(mNativeObject, x, y);
!!!4978999.java!!!	setPositionAppliesWithResize() : void
        checkNotReleased();
        nativeSetPositionAppliesWithResize(mNativeObject);
!!!4979127.java!!!	setSize(in w : int, in h : int) : void
        checkNotReleased();
        nativeSetSize(mNativeObject, w, h);
!!!4979255.java!!!	hide() : void
        checkNotReleased();
        nativeSetFlags(mNativeObject, SURFACE_HIDDEN, SURFACE_HIDDEN);
!!!4979383.java!!!	show() : void
        checkNotReleased();
        nativeSetFlags(mNativeObject, 0, SURFACE_HIDDEN);
!!!4979511.java!!!	setTransparentRegionHint(inout region : Region) : void
        checkNotReleased();
        nativeSetTransparentRegionHint(mNativeObject, region);
!!!4979639.java!!!	clearContentFrameStats() : boolean
        checkNotReleased();
        return nativeClearContentFrameStats(mNativeObject);
!!!4979767.java!!!	getContentFrameStats(inout outStats : WindowContentFrameStats) : boolean
        checkNotReleased();
        return nativeGetContentFrameStats(mNativeObject, outStats);
!!!4979895.java!!!	clearAnimationFrameStats() : boolean
        return nativeClearAnimationFrameStats();
!!!4980023.java!!!	getAnimationFrameStats(inout outStats : WindowAnimationFrameStats) : boolean
        return nativeGetAnimationFrameStats(outStats);
!!!4980151.java!!!	setAlpha(in alpha : float) : void
        checkNotReleased();
        nativeSetAlpha(mNativeObject, alpha);
!!!4980279.java!!!	setMatrix(in dsdx : float, in dtdx : float, in dsdy : float, in dtdy : float) : void
        checkNotReleased();
        nativeSetMatrix(mNativeObject, dsdx, dtdx, dsdy, dtdy);
!!!4980407.java!!!	setWindowCrop(inout crop : Rect) : void
        checkNotReleased();
        if (crop != null) {
            nativeSetWindowCrop(mNativeObject,
                crop.left, crop.top, crop.right, crop.bottom);
        } else {
            nativeSetWindowCrop(mNativeObject, 0, 0, 0, 0);
        }
!!!4980535.java!!!	setFinalCrop(inout crop : Rect) : void
        checkNotReleased();
        if (crop != null) {
            nativeSetFinalCrop(mNativeObject,
                crop.left, crop.top, crop.right, crop.bottom);
        } else {
            nativeSetFinalCrop(mNativeObject, 0, 0, 0, 0);
        }
!!!4980663.java!!!	setLayerStack(in layerStack : int) : void
        checkNotReleased();
        nativeSetLayerStack(mNativeObject, layerStack);
!!!4980791.java!!!	setOpaque(inout isOpaque : boolean) : void
        checkNotReleased();
        if (isOpaque) {
            nativeSetFlags(mNativeObject, SURFACE_OPAQUE, SURFACE_OPAQUE);
        } else {
            nativeSetFlags(mNativeObject, 0, SURFACE_OPAQUE);
        }
!!!4980919.java!!!	setSecure(inout isSecure : boolean) : void
        checkNotReleased();
        if (isSecure) {
            nativeSetFlags(mNativeObject, SECURE, SECURE);
        } else {
            nativeSetFlags(mNativeObject, 0, SECURE);
        }
!!!4981943.java!!!	setDisplayPowerMode(inout displayToken : IBinder, in mode : int) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        nativeSetDisplayPowerMode(displayToken, mode);
!!!4982071.java!!!	getDisplayConfigs(inout displayToken : IBinder) : SurfaceControl::PhysicalDisplayInfo
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        return nativeGetDisplayConfigs(displayToken);
!!!4982199.java!!!	getActiveConfig(inout displayToken : IBinder) : int
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        return nativeGetActiveConfig(displayToken);
!!!4982327.java!!!	setActiveConfig(inout displayToken : IBinder, in id : int) : boolean
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        return nativeSetActiveConfig(displayToken, id);
!!!4982455.java!!!	setDisplayProjection(inout displayToken : IBinder, in orientation : int, inout layerStackRect : Rect, inout displayRect : Rect) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        if (layerStackRect == null) {
            throw new IllegalArgumentException("layerStackRect must not be null");
        }
        if (displayRect == null) {
            throw new IllegalArgumentException("displayRect must not be null");
        }
        nativeSetDisplayProjection(displayToken, orientation,
                layerStackRect.left, layerStackRect.top, layerStackRect.right, layerStackRect.bottom,
                displayRect.left, displayRect.top, displayRect.right, displayRect.bottom);
!!!4982583.java!!!	setDisplayLayerStack(inout displayToken : IBinder, in layerStack : int) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        nativeSetDisplayLayerStack(displayToken, layerStack);
!!!4982711.java!!!	setDisplaySurface(inout displayToken : IBinder, inout surface : Surface) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }

        if (surface != null) {
            synchronized (surface.mLock) {
                nativeSetDisplaySurface(displayToken, surface.mNativeObject);
            }
        } else {
            nativeSetDisplaySurface(displayToken, 0);
        }
!!!4982839.java!!!	setDisplaySize(inout displayToken : IBinder, in width : int, in height : int) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        if (width <= 0 || height <= 0) {
            throw new IllegalArgumentException("width and height must be positive");
        }

        nativeSetDisplaySize(displayToken, width, height);
!!!4982967.java!!!	getHdrCapabilities(inout displayToken : IBinder) : Display::HdrCapabilities
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        return nativeGetHdrCapabilities(displayToken);
!!!4983095.java!!!	createDisplay(inout name : String, inout secure : boolean) : IBinder
        if (name == null) {
            throw new IllegalArgumentException("name must not be null");
        }
        return nativeCreateDisplay(name, secure);
!!!4983223.java!!!	destroyDisplay(inout displayToken : IBinder) : void
        if (displayToken == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        nativeDestroyDisplay(displayToken);
!!!4983351.java!!!	getBuiltInDisplay(in builtInDisplayId : int) : IBinder
        return nativeGetBuiltInDisplay(builtInDisplayId);
!!!4983479.java!!!	screenshot(inout display : IBinder, inout consumer : Surface, in width : int, in height : int, in minLayer : int, in maxLayer : int, inout useIdentityTransform : boolean) : void
        screenshot(display, consumer, new Rect(), width, height, minLayer, maxLayer,
                false, useIdentityTransform);
!!!4983607.java!!!	screenshot(inout display : IBinder, inout consumer : Surface, in width : int, in height : int) : void
        screenshot(display, consumer, new Rect(), width, height, 0, 0, true, false);
!!!4983735.java!!!	screenshot(inout display : IBinder, inout consumer : Surface) : void
        screenshot(display, consumer, new Rect(), 0, 0, 0, 0, true, false);
!!!4983863.java!!!	screenshot(inout sourceCrop : Rect, in width : int, in height : int, in minLayer : int, in maxLayer : int, inout useIdentityTransform : boolean, in rotation : int) : Bitmap
        // TODO: should take the display as a parameter
        IBinder displayToken = SurfaceControl.getBuiltInDisplay(
                SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN);
        return nativeScreenshot(displayToken, sourceCrop, width, height,
                minLayer, maxLayer, false, useIdentityTransform, rotation);
!!!4983991.java!!!	screenshot(in width : int, in height : int) : Bitmap
        // TODO: should take the display as a parameter
        IBinder displayToken = SurfaceControl.getBuiltInDisplay(
                SurfaceControl.BUILT_IN_DISPLAY_ID_MAIN);
        return nativeScreenshot(displayToken, new Rect(), width, height, 0, 0, true,
                false, Surface.ROTATION_0);
!!!4984119.java!!!	screenshot(inout display : IBinder, inout consumer : Surface, inout sourceCrop : Rect, in width : int, in height : int, in minLayer : int, in maxLayer : int, inout allLayers : boolean, inout useIdentityTransform : boolean) : void
        if (display == null) {
            throw new IllegalArgumentException("displayToken must not be null");
        }
        if (consumer == null) {
            throw new IllegalArgumentException("consumer must not be null");
        }
        nativeScreenshot(display, consumer, sourceCrop, width, height,
                minLayer, maxLayer, allLayers, useIdentityTransform);
