class WindowManagerImpl
!!!5126071.java!!!	WindowManagerImpl(inout context : Context)
        this(context, null);
!!!5126199.java!!!	WindowManagerImpl(inout context : Context, inout parentWindow : Window)
        mContext = context;
        mParentWindow = parentWindow;
!!!5126327.java!!!	createLocalWindowManager(inout parentWindow : Window) : WindowManagerImpl
        return new WindowManagerImpl(mContext, parentWindow);
!!!5126455.java!!!	createPresentationWindowManager(inout displayContext : Context) : WindowManagerImpl
        return new WindowManagerImpl(displayContext, mParentWindow);
!!!5126583.java!!!	setDefaultToken(inout token : IBinder) : void
        mDefaultToken = token;
!!!5126711.java!!!	addView(inout view : View, inout params : ViewGroup::LayoutParams) : void
        applyDefaultToken(params);
        mGlobal.addView(view, params, mContext.getDisplay(), mParentWindow);
!!!5126839.java!!!	updateViewLayout(inout view : View, inout params : ViewGroup::LayoutParams) : void
        applyDefaultToken(params);
        mGlobal.updateViewLayout(view, params);
!!!5126967.java!!!	applyDefaultToken(inout params : ViewGroup::LayoutParams) : void
        // Only use the default token if we don't have a parent window.
        if (mDefaultToken != null && mParentWindow == null) {
            if (!(params instanceof WindowManager.LayoutParams)) {
                throw new IllegalArgumentException("Params must be WindowManager.LayoutParams");
            }

            // Only use the default token if we don't already have a token.
            final WindowManager.LayoutParams wparams = (WindowManager.LayoutParams) params;
            if (wparams.token == null) {
                wparams.token = mDefaultToken;
            }
        }
!!!5127095.java!!!	removeView(inout view : View) : void
        mGlobal.removeView(view, false);
!!!5127223.java!!!	removeViewImmediate(inout view : View) : void
        mGlobal.removeView(view, true);
!!!5127351.java!!!	requestAppKeyboardShortcuts(in receiver : WindowManager::KeyboardShortcutsReceiver, in deviceId : int) : void
        IResultReceiver resultReceiver = new IResultReceiver.Stub() {
            @Override
            public void send(int resultCode, Bundle resultData) throws RemoteException {
                List<KeyboardShortcutGroup> result =
                        resultData.getParcelableArrayList(PARCEL_KEY_SHORTCUTS_ARRAY);
                receiver.onKeyboardShortcutsReceived(result);
            }
        };
        try {
            WindowManagerGlobal.getWindowManagerService()
                .requestAppKeyboardShortcuts(resultReceiver, deviceId);
        } catch (RemoteException e) {
        }
!!!5127479.java!!!	getDefaultDisplay() : Display
        return mContext.getDisplay();
