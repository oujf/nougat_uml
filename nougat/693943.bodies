class AccessibilityRecord
!!!5152439.java!!!	setSource(inout source : View) : void
        setSource(source, UNDEFINED);
!!!5152567.java!!!	setSource(inout root : View, in virtualDescendantId : int) : void
        enforceNotSealed();
        boolean important = true;
        mSourceWindowId = UNDEFINED;
        clearSourceNode();
        if (root != null) {
            if (virtualDescendantId == UNDEFINED ||
                    virtualDescendantId == AccessibilityNodeInfo.UNDEFINED_ITEM_ID) {
                important = root.isImportantForAccessibility();
                mSourceNode = root.createAccessibilityNodeInfo();
            } else {
                AccessibilityNodeProvider provider = root.getAccessibilityNodeProvider();
                if (provider != null) {
                    mSourceNode = provider.createAccessibilityNodeInfo(virtualDescendantId);
                }
            }

            mSourceWindowId = root.getAccessibilityWindowId();
        }
        setBooleanProperty(PROPERTY_IMPORTANT_FOR_ACCESSIBILITY, important);
!!!5152695.java!!!	getSource() : AccessibilityNodeInfo
        enforceSealed();
        if (mSourceNode != null) {
            return AccessibilityNodeInfo.obtain(mSourceNode);
        }

        return null;
!!!5152823.java!!!	setWindowId(in windowId : int) : void
        mSourceWindowId = windowId;
!!!5152951.java!!!	getWindowId() : int
        return mSourceWindowId;
!!!5153079.java!!!	isChecked() : boolean
        return getBooleanProperty(PROPERTY_CHECKED);
!!!5153207.java!!!	setChecked(inout isChecked : boolean) : void
        enforceNotSealed();
        setBooleanProperty(PROPERTY_CHECKED, isChecked);
!!!5153335.java!!!	isEnabled() : boolean
        return getBooleanProperty(PROPERTY_ENABLED);
!!!5153463.java!!!	setEnabled(inout isEnabled : boolean) : void
        enforceNotSealed();
        setBooleanProperty(PROPERTY_ENABLED, isEnabled);
!!!5153591.java!!!	isPassword() : boolean
        return getBooleanProperty(PROPERTY_PASSWORD);
!!!5153719.java!!!	setPassword(inout isPassword : boolean) : void
        enforceNotSealed();
        setBooleanProperty(PROPERTY_PASSWORD, isPassword);
!!!5153847.java!!!	isFullScreen() : boolean
        return getBooleanProperty(PROPERTY_FULL_SCREEN);
!!!5153975.java!!!	setFullScreen(inout isFullScreen : boolean) : void
        enforceNotSealed();
        setBooleanProperty(PROPERTY_FULL_SCREEN, isFullScreen);
!!!5154103.java!!!	isScrollable() : boolean
        return getBooleanProperty(PROPERTY_SCROLLABLE);
!!!5154231.java!!!	setScrollable(inout scrollable : boolean) : void
        enforceNotSealed();
        setBooleanProperty(PROPERTY_SCROLLABLE, scrollable);
!!!5154359.java!!!	isImportantForAccessibility() : boolean
        return getBooleanProperty(PROPERTY_IMPORTANT_FOR_ACCESSIBILITY);
!!!5154487.java!!!	getItemCount() : int
        return mItemCount;
!!!5154615.java!!!	setItemCount(in itemCount : int) : void
        enforceNotSealed();
        mItemCount = itemCount;
!!!5154743.java!!!	getCurrentItemIndex() : int
        return mCurrentItemIndex;
!!!5154871.java!!!	setCurrentItemIndex(in currentItemIndex : int) : void
        enforceNotSealed();
        mCurrentItemIndex = currentItemIndex;
!!!5154999.java!!!	getFromIndex() : int
        return mFromIndex;
!!!5155127.java!!!	setFromIndex(in fromIndex : int) : void
        enforceNotSealed();
        mFromIndex = fromIndex;
!!!5155255.java!!!	getToIndex() : int
        return mToIndex;
!!!5155383.java!!!	setToIndex(in toIndex : int) : void
        enforceNotSealed();
        mToIndex = toIndex;
!!!5155511.java!!!	getScrollX() : int
        return mScrollX;
!!!5155639.java!!!	setScrollX(in scrollX : int) : void
        enforceNotSealed();
        mScrollX = scrollX;
!!!5155767.java!!!	getScrollY() : int
        return mScrollY;
!!!5155895.java!!!	setScrollY(in scrollY : int) : void
        enforceNotSealed();
        mScrollY = scrollY;
!!!5156023.java!!!	getMaxScrollX() : int
        return mMaxScrollX;
!!!5156151.java!!!	setMaxScrollX(in maxScrollX : int) : void
        enforceNotSealed();
        mMaxScrollX = maxScrollX;
!!!5156279.java!!!	getMaxScrollY() : int
        return mMaxScrollY;
!!!5156407.java!!!	setMaxScrollY(in maxScrollY : int) : void
        enforceNotSealed();
        mMaxScrollY = maxScrollY;
!!!5156535.java!!!	getAddedCount() : int
        return mAddedCount;
!!!5156663.java!!!	setAddedCount(in addedCount : int) : void
        enforceNotSealed();
        mAddedCount = addedCount;
!!!5156791.java!!!	getRemovedCount() : int
        return mRemovedCount;
!!!5156919.java!!!	setRemovedCount(in removedCount : int) : void
        enforceNotSealed();
        mRemovedCount = removedCount;
!!!5157047.java!!!	getClassName() : CharSequence
        return mClassName;
!!!5157175.java!!!	setClassName(inout className : CharSequence) : void
        enforceNotSealed();
        mClassName = className;
!!!5157303.java!!!	getText() : List<CharSequence>
        return mText;
!!!5157431.java!!!	getBeforeText() : CharSequence
        return mBeforeText;
!!!5157559.java!!!	setBeforeText(inout beforeText : CharSequence) : void
        enforceNotSealed();
        mBeforeText = beforeText;
!!!5157687.java!!!	getContentDescription() : CharSequence
        return mContentDescription;
!!!5157815.java!!!	setContentDescription(inout contentDescription : CharSequence) : void
        enforceNotSealed();
        mContentDescription = contentDescription;
!!!5157943.java!!!	getParcelableData() : Parcelable
        return mParcelableData;
!!!5158071.java!!!	setParcelableData(inout parcelableData : Parcelable) : void
        enforceNotSealed();
        mParcelableData = parcelableData;
!!!5158199.java!!!	getSourceNodeId() : long
        return mSourceNode != null ? mSourceNode.getSourceNodeId() : UNDEFINED;
!!!5158327.java!!!	setConnectionId(in connectionId : int) : void
        enforceNotSealed();
        mConnectionId = connectionId;
        if (mSourceNode != null) {
            mSourceNode.setConnectionId(mConnectionId);
        }
!!!5158455.java!!!	setSealed(inout sealed : boolean) : void
        mSealed = sealed;
        if (mSourceNode != null) {
            mSourceNode.setSealed(sealed);
        }
!!!5158583.java!!!	isSealed() : boolean
        return mSealed;
!!!5158711.java!!!	enforceSealed() : void
        if (!isSealed()) {
            throw new IllegalStateException("Cannot perform this "
                    + "action on a not sealed instance.");
        }
!!!5158839.java!!!	enforceNotSealed() : void
        if (isSealed()) {
            throw new IllegalStateException("Cannot perform this "
                    + "action on a sealed instance.");
        }
!!!5158967.java!!!	getBooleanProperty(in property : int) : boolean
        return (mBooleanProperties & property) == property;
!!!5159095.java!!!	setBooleanProperty(in property : int, inout value : boolean) : void
        if (value) {
            mBooleanProperties |= property;
        } else {
            mBooleanProperties &= ~property;
        }
!!!5159223.java!!!	obtain(inout record : AccessibilityRecord) : AccessibilityRecord
       AccessibilityRecord clone = AccessibilityRecord.obtain();
       clone.init(record);
       return clone;
!!!5159351.java!!!	obtain() : AccessibilityRecord
        synchronized (sPoolLock) {
            if (sPool != null) {
                AccessibilityRecord record = sPool;
                sPool = sPool.mNext;
                sPoolSize--;
                record.mNext = null;
                record.mIsInPool = false;
                return record;
            }
            return new AccessibilityRecord();
        }
!!!5159479.java!!!	recycle() : void
        if (mIsInPool) {
            throw new IllegalStateException("Record already recycled!");
        }
        clear();
        synchronized (sPoolLock) {
            if (sPoolSize <= MAX_POOL_SIZE) {
                mNext = sPool;
                sPool = this;
                mIsInPool = true;
                sPoolSize++;
            }
        }
!!!5159607.java!!!	init(inout record : AccessibilityRecord) : void
        mSealed = record.mSealed;
        mBooleanProperties = record.mBooleanProperties;
        mCurrentItemIndex = record.mCurrentItemIndex;
        mItemCount = record.mItemCount;
        mFromIndex = record.mFromIndex;
        mToIndex = record.mToIndex;
        mScrollX = record.mScrollX;
        mScrollY = record.mScrollY;
        mMaxScrollX = record.mMaxScrollX;
        mMaxScrollY = record.mMaxScrollY;
        mAddedCount = record.mAddedCount;
        mRemovedCount = record.mRemovedCount;
        mClassName = record.mClassName;
        mContentDescription = record.mContentDescription;
        mBeforeText = record.mBeforeText;
        mParcelableData = record.mParcelableData;
        mText.addAll(record.mText);
        mSourceWindowId = record.mSourceWindowId;
        if (record.mSourceNode != null) {
            mSourceNode = AccessibilityNodeInfo.obtain(record.mSourceNode);
        }
        mConnectionId = record.mConnectionId;
!!!5159735.java!!!	clear() : void
        mSealed = false;
        mBooleanProperties = 0;
        mCurrentItemIndex = UNDEFINED;
        mItemCount = UNDEFINED;
        mFromIndex = UNDEFINED;
        mToIndex = UNDEFINED;
        mScrollX = UNDEFINED;
        mScrollY = UNDEFINED;
        mMaxScrollX = UNDEFINED;
        mMaxScrollY = UNDEFINED;
        mAddedCount = UNDEFINED;
        mRemovedCount = UNDEFINED;
        mClassName = null;
        mContentDescription = null;
        mBeforeText = null;
        mParcelableData = null;
        mText.clear();
        clearSourceNode();
        mSourceWindowId = UNDEFINED;
        mConnectionId = UNDEFINED;
!!!5159863.java!!!	clearSourceNode() : void
        if (mSourceNode != null) {
            mSourceNode.recycle();
            mSourceNode = null;
        }
!!!5159991.java!!!	toString() : String
        StringBuilder builder = new StringBuilder();
        builder.append(" [ ClassName: " + mClassName);
        builder.append("; Text: " + mText);
        builder.append("; ContentDescription: " + mContentDescription);
        builder.append("; ItemCount: " + mItemCount);
        builder.append("; CurrentItemIndex: " + mCurrentItemIndex);
        builder.append("; IsEnabled: " + getBooleanProperty(PROPERTY_ENABLED));
        builder.append("; IsPassword: " + getBooleanProperty(PROPERTY_PASSWORD));
        builder.append("; IsChecked: " + getBooleanProperty(PROPERTY_CHECKED));
        builder.append("; IsFullScreen: " + getBooleanProperty(PROPERTY_FULL_SCREEN));
        builder.append("; Scrollable: " + getBooleanProperty(PROPERTY_SCROLLABLE));
        builder.append("; BeforeText: " + mBeforeText);
        builder.append("; FromIndex: " + mFromIndex);
        builder.append("; ToIndex: " + mToIndex);
        builder.append("; ScrollX: " + mScrollX);
        builder.append("; ScrollY: " + mScrollY);
        builder.append("; MaxScrollX: " + mMaxScrollX);
        builder.append("; MaxScrollY: " + mMaxScrollY);
        builder.append("; AddedCount: " + mAddedCount);
        builder.append("; RemovedCount: " + mRemovedCount);
        builder.append("; ParcelableData: " + mParcelableData);
        builder.append(" ]");
        return builder.toString();
