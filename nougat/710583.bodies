class WebViewDelegate
!!!5370423.java!!!	setOnTraceEnabledChangeListener(in listener : WebViewDelegate::OnTraceEnabledChangeListener) : void
        SystemProperties.addChangeCallback(new Runnable() {
            @Override
            public void run() {
                listener.onTraceEnabledChange(isTraceTagEnabled());
            }
        });
!!!5370551.java!!!	isTraceTagEnabled() : boolean
        return Trace.isTagEnabled(Trace.TRACE_TAG_WEBVIEW);
!!!5370679.java!!!	canInvokeDrawGlFunctor(inout containerView : View) : boolean
        return true;
!!!5370807.java!!!	invokeDrawGlFunctor(inout containerView : View, in nativeDrawGLFunctor : long, inout waitForCompletion : boolean) : void
        ViewRootImpl.invokeFunctor(nativeDrawGLFunctor, waitForCompletion);
!!!5370935.java!!!	callDrawGlFunction(inout canvas : Canvas, in nativeDrawGLFunctor : long) : void
        if (!(canvas instanceof DisplayListCanvas)) {
            // Canvas#isHardwareAccelerated() is only true for subclasses of HardwareCanvas.
            throw new IllegalArgumentException(canvas.getClass().getName()
                    + " is not a DisplayList canvas");
        }
        ((DisplayListCanvas) canvas).drawGLFunctor2(nativeDrawGLFunctor, null);
!!!5371063.java!!!	callDrawGlFunction(inout canvas : Canvas, in nativeDrawGLFunctor : long, inout releasedRunnable : Runnable) : void
        if (!(canvas instanceof DisplayListCanvas)) {
            // Canvas#isHardwareAccelerated() is only true for subclasses of HardwareCanvas.
            throw new IllegalArgumentException(canvas.getClass().getName()
                    + " is not a DisplayList canvas");
        }
        ((DisplayListCanvas) canvas).drawGLFunctor2(nativeDrawGLFunctor, releasedRunnable);
!!!5371191.java!!!	detachDrawGlFunctor(inout containerView : View, in nativeDrawGLFunctor : long) : void
        ViewRootImpl viewRootImpl = containerView.getViewRootImpl();
        if (nativeDrawGLFunctor != 0 && viewRootImpl != null) {
            viewRootImpl.detachFunctor(nativeDrawGLFunctor);
        }
!!!5371319.java!!!	getPackageId(inout resources : Resources, inout packageName : String) : int
        SparseArray<String> packageIdentifiers =
                resources.getAssets().getAssignedPackageIdentifiers();
        for (int i = 0; i < packageIdentifiers.size(); i++) {
            final String name = packageIdentifiers.valueAt(i);

            if (packageName.equals(name)) {
                return packageIdentifiers.keyAt(i);
            }
        }
        throw new RuntimeException("Package not found: " + packageName);
!!!5371447.java!!!	getApplication() : Application
        return ActivityThread.currentApplication();
!!!5371575.java!!!	getErrorString(inout context : Context, in errorCode : int) : String
        return LegacyErrorStrings.getString(errorCode, context);
!!!5371703.java!!!	addWebViewAssetPath(inout context : Context) : void
        final String newAssetPath = WebViewFactory.getLoadedPackageInfo().applicationInfo.sourceDir;

        final ApplicationInfo appInfo = context.getApplicationInfo();
        final String[] libs = appInfo.sharedLibraryFiles;
        if (!ArrayUtils.contains(libs, newAssetPath)) {
            // Build the new library asset path list.
            final int newLibAssetsCount = 1 + (libs != null ? libs.length : 0);
            final String[] newLibAssets = new String[newLibAssetsCount];
            if (libs != null) {
                System.arraycopy(libs, 0, newLibAssets, 0, libs.length);
            }
            newLibAssets[newLibAssetsCount - 1] = newAssetPath;

            // Update the ApplicationInfo object with the new list.
            // We know this will persist and future Resources created via ResourcesManager
            // will include the shared library because this ApplicationInfo comes from the
            // underlying LoadedApk in ContextImpl, which does not change during the life of the
            // application.
            appInfo.sharedLibraryFiles = newLibAssets;

            // Update existing Resources with the WebView library.
            ResourcesManager.getInstance().appendLibAssetForMainAssetPath(
                    appInfo.getBaseResourcePath(), newAssetPath);
        }
