class BitmapDrawable
!!!27896503.java!!!	BitmapDrawable()
        mBitmapState = new BitmapState((Bitmap) null);
!!!27896631.java!!!	BitmapDrawable(inout res : Resources)
        mBitmapState = new BitmapState((Bitmap) null);
        mBitmapState.mTargetDensity = mTargetDensity;
!!!27896759.java!!!	BitmapDrawable(inout bitmap : Bitmap)
        this(new BitmapState(bitmap), null);
!!!27896887.java!!!	BitmapDrawable(inout res : Resources, inout bitmap : Bitmap)
        this(new BitmapState(bitmap), res);
        mBitmapState.mTargetDensity = mTargetDensity;
!!!27897015.java!!!	BitmapDrawable(inout filepath : String)
        this(new BitmapState(BitmapFactory.decodeFile(filepath)), null);
        if (mBitmapState.mBitmap == null) {
            android.util.Log.w("BitmapDrawable", "BitmapDrawable cannot decode " + filepath);
        }
!!!27897143.java!!!	BitmapDrawable(inout res : Resources, inout filepath : String)
        this(new BitmapState(BitmapFactory.decodeFile(filepath)), null);
        mBitmapState.mTargetDensity = mTargetDensity;
        if (mBitmapState.mBitmap == null) {
            android.util.Log.w("BitmapDrawable", "BitmapDrawable cannot decode " + filepath);
        }
!!!27897271.java!!!	BitmapDrawable(inout is : java.io.InputStream)
        this(new BitmapState(BitmapFactory.decodeStream(is)), null);
        if (mBitmapState.mBitmap == null) {
            android.util.Log.w("BitmapDrawable", "BitmapDrawable cannot decode " + is);
        }
!!!27897399.java!!!	BitmapDrawable(inout res : Resources, inout is : java.io.InputStream)
        this(new BitmapState(BitmapFactory.decodeStream(is)), null);
        mBitmapState.mTargetDensity = mTargetDensity;
        if (mBitmapState.mBitmap == null) {
            android.util.Log.w("BitmapDrawable", "BitmapDrawable cannot decode " + is);
        }
!!!27897527.java!!!	getPaint() : Paint
        return mBitmapState.mPaint;
!!!27897655.java!!!	getBitmap() : Bitmap
        return mBitmapState.mBitmap;
!!!27897783.java!!!	computeBitmapSize() : void
        final Bitmap bitmap = mBitmapState.mBitmap;
        if (bitmap != null) {
            mBitmapWidth = bitmap.getScaledWidth(mTargetDensity);
            mBitmapHeight = bitmap.getScaledHeight(mTargetDensity);
        } else {
            mBitmapWidth = mBitmapHeight = -1;
        }
!!!27897911.java!!!	setBitmap(inout bitmap : Bitmap) : void
        if (mBitmapState.mBitmap != bitmap) {
            mBitmapState.mBitmap = bitmap;
            computeBitmapSize();
            invalidateSelf();
        }
!!!27898039.java!!!	setTargetDensity(inout canvas : Canvas) : void
        setTargetDensity(canvas.getDensity());
!!!27898167.java!!!	setTargetDensity(inout metrics : DisplayMetrics) : void
        setTargetDensity(metrics.densityDpi);
!!!27898295.java!!!	setTargetDensity(in density : int) : void
        if (mTargetDensity != density) {
            mTargetDensity = density == 0 ? DisplayMetrics.DENSITY_DEFAULT : density;
            if (mBitmapState.mBitmap != null) {
                computeBitmapSize();
            }
            invalidateSelf();
        }
!!!27898423.java!!!	getGravity() : int
        return mBitmapState.mGravity;
!!!27898551.java!!!	setGravity(in gravity : int) : void
        if (mBitmapState.mGravity != gravity) {
            mBitmapState.mGravity = gravity;
            mDstRectAndInsetsDirty = true;
            invalidateSelf();
        }
!!!27898679.java!!!	setMipMap(inout mipMap : boolean) : void
        if (mBitmapState.mBitmap != null) {
            mBitmapState.mBitmap.setHasMipMap(mipMap);
            invalidateSelf();
        }
!!!27898807.java!!!	hasMipMap() : boolean
        return mBitmapState.mBitmap != null && mBitmapState.mBitmap.hasMipMap();
!!!27898935.java!!!	setAntiAlias(inout aa : boolean) : void
        mBitmapState.mPaint.setAntiAlias(aa);
        invalidateSelf();
!!!27899063.java!!!	hasAntiAlias() : boolean
        return mBitmapState.mPaint.isAntiAlias();
!!!27899191.java!!!	setFilterBitmap(inout filter : boolean) : void
        mBitmapState.mPaint.setFilterBitmap(filter);
        invalidateSelf();
!!!27899319.java!!!	isFilterBitmap() : boolean
        return mBitmapState.mPaint.isFilterBitmap();
!!!27899447.java!!!	setDither(inout dither : boolean) : void
        mBitmapState.mPaint.setDither(dither);
        invalidateSelf();
!!!27899575.java!!!	getTileModeX() : Shader::TileMode
        return mBitmapState.mTileModeX;
!!!27899703.java!!!	getTileModeY() : Shader::TileMode
        return mBitmapState.mTileModeY;
!!!27899831.java!!!	setTileModeX(inout mode : Shader::TileMode) : void
        setTileModeXY(mode, mBitmapState.mTileModeY);
!!!27899959.java!!!	setTileModeY(inout mode : Shader::TileMode) : void
        setTileModeXY(mBitmapState.mTileModeX, mode);
!!!27900087.java!!!	setTileModeXY(inout xmode : Shader::TileMode, inout ymode : Shader::TileMode) : void
        final BitmapState state = mBitmapState;
        if (state.mTileModeX != xmode || state.mTileModeY != ymode) {
            state.mTileModeX = xmode;
            state.mTileModeY = ymode;
            state.mRebuildShader = true;
            mDstRectAndInsetsDirty = true;
            invalidateSelf();
        }
!!!27900215.java!!!	setAutoMirrored(inout mirrored : boolean) : void
        if (mBitmapState.mAutoMirrored != mirrored) {
            mBitmapState.mAutoMirrored = mirrored;
            invalidateSelf();
        }
!!!27900343.java!!!	isAutoMirrored() : boolean
        return mBitmapState.mAutoMirrored;
!!!27900471.java!!!	getChangingConfigurations() : int
        return super.getChangingConfigurations() | mBitmapState.getChangingConfigurations();
!!!27900599.java!!!	needMirroring() : boolean
        return isAutoMirrored() && getLayoutDirection() == LayoutDirection.RTL;
!!!27900727.java!!!	updateMirrorMatrix(in dx : float) : void
        if (mMirrorMatrix == null) {
            mMirrorMatrix = new Matrix();
        }
        mMirrorMatrix.setTranslate(dx, 0);
        mMirrorMatrix.preScale(-1.0f, 1.0f);
!!!27900855.java!!!	onBoundsChange(inout bounds : Rect) : void
        mDstRectAndInsetsDirty = true;

        final Shader shader = mBitmapState.mPaint.getShader();
        if (shader != null) {
            if (needMirroring()) {
                updateMirrorMatrix(bounds.right - bounds.left);
                shader.setLocalMatrix(mMirrorMatrix);
                mBitmapState.mPaint.setShader(shader);
            } else {
                if (mMirrorMatrix != null) {
                    mMirrorMatrix = null;
                    shader.setLocalMatrix(Matrix.IDENTITY_MATRIX);
                    mBitmapState.mPaint.setShader(shader);
                }
            }
        }
!!!27900983.java!!!	draw(inout canvas : Canvas) : void
        final Bitmap bitmap = mBitmapState.mBitmap;
        if (bitmap == null) {
            return;
        }

        final BitmapState state = mBitmapState;
        final Paint paint = state.mPaint;
        if (state.mRebuildShader) {
            final Shader.TileMode tmx = state.mTileModeX;
            final Shader.TileMode tmy = state.mTileModeY;
            if (tmx == null && tmy == null) {
                paint.setShader(null);
            } else {
                paint.setShader(new BitmapShader(bitmap,
                        tmx == null ? Shader.TileMode.CLAMP : tmx,
                        tmy == null ? Shader.TileMode.CLAMP : tmy));
            }

            state.mRebuildShader = false;
        }

        final int restoreAlpha;
        if (state.mBaseAlpha != 1.0f) {
            final Paint p = getPaint();
            restoreAlpha = p.getAlpha();
            p.setAlpha((int) (restoreAlpha * state.mBaseAlpha + 0.5f));
        } else {
            restoreAlpha = -1;
        }

        final boolean clearColorFilter;
        if (mTintFilter != null && paint.getColorFilter() == null) {
            paint.setColorFilter(mTintFilter);
            clearColorFilter = true;
        } else {
            clearColorFilter = false;
        }

        updateDstRectAndInsetsIfDirty();
        final Shader shader = paint.getShader();
        final boolean needMirroring = needMirroring();
        if (shader == null) {
            if (needMirroring) {
                canvas.save();
                // Mirror the bitmap
                canvas.translate(mDstRect.right - mDstRect.left, 0);
                canvas.scale(-1.0f, 1.0f);
            }

            canvas.drawBitmap(bitmap, null, mDstRect, paint);

            if (needMirroring) {
                canvas.restore();
            }
        } else {
            if (needMirroring) {
                // Mirror the bitmap
                updateMirrorMatrix(mDstRect.right - mDstRect.left);
                shader.setLocalMatrix(mMirrorMatrix);
                paint.setShader(shader);
            } else {
                if (mMirrorMatrix != null) {
                    mMirrorMatrix = null;
                    shader.setLocalMatrix(Matrix.IDENTITY_MATRIX);
                    paint.setShader(shader);
                }
            }

            canvas.drawRect(mDstRect, paint);
        }

        if (clearColorFilter) {
            paint.setColorFilter(null);
        }

        if (restoreAlpha >= 0) {
            paint.setAlpha(restoreAlpha);
        }
!!!27901111.java!!!	updateDstRectAndInsetsIfDirty() : void
        if (mDstRectAndInsetsDirty) {
            if (mBitmapState.mTileModeX == null && mBitmapState.mTileModeY == null) {
                final Rect bounds = getBounds();
                final int layoutDirection = getLayoutDirection();
                Gravity.apply(mBitmapState.mGravity, mBitmapWidth, mBitmapHeight,
                        bounds, mDstRect, layoutDirection);

                final int left = mDstRect.left - bounds.left;
                final int top = mDstRect.top - bounds.top;
                final int right = bounds.right - mDstRect.right;
                final int bottom = bounds.bottom - mDstRect.bottom;
                mOpticalInsets = Insets.of(left, top, right, bottom);
            } else {
                copyBounds(mDstRect);
                mOpticalInsets = Insets.NONE;
            }
        }
        mDstRectAndInsetsDirty = false;
!!!27901239.java!!!	getOpticalInsets() : Insets
        updateDstRectAndInsetsIfDirty();
        return mOpticalInsets;
!!!27901367.java!!!	getOutline(inout outline : Outline) : void
        updateDstRectAndInsetsIfDirty();
        outline.setRect(mDstRect);

        // Only opaque Bitmaps can report a non-0 alpha,
        // since only they are guaranteed to fill their bounds
        boolean opaqueOverShape = mBitmapState.mBitmap != null
                && !mBitmapState.mBitmap.hasAlpha();
        outline.setAlpha(opaqueOverShape ? getAlpha() / 255.0f : 0.0f);
!!!27901495.java!!!	setAlpha(in alpha : int) : void
        final int oldAlpha = mBitmapState.mPaint.getAlpha();
        if (alpha != oldAlpha) {
            mBitmapState.mPaint.setAlpha(alpha);
            invalidateSelf();
        }
!!!27901623.java!!!	getAlpha() : int
        return mBitmapState.mPaint.getAlpha();
!!!27901751.java!!!	setColorFilter(inout colorFilter : ColorFilter) : void
        mBitmapState.mPaint.setColorFilter(colorFilter);
        invalidateSelf();
!!!27901879.java!!!	getColorFilter() : ColorFilter
        return mBitmapState.mPaint.getColorFilter();
!!!27902007.java!!!	setTintList(inout tint : ColorStateList) : void
        final BitmapState state = mBitmapState;
        if (state.mTint != tint) {
            state.mTint = tint;
            mTintFilter = updateTintFilter(mTintFilter, tint, mBitmapState.mTintMode);
            invalidateSelf();
        }
!!!27902135.java!!!	setTintMode(inout tintMode : PorterDuff::Mode) : void
        final BitmapState state = mBitmapState;
        if (state.mTintMode != tintMode) {
            state.mTintMode = tintMode;
            mTintFilter = updateTintFilter(mTintFilter, mBitmapState.mTint, tintMode);
            invalidateSelf();
        }
!!!27902263.java!!!	getTint() : ColorStateList
        return mBitmapState.mTint;
!!!27902391.java!!!	getTintMode() : PorterDuff::Mode
        return mBitmapState.mTintMode;
!!!27902519.java!!!	setXfermode(inout xfermode : Xfermode) : void
        mBitmapState.mPaint.setXfermode(xfermode);
        invalidateSelf();
!!!27902647.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            mBitmapState = new BitmapState(mBitmapState);
            mMutated = true;
        }
        return this;
!!!27902775.java!!!	clearMutated() : void
        super.clearMutated();
        mMutated = false;
!!!27902903.java!!!	onStateChange(inout stateSet : int) : boolean
        final BitmapState state = mBitmapState;
        if (state.mTint != null && state.mTintMode != null) {
            mTintFilter = updateTintFilter(mTintFilter, state.mTint, state.mTintMode);
            return true;
        }
        return false;
!!!27903031.java!!!	isStateful() : boolean
        return (mBitmapState.mTint != null && mBitmapState.mTint.isStateful())
                || super.isStateful();
!!!27903159.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        super.inflate(r, parser, attrs, theme);

        final TypedArray a = obtainAttributes(r, theme, attrs, R.styleable.BitmapDrawable);
        updateStateFromTypedArray(a);
        verifyRequiredAttributes(a);
        a.recycle();

        // Update local properties.
        updateLocalState(r);
!!!27903287.java!!!	verifyRequiredAttributes(inout a : TypedArray) : void
        // If we're not waiting on a theme, verify required attributes.
        final BitmapState state = mBitmapState;
        if (state.mBitmap == null && (state.mThemeAttrs == null
                || state.mThemeAttrs[R.styleable.BitmapDrawable_src] == 0)) {
            throw new XmlPullParserException(a.getPositionDescription() +
                    ": <bitmap> requires a valid 'src' attribute");
        }
!!!27903415.java!!!	updateStateFromTypedArray(inout a : TypedArray) : void
        final Resources r = a.getResources();
        final BitmapState state = mBitmapState;

        // Account for any configuration changes.
        state.mChangingConfigurations |= a.getChangingConfigurations();

        // Extract the theme attributes, if any.
        state.mThemeAttrs = a.extractThemeAttrs();

        final int srcResId = a.getResourceId(R.styleable.BitmapDrawable_src, 0);
        if (srcResId != 0) {
            final Bitmap bitmap = BitmapFactory.decodeResource(r, srcResId);
            if (bitmap == null) {
                throw new XmlPullParserException(a.getPositionDescription() +
                        ": <bitmap> requires a valid 'src' attribute");
            }

            state.mBitmap = bitmap;
        }

        state.mTargetDensity = r.getDisplayMetrics().densityDpi;

        final boolean defMipMap = state.mBitmap != null ? state.mBitmap.hasMipMap() : false;
        setMipMap(a.getBoolean(R.styleable.BitmapDrawable_mipMap, defMipMap));

        state.mAutoMirrored = a.getBoolean(
                R.styleable.BitmapDrawable_autoMirrored, state.mAutoMirrored);
        state.mBaseAlpha = a.getFloat(R.styleable.BitmapDrawable_alpha, state.mBaseAlpha);

        final int tintMode = a.getInt(R.styleable.BitmapDrawable_tintMode, -1);
        if (tintMode != -1) {
            state.mTintMode = Drawable.parseTintMode(tintMode, Mode.SRC_IN);
        }

        final ColorStateList tint = a.getColorStateList(R.styleable.BitmapDrawable_tint);
        if (tint != null) {
            state.mTint = tint;
        }

        final Paint paint = mBitmapState.mPaint;
        paint.setAntiAlias(a.getBoolean(
                R.styleable.BitmapDrawable_antialias, paint.isAntiAlias()));
        paint.setFilterBitmap(a.getBoolean(
                R.styleable.BitmapDrawable_filter, paint.isFilterBitmap()));
        paint.setDither(a.getBoolean(R.styleable.BitmapDrawable_dither, paint.isDither()));

        setGravity(a.getInt(R.styleable.BitmapDrawable_gravity, state.mGravity));

        final int tileMode = a.getInt(R.styleable.BitmapDrawable_tileMode, TILE_MODE_UNDEFINED);
        if (tileMode != TILE_MODE_UNDEFINED) {
            final Shader.TileMode mode = parseTileMode(tileMode);
            setTileModeXY(mode, mode);
        }

        final int tileModeX = a.getInt(R.styleable.BitmapDrawable_tileModeX, TILE_MODE_UNDEFINED);
        if (tileModeX != TILE_MODE_UNDEFINED) {
            setTileModeX(parseTileMode(tileModeX));
        }

        final int tileModeY = a.getInt(R.styleable.BitmapDrawable_tileModeY, TILE_MODE_UNDEFINED);
        if (tileModeY != TILE_MODE_UNDEFINED) {
            setTileModeY(parseTileMode(tileModeY));
        }

        state.mTargetDensity = Drawable.resolveDensity(r, 0);
!!!27903543.java!!!	applyTheme(inout t : Resources::Theme) : void
        super.applyTheme(t);

        final BitmapState state = mBitmapState;
        if (state == null) {
            return;
        }

        if (state.mThemeAttrs != null) {
            final TypedArray a = t.resolveAttributes(state.mThemeAttrs, R.styleable.BitmapDrawable);
            try {
                updateStateFromTypedArray(a);
            } catch (XmlPullParserException e) {
                rethrowAsRuntimeException(e);
            } finally {
                a.recycle();
            }
        }

        // Apply theme to contained color state list.
        if (state.mTint != null && state.mTint.canApplyTheme()) {
            state.mTint = state.mTint.obtainForTheme(t);
        }

        // Update local properties.
        updateLocalState(t.getResources());
!!!27903671.java!!!	parseTileMode(in tileMode : int) : Shader::TileMode
        switch (tileMode) {
            case TILE_MODE_CLAMP:
                return Shader.TileMode.CLAMP;
            case TILE_MODE_REPEAT:
                return Shader.TileMode.REPEAT;
            case TILE_MODE_MIRROR:
                return Shader.TileMode.MIRROR;
            default:
                return null;
        }
!!!27903799.java!!!	canApplyTheme() : boolean
        return mBitmapState != null && mBitmapState.canApplyTheme();
!!!27903927.java!!!	getIntrinsicWidth() : int
        return mBitmapWidth;
!!!27904055.java!!!	getIntrinsicHeight() : int
        return mBitmapHeight;
!!!27904183.java!!!	getOpacity() : int
        if (mBitmapState.mGravity != Gravity.FILL) {
            return PixelFormat.TRANSLUCENT;
        }

        final Bitmap bitmap = mBitmapState.mBitmap;
        return (bitmap == null || bitmap.hasAlpha() || mBitmapState.mPaint.getAlpha() < 255) ?
                PixelFormat.TRANSLUCENT : PixelFormat.OPAQUE;
!!!27904311.java!!!	getConstantState() : Drawable::ConstantState
        mBitmapState.mChangingConfigurations |= getChangingConfigurations();
        return mBitmapState;
!!!27905335.java!!!	BitmapDrawable(inout state : BitmapDrawable::BitmapState, inout res : Resources)
        mBitmapState = state;

        updateLocalState(res);
!!!27905463.java!!!	updateLocalState(inout res : Resources) : void
        mTargetDensity = resolveDensity(res, mBitmapState.mTargetDensity);
        mTintFilter = updateTintFilter(mTintFilter, mBitmapState.mTint, mBitmapState.mTintMode);
        computeBitmapSize();
