class MenuPopupHelper
!!!5442231.java!!!	MenuPopupHelper(inout context : Context, inout menu : MenuBuilder)
        this(context, menu, null, false, com.android.internal.R.attr.popupMenuStyle, 0);
!!!5442359.java!!!	MenuPopupHelper(inout context : Context, inout menu : MenuBuilder, inout anchorView : View)
        this(context, menu, anchorView, false, com.android.internal.R.attr.popupMenuStyle, 0);
!!!5442487.java!!!	MenuPopupHelper(inout context : Context, inout menu : MenuBuilder, inout anchorView : View, inout overflowOnly : boolean, in popupStyleAttr : int)
        this(context, menu, anchorView, overflowOnly, popupStyleAttr, 0);
!!!5442615.java!!!	MenuPopupHelper(inout context : Context, inout menu : MenuBuilder, inout anchorView : View, inout overflowOnly : boolean, in popupStyleAttr : int, in popupStyleRes : int)
        mContext = context;
        mMenu = menu;
        mAnchorView = anchorView;
        mOverflowOnly = overflowOnly;
        mPopupStyleAttr = popupStyleAttr;
        mPopupStyleRes = popupStyleRes;
!!!5442743.java!!!	setOnDismissListener(inout listener : PopupWindow::OnDismissListener) : void
        mOnDismissListener = listener;
!!!5442871.java!!!	setAnchorView(inout anchor : View) : void
        mAnchorView = anchor;
!!!5442999.java!!!	setForceShowIcon(inout forceShowIcon : boolean) : void
        mForceShowIcon = forceShowIcon;
        if (mPopup != null) {
            mPopup.setForceShowIcon(forceShowIcon);
        }
!!!5443127.java!!!	setGravity(in gravity : int) : void
        mDropDownGravity = gravity;
!!!5443255.java!!!	getGravity() : int
        return mDropDownGravity;
!!!5443383.java!!!	show() : void
        if (!tryShow()) {
            throw new IllegalStateException("MenuPopupHelper cannot be used without an anchor");
        }
!!!5443511.java!!!	show(in x : int, in y : int) : void
        if (!tryShow(x, y)) {
            throw new IllegalStateException("MenuPopupHelper cannot be used without an anchor");
        }
!!!5443639.java!!!	getPopup() : MenuPopup
        if (mPopup == null) {
            mPopup = createPopup();
        }
        return mPopup;
!!!5443767.java!!!	tryShow() : boolean
        if (isShowing()) {
            return true;
        }

        if (mAnchorView == null) {
            return false;
        }

        showPopup(0, 0, false, false);
        return true;
!!!5443895.java!!!	tryShow(in x : int, in y : int) : boolean
        if (isShowing()) {
            return true;
        }

        if (mAnchorView == null) {
            return false;
        }

        showPopup(x, y, true, true);
        return true;
!!!5444023.java!!!	createPopup() : MenuPopup
        final WindowManager windowManager = (WindowManager) mContext.getSystemService(
            Context.WINDOW_SERVICE);
        final Display display = windowManager.getDefaultDisplay();
        final Point displaySize = new Point();
        display.getRealSize(displaySize);

        final int smallestWidth = Math.min(displaySize.x, displaySize.y);
        final int minSmallestWidthCascading = mContext.getResources().getDimensionPixelSize(
            com.android.internal.R.dimen.cascading_menus_min_smallest_width);
        final boolean enableCascadingSubmenus = smallestWidth >= minSmallestWidthCascading;

        final MenuPopup popup;
        if (enableCascadingSubmenus) {
            popup = new CascadingMenuPopup(mContext, mAnchorView, mPopupStyleAttr,
                    mPopupStyleRes, mOverflowOnly);
        } else {
            popup = new StandardMenuPopup(mContext, mMenu, mAnchorView, mPopupStyleAttr,
                    mPopupStyleRes, mOverflowOnly);
        }

        // Assign immutable properties.
        popup.addMenu(mMenu);
        popup.setOnDismissListener(mInternalOnDismissListener);

        // Assign mutable properties. These may be reassigned later.
        popup.setAnchorView(mAnchorView);
        popup.setCallback(mPresenterCallback);
        popup.setForceShowIcon(mForceShowIcon);
        popup.setGravity(mDropDownGravity);

        return popup;
!!!5444151.java!!!	showPopup(in xOffset : int, in yOffset : int, inout useOffsets : boolean, inout showTitle : boolean) : void
        final MenuPopup popup = getPopup();
        popup.setShowTitle(showTitle);

        if (useOffsets) {
            // If the resolved drop-down gravity is RIGHT, the popup's right
            // edge will be aligned with the anchor view. Adjust by the anchor
            // width such that the top-right corner is at the X offset.
            final int hgrav = Gravity.getAbsoluteGravity(mDropDownGravity,
                    mAnchorView.getLayoutDirection()) & Gravity.HORIZONTAL_GRAVITY_MASK;
            if (hgrav == Gravity.RIGHT) {
                xOffset -= mAnchorView.getWidth();
            }

            popup.setHorizontalOffset(xOffset);
            popup.setVerticalOffset(yOffset);

            // Set the transition epicenter to be roughly finger (or mouse
            // cursor) sized and centered around the offset position. This
            // will give the appearance that the window is emerging from
            // the touch point.
            final float density = mContext.getResources().getDisplayMetrics().density;
            final int halfSize = (int) (TOUCH_EPICENTER_SIZE_DP * density / 2);
            final Rect epicenter = new Rect(xOffset - halfSize, yOffset - halfSize,
                    xOffset + halfSize, yOffset + halfSize);
            popup.setEpicenterBounds(epicenter);
        }

        popup.show();
!!!5444279.java!!!	dismiss() : void
        if (isShowing()) {
            mPopup.dismiss();
        }
!!!5444407.java!!!	onDismiss() : void
        mPopup = null;

        if (mOnDismissListener != null) {
            mOnDismissListener.onDismiss();
        }
!!!5444535.java!!!	isShowing() : boolean
        return mPopup != null && mPopup.isShowing();
!!!5444663.java!!!	setPresenterCallback(inout cb : MenuPresenter::Callback) : void
        mPresenterCallback = cb;
        if (mPopup != null) {
            mPopup.setCallback(cb);
        }
