class ActionMenuItemView
!!!5445815.java!!!	ActionMenuItemView(inout context : Context)
        this(context, null);
!!!5445943.java!!!	ActionMenuItemView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!5446071.java!!!	ActionMenuItemView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!5446199.java!!!	ActionMenuItemView(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);
        final Resources res = context.getResources();
        mAllowTextWithIcon = shouldAllowTextWithIcon();
        final TypedArray a = context.obtainStyledAttributes(attrs,
                com.android.internal.R.styleable.ActionMenuItemView, defStyleAttr, defStyleRes);
        mMinWidth = a.getDimensionPixelSize(
                com.android.internal.R.styleable.ActionMenuItemView_minWidth, 0);
        a.recycle();

        final float density = res.getDisplayMetrics().density;
        mMaxIconSize = (int) (MAX_ICON_SIZE * density + 0.5f);

        setOnClickListener(this);
        setOnLongClickListener(this);

        mSavedPaddingLeft = -1;
        setSaveEnabled(false);
!!!5446327.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
        super.onConfigurationChanged(newConfig);

        mAllowTextWithIcon = shouldAllowTextWithIcon();
        updateTextButtonVisibility();
!!!5446455.java!!!	shouldAllowTextWithIcon() : boolean
        final Configuration configuration = getContext().getResources().getConfiguration();
        final int width = configuration.screenWidthDp;
        final int height = configuration.screenHeightDp;
        return  width >= 480 || (width >= 640 && height >= 480)
                || configuration.orientation == Configuration.ORIENTATION_LANDSCAPE;
!!!5446583.java!!!	setPadding(in l : int, in t : int, in r : int, in b : int) : void
        mSavedPaddingLeft = l;
        super.setPadding(l, t, r, b);
!!!5446711.java!!!	getItemData() : MenuItemImpl
        return mItemData;
!!!5446839.java!!!	initialize(inout itemData : MenuItemImpl, in menuType : int) : void
        mItemData = itemData;

        setIcon(itemData.getIcon());
        setTitle(itemData.getTitleForItemView(this)); // Title only takes effect if there is no icon
        setId(itemData.getItemId());

        setVisibility(itemData.isVisible() ? View.VISIBLE : View.GONE);
        setEnabled(itemData.isEnabled());

        if (itemData.hasSubMenu()) {
            if (mForwardingListener == null) {
                mForwardingListener = new ActionMenuItemForwardingListener();
            }
        }
!!!5446967.java!!!	onTouchEvent(inout e : MotionEvent) : boolean
        if (mItemData.hasSubMenu() && mForwardingListener != null
                && mForwardingListener.onTouch(this, e)) {
            return true;
        }
        return super.onTouchEvent(e);
!!!5447095.java!!!	onClick(inout v : View) : void
        if (mItemInvoker != null) {
            mItemInvoker.invokeItem(mItemData);
        }
!!!5447223.java!!!	setItemInvoker(inout invoker : MenuBuilder::ItemInvoker) : void
        mItemInvoker = invoker;
!!!5447351.java!!!	setPopupCallback(inout popupCallback : ActionMenuItemView::PopupCallback) : void
        mPopupCallback = popupCallback;
!!!5447479.java!!!	prefersCondensedTitle() : boolean
        return true;
!!!5447607.java!!!	setCheckable(inout checkable : boolean) : void
        // TODO Support checkable action items
!!!5447735.java!!!	setChecked(inout checked : boolean) : void
        // TODO Support checkable action items
!!!5447863.java!!!	setExpandedFormat(inout expandedFormat : boolean) : void
        if (mExpandedFormat != expandedFormat) {
            mExpandedFormat = expandedFormat;
            if (mItemData != null) {
                mItemData.actionFormatChanged();
            }
        }
!!!5447991.java!!!	updateTextButtonVisibility() : void
        boolean visible = !TextUtils.isEmpty(mTitle);
        visible &= mIcon == null ||
                (mItemData.showsTextAsAction() && (mAllowTextWithIcon || mExpandedFormat));

        setText(visible ? mTitle : null);
!!!5448119.java!!!	setIcon(inout icon : Drawable) : void
        mIcon = icon;
        if (icon != null) {
            int width = icon.getIntrinsicWidth();
            int height = icon.getIntrinsicHeight();
            if (width > mMaxIconSize) {
                final float scale = (float) mMaxIconSize / width;
                width = mMaxIconSize;
                height *= scale;
            }
            if (height > mMaxIconSize) {
                final float scale = (float) mMaxIconSize / height;
                height = mMaxIconSize;
                width *= scale;
            }
            icon.setBounds(0, 0, width, height);
        }
        setCompoundDrawables(icon, null, null, null);

        updateTextButtonVisibility();
!!!5448247.java!!!	hasText() : boolean
        return !TextUtils.isEmpty(getText());
!!!5448375.java!!!	setShortcut(inout showShortcut : boolean, in shortcutKey : char) : void
        // Action buttons don't show text for shortcut keys.
!!!5448503.java!!!	setTitle(inout title : CharSequence) : void
        mTitle = title;

        setContentDescription(mTitle);
        updateTextButtonVisibility();
!!!5448631.java!!!	dispatchPopulateAccessibilityEventInternal(inout event : AccessibilityEvent) : boolean
        onPopulateAccessibilityEvent(event);
        return true;
!!!5448759.java!!!	onPopulateAccessibilityEventInternal(inout event : AccessibilityEvent) : void
        super.onPopulateAccessibilityEventInternal(event);
        final CharSequence cdesc = getContentDescription();
        if (!TextUtils.isEmpty(cdesc)) {
            event.getText().add(cdesc);
        }
!!!5448887.java!!!	dispatchHoverEvent(inout event : MotionEvent) : boolean
        // Don't allow children to hover; we want this to be treated as a single component.
        return onHoverEvent(event);
!!!5449015.java!!!	showsIcon() : boolean
        return true;
!!!5449143.java!!!	needsDividerBefore() : boolean
        return hasText() && mItemData.getIcon() == null;
!!!5449271.java!!!	needsDividerAfter() : boolean
        return hasText();
!!!5449399.java!!!	onLongClick(inout v : View) : boolean
        if (hasText()) {
            // Don't show the cheat sheet for items that already show text.
            return false;
        }

        final int[] screenPos = new int[2];
        final Rect displayFrame = new Rect();
        getLocationOnScreen(screenPos);
        getWindowVisibleDisplayFrame(displayFrame);

        final Context context = getContext();
        final int width = getWidth();
        final int height = getHeight();
        final int midy = screenPos[1] + height / 2;
        int referenceX = screenPos[0] + width / 2;
        if (v.getLayoutDirection() == View.LAYOUT_DIRECTION_LTR) {
            final int screenWidth = context.getResources().getDisplayMetrics().widthPixels;
            referenceX = screenWidth - referenceX; // mirror
        }
        Toast cheatSheet = Toast.makeText(context, mItemData.getTitle(), Toast.LENGTH_SHORT);
        if (midy < displayFrame.height()) {
            // Show along the top; follow action buttons
            cheatSheet.setGravity(Gravity.TOP | Gravity.END, referenceX,
                    screenPos[1] + height - displayFrame.top);
        } else {
            // Show along the bottom center
            cheatSheet.setGravity(Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL, 0, height);
        }
        cheatSheet.show();
        return true;
!!!5449527.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        final boolean textVisible = hasText();
        if (textVisible && mSavedPaddingLeft >= 0) {
            super.setPadding(mSavedPaddingLeft, getPaddingTop(),
                    getPaddingRight(), getPaddingBottom());
        }

        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        final int widthMode = MeasureSpec.getMode(widthMeasureSpec);
        final int widthSize = MeasureSpec.getSize(widthMeasureSpec);
        final int oldMeasuredWidth = getMeasuredWidth();
        final int targetWidth = widthMode == MeasureSpec.AT_MOST ? Math.min(widthSize, mMinWidth)
                : mMinWidth;

        if (widthMode != MeasureSpec.EXACTLY && mMinWidth > 0 && oldMeasuredWidth < targetWidth) {
            // Remeasure at exactly the minimum width.
            super.onMeasure(MeasureSpec.makeMeasureSpec(targetWidth, MeasureSpec.EXACTLY),
                    heightMeasureSpec);
        }

        if (!textVisible && mIcon != null) {
            // TextView won't center compound drawables in both dimensions without
            // a little coercion. Pad in to center the icon after we've measured.
            final int w = getMeasuredWidth();
            final int dw = mIcon.getBounds().width();
            super.setPadding((w - dw) / 2, getPaddingTop(), getPaddingRight(), getPaddingBottom());
        }
!!!5451703.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        // This might get called with the state of ActionView since it shares the same ID with
        // ActionMenuItemView. Do not restore this state as ActionMenuItemView never saved it.
        super.onRestoreInstanceState(null);
