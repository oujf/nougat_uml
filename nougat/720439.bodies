class AdapterViewFlipper
!!!5485111.java!!!	AdapterViewFlipper(inout context : Context)
        super(context);
!!!5485239.java!!!	AdapterViewFlipper(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!5485367.java!!!	AdapterViewFlipper(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!5485495.java!!!	AdapterViewFlipper(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);

        final TypedArray a = context.obtainStyledAttributes(attrs,
                com.android.internal.R.styleable.AdapterViewFlipper, defStyleAttr, defStyleRes);
        mFlipInterval = a.getInt(
                com.android.internal.R.styleable.AdapterViewFlipper_flipInterval, DEFAULT_INTERVAL);
        mAutoStart = a.getBoolean(
                com.android.internal.R.styleable.AdapterViewFlipper_autoStart, false);

        // A view flipper should cycle through the views
        mLoopViews = true;

        a.recycle();
!!!5485623.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();

        // Listen for broadcasts related to user-presence
        final IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_SCREEN_OFF);
        filter.addAction(Intent.ACTION_USER_PRESENT);

        // OK, this is gross but needed. This class is supported by the
        // remote views machanism and as a part of that the remote views
        // can be inflated by a context for another user without the app
        // having interact users permission - just for loading resources.
        // For exmaple, when adding widgets from a user profile to the
        // home screen. Therefore, we register the receiver as the current
        // user not the one the context is for.
        getContext().registerReceiverAsUser(mReceiver, android.os.Process.myUserHandle(),
                filter, null, getHandler());


        if (mAutoStart) {
            // Automatically start when requested
            startFlipping();
        }
!!!5485751.java!!!	onDetachedFromWindow() : void
        super.onDetachedFromWindow();
        mVisible = false;

        getContext().unregisterReceiver(mReceiver);
        updateRunning();
!!!5485879.java!!!	onWindowVisibilityChanged(in visibility : int) : void
        super.onWindowVisibilityChanged(visibility);
        mVisible = (visibility == VISIBLE);
        updateRunning(false);
!!!5486007.java!!!	setAdapter(inout adapter : Adapter) : void
        super.setAdapter(adapter);
        updateRunning();
!!!5486135.java!!!	getFlipInterval() : int
        return mFlipInterval;
!!!5486263.java!!!	setFlipInterval(in flipInterval : int) : void
        mFlipInterval = flipInterval;
!!!5486391.java!!!	startFlipping() : void
        mStarted = true;
        updateRunning();
!!!5486519.java!!!	stopFlipping() : void
        mStarted = false;
        updateRunning();
!!!5486647.java!!!	showNext() : void
       // if the flipper is currently flipping automatically, and showNext() is called
       // we should we should make sure to reset the timer
       if (mRunning) {
           removeCallbacks(mFlipRunnable);
           postDelayed(mFlipRunnable, mFlipInterval);
       }
       super.showNext();
!!!5486775.java!!!	showPrevious() : void
       // if the flipper is currently flipping automatically, and showPrevious() is called
       // we should we should make sure to reset the timer
       if (mRunning) {
           removeCallbacks(mFlipRunnable);
           postDelayed(mFlipRunnable, mFlipInterval);
       }
       super.showPrevious();
!!!5486903.java!!!	updateRunning() : void
        // by default when we update running, we want the
        // current view to animate in
        updateRunning(true);
!!!5487031.java!!!	updateRunning(inout flipNow : boolean) : void
        boolean running = !mAdvancedByHost && mVisible && mStarted && mUserPresent
                && mAdapter != null;
        if (running != mRunning) {
            if (running) {
                showOnly(mWhichChild, flipNow);
                postDelayed(mFlipRunnable, mFlipInterval);
            } else {
                removeCallbacks(mFlipRunnable);
            }
            mRunning = running;
        }
        if (LOGD) {
            Log.d(TAG, "updateRunning() mVisible=" + mVisible + ", mStarted=" + mStarted
                    + ", mUserPresent=" + mUserPresent + ", mRunning=" + mRunning);
        }
!!!5487159.java!!!	isFlipping() : boolean
        return mStarted;
!!!5487287.java!!!	setAutoStart(inout autoStart : boolean) : void
        mAutoStart = autoStart;
!!!5487415.java!!!	isAutoStart() : boolean
        return mAutoStart;
!!!5487543.java!!!	fyiWillBeAdvancedByHostKThx() : void
        mAdvancedByHost = true;
        updateRunning(false);
!!!5487671.java!!!	getAccessibilityClassName() : CharSequence
        return AdapterViewFlipper.class.getName();
