class Chronometer
!!!5527095.java!!!	Chronometer(inout context : Context)
        this(context, null, 0);
!!!5527223.java!!!	Chronometer(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!5527351.java!!!	Chronometer(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!5527479.java!!!	Chronometer(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);

        final TypedArray a = context.obtainStyledAttributes(
                attrs, com.android.internal.R.styleable.Chronometer, defStyleAttr, defStyleRes);
        setFormat(a.getString(R.styleable.Chronometer_format));
        setCountDown(a.getBoolean(R.styleable.Chronometer_countDown, false));
        a.recycle();

        init();
!!!5527607.java!!!	init() : void
        mBase = SystemClock.elapsedRealtime();
        updateText(mBase);
!!!5527735.java!!!	setCountDown(inout countDown : boolean) : void
        mCountDown = countDown;
        updateText(SystemClock.elapsedRealtime());
!!!5527863.java!!!	isCountDown() : boolean
        return mCountDown;
!!!5527991.java!!!	setBase(in base : long) : void
        mBase = base;
        dispatchChronometerTick();
        updateText(SystemClock.elapsedRealtime());
!!!5528119.java!!!	getBase() : long
        return mBase;
!!!5528247.java!!!	setFormat(inout format : String) : void
        mFormat = format;
        if (format != null && mFormatBuilder == null) {
            mFormatBuilder = new StringBuilder(format.length() * 2);
        }
!!!5528375.java!!!	getFormat() : String
        return mFormat;
!!!5528503.java!!!	setOnChronometerTickListener(inout listener : Chronometer::OnChronometerTickListener) : void
        mOnChronometerTickListener = listener;
!!!5528631.java!!!	getOnChronometerTickListener() : Chronometer::OnChronometerTickListener
        return mOnChronometerTickListener;
!!!5528759.java!!!	start() : void
        mStarted = true;
        updateRunning();
!!!5528887.java!!!	stop() : void
        mStarted = false;
        updateRunning();
!!!5529015.java!!!	setStarted(inout started : boolean) : void
        mStarted = started;
        updateRunning();
!!!5529143.java!!!	onDetachedFromWindow() : void
        super.onDetachedFromWindow();
        mVisible = false;
        updateRunning();
!!!5529271.java!!!	onWindowVisibilityChanged(in visibility : int) : void
        super.onWindowVisibilityChanged(visibility);
        mVisible = visibility == VISIBLE;
        updateRunning();
!!!5529399.java!!!	updateText(in now : long) : void
        mNow = now;
        long seconds = mCountDown ? mBase - now : now - mBase;
        seconds /= 1000;
        boolean negative = false;
        if (seconds < 0) {
            seconds = -seconds;
            negative = true;
        }
        String text = DateUtils.formatElapsedTime(mRecycle, seconds);
        if (negative) {
            text = getResources().getString(R.string.negative_duration, text);
        }

        if (mFormat != null) {
            Locale loc = Locale.getDefault();
            if (mFormatter == null || !loc.equals(mFormatterLocale)) {
                mFormatterLocale = loc;
                mFormatter = new Formatter(mFormatBuilder, loc);
            }
            mFormatBuilder.setLength(0);
            mFormatterArgs[0] = text;
            try {
                mFormatter.format(mFormat, mFormatterArgs);
                text = mFormatBuilder.toString();
            } catch (IllegalFormatException ex) {
                if (!mLogged) {
                    Log.w(TAG, "Illegal format string: " + mFormat);
                    mLogged = true;
                }
            }
        }
        setText(text);
!!!5529527.java!!!	updateRunning() : void
        boolean running = mVisible && mStarted;
        if (running != mRunning) {
            if (running) {
                updateText(SystemClock.elapsedRealtime());
                dispatchChronometerTick();
                postDelayed(mTickRunnable, 1000);
            } else {
                removeCallbacks(mTickRunnable);
            }
            mRunning = running;
        }
!!!5529655.java!!!	dispatchChronometerTick() : void
        if (mOnChronometerTickListener != null) {
            mOnChronometerTickListener.onChronometerTick(this);
        }
!!!5529783.java!!!	formatDuration(in ms : long) : String
        final Resources res = Resources.getSystem();
        final StringBuilder text = new StringBuilder();

        int duration = (int) (ms / DateUtils.SECOND_IN_MILLIS);
        if (duration < 0) {
            duration = -duration;
        }

        int h = 0;
        int m = 0;

        if (duration >= HOUR_IN_SEC) {
            h = duration / HOUR_IN_SEC;
            duration -= h * HOUR_IN_SEC;
        }
        if (duration >= MIN_IN_SEC) {
            m = duration / MIN_IN_SEC;
            duration -= m * MIN_IN_SEC;
        }
        int s = duration;

        try {
            if (h > 0) {
                text.append(res.getQuantityString(
                        com.android.internal.R.plurals.duration_hours, h, h));
            }
            if (m > 0) {
                if (text.length() > 0) {
                    text.append(' ');
                }
                text.append(res.getQuantityString(
                        com.android.internal.R.plurals.duration_minutes, m, m));
            }

            if (text.length() > 0) {
                text.append(' ');
            }
            text.append(res.getQuantityString(
                    com.android.internal.R.plurals.duration_seconds, s, s));
        } catch (Resources.NotFoundException e) {
            // Ignore; plurals throws an exception for an untranslated quantity for a given locale.
            return null;
        }
        return text.toString();
!!!5529911.java!!!	getContentDescription() : CharSequence
        return formatDuration(mNow - mBase);
!!!5530039.java!!!	getAccessibilityClassName() : CharSequence
        return Chronometer.class.getName();
