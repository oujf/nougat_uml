class OverScroller
!!!5729719.java!!!	OverScroller(inout context : Context)
        this(context, null);
!!!5729847.java!!!	OverScroller(inout context : Context, inout interpolator : Interpolator)
        this(context, interpolator, true);
!!!5729975.java!!!	OverScroller(inout context : Context, inout interpolator : Interpolator, inout flywheel : boolean)
        if (interpolator == null) {
            mInterpolator = new Scroller.ViscousFluidInterpolator();
        } else {
            mInterpolator = interpolator;
        }
        mFlywheel = flywheel;
        mScrollerX = new SplineOverScroller(context);
        mScrollerY = new SplineOverScroller(context);
!!!5730103.java!!!	OverScroller(inout context : Context, inout interpolator : Interpolator, in bounceCoefficientX : float, in bounceCoefficientY : float)
        this(context, interpolator, true);
!!!5730231.java!!!	OverScroller(inout context : Context, inout interpolator : Interpolator, in bounceCoefficientX : float, in bounceCoefficientY : float, inout flywheel : boolean)
        this(context, interpolator, flywheel);
!!!5730359.java!!!	setInterpolator(inout interpolator : Interpolator) : void
        if (interpolator == null) {
            mInterpolator = new Scroller.ViscousFluidInterpolator();
        } else {
            mInterpolator = interpolator;
        }
!!!5730487.java!!!	setFriction(in friction : float) : void
        mScrollerX.setFriction(friction);
        mScrollerY.setFriction(friction);
!!!5730615.java!!!	isFinished() : boolean
        return mScrollerX.mFinished && mScrollerY.mFinished;
!!!5730743.java!!!	forceFinished(inout finished : boolean) : void
        mScrollerX.mFinished = mScrollerY.mFinished = finished;
!!!5730871.java!!!	getCurrX() : int
        return mScrollerX.mCurrentPosition;
!!!5730999.java!!!	getCurrY() : int
        return mScrollerY.mCurrentPosition;
!!!5731127.java!!!	getCurrVelocity() : float
        return (float) Math.hypot(mScrollerX.mCurrVelocity, mScrollerY.mCurrVelocity);
!!!5731255.java!!!	getStartX() : int
        return mScrollerX.mStart;
!!!5731383.java!!!	getStartY() : int
        return mScrollerY.mStart;
!!!5731511.java!!!	getFinalX() : int
        return mScrollerX.mFinal;
!!!5731639.java!!!	getFinalY() : int
        return mScrollerY.mFinal;
!!!5731767.java!!!	getDuration() : int
        return Math.max(mScrollerX.mDuration, mScrollerY.mDuration);
!!!5731895.java!!!	extendDuration(in extend : int) : void
        mScrollerX.extendDuration(extend);
        mScrollerY.extendDuration(extend);
!!!5732023.java!!!	setFinalX(in newX : int) : void
        mScrollerX.setFinalPosition(newX);
!!!5732151.java!!!	setFinalY(in newY : int) : void
        mScrollerY.setFinalPosition(newY);
!!!5732279.java!!!	computeScrollOffset() : boolean
        if (isFinished()) {
            return false;
        }

        switch (mMode) {
            case SCROLL_MODE:
                long time = AnimationUtils.currentAnimationTimeMillis();
                // Any scroller can be used for time, since they were started
                // together in scroll mode. We use X here.
                final long elapsedTime = time - mScrollerX.mStartTime;

                final int duration = mScrollerX.mDuration;
                if (elapsedTime < duration) {
                    final float q = mInterpolator.getInterpolation(elapsedTime / (float) duration);
                    mScrollerX.updateScroll(q);
                    mScrollerY.updateScroll(q);
                } else {
                    abortAnimation();
                }
                break;

            case FLING_MODE:
                if (!mScrollerX.mFinished) {
                    if (!mScrollerX.update()) {
                        if (!mScrollerX.continueWhenFinished()) {
                            mScrollerX.finish();
                        }
                    }
                }

                if (!mScrollerY.mFinished) {
                    if (!mScrollerY.update()) {
                        if (!mScrollerY.continueWhenFinished()) {
                            mScrollerY.finish();
                        }
                    }
                }

                break;
        }

        return true;
!!!5732407.java!!!	startScroll(in startX : int, in startY : int, in dx : int, in dy : int) : void
        startScroll(startX, startY, dx, dy, DEFAULT_DURATION);
!!!5732535.java!!!	startScroll(in startX : int, in startY : int, in dx : int, in dy : int, in duration : int) : void
        mMode = SCROLL_MODE;
        mScrollerX.startScroll(startX, dx, duration);
        mScrollerY.startScroll(startY, dy, duration);
!!!5732663.java!!!	springBack(in startX : int, in startY : int, in minX : int, in maxX : int, in minY : int, in maxY : int) : boolean
        mMode = FLING_MODE;

        // Make sure both methods are called.
        final boolean spingbackX = mScrollerX.springback(startX, minX, maxX);
        final boolean spingbackY = mScrollerY.springback(startY, minY, maxY);
        return spingbackX || spingbackY;
!!!5732791.java!!!	fling(in startX : int, in startY : int, in velocityX : int, in velocityY : int, in minX : int, in maxX : int, in minY : int, in maxY : int) : void
        fling(startX, startY, velocityX, velocityY, minX, maxX, minY, maxY, 0, 0);
!!!5732919.java!!!	fling(in startX : int, in startY : int, in velocityX : int, in velocityY : int, in minX : int, in maxX : int, in minY : int, in maxY : int, in overX : int, in overY : int) : void
        // Continue a scroll or fling in progress
        if (mFlywheel && !isFinished()) {
            float oldVelocityX = mScrollerX.mCurrVelocity;
            float oldVelocityY = mScrollerY.mCurrVelocity;
            if (Math.signum(velocityX) == Math.signum(oldVelocityX) &&
                    Math.signum(velocityY) == Math.signum(oldVelocityY)) {
                velocityX += oldVelocityX;
                velocityY += oldVelocityY;
            }
        }

        mMode = FLING_MODE;
        mScrollerX.fling(startX, velocityX, minX, maxX, overX);
        mScrollerY.fling(startY, velocityY, minY, maxY, overY);
!!!5733047.java!!!	notifyHorizontalEdgeReached(in startX : int, in finalX : int, in overX : int) : void
        mScrollerX.notifyEdgeReached(startX, finalX, overX);
!!!5733175.java!!!	notifyVerticalEdgeReached(in startY : int, in finalY : int, in overY : int) : void
        mScrollerY.notifyEdgeReached(startY, finalY, overY);
!!!5733303.java!!!	isOverScrolled() : boolean
        return ((!mScrollerX.mFinished &&
                mScrollerX.mState != SplineOverScroller.SPLINE) ||
                (!mScrollerY.mFinished &&
                        mScrollerY.mState != SplineOverScroller.SPLINE));
!!!5733431.java!!!	abortAnimation() : void
        mScrollerX.finish();
        mScrollerY.finish();
!!!5733559.java!!!	timePassed() : int
        final long time = AnimationUtils.currentAnimationTimeMillis();
        final long startTime = Math.min(mScrollerX.mStartTime, mScrollerY.mStartTime);
        return (int) (time - startTime);
!!!5733687.java!!!	isScrollingInDirection(in xvel : float, in yvel : float) : boolean
        final int dx = mScrollerX.mFinal - mScrollerX.mStart;
        final int dy = mScrollerY.mFinal - mScrollerY.mStart;
        return !isFinished() && Math.signum(xvel) == Math.signum(dx) &&
                Math.signum(yvel) == Math.signum(dy);
