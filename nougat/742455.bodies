class RatingBar
!!!5757879.java!!!	RatingBar(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!5758007.java!!!	RatingBar(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);

        final TypedArray a = context.obtainStyledAttributes(
                attrs, R.styleable.RatingBar, defStyleAttr, defStyleRes);
        final int numStars = a.getInt(R.styleable.RatingBar_numStars, mNumStars);
        setIsIndicator(a.getBoolean(R.styleable.RatingBar_isIndicator, !mIsUserSeekable));
        final float rating = a.getFloat(R.styleable.RatingBar_rating, -1);
        final float stepSize = a.getFloat(R.styleable.RatingBar_stepSize, -1);
        a.recycle();

        if (numStars > 0 && numStars != mNumStars) {
            setNumStars(numStars);
        }

        if (stepSize >= 0) {
            setStepSize(stepSize);
        } else {
            setStepSize(0.5f);
        }

        if (rating >= 0) {
            setRating(rating);
        }

        // A touch inside a star fill up to that fractional area (slightly more
        // than 1 so boundaries round up).
        mTouchProgressOffset = 1.1f;
!!!5758135.java!!!	RatingBar(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, com.android.internal.R.attr.ratingBarStyle);
!!!5758263.java!!!	RatingBar(inout context : Context)
        this(context, null);
!!!5758391.java!!!	setOnRatingBarChangeListener(inout listener : RatingBar::OnRatingBarChangeListener) : void
        mOnRatingBarChangeListener = listener;
!!!5758519.java!!!	getOnRatingBarChangeListener() : RatingBar::OnRatingBarChangeListener
        return mOnRatingBarChangeListener;
!!!5758647.java!!!	setIsIndicator(inout isIndicator : boolean) : void
        mIsUserSeekable = !isIndicator;
        setFocusable(!isIndicator);
!!!5758775.java!!!	isIndicator() : boolean
        return !mIsUserSeekable;
!!!5758903.java!!!	setNumStars(in numStars : int) : void
        if (numStars <= 0) {
            return;
        }

        mNumStars = numStars;

        // This causes the width to change, so re-layout
        requestLayout();
!!!5759031.java!!!	getNumStars() : int
        return mNumStars;
!!!5759159.java!!!	setRating(in rating : float) : void
        setProgress(Math.round(rating * getProgressPerStar()));
!!!5759287.java!!!	getRating() : float
        return getProgress() / getProgressPerStar();
!!!5759415.java!!!	setStepSize(in stepSize : float) : void
        if (stepSize <= 0) {
            return;
        }

        final float newMax = mNumStars / stepSize;
        final int newProgress = (int) (newMax / getMax() * getProgress());
        setMax((int) newMax);
        setProgress(newProgress);
!!!5759543.java!!!	getStepSize() : float
        return (float) getNumStars() / getMax();
!!!5759671.java!!!	getProgressPerStar() : float
        if (mNumStars > 0) {
            return 1f * getMax() / mNumStars;
        } else {
            return 1;
        }
!!!5759799.java!!!	getDrawableShape() : Shape
        // TODO: Once ProgressBar's TODOs are fixed, this won't be needed
        return new RectShape();
!!!5759927.java!!!	onProgressRefresh(in scale : float, inout fromUser : boolean, in progress : int) : void
        super.onProgressRefresh(scale, fromUser, progress);

        // Keep secondary progress in sync with primary
        updateSecondaryProgress(progress);

        if (!fromUser) {
            // Callback for non-user rating changes
            dispatchRatingChange(false);
        }
!!!5760055.java!!!	updateSecondaryProgress(in progress : int) : void
        final float ratio = getProgressPerStar();
        if (ratio > 0) {
            final float progressInStars = progress / ratio;
            final int secondaryProgress = (int) (Math.ceil(progressInStars) * ratio);
            setSecondaryProgress(secondaryProgress);
        }
!!!5760183.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);

        if (mSampleTile != null) {
            // TODO: Once ProgressBar's TODOs are gone, this can be done more
            // cleanly than mSampleTile
            final int width = mSampleTile.getWidth() * mNumStars;
            setMeasuredDimension(resolveSizeAndState(width, widthMeasureSpec, 0),
                    getMeasuredHeight());
        }
!!!5760311.java!!!	onStartTrackingTouch() : void
        mProgressOnStartTracking = getProgress();

        super.onStartTrackingTouch();
!!!5760439.java!!!	onStopTrackingTouch() : void
        super.onStopTrackingTouch();

        if (getProgress() != mProgressOnStartTracking) {
            dispatchRatingChange(true);
        }
!!!5760567.java!!!	onKeyChange() : void
        super.onKeyChange();
        dispatchRatingChange(true);
!!!5760695.java!!!	dispatchRatingChange(inout fromUser : boolean) : void
        if (mOnRatingBarChangeListener != null) {
            mOnRatingBarChangeListener.onRatingChanged(this, getRating(),
                    fromUser);
        }
!!!5760823.java!!!	setMax(in max : int) : void
        // Disallow max progress = 0
        if (max <= 0) {
            return;
        }

        super.setMax(max);
!!!5760951.java!!!	getAccessibilityClassName() : CharSequence
        return RatingBar.class.getName();
!!!5761079.java!!!	onInitializeAccessibilityNodeInfoInternal(inout info : AccessibilityNodeInfo) : void
        super.onInitializeAccessibilityNodeInfoInternal(info);

        if (canUserSetProgress()) {
            info.addAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_SET_PROGRESS);
        }
!!!5761207.java!!!	canUserSetProgress() : boolean
        return super.canUserSetProgress() && !isIndicator();
