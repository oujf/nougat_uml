class TextClock
!!!5870519.java!!!	TextClock(inout context : Context)
        super(context);
        init();
!!!5870647.java!!!	TextClock(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!5870775.java!!!	TextClock(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!5870903.java!!!	TextClock(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);

        final TypedArray a = context.obtainStyledAttributes(
                attrs, R.styleable.TextClock, defStyleAttr, defStyleRes);
        try {
            mFormat12 = a.getText(R.styleable.TextClock_format12Hour);
            mFormat24 = a.getText(R.styleable.TextClock_format24Hour);
            mTimeZone = a.getString(R.styleable.TextClock_timeZone);
        } finally {
            a.recycle();
        }

        init();
!!!5871031.java!!!	init() : void
        if (mFormat12 == null || mFormat24 == null) {
            LocaleData ld = LocaleData.get(getContext().getResources().getConfiguration().locale);
            if (mFormat12 == null) {
                mFormat12 = ld.timeFormat_hm;
            }
            if (mFormat24 == null) {
                mFormat24 = ld.timeFormat_Hm;
            }
        }

        createTime(mTimeZone);
        // Wait until onAttachedToWindow() to handle the ticker
        chooseFormat(false);
!!!5871159.java!!!	createTime(inout timeZone : String) : void
        if (timeZone != null) {
            mTime = Calendar.getInstance(TimeZone.getTimeZone(timeZone));
        } else {
            mTime = Calendar.getInstance();
        }
!!!5871287.java!!!	getFormat12Hour() : CharSequence
        return mFormat12;
!!!5871415.java!!!	setFormat12Hour(inout format : CharSequence) : void
        mFormat12 = format;

        chooseFormat();
        onTimeChanged();
!!!5871543.java!!!	setContentDescriptionFormat12Hour(inout format : CharSequence) : void
        mDescFormat12 = format;

        chooseFormat();
        onTimeChanged();
!!!5871671.java!!!	getFormat24Hour() : CharSequence
        return mFormat24;
!!!5871799.java!!!	setFormat24Hour(inout format : CharSequence) : void
        mFormat24 = format;

        chooseFormat();
        onTimeChanged();
!!!5871927.java!!!	setContentDescriptionFormat24Hour(inout format : CharSequence) : void
        mDescFormat24 = format;

        chooseFormat();
        onTimeChanged();
!!!5872055.java!!!	setShowCurrentUserTime(inout showCurrentUserTime : boolean) : void
        mShowCurrentUserTime = showCurrentUserTime;

        chooseFormat();
        onTimeChanged();
        unregisterObserver();
        registerObserver();
!!!5872183.java!!!	is24HourModeEnabled() : boolean
        if (mShowCurrentUserTime) {
            return DateFormat.is24HourFormat(getContext(), ActivityManager.getCurrentUser());
        } else {
            return DateFormat.is24HourFormat(getContext());
        }
!!!5872311.java!!!	getTimeZone() : String
        return mTimeZone;
!!!5872439.java!!!	setTimeZone(inout timeZone : String) : void
        mTimeZone = timeZone;

        createTime(timeZone);
        onTimeChanged();
!!!5872567.java!!!	chooseFormat() : void
        chooseFormat(true);
!!!5872695.java!!!	getFormat() : CharSequence
        return mFormat;
!!!5872823.java!!!	chooseFormat(inout handleTicker : boolean) : void
        final boolean format24Requested = is24HourModeEnabled();

        LocaleData ld = LocaleData.get(getContext().getResources().getConfiguration().locale);

        if (format24Requested) {
            mFormat = abc(mFormat24, mFormat12, ld.timeFormat_Hm);
            mDescFormat = abc(mDescFormat24, mDescFormat12, mFormat);
        } else {
            mFormat = abc(mFormat12, mFormat24, ld.timeFormat_hm);
            mDescFormat = abc(mDescFormat12, mDescFormat24, mFormat);
        }

        boolean hadSeconds = mHasSeconds;
        mHasSeconds = DateFormat.hasSeconds(mFormat);

        if (handleTicker && mAttached && hadSeconds != mHasSeconds) {
            if (hadSeconds) getHandler().removeCallbacks(mTicker);
            else mTicker.run();
        }
!!!5872951.java!!!	abc(inout a : CharSequence, inout b : CharSequence, inout c : CharSequence) : CharSequence
        return a == null ? (b == null ? c : b) : a;
!!!5873079.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();

        if (!mAttached) {
            mAttached = true;

            registerReceiver();
            registerObserver();

            createTime(mTimeZone);

            if (mHasSeconds) {
                mTicker.run();
            } else {
                onTimeChanged();
            }
        }
!!!5873207.java!!!	onDetachedFromWindow() : void
        super.onDetachedFromWindow();

        if (mAttached) {
            unregisterReceiver();
            unregisterObserver();

            getHandler().removeCallbacks(mTicker);

            mAttached = false;
        }
!!!5873335.java!!!	registerReceiver() : void
        final IntentFilter filter = new IntentFilter();

        filter.addAction(Intent.ACTION_TIME_TICK);
        filter.addAction(Intent.ACTION_TIME_CHANGED);
        filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);

        // OK, this is gross but needed. This class is supported by the
        // remote views mechanism and as a part of that the remote views
        // can be inflated by a context for another user without the app
        // having interact users permission - just for loading resources.
        // For example, when adding widgets from a managed profile to the
        // home screen. Therefore, we register the receiver as the user
        // the app is running as not the one the context is for.
        getContext().registerReceiverAsUser(mIntentReceiver, android.os.Process.myUserHandle(),
                filter, null, getHandler());
!!!5873463.java!!!	registerObserver() : void
        if (isAttachedToWindow()) {
            if (mFormatChangeObserver == null) {
                mFormatChangeObserver = new FormatChangeObserver(getHandler());
            }
            final ContentResolver resolver = getContext().getContentResolver();
            if (mShowCurrentUserTime) {
                resolver.registerContentObserver(Settings.System.CONTENT_URI, true,
                        mFormatChangeObserver, UserHandle.USER_ALL);
            } else {
                resolver.registerContentObserver(Settings.System.CONTENT_URI, true,
                        mFormatChangeObserver);
            }
        }
!!!5873591.java!!!	unregisterReceiver() : void
        getContext().unregisterReceiver(mIntentReceiver);
!!!5873719.java!!!	unregisterObserver() : void
        if (mFormatChangeObserver != null) {
            final ContentResolver resolver = getContext().getContentResolver();
            resolver.unregisterContentObserver(mFormatChangeObserver);
        }
!!!5873847.java!!!	onTimeChanged() : void
        mTime.setTimeInMillis(System.currentTimeMillis());
        setText(DateFormat.format(mFormat, mTime));
        setContentDescription(DateFormat.format(mDescFormat, mTime));
!!!5873975.java!!!	encodeProperties(inout stream : ViewHierarchyEncoder) : void
        super.encodeProperties(stream);

        CharSequence s = getFormat12Hour();
        stream.addProperty("format12Hour", s == null ? null : s.toString());

        s = getFormat24Hour();
        stream.addProperty("format24Hour", s == null ? null : s.toString());
        stream.addProperty("format", mFormat == null ? null : mFormat.toString());
        stream.addProperty("hasSeconds", mHasSeconds);
