class AlsaDeviceRecord
!!!5927095.java!!!	parse(inout line : String) : boolean
            // "0123456789012345678901234567890"
            // "  2: [ 0-31]: digital audio playback"
            // "  3: [ 0-30]: digital audio capture"
            // " 35: [ 1]   : control"
            // " 36: [ 2- 0]: raw midi"

            final int kToken_LineNum = 0;
            final int kToken_CardNum = 1;
            final int kToken_DeviceNum = 2;
            final int kToken_Type0 = 3; // "digital", "control", "raw"
            final int kToken_Type1 = 4; // "audio", "midi"
            final int kToken_Type2 = 5; // "capture", "playback"

            int tokenOffset = 0;
            int delimOffset = 0;
            int tokenIndex = kToken_LineNum;
            while (true) {
                tokenOffset = mTokenizer.nextToken(line, delimOffset);
                if (tokenOffset == LineTokenizer.kTokenNotFound) {
                    break; // bail
                }
                delimOffset = mTokenizer.nextDelimiter(line, tokenOffset);
                if (delimOffset == LineTokenizer.kTokenNotFound) {
                    delimOffset = line.length();
                }
                String token = line.substring(tokenOffset, delimOffset);

                try {
                    switch (tokenIndex) {
                    case kToken_LineNum:
                        // ignore
                        break;

                    case kToken_CardNum:
                        mCardNum = Integer.parseInt(token);
                        if (line.charAt(delimOffset) != '-') {
                            tokenIndex++; // no device # in the token stream
                        }
                        break;

                    case kToken_DeviceNum:
                        mDeviceNum = Integer.parseInt(token);
                        break;

                    case kToken_Type0:
                        if (token.equals("digital")) {
                            // NOP
                        } else if (token.equals("control")) {
                            mDeviceType = kDeviceType_Control;
                        } else if (token.equals("raw")) {
                            // NOP
                        }
                        break;

                    case kToken_Type1:
                        if (token.equals("audio")) {
                            mDeviceType = kDeviceType_Audio;
                        } else if (token.equals("midi")) {
                            mDeviceType = kDeviceType_MIDI;
                            mHasMIDIDevices = true;
                        }
                        break;

                    case kToken_Type2:
                        if (token.equals("capture")) {
                            mDeviceDir = kDeviceDir_Capture;
                            mHasCaptureDevices = true;
                        } else if (token.equals("playback")) {
                            mDeviceDir = kDeviceDir_Playback;
                            mHasPlaybackDevices = true;
                        }
                        break;
                    } // switch (tokenIndex)
                } catch (NumberFormatException e) {
                    Slog.e(TAG, "Failed to parse token " + tokenIndex + " of " + kDevicesFilePath
                        + " token: " + token);
                    return false;
                }

                tokenIndex++;
            } // while (true)

            return true;
!!!5927223.java!!!	textFormat() : String
            StringBuilder sb = new StringBuilder();
            sb.append("[" + mCardNum + ":" + mDeviceNum + "]");

            switch (mDeviceType) {
            case kDeviceType_Unknown:
                sb.append(" N/A");
                break;
            case kDeviceType_Audio:
                sb.append(" Audio");
                break;
            case kDeviceType_Control:
                sb.append(" Control");
                break;
            case kDeviceType_MIDI:
                sb.append(" MIDI");
                break;
            }

            switch (mDeviceDir) {
            case kDeviceDir_Unknown:
                sb.append(" N/A");
                break;
            case kDeviceDir_Capture:
                sb.append(" Capture");
                break;
            case kDeviceDir_Playback:
                sb.append(" Playback");
                break;
            }

            return sb.toString();
