class FloatingToolbar
!!!6392119.java!!!	FloatingToolbar(inout context : Context, inout window : Window)
        mContext = applyDefaultTheme(Preconditions.checkNotNull(context));
        mWindow = Preconditions.checkNotNull(window);
        mPopup = new FloatingToolbarPopup(mContext, window.getDecorView());
!!!6392247.java!!!	setMenu(inout menu : Menu) : FloatingToolbar
        mMenu = Preconditions.checkNotNull(menu);
        return this;
!!!6392375.java!!!	setOnMenuItemClickListener(inout menuItemClickListener : MenuItem::OnMenuItemClickListener) : FloatingToolbar
        if (menuItemClickListener != null) {
            mMenuItemClickListener = menuItemClickListener;
        } else {
            mMenuItemClickListener = NO_OP_MENUITEM_CLICK_LISTENER;
        }
        return this;
!!!6392503.java!!!	setContentRect(inout rect : Rect) : FloatingToolbar
        mContentRect.set(Preconditions.checkNotNull(rect));
        return this;
!!!6392631.java!!!	setSuggestedWidth(in suggestedWidth : int) : FloatingToolbar
        // Check if there's been a substantial width spec change.
        int difference = Math.abs(suggestedWidth - mSuggestedWidth);
        mWidthChanged = difference > (mSuggestedWidth * 0.2);

        mSuggestedWidth = suggestedWidth;
        return this;
!!!6392759.java!!!	show() : FloatingToolbar
        registerOrientationHandler();
        doShow();
        return this;
!!!6392887.java!!!	updateLayout() : FloatingToolbar
        if (mPopup.isShowing()) {
            doShow();
        }
        return this;
!!!6393015.java!!!	dismiss() : void
        unregisterOrientationHandler();
        mPopup.dismiss();
!!!6393143.java!!!	hide() : void
        mPopup.hide();
!!!6393271.java!!!	isShowing() : boolean
        return mPopup.isShowing();
!!!6393399.java!!!	isHidden() : boolean
        return mPopup.isHidden();
!!!6393527.java!!!	doShow() : void
        List<MenuItem> menuItems = getVisibleAndEnabledMenuItems(mMenu);
        if (!isCurrentlyShowing(menuItems) || mWidthChanged) {
            mPopup.dismiss();
            mPopup.layoutMenuItems(menuItems, mMenuItemClickListener, mSuggestedWidth);
            mShowingMenuItems = getShowingMenuItemsReferences(menuItems);
        }
        if (!mPopup.isShowing()) {
            mPopup.show(mContentRect);
        } else if (!mPreviousContentRect.equals(mContentRect)) {
            mPopup.updateCoordinates(mContentRect);
        }
        mWidthChanged = false;
        mPreviousContentRect.set(mContentRect);
!!!6393655.java!!!	isCurrentlyShowing(inout menuItems : List<MenuItem>) : boolean
        return mShowingMenuItems.equals(getShowingMenuItemsReferences(menuItems));
!!!6393783.java!!!	getVisibleAndEnabledMenuItems(inout menu : Menu) : MenuItem
        List<MenuItem> menuItems = new ArrayList<MenuItem>();
        for (int i = 0; (menu != null) && (i < menu.size()); i++) {
            MenuItem menuItem = menu.getItem(i);
            if (menuItem.isVisible() && menuItem.isEnabled()) {
                Menu subMenu = menuItem.getSubMenu();
                if (subMenu != null) {
                    menuItems.addAll(getVisibleAndEnabledMenuItems(subMenu));
                } else {
                    menuItems.add(menuItem);
                }
            }
        }
        return menuItems;
!!!6393911.java!!!	getShowingMenuItemsReferences(inout menuItems : List<MenuItem>) : Object
        List<Object> references = new ArrayList<Object>();
        for (MenuItem menuItem : menuItems) {
            if (isIconOnlyMenuItem(menuItem)) {
                references.add(menuItem.getIcon());
            } else {
                references.add(menuItem.getTitle());
            }
        }
        return references;
!!!6394039.java!!!	registerOrientationHandler() : void
        unregisterOrientationHandler();
        mWindow.getDecorView().addOnLayoutChangeListener(mOrientationChangeHandler);
!!!6394167.java!!!	unregisterOrientationHandler() : void
        mWindow.getDecorView().removeOnLayoutChangeListener(mOrientationChangeHandler);
!!!6401975.java!!!	isIconOnlyMenuItem(inout menuItem : MenuItem) : boolean
        if (TextUtils.isEmpty(menuItem.getTitle()) && menuItem.getIcon() != null) {
            return true;
        }
        return false;
!!!6402103.java!!!	createMenuItemButton(inout context : Context, inout menuItem : MenuItem) : View
        if (isIconOnlyMenuItem(menuItem)) {
            View imageMenuItemButton = LayoutInflater.from(context)
                    .inflate(R.layout.floating_popup_menu_image_button, null);
            ((ImageButton) imageMenuItemButton
                    .findViewById(R.id.floating_toolbar_menu_item_image_button))
                    .setImageDrawable(menuItem.getIcon());
            return imageMenuItemButton;
        }

        Button menuItemButton = (Button) LayoutInflater.from(context)
                .inflate(R.layout.floating_popup_menu_button, null);
        menuItemButton.setText(menuItem.getTitle());
        menuItemButton.setContentDescription(menuItem.getTitle());
        return menuItemButton;
!!!6402231.java!!!	createContentContainer(inout context : Context) : ViewGroup
        ViewGroup contentContainer = (ViewGroup) LayoutInflater.from(context)
                .inflate(R.layout.floating_popup_container, null);
        contentContainer.setLayoutParams(new ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        contentContainer.setTag(FLOATING_TOOLBAR_TAG);
        return contentContainer;
!!!6402359.java!!!	createPopupWindow(inout content : ViewGroup) : PopupWindow
        ViewGroup popupContentHolder = new LinearLayout(content.getContext());
        PopupWindow popupWindow = new PopupWindow(popupContentHolder);
        // TODO: Use .setLayoutInScreenEnabled(true) instead of .setClippingEnabled(false)
        // unless FLAG_LAYOUT_IN_SCREEN has any unintentional side-effects.
        popupWindow.setClippingEnabled(false);
        popupWindow.setWindowLayoutType(
                WindowManager.LayoutParams.TYPE_APPLICATION_ABOVE_SUB_PANEL);
        popupWindow.setAnimationStyle(0);
        popupWindow.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
        content.setLayoutParams(new ViewGroup.LayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        popupContentHolder.addView(content);
        return popupWindow;
!!!6402487.java!!!	createEnterAnimation(inout view : View) : AnimatorSet
        AnimatorSet animation = new AnimatorSet();
        animation.playTogether(
                ObjectAnimator.ofFloat(view, View.ALPHA, 0, 1).setDuration(150));
        return animation;
!!!6402615.java!!!	createExitAnimation(inout view : View, in startDelay : int, inout listener : Animator::AnimatorListener) : AnimatorSet
        AnimatorSet animation =  new AnimatorSet();
        animation.playTogether(
                ObjectAnimator.ofFloat(view, View.ALPHA, 1, 0).setDuration(100));
        animation.setStartDelay(startDelay);
        animation.addListener(listener);
        return animation;
!!!6402743.java!!!	applyDefaultTheme(inout originalContext : Context) : Context
        TypedArray a = originalContext.obtainStyledAttributes(new int[]{R.attr.isLightTheme});
        boolean isLightTheme = a.getBoolean(0, true);
        int themeId = isLightTheme ? R.style.Theme_Material_Light : R.style.Theme_Material;
        a.recycle();
        return new ContextThemeWrapper(originalContext, themeId);
