class DockedDividerUtils
!!!6163511.java!!!	calculateBoundsForPosition(in position : int, in dockSide : int, inout outRect : Rect, in displayWidth : int, in displayHeight : int, in dividerSize : int) : void
        outRect.set(0, 0, displayWidth, displayHeight);
        switch (dockSide) {
            case DOCKED_LEFT:
                outRect.right = position;
                break;
            case DOCKED_TOP:
                outRect.bottom = position;
                break;
            case DOCKED_RIGHT:
                outRect.left = position + dividerSize;
                break;
            case DOCKED_BOTTOM:
                outRect.top = position + dividerSize;
                break;
        }
        sanitizeStackBounds(outRect, dockSide == DOCKED_LEFT || dockSide == DOCKED_TOP);
!!!6163639.java!!!	sanitizeStackBounds(inout bounds : Rect, inout topLeft : boolean) : void

        // If the bounds are either on the top or left of the screen, rather move it further to the
        // left/top to make it more offscreen. If they are on the bottom or right, push them off the
        // screen by moving it even more to the bottom/right.
        if (topLeft) {
            if (bounds.left >= bounds.right) {
                bounds.left = bounds.right - 1;
            }
            if (bounds.top >= bounds.bottom) {
                bounds.top = bounds.bottom - 1;
            }
        } else {
            if (bounds.right <= bounds.left) {
                bounds.right = bounds.left + 1;
            }
            if (bounds.bottom <= bounds.top) {
                bounds.bottom = bounds.top + 1;
            }
        }
!!!6163767.java!!!	calculatePositionForBounds(inout bounds : Rect, in dockSide : int, in dividerSize : int) : int
        switch (dockSide) {
            case DOCKED_LEFT:
                return bounds.right;
            case DOCKED_TOP:
                return bounds.bottom;
            case DOCKED_RIGHT:
                return bounds.left - dividerSize;
            case DOCKED_BOTTOM:
                return bounds.top - dividerSize;
            default:
                return 0;
        }
!!!6163895.java!!!	calculateMiddlePosition(inout isHorizontalDivision : boolean, inout insets : Rect, in displayWidth : int, in displayHeight : int, in dividerSize : int) : int
        int start = isHorizontalDivision ? insets.top : insets.left;
        int end = isHorizontalDivision
                ? displayHeight - insets.bottom
                : displayWidth - insets.right;
        return start + (end - start) / 2 - dividerSize / 2;
!!!6164023.java!!!	getDockSideFromCreatedMode(inout dockOnTopOrLeft : boolean, inout isHorizontalDivision : boolean) : int
        if (dockOnTopOrLeft) {
            if (isHorizontalDivision) {
                return DOCKED_TOP;
            } else {
                return DOCKED_LEFT;
            }
        } else {
            if (isHorizontalDivision) {
                return DOCKED_BOTTOM;
            } else {
                return DOCKED_RIGHT;
            }
        }
!!!6164151.java!!!	invertDockSide(in dockSide : int) : int
        switch (dockSide) {
            case DOCKED_LEFT:
                return DOCKED_RIGHT;
            case DOCKED_TOP:
                return DOCKED_BOTTOM;
            case DOCKED_RIGHT:
                return DOCKED_LEFT;
            case DOCKED_BOTTOM:
                return DOCKED_TOP;
            default:
                return DOCKED_INVALID;
        }
