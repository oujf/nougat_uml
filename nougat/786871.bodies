class EpicenterTranslateClipReveal
!!!6195767.java!!!	EpicenterTranslateClipReveal()
        mInterpolatorX = null;
        mInterpolatorY = null;
        mInterpolatorZ = null;
!!!6195895.java!!!	EpicenterTranslateClipReveal(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);

        final TypedArray a = context.obtainStyledAttributes(attrs,
                R.styleable.EpicenterTranslateClipReveal, 0, 0);

        final int interpolatorX = a.getResourceId(
                R.styleable.EpicenterTranslateClipReveal_interpolatorX, 0);
        if (interpolatorX != 0) {
            mInterpolatorX = AnimationUtils.loadInterpolator(context, interpolatorX);
        } else {
            mInterpolatorX = TransitionConstants.LINEAR_OUT_SLOW_IN;
        }

        final int interpolatorY = a.getResourceId(
                R.styleable.EpicenterTranslateClipReveal_interpolatorY, 0);
        if (interpolatorY != 0) {
            mInterpolatorY = AnimationUtils.loadInterpolator(context, interpolatorY);
        } else {
            mInterpolatorY = TransitionConstants.FAST_OUT_SLOW_IN;
        }

        final int interpolatorZ = a.getResourceId(
                R.styleable.EpicenterTranslateClipReveal_interpolatorZ, 0);
        if (interpolatorZ != 0) {
            mInterpolatorZ = AnimationUtils.loadInterpolator(context, interpolatorZ);
        } else {
            mInterpolatorZ = TransitionConstants.FAST_OUT_SLOW_IN;
        }

        a.recycle();
!!!6196023.java!!!	captureStartValues(inout transitionValues : TransitionValues) : void
        super.captureStartValues(transitionValues);
        captureValues(transitionValues);
!!!6196151.java!!!	captureEndValues(inout transitionValues : TransitionValues) : void
        super.captureEndValues(transitionValues);
        captureValues(transitionValues);
!!!6196279.java!!!	captureValues(inout values : TransitionValues) : void
        final View view = values.view;
        if (view.getVisibility() == View.GONE) {
            return;
        }

        final Rect bounds = new Rect(0, 0, view.getWidth(), view.getHeight());
        values.values.put(PROPNAME_BOUNDS, bounds);
        values.values.put(PROPNAME_TRANSLATE_X, view.getTranslationX());
        values.values.put(PROPNAME_TRANSLATE_Y, view.getTranslationY());
        values.values.put(PROPNAME_TRANSLATE_Z, view.getTranslationZ());
        values.values.put(PROPNAME_Z, view.getZ());

        final Rect clip = view.getClipBounds();
        values.values.put(PROPNAME_CLIP, clip);
!!!6196407.java!!!	onAppear(inout sceneRoot : ViewGroup, inout view : View, inout startValues : TransitionValues, inout endValues : TransitionValues) : Animator
        if (endValues == null) {
            return null;
        }

        final Rect endBounds = (Rect) endValues.values.get(PROPNAME_BOUNDS);
        final Rect startBounds = getEpicenterOrCenter(endBounds);
        final float startX = startBounds.centerX() - endBounds.centerX();
        final float startY = startBounds.centerY() - endBounds.centerY();
        final float startZ = 0 - (float) endValues.values.get(PROPNAME_Z);

        // Translate the view to be centered on the epicenter.
        view.setTranslationX(startX);
        view.setTranslationY(startY);
        view.setTranslationZ(startZ);

        final float endX = (float) endValues.values.get(PROPNAME_TRANSLATE_X);
        final float endY = (float) endValues.values.get(PROPNAME_TRANSLATE_Y);
        final float endZ = (float) endValues.values.get(PROPNAME_TRANSLATE_Z);

        final Rect endClip = getBestRect(endValues);
        final Rect startClip = getEpicenterOrCenter(endClip);

        // Prepare the view.
        view.setClipBounds(startClip);

        final State startStateX = new State(startClip.left, startClip.right, startX);
        final State endStateX = new State(endClip.left, endClip.right, endX);
        final State startStateY = new State(startClip.top, startClip.bottom, startY);
        final State endStateY = new State(endClip.top, endClip.bottom, endY);

        return createRectAnimator(view, startStateX, startStateY, startZ, endStateX, endStateY,
                endZ, endValues, mInterpolatorX, mInterpolatorY, mInterpolatorZ);
!!!6196535.java!!!	onDisappear(inout sceneRoot : ViewGroup, inout view : View, inout startValues : TransitionValues, inout endValues : TransitionValues) : Animator
        if (startValues == null) {
            return null;
        }

        final Rect startBounds = (Rect) endValues.values.get(PROPNAME_BOUNDS);
        final Rect endBounds = getEpicenterOrCenter(startBounds);
        final float endX = endBounds.centerX() - startBounds.centerX();
        final float endY = endBounds.centerY() - startBounds.centerY();
        final float endZ = 0 - (float) startValues.values.get(PROPNAME_Z);

        final float startX = (float) endValues.values.get(PROPNAME_TRANSLATE_X);
        final float startY = (float) endValues.values.get(PROPNAME_TRANSLATE_Y);
        final float startZ = (float) endValues.values.get(PROPNAME_TRANSLATE_Z);

        final Rect startClip = getBestRect(startValues);
        final Rect endClip = getEpicenterOrCenter(startClip);

        // Prepare the view.
        view.setClipBounds(startClip);

        final State startStateX = new State(startClip.left, startClip.right, startX);
        final State endStateX = new State(endClip.left, endClip.right, endX);
        final State startStateY = new State(startClip.top, startClip.bottom, startY);
        final State endStateY = new State(endClip.top, endClip.bottom, endY);

        return createRectAnimator(view, startStateX, startStateY, startZ, endStateX, endStateY,
                endZ, endValues, mInterpolatorX, mInterpolatorY, mInterpolatorZ);
!!!6196663.java!!!	getEpicenterOrCenter(inout bestRect : Rect) : Rect
        final Rect epicenter = getEpicenter();
        if (epicenter != null) {
            return epicenter;
        }

        final int centerX = bestRect.centerX();
        final int centerY = bestRect.centerY();
        return new Rect(centerX, centerY, centerX, centerY);
!!!6196791.java!!!	getBestRect(inout values : TransitionValues) : Rect
        final Rect clipRect = (Rect) values.values.get(PROPNAME_CLIP);
        if (clipRect == null) {
            return (Rect) values.values.get(PROPNAME_BOUNDS);
        }
        return clipRect;
!!!6196919.java!!!	createRectAnimator(in view : View, inout startX : EpicenterTranslateClipReveal::State, inout startY : EpicenterTranslateClipReveal::State, in startZ : float, inout endX : EpicenterTranslateClipReveal::State, inout endY : EpicenterTranslateClipReveal::State, in endZ : float, inout endValues : TransitionValues, inout interpolatorX : TimeInterpolator, inout interpolatorY : TimeInterpolator, inout interpolatorZ : TimeInterpolator) : Animator
        final StateEvaluator evaluator = new StateEvaluator();

        final ObjectAnimator animZ = ObjectAnimator.ofFloat(view, View.TRANSLATION_Z, startZ, endZ);
        if (interpolatorZ != null) {
            animZ.setInterpolator(interpolatorZ);
        }

        final StateProperty propX = new StateProperty(StateProperty.TARGET_X);
        final ObjectAnimator animX = ObjectAnimator.ofObject(view, propX, evaluator, startX, endX);
        if (interpolatorX != null) {
            animX.setInterpolator(interpolatorX);
        }

        final StateProperty propY = new StateProperty(StateProperty.TARGET_Y);
        final ObjectAnimator animY = ObjectAnimator.ofObject(view, propY, evaluator, startY, endY);
        if (interpolatorY != null) {
            animY.setInterpolator(interpolatorY);
        }

        final Rect terminalClip = (Rect) endValues.values.get(PROPNAME_CLIP);
        final AnimatorListenerAdapter animatorListener = new AnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(Animator animation) {
                view.setClipBounds(terminalClip);
            }
        };

        final AnimatorSet animSet = new AnimatorSet();
        animSet.playTogether(animX, animY, animZ);
        animSet.addListener(animatorListener);
        return animSet;
