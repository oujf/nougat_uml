class ArrayUtils
!!!6197815.java!!!	ArrayUtils()
 /* cannot be instantiated */
!!!6197943.java!!!	newUnpaddedByteArray(in minLen : int) : byte
        return (byte[])VMRuntime.getRuntime().newUnpaddedArray(byte.class, minLen);
!!!6198071.java!!!	newUnpaddedCharArray(in minLen : int) : char
        return (char[])VMRuntime.getRuntime().newUnpaddedArray(char.class, minLen);
!!!6198199.java!!!	newUnpaddedIntArray(in minLen : int) : int
        return (int[])VMRuntime.getRuntime().newUnpaddedArray(int.class, minLen);
!!!6198327.java!!!	newUnpaddedBooleanArray(in minLen : int) : boolean
        return (boolean[])VMRuntime.getRuntime().newUnpaddedArray(boolean.class, minLen);
!!!6198455.java!!!	newUnpaddedLongArray(in minLen : int) : long
        return (long[])VMRuntime.getRuntime().newUnpaddedArray(long.class, minLen);
!!!6198583.java!!!	newUnpaddedFloatArray(in minLen : int) : float
        return (float[])VMRuntime.getRuntime().newUnpaddedArray(float.class, minLen);
!!!6198711.java!!!	newUnpaddedObjectArray(in minLen : int) : Object
        return (Object[])VMRuntime.getRuntime().newUnpaddedArray(Object.class, minLen);
!!!6198839.java!!!	newUnpaddedArray(inout clazz : Class, in minLen : int) : T
        return (T[])VMRuntime.getRuntime().newUnpaddedArray(clazz, minLen);
!!!6198967.java!!!	equals(inout array1 : byte, inout array2 : byte, in length : int) : boolean
        if (length < 0) {
            throw new IllegalArgumentException();
        }

        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length < length || array2.length < length) {
            return false;
        }
        for (int i = 0; i < length; i++) {
            if (array1[i] != array2[i]) {
                return false;
            }
        }
        return true;
!!!6199095.java!!!	emptyArray(inout kind : Class) : T
        if (kind == Object.class) {
            return (T[]) EmptyArray.OBJECT;
        }

        int bucket = (kind.hashCode() & 0x7FFFFFFF) % CACHE_SIZE;
        Object cache = sCache[bucket];

        if (cache == null || cache.getClass().getComponentType() != kind) {
            cache = Array.newInstance(kind, 0);
            sCache[bucket] = cache;

            // Log.e("cache", "new empty " + kind.getName() + " at " + bucket);
        }

        return (T[]) cache;
!!!6199223.java!!!	isEmpty(inout array : Collection<?>) : boolean
        return array == null || array.isEmpty();
!!!6199351.java!!!	isEmpty(inout array : T) : boolean
        return array == null || array.length == 0;
!!!6199479.java!!!	isEmpty(inout array : int) : boolean
        return array == null || array.length == 0;
!!!6199607.java!!!	isEmpty(inout array : long) : boolean
        return array == null || array.length == 0;
!!!6199735.java!!!	isEmpty(inout array : byte) : boolean
        return array == null || array.length == 0;
!!!6199863.java!!!	isEmpty(inout array : boolean) : boolean
        return array == null || array.length == 0;
!!!6199991.java!!!	contains(inout array : T, inout value : T) : boolean
        return indexOf(array, value) != -1;
!!!6200119.java!!!	indexOf(inout array : T, inout value : T) : int
        if (array == null) return -1;
        for (int i = 0; i < array.length; i++) {
            if (Objects.equals(array[i], value)) return i;
        }
        return -1;
!!!6200247.java!!!	containsAll(inout array : T, inout check : T) : boolean
        if (check == null) return true;
        for (T checkItem : check) {
            if (!contains(array, checkItem)) {
                return false;
            }
        }
        return true;
!!!6200375.java!!!	containsAny(inout array : T, inout check : T) : boolean
        if (check == null) return false;
        for (T checkItem : check) {
            if (contains(array, checkItem)) {
                return true;
            }
        }
        return false;
!!!6200503.java!!!	contains(inout array : int, in value : int) : boolean
        if (array == null) return false;
        for (int element : array) {
            if (element == value) {
                return true;
            }
        }
        return false;
!!!6200631.java!!!	contains(inout array : long, in value : long) : boolean
        if (array == null) return false;
        for (long element : array) {
            if (element == value) {
                return true;
            }
        }
        return false;
!!!6200759.java!!!	total(inout array : long) : long
        long total = 0;
        if (array != null) {
            for (long value : array) {
                total += value;
            }
        }
        return total;
!!!6200887.java!!!	convertToIntArray(inout list : List<Integer>) : int
        int[] array = new int[list.size()];
        for (int i = 0; i < list.size(); i++) {
            array[i] = list.get(i);
        }
        return array;
!!!6201015.java!!!	appendElement(inout kind : Class, inout array : T, inout element : T) : T
        final T[] result;
        final int end;
        if (array != null) {
            if (contains(array, element)) return array;
            end = array.length;
            result = (T[])Array.newInstance(kind, end + 1);
            System.arraycopy(array, 0, result, 0, end);
        } else {
            end = 0;
            result = (T[])Array.newInstance(kind, 1);
        }
        result[end] = element;
        return result;
!!!6201143.java!!!	removeElement(inout kind : Class, inout array : T, inout element : T) : T
        if (array != null) {
            if (!contains(array, element)) return array;
            final int length = array.length;
            for (int i = 0; i < length; i++) {
                if (Objects.equals(array[i], element)) {
                    if (length == 1) {
                        return null;
                    }
                    T[] result = (T[])Array.newInstance(kind, length - 1);
                    System.arraycopy(array, 0, result, 0, i);
                    System.arraycopy(array, i + 1, result, i, length - i - 1);
                    return result;
                }
            }
        }
        return array;
!!!6201271.java!!!	appendInt(inout cur : int, in val : int) : int
        if (cur == null) {
            return new int[] { val };
        }
        final int N = cur.length;
        for (int i = 0; i < N; i++) {
            if (cur[i] == val) {
                return cur;
            }
        }
        int[] ret = new int[N + 1];
        System.arraycopy(cur, 0, ret, 0, N);
        ret[N] = val;
        return ret;
!!!6201399.java!!!	removeInt(inout cur : int, in val : int) : int
        if (cur == null) {
            return null;
        }
        final int N = cur.length;
        for (int i = 0; i < N; i++) {
            if (cur[i] == val) {
                int[] ret = new int[N - 1];
                if (i > 0) {
                    System.arraycopy(cur, 0, ret, 0, i);
                }
                if (i < (N - 1)) {
                    System.arraycopy(cur, i + 1, ret, i, N - i - 1);
                }
                return ret;
            }
        }
        return cur;
!!!6201527.java!!!	removeString(inout cur : String, inout val : String) : String
        if (cur == null) {
            return null;
        }
        final int N = cur.length;
        for (int i = 0; i < N; i++) {
            if (Objects.equals(cur[i], val)) {
                String[] ret = new String[N - 1];
                if (i > 0) {
                    System.arraycopy(cur, 0, ret, 0, i);
                }
                if (i < (N - 1)) {
                    System.arraycopy(cur, i + 1, ret, i, N - i - 1);
                }
                return ret;
            }
        }
        return cur;
!!!6201655.java!!!	appendLong(inout cur : long, in val : long) : long
        if (cur == null) {
            return new long[] { val };
        }
        final int N = cur.length;
        for (int i = 0; i < N; i++) {
            if (cur[i] == val) {
                return cur;
            }
        }
        long[] ret = new long[N + 1];
        System.arraycopy(cur, 0, ret, 0, N);
        ret[N] = val;
        return ret;
!!!6201783.java!!!	removeLong(inout cur : long, in val : long) : long
        if (cur == null) {
            return null;
        }
        final int N = cur.length;
        for (int i = 0; i < N; i++) {
            if (cur[i] == val) {
                long[] ret = new long[N - 1];
                if (i > 0) {
                    System.arraycopy(cur, 0, ret, 0, i);
                }
                if (i < (N - 1)) {
                    System.arraycopy(cur, i + 1, ret, i, N - i - 1);
                }
                return ret;
            }
        }
        return cur;
!!!6201911.java!!!	cloneOrNull(inout array : long) : long
        return (array != null) ? array.clone() : null;
!!!6202039.java!!!	cloneOrNull(inout array : ArraySet) : ArraySet
        return (array != null) ? new ArraySet<T>(array) : null;
!!!6202167.java!!!	add(inout cur : ArraySet, inout val : T) : ArraySet
        if (cur == null) {
            cur = new ArraySet<>();
        }
        cur.add(val);
        return cur;
!!!6202295.java!!!	remove(inout cur : ArraySet, inout val : T) : ArraySet
        if (cur == null) {
            return null;
        }
        cur.remove(val);
        if (cur.isEmpty()) {
            return null;
        } else {
            return cur;
        }
!!!6202423.java!!!	contains(inout cur : ArraySet, inout val : T) : boolean
        return (cur != null) ? cur.contains(val) : false;
!!!6202551.java!!!	add(inout cur : ArrayList<T>, inout val : T) : ArrayList<T>
        if (cur == null) {
            cur = new ArrayList<>();
        }
        cur.add(val);
        return cur;
!!!6202679.java!!!	remove(inout cur : ArrayList<T>, inout val : T) : ArrayList<T>
        if (cur == null) {
            return null;
        }
        cur.remove(val);
        if (cur.isEmpty()) {
            return null;
        } else {
            return cur;
        }
!!!6202807.java!!!	contains(inout cur : Collection<T>, inout val : T) : boolean
        return (cur != null) ? cur.contains(val) : false;
!!!6202935.java!!!	trimToSize(inout array : T, in size : int) : T
        if (array == null || size == 0) {
            return null;
        } else if (array.length == size) {
            return array;
        } else {
            return Arrays.copyOf(array, size);
        }
!!!6203063.java!!!	referenceEquals(inout a : ArrayList<T>, inout b : ArrayList<T>) : boolean
        if (a == b) {
            return true;
        }

        final int sizeA = a.size();
        final int sizeB = b.size();
        if (a == null || b == null || sizeA != sizeB) {
            return false;
        }

        boolean diff = false;
        for (int i = 0; i < sizeA && !diff; i++) {
            diff |= a.get(i) != b.get(i);
        }
        return !diff;
!!!6203191.java!!!	unstableRemoveIf(inout collection : ArrayList<T>, inout predicate : java.util.function.Predicate<T>) : int
        if (collection == null) {
            return 0;
        }

        final int size = collection.size();
        int leftIdx = 0;
        int rightIdx = size - 1;
        while (leftIdx <= rightIdx) {
            // Find the next element to remove moving left to right.
            while (leftIdx < size && !predicate.test(collection.get(leftIdx))) {
                leftIdx++;
            }

            // Find the next element to keep moving right to left.
            while (rightIdx > leftIdx && predicate.test(collection.get(rightIdx))) {
                rightIdx--;
            }

            if (leftIdx >= rightIdx) {
                // Done.
                break;
            }

            Collections.swap(collection, leftIdx, rightIdx);
            leftIdx++;
            rightIdx--;
        }

        // leftIdx is now at the end.
        for (int i = size - 1; i >= leftIdx; i--) {
            collection.remove(i);
        }
        return size - leftIdx;
