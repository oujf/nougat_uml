class FastXmlSerializer
!!!6219831.java!!!	append(in c : char) : void
        int pos = mPos;
        if (pos >= (BUFFER_LEN-1)) {
            flush();
            pos = mPos;
        }
        mText[pos] = c;
        mPos = pos+1;
!!!6219959.java!!!	append(inout str : String, in i : int, in length : int) : void
        if (length > BUFFER_LEN) {
            final int end = i + length;
            while (i < end) {
                int next = i + BUFFER_LEN;
                append(str, i, next<end ? BUFFER_LEN : (end-i));
                i = next;
            }
            return;
        }
        int pos = mPos;
        if ((pos+length) > BUFFER_LEN) {
            flush();
            pos = mPos;
        }
        str.getChars(i, i+length, mText, pos);
        mPos = pos + length;
!!!6220087.java!!!	append(inout buf : char, in i : int, in length : int) : void
        if (length > BUFFER_LEN) {
            final int end = i + length;
            while (i < end) {
                int next = i + BUFFER_LEN;
                append(buf, i, next<end ? BUFFER_LEN : (end-i));
                i = next;
            }
            return;
        }
        int pos = mPos;
        if ((pos+length) > BUFFER_LEN) {
            flush();
            pos = mPos;
        }
        System.arraycopy(buf, i, mText, pos, length);
        mPos = pos + length;
!!!6220215.java!!!	append(inout str : String) : void
        append(str, 0, str.length());
!!!6220343.java!!!	appendIndent(in indent : int) : void
        indent *= 4;
        if (indent > sSpace.length()) {
            indent = sSpace.length();
        }
        append(sSpace, 0, indent);
!!!6220471.java!!!	escapeAndAppendString(in string : String) : void
        final int N = string.length();
        final char NE = (char)ESCAPE_TABLE.length;
        final String[] escapes = ESCAPE_TABLE;
        int lastPos = 0;
        int pos;
        for (pos=0; pos<N; pos++) {
            char c = string.charAt(pos);
            if (c >= NE) continue;
            String escape = escapes[c];
            if (escape == null) continue;
            if (lastPos < pos) append(string, lastPos, pos-lastPos);
            lastPos = pos + 1;
            append(escape);
        }
        if (lastPos < pos) append(string, lastPos, pos-lastPos);
!!!6220599.java!!!	escapeAndAppendString(inout buf : char, in start : int, in len : int) : void
        final char NE = (char)ESCAPE_TABLE.length;
        final String[] escapes = ESCAPE_TABLE;
        int end = start+len;
        int lastPos = start;
        int pos;
        for (pos=start; pos<end; pos++) {
            char c = buf[pos];
            if (c >= NE) continue;
            String escape = escapes[c];
            if (escape == null) continue;
            if (lastPos < pos) append(buf, lastPos, pos-lastPos);
            lastPos = pos + 1;
            append(escape);
        }
        if (lastPos < pos) append(buf, lastPos, pos-lastPos);
!!!6220727.java!!!	attribute(inout namespace : String, inout name : String, inout value : String) : XmlSerializer
        append(' ');
        if (namespace != null) {
            append(namespace);
            append(':');
        }
        append(name);
        append("=\"");

        escapeAndAppendString(value);
        append('"');
        mLineStart = false;
        return this;
!!!6220855.java!!!	cdsect(inout text : String) : void
        throw new UnsupportedOperationException();
!!!6220983.java!!!	comment(inout text : String) : void
        throw new UnsupportedOperationException();
!!!6221111.java!!!	docdecl(inout text : String) : void
        throw new UnsupportedOperationException();
!!!6221239.java!!!	endDocument() : void
        flush();
!!!6221367.java!!!	endTag(inout namespace : String, inout name : String) : XmlSerializer
        mNesting--;
        if (mInTag) {
            append(" />\n");
        } else {
            if (mIndent && mLineStart) {
                appendIndent(mNesting);
            }
            append("</");
            if (namespace != null) {
                append(namespace);
                append(':');
            }
            append(name);
            append(">\n");
        }
        mLineStart = true;
        mInTag = false;
        return this;
!!!6221495.java!!!	entityRef(inout text : String) : void
        throw new UnsupportedOperationException();
!!!6221623.java!!!	flushBytes() : void
        int position;
        if ((position = mBytes.position()) > 0) {
            mBytes.flip();
            mOutputStream.write(mBytes.array(), 0, position);
            mBytes.clear();
        }
!!!6221751.java!!!	flush() : void
        //Log.i("PackageManager", "flush mPos=" + mPos);
        if (mPos > 0) {
            if (mOutputStream != null) {
                CharBuffer charBuffer = CharBuffer.wrap(mText, 0, mPos);
                CoderResult result = mCharset.encode(charBuffer, mBytes, true);
                while (true) {
                    if (result.isError()) {
                        throw new IOException(result.toString());
                    } else if (result.isOverflow()) {
                        flushBytes();
                        result = mCharset.encode(charBuffer, mBytes, true);
                        continue;
                    }
                    break;
                }
                flushBytes();
                mOutputStream.flush();
            } else {
                mWriter.write(mText, 0, mPos);
                mWriter.flush();
            }
            mPos = 0;
        }
!!!6221879.java!!!	getDepth() : int
        throw new UnsupportedOperationException();
!!!6222007.java!!!	getFeature(inout name : String) : boolean
        throw new UnsupportedOperationException();
!!!6222135.java!!!	getName() : String
        throw new UnsupportedOperationException();
!!!6222263.java!!!	getNamespace() : String
        throw new UnsupportedOperationException();
!!!6222391.java!!!	getPrefix(inout namespace : String, inout generatePrefix : boolean) : String
        throw new UnsupportedOperationException();
!!!6222519.java!!!	getProperty(inout name : String) : Object
        throw new UnsupportedOperationException();
!!!6222647.java!!!	ignorableWhitespace(inout text : String) : void
        throw new UnsupportedOperationException();
!!!6222775.java!!!	processingInstruction(inout text : String) : void
        throw new UnsupportedOperationException();
!!!6222903.java!!!	setFeature(inout name : String, inout state : boolean) : void
        if (name.equals("http://xmlpull.org/v1/doc/features.html#indent-output")) {
            mIndent = true;
            return;
        }
        throw new UnsupportedOperationException();
!!!6223031.java!!!	setOutput(inout os : OutputStream, inout encoding : String) : void
        if (os == null)
            throw new IllegalArgumentException();
        if (true) {
            try {
                mCharset = Charset.forName(encoding).newEncoder()
                        .onMalformedInput(CodingErrorAction.REPLACE)
                        .onUnmappableCharacter(CodingErrorAction.REPLACE);
            } catch (IllegalCharsetNameException e) {
                throw (UnsupportedEncodingException) (new UnsupportedEncodingException(
                        encoding).initCause(e));
            } catch (UnsupportedCharsetException e) {
                throw (UnsupportedEncodingException) (new UnsupportedEncodingException(
                        encoding).initCause(e));
            }
            mOutputStream = os;
        } else {
            setOutput(
                encoding == null
                    ? new OutputStreamWriter(os)
                    : new OutputStreamWriter(os, encoding));
        }
!!!6223159.java!!!	setOutput(inout writer : Writer) : void
        mWriter = writer;
!!!6223287.java!!!	setPrefix(inout prefix : String, inout namespace : String) : void
        throw new UnsupportedOperationException();
!!!6223415.java!!!	setProperty(inout name : String, inout value : Object) : void
        throw new UnsupportedOperationException();
!!!6223543.java!!!	startDocument(inout encoding : String, inout standalone : Boolean) : void
        append("<?xml version='1.0' encoding='utf-8' standalone='"
                + (standalone ? "yes" : "no") + "' ?>\n");
        mLineStart = true;
!!!6223671.java!!!	startTag(inout namespace : String, inout name : String) : XmlSerializer
        if (mInTag) {
            append(">\n");
        }
        if (mIndent) {
            appendIndent(mNesting);
        }
        mNesting++;
        append('<');
        if (namespace != null) {
            append(namespace);
            append(':');
        }
        append(name);
        mInTag = true;
        mLineStart = false;
        return this;
!!!6223799.java!!!	text(inout buf : char, in start : int, in len : int) : XmlSerializer
        if (mInTag) {
            append(">");
            mInTag = false;
        }
        escapeAndAppendString(buf, start, len);
        if (mIndent) {
            mLineStart = buf[start+len-1] == '\n';
        }
        return this;
!!!6223927.java!!!	text(inout text : String) : XmlSerializer
        if (mInTag) {
            append(">");
            mInTag = false;
        }
        escapeAndAppendString(text);
        if (mIndent) {
            mLineStart = text.length() > 0 && (text.charAt(text.length()-1) == '\n');
        }
        return this;
