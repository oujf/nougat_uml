class InputConnectionWrapper
!!!6278839.java!!!	InputConnectionWrapper(inout inputContext : IInputContext, in missingMethods : int)
        mIInputContext = inputContext;
        mMissingMethods = missingMethods;
!!!6278967.java!!!	getTextAfterCursor(in length : int, in flags : int) : CharSequence
        CharSequence value = null;
        try {
            InputContextCallback callback = InputContextCallback.getInstance();
            mIInputContext.getTextAfterCursor(length, flags, callback.mSeq, callback);
            synchronized (callback) {
                callback.waitForResultLocked();
                if (callback.mHaveValue) {
                    value = callback.mTextAfterCursor;
                }
            }
            callback.dispose();
        } catch (RemoteException e) {
            return null;
        }
        return value;
!!!6279095.java!!!	getTextBeforeCursor(in length : int, in flags : int) : CharSequence
        CharSequence value = null;
        try {
            InputContextCallback callback = InputContextCallback.getInstance();
            mIInputContext.getTextBeforeCursor(length, flags, callback.mSeq, callback);
            synchronized (callback) {
                callback.waitForResultLocked();
                if (callback.mHaveValue) {
                    value = callback.mTextBeforeCursor;
                }
            }
            callback.dispose();
        } catch (RemoteException e) {
            return null;
        }
        return value;
!!!6279223.java!!!	getSelectedText(in flags : int) : CharSequence
        if (isMethodMissing(MissingMethodFlags.GET_SELECTED_TEXT)) {
            // This method is not implemented.
            return null;
        }
        CharSequence value = null;
        try {
            InputContextCallback callback = InputContextCallback.getInstance();
            mIInputContext.getSelectedText(flags, callback.mSeq, callback);
            synchronized (callback) {
                callback.waitForResultLocked();
                if (callback.mHaveValue) {
                    value = callback.mSelectedText;
                }
            }
            callback.dispose();
        } catch (RemoteException e) {
            return null;
        }
        return value;
!!!6279351.java!!!	getCursorCapsMode(in reqModes : int) : int
        int value = 0;
        try {
            InputContextCallback callback = InputContextCallback.getInstance();
            mIInputContext.getCursorCapsMode(reqModes, callback.mSeq, callback);
            synchronized (callback) {
                callback.waitForResultLocked();
                if (callback.mHaveValue) {
                    value = callback.mCursorCapsMode;
                }
            }
            callback.dispose();
        } catch (RemoteException e) {
            return 0;
        }
        return value;
!!!6279479.java!!!	getExtractedText(inout request : ExtractedTextRequest, in flags : int) : ExtractedText
        ExtractedText value = null;
        try {
            InputContextCallback callback = InputContextCallback.getInstance();
            mIInputContext.getExtractedText(request, flags, callback.mSeq, callback);
            synchronized (callback) {
                callback.waitForResultLocked();
                if (callback.mHaveValue) {
                    value = callback.mExtractedText;
                }
            }
            callback.dispose();
        } catch (RemoteException e) {
            return null;
        }
        return value;
!!!6279607.java!!!	commitText(inout text : CharSequence, in newCursorPosition : int) : boolean
        try {
            mIInputContext.commitText(text, newCursorPosition);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6279735.java!!!	commitCompletion(inout text : CompletionInfo) : boolean
        if (isMethodMissing(MissingMethodFlags.COMMIT_CORRECTION)) {
            // This method is not implemented.
            return false;
        }
        try {
            mIInputContext.commitCompletion(text);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6279863.java!!!	commitCorrection(inout correctionInfo : CorrectionInfo) : boolean
        try {
            mIInputContext.commitCorrection(correctionInfo);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6279991.java!!!	setSelection(in start : int, in end : int) : boolean
        try {
            mIInputContext.setSelection(start, end);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6280119.java!!!	performEditorAction(in actionCode : int) : boolean
        try {
            mIInputContext.performEditorAction(actionCode);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6280247.java!!!	performContextMenuAction(in id : int) : boolean
        try {
            mIInputContext.performContextMenuAction(id);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6280375.java!!!	setComposingRegion(in start : int, in end : int) : boolean
        if (isMethodMissing(MissingMethodFlags.SET_COMPOSING_REGION)) {
            // This method is not implemented.
            return false;
        }
        try {
            mIInputContext.setComposingRegion(start, end);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6280503.java!!!	setComposingText(inout text : CharSequence, in newCursorPosition : int) : boolean
        try {
            mIInputContext.setComposingText(text, newCursorPosition);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6280631.java!!!	finishComposingText() : boolean
        try {
            mIInputContext.finishComposingText();
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6280759.java!!!	beginBatchEdit() : boolean
        try {
            mIInputContext.beginBatchEdit();
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6280887.java!!!	endBatchEdit() : boolean
        try {
            mIInputContext.endBatchEdit();
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6281015.java!!!	sendKeyEvent(inout event : KeyEvent) : boolean
        try {
            mIInputContext.sendKeyEvent(event);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6281143.java!!!	clearMetaKeyStates(in states : int) : boolean
        try {
            mIInputContext.clearMetaKeyStates(states);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6281271.java!!!	deleteSurroundingText(in beforeLength : int, in afterLength : int) : boolean
        try {
            mIInputContext.deleteSurroundingText(beforeLength, afterLength);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6281399.java!!!	deleteSurroundingTextInCodePoints(in beforeLength : int, in afterLength : int) : boolean
        if (isMethodMissing(MissingMethodFlags.DELETE_SURROUNDING_TEXT_IN_CODE_POINTS)) {
            // This method is not implemented.
            return false;
        }
        try {
            mIInputContext.deleteSurroundingTextInCodePoints(beforeLength, afterLength);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6281527.java!!!	reportFullscreenMode(inout enabled : boolean) : boolean
        try {
            mIInputContext.reportFullscreenMode(enabled);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6281655.java!!!	performPrivateCommand(inout action : String, inout data : Bundle) : boolean
        try {
            mIInputContext.performPrivateCommand(action, data);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!6281783.java!!!	requestCursorUpdates(in cursorUpdateMode : int) : boolean
        boolean result = false;
        if (isMethodMissing(MissingMethodFlags.REQUEST_CURSOR_UPDATES)) {
            // This method is not implemented.
            return false;
        }
        try {
            InputContextCallback callback = InputContextCallback.getInstance();
            mIInputContext.requestUpdateCursorAnchorInfo(cursorUpdateMode, callback.mSeq, callback);
            synchronized (callback) {
                callback.waitForResultLocked();
                if (callback.mHaveValue) {
                    result = callback.mRequestUpdateCursorAnchorInfoResult;
                }
            }
            callback.dispose();
        } catch (RemoteException e) {
            return false;
        }
        return result;
!!!6281911.java!!!	getHandler() : Handler
        // Nothing should happen when called from input method.
        return null;
!!!6282039.java!!!	closeConnection() : void
        // Nothing should happen when called from input method.
!!!6282167.java!!!	isMethodMissing(in methodFlag : int) : boolean
        return (mMissingMethods & methodFlag) == methodFlag;
!!!6282295.java!!!	toString() : String
        return "InputConnectionWrapper{idHash=#"
                + Integer.toHexString(System.identityHashCode(this))
                + " mMissingMethods="
                + InputConnectionInspector.getMissingMethodFlagsAsString(mMissingMethods) + "}";
