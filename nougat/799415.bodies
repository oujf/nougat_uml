class StandardMenuPopup
!!!6333367.java!!!	StandardMenuPopup(inout context : Context, inout menu : MenuBuilder, inout anchorView : View, in popupStyleAttr : int, in popupStyleRes : int, inout overflowOnly : boolean)
        mContext = Preconditions.checkNotNull(context);
        mMenu = menu;
        mOverflowOnly = overflowOnly;
        final LayoutInflater inflater = LayoutInflater.from(context);
        mAdapter = new MenuAdapter(menu, inflater, mOverflowOnly);
        mPopupStyleAttr = popupStyleAttr;
        mPopupStyleRes = popupStyleRes;

        final Resources res = context.getResources();
        mPopupMaxWidth = Math.max(res.getDisplayMetrics().widthPixels / 2,
                res.getDimensionPixelSize(com.android.internal.R.dimen.config_prefDialogWidth));

        mAnchorView = anchorView;

        mPopup = new MenuPopupWindow(mContext, null, mPopupStyleAttr, mPopupStyleRes);

        // Present the menu using our context, not the menu builder's context.
        menu.addMenuPresenter(this, context);
!!!6333495.java!!!	setForceShowIcon(inout forceShow : boolean) : void
        mAdapter.setForceShowIcon(forceShow);
!!!6333623.java!!!	setGravity(in gravity : int) : void
        mDropDownGravity = gravity;
!!!6333751.java!!!	tryShow() : boolean
        if (isShowing()) {
            return true;
        }

        if (mWasDismissed || mAnchorView == null) {
            return false;
        }

        mShownAnchorView = mAnchorView;

        mPopup.setOnDismissListener(this);
        mPopup.setOnItemClickListener(this);
        mPopup.setAdapter(mAdapter);
        mPopup.setModal(true);

        final View anchor = mShownAnchorView;
        final boolean addGlobalListener = mTreeObserver == null;
        mTreeObserver = anchor.getViewTreeObserver(); // Refresh to latest
        if (addGlobalListener) {
            mTreeObserver.addOnGlobalLayoutListener(mGlobalLayoutListener);
        }
        anchor.addOnAttachStateChangeListener(mAttachStateChangeListener);
        mPopup.setAnchorView(anchor);
        mPopup.setDropDownGravity(mDropDownGravity);

        if (!mHasContentWidth) {
            mContentWidth = measureIndividualMenuWidth(mAdapter, null, mContext, mPopupMaxWidth);
            mHasContentWidth = true;
        }

        mPopup.setContentWidth(mContentWidth);
        mPopup.setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);
        mPopup.setEpicenterBounds(getEpicenterBounds());
        mPopup.show();

        ListView listView = mPopup.getListView();
        listView.setOnKeyListener(this);

        if (mShowTitle && mMenu.getHeaderTitle() != null) {
            FrameLayout titleItemView =
                    (FrameLayout) LayoutInflater.from(mContext).inflate(
                            com.android.internal.R.layout.popup_menu_header_item_layout,
                            listView,
                            false);
            TextView titleView = (TextView) titleItemView.findViewById(
                    com.android.internal.R.id.title);
            if (titleView != null) {
                titleView.setText(mMenu.getHeaderTitle());
            }
            titleItemView.setEnabled(false);
            listView.addHeaderView(titleItemView, null, false);

            // Update to show the title.
            mPopup.show();
        }
        return true;
!!!6333879.java!!!	show() : void
        if (!tryShow()) {
            throw new IllegalStateException("StandardMenuPopup cannot be used without an anchor");
        }
!!!6334007.java!!!	dismiss() : void
        if (isShowing()) {
            mPopup.dismiss();
        }
!!!6334135.java!!!	addMenu(inout menu : MenuBuilder) : void
        // No-op: standard implementation has only one menu which is set in the constructor.
!!!6334263.java!!!	isShowing() : boolean
        return !mWasDismissed && mPopup.isShowing();
!!!6334391.java!!!	onDismiss() : void
        mWasDismissed = true;
        mMenu.close();

        if (mTreeObserver != null) {
            if (!mTreeObserver.isAlive()) mTreeObserver = mShownAnchorView.getViewTreeObserver();
            mTreeObserver.removeGlobalOnLayoutListener(mGlobalLayoutListener);
            mTreeObserver = null;
        }
        mShownAnchorView.removeOnAttachStateChangeListener(mAttachStateChangeListener);

        if (mOnDismissListener != null) {
            mOnDismissListener.onDismiss();
        }
!!!6334519.java!!!	updateMenuView(inout cleared : boolean) : void
        mHasContentWidth = false;

        if (mAdapter != null) {
            mAdapter.notifyDataSetChanged();
        }
!!!6334647.java!!!	setCallback(inout cb : MenuPresenter::Callback) : void
        mPresenterCallback = cb;
!!!6334775.java!!!	onSubMenuSelected(inout subMenu : SubMenuBuilder) : boolean
        if (subMenu.hasVisibleItems()) {
            final MenuPopupHelper subPopup = new MenuPopupHelper(mContext, subMenu,
                    mShownAnchorView, mOverflowOnly, mPopupStyleAttr, mPopupStyleRes);
            subPopup.setPresenterCallback(mPresenterCallback);
            subPopup.setForceShowIcon(MenuPopup.shouldPreserveIconSpacing(subMenu));

            // Pass responsibility for handling onDismiss to the submenu.
            subPopup.setOnDismissListener(mOnDismissListener);
            mOnDismissListener = null;

            // Close this menu popup to make room for the submenu popup.
            mMenu.close(false /* closeAllMenus */);

            // Show the new sub-menu popup at the same location as this popup.
            final int horizontalOffset = mPopup.getHorizontalOffset();
            final int verticalOffset = mPopup.getVerticalOffset();
            if (subPopup.tryShow(horizontalOffset, verticalOffset)) {
                if (mPresenterCallback != null) {
                    mPresenterCallback.onOpenSubMenu(subMenu);
                }
                return true;
            }
        }
        return false;
!!!6334903.java!!!	onCloseMenu(inout menu : MenuBuilder, inout allMenusAreClosing : boolean) : void
        // Only care about the (sub)menu we're presenting.
        if (menu != mMenu) return;

        dismiss();
        if (mPresenterCallback != null) {
            mPresenterCallback.onCloseMenu(menu, allMenusAreClosing);
        }
!!!6335031.java!!!	flagActionItems() : boolean
        return false;
!!!6335159.java!!!	onSaveInstanceState() : Parcelable
        return null;
!!!6335415.java!!!	setAnchorView(inout anchor : View) : void
        mAnchorView = anchor;
!!!6335543.java!!!	onKey(inout v : View, in keyCode : int, inout event : KeyEvent) : boolean
        if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_MENU) {
            dismiss();
            return true;
        }
        return false;
!!!6335671.java!!!	setOnDismissListener(inout listener : PopupWindow::OnDismissListener) : void
        mOnDismissListener = listener;
!!!6335799.java!!!	getListView() : ListView
        return mPopup.getListView();
!!!6335927.java!!!	setHorizontalOffset(in x : int) : void
        mPopup.setHorizontalOffset(x);
!!!6336055.java!!!	setVerticalOffset(in y : int) : void
        mPopup.setVerticalOffset(y);
!!!6336183.java!!!	setShowTitle(inout showTitle : boolean) : void
        mShowTitle = showTitle;
