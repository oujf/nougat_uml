class ClampedScroller
!!!6377655.java!!!	ClampedScroller()
            mStartTime = Long.MIN_VALUE;
            mStopTime = -1;
            mDeltaTime = 0;
            mDeltaX = 0;
            mDeltaY = 0;
!!!6377783.java!!!	setRampUpDuration(in durationMillis : int) : void
            mRampUpDuration = durationMillis;
!!!6377911.java!!!	setRampDownDuration(in durationMillis : int) : void
            mRampDownDuration = durationMillis;
!!!6378039.java!!!	start() : void
            mStartTime = AnimationUtils.currentAnimationTimeMillis();
            mStopTime = -1;
            mDeltaTime = mStartTime;
            mStopValue = 0.5f;
            mDeltaX = 0;
            mDeltaY = 0;
!!!6378167.java!!!	requestStop() : void
            final long currentTime = AnimationUtils.currentAnimationTimeMillis();
            mEffectiveRampDown = constrain((int) (currentTime - mStartTime), 0, mRampDownDuration);
            mStopValue = getValueAt(currentTime);
            mStopTime = currentTime;
!!!6378295.java!!!	isFinished() : boolean
            return mStopTime > 0
                    && AnimationUtils.currentAnimationTimeMillis() > mStopTime + mEffectiveRampDown;
!!!6378423.java!!!	getValueAt(in currentTime : long) : float
            if (currentTime < mStartTime) {
                return 0f;
            } else if (mStopTime < 0 || currentTime < mStopTime) {
                final long elapsedSinceStart = currentTime - mStartTime;
                return 0.5f * constrain(elapsedSinceStart / (float) mRampUpDuration, 0, 1);
            } else {
                final long elapsedSinceEnd = currentTime - mStopTime;
                return (1 - mStopValue) + mStopValue
                        * constrain(elapsedSinceEnd / (float) mEffectiveRampDown, 0, 1);
            }
!!!6378551.java!!!	interpolateValue(in value : float) : float
            return -4 * value * value + 4 * value;
!!!6378679.java!!!	computeScrollDelta() : void
            if (mDeltaTime == 0) {
                throw new RuntimeException("Cannot compute scroll delta before calling start()");
            }

            final long currentTime = AnimationUtils.currentAnimationTimeMillis();
            final float value = getValueAt(currentTime);
            final float scale = interpolateValue(value);
            final long elapsedSinceDelta = currentTime - mDeltaTime;

            mDeltaTime = currentTime;
            mDeltaX = (int) (elapsedSinceDelta * scale * mTargetVelocityX);
            mDeltaY = (int) (elapsedSinceDelta * scale * mTargetVelocityY);
!!!6378807.java!!!	setTargetVelocity(in x : float, in y : float) : void
            mTargetVelocityX = x;
            mTargetVelocityY = y;
!!!6378935.java!!!	getHorizontalDirection() : int
            return (int) (mTargetVelocityX / Math.abs(mTargetVelocityX));
!!!6379063.java!!!	getVerticalDirection() : int
            return (int) (mTargetVelocityY / Math.abs(mTargetVelocityY));
!!!6379191.java!!!	getDeltaX() : int
            return mDeltaX;
!!!6379319.java!!!	getDeltaY() : int
            return mDeltaY;
