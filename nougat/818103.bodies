class BandwidthTestUtil
!!!6539447.java!!!	parseIntValueFromFile(inout file : File) : int
        int value = 0;
        if (file.exists()) {
            try {
                FileInputStream fstream = new FileInputStream(file);
                DataInputStream in = new DataInputStream(fstream);
                BufferedReader br = new BufferedReader(new InputStreamReader(in));
                String strLine = br.readLine();
                if (strLine != null) {
                    value = Integer.parseInt(strLine);
                }
                // Close the input stream
                in.close();
            } catch (Exception e) {
                System.err.println("Error: " + e.getMessage());
            }
        }
        return value;
!!!6539575.java!!!	buildDownloadUrl(inout server : String, in size : int, inout deviceId : String, inout timestamp : String) : String
        String downloadUrl = server + "/download?size=" + size + "&device_id=" + deviceId +
                "&timestamp=" + timestamp;
        return downloadUrl;
!!!6539703.java!!!	DownloadFromUrl(inout targetUrl : String, inout file : File) : boolean
        try {
            URL url = new URL(targetUrl);
            Log.d(LOG_TAG, "Download begining");
            Log.d(LOG_TAG, "Download url:" + url);
            Log.d(LOG_TAG, "Downloaded file name:" + file.getAbsolutePath());
            URLConnection ucon = url.openConnection();
            InputStream is = ucon.getInputStream();
            BufferedInputStream bis = new BufferedInputStream(is);
            ByteArrayBuffer baf = new ByteArrayBuffer(50);
            int current = 0;
            while ((current = bis.read()) != -1) {
                baf.append((byte) current);
            }
            FileOutputStream fos = new FileOutputStream(file);
            fos.write(baf.toByteArray());
            fos.close();
        } catch (IOException e) {
            Log.d(LOG_TAG, "Failed to download file with error: " + e);
            return false;
        }
        return true;
!!!6539831.java!!!	postFileToServer(inout server : String, inout deviceId : String, inout timestamp : String, inout file : File) : boolean
        try {
            Log.d(LOG_TAG, "Uploading begining");
            HttpClient httpClient = new DefaultHttpClient();
            String uri = server;
            if (!uri.endsWith("/")) {
                uri += "/";
            }
            uri += "upload";
            Log.d(LOG_TAG, "Upload url:" + uri);
            HttpPost postRequest = new HttpPost(uri);
            Part[] parts = {
                    new StringPart("device_id", deviceId),
                    new StringPart("timestamp", timestamp),
                    new FilePart("file", file)
            };
            MultipartEntity reqEntity = new MultipartEntity(parts, postRequest.getParams());
            postRequest.setEntity(reqEntity);
            HttpResponse res = httpClient.execute(postRequest);
            res.getEntity().getContent().close();
        } catch (IOException e) {
            Log.e(LOG_TAG, "Could not upload file with error: " + e);
            return false;
        }
        return true;
