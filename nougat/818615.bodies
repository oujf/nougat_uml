class WifiManager
!!!35679671.java!!!	WifiManager(inout context : Context, inout service : IWifiManager, inout looper : Looper)
        mContext = context;
        mService = service;
        mLooper = looper;
        mTargetSdkVersion = context.getApplicationInfo().targetSdkVersion;
!!!35679799.java!!!	getConfiguredNetworks() : WifiConfiguration
        try {
            return mService.getConfiguredNetworks();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35679927.java!!!	getPrivilegedConfiguredNetworks() : WifiConfiguration
        try {
            return mService.getPrivilegedConfiguredNetworks();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35680055.java!!!	getConnectionStatistics() : WifiConnectionStatistics
        try {
            return mService.getConnectionStatistics();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35680183.java!!!	getMatchingWifiConfig(inout scanResult : ScanResult) : WifiConfiguration
        try {
            return mService.getMatchingWifiConfig(scanResult);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35680311.java!!!	addNetwork(inout config : WifiConfiguration) : int
        if (config == null) {
            return -1;
        }
        config.networkId = -1;
        return addOrUpdateNetwork(config);
!!!35680439.java!!!	updateNetwork(inout config : WifiConfiguration) : int
        if (config == null || config.networkId < 0) {
            return -1;
        }
        return addOrUpdateNetwork(config);
!!!35680567.java!!!	addOrUpdateNetwork(inout config : WifiConfiguration) : int
        try {
            return mService.addOrUpdateNetwork(config);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35680695.java!!!	addPasspointManagementObject(inout mo : String) : int
        try {
            return mService.addPasspointManagementObject(mo);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35680823.java!!!	modifyPasspointManagementObject(inout fqdn : String, inout mos : List<PasspointManagementObjectDefinition>) : int
        try {
            return mService.modifyPasspointManagementObject(fqdn, mos);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35680951.java!!!	queryPasspointIcon(in bssid : long, inout fileName : String) : void
        try {
            mService.queryPasspointIcon(bssid, fileName);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35681079.java!!!	matchProviderWithCurrentNetwork(inout fqdn : String) : int
        try {
            return mService.matchProviderWithCurrentNetwork(fqdn);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35681207.java!!!	deauthenticateNetwork(in holdoff : long, inout ess : boolean) : void
        try {
            mService.deauthenticateNetwork(holdoff, ess);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35681335.java!!!	removeNetwork(in netId : int) : boolean
        try {
            return mService.removeNetwork(netId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35681463.java!!!	enableNetwork(in netId : int, inout disableOthers : boolean) : boolean
        final boolean pin = disableOthers && mTargetSdkVersion < Build.VERSION_CODES.LOLLIPOP;
        if (pin) {
            NetworkRequest request = new NetworkRequest.Builder()
                    .clearCapabilities()
                    .addTransportType(NetworkCapabilities.TRANSPORT_WIFI)
                    .build();
            NetworkPinner.pin(mContext, request);
        }

        boolean success;
        try {
            success = mService.enableNetwork(netId, disableOthers);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }

        if (pin && !success) {
            NetworkPinner.unpin();
        }

        return success;
!!!35681591.java!!!	disableNetwork(in netId : int) : boolean
        try {
            return mService.disableNetwork(netId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35681719.java!!!	disconnect() : boolean
        try {
            mService.disconnect();
            return true;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35681847.java!!!	reconnect() : boolean
        try {
            mService.reconnect();
            return true;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35681975.java!!!	reassociate() : boolean
        try {
            mService.reassociate();
            return true;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35682103.java!!!	pingSupplicant() : boolean
        if (mService == null)
            return false;
        try {
            return mService.pingSupplicant();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35682231.java!!!	getSupportedFeatures() : int
        try {
            return mService.getSupportedFeatures();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35682359.java!!!	isFeatureSupported(in feature : int) : boolean
        return (getSupportedFeatures() & feature) == feature;
!!!35682487.java!!!	is5GHzBandSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_INFRA_5G);
!!!35682615.java!!!	isPasspointSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_PASSPOINT);
!!!35682743.java!!!	isP2pSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_P2P);
!!!35682871.java!!!	isPortableHotspotSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_MOBILE_HOTSPOT);
!!!35682999.java!!!	isWifiScannerSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_SCANNER);
!!!35683127.java!!!	isNanSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_NAN);
!!!35683255.java!!!	isDeviceToDeviceRttSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_D2D_RTT);
!!!35683383.java!!!	isDeviceToApRttSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_D2AP_RTT);
!!!35683511.java!!!	isPreferredNetworkOffloadSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_PNO);
!!!35683639.java!!!	isAdditionalStaSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_ADDITIONAL_STA);
!!!35683767.java!!!	isTdlsSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_TDLS);
!!!35683895.java!!!	isOffChannelTdlsSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_TDLS_OFFCHANNEL);
!!!35684023.java!!!	isEnhancedPowerReportingSupported() : boolean
        return isFeatureSupported(WIFI_FEATURE_LINK_LAYER_STATS);
!!!35684151.java!!!	getControllerActivityEnergyInfo(in updateType : int) : WifiActivityEnergyInfo
        if (mService == null) return null;
        try {
            synchronized(this) {
                return mService.reportActivityInfo();
            }
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35684279.java!!!	startScan() : boolean
        try {
            mService.startScan(null, null);
            return true;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35684407.java!!!	startScan(inout workSource : WorkSource) : boolean
        try {
            mService.startScan(null, workSource);
            return true;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35684535.java!!!	startLocationRestrictedScan(inout workSource : WorkSource) : boolean
        return false;
!!!35684663.java!!!	isBatchedScanSupported() : boolean
        return false;
!!!35684791.java!!!	getBatchedScanResults() : BatchedScanResult
        return null;
!!!35684919.java!!!	getWpsNfcConfigurationToken(in netId : int) : String
        try {
            return mService.getWpsNfcConfigurationToken(netId);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35685047.java!!!	getConnectionInfo() : WifiInfo
        try {
            return mService.getConnectionInfo();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35685175.java!!!	getScanResults() : ScanResult
        try {
            return mService.getScanResults(mContext.getOpPackageName());
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35685303.java!!!	isScanAlwaysAvailable() : boolean
        try {
            return mService.isScanAlwaysAvailable();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35685431.java!!!	saveConfiguration() : boolean
        try {
            return mService.saveConfiguration();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35685559.java!!!	setCountryCode(inout country : String, inout persist : boolean) : void
        try {
            mService.setCountryCode(country, persist);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35685687.java!!!	getCountryCode() : String
       try {
           String country = mService.getCountryCode();
           return country;
       } catch (RemoteException e) {
           throw e.rethrowFromSystemServer();
       }
!!!35685815.java!!!	setFrequencyBand(in band : int, inout persist : boolean) : void
        try {
            mService.setFrequencyBand(band, persist);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35685943.java!!!	getFrequencyBand() : int
        try {
            return mService.getFrequencyBand();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35686071.java!!!	isDualBandSupported() : boolean
        try {
            return mService.isDualBandSupported();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35686199.java!!!	getDhcpInfo() : DhcpInfo
        try {
            return mService.getDhcpInfo();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35686327.java!!!	setWifiEnabled(inout enabled : boolean) : boolean
        try {
            return mService.setWifiEnabled(enabled);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35686455.java!!!	getWifiState() : int
        try {
            return mService.getWifiEnabledState();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35686583.java!!!	isWifiEnabled() : boolean
        return getWifiState() == WIFI_STATE_ENABLED;
!!!35686711.java!!!	getTxPacketCount(inout listener : WifiManager::TxPacketCountListener) : void
        getChannel().sendMessage(RSSI_PKTCNT_FETCH, 0, putListener(listener));
!!!35686839.java!!!	calculateSignalLevel(in rssi : int, in numLevels : int) : int
        if (rssi <= MIN_RSSI) {
            return 0;
        } else if (rssi >= MAX_RSSI) {
            return numLevels - 1;
        } else {
            float inputRange = (MAX_RSSI - MIN_RSSI);
            float outputRange = (numLevels - 1);
            return (int)((float)(rssi - MIN_RSSI) * outputRange / inputRange);
        }
!!!35686967.java!!!	compareSignalLevel(in rssiA : int, in rssiB : int) : int
        return rssiA - rssiB;
!!!35687095.java!!!	setWifiApEnabled(inout wifiConfig : WifiConfiguration, inout enabled : boolean) : boolean
        try {
            mService.setWifiApEnabled(wifiConfig, enabled);
            return true;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35687223.java!!!	getWifiApState() : int
        try {
            return mService.getWifiApEnabledState();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35687351.java!!!	isWifiApEnabled() : boolean
        return getWifiApState() == WIFI_AP_STATE_ENABLED;
!!!35687479.java!!!	getWifiApConfiguration() : WifiConfiguration
        try {
            return mService.getWifiApConfiguration();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35687607.java!!!	buildWifiConfig(inout uriString : String, inout mimeType : String, inout data : byte) : WifiConfiguration
        try {
            return mService.buildWifiConfig(uriString, mimeType, data);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35687735.java!!!	setWifiApConfiguration(inout wifiConfig : WifiConfiguration) : boolean
        try {
            mService.setWifiApConfiguration(wifiConfig);
            return true;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35687863.java!!!	addToBlacklist(inout bssid : String) : boolean
        try {
            mService.addToBlacklist(bssid);
            return true;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35687991.java!!!	clearBlacklist() : boolean
        try {
            mService.clearBlacklist();
            return true;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35688119.java!!!	setTdlsEnabled(inout remoteIPAddress : InetAddress, inout enable : boolean) : void
        try {
            mService.enableTdls(remoteIPAddress.getHostAddress(), enable);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35688247.java!!!	setTdlsEnabledWithMacAddress(inout remoteMacAddress : String, inout enable : boolean) : void
        try {
            mService.enableTdlsWithMacAddress(remoteMacAddress, enable);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35689655.java!!!	putListener(inout listener : Object) : int
        if (listener == null) return INVALID_KEY;
        int key;
        synchronized (mListenerMapLock) {
            do {
                key = mListenerKey++;
            } while (key == INVALID_KEY);
            mListenerMap.put(key, listener);
        }
        return key;
!!!35689783.java!!!	removeListener(in key : int) : Object
        if (key == INVALID_KEY) return null;
        synchronized (mListenerMapLock) {
            Object listener = mListenerMap.get(key);
            mListenerMap.remove(key);
            return listener;
        }
!!!35689911.java!!!	getChannel() : AsyncChannel
        if (mAsyncChannel == null) {
            Messenger messenger = getWifiServiceMessenger();
            if (messenger == null) {
                throw new IllegalStateException(
                        "getWifiServiceMessenger() returned null!  This is invalid.");
            }

            mAsyncChannel = new AsyncChannel();
            mConnected = new CountDownLatch(1);

            Handler handler = new ServiceHandler(mLooper);
            mAsyncChannel.connect(mContext, handler, messenger);
            try {
                mConnected.await();
            } catch (InterruptedException e) {
                Log.e(TAG, "interrupted wait at init");
            }
        }
        return mAsyncChannel;
!!!35690039.java!!!	connect(inout config : WifiConfiguration, inout listener : WifiManager::ActionListener) : void
        if (config == null) throw new IllegalArgumentException("config cannot be null");
        // Use INVALID_NETWORK_ID for arg1 when passing a config object
        // arg1 is used to pass network id when the network already exists
        getChannel().sendMessage(CONNECT_NETWORK, WifiConfiguration.INVALID_NETWORK_ID,
                putListener(listener), config);
!!!35690167.java!!!	connect(in networkId : int, inout listener : WifiManager::ActionListener) : void
        if (networkId < 0) throw new IllegalArgumentException("Network id cannot be negative");
        getChannel().sendMessage(CONNECT_NETWORK, networkId, putListener(listener));
!!!35690295.java!!!	save(inout config : WifiConfiguration, inout listener : WifiManager::ActionListener) : void
        if (config == null) throw new IllegalArgumentException("config cannot be null");
        getChannel().sendMessage(SAVE_NETWORK, 0, putListener(listener), config);
!!!35690423.java!!!	forget(in netId : int, inout listener : WifiManager::ActionListener) : void
        if (netId < 0) throw new IllegalArgumentException("Network id cannot be negative");
        getChannel().sendMessage(FORGET_NETWORK, netId, putListener(listener));
!!!35690551.java!!!	disable(in netId : int, inout listener : WifiManager::ActionListener) : void
        if (netId < 0) throw new IllegalArgumentException("Network id cannot be negative");
        getChannel().sendMessage(DISABLE_NETWORK, netId, putListener(listener));
!!!35690679.java!!!	disableEphemeralNetwork(inout SSID : String) : void
        if (SSID == null) throw new IllegalArgumentException("SSID cannot be null");
        try {
            mService.disableEphemeralNetwork(SSID);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35690807.java!!!	startWps(inout config : WpsInfo, inout listener : WifiManager::WpsCallback) : void
        if (config == null) throw new IllegalArgumentException("config cannot be null");
        getChannel().sendMessage(START_WPS, 0, putListener(listener), config);
!!!35690935.java!!!	cancelWps(inout listener : WifiManager::WpsCallback) : void
        getChannel().sendMessage(CANCEL_WPS, 0, putListener(listener));
!!!35691063.java!!!	getWifiServiceMessenger() : Messenger
        try {
            return mService.getWifiServiceMessenger();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35691191.java!!!	getConfigFile() : String
        try {
            return mService.getConfigFile();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35692343.java!!!	createWifiLock(in lockType : int, inout tag : String) : WifiManager::WifiLock
        return new WifiLock(lockType, tag);
!!!35692471.java!!!	createWifiLock(inout tag : String) : WifiManager::WifiLock
        return new WifiLock(WIFI_MODE_FULL, tag);
!!!35692599.java!!!	createMulticastLock(inout tag : String) : WifiManager::MulticastLock
        return new MulticastLock(tag);
!!!35693623.java!!!	isMulticastEnabled() : boolean
        try {
            return mService.isMulticastEnabled();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35693751.java!!!	initializeMulticastFiltering() : boolean
        try {
            mService.initializeMulticastFiltering();
            return true;
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35693879.java!!!	finalize() : void
        try {
            if (mAsyncChannel != null) {
                mAsyncChannel.disconnect();
            }
        } finally {
            super.finalize();
        }
!!!35694007.java!!!	enableVerboseLogging(in verbose : int) : void
        try {
            mService.enableVerboseLogging(verbose);
        } catch (Exception e) {
            //ignore any failure here
            Log.e(TAG, "enableVerboseLogging " + e.toString());
        }
!!!35694135.java!!!	getVerboseLoggingLevel() : int
        try {
            return mService.getVerboseLoggingLevel();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35694263.java!!!	enableAggressiveHandover(in enabled : int) : void
        try {
            mService.enableAggressiveHandover(enabled);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35694391.java!!!	getAggressiveHandover() : int
        try {
            return mService.getAggressiveHandover();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35694519.java!!!	setAllowScansWithTraffic(in enabled : int) : void
        try {
            mService.setAllowScansWithTraffic(enabled);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35694647.java!!!	getAllowScansWithTraffic() : int
        try {
            return mService.getAllowScansWithTraffic();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35694775.java!!!	factoryReset() : void
        try {
            mService.factoryReset();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35694903.java!!!	getCurrentNetwork() : Network
        try {
            return mService.getCurrentNetwork();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35695031.java!!!	setEnableAutoJoinWhenAssociated(inout enabled : boolean) : boolean
        try {
            return mService.setEnableAutoJoinWhenAssociated(enabled);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35695159.java!!!	getEnableAutoJoinWhenAssociated() : boolean
        try {
            return mService.getEnableAutoJoinWhenAssociated();
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
!!!35695287.java!!!	enableWifiConnectivityManager(inout enabled : boolean) : void
        try {
            mService.enableWifiConnectivityManager(enabled);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
