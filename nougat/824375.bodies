class WifiConfigurationHelper
!!!6575671.java!!!	createOpenConfig(inout ssid : String) : WifiConfiguration
        WifiConfiguration config = createGenericConfig(ssid);

        config.allowedKeyManagement.set(KeyMgmt.NONE);
        return config;
!!!6575799.java!!!	createWepConfig(inout ssid : String, inout password : String) : WifiConfiguration
        WifiConfiguration config = createGenericConfig(ssid);

        if (isHex(password, 10) || isHex(password, 26) || isHex(password, 58)) {
            config.wepKeys[0] = password;
        } else {
            config.wepKeys[0] = quotedString(password);
        }

        config.allowedKeyManagement.set(KeyMgmt.NONE);
        config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
        config.allowedAuthAlgorithms.set(AuthAlgorithm.SHARED);
        return config;
!!!6575927.java!!!	createPskConfig(inout ssid : String, inout password : String) : WifiConfiguration
        WifiConfiguration config = createGenericConfig(ssid);

        if (isHex(password, 64)) {
            config.preSharedKey = password;
        } else {
            config.preSharedKey = quotedString(password);
        }
        config.allowedKeyManagement.set(KeyMgmt.WPA_PSK);
        return config;
!!!6576055.java!!!	createEapConfig(inout ssid : String, inout password : String, in eapMethod : int, inout phase2 : Integer, inout identity : String, inout anonymousIdentity : String, inout caCert : String, inout clientCert : String) : WifiConfiguration
        WifiConfiguration config = new WifiConfiguration();
        config.SSID = quotedString(ssid);

        config.allowedKeyManagement.set(KeyMgmt.WPA_EAP);
        config.allowedKeyManagement.set(KeyMgmt.IEEE8021X);

        // Set defaults
        if (phase2 == null) phase2 = WifiEnterpriseConfig.Phase2.NONE;
        if (identity == null) identity = "";
        if (anonymousIdentity == null) anonymousIdentity = "";
        if (caCert == null) caCert = "";
        if (clientCert == null) clientCert = "";

        config.enterpriseConfig.setPassword(password);
        config.enterpriseConfig.setEapMethod(eapMethod);
        config.enterpriseConfig.setPhase2Method(phase2);
        config.enterpriseConfig.setIdentity(identity);
        config.enterpriseConfig.setAnonymousIdentity(anonymousIdentity);
        config.enterpriseConfig.setCaCertificateAlias(caCert);
        config.enterpriseConfig.setClientCertificateAlias(clientCert);
        return config;
!!!6576183.java!!!	createGenericConfig(inout ssid : String) : WifiConfiguration
        WifiConfiguration config = new WifiConfiguration();
        config.SSID = quotedString(ssid);
        config.setIpAssignment(IpAssignment.DHCP);
        config.setProxySettings(ProxySettings.NONE);
        return config;
!!!6576311.java!!!	parseJson(inout in : String) : WifiConfiguration
        try {
            JSONArray jsonConfigs = new JSONArray(in);
            List<WifiConfiguration> wifiConfigs = new ArrayList<>(jsonConfigs.length());

            for (int i = 0; i < jsonConfigs.length(); i++) {
                JSONObject jsonConfig = jsonConfigs.getJSONObject(i);

                wifiConfigs.add(getWifiConfiguration(jsonConfig));
            }
            return wifiConfigs;
        } catch (JSONException e) {
            throw new IllegalArgumentException(e);
        }
!!!6576439.java!!!	getWifiConfiguration(inout jsonConfig : JSONObject) : WifiConfiguration
        String ssid = jsonConfig.getString("ssid");
        String password = null;
        WifiConfiguration config;

        int securityType = getSecurityType(jsonConfig.getString("security"));
        switch (securityType) {
            case NONE:
                config = createOpenConfig(ssid);
                break;
            case WEP:
                password = jsonConfig.getString("password");
                config = createWepConfig(ssid, password);
                break;
            case PSK:
                password = jsonConfig.getString("password");
                config = createPskConfig(ssid, password);
                break;
            case EAP:
                password = jsonConfig.getString("password");
                int eapMethod = getEapMethod(jsonConfig.getString("eap"));
                Integer phase2 = null;
                if (jsonConfig.has("phase2")) {
                    phase2 = getPhase2(jsonConfig.getString("phase2"));
                }
                String identity = null;
                if (jsonConfig.has("identity")) {
                    identity = jsonConfig.getString("identity");
                }
                String anonymousIdentity = null;
                if (jsonConfig.has("anonymous_identity")) {
                    anonymousIdentity = jsonConfig.getString("anonymous_identity");
                }
                String caCert = null;
                if (jsonConfig.has("ca_cert")) {
                    caCert = (jsonConfig.getString("ca_cert"));
                }
                String clientCert = null;
                if (jsonConfig.has("client_cert")) {
                    clientCert = jsonConfig.getString("client_cert");
                }
                config = createEapConfig(ssid, password, eapMethod, phase2, identity,
                        anonymousIdentity, caCert, clientCert);
                break;
            default:
                // Should never reach here as getSecurityType will already throw an exception
                throw new IllegalArgumentException();
        }

        if (jsonConfig.has("ip")) {
            StaticIpConfiguration staticIpConfig = new StaticIpConfiguration();

            InetAddress ipAddress = getInetAddress(jsonConfig.getString("ip"));
            int prefixLength = getPrefixLength(jsonConfig.getInt("prefix_length"));
            staticIpConfig.ipAddress = new LinkAddress(ipAddress, prefixLength);
            staticIpConfig.gateway = getInetAddress(jsonConfig.getString("gateway"));
            staticIpConfig.dnsServers.add(getInetAddress(jsonConfig.getString("dns1")));
            staticIpConfig.dnsServers.add(getInetAddress(jsonConfig.getString("dns2")));

            config.setIpAssignment(IpAssignment.STATIC);
            config.setStaticIpConfiguration(staticIpConfig);
        } else {
            config.setIpAssignment(IpAssignment.DHCP);
        }

        config.setProxySettings(ProxySettings.NONE);
        return config;
!!!6576567.java!!!	quotedString(inout s : String) : String
        return String.format("\"%s\"", s);
!!!6576695.java!!!	getSecurityType(inout security : String) : int
        if ("NONE".equalsIgnoreCase(security)) {
            return NONE;
        }
        if ("WEP".equalsIgnoreCase(security)) {
            return WEP;
        }
        if ("PSK".equalsIgnoreCase(security)) {
            return PSK;
        }
        if ("EAP".equalsIgnoreCase(security)) {
            return EAP;
        }
        throw new IllegalArgumentException("Security type must be one of NONE, WEP, PSK, or EAP");
!!!6576823.java!!!	getEapMethod(inout eapMethod : String) : int
        if ("TLS".equalsIgnoreCase(eapMethod)) {
            return WifiEnterpriseConfig.Eap.TLS;
        }
        if ("TTLS".equalsIgnoreCase(eapMethod)) {
            return WifiEnterpriseConfig.Eap.TTLS;
        }
        if ("PEAP".equalsIgnoreCase(eapMethod)) {
            return WifiEnterpriseConfig.Eap.PEAP;
        }
        throw new IllegalArgumentException("EAP method must be one of TLS, TTLS, or PEAP");
!!!6576951.java!!!	getPhase2(inout phase2 : String) : int
        if ("PAP".equalsIgnoreCase(phase2)) {
            return WifiEnterpriseConfig.Phase2.PAP;
        }
        if ("MSCHAP".equalsIgnoreCase(phase2)) {
            return WifiEnterpriseConfig.Phase2.MSCHAP;
        }
        if ("MSCHAPV2".equalsIgnoreCase(phase2)) {
            return WifiEnterpriseConfig.Phase2.MSCHAPV2;
        }
        if ("GTC".equalsIgnoreCase(phase2)) {
            return WifiEnterpriseConfig.Phase2.GTC;
        }
        throw new IllegalArgumentException("Phase2 must be one of PAP, MSCHAP, MSCHAPV2, or GTC");
!!!6577079.java!!!	getInetAddress(inout ipAddress : String) : InetAddress
        if (!InetAddress.isNumeric(ipAddress)) {
            throw new IllegalArgumentException(
                    String.format("IP address %s is not numeric", ipAddress));
        }

        try {
            return InetAddress.getByName(ipAddress);
        } catch (UnknownHostException e) {
            throw new IllegalArgumentException(
                    String.format("IP address %s could not be resolved", ipAddress));
        }
!!!6577207.java!!!	getPrefixLength(in prefixLength : int) : int
        if (prefixLength < 0 || prefixLength > 32) {
            throw new IllegalArgumentException("Prefix length cannot be less than 0 or more than 32");
        }
        return prefixLength;
!!!6577335.java!!!	isHex(inout input : String, in length : int) : boolean
        if (input == null || length < 0) {
            return false;
        }
        return input.matches(String.format("[0-9A-Fa-f]{%d}", length));
