class WifiAssociationTest
!!!6578999.java!!!	WifiAssociationTest()
        super(WifiAssociationTest.class.getSimpleName());
!!!6579127.java!!!	testWifiAssociation() : void
        WifiAssociationTestRunner runner = (WifiAssociationTestRunner) getInstrumentation();
        Bundle arguments = runner.getArguments();

        String ssid = arguments.getString("ssid");
        assertNotNull("ssid is empty", ssid);

        String securityTypeStr = arguments.getString("security-type");
        assertNotNull("security-type is empty", securityTypeStr);
        SecurityType securityType = SecurityType.valueOf(securityTypeStr);

        String password = arguments.getString("password");

        String freqStr = arguments.getString("frequency-band");
        if (freqStr != null) {
            setFrequencyBand(freqStr);
        }

        assertTrue("enable Wifi failed", enableWifi());
        WifiInfo wi = mWifiManager.getConnectionInfo();
        logv("%s", wi);
        assertNotNull("no active wifi info", wi);

        WifiConfiguration config = getConfig(ssid, securityType, password);

        logv("Network config: %s", config.toString());
        connectToWifi(config);
!!!6579255.java!!!	setFrequencyBand(inout frequencyBandStr : String) : void
        int frequencyBand = -1;
        if ("2.4".equals(frequencyBandStr)) {
            frequencyBand = WifiManager.WIFI_FREQUENCY_BAND_2GHZ;
        } else if ("5.0".equals(frequencyBandStr)) {
            frequencyBand = WifiManager.WIFI_FREQUENCY_BAND_5GHZ;
        } else if ("auto".equals(frequencyBandStr)) {
            frequencyBand = WifiManager.WIFI_FREQUENCY_BAND_AUTO;
        } else {
            fail("Invalid frequency-band");
        }
        if (mWifiManager.getFrequencyBand() != frequencyBand) {
            logv("Set frequency band to %s", frequencyBandStr);
            mWifiManager.setFrequencyBand(frequencyBand, true);
        }
        assertEquals("Specified frequency band does not match operational band",
                frequencyBand, mWifiManager.getFrequencyBand());
!!!6579383.java!!!	getConfig(inout ssid : String, inout securityType : WifiAssociationTest::SecurityType, inout password : String) : WifiConfiguration
        logv("Security type is %s", securityType.toString());

        WifiConfiguration config = null;
        switch (securityType) {
            case OPEN:
                config = WifiConfigurationHelper.createOpenConfig(ssid);
                break;
            case WEP64:
                assertNotNull("password is empty", password);
                // always use hex pair for WEP-40
                assertTrue(WifiConfigurationHelper.isHex(password, 10));
                config = WifiConfigurationHelper.createWepConfig(ssid, password);
                config.allowedGroupCiphers.set(GroupCipher.WEP40);
                break;
            case WEP128:
                assertNotNull("password is empty", password);
                // always use hex pair for WEP-104
                assertTrue(WifiConfigurationHelper.isHex(password, 26));
                config = WifiConfigurationHelper.createWepConfig(ssid, password);
                config.allowedGroupCiphers.set(GroupCipher.WEP104);
                break;
            case WPA_TKIP:
                assertNotNull("password is empty", password);
                config = WifiConfigurationHelper.createPskConfig(ssid, password);
                config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
                config.allowedProtocols.set(Protocol.WPA);
                config.allowedPairwiseCiphers.set(PairwiseCipher.TKIP);
                config.allowedGroupCiphers.set(GroupCipher.TKIP);
                break;
            case WPA2_AES:
                assertNotNull("password is empty", password);
                config = WifiConfigurationHelper.createPskConfig(ssid, password);
                config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
                config.allowedProtocols.set(Protocol.RSN);
                config.allowedPairwiseCiphers.set(PairwiseCipher.CCMP);
                config.allowedGroupCiphers.set(GroupCipher.CCMP);
                break;
            default:
                fail("Not a valid security type: " + securityType);
                break;
        }
        return config;
