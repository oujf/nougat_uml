class ServiceTest
!!!6644535.java!!!	startExpectResult(inout service : Intent) : void
        startExpectResult(service, new Bundle());
!!!6644663.java!!!	startExpectResult(inout service : Intent, inout bundle : Bundle) : void
        bundle.putIBinder(REPORT_OBJ_NAME, mStartReceiver);
        boolean success = false;
        try {
            //Log.i("foo", "STATE_START_1");
            mStartState = STATE_START_1;
            getContext().startService(new Intent(service).putExtras(bundle));
            waitForResultOrThrow(5 * 1000, "service to start first time");
            //Log.i("foo", "STATE_START_2");
            mStartState = STATE_START_2;
            getContext().startService(new Intent(service).putExtras(bundle));
            waitForResultOrThrow(5 * 1000, "service to start second time");
            success = true;
        } finally {
            if (!success) {
                try {
                    getContext().stopService(service);
                } catch (Exception e) {
                    // eat
                }
            }
        }
        //Log.i("foo", "STATE_DESTROY");
        mStartState = STATE_DESTROY;
        getContext().stopService(service);
        waitForResultOrThrow(5 * 1000, "service to be destroyed");
!!!6644791.java!!!	startExpectNoPermission(inout service : Intent) : void
        try {
            getContext().startService(service);
            fail("Expected security exception when starting " + service);
        } catch (SecurityException e) {
            // expected
        }
!!!6644919.java!!!	bindExpectResult(inout service : Intent) : void
        TestConnection conn = new TestConnection(true, false);
        TestConnection conn2 = new TestConnection(false, false);
        boolean success = false;
        try {
            // Expect to see the TestConnection connected.
            mStartState = STATE_START_1;
            getContext().bindService(service, conn, 0);
            getContext().startService(service);
            waitForResultOrThrow(5 * 1000, "existing connection to receive service");

            // Expect to see the second TestConnection connected.
            getContext().bindService(service, conn2, 0);
            waitForResultOrThrow(5 * 1000, "new connection to receive service");

            getContext().unbindService(conn2);
            success = true;
        } finally {
            if (!success) {
                try {
                    getContext().stopService(service);
                    getContext().unbindService(conn);
                    getContext().unbindService(conn2);
                } catch (Exception e) {
                    // eat
                }
            }
        }

        // Expect to see the TestConnection disconnected.
        mStartState = STATE_DESTROY;
        getContext().stopService(service);
        waitForResultOrThrow(5 * 1000, "existing connection to lose service");

        getContext().unbindService(conn);

        conn = new TestConnection(true, true);
        success = false;
        try {
            // Expect to see the TestConnection connected.
            conn.setMonitor(true);
            mStartState = STATE_START_1;
            getContext().bindService(service, conn, 0);
            getContext().startService(service);
            waitForResultOrThrow(5 * 1000, "existing connection to receive service");

            success = true;
        } finally {
            if (!success) {
                try {
                    getContext().stopService(service);
                    getContext().unbindService(conn);
                } catch (Exception e) {
                    // eat
                }
            }
        }

        // Expect to see the service unbind and then destroyed.
        conn.setMonitor(false);
        mStartState = STATE_UNBIND;
        getContext().stopService(service);
        waitForResultOrThrow(5 * 1000, "existing connection to lose service");

        getContext().unbindService(conn);

        conn = new TestConnection(true, true);
        success = false;
        try {
            // Expect to see the TestConnection connected.
            conn.setMonitor(true);
            mStartState = STATE_START_1;
            getContext().bindService(service, conn, 0);
            getContext().startService(service);
            waitForResultOrThrow(5 * 1000, "existing connection to receive service");

            success = true;
        } finally {
            if (!success) {
                try {
                    getContext().stopService(service);
                    getContext().unbindService(conn);
                } catch (Exception e) {
                    // eat
                }
            }
        }

        // Expect to see the service unbind but not destroyed.
        conn.setMonitor(false);
        mStartState = STATE_UNBIND_ONLY;
        getContext().unbindService(conn);
        waitForResultOrThrow(5 * 1000, "existing connection to unbind service");

        // Expect to see the service rebound.
        mStartState = STATE_REBIND;
        getContext().bindService(service, conn, 0);
        waitForResultOrThrow(5 * 1000, "existing connection to rebind service");

        // Expect to see the service unbind and then destroyed.
        mStartState = STATE_UNBIND;
        getContext().stopService(service);
        waitForResultOrThrow(5 * 1000, "existing connection to lose service");

        getContext().unbindService(conn);
!!!6645047.java!!!	bindAutoExpectResult(inout service : Intent) : void
        TestConnection conn = new TestConnection(false, true);
        boolean success = false;
        try {
            conn.setMonitor(true);
            mStartState = STATE_START_1;
            getContext().bindService(
                    service, conn, Context.BIND_AUTO_CREATE);
            waitForResultOrThrow(5 * 1000, "connection to start and receive service");
            success = true;
        } finally {
            if (!success) {
                try {
                    getContext().unbindService(conn);
                } catch (Exception e) {
                    // eat
                }
            }
        }
        mStartState = STATE_UNBIND;
        getContext().unbindService(conn);
        waitForResultOrThrow(5 * 1000, "disconnecting from service");
!!!6645175.java!!!	bindExpectNoPermission(inout service : Intent) : void
        TestConnection conn = new TestConnection(false, false);
        try {
            getContext().bindService(service, conn, Context.BIND_AUTO_CREATE);
            fail("Expected security exception when binding " + service);
        } catch (SecurityException e) {
            // expected
        } finally {
            getContext().unbindService(conn);
        }
!!!6645303.java!!!	testLocalStartClass() : void
        startExpectResult(new Intent(getContext(), LocalService.class));
!!!6645431.java!!!	testLocalStartAction() : void
        startExpectResult(new Intent(SERVICE_LOCAL));
!!!6645559.java!!!	testLocalBindClass() : void
        bindExpectResult(new Intent(getContext(), LocalService.class));
!!!6645687.java!!!	testLocalBindAction() : void
        bindExpectResult(new Intent(SERVICE_LOCAL));
!!!6645815.java!!!	testLocalBindAutoClass() : void
        bindAutoExpectResult(new Intent(getContext(), LocalService.class));
!!!6645943.java!!!	testLocalBindAutoAction() : void
        bindAutoExpectResult(new Intent(SERVICE_LOCAL));
!!!6646071.java!!!	testLocalStartClassPermissionGranted() : void
        startExpectResult(new Intent(getContext(), LocalGrantedService.class));
!!!6646199.java!!!	testLocalStartActionPermissionGranted() : void
        startExpectResult(new Intent(SERVICE_LOCAL_GRANTED));
!!!6646327.java!!!	testLocalBindClassPermissionGranted() : void
        bindExpectResult(new Intent(getContext(), LocalGrantedService.class));
!!!6646455.java!!!	testLocalBindActionPermissionGranted() : void
        bindExpectResult(new Intent(SERVICE_LOCAL_GRANTED));
!!!6646583.java!!!	testLocalBindAutoClassPermissionGranted() : void
        bindAutoExpectResult(new Intent(getContext(), LocalGrantedService.class));
!!!6646711.java!!!	testLocalBindAutoActionPermissionGranted() : void
        bindAutoExpectResult(new Intent(SERVICE_LOCAL_GRANTED));
!!!6646839.java!!!	testLocalStartClassPermissionDenied() : void
        startExpectNoPermission(new Intent(getContext(), LocalDeniedService.class));
!!!6646967.java!!!	testLocalStartActionPermissionDenied() : void
        startExpectNoPermission(new Intent(SERVICE_LOCAL_DENIED));
!!!6647095.java!!!	testLocalBindClassPermissionDenied() : void
        bindExpectNoPermission(new Intent(getContext(), LocalDeniedService.class));
!!!6647223.java!!!	testLocalBindActionPermissionDenied() : void
        bindExpectNoPermission(new Intent(SERVICE_LOCAL_DENIED));
!!!6647351.java!!!	testLocalUnbindTwice() : void
        EmptyConnection conn = new EmptyConnection();
        getContext().bindService(
                new Intent(SERVICE_LOCAL_GRANTED), conn, 0);
        getContext().unbindService(conn);
        try {
            getContext().unbindService(conn);
            fail("No exception thrown on second unbind");
        } catch (IllegalArgumentException e) {
            //Log.i("foo", "Unbind exception", e);
        }
