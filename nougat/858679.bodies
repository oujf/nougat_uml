class NetworkScorerAppManagerTest
!!!6769079.java!!!	setUp() : void
        super.setUp();

        // Configuration needed to make mockito/dexcache work.
        System.setProperty("dexmaker.dexcache",
                getInstrumentation().getTargetContext().getCacheDir().getPath());
        ClassLoader newClassLoader = getInstrumentation().getClass().getClassLoader();
        Thread.currentThread().setContextClassLoader(newClassLoader);

        MockitoAnnotations.initMocks(this);
        Mockito.when(mMockContext.getPackageManager()).thenReturn(mMockPm);
!!!6769207.java!!!	testGetAllValidScorers() : void
        // Package 1 - Valid scorer.
        ResolveInfoHolder package1 = buildResolveInfo("package1", 1, true, true, false, false);

        // Package 2 - Receiver does not have BROADCAST_NETWORK_PRIVILEGED permission.
        ResolveInfoHolder package2 = buildResolveInfo("package2", 2, false, true, false, false);

        // Package 3 - App does not have SCORE_NETWORKS permission.
        ResolveInfoHolder package3 = buildResolveInfo("package3", 3, true, false, false, false);

        // Package 4 - Valid scorer w/ optional config activity.
        ResolveInfoHolder package4 = buildResolveInfo("package4", 4, true, true, true, false);

        // Package 5 - Valid scorer w/ optional service to bind to.
        ResolveInfoHolder package5 = buildResolveInfo("package5", 5, true, true, false, true);

        List<ResolveInfoHolder> scorers = new ArrayList<>();
        scorers.add(package1);
        scorers.add(package2);
        scorers.add(package3);
        scorers.add(package4);
        scorers.add(package5);
        setScorers(scorers);

        Iterator<NetworkScorerAppData> result =
                NetworkScorerAppManager.getAllValidScorers(mMockContext).iterator();

        assertTrue(result.hasNext());
        NetworkScorerAppData next = result.next();
        assertEquals("package1", next.mPackageName);
        assertEquals(1, next.mPackageUid);
        assertNull(next.mConfigurationActivityClassName);

        assertTrue(result.hasNext());
        next = result.next();
        assertEquals("package4", next.mPackageName);
        assertEquals(4, next.mPackageUid);
        assertEquals(".ConfigActivity", next.mConfigurationActivityClassName);

        assertTrue(result.hasNext());
        next = result.next();
        assertEquals("package5", next.mPackageName);
        assertEquals(5, next.mPackageUid);
        assertEquals(".ScoringService", next.mScoringServiceClassName);

        assertFalse(result.hasNext());
!!!6769335.java!!!	setScorers(inout scorers : List<ResolveInfoHolder>) : void
        List<ResolveInfo> receivers = new ArrayList<>();
        for (final ResolveInfoHolder scorer : scorers) {
            receivers.add(scorer.scorerResolveInfo);
            if (scorer.configActivityResolveInfo != null) {
                // This scorer has a config activity.
                Mockito.when(mMockPm.queryIntentActivities(
                        Mockito.argThat(new ArgumentMatcher<Intent>() {
                            @Override
                            public boolean matches(Object object) {
                                Intent intent = (Intent) object;
                                return NetworkScoreManager.ACTION_CUSTOM_ENABLE.equals(
                                        intent.getAction())
                                        && scorer.scorerResolveInfo.activityInfo.packageName.equals(
                                                intent.getPackage());
                            }
                        }), Mockito.eq(0))).thenReturn(
                                Collections.singletonList(scorer.configActivityResolveInfo));
            }

            if (scorer.serviceResolveInfo != null) {
                // This scorer has a service to bind to
                Mockito.when(mMockPm.resolveService(
                        Mockito.argThat(new ArgumentMatcher<Intent>() {
                            @Override
                            public boolean matches(Object object) {
                                Intent intent = (Intent) object;
                                return NetworkScoreManager.ACTION_SCORE_NETWORKS.equals(
                                        intent.getAction())
                                        && scorer.scorerResolveInfo.activityInfo.packageName.equals(
                                        intent.getPackage());
                            }
                        }), Mockito.eq(0))).thenReturn(scorer.serviceResolveInfo);
            }
        }

        Mockito.when(mMockPm.queryBroadcastReceiversAsUser(
                Mockito.argThat(new ArgumentMatcher<Intent>() {
                    @Override
                    public boolean matches(Object object) {
                        Intent intent = (Intent) object;
                        return NetworkScoreManager.ACTION_SCORE_NETWORKS.equals(intent.getAction());
                    }
                }), Mockito.eq(0), Mockito.eq(UserHandle.USER_SYSTEM)))
                .thenReturn(receivers);
!!!6769463.java!!!	buildResolveInfo(inout packageName : String, in packageUid : int, inout hasReceiverPermission : boolean, inout hasScorePermission : boolean, inout hasConfigActivity : boolean, inout hasServiceInfo : boolean) : NetworkScorerAppManagerTest::ResolveInfoHolder
        Mockito.when(mMockPm.checkPermission(permission.SCORE_NETWORKS, packageName))
                .thenReturn(hasScorePermission ?
                        PackageManager.PERMISSION_GRANTED : PackageManager.PERMISSION_DENIED);

        ResolveInfo resolveInfo = new ResolveInfo();
        resolveInfo.activityInfo = new ActivityInfo();
        resolveInfo.activityInfo.packageName = packageName;
        resolveInfo.activityInfo.applicationInfo = new ApplicationInfo();
        resolveInfo.activityInfo.applicationInfo.uid = packageUid;
        if (hasReceiverPermission) {
            resolveInfo.activityInfo.permission = permission.BROADCAST_NETWORK_PRIVILEGED;
        }

        ResolveInfo configActivityInfo = null;
        if (hasConfigActivity) {
            configActivityInfo = new ResolveInfo();
            configActivityInfo.activityInfo = new ActivityInfo();
            configActivityInfo.activityInfo.name = ".ConfigActivity";
        }

        ResolveInfo serviceInfo = null;
        if (hasServiceInfo) {
            serviceInfo = new ResolveInfo();
            serviceInfo.serviceInfo = new ServiceInfo();
            serviceInfo.serviceInfo.name = ".ScoringService";
        }

        return new ResolveInfoHolder(resolveInfo, configActivityInfo, serviceInfo);
