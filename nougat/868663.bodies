class BasePrintTest
!!!6839351.java!!!	getEnabledImes() : String
        List<String> imeList = new ArrayList<>();

        ParcelFileDescriptor pfd = getInstrumentation().getUiAutomation()
                .executeShellCommand(COMMAND_LIST_ENABLED_IME_COMPONENTS);
        try (BufferedReader reader = new BufferedReader(
                new InputStreamReader(new FileInputStream(pfd.getFileDescriptor())))) {

            String line;
            while ((line = reader.readLine()) != null) {
                imeList.add(line);
            }
        }

        String[] imeArray = new String[imeList.size()];
        imeList.toArray(imeArray);

        return imeArray;
!!!6839479.java!!!	disableImes() : void
        mEnabledImes = getEnabledImes();
        for (String ime : mEnabledImes) {
            String disableImeCommand = COMMAND_PREFIX_DISABLE_IME + ime;
            runShellCommand(getInstrumentation(), disableImeCommand);
        }
!!!6839607.java!!!	enableImes() : void
        for (String ime : mEnabledImes) {
            String enableImeCommand = COMMAND_PREFIX_ENABLE_IME + ime;
            runShellCommand(getInstrumentation(), enableImeCommand);
        }
        mEnabledImes = null;
!!!6839735.java!!!	runTest() : void
        // Do nothing if the device does not support printing.
        if (supportsPrinting()) {
            super.runTest();
        }
!!!6839863.java!!!	setUp() : void
        super.setUp();
        if (!supportsPrinting()) {
            return;
        }

        // Make sure we start with a clean slate.
        clearPrintSpoolerData();
        disableImes();

        // Workaround for dexmaker bug: https://code.google.com/p/dexmaker/issues/detail?id=2
        // Dexmaker is used by mockito.
        System.setProperty("dexmaker.dexcache", getInstrumentation()
                .getTargetContext().getCacheDir().getPath());

        // Set to US locale.
        Resources resources = getInstrumentation().getTargetContext().getResources();
        Configuration oldConfiguration = resources.getConfiguration();
        if (!oldConfiguration.getLocales().get(0).equals(Locale.US)) {
            mOldLocale = oldConfiguration.getLocales();
            DisplayMetrics displayMetrics = resources.getDisplayMetrics();
            Configuration newConfiguration = new Configuration(oldConfiguration);
            newConfiguration.setLocale(Locale.US);
            resources.updateConfiguration(newConfiguration, displayMetrics);
        }

        // Initialize the latches.
        mStartCallCounter = new CallCounter();
        mStartSessionCallCounter = new CallCounter();

        // Create the activity for the right locale.
        createActivity();
!!!6839991.java!!!	tearDown() : void
        if (!supportsPrinting()) {
            return;
        }

        // Done with the activity.
        getActivity().finish();
        enableImes();

        // Restore the locale if needed.
        if (mOldLocale != null) {
            Resources resources = getInstrumentation().getTargetContext().getResources();
            DisplayMetrics displayMetrics = resources.getDisplayMetrics();
            Configuration newConfiguration = new Configuration(resources.getConfiguration());
            newConfiguration.setLocales(mOldLocale);
            mOldLocale = null;
            resources.updateConfiguration(newConfiguration, displayMetrics);
        }

        // Make sure the spooler is cleaned, this also un-approves all services
        clearPrintSpoolerData();

        super.tearDown();
!!!6840119.java!!!	print(in adapter : PrintDocumentAdapter, in attributes : PrintAttributes) : PrintJob
        // Initiate printing as if coming from the app.
        getInstrumentation().runOnMainSync(new Runnable() {
            @Override
            public void run() {
                PrintManager printManager = (PrintManager) getActivity()
                        .getSystemService(Context.PRINT_SERVICE);
                mPrintJob = printManager.print("Print job", adapter, attributes);
            }
        });

        return mPrintJob;
!!!6840247.java!!!	onStartCalled() : void
        mStartCallCounter.call();
!!!6840375.java!!!	onPrinterDiscoverySessionStartCalled() : void
        mStartSessionCallCounter.call();
!!!6840503.java!!!	waitForPrinterDiscoverySessionStartCallbackCalled() : void
        waitForCallbackCallCount(mStartSessionCallCounter, 1,
                "Did not get expected call to onStartPrinterDiscoverySession.");
!!!6840631.java!!!	waitForStartAdapterCallbackCalled() : void
        waitForCallbackCallCount(mStartCallCounter, 1, "Did not get expected call to start.");
!!!6840759.java!!!	waitForCallbackCallCount(inout counter : BasePrintTest::CallCounter, in count : int, inout message : String) : void
        try {
            counter.waitForCount(count, OPERATION_TIMEOUT);
        } catch (TimeoutException te) {
            fail(message);
        }
!!!6840887.java!!!	getActivity() : PrintTestActivity
        return mActivity;
!!!6841015.java!!!	createActivity() : void
        mActivity = launchActivity(getInstrumentation().getTargetContext().getPackageName(),
                PrintTestActivity.class, null);
!!!6841143.java!!!	runShellCommand(inout instrumentation : Instrumentation, inout cmd : String) : String
        ParcelFileDescriptor pfd = instrumentation.getUiAutomation().executeShellCommand(cmd);
        byte[] buf = new byte[512];
        int bytesRead;
        FileInputStream fis = new ParcelFileDescriptor.AutoCloseInputStream(pfd);
        StringBuffer stdout = new StringBuffer();
        while ((bytesRead = fis.read(buf)) != -1) {
            stdout.append(new String(buf, 0, bytesRead));
        }
        fis.close();
        return stdout.toString();
!!!6841271.java!!!	clearPrintSpoolerData() : void
        assertTrue("failed to clear print spooler data",
                runShellCommand(getInstrumentation(), String.format(
                        "pm clear --user %d %s", CURRENT_USER_ID,
                        PrintManager.PRINT_SPOOLER_PACKAGE_NAME))
                        .contains(PM_CLEAR_SUCCESS_OUTPUT));
!!!6841399.java!!!	createMockPrinterDiscoverySessionCallbacks(inout onStartPrinterDiscovery : Answer<Void>, inout onStopPrinterDiscovery : Answer<Void>, inout onValidatePrinters : Answer<Void>, inout onStartPrinterStateTracking : Answer<Void>, inout onRequestCustomPrinterIcon : Answer<Void>, inout onStopPrinterStateTracking : Answer<Void>, inout onDestroy : Answer<Void>) : PrinterDiscoverySessionCallbacks
        PrinterDiscoverySessionCallbacks callbacks = mock(PrinterDiscoverySessionCallbacks.class);

        doCallRealMethod().when(callbacks).setSession(any(StubbablePrinterDiscoverySession.class));
        when(callbacks.getSession()).thenCallRealMethod();

        if (onStartPrinterDiscovery != null) {
            doAnswer(onStartPrinterDiscovery).when(callbacks).onStartPrinterDiscovery(
                    any(List.class));
        }
        if (onStopPrinterDiscovery != null) {
            doAnswer(onStopPrinterDiscovery).when(callbacks).onStopPrinterDiscovery();
        }
        if (onValidatePrinters != null) {
            doAnswer(onValidatePrinters).when(callbacks).onValidatePrinters(
                    any(List.class));
        }
        if (onStartPrinterStateTracking != null) {
            doAnswer(onStartPrinterStateTracking).when(callbacks).onStartPrinterStateTracking(
                    any(PrinterId.class));
        }
        if (onRequestCustomPrinterIcon != null) {
            doAnswer(onRequestCustomPrinterIcon).when(callbacks).onRequestCustomPrinterIcon(
                    any(PrinterId.class), any(CancellationSignal.class),
                    any(CustomPrinterIconCallback.class));
        }
        if (onStopPrinterStateTracking != null) {
            doAnswer(onStopPrinterStateTracking).when(callbacks).onStopPrinterStateTracking(
                    any(PrinterId.class));
        }
        if (onDestroy != null) {
            doAnswer(onDestroy).when(callbacks).onDestroy();
        }

        return callbacks;
!!!6841527.java!!!	createMockPrintServiceCallbacks(inout onCreatePrinterDiscoverySessionCallbacks : Answer<PrinterDiscoverySessionCallbacks>, inout onPrintJobQueued : Answer<Void>, inout onRequestCancelPrintJob : Answer<Void>) : PrintServiceCallbacks
        final PrintServiceCallbacks service = mock(PrintServiceCallbacks.class);

        doCallRealMethod().when(service).setService(any(PrintService.class));
        when(service.getService()).thenCallRealMethod();

        if (onCreatePrinterDiscoverySessionCallbacks != null) {
            doAnswer(onCreatePrinterDiscoverySessionCallbacks).when(service)
                    .onCreatePrinterDiscoverySessionCallbacks();
        }
        if (onPrintJobQueued != null) {
            doAnswer(onPrintJobQueued).when(service).onPrintJobQueued(any(PrintJob.class));
        }
        if (onRequestCancelPrintJob != null) {
            doAnswer(onRequestCancelPrintJob).when(service).onRequestCancelPrintJob(
                    any(PrintJob.class));
        }

        return service;
!!!6842039.java!!!	supportsPrinting() : boolean
        return getInstrumentation().getContext().getPackageManager()
                .hasSystemFeature(PackageManager.FEATURE_PRINTING);
