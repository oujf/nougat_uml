class Drag
!!!7015735.java!!!	sendLinearDrag(inout uiController : UiController, inout downMotion : DragAction::DownMotionPerformer, inout startCoordinates : float, inout endCoordinates : float, inout precision : float) : Status
            float[][] steps = interpolate(startCoordinates, endCoordinates);
            final int delayBetweenMovements = DRAG_DURATION / steps.length;

            MotionEvent downEvent = downMotion.perform(uiController, startCoordinates, precision);
            if (downEvent == null) {
                return Status.FAILURE;
            }

            try {
                for (int i = 0; i < steps.length; i++) {
                    if (!MotionEvents.sendMovement(uiController, downEvent, steps[i])) {
                        String logMessage = "Injection of move event as part of the drag failed. " +
                                "Sending cancel event.";
                        Log.e(TAG, logMessage);
                        MotionEvents.sendCancel(uiController, downEvent);
                        return Status.FAILURE;
                    }

                    long desiredTime = downEvent.getDownTime() + delayBetweenMovements * i;
                    long timeUntilDesired = desiredTime - SystemClock.uptimeMillis();
                    if (timeUntilDesired > 10) {
                        // If the wait time until the next event isn't long enough, skip the wait
                        // and execute the next event.
                        uiController.loopMainThreadForAtLeast(timeUntilDesired);
                    }
                }

                // Wait before sending up because some drag handling logic may discard move events
                // that has been sent immediately before the up event. e.g. HandleView.
                uiController.loopMainThreadForAtLeast(WAIT_BEFORE_SENDING_UP);

                if (!MotionEvents.sendUp(uiController, downEvent, endCoordinates)) {
                    String logMessage = "Injection of up event as part of the drag failed. " +
                            "Sending cancel event.";
                    Log.e(TAG, logMessage);
                    MotionEvents.sendCancel(uiController, downEvent);
                    return Status.FAILURE;
                }
            } finally {
                downEvent.recycle();
            }
            return Status.SUCCESS;
!!!7015863.java!!!	interpolate(inout start : float, inout end : float) : float
            float[][] res = new float[DRAG_STEP_COUNT][2];

            for (int i = 0; i < DRAG_STEP_COUNT; i++) {
                res[i][0] = start[0] + (end[0] - start[0]) * i / (DRAG_STEP_COUNT - 1f);
                res[i][1] = start[1] + (end[1] - start[1]) * i / (DRAG_STEP_COUNT - 1f);
            }

            return res;
!!!7015991.java!!!	performLongPress(inout uiController : UiController, inout coordinates : float, inout precision : float) : MotionEvent
            MotionEvent downEvent = MotionEvents.sendDown(
                    uiController, coordinates, precision)
                    .down;
            // Duration before a press turns into a long press.
            // Factor 1.5 is needed, otherwise a long press is not safely detected.
            // See android.test.TouchUtils longClickView
            long longPressTimeout = (long) (ViewConfiguration.getLongPressTimeout() * 1.5f);
            uiController.loopMainThreadForAtLeast(longPressTimeout);
            return downEvent;
!!!7016119.java!!!	performDoubleTap(inout uiController : UiController, inout coordinates : float, inout precision : float) : MotionEvent
            MotionEvent downEvent = MotionEvents.sendDown(
                    uiController, coordinates, precision)
                    .down;
            try {
                if (!MotionEvents.sendUp(uiController, downEvent)) {
                    String logMessage = "Injection of up event as part of the double tap " +
                            "failed. Sending cancel event.";
                    Log.d(TAG, logMessage);
                    MotionEvents.sendCancel(uiController, downEvent);
                    return null;
                }

                long doubleTapMinimumTimeout = ViewConfiguration.getDoubleTapMinTime();
                uiController.loopMainThreadForAtLeast(doubleTapMinimumTimeout);

                return MotionEvents.sendDown(uiController, coordinates, precision).down;
            } finally {
                downEvent.recycle();
            }
!!!7016247.java!!!	wrapUiController(inout uiController : UiController) : UiController
            return uiController;
