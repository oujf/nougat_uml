class RequestFocusTest
!!!7042999.java!!!	RequestFocusTest()
        super(RequestFocus.class);
!!!7043127.java!!!	setUp() : void
        super.setUp();

        final RequestFocus a = getActivity();
        mHandler = a.getHandler();
        mTopLeftButton = (Button) a.findViewById(R.id.topLeftButton);
        mBottomLeftButton = (Button) a.findViewById(R.id.bottomLeftButton);
        mTopRightButton = (Button) a.findViewById(R.id.topRightButton);
        mBottomRightButton = (Button) a.findViewById(R.id.bottomRightButton);
!!!7043255.java!!!	testSetUpConditions() : void
        assertNotNull(mHandler);
        assertNotNull(mTopLeftButton);
        assertNotNull(mTopRightButton);
        assertNotNull(mBottomLeftButton);
        assertNotNull(mBottomRightButton);
        assertTrue("requestFocus() should work from onCreate.", mBottomRightButton.hasFocus());
!!!7043383.java!!!	testPostedRequestFocus() : void
        mHandler.post(new Runnable() { public void run() {
            mBottomLeftButton.requestFocus();
        }});
        synchronized(this) {
            try {
                wait(500);
            } catch (InterruptedException e) {
                // Don't care.
            }
        }
        assertTrue("Focus should move to bottom left", mBottomLeftButton.hasFocus());
!!!7043511.java!!!	testWrongThreadRequestFocusFails() : void
        try {
            mTopRightButton.requestFocus();
            fail("requestFocus from wrong thread should raise exception.");
        } catch (AndroidRuntimeException e) {
            // Expected.  The actual exception is not public, so we can't catch it.
            assertEquals("android.view.ViewRootImpl$CalledFromWrongThreadException",
                         e.getClass().getName());
        }
!!!7043639.java!!!	testOnFocusChangeCallbackOrderWhenClearingFocusOfFirstFocusable() : void
        // Get the first focusable.
        Button clearingFocusButton = mTopLeftButton;
        Button gainingFocusButton = mTopLeftButton;

        // Make sure that the clearing focus View is the first focusable.
        View focusCandidate = clearingFocusButton.getRootView().getParent().focusSearch(null,
                View.FOCUS_FORWARD);
        assertSame("The clearing focus button is the first focusable.",
                clearingFocusButton, focusCandidate);
        assertSame("The gaining focus button is the first focusable.",
                gainingFocusButton, focusCandidate);

        // Focus the clearing focus button.
        clearingFocusButton.requestFocus();
        assertTrue(clearingFocusButton.hasFocus());

        // Register the invocation order checker.
        CombinedListeners mock = mock(CombinedListeners.class);
        clearingFocusButton.setOnFocusChangeListener(mock);
        gainingFocusButton.setOnFocusChangeListener(mock);
        clearingFocusButton.getViewTreeObserver().addOnGlobalFocusChangeListener(mock);

        // Try to clear focus.
        clearingFocusButton.clearFocus();

        // Check that no callback was invoked since focus did not move.
        InOrder inOrder = inOrder(mock);
        inOrder.verify(mock).onFocusChange(clearingFocusButton, false);
        inOrder.verify(mock).onGlobalFocusChanged(clearingFocusButton, gainingFocusButton);
        inOrder.verify(mock).onFocusChange(gainingFocusButton, true);
!!!7043767.java!!!	testOnFocusChangeCallbackOrderWhenClearingFocusOfNotFirstFocusable() : void
        Button clearingFocusButton = mTopRightButton;
        Button gainingFocusButton = mTopLeftButton;

        // Make sure that the clearing focus View is not the first focusable.
        View focusCandidate = clearingFocusButton.getRootView().getParent().focusSearch(null,
                View.FOCUS_FORWARD);
        assertNotSame("The clearing focus button is not the first focusable.",
                clearingFocusButton, focusCandidate);
        assertSame("The gaining focus button is the first focusable.",
                gainingFocusButton, focusCandidate);

        // Focus the clearing focus button.
        clearingFocusButton.requestFocus();
        assertTrue(clearingFocusButton.hasFocus());

        // Register the invocation order checker.
        CombinedListeners mock = mock(CombinedListeners.class);
        clearingFocusButton.setOnFocusChangeListener(mock);
        gainingFocusButton.setOnFocusChangeListener(mock);
        clearingFocusButton.getViewTreeObserver().addOnGlobalFocusChangeListener(mock);

        // Try to clear focus.
        clearingFocusButton.clearFocus();

        // Check that no callback was invoked since focus did not move.
        InOrder inOrder = inOrder(mock);
        inOrder.verify(mock).onFocusChange(clearingFocusButton, false);
        inOrder.verify(mock).onGlobalFocusChanged(clearingFocusButton, gainingFocusButton);
        inOrder.verify(mock).onFocusChange(gainingFocusButton, true);
