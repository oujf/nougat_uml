class ListManagedCursorTest
!!!7091639.java!!!	ListManagedCursorTest()
        super(ListManagedCursor.class);
!!!7091767.java!!!	setUp() : void
        super.setUp();

        mActivity = getActivity();
        mListView = getActivity().getListView();
!!!7091895.java!!!	testPreconditions() : void
        assertNotNull(mActivity);
        assertNotNull(mListView);

        assertEquals(0, mListView.getFirstVisiblePosition());
!!!7092023.java!!!	testKeyScrolling() : void
        Instrumentation inst = getInstrumentation();

        int firstVisiblePosition = arrowScroll(inst);

        inst.sendCharacterSync(KeyEvent.KEYCODE_BACK);
        inst.waitForIdleSync();

        assertTrue("List changed to touch mode", !mListView.isInTouchMode());
        assertTrue("List did not preserve scroll position",
                firstVisiblePosition == mListView.getFirstVisiblePosition());
!!!7092151.java!!!	testKeyScrollingToTouchMode() : void
        Instrumentation inst = getInstrumentation();

        int firstVisiblePosition = arrowScroll(inst);

        TouchUtils.dragQuarterScreenUp(this, getActivity());
        inst.sendCharacterSync(KeyEvent.KEYCODE_BACK);
        inst.waitForIdleSync();

        assertTrue("List did not change to touch mode", mListView.isInTouchMode());
        assertTrue("List did not preserve scroll position",
                firstVisiblePosition == mListView.getFirstVisiblePosition());
!!!7092279.java!!!	arrowScroll(inout inst : Instrumentation) : int
        int count = mListView.getChildCount();

        for (int i = 0; i < count * 2; i++) {
            inst.sendCharacterSync(KeyEvent.KEYCODE_DPAD_DOWN);
        }
        inst.waitForIdleSync();

        int firstVisiblePosition = mListView.getFirstVisiblePosition();
        assertTrue("Arrow scroll did not happen", firstVisiblePosition > 0);
        assertTrue("List still in touch mode", !mListView.isInTouchMode());

        inst.sendCharacterSync(KeyEvent.KEYCODE_DPAD_CENTER);
        inst.waitForIdleSync();

        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        return firstVisiblePosition;
