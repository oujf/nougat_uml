class ProgressReporterTest
!!!7171767.java!!!	setUp() : void
        super.setUp();
        r = new ProgressReporter(0);
!!!7171895.java!!!	assertProgress(in expected : int) : void
        assertEquals(expected, r.getProgress());
!!!7172023.java!!!	assertRange(in start : int, in len : int) : void
        final int[] range = r.getSegmentRange();
        assertEquals("start", start, range[0]);
        assertEquals("len", len, range[1]);
!!!7172151.java!!!	testBasic() : void
        assertProgress(0);

        r.setProgress(20);
        assertProgress(20);

        r.setProgress(-20);
        assertProgress(0);

        r.setProgress(1024);
        assertProgress(100);
!!!7172279.java!!!	testSegment() : void
        r.setProgress(20);
        assertProgress(20);

        final int[] lastRange = r.startSegment(40);
        {
            assertProgress(20);

            r.setProgress(50);
            assertProgress(40);
        }
        r.endSegment(lastRange);
        assertProgress(60);

        r.setProgress(80);
        assertProgress(80);
!!!7172407.java!!!	testSegmentOvershoot() : void
        r.setProgress(20);
        assertProgress(20);

        final int[] lastRange = r.startSegment(40);
        {
            r.setProgress(-100, 2);
            assertProgress(20);

            r.setProgress(1, 2);
            assertProgress(40);

            r.setProgress(100, 2);
            assertProgress(60);
        }
        r.endSegment(lastRange);
        assertProgress(60);
!!!7172535.java!!!	testSegmentNested() : void
        r.setProgress(20);
        assertProgress(20);
        assertRange(0, 100);

        final int[] lastRange = r.startSegment(40);
        assertRange(20, 40);
        {
            r.setProgress(50);
            assertProgress(40);

            final int[] lastRange2 = r.startSegment(25);
            assertRange(40, 10);
            {
                r.setProgress(0);
                assertProgress(40);

                r.setProgress(50);
                assertProgress(45);

                r.setProgress(100);
                assertProgress(50);
            }
            r.endSegment(lastRange2);
            assertProgress(50);
        }
        r.endSegment(lastRange);
        assertProgress(60);
