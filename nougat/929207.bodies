class DownloadFinishedListener
!!!7173943.java!!!	run() : void
            Looper.prepare();
            synchronized (this) {
                mLooper = Looper.myLooper();
                mHandler = new Handler();
                notifyAll();
            }
            Looper.loop();
!!!7174071.java!!!	onReceive(inout context : Context, inout intent : Intent) : void
            if (DownloadManager.ACTION_DOWNLOAD_COMPLETE.equals(intent.getAction())) {
                long id = intent.getExtras().getLong(DownloadManager.EXTRA_DOWNLOAD_ID);
                Log.i(LOG_TAG, "Received Notification for download: " + id);
                synchronized (this) {
                    if(!mFinishedDownloads.contains(id)) {
                        mFinishedDownloads.add(id);
                        notifyAll();
                    } else {
                        Log.i(LOG_TAG,
                              String.format("Notification for %d was already received", id));
                    }
                }
            }
!!!7174199.java!!!	getHandler() : Handler
            synchronized (this) {
                if (mHandler != null) return mHandler;
                while (mHandler == null) {
                    wait();
                }
                return mHandler;
            }
!!!7174327.java!!!	cancel() : void
            synchronized(this) {
                if (mLooper != null) {
                    mLooper.quit();
                }
            }
!!!7174455.java!!!	waitForDownloadToFinish(in id : long, in timeout : long) : boolean
            long startTime = SystemClock.uptimeMillis();
            synchronized (this) {
                while (!mFinishedDownloads.contains(id)) {
                    if (SystemClock.uptimeMillis() - startTime > timeout) {
                        Log.i(LOG_TAG, String.format("Timeout while waiting for %d to finish", id));
                        return false;
                    } else {
                        wait(timeout);
                    }
                }
                return true;
            }
!!!7174583.java!!!	waitForMultipleDownloadsToFinish(inout ids : Set<Long>, in timeout : long) : boolean
            long startTime = SystemClock.uptimeMillis();
            synchronized (this) {
                while (!mFinishedDownloads.containsAll(ids)) {
                    if (SystemClock.uptimeMillis() - startTime > timeout) {
                        Log.i(LOG_TAG, "Timeout waiting for multiple downloads to finish");
                        return false;
                    } else {
                        wait(timeout);
                    }
                }
                return true;
            }
