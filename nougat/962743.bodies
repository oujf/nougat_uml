class RemoteIntArray
!!!27679799.java!!!	RemoteIntArray(in size : int, inout clientWritable : boolean)
        mIntent.setComponent(new ComponentName(InstrumentationRegistry.getContext(),
                RemoteMemoryIntArrayService.class));
        synchronized (mLock) {
            if (mRemoteInstance == null) {
                bindLocked();
            }
            try {
                mRemoteInstance.create(size, clientWritable);
            } catch (RemoteException e) {
                throw new IOException(e);
            }
        }
!!!27679927.java!!!	peekInstance() : MemoryIntArray
        try {
            return mRemoteInstance.peekInstance();
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!27680055.java!!!	isWritable() : boolean
        try {
            return mRemoteInstance.isWritable();
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!27680183.java!!!	get(in index : int) : int
        try {
            return mRemoteInstance.get(index);
        } catch (RemoteException e) {
            throw new IOException(e);
        }
!!!27680311.java!!!	set(in index : int, in value : int) : void
        try {
            mRemoteInstance.set(index, value);
        } catch (RemoteException e) {
            throw new IOException(e);
        }
!!!27680439.java!!!	size() : int
        try {
            return mRemoteInstance.size();
        } catch (RemoteException e) {
            throw new IOException(e);
        }
!!!27680567.java!!!	close() : void
        try {
            mRemoteInstance.close();
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!27680695.java!!!	isClosed() : boolean
        try {
            return mRemoteInstance.isClosed();
        } catch (RemoteException e) {
            throw new RuntimeException(e);
        }
!!!27680823.java!!!	bindLocked() : void
        if (mRemoteInstance != null) {
            return;
        }

        InstrumentationRegistry.getContext().bindService(mIntent, this, Context.BIND_AUTO_CREATE);

        final long startMillis = SystemClock.uptimeMillis();
        while (true) {
            if (mRemoteInstance != null) {
                break;
            }
            final long elapsedMillis = SystemClock.uptimeMillis() - startMillis;
            final long remainingMillis = BIND_REMOTE_SERVICE_TIMEOUT - elapsedMillis;
            if (remainingMillis <= 0) {
                throw new TimeoutException("Cannot get spooler!");
            }
            try {
                mLock.wait(remainingMillis);
            } catch (InterruptedException ie) {
                    /* ignore */
            }
        }

        mLock.notifyAll();
!!!27680951.java!!!	destroy() : void
        synchronized (mLock) {
            if (mRemoteInstance == null) {
                return;
            }
            mRemoteInstance = null;
            InstrumentationRegistry.getContext().unbindService(this);
        }
!!!27681079.java!!!	onServiceConnected(inout name : ComponentName, inout service : IBinder) : void
        synchronized (mLock) {
            mRemoteInstance = android.util.IRemoteMemoryIntArray.Stub.asInterface(service);
            mLock.notifyAll();
        }
!!!27681207.java!!!	onServiceDisconnected(inout name : ComponentName) : void
        synchronized (mLock) {
            mRemoteInstance = null;
        }
