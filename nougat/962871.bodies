class RemoteMemoryIntArrayService
!!!27681335.java!!!	onBind(inout intent : Intent) : IBinder
        return new android.util.IRemoteMemoryIntArray.Stub() {

            @Override
            public void create(int size, boolean clientWritable) {
                synchronized (mLock) {
                    try {
                        mArray = new MemoryIntArray(size, clientWritable);
                    } catch (IOException e) {
                        throw new IllegalStateException(e);
                    }
                }
            }

            @Override
            public MemoryIntArray peekInstance() {
                synchronized (mLock) {
                    return mArray;
                }
            }

            @Override
            public boolean isWritable() {
                synchronized (mLock) {
                    return mArray.isWritable();
                }
            }

            @Override
            public int get(int index) {
                synchronized (mLock) {
                    try {
                        return mArray.get(index);
                    } catch (IOException e) {
                        throw new IllegalStateException(e);
                    }
                }
            }

            @Override
            public void set(int index, int value) {
                synchronized (mLock) {
                    try {
                        mArray.set(index, value);
                    } catch (IOException e) {
                        throw new IllegalStateException(e);
                    }
                }
            }

            @Override
            public int size() {
                synchronized (mLock) {
                    try {
                        return mArray.size();
                    } catch (IOException e) {
                        throw new IllegalStateException(e);
                    }
                }
            }

            @Override
            public void close() {
                synchronized (mLock) {
                    try {
                        mArray.close();
                    } catch (IOException e) {
                        throw new IllegalStateException(e);
                    }
                }
            }

            @Override
            public boolean isClosed() {
                synchronized (mLock) {
                    return mArray.isClosed();
                }
            }
        };
