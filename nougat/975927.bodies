class BitmapRegionDecoder
!!!27745335.java!!!	newInstance(inout data : byte, in offset : int, in length : int, inout isShareable : boolean) : BitmapRegionDecoder
        if ((offset | length) < 0 || data.length < offset + length) {
            throw new ArrayIndexOutOfBoundsException();
        }
        return nativeNewInstance(data, offset, length, isShareable);
!!!27745463.java!!!	newInstance(inout fd : FileDescriptor, inout isShareable : boolean) : BitmapRegionDecoder
        return nativeNewInstance(fd, isShareable);
!!!27745591.java!!!	newInstance(inout is : InputStream, inout isShareable : boolean) : BitmapRegionDecoder
        if (is instanceof AssetManager.AssetInputStream) {
            return nativeNewInstance(
                    ((AssetManager.AssetInputStream) is).getNativeAsset(),
                    isShareable);
        } else {
            // pass some temp storage down to the native code. 1024 is made up,
            // but should be large enough to avoid too many small calls back
            // into is.read(...).
            byte [] tempStorage = new byte[16 * 1024];
            return nativeNewInstance(is, tempStorage, isShareable);
        }
!!!27745719.java!!!	newInstance(inout pathName : String, inout isShareable : boolean) : BitmapRegionDecoder
        BitmapRegionDecoder decoder = null;
        InputStream stream = null;

        try {
            stream = new FileInputStream(pathName);
            decoder = newInstance(stream, isShareable);
        } finally {
            if (stream != null) {
                try {
                    stream.close();
                } catch (IOException e) {
                    // do nothing here
                }
            }
        }
        return decoder;
!!!27745847.java!!!	BitmapRegionDecoder(in decoder : long)
        mNativeBitmapRegionDecoder = decoder;
        mRecycled = false;
!!!27745975.java!!!	decodeRegion(inout rect : Rect, inout options : BitmapFactory::Options) : Bitmap
        synchronized (mNativeLock) {
            checkRecycled("decodeRegion called on recycled region decoder");
            if (rect.right <= 0 || rect.bottom <= 0 || rect.left >= getWidth()
                    || rect.top >= getHeight())
                throw new IllegalArgumentException("rectangle is outside the image");
            return nativeDecodeRegion(mNativeBitmapRegionDecoder, rect.left, rect.top,
                    rect.right - rect.left, rect.bottom - rect.top, options);
        }
!!!27746103.java!!!	getWidth() : int
        synchronized (mNativeLock) {
            checkRecycled("getWidth called on recycled region decoder");
            return nativeGetWidth(mNativeBitmapRegionDecoder);
        }
!!!27746231.java!!!	getHeight() : int
        synchronized (mNativeLock) {
            checkRecycled("getHeight called on recycled region decoder");
            return nativeGetHeight(mNativeBitmapRegionDecoder);
        }
!!!27746359.java!!!	recycle() : void
        synchronized (mNativeLock) {
            if (!mRecycled) {
                nativeClean(mNativeBitmapRegionDecoder);
                mRecycled = true;
            }
        }
!!!27746487.java!!!	isRecycled() : boolean
        return mRecycled;
!!!27746615.java!!!	checkRecycled(inout errorMessage : String) : void
        if (mRecycled) {
            throw new IllegalStateException(errorMessage);
        }
!!!27746743.java!!!	finalize() : void
        try {
            recycle();
        } finally {
            super.finalize();
        }
