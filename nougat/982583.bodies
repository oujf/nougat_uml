class DrawableWrapper
!!!27846071.java!!!	DrawableWrapper(inout state : DrawableWrapper::DrawableWrapperState, inout res : Resources)
        mState = state;

        updateLocalState(res);
!!!27846199.java!!!	DrawableWrapper(inout dr : Drawable)
        mState = null;
        mDrawable = dr;
!!!27846327.java!!!	updateLocalState(inout res : Resources) : void
        if (mState != null && mState.mDrawableState != null) {
            final Drawable dr = mState.mDrawableState.newDrawable(res);
            setDrawable(dr);
        }
!!!27846455.java!!!	setDrawable(inout dr : Drawable) : void
        if (mDrawable != null) {
            mDrawable.setCallback(null);
        }

        mDrawable = dr;

        if (dr != null) {
            dr.setCallback(this);

            // Only call setters for data that's stored in the base Drawable.
            dr.setVisible(isVisible(), true);
            dr.setState(getState());
            dr.setLevel(getLevel());
            dr.setBounds(getBounds());
            dr.setLayoutDirection(getLayoutDirection());

            if (mState != null) {
                mState.mDrawableState = dr.getConstantState();
            }
        }

        invalidateSelf();
!!!27846583.java!!!	getDrawable() : Drawable
        return mDrawable;
!!!27846711.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        super.inflate(r, parser, attrs, theme);

        final DrawableWrapperState state = mState;
        if (state == null) {
            return;
        }

        // The density may have changed since the last update. This will
        // apply scaling to any existing constant state properties.
        final int densityDpi = r.getDisplayMetrics().densityDpi;
        final int targetDensity = densityDpi == 0 ? DisplayMetrics.DENSITY_DEFAULT : densityDpi;
        state.setDensity(targetDensity);

        final TypedArray a = obtainAttributes(r, theme, attrs, R.styleable.DrawableWrapper);
        updateStateFromTypedArray(a);
        a.recycle();

        inflateChildDrawable(r, parser, attrs, theme);
!!!27846839.java!!!	applyTheme(inout t : Resources::Theme) : void
        super.applyTheme(t);

        // If we load the drawable later as part of updating from the typed
        // array, it will already be themed correctly. So, we can theme the
        // local drawable first.
        if (mDrawable != null && mDrawable.canApplyTheme()) {
            mDrawable.applyTheme(t);
        }

        final DrawableWrapperState state = mState;
        if (state == null) {
            return;
        }

        final int densityDpi = t.getResources().getDisplayMetrics().densityDpi;
        final int density = densityDpi == 0 ? DisplayMetrics.DENSITY_DEFAULT : densityDpi;
        state.setDensity(density);

        if (state.mThemeAttrs != null) {
            final TypedArray a = t.resolveAttributes(
                    state.mThemeAttrs, R.styleable.DrawableWrapper);
            updateStateFromTypedArray(a);
            a.recycle();
        }
!!!27846967.java!!!	updateStateFromTypedArray(inout a : TypedArray) : void
        final DrawableWrapperState state = mState;
        if (state == null) {
            return;
        }

        // Account for any configuration changes.
        state.mChangingConfigurations |= a.getChangingConfigurations();

        // Extract the theme attributes, if any.
        state.mThemeAttrs = a.extractThemeAttrs();

        if (a.hasValueOrEmpty(R.styleable.DrawableWrapper_drawable)) {
            setDrawable(a.getDrawable(R.styleable.DrawableWrapper_drawable));
        }
!!!27847095.java!!!	canApplyTheme() : boolean
        return (mState != null && mState.canApplyTheme()) || super.canApplyTheme();
!!!27847223.java!!!	invalidateDrawable(inout who : Drawable) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.invalidateDrawable(this);
        }
!!!27847351.java!!!	scheduleDrawable(inout who : Drawable, inout what : Runnable, in when : long) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.scheduleDrawable(this, what, when);
        }
!!!27847479.java!!!	unscheduleDrawable(inout who : Drawable, inout what : Runnable) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.unscheduleDrawable(this, what);
        }
!!!27847607.java!!!	draw(inout canvas : Canvas) : void
        if (mDrawable != null) {
            mDrawable.draw(canvas);
        }
!!!27847735.java!!!	getChangingConfigurations() : int
        return super.getChangingConfigurations()
                | (mState != null ? mState.getChangingConfigurations() : 0)
                | mDrawable.getChangingConfigurations();
!!!27847863.java!!!	getPadding(inout padding : Rect) : boolean
        return mDrawable != null && mDrawable.getPadding(padding);
!!!27847991.java!!!	getOpticalInsets() : Insets
        return mDrawable != null ? mDrawable.getOpticalInsets() : Insets.NONE;
!!!27848119.java!!!	setHotspot(in x : float, in y : float) : void
        if (mDrawable != null) {
            mDrawable.setHotspot(x, y);
        }
!!!27848247.java!!!	setHotspotBounds(in left : int, in top : int, in right : int, in bottom : int) : void
        if (mDrawable != null) {
            mDrawable.setHotspotBounds(left, top, right, bottom);
        }
!!!27848375.java!!!	getHotspotBounds(inout outRect : Rect) : void
        if (mDrawable != null) {
            mDrawable.getHotspotBounds(outRect);
        } else {
            outRect.set(getBounds());
        }
!!!27848503.java!!!	setVisible(inout visible : boolean, inout restart : boolean) : boolean
        final boolean superChanged = super.setVisible(visible, restart);
        final boolean changed = mDrawable != null && mDrawable.setVisible(visible, restart);
        return superChanged | changed;
!!!27848631.java!!!	setAlpha(in alpha : int) : void
        if (mDrawable != null) {
            mDrawable.setAlpha(alpha);
        }
!!!27848759.java!!!	getAlpha() : int
        return mDrawable != null ? mDrawable.getAlpha() : 255;
!!!27848887.java!!!	setColorFilter(inout colorFilter : ColorFilter) : void
        if (mDrawable != null) {
            mDrawable.setColorFilter(colorFilter);
        }
!!!27849015.java!!!	setTintList(inout tint : ColorStateList) : void
        if (mDrawable != null) {
            mDrawable.setTintList(tint);
        }
!!!27849143.java!!!	setTintMode(inout tintMode : PorterDuff::Mode) : void
        if (mDrawable != null) {
            mDrawable.setTintMode(tintMode);
        }
!!!27849271.java!!!	onLayoutDirectionChanged(in layoutDirection : int) : boolean
        return mDrawable != null && mDrawable.setLayoutDirection(layoutDirection);
!!!27849399.java!!!	getOpacity() : int
        return mDrawable != null ? mDrawable.getOpacity() : PixelFormat.TRANSPARENT;
!!!27849527.java!!!	isStateful() : boolean
        return mDrawable != null && mDrawable.isStateful();
!!!27849655.java!!!	onStateChange(inout state : int) : boolean
        if (mDrawable != null && mDrawable.isStateful()) {
            final boolean changed = mDrawable.setState(state);
            if (changed) {
                onBoundsChange(getBounds());
            }
            return changed;
        }
        return false;
!!!27849783.java!!!	onLevelChange(in level : int) : boolean
        return mDrawable != null && mDrawable.setLevel(level);
!!!27849911.java!!!	onBoundsChange(inout bounds : Rect) : void
        if (mDrawable != null) {
            mDrawable.setBounds(bounds);
        }
!!!27850039.java!!!	getIntrinsicWidth() : int
        return mDrawable != null ? mDrawable.getIntrinsicWidth() : -1;
!!!27850167.java!!!	getIntrinsicHeight() : int
        return mDrawable != null ? mDrawable.getIntrinsicHeight() : -1;
!!!27850295.java!!!	getOutline(inout outline : Outline) : void
        if (mDrawable != null) {
            mDrawable.getOutline(outline);
        } else {
            super.getOutline(outline);
        }
!!!27850423.java!!!	getConstantState() : Drawable::ConstantState
        if (mState != null && mState.canConstantState()) {
            mState.mChangingConfigurations = getChangingConfigurations();
            return mState;
        }
        return null;
!!!27850551.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            mState = mutateConstantState();
            if (mDrawable != null) {
                mDrawable.mutate();
            }
            if (mState != null) {
                mState.mDrawableState = mDrawable != null ? mDrawable.getConstantState() : null;
            }
            mMutated = true;
        }
        return this;
!!!27850679.java!!!	mutateConstantState() : DrawableWrapper::DrawableWrapperState
        return mState;
!!!27850807.java!!!	clearMutated() : void
        super.clearMutated();
        if (mDrawable != null) {
            mDrawable.clearMutated();
        }
        mMutated = false;
!!!27850935.java!!!	inflateChildDrawable(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        // Seek to the first child element.
        Drawable dr = null;
        int type;
        final int outerDepth = parser.getDepth();
        while ((type = parser.next()) != XmlPullParser.END_DOCUMENT
                && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
            if (type == XmlPullParser.START_TAG) {
                dr = Drawable.createFromXmlInner(r, parser, attrs, theme);
            }
        }

        if (dr != null) {
            setDrawable(dr);
        }
