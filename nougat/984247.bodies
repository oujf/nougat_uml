class AnimationDrawable
!!!27892791.java!!!	AnimationDrawable()
        this(null, null);
!!!27892919.java!!!	setVisible(inout visible : boolean, inout restart : boolean) : boolean
        final boolean changed = super.setVisible(visible, restart);
        if (visible) {
            if (restart || changed) {
                boolean startFromZero = restart || (!mRunning && !mAnimationState.mOneShot) ||
                        mCurFrame >= mAnimationState.getChildCount();
                setFrame(startFromZero ? 0 : mCurFrame, true, mAnimating);
            }
        } else {
            unscheduleSelf(this);
        }
        return changed;
!!!27893047.java!!!	start() : void
        mAnimating = true;

        if (!isRunning()) {
            // Start from 0th frame.
            setFrame(0, false, mAnimationState.getChildCount() > 1
                    || !mAnimationState.mOneShot);
        }
!!!27893175.java!!!	stop() : void
        mAnimating = false;

        if (isRunning()) {
            mCurFrame = 0;
            unscheduleSelf(this);
        }
!!!27893303.java!!!	isRunning() : boolean
        return mRunning;
!!!27893431.java!!!	run() : void
        nextFrame(false);
!!!27893559.java!!!	unscheduleSelf(inout what : Runnable) : void
        mRunning = false;
        super.unscheduleSelf(what);
!!!27893687.java!!!	getNumberOfFrames() : int
        return mAnimationState.getChildCount();
!!!27893815.java!!!	getFrame(in index : int) : Drawable
        return mAnimationState.getChild(index);
!!!27893943.java!!!	getDuration(in i : int) : int
        return mAnimationState.mDurations[i];
!!!27894071.java!!!	isOneShot() : boolean
        return mAnimationState.mOneShot;
!!!27894199.java!!!	setOneShot(inout oneShot : boolean) : void
        mAnimationState.mOneShot = oneShot;
!!!27894327.java!!!	addFrame(inout frame : Drawable, in duration : int) : void
        mAnimationState.addFrame(frame, duration);
        if (!mRunning) {
            setFrame(0, true, false);
        }
!!!27894455.java!!!	nextFrame(inout unschedule : boolean) : void
        int nextFrame = mCurFrame + 1;
        final int numFrames = mAnimationState.getChildCount();
        final boolean isLastFrame = mAnimationState.mOneShot && nextFrame >= (numFrames - 1);

        // Loop if necessary. One-shot animations should never hit this case.
        if (!mAnimationState.mOneShot && nextFrame >= numFrames) {
            nextFrame = 0;
        }

        setFrame(nextFrame, unschedule, !isLastFrame);
!!!27894583.java!!!	setFrame(in frame : int, inout unschedule : boolean, inout animate : boolean) : void
        if (frame >= mAnimationState.getChildCount()) {
            return;
        }
        mAnimating = animate;
        mCurFrame = frame;
        selectDrawable(frame);
        if (unschedule || animate) {
            unscheduleSelf(this);
        }
        if (animate) {
            // Unscheduling may have clobbered these values; restore them
            mCurFrame = frame;
            mRunning = true;
            scheduleSelf(this, SystemClock.uptimeMillis() + mAnimationState.mDurations[frame]);
        }
!!!27894711.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        final TypedArray a = obtainAttributes(r, theme, attrs, R.styleable.AnimationDrawable);
        super.inflateWithAttributes(r, parser, a, R.styleable.AnimationDrawable_visible);
        updateStateFromTypedArray(a);
        updateDensity(r);
        a.recycle();

        inflateChildElements(r, parser, attrs, theme);

        setFrame(0, true, false);
!!!27894839.java!!!	inflateChildElements(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        int type;

        final int innerDepth = parser.getDepth()+1;
        int depth;
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT
                && ((depth = parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {
            if (type != XmlPullParser.START_TAG) {
                continue;
            }

            if (depth > innerDepth || !parser.getName().equals("item")) {
                continue;
            }

            final TypedArray a = obtainAttributes(r, theme, attrs,
                    R.styleable.AnimationDrawableItem);

            final int duration = a.getInt(R.styleable.AnimationDrawableItem_duration, -1);
            if (duration < 0) {
                throw new XmlPullParserException(parser.getPositionDescription()
                        + ": <item> tag requires a 'duration' attribute");
            }

            Drawable dr = a.getDrawable(R.styleable.AnimationDrawableItem_drawable);

            a.recycle();

            if (dr == null) {
                while ((type=parser.next()) == XmlPullParser.TEXT) {
                    // Empty
                }
                if (type != XmlPullParser.START_TAG) {
                    throw new XmlPullParserException(parser.getPositionDescription()
                            + ": <item> tag requires a 'drawable' attribute or child tag"
                            + " defining a drawable");
                }
                dr = Drawable.createFromXmlInner(r, parser, attrs, theme);
            }

            mAnimationState.addFrame(dr, duration);
            if (dr != null) {
                dr.setCallback(this);
            }
        }
!!!27894967.java!!!	updateStateFromTypedArray(inout a : TypedArray) : void
        mAnimationState.mVariablePadding = a.getBoolean(
                R.styleable.AnimationDrawable_variablePadding, mAnimationState.mVariablePadding);

        mAnimationState.mOneShot = a.getBoolean(
                R.styleable.AnimationDrawable_oneshot, mAnimationState.mOneShot);
!!!27895095.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            mAnimationState.mutate();
            mMutated = true;
        }
        return this;
!!!27895223.java!!!	cloneConstantState() : AnimationDrawable::AnimationState
        return new AnimationState(mAnimationState, this, null);
!!!27895351.java!!!	clearMutated() : void
        super.clearMutated();
        mMutated = false;
!!!27896247.java!!!	setConstantState(inout state : DrawableContainer::DrawableContainerState) : void
        super.setConstantState(state);

        if (state instanceof AnimationState) {
            mAnimationState = (AnimationState) state;
        }
!!!27896375.java!!!	AnimationDrawable(inout state : AnimationDrawable::AnimationState, inout res : Resources)
        final AnimationState as = new AnimationState(state, this, res);
        setConstantState(as);
        if (state != null) {
            setFrame(0, true, false);
        }
