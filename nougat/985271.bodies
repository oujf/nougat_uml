class VGroup
!!!27991863.java!!!	getPropertyIndex(inout propertyName : String) : int
            if (sPropertyMap.containsKey(propertyName)) {
                return sPropertyMap.get(propertyName);
            } else {
                // property not found
                return -1;
            }
!!!27991991.java!!!	VGroup(inout copy : VectorDrawable::VGroup, inout targetsMap : ArrayMap)

            mIsStateful = copy.mIsStateful;
            mThemeAttrs = copy.mThemeAttrs;
            mGroupName = copy.mGroupName;
            mChangingConfigurations = copy.mChangingConfigurations;
            if (mGroupName != null) {
                targetsMap.put(mGroupName, this);
            }
            mNativePtr = nCreateGroup(copy.mNativePtr);

            final ArrayList<VObject> children = copy.mChildren;
            for (int i = 0; i < children.size(); i++) {
                final VObject copyChild = children.get(i);
                if (copyChild instanceof VGroup) {
                    final VGroup copyGroup = (VGroup) copyChild;
                    addChild(new VGroup(copyGroup, targetsMap));
                } else {
                    final VPath newPath;
                    if (copyChild instanceof VFullPath) {
                        newPath = new VFullPath((VFullPath) copyChild);
                    } else if (copyChild instanceof VClipPath) {
                        newPath = new VClipPath((VClipPath) copyChild);
                    } else {
                        throw new IllegalStateException("Unknown object in the tree!");
                    }
                    addChild(newPath);
                    if (newPath.mPathName != null) {
                        targetsMap.put(newPath.mPathName, newPath);
                    }
                }
            }
!!!27992119.java!!!	VGroup()
            mNativePtr = nCreateGroup();
!!!27992247.java!!!	getGroupName() : String
            return mGroupName;
!!!27992375.java!!!	addChild(inout child : VectorDrawable::VObject) : void
            nAddChild(mNativePtr, child.getNativePtr());
            mChildren.add(child);
            mIsStateful |= child.isStateful();
!!!27992503.java!!!	setTree(inout treeRoot : VirtualRefBasePtr) : void
            super.setTree(treeRoot);
            for (int i = 0; i < mChildren.size(); i++) {
                mChildren.get(i).setTree(treeRoot);
            }
!!!27992631.java!!!	getNativePtr() : long
            return mNativePtr;
!!!27992759.java!!!	inflate(inout res : Resources, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
            final TypedArray a = obtainAttributes(res, theme, attrs,
                    R.styleable.VectorDrawableGroup);
            updateStateFromTypedArray(a);
            a.recycle();
!!!27992887.java!!!	updateStateFromTypedArray(inout a : TypedArray) : void
            // Account for any configuration changes.
            mChangingConfigurations |= a.getChangingConfigurations();

            // Extract the theme attributes, if any.
            mThemeAttrs = a.extractThemeAttrs();
            if (mTransform == null) {
                // Lazy initialization: If the group is created through copy constructor, this may
                // never get called.
                mTransform = new float[TRANSFORM_PROPERTY_COUNT];
            }
            boolean success = nGetGroupProperties(mNativePtr, mTransform, TRANSFORM_PROPERTY_COUNT);
            if (!success) {
                throw new RuntimeException("Error: inconsistent property count");
            }
            float rotate = a.getFloat(R.styleable.VectorDrawableGroup_rotation,
                    mTransform[ROTATE_INDEX]);
            float pivotX = a.getFloat(R.styleable.VectorDrawableGroup_pivotX,
                    mTransform[PIVOT_X_INDEX]);
            float pivotY = a.getFloat(R.styleable.VectorDrawableGroup_pivotY,
                    mTransform[PIVOT_Y_INDEX]);
            float scaleX = a.getFloat(R.styleable.VectorDrawableGroup_scaleX,
                    mTransform[SCALE_X_INDEX]);
            float scaleY = a.getFloat(R.styleable.VectorDrawableGroup_scaleY,
                    mTransform[SCALE_Y_INDEX]);
            float translateX = a.getFloat(R.styleable.VectorDrawableGroup_translateX,
                    mTransform[TRANSLATE_X_INDEX]);
            float translateY = a.getFloat(R.styleable.VectorDrawableGroup_translateY,
                    mTransform[TRANSLATE_Y_INDEX]);

            final String groupName = a.getString(R.styleable.VectorDrawableGroup_name);
            if (groupName != null) {
                mGroupName = groupName;
                nSetName(mNativePtr, mGroupName);
            }
             nUpdateGroupProperties(mNativePtr, rotate, pivotX, pivotY, scaleX, scaleY,
                     translateX, translateY);
!!!27993015.java!!!	onStateChange(inout stateSet : int) : boolean
            boolean changed = false;

            final ArrayList<VObject> children = mChildren;
            for (int i = 0, count = children.size(); i < count; i++) {
                final VObject child = children.get(i);
                if (child.isStateful()) {
                    changed |= child.onStateChange(stateSet);
                }
            }

            return changed;
!!!27993143.java!!!	isStateful() : boolean
            return mIsStateful;
!!!27993271.java!!!	getNativeSize() : int
            // Return the native allocation needed for the subtree.
            int size = NATIVE_ALLOCATION_SIZE;
            for (int i = 0; i < mChildren.size(); i++) {
                size += mChildren.get(i).getNativeSize();
            }
            return size;
!!!27993399.java!!!	canApplyTheme() : boolean
            if (mThemeAttrs != null) {
                return true;
            }

            final ArrayList<VObject> children = mChildren;
            for (int i = 0, count = children.size(); i < count; i++) {
                final VObject child = children.get(i);
                if (child.canApplyTheme()) {
                    return true;
                }
            }

            return false;
!!!27993527.java!!!	applyTheme(inout t : Resources::Theme) : void
            if (mThemeAttrs != null) {
                final TypedArray a = t.resolveAttributes(mThemeAttrs,
                        R.styleable.VectorDrawableGroup);
                updateStateFromTypedArray(a);
                a.recycle();
            }

            final ArrayList<VObject> children = mChildren;
            for (int i = 0, count = children.size(); i < count; i++) {
                final VObject child = children.get(i);
                if (child.canApplyTheme()) {
                    child.applyTheme(t);

                    // Applying a theme may have made the child stateful.
                    mIsStateful |= child.isStateful();
                }
            }
!!!27993655.java!!!	getRotation() : float
            return isTreeValid() ? nGetRotation(mNativePtr) : 0;
!!!27993783.java!!!	setRotation(in rotation : float) : void
            if (isTreeValid()) {
                nSetRotation(mNativePtr, rotation);
            }
!!!27993911.java!!!	getPivotX() : float
            return isTreeValid() ? nGetPivotX(mNativePtr) : 0;
!!!27994039.java!!!	setPivotX(in pivotX : float) : void
            if (isTreeValid()) {
                nSetPivotX(mNativePtr, pivotX);
            }
!!!27994167.java!!!	getPivotY() : float
            return isTreeValid() ? nGetPivotY(mNativePtr) : 0;
!!!27994295.java!!!	setPivotY(in pivotY : float) : void
            if (isTreeValid()) {
                nSetPivotY(mNativePtr, pivotY);
            }
!!!27994423.java!!!	getScaleX() : float
            return isTreeValid() ? nGetScaleX(mNativePtr) : 0;
!!!27994551.java!!!	setScaleX(in scaleX : float) : void
            if (isTreeValid()) {
                nSetScaleX(mNativePtr, scaleX);
            }
!!!27994679.java!!!	getScaleY() : float
            return isTreeValid() ? nGetScaleY(mNativePtr) : 0;
!!!27994807.java!!!	setScaleY(in scaleY : float) : void
            if (isTreeValid()) {
                nSetScaleY(mNativePtr, scaleY);
            }
!!!27994935.java!!!	getTranslateX() : float
            return isTreeValid() ? nGetTranslateX(mNativePtr) : 0;
!!!27995063.java!!!	setTranslateX(in translateX : float) : void
            if (isTreeValid()) {
                nSetTranslateX(mNativePtr, translateX);
            }
!!!27995191.java!!!	getTranslateY() : float
            return isTreeValid() ? nGetTranslateY(mNativePtr) : 0;
!!!27995319.java!!!	setTranslateY(in translateY : float) : void
            if (isTreeValid()) {
                nSetTranslateY(mNativePtr, translateY);
            }
