class InsetDrawable
!!!27929143.java!!!	InsetDrawable()
        this(new InsetState(null, null), null);
!!!27929271.java!!!	InsetDrawable(inout drawable : Drawable, in inset : int)
        this(drawable, inset, inset, inset, inset);
!!!27929399.java!!!	InsetDrawable(inout drawable : Drawable, in insetLeft : int, in insetTop : int, in insetRight : int, in insetBottom : int)
        this(new InsetState(null, null), null);

        mState.mInsetLeft = insetLeft;
        mState.mInsetTop = insetTop;
        mState.mInsetRight = insetRight;
        mState.mInsetBottom = insetBottom;

        setDrawable(drawable);
!!!27929527.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        final TypedArray a = obtainAttributes(r, theme, attrs, R.styleable.InsetDrawable);

        // Inflation will advance the XmlPullParser and AttributeSet.
        super.inflate(r, parser, attrs, theme);

        updateStateFromTypedArray(a);
        verifyRequiredAttributes(a);
        a.recycle();
!!!27929655.java!!!	applyTheme(inout t : Resources::Theme) : void
        super.applyTheme(t);

        final InsetState state = mState;
        if (state == null) {
            return;
        }

        if (state.mThemeAttrs != null) {
            final TypedArray a = t.resolveAttributes(state.mThemeAttrs, R.styleable.InsetDrawable);
            try {
                updateStateFromTypedArray(a);
                verifyRequiredAttributes(a);
            } catch (XmlPullParserException e) {
                rethrowAsRuntimeException(e);
            } finally {
                a.recycle();
            }
        }
!!!27929783.java!!!	verifyRequiredAttributes(inout a : TypedArray) : void
        // If we're not waiting on a theme, verify required attributes.
        if (getDrawable() == null && (mState.mThemeAttrs == null
                || mState.mThemeAttrs[R.styleable.InsetDrawable_drawable] == 0)) {
            throw new XmlPullParserException(a.getPositionDescription()
                    + ": <inset> tag requires a 'drawable' attribute or "
                    + "child tag defining a drawable");
        }
!!!27929911.java!!!	updateStateFromTypedArray(inout a : TypedArray) : void
        final InsetState state = mState;
        if (state == null) {
            return;
        }

        // Account for any configuration changes.
        state.mChangingConfigurations |= a.getChangingConfigurations();

        // Extract the theme attributes, if any.
        state.mThemeAttrs = a.extractThemeAttrs();

        // Inset attribute may be overridden by more specific attributes.
        if (a.hasValue(R.styleable.InsetDrawable_inset)) {
            final int inset = a.getDimensionPixelOffset(R.styleable.InsetDrawable_inset, 0);
            state.mInsetLeft = inset;
            state.mInsetTop = inset;
            state.mInsetRight = inset;
            state.mInsetBottom = inset;
        }

        state.mInsetLeft = a.getDimensionPixelOffset(
                R.styleable.InsetDrawable_insetLeft, state.mInsetLeft);
        state.mInsetRight = a.getDimensionPixelOffset(
                R.styleable.InsetDrawable_insetRight, state.mInsetRight);
        state.mInsetTop = a.getDimensionPixelOffset(
                R.styleable.InsetDrawable_insetTop, state.mInsetTop);
        state.mInsetBottom = a.getDimensionPixelOffset(
                R.styleable.InsetDrawable_insetBottom, state.mInsetBottom);
!!!27930039.java!!!	getPadding(inout padding : Rect) : boolean
        final boolean pad = super.getPadding(padding);

        padding.left += mState.mInsetLeft;
        padding.right += mState.mInsetRight;
        padding.top += mState.mInsetTop;
        padding.bottom += mState.mInsetBottom;

        return pad || (mState.mInsetLeft | mState.mInsetRight
                | mState.mInsetTop | mState.mInsetBottom) != 0;
!!!27930167.java!!!	getOpticalInsets() : Insets
        final Insets contentInsets = super.getOpticalInsets();
        return Insets.of(contentInsets.left + mState.mInsetLeft,
                contentInsets.top + mState.mInsetTop,
                contentInsets.right + mState.mInsetRight,
                contentInsets.bottom + mState.mInsetBottom);
!!!27930295.java!!!	getOpacity() : int
        final InsetState state = mState;
        final int opacity = getDrawable().getOpacity();
        if (opacity == PixelFormat.OPAQUE && (state.mInsetLeft > 0 || state.mInsetTop > 0
                || state.mInsetRight > 0 || state.mInsetBottom > 0)) {
            return PixelFormat.TRANSLUCENT;
        }
        return opacity;
!!!27930423.java!!!	onBoundsChange(inout bounds : Rect) : void
        final Rect r = mTmpRect;
        r.set(bounds);

        r.left += mState.mInsetLeft;
        r.top += mState.mInsetTop;
        r.right -= mState.mInsetRight;
        r.bottom -= mState.mInsetBottom;

        // Apply inset bounds to the wrapped drawable.
        super.onBoundsChange(r);
!!!27930551.java!!!	getIntrinsicWidth() : int
        final int childWidth = getDrawable().getIntrinsicWidth();
        if (childWidth < 0) {
            return -1;
        }
        return childWidth + mState.mInsetLeft + mState.mInsetRight;
!!!27930679.java!!!	getIntrinsicHeight() : int
        final int childHeight = getDrawable().getIntrinsicHeight();
        if (childHeight < 0) {
            return -1;
        }
        return childHeight + mState.mInsetTop + mState.mInsetBottom;
!!!27930807.java!!!	getOutline(inout outline : Outline) : void
        getDrawable().getOutline(outline);
!!!27930935.java!!!	mutateConstantState() : DrawableWrapper::DrawableWrapperState
        mState = new InsetState(mState, null);
        return mState;
!!!27931575.java!!!	InsetDrawable(inout state : InsetDrawable::InsetState, inout res : Resources)
        super(state, res);

        mState = state;
