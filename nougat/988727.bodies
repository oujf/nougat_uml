class ShapeDrawable
!!!27955511.java!!!	ShapeDrawable()
        this(new ShapeState(null), null);
!!!27955639.java!!!	ShapeDrawable(inout s : Shape)
        this(new ShapeState(null), null);

        mShapeState.mShape = s;
!!!27955767.java!!!	getShape() : Shape
        return mShapeState.mShape;
!!!27955895.java!!!	setShape(inout s : Shape) : void
        mShapeState.mShape = s;
        updateShape();
!!!27956023.java!!!	setShaderFactory(inout fact : ShapeDrawable::ShaderFactory) : void
        mShapeState.mShaderFactory = fact;
!!!27956151.java!!!	getShaderFactory() : ShapeDrawable::ShaderFactory
        return mShapeState.mShaderFactory;
!!!27956279.java!!!	getPaint() : Paint
        return mShapeState.mPaint;
!!!27956407.java!!!	setPadding(in left : int, in top : int, in right : int, in bottom : int) : void
        if ((left | top | right | bottom) == 0) {
            mShapeState.mPadding = null;
        } else {
            if (mShapeState.mPadding == null) {
                mShapeState.mPadding = new Rect();
            }
            mShapeState.mPadding.set(left, top, right, bottom);
        }
        invalidateSelf();
!!!27956535.java!!!	setPadding(inout padding : Rect) : void
        if (padding == null) {
            mShapeState.mPadding = null;
        } else {
            if (mShapeState.mPadding == null) {
                mShapeState.mPadding = new Rect();
            }
            mShapeState.mPadding.set(padding);
        }
        invalidateSelf();
!!!27956663.java!!!	setIntrinsicWidth(in width : int) : void
        mShapeState.mIntrinsicWidth = width;
        invalidateSelf();
!!!27956791.java!!!	setIntrinsicHeight(in height : int) : void
        mShapeState.mIntrinsicHeight = height;
        invalidateSelf();
!!!27956919.java!!!	getIntrinsicWidth() : int
        return mShapeState.mIntrinsicWidth;
!!!27957047.java!!!	getIntrinsicHeight() : int
        return mShapeState.mIntrinsicHeight;
!!!27957175.java!!!	getPadding(inout padding : Rect) : boolean
        if (mShapeState.mPadding != null) {
            padding.set(mShapeState.mPadding);
            return true;
        } else {
            return super.getPadding(padding);
        }
!!!27957303.java!!!	modulateAlpha(in paintAlpha : int, in alpha : int) : int
        int scale = alpha + (alpha >>> 7); // convert to 0..256
        return paintAlpha * scale >>> 8;
!!!27957431.java!!!	onDraw(inout shape : Shape, inout canvas : Canvas, inout paint : Paint) : void
        shape.draw(canvas, paint);
!!!27957559.java!!!	draw(inout canvas : Canvas) : void
        final Rect r = getBounds();
        final ShapeState state = mShapeState;
        final Paint paint = state.mPaint;

        final int prevAlpha = paint.getAlpha();
        paint.setAlpha(modulateAlpha(prevAlpha, state.mAlpha));

        // only draw shape if it may affect output
        if (paint.getAlpha() != 0 || paint.getXfermode() != null || paint.hasShadowLayer()) {
            final boolean clearColorFilter;
            if (mTintFilter != null && paint.getColorFilter() == null) {
                paint.setColorFilter(mTintFilter);
                clearColorFilter = true;
            } else {
                clearColorFilter = false;
            }

            if (state.mShape != null) {
                // need the save both for the translate, and for the (unknown)
                // Shape
                final int count = canvas.save();
                canvas.translate(r.left, r.top);
                onDraw(state.mShape, canvas, paint);
                canvas.restoreToCount(count);
            } else {
                canvas.drawRect(r, paint);
            }

            if (clearColorFilter) {
                paint.setColorFilter(null);
            }
        }

        // restore
        paint.setAlpha(prevAlpha);
!!!27957687.java!!!	getChangingConfigurations() : int
        return super.getChangingConfigurations() | mShapeState.getChangingConfigurations();
!!!27957815.java!!!	setAlpha(in alpha : int) : void
        mShapeState.mAlpha = alpha;
        invalidateSelf();
!!!27957943.java!!!	getAlpha() : int
        return mShapeState.mAlpha;
!!!27958071.java!!!	setTintList(inout tint : ColorStateList) : void
        mShapeState.mTint = tint;
        mTintFilter = updateTintFilter(mTintFilter, tint, mShapeState.mTintMode);
        invalidateSelf();
!!!27958199.java!!!	setTintMode(inout tintMode : PorterDuff::Mode) : void
        mShapeState.mTintMode = tintMode;
        mTintFilter = updateTintFilter(mTintFilter, mShapeState.mTint, tintMode);
        invalidateSelf();
!!!27958327.java!!!	setColorFilter(inout colorFilter : ColorFilter) : void
        mShapeState.mPaint.setColorFilter(colorFilter);
        invalidateSelf();
!!!27958455.java!!!	getOpacity() : int
        if (mShapeState.mShape == null) {
            final Paint p = mShapeState.mPaint;
            if (p.getXfermode() == null) {
                final int alpha = p.getAlpha();
                if (alpha == 0) {
                    return PixelFormat.TRANSPARENT;
                }
                if (alpha == 255) {
                    return PixelFormat.OPAQUE;
                }
            }
        }
        // not sure, so be safe
        return PixelFormat.TRANSLUCENT;
!!!27958583.java!!!	setDither(inout dither : boolean) : void
        mShapeState.mPaint.setDither(dither);
        invalidateSelf();
!!!27958711.java!!!	onBoundsChange(inout bounds : Rect) : void
        super.onBoundsChange(bounds);
        updateShape();
!!!27958839.java!!!	onStateChange(inout stateSet : int) : boolean
        final ShapeState state = mShapeState;
        if (state.mTint != null && state.mTintMode != null) {
            mTintFilter = updateTintFilter(mTintFilter, state.mTint, state.mTintMode);
            return true;
        }
        return false;
!!!27958967.java!!!	isStateful() : boolean
        final ShapeState s = mShapeState;
        return super.isStateful() || (s.mTint != null && s.mTint.isStateful());
!!!27959095.java!!!	inflateTag(inout name : String, inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : boolean

        if ("padding".equals(name)) {
            TypedArray a = r.obtainAttributes(attrs,
                    com.android.internal.R.styleable.ShapeDrawablePadding);
            setPadding(
                    a.getDimensionPixelOffset(
                            com.android.internal.R.styleable.ShapeDrawablePadding_left, 0),
                    a.getDimensionPixelOffset(
                            com.android.internal.R.styleable.ShapeDrawablePadding_top, 0),
                    a.getDimensionPixelOffset(
                            com.android.internal.R.styleable.ShapeDrawablePadding_right, 0),
                    a.getDimensionPixelOffset(
                            com.android.internal.R.styleable.ShapeDrawablePadding_bottom, 0));
            a.recycle();
            return true;
        }

        return false;
!!!27959223.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        super.inflate(r, parser, attrs, theme);

        final TypedArray a = obtainAttributes(r, theme, attrs, R.styleable.ShapeDrawable);
        updateStateFromTypedArray(a);
        a.recycle();

        int type;
        final int outerDepth = parser.getDepth();
        while ((type = parser.next()) != XmlPullParser.END_DOCUMENT
                && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
            if (type != XmlPullParser.START_TAG) {
                continue;
            }

            final String name = parser.getName();
            // call our subclass
            if (!inflateTag(name, r, parser, attrs)) {
                android.util.Log.w("drawable", "Unknown element: " + name +
                        " for ShapeDrawable " + this);
            }
        }

        // Update local properties.
        updateLocalState(r);
!!!27959351.java!!!	applyTheme(inout t : Resources::Theme) : void
        super.applyTheme(t);

        final ShapeState state = mShapeState;
        if (state == null) {
            return;
        }

        if (state.mThemeAttrs != null) {
            final TypedArray a = t.resolveAttributes(state.mThemeAttrs, R.styleable.ShapeDrawable);
            updateStateFromTypedArray(a);
            a.recycle();
        }

        // Apply theme to contained color state list.
        if (state.mTint != null && state.mTint.canApplyTheme()) {
            state.mTint = state.mTint.obtainForTheme(t);
        }

        // Update local properties.
        updateLocalState(t.getResources());
!!!27959479.java!!!	updateStateFromTypedArray(inout a : TypedArray) : void
        final ShapeState state = mShapeState;
        final Paint paint = state.mPaint;

        // Account for any configuration changes.
        state.mChangingConfigurations |= a.getChangingConfigurations();

        // Extract the theme attributes, if any.
        state.mThemeAttrs = a.extractThemeAttrs();

        int color = paint.getColor();
        color = a.getColor(R.styleable.ShapeDrawable_color, color);
        paint.setColor(color);

        boolean dither = paint.isDither();
        dither = a.getBoolean(R.styleable.ShapeDrawable_dither, dither);
        paint.setDither(dither);

        setIntrinsicWidth((int) a.getDimension(
                R.styleable.ShapeDrawable_width, state.mIntrinsicWidth));
        setIntrinsicHeight((int) a.getDimension(
                R.styleable.ShapeDrawable_height, state.mIntrinsicHeight));

        final int tintMode = a.getInt(R.styleable.ShapeDrawable_tintMode, -1);
        if (tintMode != -1) {
            state.mTintMode = Drawable.parseTintMode(tintMode, Mode.SRC_IN);
        }

        final ColorStateList tint = a.getColorStateList(R.styleable.ShapeDrawable_tint);
        if (tint != null) {
            state.mTint = tint;
        }
!!!27959607.java!!!	updateShape() : void
        if (mShapeState.mShape != null) {
            final Rect r = getBounds();
            final int w = r.width();
            final int h = r.height();

            mShapeState.mShape.resize(w, h);
            if (mShapeState.mShaderFactory != null) {
                mShapeState.mPaint.setShader(mShapeState.mShaderFactory.resize(w, h));
            }
        }
        invalidateSelf();
!!!27959735.java!!!	getOutline(inout outline : Outline) : void
        if (mShapeState.mShape != null) {
            mShapeState.mShape.getOutline(outline);
            outline.setAlpha(getAlpha() / 255.0f);
        }
!!!27959863.java!!!	getConstantState() : Drawable::ConstantState
        mShapeState.mChangingConfigurations = getChangingConfigurations();
        return mShapeState;
!!!27959991.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            if (mShapeState.mPaint != null) {
                mShapeState.mPaint = new Paint(mShapeState.mPaint);
            } else {
                mShapeState.mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
            }
            if (mShapeState.mPadding != null) {
                mShapeState.mPadding = new Rect(mShapeState.mPadding);
            } else {
                mShapeState.mPadding = new Rect();
            }
            try {
                mShapeState.mShape = mShapeState.mShape.clone();
            } catch (CloneNotSupportedException e) {
                return null;
            }
            mMutated = true;
        }
        return this;
!!!27960119.java!!!	clearMutated() : void
        super.clearMutated();
        mMutated = false;
!!!27960887.java!!!	ShapeDrawable(inout state : ShapeDrawable::ShapeState, inout res : Resources)
        mShapeState = state;

        updateLocalState(res);
!!!27961015.java!!!	updateLocalState(inout res : Resources) : void
        mTintFilter = updateTintFilter(mTintFilter, mShapeState.mTint, mShapeState.mTintMode);
