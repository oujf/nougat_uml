class RippleComponent
!!!27963063.java!!!	RippleComponent(inout owner : RippleDrawable, inout bounds : Rect, inout forceSoftware : boolean)
        mOwner = owner;
        mBounds = bounds;
        mForceSoftware = forceSoftware;
!!!27963191.java!!!	onBoundsChange() : void
        if (!mHasMaxRadius) {
            mTargetRadius = getTargetRadius(mBounds);
            onTargetRadiusChanged(mTargetRadius);
        }
!!!27963319.java!!!	setup(in maxRadius : float, in densityDpi : int) : void
        if (maxRadius >= 0) {
            mHasMaxRadius = true;
            mTargetRadius = maxRadius;
        } else {
            mTargetRadius = getTargetRadius(mBounds);
        }

        mDensityScale = densityDpi * DisplayMetrics.DENSITY_DEFAULT_SCALE;

        onTargetRadiusChanged(mTargetRadius);
!!!27963447.java!!!	getTargetRadius(inout bounds : Rect) : float
        final float halfWidth = bounds.width() / 2.0f;
        final float halfHeight = bounds.height() / 2.0f;
        return (float) Math.sqrt(halfWidth * halfWidth + halfHeight * halfHeight);
!!!27963575.java!!!	enter(inout fast : boolean) : void
        cancel();

        mSoftwareAnimator = createSoftwareEnter(fast);

        if (mSoftwareAnimator != null) {
            mSoftwareAnimator.start();
        }
!!!27963703.java!!!	exit() : void
        cancel();

        if (mHasDisplayListCanvas) {
            // We don't have access to a canvas here, but we expect one on the
            // next frame. We'll start the render thread animation then.
            mHasPendingHardwareAnimator = true;

            // Request another frame.
            invalidateSelf();
        } else {
            mSoftwareAnimator = createSoftwareExit();
            mSoftwareAnimator.start();
        }
!!!27963831.java!!!	cancel() : void
        cancelSoftwareAnimations();
        endHardwareAnimations();
!!!27963959.java!!!	end() : void
        endSoftwareAnimations();
        endHardwareAnimations();
!!!27964087.java!!!	draw(inout c : Canvas, inout p : Paint) : boolean
        final boolean hasDisplayListCanvas = !mForceSoftware && c.isHardwareAccelerated()
                && c instanceof DisplayListCanvas;
        if (mHasDisplayListCanvas != hasDisplayListCanvas) {
            mHasDisplayListCanvas = hasDisplayListCanvas;

            if (!hasDisplayListCanvas) {
                // We've switched from hardware to non-hardware mode. Panic.
                endHardwareAnimations();
            }
        }

        if (hasDisplayListCanvas) {
            final DisplayListCanvas hw = (DisplayListCanvas) c;
            startPendingAnimation(hw, p);

            if (mHardwareAnimator != null) {
                return drawHardware(hw);
            }
        }

        return drawSoftware(c, p);
!!!27964215.java!!!	getBounds(inout bounds : Rect) : void
        final int r = (int) Math.ceil(mTargetRadius);
        bounds.set(-r, -r, r, r);
!!!27964343.java!!!	startPendingAnimation(inout hw : DisplayListCanvas, inout p : Paint) : void
        if (mHasPendingHardwareAnimator) {
            mHasPendingHardwareAnimator = false;

            mHardwareAnimator = createHardwareExit(new Paint(p));
            mHardwareAnimator.start(hw);

            // Preemptively jump the software values to the end state now that
            // the hardware exit has read whatever values it needs.
            jumpValuesToExit();
        }
!!!27964471.java!!!	cancelSoftwareAnimations() : void
        if (mSoftwareAnimator != null) {
            mSoftwareAnimator.cancel();
            mSoftwareAnimator = null;
        }
!!!27964599.java!!!	endSoftwareAnimations() : void
        if (mSoftwareAnimator != null) {
            mSoftwareAnimator.end();
            mSoftwareAnimator = null;
        }
!!!27964727.java!!!	endHardwareAnimations() : void
        if (mHardwareAnimator != null) {
            mHardwareAnimator.end();
            mHardwareAnimator = null;
        }

        if (mHasPendingHardwareAnimator) {
            mHasPendingHardwareAnimator = false;

            // Manually jump values to their exited state. Normally we'd do that
            // later when starting the hardware exit, but we're aborting early.
            jumpValuesToExit();
        }
!!!27964855.java!!!	invalidateSelf() : void
        mOwner.invalidateSelf(false);
!!!27964983.java!!!	isHardwareAnimating() : boolean
        return mHardwareAnimator != null && mHardwareAnimator.isRunning()
                || mHasPendingHardwareAnimator;
!!!27965111.java!!!	onHotspotBoundsChanged() : void
        if (!mHasMaxRadius) {
            final float halfWidth = mBounds.width() / 2.0f;
            final float halfHeight = mBounds.height() / 2.0f;
            final float targetRadius = (float) Math.sqrt(halfWidth * halfWidth
                    + halfHeight * halfHeight);

            onTargetRadiusChanged(targetRadius);
        }
!!!27965239.java!!!	onTargetRadiusChanged(in targetRadius : float) : void
        // Stub.
