class RotateDrawable
!!!27978039.java!!!	RotateDrawable()
        this(new RotateState(null, null), null);
!!!27978167.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet, inout theme : Resources::Theme) : void
        final TypedArray a = obtainAttributes(r, theme, attrs, R.styleable.RotateDrawable);

        // Inflation will advance the XmlPullParser and AttributeSet.
        super.inflate(r, parser, attrs, theme);

        updateStateFromTypedArray(a);
        verifyRequiredAttributes(a);
        a.recycle();
!!!27978295.java!!!	applyTheme(inout t : Resources::Theme) : void
        super.applyTheme(t);

        final RotateState state = mState;
        if (state == null) {
            return;
        }

        if (state.mThemeAttrs != null) {
            final TypedArray a = t.resolveAttributes(state.mThemeAttrs, R.styleable.RotateDrawable);
            try {
                updateStateFromTypedArray(a);
                verifyRequiredAttributes(a);
            } catch (XmlPullParserException e) {
                rethrowAsRuntimeException(e);
            } finally {
                a.recycle();
            }
        }
!!!27978423.java!!!	verifyRequiredAttributes(inout a : TypedArray) : void
        // If we're not waiting on a theme, verify required attributes.
        if (getDrawable() == null && (mState.mThemeAttrs == null
                || mState.mThemeAttrs[R.styleable.RotateDrawable_drawable] == 0)) {
            throw new XmlPullParserException(a.getPositionDescription()
                    + ": <rotate> tag requires a 'drawable' attribute or "
                    + "child tag defining a drawable");
        }
!!!27978551.java!!!	updateStateFromTypedArray(inout a : TypedArray) : void
        final RotateState state = mState;
        if (state == null) {
            return;
        }

        // Account for any configuration changes.
        state.mChangingConfigurations |= a.getChangingConfigurations();

        // Extract the theme attributes, if any.
        state.mThemeAttrs = a.extractThemeAttrs();

        if (a.hasValue(R.styleable.RotateDrawable_pivotX)) {
            final TypedValue tv = a.peekValue(R.styleable.RotateDrawable_pivotX);
            state.mPivotXRel = tv.type == TypedValue.TYPE_FRACTION;
            state.mPivotX = state.mPivotXRel ? tv.getFraction(1.0f, 1.0f) : tv.getFloat();
        }

        if (a.hasValue(R.styleable.RotateDrawable_pivotY)) {
            final TypedValue tv = a.peekValue(R.styleable.RotateDrawable_pivotY);
            state.mPivotYRel = tv.type == TypedValue.TYPE_FRACTION;
            state.mPivotY = state.mPivotYRel ? tv.getFraction(1.0f, 1.0f) : tv.getFloat();
        }

        state.mFromDegrees = a.getFloat(
                R.styleable.RotateDrawable_fromDegrees, state.mFromDegrees);
        state.mToDegrees = a.getFloat(
                R.styleable.RotateDrawable_toDegrees, state.mToDegrees);
        state.mCurrentDegrees = state.mFromDegrees;
!!!27978679.java!!!	draw(inout canvas : Canvas) : void
        final Drawable d = getDrawable();
        final Rect bounds = d.getBounds();
        final int w = bounds.right - bounds.left;
        final int h = bounds.bottom - bounds.top;
        final RotateState st = mState;
        final float px = st.mPivotXRel ? (w * st.mPivotX) : st.mPivotX;
        final float py = st.mPivotYRel ? (h * st.mPivotY) : st.mPivotY;

        final int saveCount = canvas.save();
        canvas.rotate(st.mCurrentDegrees, px + bounds.left, py + bounds.top);
        d.draw(canvas);
        canvas.restoreToCount(saveCount);
!!!27978807.java!!!	setFromDegrees(in fromDegrees : float) : void
        if (mState.mFromDegrees != fromDegrees) {
            mState.mFromDegrees = fromDegrees;
            invalidateSelf();
        }
!!!27978935.java!!!	getFromDegrees() : float
        return mState.mFromDegrees;
!!!27979063.java!!!	setToDegrees(in toDegrees : float) : void
        if (mState.mToDegrees != toDegrees) {
            mState.mToDegrees = toDegrees;
            invalidateSelf();
        }
!!!27979191.java!!!	getToDegrees() : float
        return mState.mToDegrees;
!!!27979319.java!!!	setPivotX(in pivotX : float) : void
        if (mState.mPivotX != pivotX) {
            mState.mPivotX = pivotX;
            invalidateSelf();
        }
!!!27979447.java!!!	getPivotX() : float
        return mState.mPivotX;
!!!27979575.java!!!	setPivotXRelative(inout relative : boolean) : void
        if (mState.mPivotXRel != relative) {
            mState.mPivotXRel = relative;
            invalidateSelf();
        }
!!!27979703.java!!!	isPivotXRelative() : boolean
        return mState.mPivotXRel;
!!!27979831.java!!!	setPivotY(in pivotY : float) : void
        if (mState.mPivotY != pivotY) {
            mState.mPivotY = pivotY;
            invalidateSelf();
        }
!!!27979959.java!!!	getPivotY() : float
        return mState.mPivotY;
!!!27980087.java!!!	setPivotYRelative(inout relative : boolean) : void
        if (mState.mPivotYRel != relative) {
            mState.mPivotYRel = relative;
            invalidateSelf();
        }
!!!27980215.java!!!	isPivotYRelative() : boolean
        return mState.mPivotYRel;
!!!27980343.java!!!	onLevelChange(in level : int) : boolean
        super.onLevelChange(level);

        final float value = level / (float) MAX_LEVEL;
        final float degrees = MathUtils.lerp(mState.mFromDegrees, mState.mToDegrees, value);
        mState.mCurrentDegrees = degrees;

        invalidateSelf();
        return true;
!!!27980471.java!!!	mutateConstantState() : DrawableWrapper::DrawableWrapperState
        mState = new RotateState(mState, null);
        return mState;
!!!27980855.java!!!	RotateDrawable(inout state : RotateDrawable::RotateState, inout res : Resources)
        super(state, res);

        mState = state;
