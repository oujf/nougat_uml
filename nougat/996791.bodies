class KeyStore
!!!28041399.java!!!	KeyStore(inout binder : IKeystoreService)
        mBinder = binder;
        mContext = getApplicationContext();
!!!28041527.java!!!	getApplicationContext() : Context
        Application application = ActivityThread.currentApplication();
        if (application == null) {
            throw new IllegalStateException(
                    "Failed to obtain application Context from ActivityThread");
        }
        return application;
!!!28041655.java!!!	getInstance() : KeyStore
        IKeystoreService keystore = IKeystoreService.Stub.asInterface(ServiceManager
                .getService("android.security.keystore"));
        return new KeyStore(keystore);
!!!28041783.java!!!	getToken() : IBinder
        if (mToken == null) {
            mToken = new Binder();
        }
        return mToken;
!!!28041911.java!!!	state(in userId : int) : KeyStore::State
        final int ret;
        try {
            ret = mBinder.getState(userId);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            throw new AssertionError(e);
        }

        switch (ret) {
            case NO_ERROR: return State.UNLOCKED;
            case LOCKED: return State.LOCKED;
            case UNINITIALIZED: return State.UNINITIALIZED;
            default: throw new AssertionError(mError);
        }
!!!28042039.java!!!	state() : KeyStore::State
        return state(UserHandle.myUserId());
!!!28042167.java!!!	isUnlocked() : boolean
        return state() == State.UNLOCKED;
!!!28042295.java!!!	get(inout key : String, in uid : int) : byte
        try {
            return mBinder.get(key, uid);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return null;
        }
!!!28042423.java!!!	get(inout key : String) : byte
        return get(key, UID_SELF);
!!!28042551.java!!!	put(inout key : String, inout value : byte, in uid : int, in flags : int) : boolean
        return insert(key, value, uid, flags) == NO_ERROR;
!!!28042679.java!!!	insert(inout key : String, inout value : byte, in uid : int, in flags : int) : int
        try {
            return mBinder.insert(key, value, uid, flags);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return SYSTEM_ERROR;
        }
!!!28042807.java!!!	delete(inout key : String, in uid : int) : boolean
        try {
            int ret = mBinder.del(key, uid);
            return (ret == NO_ERROR || ret == KEY_NOT_FOUND);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28042935.java!!!	delete(inout key : String) : boolean
        return delete(key, UID_SELF);
!!!28043063.java!!!	contains(inout key : String, in uid : int) : boolean
        try {
            return mBinder.exist(key, uid) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28043191.java!!!	contains(inout key : String) : boolean
        return contains(key, UID_SELF);
!!!28043319.java!!!	list(inout prefix : String, in uid : int) : String
        try {
            return mBinder.list(prefix, uid);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return null;
        }
!!!28043447.java!!!	list(inout prefix : String) : String
        return list(prefix, UID_SELF);
!!!28043575.java!!!	reset() : boolean
        try {
            return mBinder.reset() == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28043703.java!!!	lock(in userId : int) : boolean
        try {
            return mBinder.lock(userId) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28043831.java!!!	lock() : boolean
        return lock(UserHandle.myUserId());
!!!28043959.java!!!	unlock(in userId : int, inout password : String) : boolean
        try {
            mError = mBinder.unlock(userId, password);
            return mError == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28044087.java!!!	unlock(inout password : String) : boolean
        return unlock(UserHandle.getUserId(Process.myUid()), password);
!!!28044215.java!!!	isEmpty(in userId : int) : boolean
        try {
            return mBinder.isEmpty(userId) != 0;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28044343.java!!!	isEmpty() : boolean
        return isEmpty(UserHandle.myUserId());
!!!28044471.java!!!	generate(inout key : String, in uid : int, in keyType : int, in keySize : int, in flags : int, inout args : byte) : boolean
        try {
            return mBinder.generate(key, uid, keyType, keySize, flags,
                    new KeystoreArguments(args)) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28044599.java!!!	importKey(inout keyName : String, inout key : byte, in uid : int, in flags : int) : boolean
        try {
            return mBinder.import_key(keyName, key, uid, flags) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28044727.java!!!	sign(inout key : String, inout data : byte) : byte
        try {
            return mBinder.sign(key, data);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return null;
        }
!!!28044855.java!!!	verify(inout key : String, inout data : byte, inout signature : byte) : boolean
        try {
            return mBinder.verify(key, data, signature) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28044983.java!!!	grant(inout key : String, in uid : int) : boolean
        try {
            return mBinder.grant(key, uid) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28045111.java!!!	ungrant(inout key : String, in uid : int) : boolean
        try {
            return mBinder.ungrant(key, uid) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28045239.java!!!	getmtime(inout key : String, in uid : int) : long
        try {
            final long millis = mBinder.getmtime(key, uid);
            if (millis == -1L) {
                return -1L;
            }

            return millis * 1000L;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return -1L;
        }
!!!28045367.java!!!	getmtime(inout key : String) : long
        return getmtime(key, UID_SELF);
!!!28045495.java!!!	duplicate(inout srcKey : String, in srcUid : int, inout destKey : String, in destUid : int) : boolean
        try {
            return mBinder.duplicate(srcKey, srcUid, destKey, destUid) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28045623.java!!!	isHardwareBacked() : boolean
        return isHardwareBacked("RSA");
!!!28045751.java!!!	isHardwareBacked(inout keyType : String) : boolean
        try {
            return mBinder.is_hardware_backed(keyType.toUpperCase(Locale.US)) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28045879.java!!!	clearUid(in uid : int) : boolean
        try {
            return mBinder.clear_uid(uid) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28046007.java!!!	getLastError() : int
        return mError;
!!!28046135.java!!!	addRngEntropy(inout data : byte) : boolean
        try {
            return mBinder.addRngEntropy(data) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28046263.java!!!	generateKey(inout alias : String, inout args : KeymasterArguments, inout entropy : byte, in uid : int, in flags : int, inout outCharacteristics : KeyCharacteristics) : int
        try {
            return mBinder.generateKey(alias, args, entropy, uid, flags, outCharacteristics);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return SYSTEM_ERROR;
        }
!!!28046391.java!!!	generateKey(inout alias : String, inout args : KeymasterArguments, inout entropy : byte, in flags : int, inout outCharacteristics : KeyCharacteristics) : int
        return generateKey(alias, args, entropy, UID_SELF, flags, outCharacteristics);
!!!28046519.java!!!	getKeyCharacteristics(inout alias : String, inout clientId : KeymasterBlob, inout appId : KeymasterBlob, in uid : int, inout outCharacteristics : KeyCharacteristics) : int
        try {
            return mBinder.getKeyCharacteristics(alias, clientId, appId, uid, outCharacteristics);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return SYSTEM_ERROR;
        }
!!!28046647.java!!!	getKeyCharacteristics(inout alias : String, inout clientId : KeymasterBlob, inout appId : KeymasterBlob, inout outCharacteristics : KeyCharacteristics) : int
        return getKeyCharacteristics(alias, clientId, appId, UID_SELF, outCharacteristics);
!!!28046775.java!!!	importKey(inout alias : String, inout args : KeymasterArguments, in format : int, inout keyData : byte, in uid : int, in flags : int, inout outCharacteristics : KeyCharacteristics) : int
        try {
            return mBinder.importKey(alias, args, format, keyData, uid, flags,
                    outCharacteristics);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return SYSTEM_ERROR;
        }
!!!28046903.java!!!	importKey(inout alias : String, inout args : KeymasterArguments, in format : int, inout keyData : byte, in flags : int, inout outCharacteristics : KeyCharacteristics) : int
        return importKey(alias, args, format, keyData, UID_SELF, flags, outCharacteristics);
!!!28047031.java!!!	exportKey(inout alias : String, in format : int, inout clientId : KeymasterBlob, inout appId : KeymasterBlob, in uid : int) : ExportResult
        try {
            return mBinder.exportKey(alias, format, clientId, appId, uid);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return null;
        }
!!!28047159.java!!!	exportKey(inout alias : String, in format : int, inout clientId : KeymasterBlob, inout appId : KeymasterBlob) : ExportResult
        return exportKey(alias, format, clientId, appId, UID_SELF);
!!!28047287.java!!!	begin(inout alias : String, in purpose : int, inout pruneable : boolean, inout args : KeymasterArguments, inout entropy : byte, in uid : int) : OperationResult
        try {
            return mBinder.begin(getToken(), alias, purpose, pruneable, args, entropy, uid);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return null;
        }
!!!28047415.java!!!	begin(inout alias : String, in purpose : int, inout pruneable : boolean, inout args : KeymasterArguments, inout entropy : byte) : OperationResult
        return begin(alias, purpose, pruneable, args, entropy, UID_SELF);
!!!28047543.java!!!	update(inout token : IBinder, inout arguments : KeymasterArguments, inout input : byte) : OperationResult
        try {
            return mBinder.update(token, arguments, input);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return null;
        }
!!!28047671.java!!!	finish(inout token : IBinder, inout arguments : KeymasterArguments, inout signature : byte, inout entropy : byte) : OperationResult
        try {
            return mBinder.finish(token, arguments, signature, entropy);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return null;
        }
!!!28047799.java!!!	finish(inout token : IBinder, inout arguments : KeymasterArguments, inout signature : byte) : OperationResult
        return finish(token, arguments, signature, null);
!!!28047927.java!!!	abort(inout token : IBinder) : int
        try {
            return mBinder.abort(token);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return SYSTEM_ERROR;
        }
!!!28048055.java!!!	isOperationAuthorized(inout token : IBinder) : boolean
        try {
            return mBinder.isOperationAuthorized(token);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28048183.java!!!	addAuthToken(inout authToken : byte) : int
        try {
            return mBinder.addAuthToken(authToken);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return SYSTEM_ERROR;
        }
!!!28048311.java!!!	onUserPasswordChanged(in userId : int, inout newPassword : String) : boolean
        // Parcel.cpp doesn't support deserializing null strings and treats them as "". Make that
        // explicit here.
        if (newPassword == null) {
            newPassword = "";
        }
        try {
            return mBinder.onUserPasswordChanged(userId, newPassword) == NO_ERROR;
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return false;
        }
!!!28048439.java!!!	onUserAdded(in userId : int, in parentId : int) : void
        try {
            mBinder.onUserAdded(userId, parentId);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
        }
!!!28048567.java!!!	onUserAdded(in userId : int) : void
        onUserAdded(userId, -1);
!!!28048695.java!!!	onUserRemoved(in userId : int) : void
        try {
            mBinder.onUserRemoved(userId);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
        }
!!!28048823.java!!!	onUserPasswordChanged(inout newPassword : String) : boolean
        return onUserPasswordChanged(UserHandle.getUserId(Process.myUid()), newPassword);
!!!28048951.java!!!	attestKey(inout alias : String, inout params : KeymasterArguments, inout outChain : KeymasterCertificateChain) : int
        try {
            return mBinder.attestKey(alias, params, outChain);
        } catch (RemoteException e) {
            Log.w(TAG, "Cannot connect to keystore", e);
            return SYSTEM_ERROR;
        }
!!!28049079.java!!!	getKeyStoreException(in errorCode : int) : KeyStoreException
        if (errorCode > 0) {
            // KeyStore layer error
            switch (errorCode) {
                case NO_ERROR:
                    return new KeyStoreException(errorCode, "OK");
                case LOCKED:
                    return new KeyStoreException(errorCode, "User authentication required");
                case UNINITIALIZED:
                    return new KeyStoreException(errorCode, "Keystore not initialized");
                case SYSTEM_ERROR:
                    return new KeyStoreException(errorCode, "System error");
                case PERMISSION_DENIED:
                    return new KeyStoreException(errorCode, "Permission denied");
                case KEY_NOT_FOUND:
                    return new KeyStoreException(errorCode, "Key not found");
                case VALUE_CORRUPTED:
                    return new KeyStoreException(errorCode, "Key blob corrupted");
                case OP_AUTH_NEEDED:
                    return new KeyStoreException(errorCode, "Operation requires authorization");
                default:
                    return new KeyStoreException(errorCode, String.valueOf(errorCode));
            }
        } else {
            // Keymaster layer error
            switch (errorCode) {
                case KeymasterDefs.KM_ERROR_INVALID_AUTHORIZATION_TIMEOUT:
                    // The name of this parameter significantly differs between Keymaster and
                    // framework APIs. Use the framework wording to make life easier for developers.
                    return new KeyStoreException(errorCode,
                            "Invalid user authentication validity duration");
                default:
                    return new KeyStoreException(errorCode,
                            KeymasterDefs.getErrorMessage(errorCode));
            }
        }
!!!28049207.java!!!	getInvalidKeyException(inout keystoreKeyAlias : String, in uid : int, inout e : KeyStoreException) : InvalidKeyException
        switch (e.getErrorCode()) {
            case LOCKED:
                return new UserNotAuthenticatedException();
            case KeymasterDefs.KM_ERROR_KEY_EXPIRED:
                return new KeyExpiredException();
            case KeymasterDefs.KM_ERROR_KEY_NOT_YET_VALID:
                return new KeyNotYetValidException();
            case KeymasterDefs.KM_ERROR_KEY_USER_NOT_AUTHENTICATED:
            case OP_AUTH_NEEDED:
            {
                // We now need to determine whether the key/operation can become usable if user
                // authentication is performed, or whether it can never become usable again.
                // User authentication requirements are contained in the key's characteristics. We
                // need to check whether these requirements can be be satisfied by asking the user
                // to authenticate.
                KeyCharacteristics keyCharacteristics = new KeyCharacteristics();
                int getKeyCharacteristicsErrorCode =
                        getKeyCharacteristics(keystoreKeyAlias, null, null, uid,
                                keyCharacteristics);
                if (getKeyCharacteristicsErrorCode != NO_ERROR) {
                    return new InvalidKeyException(
                            "Failed to obtained key characteristics",
                            getKeyStoreException(getKeyCharacteristicsErrorCode));
                }
                List<BigInteger> keySids =
                        keyCharacteristics.getUnsignedLongs(KeymasterDefs.KM_TAG_USER_SECURE_ID);
                if (keySids.isEmpty()) {
                    // Key is not bound to any SIDs -- no amount of authentication will help here.
                    return new KeyPermanentlyInvalidatedException();
                }
                long rootSid = GateKeeper.getSecureUserId();
                if ((rootSid != 0) && (keySids.contains(KeymasterArguments.toUint64(rootSid)))) {
                    // One of the key's SIDs is the current root SID -- user can be authenticated
                    // against that SID.
                    return new UserNotAuthenticatedException();
                }

                long fingerprintOnlySid = getFingerprintOnlySid();
                if ((fingerprintOnlySid != 0)
                        && (keySids.contains(KeymasterArguments.toUint64(fingerprintOnlySid)))) {
                    // One of the key's SIDs is the current fingerprint SID -- user can be
                    // authenticated against that SID.
                    return new UserNotAuthenticatedException();
                }

                // None of the key's SIDs can ever be authenticated
                return new KeyPermanentlyInvalidatedException();
            }
            default:
                return new InvalidKeyException("Keystore operation failed", e);
        }
!!!28049335.java!!!	getFingerprintOnlySid() : long
        FingerprintManager fingerprintManager = mContext.getSystemService(FingerprintManager.class);
        if (fingerprintManager == null) {
            return 0;
        }

        // TODO: Restore USE_FINGERPRINT permission check in
        // FingerprintManager.getAuthenticatorId once the ID is no longer needed here.
        return fingerprintManager.getAuthenticatorId();
!!!28049463.java!!!	getInvalidKeyException(inout keystoreKeyAlias : String, in uid : int, in errorCode : int) : InvalidKeyException
        return getInvalidKeyException(keystoreKeyAlias, uid, getKeyStoreException(errorCode));
